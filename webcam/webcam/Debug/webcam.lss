
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009c5c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409c5c  00409c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  00409c64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ce18  200009bc  0040a620  000209bc  2**2
                  ALLOC
  4 .stack        00003004  2000d7d4  00417438  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a30b  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003543  00000000  00000000  0003ad4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000083f8  00000000  00000000  0003e28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e78  00000000  00000000  00046685  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  000474fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008d3d  00000000  00000000  0004827d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001133c  00000000  00000000  00050fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000506a4  00000000  00000000  000622f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000495c  00000000  00000000  000b299c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 07 01 20 51 39 40 00 19 3a 40 00 19 3a 40 00     ... Q9@..:@..:@.
  400010:	19 3a 40 00 19 3a 40 00 19 3a 40 00 00 00 00 00     .:@..:@..:@.....
	...
  40002c:	19 3a 40 00 19 3a 40 00 00 00 00 00 19 3a 40 00     .:@..:@......:@.
  40003c:	19 3a 40 00 19 3a 40 00 19 3a 40 00 19 3a 40 00     .:@..:@..:@..:@.
  40004c:	19 3a 40 00 19 3a 40 00 19 3a 40 00 19 3a 40 00     .:@..:@..:@..:@.
  40005c:	00 00 00 00 19 3a 40 00 19 3a 40 00 00 00 00 00     .....:@..:@.....
  40006c:	b9 09 40 00 d1 09 40 00 00 00 00 00 01 1e 40 00     ..@...@.......@.
  40007c:	19 3a 40 00 00 00 00 00 00 00 00 00 19 3a 40 00     .:@..........:@.
  40008c:	19 3a 40 00 19 3a 40 00 19 3a 40 00 29 07 40 00     .:@..:@..:@.).@.
  40009c:	41 1c 40 00 19 3a 40 00 19 3a 40 00 00 00 00 00     A.@..:@..:@.....
	...
  4000b4:	19 3a 40 00 19 3a 40 00 19 3a 40 00 19 3a 40 00     .:@..:@..:@..:@.
  4000c4:	19 3a 40 00 19 3a 40 00                             .:@..:@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409c64 	.word	0x00409c64

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00409c64 	.word	0x00409c64
  40012c:	200009c0 	.word	0x200009c0
  400130:	00409c64 	.word	0x00409c64
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
	...

00400178 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400178:	b580      	push	{r7, lr}
  40017a:	b092      	sub	sp, #72	; 0x48
  40017c:	af00      	add	r7, sp, #0
  40017e:	60f8      	str	r0, [r7, #12]
  400180:	60b9      	str	r1, [r7, #8]
  400182:	607a      	str	r2, [r7, #4]
  400184:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40018a:	221c      	movs	r2, #28
  40018c:	2100      	movs	r1, #0
  40018e:	4618      	mov	r0, r3
  400190:	4b36      	ldr	r3, [pc, #216]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  400192:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400194:	f107 0310 	add.w	r3, r7, #16
  400198:	221c      	movs	r2, #28
  40019a:	2100      	movs	r1, #0
  40019c:	4618      	mov	r0, r3
  40019e:	4b33      	ldr	r3, [pc, #204]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  4001a0:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  4001a2:	683b      	ldr	r3, [r7, #0]
  4001a4:	2b02      	cmp	r3, #2
  4001a6:	d004      	beq.n	4001b2 <ssc_i2s_set_receiver+0x3a>
  4001a8:	2b03      	cmp	r3, #3
  4001aa:	d00a      	beq.n	4001c2 <ssc_i2s_set_receiver+0x4a>
  4001ac:	2b01      	cmp	r3, #1
  4001ae:	d004      	beq.n	4001ba <ssc_i2s_set_receiver+0x42>
  4001b0:	e00b      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	e007      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c0:	e003      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001c6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ca:	68bb      	ldr	r3, [r7, #8]
  4001cc:	f003 0302 	and.w	r3, r3, #2
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d022      	beq.n	40021a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	2b03      	cmp	r3, #3
  4001d8:	d102      	bne.n	4001e0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001da:	2301      	movs	r3, #1
  4001dc:	61bb      	str	r3, [r7, #24]
  4001de:	e001      	b.n	4001e4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001e4:	2300      	movs	r3, #0
  4001e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001e8:	2304      	movs	r3, #4
  4001ea:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001f0:	2300      	movs	r3, #0
  4001f2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400200:	3b01      	subs	r3, #1
  400202:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400204:	2380      	movs	r3, #128	; 0x80
  400206:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  400208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40020a:	3b01      	subs	r3, #1
  40020c:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  40020e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400212:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400214:	2300      	movs	r3, #0
  400216:	62bb      	str	r3, [r7, #40]	; 0x28
  400218:	e01b      	b.n	400252 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40021a:	68bb      	ldr	r3, [r7, #8]
  40021c:	f003 0308 	and.w	r3, r3, #8
  400220:	2b00      	cmp	r3, #0
  400222:	d016      	beq.n	400252 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400228:	2300      	movs	r3, #0
  40022a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40022c:	2300      	movs	r3, #0
  40022e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400230:	2300      	movs	r3, #0
  400232:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400234:	2301      	movs	r3, #1
  400236:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400238:	2300      	movs	r3, #0
  40023a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40023c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40023e:	3b01      	subs	r3, #1
  400240:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400242:	2380      	movs	r3, #128	; 0x80
  400244:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400246:	2300      	movs	r3, #0
  400248:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40024a:	2300      	movs	r3, #0
  40024c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40024e:	2300      	movs	r3, #0
  400250:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400252:	f107 0210 	add.w	r2, r7, #16
  400256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40025a:	4619      	mov	r1, r3
  40025c:	68f8      	ldr	r0, [r7, #12]
  40025e:	4b04      	ldr	r3, [pc, #16]	; (400270 <ssc_i2s_set_receiver+0xf8>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3748      	adds	r7, #72	; 0x48
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	004040a9 	.word	0x004040a9
  400270:	004002c5 	.word	0x004002c5

00400274 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400274:	b480      	push	{r7}
  400276:	b083      	sub	sp, #12
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400282:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	2200      	movs	r2, #0
  400288:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40028a:	687b      	ldr	r3, [r7, #4]
  40028c:	2200      	movs	r2, #0
  40028e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	2200      	movs	r2, #0
  400294:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	2200      	movs	r2, #0
  40029a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2200      	movs	r2, #0
  4002a0:	61da      	str	r2, [r3, #28]
}
  4002a2:	bf00      	nop
  4002a4:	370c      	adds	r7, #12
  4002a6:	46bd      	mov	sp, r7
  4002a8:	bc80      	pop	{r7}
  4002aa:	4770      	bx	lr

004002ac <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2201      	movs	r2, #1
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b085      	sub	sp, #20
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	60f8      	str	r0, [r7, #12]
  4002cc:	60b9      	str	r1, [r7, #8]
  4002ce:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002d0:	68bb      	ldr	r3, [r7, #8]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d103      	bne.n	4002de <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	2200      	movs	r2, #0
  4002da:	611a      	str	r2, [r3, #16]
  4002dc:	e01c      	b.n	400318 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	691a      	ldr	r2, [r3, #16]
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ea:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002ec:	68bb      	ldr	r3, [r7, #8]
  4002ee:	689b      	ldr	r3, [r3, #8]
  4002f0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002f6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4002f8:	68bb      	ldr	r3, [r7, #8]
  4002fa:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4002fc:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	691b      	ldr	r3, [r3, #16]
  400302:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400304:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400306:	68bb      	ldr	r3, [r7, #8]
  400308:	695b      	ldr	r3, [r3, #20]
  40030a:	041b      	lsls	r3, r3, #16
  40030c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400310:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400312:	431a      	orrs	r2, r3
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2b00      	cmp	r3, #0
  40031c:	d103      	bne.n	400326 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	2200      	movs	r2, #0
  400322:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400324:	e021      	b.n	40036a <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	695a      	ldr	r2, [r3, #20]
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400336:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	689b      	ldr	r3, [r3, #8]
  40033c:	021b      	lsls	r3, r3, #8
  40033e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400342:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	041b      	lsls	r3, r3, #16
  40034a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40034e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	691b      	ldr	r3, [r3, #16]
  400354:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400356:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40035c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400362:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400364:	431a      	orrs	r2, r3
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	615a      	str	r2, [r3, #20]
}
  40036a:	bf00      	nop
  40036c:	3714      	adds	r7, #20
  40036e:	46bd      	mov	sp, r7
  400370:	bc80      	pop	{r7}
  400372:	4770      	bx	lr

00400374 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400374:	b480      	push	{r7}
  400376:	b083      	sub	sp, #12
  400378:	af00      	add	r7, sp, #0
  40037a:	6078      	str	r0, [r7, #4]
  40037c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	683a      	ldr	r2, [r7, #0]
  400382:	645a      	str	r2, [r3, #68]	; 0x44
}
  400384:	bf00      	nop
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  400396:	687b      	ldr	r3, [r7, #4]
  400398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  40039a:	4618      	mov	r0, r3
  40039c:	370c      	adds	r7, #12
  40039e:	46bd      	mov	sp, r7
  4003a0:	bc80      	pop	{r7}
  4003a2:	4770      	bx	lr

004003a4 <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4003a4:	b480      	push	{r7}
  4003a6:	b085      	sub	sp, #20
  4003a8:	af00      	add	r7, sp, #0
  4003aa:	6078      	str	r0, [r7, #4]
  4003ac:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003ae:	f242 7310 	movw	r3, #10000	; 0x2710
  4003b2:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003b4:	e006      	b.n	4003c4 <ssc_read+0x20>
		if (!ul_timeout--) {
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	1e5a      	subs	r2, r3, #1
  4003ba:	60fa      	str	r2, [r7, #12]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d101      	bne.n	4003c4 <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003c0:	2301      	movs	r3, #1
  4003c2:	e00a      	b.n	4003da <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003c8:	f003 0310 	and.w	r3, r3, #16
  4003cc:	2b00      	cmp	r3, #0
  4003ce:	d0f2      	beq.n	4003b6 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003d0:	687b      	ldr	r3, [r7, #4]
  4003d2:	6a1a      	ldr	r2, [r3, #32]
  4003d4:	683b      	ldr	r3, [r7, #0]
  4003d6:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003d8:	2300      	movs	r3, #0
}
  4003da:	4618      	mov	r0, r3
  4003dc:	3714      	adds	r7, #20
  4003de:	46bd      	mov	sp, r7
  4003e0:	bc80      	pop	{r7}
  4003e2:	4770      	bx	lr

004003e4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003e4:	b480      	push	{r7}
  4003e6:	b087      	sub	sp, #28
  4003e8:	af00      	add	r7, sp, #0
  4003ea:	60f8      	str	r0, [r7, #12]
  4003ec:	60b9      	str	r1, [r7, #8]
  4003ee:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003f0:	68fa      	ldr	r2, [r7, #12]
  4003f2:	68bb      	ldr	r3, [r7, #8]
  4003f4:	019b      	lsls	r3, r3, #6
  4003f6:	4413      	add	r3, r2
  4003f8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003fa:	697b      	ldr	r3, [r7, #20]
  4003fc:	2202      	movs	r2, #2
  4003fe:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400400:	697b      	ldr	r3, [r7, #20]
  400402:	f04f 32ff 	mov.w	r2, #4294967295
  400406:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400408:	697b      	ldr	r3, [r7, #20]
  40040a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40040c:	697b      	ldr	r3, [r7, #20]
  40040e:	687a      	ldr	r2, [r7, #4]
  400410:	605a      	str	r2, [r3, #4]
}
  400412:	bf00      	nop
  400414:	371c      	adds	r7, #28
  400416:	46bd      	mov	sp, r7
  400418:	bc80      	pop	{r7}
  40041a:	4770      	bx	lr

0040041c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40041c:	b480      	push	{r7}
  40041e:	b083      	sub	sp, #12
  400420:	af00      	add	r7, sp, #0
  400422:	6078      	str	r0, [r7, #4]
  400424:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400426:	687a      	ldr	r2, [r7, #4]
  400428:	683b      	ldr	r3, [r7, #0]
  40042a:	019b      	lsls	r3, r3, #6
  40042c:	4413      	add	r3, r2
  40042e:	2205      	movs	r2, #5
  400430:	601a      	str	r2, [r3, #0]
}
  400432:	bf00      	nop
  400434:	370c      	adds	r7, #12
  400436:	46bd      	mov	sp, r7
  400438:	bc80      	pop	{r7}
  40043a:	4770      	bx	lr

0040043c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40043c:	b480      	push	{r7}
  40043e:	b085      	sub	sp, #20
  400440:	af00      	add	r7, sp, #0
  400442:	60f8      	str	r0, [r7, #12]
  400444:	60b9      	str	r1, [r7, #8]
  400446:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400448:	68fa      	ldr	r2, [r7, #12]
  40044a:	68bb      	ldr	r3, [r7, #8]
  40044c:	019b      	lsls	r3, r3, #6
  40044e:	4413      	add	r3, r2
  400450:	331c      	adds	r3, #28
  400452:	687a      	ldr	r2, [r7, #4]
  400454:	601a      	str	r2, [r3, #0]
}
  400456:	bf00      	nop
  400458:	3714      	adds	r7, #20
  40045a:	46bd      	mov	sp, r7
  40045c:	bc80      	pop	{r7}
  40045e:	4770      	bx	lr

00400460 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400460:	b480      	push	{r7}
  400462:	b087      	sub	sp, #28
  400464:	af00      	add	r7, sp, #0
  400466:	60f8      	str	r0, [r7, #12]
  400468:	60b9      	str	r1, [r7, #8]
  40046a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40046c:	68fa      	ldr	r2, [r7, #12]
  40046e:	68bb      	ldr	r3, [r7, #8]
  400470:	019b      	lsls	r3, r3, #6
  400472:	4413      	add	r3, r2
  400474:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400476:	697b      	ldr	r3, [r7, #20]
  400478:	687a      	ldr	r2, [r7, #4]
  40047a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40047c:	bf00      	nop
  40047e:	371c      	adds	r7, #28
  400480:	46bd      	mov	sp, r7
  400482:	bc80      	pop	{r7}
  400484:	4770      	bx	lr

00400486 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400486:	b480      	push	{r7}
  400488:	b085      	sub	sp, #20
  40048a:	af00      	add	r7, sp, #0
  40048c:	6078      	str	r0, [r7, #4]
  40048e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400490:	687a      	ldr	r2, [r7, #4]
  400492:	683b      	ldr	r3, [r7, #0]
  400494:	019b      	lsls	r3, r3, #6
  400496:	4413      	add	r3, r2
  400498:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40049a:	68fb      	ldr	r3, [r7, #12]
  40049c:	6a1b      	ldr	r3, [r3, #32]
}
  40049e:	4618      	mov	r0, r3
  4004a0:	3714      	adds	r7, #20
  4004a2:	46bd      	mov	sp, r7
  4004a4:	bc80      	pop	{r7}
  4004a6:	4770      	bx	lr

004004a8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004a8:	b480      	push	{r7}
  4004aa:	b08d      	sub	sp, #52	; 0x34
  4004ac:	af00      	add	r7, sp, #0
  4004ae:	60f8      	str	r0, [r7, #12]
  4004b0:	60b9      	str	r1, [r7, #8]
  4004b2:	607a      	str	r2, [r7, #4]
  4004b4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004b6:	2302      	movs	r3, #2
  4004b8:	613b      	str	r3, [r7, #16]
  4004ba:	2308      	movs	r3, #8
  4004bc:	617b      	str	r3, [r7, #20]
  4004be:	2320      	movs	r3, #32
  4004c0:	61bb      	str	r3, [r7, #24]
  4004c2:	2380      	movs	r3, #128	; 0x80
  4004c4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004c8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004ca:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004cc:	2300      	movs	r3, #0
  4004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004d0:	e01a      	b.n	400508 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004d4:	009b      	lsls	r3, r3, #2
  4004d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004da:	4413      	add	r3, r2
  4004dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004e0:	68ba      	ldr	r2, [r7, #8]
  4004e2:	fbb2 f3f3 	udiv	r3, r2, r3
  4004e6:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4004e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004ea:	0c1b      	lsrs	r3, r3, #16
  4004ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4004ee:	68fa      	ldr	r2, [r7, #12]
  4004f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004f2:	429a      	cmp	r2, r3
  4004f4:	d901      	bls.n	4004fa <tc_find_mck_divisor+0x52>
			return 0;
  4004f6:	2300      	movs	r3, #0
  4004f8:	e023      	b.n	400542 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4004fa:	68fa      	ldr	r2, [r7, #12]
  4004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004fe:	429a      	cmp	r2, r3
  400500:	d206      	bcs.n	400510 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400504:	3301      	adds	r3, #1
  400506:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40050a:	2b04      	cmp	r3, #4
  40050c:	d9e1      	bls.n	4004d2 <tc_find_mck_divisor+0x2a>
  40050e:	e000      	b.n	400512 <tc_find_mck_divisor+0x6a>
			break;
  400510:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400514:	2b04      	cmp	r3, #4
  400516:	d901      	bls.n	40051c <tc_find_mck_divisor+0x74>
		return 0;
  400518:	2300      	movs	r3, #0
  40051a:	e012      	b.n	400542 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40051c:	687b      	ldr	r3, [r7, #4]
  40051e:	2b00      	cmp	r3, #0
  400520:	d008      	beq.n	400534 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400524:	009b      	lsls	r3, r3, #2
  400526:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40052a:	4413      	add	r3, r2
  40052c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400534:	683b      	ldr	r3, [r7, #0]
  400536:	2b00      	cmp	r3, #0
  400538:	d002      	beq.n	400540 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40053a:	683b      	ldr	r3, [r7, #0]
  40053c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40053e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400540:	2301      	movs	r3, #1
}
  400542:	4618      	mov	r0, r3
  400544:	3734      	adds	r7, #52	; 0x34
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40055a:	605a      	str	r2, [r3, #4]

}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr
	...

00400568 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400568:	b480      	push	{r7}
  40056a:	b083      	sub	sp, #12
  40056c:	af00      	add	r7, sp, #0
  40056e:	4603      	mov	r3, r0
  400570:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400572:	4908      	ldr	r1, [pc, #32]	; (400594 <NVIC_EnableIRQ+0x2c>)
  400574:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400578:	095b      	lsrs	r3, r3, #5
  40057a:	79fa      	ldrb	r2, [r7, #7]
  40057c:	f002 021f 	and.w	r2, r2, #31
  400580:	2001      	movs	r0, #1
  400582:	fa00 f202 	lsl.w	r2, r0, r2
  400586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40058a:	bf00      	nop
  40058c:	370c      	adds	r7, #12
  40058e:	46bd      	mov	sp, r7
  400590:	bc80      	pop	{r7}
  400592:	4770      	bx	lr
  400594:	e000e100 	.word	0xe000e100

00400598 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400598:	b480      	push	{r7}
  40059a:	b083      	sub	sp, #12
  40059c:	af00      	add	r7, sp, #0
  40059e:	4603      	mov	r3, r0
  4005a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005a2:	4909      	ldr	r1, [pc, #36]	; (4005c8 <NVIC_DisableIRQ+0x30>)
  4005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005a8:	095b      	lsrs	r3, r3, #5
  4005aa:	79fa      	ldrb	r2, [r7, #7]
  4005ac:	f002 021f 	and.w	r2, r2, #31
  4005b0:	2001      	movs	r0, #1
  4005b2:	fa00 f202 	lsl.w	r2, r0, r2
  4005b6:	3320      	adds	r3, #32
  4005b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005bc:	bf00      	nop
  4005be:	370c      	adds	r7, #12
  4005c0:	46bd      	mov	sp, r7
  4005c2:	bc80      	pop	{r7}
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop
  4005c8:	e000e100 	.word	0xe000e100

004005cc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005cc:	b480      	push	{r7}
  4005ce:	b083      	sub	sp, #12
  4005d0:	af00      	add	r7, sp, #0
  4005d2:	4603      	mov	r3, r0
  4005d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005d6:	4909      	ldr	r1, [pc, #36]	; (4005fc <NVIC_ClearPendingIRQ+0x30>)
  4005d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005dc:	095b      	lsrs	r3, r3, #5
  4005de:	79fa      	ldrb	r2, [r7, #7]
  4005e0:	f002 021f 	and.w	r2, r2, #31
  4005e4:	2001      	movs	r0, #1
  4005e6:	fa00 f202 	lsl.w	r2, r0, r2
  4005ea:	3360      	adds	r3, #96	; 0x60
  4005ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005f0:	bf00      	nop
  4005f2:	370c      	adds	r7, #12
  4005f4:	46bd      	mov	sp, r7
  4005f6:	bc80      	pop	{r7}
  4005f8:	4770      	bx	lr
  4005fa:	bf00      	nop
  4005fc:	e000e100 	.word	0xe000e100

00400600 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	4603      	mov	r3, r0
  400608:	6039      	str	r1, [r7, #0]
  40060a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400610:	2b00      	cmp	r3, #0
  400612:	da0b      	bge.n	40062c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400614:	490d      	ldr	r1, [pc, #52]	; (40064c <NVIC_SetPriority+0x4c>)
  400616:	79fb      	ldrb	r3, [r7, #7]
  400618:	f003 030f 	and.w	r3, r3, #15
  40061c:	3b04      	subs	r3, #4
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	b2d2      	uxtb	r2, r2
  400622:	0112      	lsls	r2, r2, #4
  400624:	b2d2      	uxtb	r2, r2
  400626:	440b      	add	r3, r1
  400628:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40062a:	e009      	b.n	400640 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40062c:	4908      	ldr	r1, [pc, #32]	; (400650 <NVIC_SetPriority+0x50>)
  40062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400632:	683a      	ldr	r2, [r7, #0]
  400634:	b2d2      	uxtb	r2, r2
  400636:	0112      	lsls	r2, r2, #4
  400638:	b2d2      	uxtb	r2, r2
  40063a:	440b      	add	r3, r1
  40063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400640:	bf00      	nop
  400642:	370c      	adds	r7, #12
  400644:	46bd      	mov	sp, r7
  400646:	bc80      	pop	{r7}
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	e000ed00 	.word	0xe000ed00
  400650:	e000e100 	.word	0xe000e100

00400654 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400654:	b480      	push	{r7}
  400656:	b083      	sub	sp, #12
  400658:	af00      	add	r7, sp, #0
  40065a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40065c:	687b      	ldr	r3, [r7, #4]
  40065e:	2b07      	cmp	r3, #7
  400660:	d825      	bhi.n	4006ae <osc_get_rate+0x5a>
  400662:	a201      	add	r2, pc, #4	; (adr r2, 400668 <osc_get_rate+0x14>)
  400664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400668:	00400689 	.word	0x00400689
  40066c:	0040068f 	.word	0x0040068f
  400670:	00400695 	.word	0x00400695
  400674:	0040069b 	.word	0x0040069b
  400678:	0040069f 	.word	0x0040069f
  40067c:	004006a3 	.word	0x004006a3
  400680:	004006a7 	.word	0x004006a7
  400684:	004006ab 	.word	0x004006ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400688:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40068c:	e010      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400692:	e00d      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400698:	e00a      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40069a:	4b08      	ldr	r3, [pc, #32]	; (4006bc <osc_get_rate+0x68>)
  40069c:	e008      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40069e:	4b08      	ldr	r3, [pc, #32]	; (4006c0 <osc_get_rate+0x6c>)
  4006a0:	e006      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006a2:	4b08      	ldr	r3, [pc, #32]	; (4006c4 <osc_get_rate+0x70>)
  4006a4:	e004      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <osc_get_rate+0x70>)
  4006a8:	e002      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006aa:	4b06      	ldr	r3, [pc, #24]	; (4006c4 <osc_get_rate+0x70>)
  4006ac:	e000      	b.n	4006b0 <osc_get_rate+0x5c>
	}

	return 0;
  4006ae:	2300      	movs	r3, #0
}
  4006b0:	4618      	mov	r0, r3
  4006b2:	370c      	adds	r7, #12
  4006b4:	46bd      	mov	sp, r7
  4006b6:	bc80      	pop	{r7}
  4006b8:	4770      	bx	lr
  4006ba:	bf00      	nop
  4006bc:	003d0900 	.word	0x003d0900
  4006c0:	007a1200 	.word	0x007a1200
  4006c4:	00b71b00 	.word	0x00b71b00

004006c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006c8:	b580      	push	{r7, lr}
  4006ca:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006cc:	2006      	movs	r0, #6
  4006ce:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <sysclk_get_main_hz+0x18>)
  4006d0:	4798      	blx	r3
  4006d2:	4602      	mov	r2, r0
  4006d4:	4613      	mov	r3, r2
  4006d6:	009b      	lsls	r3, r3, #2
  4006d8:	4413      	add	r3, r2
  4006da:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006dc:	4618      	mov	r0, r3
  4006de:	bd80      	pop	{r7, pc}
  4006e0:	00400655 	.word	0x00400655

004006e4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006e4:	b580      	push	{r7, lr}
  4006e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <sysclk_get_cpu_hz+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	4603      	mov	r3, r0
  4006ee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006f0:	4618      	mov	r0, r3
  4006f2:	bd80      	pop	{r7, pc}
  4006f4:	004006c9 	.word	0x004006c9

004006f8 <start_i2s_capture>:
/** Receiver buffer content. */
volatile uint16_t i2s_rec_buf[AUDIO_BUFFER_SIZE] = {0};
	
volatile uint8_t capture_toggle = 0;

void start_i2s_capture(void){ ssc_enable_interrupt(SSC, SSC_IDR_RXRDY); }
  4006f8:	b580      	push	{r7, lr}
  4006fa:	af00      	add	r7, sp, #0
  4006fc:	2110      	movs	r1, #16
  4006fe:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400702:	4b02      	ldr	r3, [pc, #8]	; (40070c <start_i2s_capture+0x14>)
  400704:	4798      	blx	r3
  400706:	bf00      	nop
  400708:	bd80      	pop	{r7, pc}
  40070a:	bf00      	nop
  40070c:	00400375 	.word	0x00400375

00400710 <modify_data>:

// get rid of zero padding and tristated signal
uint16_t modify_data(uint32_t data_to_modify) {
  400710:	b480      	push	{r7}
  400712:	b083      	sub	sp, #12
  400714:	af00      	add	r7, sp, #0
  400716:	6078      	str	r0, [r7, #4]
	return (uint16_t) (data_to_modify >> 16);
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	0c1b      	lsrs	r3, r3, #16
  40071c:	b29b      	uxth	r3, r3
}
  40071e:	4618      	mov	r0, r3
  400720:	370c      	adds	r7, #12
  400722:	46bd      	mov	sp, r7
  400724:	bc80      	pop	{r7}
  400726:	4770      	bx	lr

00400728 <SSC_Handler>:

/**
 * \brief Synchronous Serial Controller Handler.
 */
void SSC_Handler(void) {
  400728:	b590      	push	{r4, r7, lr}
  40072a:	b083      	sub	sp, #12
  40072c:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40072e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400732:	4b19      	ldr	r3, [pc, #100]	; (400798 <SSC_Handler+0x70>)
  400734:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  400736:	1d3b      	adds	r3, r7, #4
  400738:	4619      	mov	r1, r3
  40073a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40073e:	4b17      	ldr	r3, [pc, #92]	; (40079c <SSC_Handler+0x74>)
  400740:	4798      	blx	r3
	
	if(!(capture_toggle++ % 2) && i2s_capture_index < AUDIO_BUFFER_SIZE)
  400742:	4b17      	ldr	r3, [pc, #92]	; (4007a0 <SSC_Handler+0x78>)
  400744:	781b      	ldrb	r3, [r3, #0]
  400746:	b2db      	uxtb	r3, r3
  400748:	1c5a      	adds	r2, r3, #1
  40074a:	b2d1      	uxtb	r1, r2
  40074c:	4a14      	ldr	r2, [pc, #80]	; (4007a0 <SSC_Handler+0x78>)
  40074e:	7011      	strb	r1, [r2, #0]
  400750:	f003 0301 	and.w	r3, r3, #1
  400754:	b2db      	uxtb	r3, r3
  400756:	2b00      	cmp	r3, #0
  400758:	d112      	bne.n	400780 <SSC_Handler+0x58>
  40075a:	4b12      	ldr	r3, [pc, #72]	; (4007a4 <SSC_Handler+0x7c>)
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400762:	d20d      	bcs.n	400780 <SSC_Handler+0x58>
		i2s_rec_buf[i2s_capture_index++] = modify_data(ul_data);
  400764:	4b0f      	ldr	r3, [pc, #60]	; (4007a4 <SSC_Handler+0x7c>)
  400766:	681c      	ldr	r4, [r3, #0]
  400768:	1c63      	adds	r3, r4, #1
  40076a:	4a0e      	ldr	r2, [pc, #56]	; (4007a4 <SSC_Handler+0x7c>)
  40076c:	6013      	str	r3, [r2, #0]
  40076e:	687b      	ldr	r3, [r7, #4]
  400770:	4618      	mov	r0, r3
  400772:	4b0d      	ldr	r3, [pc, #52]	; (4007a8 <SSC_Handler+0x80>)
  400774:	4798      	blx	r3
  400776:	4603      	mov	r3, r0
  400778:	461a      	mov	r2, r3
  40077a:	4b0c      	ldr	r3, [pc, #48]	; (4007ac <SSC_Handler+0x84>)
  40077c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (i2s_capture_index >= AUDIO_BUFFER_SIZE)// && !buffer_filled)
  400780:	4b08      	ldr	r3, [pc, #32]	; (4007a4 <SSC_Handler+0x7c>)
  400782:	681b      	ldr	r3, [r3, #0]
  400784:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400788:	d302      	bcc.n	400790 <SSC_Handler+0x68>
		//buffer_filled = 1;
		i2s_capture_index = 0;
  40078a:	4b06      	ldr	r3, [pc, #24]	; (4007a4 <SSC_Handler+0x7c>)
  40078c:	2200      	movs	r2, #0
  40078e:	601a      	str	r2, [r3, #0]
}
  400790:	bf00      	nop
  400792:	370c      	adds	r7, #12
  400794:	46bd      	mov	sp, r7
  400796:	bd90      	pop	{r4, r7, pc}
  400798:	0040038f 	.word	0x0040038f
  40079c:	004003a5 	.word	0x004003a5
  4007a0:	200086dc 	.word	0x200086dc
  4007a4:	200009d8 	.word	0x200009d8
  4007a8:	00400711 	.word	0x00400711
  4007ac:	200009dc 	.word	0x200009dc

004007b0 <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void) {
  4007b0:	b590      	push	{r4, r7, lr}
  4007b2:	b085      	sub	sp, #20
  4007b4:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007b6:	2016      	movs	r0, #22
  4007b8:	4b18      	ldr	r3, [pc, #96]	; (40081c <configure_i2s+0x6c>)
  4007ba:	4798      	blx	r3
	ssc_reset(SSC);
  4007bc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007c0:	4b17      	ldr	r3, [pc, #92]	; (400820 <configure_i2s+0x70>)
  4007c2:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007c4:	4b17      	ldr	r3, [pc, #92]	; (400824 <configure_i2s+0x74>)
  4007c6:	4798      	blx	r3
  4007c8:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007ca:	687a      	ldr	r2, [r7, #4]
  4007cc:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007d0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007d4:	4b14      	ldr	r3, [pc, #80]	; (400828 <configure_i2s+0x78>)
  4007d6:	4798      	blx	r3
  4007d8:	4603      	mov	r3, r0
  4007da:	2b00      	cmp	r3, #0
  4007dc:	d11a      	bne.n	400814 <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  4007de:	2320      	movs	r3, #32
  4007e0:	9300      	str	r3, [sp, #0]
  4007e2:	2301      	movs	r3, #1
  4007e4:	2202      	movs	r2, #2
  4007e6:	2102      	movs	r1, #2
  4007e8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007ec:	4c0f      	ldr	r4, [pc, #60]	; (40082c <configure_i2s+0x7c>)
  4007ee:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  4007f0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007f4:	4b0e      	ldr	r3, [pc, #56]	; (400830 <configure_i2s+0x80>)
  4007f6:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  4007f8:	2016      	movs	r0, #22
  4007fa:	4b0e      	ldr	r3, [pc, #56]	; (400834 <configure_i2s+0x84>)
  4007fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  4007fe:	2016      	movs	r0, #22
  400800:	4b0d      	ldr	r3, [pc, #52]	; (400838 <configure_i2s+0x88>)
  400802:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  400804:	2104      	movs	r1, #4
  400806:	2016      	movs	r0, #22
  400808:	4b0c      	ldr	r3, [pc, #48]	; (40083c <configure_i2s+0x8c>)
  40080a:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  40080c:	2016      	movs	r0, #22
  40080e:	4b0c      	ldr	r3, [pc, #48]	; (400840 <configure_i2s+0x90>)
  400810:	4798      	blx	r3
  400812:	e000      	b.n	400816 <configure_i2s+0x66>
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  400814:	bf00      	nop
  400816:	370c      	adds	r7, #12
  400818:	46bd      	mov	sp, r7
  40081a:	bd90      	pop	{r4, r7, pc}
  40081c:	00403539 	.word	0x00403539
  400820:	00400275 	.word	0x00400275
  400824:	004006e5 	.word	0x004006e5
  400828:	00400139 	.word	0x00400139
  40082c:	00400179 	.word	0x00400179
  400830:	004002ad 	.word	0x004002ad
  400834:	00400599 	.word	0x00400599
  400838:	004005cd 	.word	0x004005cd
  40083c:	00400601 	.word	0x00400601
  400840:	00400569 	.word	0x00400569

00400844 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400844:	b580      	push	{r7, lr}
  400846:	b084      	sub	sp, #16
  400848:	af00      	add	r7, sp, #0
  40084a:	6078      	str	r0, [r7, #4]
  40084c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40084e:	6878      	ldr	r0, [r7, #4]
  400850:	4b2c      	ldr	r3, [pc, #176]	; (400904 <pio_handler_process+0xc0>)
  400852:	4798      	blx	r3
  400854:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400856:	6878      	ldr	r0, [r7, #4]
  400858:	4b2b      	ldr	r3, [pc, #172]	; (400908 <pio_handler_process+0xc4>)
  40085a:	4798      	blx	r3
  40085c:	4602      	mov	r2, r0
  40085e:	68fb      	ldr	r3, [r7, #12]
  400860:	4013      	ands	r3, r2
  400862:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400864:	68fb      	ldr	r3, [r7, #12]
  400866:	2b00      	cmp	r3, #0
  400868:	d03c      	beq.n	4008e4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40086a:	2300      	movs	r3, #0
  40086c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40086e:	e034      	b.n	4008da <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400870:	4a26      	ldr	r2, [pc, #152]	; (40090c <pio_handler_process+0xc8>)
  400872:	68bb      	ldr	r3, [r7, #8]
  400874:	011b      	lsls	r3, r3, #4
  400876:	4413      	add	r3, r2
  400878:	681a      	ldr	r2, [r3, #0]
  40087a:	683b      	ldr	r3, [r7, #0]
  40087c:	429a      	cmp	r2, r3
  40087e:	d126      	bne.n	4008ce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400880:	4a22      	ldr	r2, [pc, #136]	; (40090c <pio_handler_process+0xc8>)
  400882:	68bb      	ldr	r3, [r7, #8]
  400884:	011b      	lsls	r3, r3, #4
  400886:	4413      	add	r3, r2
  400888:	3304      	adds	r3, #4
  40088a:	681a      	ldr	r2, [r3, #0]
  40088c:	68fb      	ldr	r3, [r7, #12]
  40088e:	4013      	ands	r3, r2
  400890:	2b00      	cmp	r3, #0
  400892:	d01c      	beq.n	4008ce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400894:	4a1d      	ldr	r2, [pc, #116]	; (40090c <pio_handler_process+0xc8>)
  400896:	68bb      	ldr	r3, [r7, #8]
  400898:	011b      	lsls	r3, r3, #4
  40089a:	4413      	add	r3, r2
  40089c:	330c      	adds	r3, #12
  40089e:	681b      	ldr	r3, [r3, #0]
  4008a0:	491a      	ldr	r1, [pc, #104]	; (40090c <pio_handler_process+0xc8>)
  4008a2:	68ba      	ldr	r2, [r7, #8]
  4008a4:	0112      	lsls	r2, r2, #4
  4008a6:	440a      	add	r2, r1
  4008a8:	6810      	ldr	r0, [r2, #0]
  4008aa:	4918      	ldr	r1, [pc, #96]	; (40090c <pio_handler_process+0xc8>)
  4008ac:	68ba      	ldr	r2, [r7, #8]
  4008ae:	0112      	lsls	r2, r2, #4
  4008b0:	440a      	add	r2, r1
  4008b2:	3204      	adds	r2, #4
  4008b4:	6812      	ldr	r2, [r2, #0]
  4008b6:	4611      	mov	r1, r2
  4008b8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008ba:	4a14      	ldr	r2, [pc, #80]	; (40090c <pio_handler_process+0xc8>)
  4008bc:	68bb      	ldr	r3, [r7, #8]
  4008be:	011b      	lsls	r3, r3, #4
  4008c0:	4413      	add	r3, r2
  4008c2:	3304      	adds	r3, #4
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	43db      	mvns	r3, r3
  4008c8:	68fa      	ldr	r2, [r7, #12]
  4008ca:	4013      	ands	r3, r2
  4008cc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008ce:	68bb      	ldr	r3, [r7, #8]
  4008d0:	3301      	adds	r3, #1
  4008d2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008d4:	68bb      	ldr	r3, [r7, #8]
  4008d6:	2b06      	cmp	r3, #6
  4008d8:	d803      	bhi.n	4008e2 <pio_handler_process+0x9e>
		while (status != 0) {
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	2b00      	cmp	r3, #0
  4008de:	d1c7      	bne.n	400870 <pio_handler_process+0x2c>
  4008e0:	e000      	b.n	4008e4 <pio_handler_process+0xa0>
				break;
  4008e2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008e4:	4b0a      	ldr	r3, [pc, #40]	; (400910 <pio_handler_process+0xcc>)
  4008e6:	681b      	ldr	r3, [r3, #0]
  4008e8:	2b00      	cmp	r3, #0
  4008ea:	d007      	beq.n	4008fc <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4008ec:	4b09      	ldr	r3, [pc, #36]	; (400914 <pio_handler_process+0xd0>)
  4008ee:	681b      	ldr	r3, [r3, #0]
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	d003      	beq.n	4008fc <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4008f4:	4b07      	ldr	r3, [pc, #28]	; (400914 <pio_handler_process+0xd0>)
  4008f6:	681b      	ldr	r3, [r3, #0]
  4008f8:	6878      	ldr	r0, [r7, #4]
  4008fa:	4798      	blx	r3
		}
	}
#endif
}
  4008fc:	bf00      	nop
  4008fe:	3710      	adds	r7, #16
  400900:	46bd      	mov	sp, r7
  400902:	bd80      	pop	{r7, pc}
  400904:	00403043 	.word	0x00403043
  400908:	00403059 	.word	0x00403059
  40090c:	200086e0 	.word	0x200086e0
  400910:	2000d7cc 	.word	0x2000d7cc
  400914:	20008754 	.word	0x20008754

00400918 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400918:	b580      	push	{r7, lr}
  40091a:	b086      	sub	sp, #24
  40091c:	af00      	add	r7, sp, #0
  40091e:	60f8      	str	r0, [r7, #12]
  400920:	60b9      	str	r1, [r7, #8]
  400922:	607a      	str	r2, [r7, #4]
  400924:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400926:	4b21      	ldr	r3, [pc, #132]	; (4009ac <pio_handler_set+0x94>)
  400928:	681b      	ldr	r3, [r3, #0]
  40092a:	2b06      	cmp	r3, #6
  40092c:	d901      	bls.n	400932 <pio_handler_set+0x1a>
		return 1;
  40092e:	2301      	movs	r3, #1
  400930:	e038      	b.n	4009a4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400932:	2300      	movs	r3, #0
  400934:	75fb      	strb	r3, [r7, #23]
  400936:	e011      	b.n	40095c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400938:	7dfb      	ldrb	r3, [r7, #23]
  40093a:	011b      	lsls	r3, r3, #4
  40093c:	4a1c      	ldr	r2, [pc, #112]	; (4009b0 <pio_handler_set+0x98>)
  40093e:	4413      	add	r3, r2
  400940:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400942:	693b      	ldr	r3, [r7, #16]
  400944:	681a      	ldr	r2, [r3, #0]
  400946:	68bb      	ldr	r3, [r7, #8]
  400948:	429a      	cmp	r2, r3
  40094a:	d104      	bne.n	400956 <pio_handler_set+0x3e>
  40094c:	693b      	ldr	r3, [r7, #16]
  40094e:	685a      	ldr	r2, [r3, #4]
  400950:	687b      	ldr	r3, [r7, #4]
  400952:	429a      	cmp	r2, r3
  400954:	d008      	beq.n	400968 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400956:	7dfb      	ldrb	r3, [r7, #23]
  400958:	3301      	adds	r3, #1
  40095a:	75fb      	strb	r3, [r7, #23]
  40095c:	7dfa      	ldrb	r2, [r7, #23]
  40095e:	4b13      	ldr	r3, [pc, #76]	; (4009ac <pio_handler_set+0x94>)
  400960:	681b      	ldr	r3, [r3, #0]
  400962:	429a      	cmp	r2, r3
  400964:	d9e8      	bls.n	400938 <pio_handler_set+0x20>
  400966:	e000      	b.n	40096a <pio_handler_set+0x52>
			break;
  400968:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40096a:	693b      	ldr	r3, [r7, #16]
  40096c:	68ba      	ldr	r2, [r7, #8]
  40096e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400970:	693b      	ldr	r3, [r7, #16]
  400972:	687a      	ldr	r2, [r7, #4]
  400974:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400976:	693b      	ldr	r3, [r7, #16]
  400978:	683a      	ldr	r2, [r7, #0]
  40097a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40097c:	693b      	ldr	r3, [r7, #16]
  40097e:	6a3a      	ldr	r2, [r7, #32]
  400980:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400982:	7dfa      	ldrb	r2, [r7, #23]
  400984:	4b09      	ldr	r3, [pc, #36]	; (4009ac <pio_handler_set+0x94>)
  400986:	681b      	ldr	r3, [r3, #0]
  400988:	3301      	adds	r3, #1
  40098a:	429a      	cmp	r2, r3
  40098c:	d104      	bne.n	400998 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40098e:	4b07      	ldr	r3, [pc, #28]	; (4009ac <pio_handler_set+0x94>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	3301      	adds	r3, #1
  400994:	4a05      	ldr	r2, [pc, #20]	; (4009ac <pio_handler_set+0x94>)
  400996:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400998:	683a      	ldr	r2, [r7, #0]
  40099a:	6879      	ldr	r1, [r7, #4]
  40099c:	68f8      	ldr	r0, [r7, #12]
  40099e:	4b05      	ldr	r3, [pc, #20]	; (4009b4 <pio_handler_set+0x9c>)
  4009a0:	4798      	blx	r3

	return 0;
  4009a2:	2300      	movs	r3, #0
}
  4009a4:	4618      	mov	r0, r3
  4009a6:	3718      	adds	r7, #24
  4009a8:	46bd      	mov	sp, r7
  4009aa:	bd80      	pop	{r7, pc}
  4009ac:	20008750 	.word	0x20008750
  4009b0:	200086e0 	.word	0x200086e0
  4009b4:	00402fa5 	.word	0x00402fa5

004009b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009b8:	b580      	push	{r7, lr}
  4009ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009bc:	210b      	movs	r1, #11
  4009be:	4802      	ldr	r0, [pc, #8]	; (4009c8 <PIOA_Handler+0x10>)
  4009c0:	4b02      	ldr	r3, [pc, #8]	; (4009cc <PIOA_Handler+0x14>)
  4009c2:	4798      	blx	r3
}
  4009c4:	bf00      	nop
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	400e0e00 	.word	0x400e0e00
  4009cc:	00400845 	.word	0x00400845

004009d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009d0:	b580      	push	{r7, lr}
  4009d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009d4:	210c      	movs	r1, #12
  4009d6:	4802      	ldr	r0, [pc, #8]	; (4009e0 <PIOB_Handler+0x10>)
  4009d8:	4b02      	ldr	r3, [pc, #8]	; (4009e4 <PIOB_Handler+0x14>)
  4009da:	4798      	blx	r3
}
  4009dc:	bf00      	nop
  4009de:	bd80      	pop	{r7, pc}
  4009e0:	400e1000 	.word	0x400e1000
  4009e4:	00400845 	.word	0x00400845

004009e8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4009e8:	b480      	push	{r7}
  4009ea:	b083      	sub	sp, #12
  4009ec:	af00      	add	r7, sp, #0
  4009ee:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	2208      	movs	r2, #8
  4009f4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4009f6:	687b      	ldr	r3, [r7, #4]
  4009f8:	2220      	movs	r2, #32
  4009fa:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4009fc:	687b      	ldr	r3, [r7, #4]
  4009fe:	2204      	movs	r2, #4
  400a00:	601a      	str	r2, [r3, #0]
}
  400a02:	bf00      	nop
  400a04:	370c      	adds	r7, #12
  400a06:	46bd      	mov	sp, r7
  400a08:	bc80      	pop	{r7}
  400a0a:	4770      	bx	lr

00400a0c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400a0c:	b580      	push	{r7, lr}
  400a0e:	b084      	sub	sp, #16
  400a10:	af00      	add	r7, sp, #0
  400a12:	6078      	str	r0, [r7, #4]
  400a14:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400a16:	2300      	movs	r3, #0
  400a18:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400a1a:	687b      	ldr	r3, [r7, #4]
  400a1c:	f04f 32ff 	mov.w	r2, #4294967295
  400a20:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400a22:	687b      	ldr	r3, [r7, #4]
  400a24:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400a26:	6878      	ldr	r0, [r7, #4]
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <twi_master_init+0x58>)
  400a2a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400a2c:	6878      	ldr	r0, [r7, #4]
  400a2e:	4b0e      	ldr	r3, [pc, #56]	; (400a68 <twi_master_init+0x5c>)
  400a30:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400a32:	683b      	ldr	r3, [r7, #0]
  400a34:	6859      	ldr	r1, [r3, #4]
  400a36:	683b      	ldr	r3, [r7, #0]
  400a38:	681b      	ldr	r3, [r3, #0]
  400a3a:	461a      	mov	r2, r3
  400a3c:	6878      	ldr	r0, [r7, #4]
  400a3e:	4b0b      	ldr	r3, [pc, #44]	; (400a6c <twi_master_init+0x60>)
  400a40:	4798      	blx	r3
  400a42:	4603      	mov	r3, r0
  400a44:	2b01      	cmp	r3, #1
  400a46:	d101      	bne.n	400a4c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400a48:	2301      	movs	r3, #1
  400a4a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400a4c:	683b      	ldr	r3, [r7, #0]
  400a4e:	7a5b      	ldrb	r3, [r3, #9]
  400a50:	2b01      	cmp	r3, #1
  400a52:	d102      	bne.n	400a5a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  400a54:	687b      	ldr	r3, [r7, #4]
  400a56:	2240      	movs	r2, #64	; 0x40
  400a58:	601a      	str	r2, [r3, #0]
	}

	return status;
  400a5a:	68fb      	ldr	r3, [r7, #12]
}
  400a5c:	4618      	mov	r0, r3
  400a5e:	3710      	adds	r7, #16
  400a60:	46bd      	mov	sp, r7
  400a62:	bd80      	pop	{r7, pc}
  400a64:	00400da9 	.word	0x00400da9
  400a68:	004009e9 	.word	0x004009e9
  400a6c:	00400a71 	.word	0x00400a71

00400a70 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400a70:	b480      	push	{r7}
  400a72:	b089      	sub	sp, #36	; 0x24
  400a74:	af00      	add	r7, sp, #0
  400a76:	60f8      	str	r0, [r7, #12]
  400a78:	60b9      	str	r1, [r7, #8]
  400a7a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400a7c:	2300      	movs	r3, #0
  400a7e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400a80:	68bb      	ldr	r3, [r7, #8]
  400a82:	4a34      	ldr	r2, [pc, #208]	; (400b54 <twi_set_speed+0xe4>)
  400a84:	4293      	cmp	r3, r2
  400a86:	d901      	bls.n	400a8c <twi_set_speed+0x1c>
		return FAIL;
  400a88:	2301      	movs	r3, #1
  400a8a:	e05d      	b.n	400b48 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400a8c:	68bb      	ldr	r3, [r7, #8]
  400a8e:	4a32      	ldr	r2, [pc, #200]	; (400b58 <twi_set_speed+0xe8>)
  400a90:	4293      	cmp	r3, r2
  400a92:	d937      	bls.n	400b04 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400a94:	687b      	ldr	r3, [r7, #4]
  400a96:	4a31      	ldr	r2, [pc, #196]	; (400b5c <twi_set_speed+0xec>)
  400a98:	fba2 2303 	umull	r2, r3, r2, r3
  400a9c:	0b9b      	lsrs	r3, r3, #14
  400a9e:	3b04      	subs	r3, #4
  400aa0:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400aa2:	68ba      	ldr	r2, [r7, #8]
  400aa4:	4b2e      	ldr	r3, [pc, #184]	; (400b60 <twi_set_speed+0xf0>)
  400aa6:	4413      	add	r3, r2
  400aa8:	009b      	lsls	r3, r3, #2
  400aaa:	687a      	ldr	r2, [r7, #4]
  400aac:	fbb2 f3f3 	udiv	r3, r2, r3
  400ab0:	3b04      	subs	r3, #4
  400ab2:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ab4:	e005      	b.n	400ac2 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  400ab6:	69fb      	ldr	r3, [r7, #28]
  400ab8:	3301      	adds	r3, #1
  400aba:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400abc:	697b      	ldr	r3, [r7, #20]
  400abe:	085b      	lsrs	r3, r3, #1
  400ac0:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ac2:	697b      	ldr	r3, [r7, #20]
  400ac4:	2bff      	cmp	r3, #255	; 0xff
  400ac6:	d909      	bls.n	400adc <twi_set_speed+0x6c>
  400ac8:	69fb      	ldr	r3, [r7, #28]
  400aca:	2b06      	cmp	r3, #6
  400acc:	d9f3      	bls.n	400ab6 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ace:	e005      	b.n	400adc <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400ad0:	69fb      	ldr	r3, [r7, #28]
  400ad2:	3301      	adds	r3, #1
  400ad4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400ad6:	693b      	ldr	r3, [r7, #16]
  400ad8:	085b      	lsrs	r3, r3, #1
  400ada:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400adc:	693b      	ldr	r3, [r7, #16]
  400ade:	2bff      	cmp	r3, #255	; 0xff
  400ae0:	d902      	bls.n	400ae8 <twi_set_speed+0x78>
  400ae2:	69fb      	ldr	r3, [r7, #28]
  400ae4:	2b06      	cmp	r3, #6
  400ae6:	d9f3      	bls.n	400ad0 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400ae8:	697b      	ldr	r3, [r7, #20]
  400aea:	b2da      	uxtb	r2, r3
  400aec:	693b      	ldr	r3, [r7, #16]
  400aee:	021b      	lsls	r3, r3, #8
  400af0:	b29b      	uxth	r3, r3
  400af2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400af4:	69fb      	ldr	r3, [r7, #28]
  400af6:	041b      	lsls	r3, r3, #16
  400af8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400afc:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  400afe:	68fb      	ldr	r3, [r7, #12]
  400b00:	611a      	str	r2, [r3, #16]
  400b02:	e020      	b.n	400b46 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400b04:	68bb      	ldr	r3, [r7, #8]
  400b06:	005b      	lsls	r3, r3, #1
  400b08:	687a      	ldr	r2, [r7, #4]
  400b0a:	fbb2 f3f3 	udiv	r3, r2, r3
  400b0e:	3b04      	subs	r3, #4
  400b10:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b12:	e005      	b.n	400b20 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400b14:	69fb      	ldr	r3, [r7, #28]
  400b16:	3301      	adds	r3, #1
  400b18:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400b1a:	69bb      	ldr	r3, [r7, #24]
  400b1c:	085b      	lsrs	r3, r3, #1
  400b1e:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b20:	69bb      	ldr	r3, [r7, #24]
  400b22:	2bff      	cmp	r3, #255	; 0xff
  400b24:	d902      	bls.n	400b2c <twi_set_speed+0xbc>
  400b26:	69fb      	ldr	r3, [r7, #28]
  400b28:	2b06      	cmp	r3, #6
  400b2a:	d9f3      	bls.n	400b14 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400b2c:	69bb      	ldr	r3, [r7, #24]
  400b2e:	b2da      	uxtb	r2, r3
  400b30:	69bb      	ldr	r3, [r7, #24]
  400b32:	021b      	lsls	r3, r3, #8
  400b34:	b29b      	uxth	r3, r3
  400b36:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400b38:	69fb      	ldr	r3, [r7, #28]
  400b3a:	041b      	lsls	r3, r3, #16
  400b3c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400b40:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  400b42:	68fb      	ldr	r3, [r7, #12]
  400b44:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  400b46:	2300      	movs	r3, #0
}
  400b48:	4618      	mov	r0, r3
  400b4a:	3724      	adds	r7, #36	; 0x24
  400b4c:	46bd      	mov	sp, r7
  400b4e:	bc80      	pop	{r7}
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	00061a80 	.word	0x00061a80
  400b58:	0005dc00 	.word	0x0005dc00
  400b5c:	057619f1 	.word	0x057619f1
  400b60:	3ffd1200 	.word	0x3ffd1200

00400b64 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  400b64:	b480      	push	{r7}
  400b66:	b085      	sub	sp, #20
  400b68:	af00      	add	r7, sp, #0
  400b6a:	6078      	str	r0, [r7, #4]
  400b6c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400b6e:	683b      	ldr	r3, [r7, #0]
  400b70:	2b00      	cmp	r3, #0
  400b72:	d101      	bne.n	400b78 <twi_mk_addr+0x14>
		return 0;
  400b74:	2300      	movs	r3, #0
  400b76:	e01d      	b.n	400bb4 <twi_mk_addr+0x50>

	val = addr[0];
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	781b      	ldrb	r3, [r3, #0]
  400b7c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400b7e:	683b      	ldr	r3, [r7, #0]
  400b80:	2b01      	cmp	r3, #1
  400b82:	dd09      	ble.n	400b98 <twi_mk_addr+0x34>
		val <<= 8;
  400b84:	68fb      	ldr	r3, [r7, #12]
  400b86:	021b      	lsls	r3, r3, #8
  400b88:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	3301      	adds	r3, #1
  400b8e:	781b      	ldrb	r3, [r3, #0]
  400b90:	461a      	mov	r2, r3
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	4313      	orrs	r3, r2
  400b96:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400b98:	683b      	ldr	r3, [r7, #0]
  400b9a:	2b02      	cmp	r3, #2
  400b9c:	dd09      	ble.n	400bb2 <twi_mk_addr+0x4e>
		val <<= 8;
  400b9e:	68fb      	ldr	r3, [r7, #12]
  400ba0:	021b      	lsls	r3, r3, #8
  400ba2:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400ba4:	687b      	ldr	r3, [r7, #4]
  400ba6:	3302      	adds	r3, #2
  400ba8:	781b      	ldrb	r3, [r3, #0]
  400baa:	461a      	mov	r2, r3
  400bac:	68fb      	ldr	r3, [r7, #12]
  400bae:	4313      	orrs	r3, r2
  400bb0:	60fb      	str	r3, [r7, #12]
	}
	return val;
  400bb2:	68fb      	ldr	r3, [r7, #12]
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	3714      	adds	r7, #20
  400bb8:	46bd      	mov	sp, r7
  400bba:	bc80      	pop	{r7}
  400bbc:	4770      	bx	lr
	...

00400bc0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400bc0:	b580      	push	{r7, lr}
  400bc2:	b088      	sub	sp, #32
  400bc4:	af00      	add	r7, sp, #0
  400bc6:	6078      	str	r0, [r7, #4]
  400bc8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400bca:	683b      	ldr	r3, [r7, #0]
  400bcc:	68db      	ldr	r3, [r3, #12]
  400bce:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400bd0:	683b      	ldr	r3, [r7, #0]
  400bd2:	689b      	ldr	r3, [r3, #8]
  400bd4:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400bd6:	2300      	movs	r3, #0
  400bd8:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400bda:	f643 2398 	movw	r3, #15000	; 0x3a98
  400bde:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400be0:	69fb      	ldr	r3, [r7, #28]
  400be2:	2b00      	cmp	r3, #0
  400be4:	d101      	bne.n	400bea <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400be6:	2301      	movs	r3, #1
  400be8:	e069      	b.n	400cbe <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400bea:	687b      	ldr	r3, [r7, #4]
  400bec:	2200      	movs	r2, #0
  400bee:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400bf0:	683b      	ldr	r3, [r7, #0]
  400bf2:	7c1b      	ldrb	r3, [r3, #16]
  400bf4:	041b      	lsls	r3, r3, #16
  400bf6:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400bfa:	683b      	ldr	r3, [r7, #0]
  400bfc:	685b      	ldr	r3, [r3, #4]
  400bfe:	021b      	lsls	r3, r3, #8
  400c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400c04:	4313      	orrs	r3, r2
  400c06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400c0e:	687b      	ldr	r3, [r7, #4]
  400c10:	2200      	movs	r2, #0
  400c12:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400c14:	683a      	ldr	r2, [r7, #0]
  400c16:	683b      	ldr	r3, [r7, #0]
  400c18:	685b      	ldr	r3, [r3, #4]
  400c1a:	4619      	mov	r1, r3
  400c1c:	4610      	mov	r0, r2
  400c1e:	4b2a      	ldr	r3, [pc, #168]	; (400cc8 <twi_master_read+0x108>)
  400c20:	4798      	blx	r3
  400c22:	4602      	mov	r2, r0
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400c28:	69fb      	ldr	r3, [r7, #28]
  400c2a:	2b01      	cmp	r3, #1
  400c2c:	d105      	bne.n	400c3a <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400c2e:	687b      	ldr	r3, [r7, #4]
  400c30:	2203      	movs	r2, #3
  400c32:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400c34:	2301      	movs	r3, #1
  400c36:	75fb      	strb	r3, [r7, #23]
  400c38:	e034      	b.n	400ca4 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400c3a:	687b      	ldr	r3, [r7, #4]
  400c3c:	2201      	movs	r2, #1
  400c3e:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400c40:	2300      	movs	r3, #0
  400c42:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400c44:	e02e      	b.n	400ca4 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	6a1b      	ldr	r3, [r3, #32]
  400c4a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400c52:	2b00      	cmp	r3, #0
  400c54:	d001      	beq.n	400c5a <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  400c56:	2305      	movs	r3, #5
  400c58:	e031      	b.n	400cbe <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400c5a:	693b      	ldr	r3, [r7, #16]
  400c5c:	1e5a      	subs	r2, r3, #1
  400c5e:	613a      	str	r2, [r7, #16]
  400c60:	2b00      	cmp	r3, #0
  400c62:	d101      	bne.n	400c68 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  400c64:	2309      	movs	r3, #9
  400c66:	e02a      	b.n	400cbe <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400c68:	69fb      	ldr	r3, [r7, #28]
  400c6a:	2b01      	cmp	r3, #1
  400c6c:	d107      	bne.n	400c7e <twi_master_read+0xbe>
  400c6e:	7dfb      	ldrb	r3, [r7, #23]
  400c70:	2b00      	cmp	r3, #0
  400c72:	d104      	bne.n	400c7e <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  400c74:	687b      	ldr	r3, [r7, #4]
  400c76:	2202      	movs	r2, #2
  400c78:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400c7a:	2301      	movs	r3, #1
  400c7c:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	f003 0302 	and.w	r3, r3, #2
  400c84:	2b00      	cmp	r3, #0
  400c86:	d100      	bne.n	400c8a <twi_master_read+0xca>
			continue;
  400c88:	e00c      	b.n	400ca4 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400c8a:	69bb      	ldr	r3, [r7, #24]
  400c8c:	1c5a      	adds	r2, r3, #1
  400c8e:	61ba      	str	r2, [r7, #24]
  400c90:	687a      	ldr	r2, [r7, #4]
  400c92:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400c94:	b2d2      	uxtb	r2, r2
  400c96:	701a      	strb	r2, [r3, #0]

		cnt--;
  400c98:	69fb      	ldr	r3, [r7, #28]
  400c9a:	3b01      	subs	r3, #1
  400c9c:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400c9e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400ca2:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  400ca4:	69fb      	ldr	r3, [r7, #28]
  400ca6:	2b00      	cmp	r3, #0
  400ca8:	d1cd      	bne.n	400c46 <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400caa:	bf00      	nop
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	6a1b      	ldr	r3, [r3, #32]
  400cb0:	f003 0301 	and.w	r3, r3, #1
  400cb4:	2b00      	cmp	r3, #0
  400cb6:	d0f9      	beq.n	400cac <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400cb8:	687b      	ldr	r3, [r7, #4]
  400cba:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400cbc:	2300      	movs	r3, #0
}
  400cbe:	4618      	mov	r0, r3
  400cc0:	3720      	adds	r7, #32
  400cc2:	46bd      	mov	sp, r7
  400cc4:	bd80      	pop	{r7, pc}
  400cc6:	bf00      	nop
  400cc8:	00400b65 	.word	0x00400b65

00400ccc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400ccc:	b580      	push	{r7, lr}
  400cce:	b086      	sub	sp, #24
  400cd0:	af00      	add	r7, sp, #0
  400cd2:	6078      	str	r0, [r7, #4]
  400cd4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400cd6:	683b      	ldr	r3, [r7, #0]
  400cd8:	68db      	ldr	r3, [r3, #12]
  400cda:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400cdc:	683b      	ldr	r3, [r7, #0]
  400cde:	689b      	ldr	r3, [r3, #8]
  400ce0:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  400ce2:	697b      	ldr	r3, [r7, #20]
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	d101      	bne.n	400cec <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  400ce8:	2301      	movs	r3, #1
  400cea:	e056      	b.n	400d9a <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400cec:	687b      	ldr	r3, [r7, #4]
  400cee:	2200      	movs	r2, #0
  400cf0:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400cf2:	683b      	ldr	r3, [r7, #0]
  400cf4:	7c1b      	ldrb	r3, [r3, #16]
  400cf6:	041b      	lsls	r3, r3, #16
  400cf8:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400cfc:	683b      	ldr	r3, [r7, #0]
  400cfe:	685b      	ldr	r3, [r3, #4]
  400d00:	021b      	lsls	r3, r3, #8
  400d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400d06:	431a      	orrs	r2, r3
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400d0c:	687b      	ldr	r3, [r7, #4]
  400d0e:	2200      	movs	r2, #0
  400d10:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400d12:	683a      	ldr	r2, [r7, #0]
  400d14:	683b      	ldr	r3, [r7, #0]
  400d16:	685b      	ldr	r3, [r3, #4]
  400d18:	4619      	mov	r1, r3
  400d1a:	4610      	mov	r0, r2
  400d1c:	4b21      	ldr	r3, [pc, #132]	; (400da4 <twi_master_write+0xd8>)
  400d1e:	4798      	blx	r3
  400d20:	4602      	mov	r2, r0
  400d22:	687b      	ldr	r3, [r7, #4]
  400d24:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400d26:	e019      	b.n	400d5c <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	6a1b      	ldr	r3, [r3, #32]
  400d2c:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400d2e:	68fb      	ldr	r3, [r7, #12]
  400d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400d34:	2b00      	cmp	r3, #0
  400d36:	d001      	beq.n	400d3c <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  400d38:	2305      	movs	r3, #5
  400d3a:	e02e      	b.n	400d9a <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  400d3c:	68fb      	ldr	r3, [r7, #12]
  400d3e:	f003 0304 	and.w	r3, r3, #4
  400d42:	2b00      	cmp	r3, #0
  400d44:	d100      	bne.n	400d48 <twi_master_write+0x7c>
			continue;
  400d46:	e009      	b.n	400d5c <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  400d48:	693b      	ldr	r3, [r7, #16]
  400d4a:	1c5a      	adds	r2, r3, #1
  400d4c:	613a      	str	r2, [r7, #16]
  400d4e:	781b      	ldrb	r3, [r3, #0]
  400d50:	461a      	mov	r2, r3
  400d52:	687b      	ldr	r3, [r7, #4]
  400d54:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  400d56:	697b      	ldr	r3, [r7, #20]
  400d58:	3b01      	subs	r3, #1
  400d5a:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  400d5c:	697b      	ldr	r3, [r7, #20]
  400d5e:	2b00      	cmp	r3, #0
  400d60:	d1e2      	bne.n	400d28 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  400d62:	687b      	ldr	r3, [r7, #4]
  400d64:	6a1b      	ldr	r3, [r3, #32]
  400d66:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400d68:	68fb      	ldr	r3, [r7, #12]
  400d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400d6e:	2b00      	cmp	r3, #0
  400d70:	d001      	beq.n	400d76 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  400d72:	2305      	movs	r3, #5
  400d74:	e011      	b.n	400d9a <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  400d76:	68fb      	ldr	r3, [r7, #12]
  400d78:	f003 0304 	and.w	r3, r3, #4
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d100      	bne.n	400d82 <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  400d80:	e7ef      	b.n	400d62 <twi_master_write+0x96>
			break;
  400d82:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400d84:	687b      	ldr	r3, [r7, #4]
  400d86:	2202      	movs	r2, #2
  400d88:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400d8a:	bf00      	nop
  400d8c:	687b      	ldr	r3, [r7, #4]
  400d8e:	6a1b      	ldr	r3, [r3, #32]
  400d90:	f003 0301 	and.w	r3, r3, #1
  400d94:	2b00      	cmp	r3, #0
  400d96:	d0f9      	beq.n	400d8c <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  400d98:	2300      	movs	r3, #0
}
  400d9a:	4618      	mov	r0, r3
  400d9c:	3718      	adds	r7, #24
  400d9e:	46bd      	mov	sp, r7
  400da0:	bd80      	pop	{r7, pc}
  400da2:	bf00      	nop
  400da4:	00400b65 	.word	0x00400b65

00400da8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400da8:	b480      	push	{r7}
  400daa:	b083      	sub	sp, #12
  400dac:	af00      	add	r7, sp, #0
  400dae:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400db0:	687b      	ldr	r3, [r7, #4]
  400db2:	2280      	movs	r2, #128	; 0x80
  400db4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400dba:	bf00      	nop
  400dbc:	370c      	adds	r7, #12
  400dbe:	46bd      	mov	sp, r7
  400dc0:	bc80      	pop	{r7}
  400dc2:	4770      	bx	lr

00400dc4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400dc4:	b480      	push	{r7}
  400dc6:	b089      	sub	sp, #36	; 0x24
  400dc8:	af00      	add	r7, sp, #0
  400dca:	60f8      	str	r0, [r7, #12]
  400dcc:	60b9      	str	r1, [r7, #8]
  400dce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400dd0:	68bb      	ldr	r3, [r7, #8]
  400dd2:	011a      	lsls	r2, r3, #4
  400dd4:	687b      	ldr	r3, [r7, #4]
  400dd6:	429a      	cmp	r2, r3
  400dd8:	d802      	bhi.n	400de0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400dda:	2310      	movs	r3, #16
  400ddc:	61fb      	str	r3, [r7, #28]
  400dde:	e001      	b.n	400de4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400de0:	2308      	movs	r3, #8
  400de2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400de4:	687b      	ldr	r3, [r7, #4]
  400de6:	00da      	lsls	r2, r3, #3
  400de8:	69fb      	ldr	r3, [r7, #28]
  400dea:	68b9      	ldr	r1, [r7, #8]
  400dec:	fb01 f303 	mul.w	r3, r1, r3
  400df0:	085b      	lsrs	r3, r3, #1
  400df2:	441a      	add	r2, r3
  400df4:	69fb      	ldr	r3, [r7, #28]
  400df6:	68b9      	ldr	r1, [r7, #8]
  400df8:	fb01 f303 	mul.w	r3, r1, r3
  400dfc:	fbb2 f3f3 	udiv	r3, r2, r3
  400e00:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400e02:	69bb      	ldr	r3, [r7, #24]
  400e04:	08db      	lsrs	r3, r3, #3
  400e06:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400e08:	69bb      	ldr	r3, [r7, #24]
  400e0a:	f003 0307 	and.w	r3, r3, #7
  400e0e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e10:	697b      	ldr	r3, [r7, #20]
  400e12:	2b00      	cmp	r3, #0
  400e14:	d003      	beq.n	400e1e <usart_set_async_baudrate+0x5a>
  400e16:	697b      	ldr	r3, [r7, #20]
  400e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400e1c:	d301      	bcc.n	400e22 <usart_set_async_baudrate+0x5e>
		return 1;
  400e1e:	2301      	movs	r3, #1
  400e20:	e00f      	b.n	400e42 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400e22:	69fb      	ldr	r3, [r7, #28]
  400e24:	2b08      	cmp	r3, #8
  400e26:	d105      	bne.n	400e34 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	685b      	ldr	r3, [r3, #4]
  400e2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400e30:	68fb      	ldr	r3, [r7, #12]
  400e32:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400e34:	693b      	ldr	r3, [r7, #16]
  400e36:	041a      	lsls	r2, r3, #16
  400e38:	697b      	ldr	r3, [r7, #20]
  400e3a:	431a      	orrs	r2, r3
  400e3c:	68fb      	ldr	r3, [r7, #12]
  400e3e:	621a      	str	r2, [r3, #32]

	return 0;
  400e40:	2300      	movs	r3, #0
}
  400e42:	4618      	mov	r0, r3
  400e44:	3724      	adds	r7, #36	; 0x24
  400e46:	46bd      	mov	sp, r7
  400e48:	bc80      	pop	{r7}
  400e4a:	4770      	bx	lr

00400e4c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400e4c:	b580      	push	{r7, lr}
  400e4e:	b082      	sub	sp, #8
  400e50:	af00      	add	r7, sp, #0
  400e52:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400e54:	6878      	ldr	r0, [r7, #4]
  400e56:	4b0f      	ldr	r3, [pc, #60]	; (400e94 <usart_reset+0x48>)
  400e58:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400e5a:	687b      	ldr	r3, [r7, #4]
  400e5c:	2200      	movs	r2, #0
  400e5e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400e60:	687b      	ldr	r3, [r7, #4]
  400e62:	2200      	movs	r2, #0
  400e64:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	2200      	movs	r2, #0
  400e6a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400e6c:	6878      	ldr	r0, [r7, #4]
  400e6e:	4b0a      	ldr	r3, [pc, #40]	; (400e98 <usart_reset+0x4c>)
  400e70:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400e72:	6878      	ldr	r0, [r7, #4]
  400e74:	4b09      	ldr	r3, [pc, #36]	; (400e9c <usart_reset+0x50>)
  400e76:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400e78:	6878      	ldr	r0, [r7, #4]
  400e7a:	4b09      	ldr	r3, [pc, #36]	; (400ea0 <usart_reset+0x54>)
  400e7c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400e7e:	6878      	ldr	r0, [r7, #4]
  400e80:	4b08      	ldr	r3, [pc, #32]	; (400ea4 <usart_reset+0x58>)
  400e82:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400e84:	6878      	ldr	r0, [r7, #4]
  400e86:	4b08      	ldr	r3, [pc, #32]	; (400ea8 <usart_reset+0x5c>)
  400e88:	4798      	blx	r3
#endif
}
  400e8a:	bf00      	nop
  400e8c:	3708      	adds	r7, #8
  400e8e:	46bd      	mov	sp, r7
  400e90:	bd80      	pop	{r7, pc}
  400e92:	bf00      	nop
  400e94:	004010fd 	.word	0x004010fd
  400e98:	00400f89 	.word	0x00400f89
  400e9c:	00400fb9 	.word	0x00400fb9
  400ea0:	0040101b 	.word	0x0040101b
  400ea4:	0040104f 	.word	0x0040104f
  400ea8:	00401035 	.word	0x00401035

00400eac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b084      	sub	sp, #16
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	60f8      	str	r0, [r7, #12]
  400eb4:	60b9      	str	r1, [r7, #8]
  400eb6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400eb8:	68f8      	ldr	r0, [r7, #12]
  400eba:	4b1a      	ldr	r3, [pc, #104]	; (400f24 <usart_init_rs232+0x78>)
  400ebc:	4798      	blx	r3

	ul_reg_val = 0;
  400ebe:	4b1a      	ldr	r3, [pc, #104]	; (400f28 <usart_init_rs232+0x7c>)
  400ec0:	2200      	movs	r2, #0
  400ec2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400ec4:	68bb      	ldr	r3, [r7, #8]
  400ec6:	2b00      	cmp	r3, #0
  400ec8:	d009      	beq.n	400ede <usart_init_rs232+0x32>
  400eca:	68bb      	ldr	r3, [r7, #8]
  400ecc:	681b      	ldr	r3, [r3, #0]
  400ece:	687a      	ldr	r2, [r7, #4]
  400ed0:	4619      	mov	r1, r3
  400ed2:	68f8      	ldr	r0, [r7, #12]
  400ed4:	4b15      	ldr	r3, [pc, #84]	; (400f2c <usart_init_rs232+0x80>)
  400ed6:	4798      	blx	r3
  400ed8:	4603      	mov	r3, r0
  400eda:	2b00      	cmp	r3, #0
  400edc:	d001      	beq.n	400ee2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400ede:	2301      	movs	r3, #1
  400ee0:	e01b      	b.n	400f1a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ee2:	68bb      	ldr	r3, [r7, #8]
  400ee4:	685a      	ldr	r2, [r3, #4]
  400ee6:	68bb      	ldr	r3, [r7, #8]
  400ee8:	689b      	ldr	r3, [r3, #8]
  400eea:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400eec:	68bb      	ldr	r3, [r7, #8]
  400eee:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ef0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400ef2:	68bb      	ldr	r3, [r7, #8]
  400ef4:	68db      	ldr	r3, [r3, #12]
  400ef6:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ef8:	4b0b      	ldr	r3, [pc, #44]	; (400f28 <usart_init_rs232+0x7c>)
  400efa:	681b      	ldr	r3, [r3, #0]
  400efc:	4313      	orrs	r3, r2
  400efe:	4a0a      	ldr	r2, [pc, #40]	; (400f28 <usart_init_rs232+0x7c>)
  400f00:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400f02:	4b09      	ldr	r3, [pc, #36]	; (400f28 <usart_init_rs232+0x7c>)
  400f04:	681b      	ldr	r3, [r3, #0]
  400f06:	4a08      	ldr	r2, [pc, #32]	; (400f28 <usart_init_rs232+0x7c>)
  400f08:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400f0a:	68fb      	ldr	r3, [r7, #12]
  400f0c:	685a      	ldr	r2, [r3, #4]
  400f0e:	4b06      	ldr	r3, [pc, #24]	; (400f28 <usart_init_rs232+0x7c>)
  400f10:	681b      	ldr	r3, [r3, #0]
  400f12:	431a      	orrs	r2, r3
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	605a      	str	r2, [r3, #4]

	return 0;
  400f18:	2300      	movs	r3, #0
}
  400f1a:	4618      	mov	r0, r3
  400f1c:	3710      	adds	r7, #16
  400f1e:	46bd      	mov	sp, r7
  400f20:	bd80      	pop	{r7, pc}
  400f22:	bf00      	nop
  400f24:	00400e4d 	.word	0x00400e4d
  400f28:	20008758 	.word	0x20008758
  400f2c:	00400dc5 	.word	0x00400dc5

00400f30 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400f30:	b580      	push	{r7, lr}
  400f32:	b084      	sub	sp, #16
  400f34:	af00      	add	r7, sp, #0
  400f36:	60f8      	str	r0, [r7, #12]
  400f38:	60b9      	str	r1, [r7, #8]
  400f3a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400f3c:	687a      	ldr	r2, [r7, #4]
  400f3e:	68b9      	ldr	r1, [r7, #8]
  400f40:	68f8      	ldr	r0, [r7, #12]
  400f42:	4b0a      	ldr	r3, [pc, #40]	; (400f6c <usart_init_hw_handshaking+0x3c>)
  400f44:	4798      	blx	r3
  400f46:	4603      	mov	r3, r0
  400f48:	2b00      	cmp	r3, #0
  400f4a:	d001      	beq.n	400f50 <usart_init_hw_handshaking+0x20>
		return 1;
  400f4c:	2301      	movs	r3, #1
  400f4e:	e008      	b.n	400f62 <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400f50:	68fb      	ldr	r3, [r7, #12]
  400f52:	685b      	ldr	r3, [r3, #4]
  400f54:	f023 030f 	bic.w	r3, r3, #15
  400f58:	f043 0202 	orr.w	r2, r3, #2
  400f5c:	68fb      	ldr	r3, [r7, #12]
  400f5e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400f60:	2300      	movs	r3, #0
}
  400f62:	4618      	mov	r0, r3
  400f64:	3710      	adds	r7, #16
  400f66:	46bd      	mov	sp, r7
  400f68:	bd80      	pop	{r7, pc}
  400f6a:	bf00      	nop
  400f6c:	00400ead 	.word	0x00400ead

00400f70 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400f70:	b480      	push	{r7}
  400f72:	b083      	sub	sp, #12
  400f74:	af00      	add	r7, sp, #0
  400f76:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	2240      	movs	r2, #64	; 0x40
  400f7c:	601a      	str	r2, [r3, #0]
}
  400f7e:	bf00      	nop
  400f80:	370c      	adds	r7, #12
  400f82:	46bd      	mov	sp, r7
  400f84:	bc80      	pop	{r7}
  400f86:	4770      	bx	lr

00400f88 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400f88:	b480      	push	{r7}
  400f8a:	b083      	sub	sp, #12
  400f8c:	af00      	add	r7, sp, #0
  400f8e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f90:	687b      	ldr	r3, [r7, #4]
  400f92:	2288      	movs	r2, #136	; 0x88
  400f94:	601a      	str	r2, [r3, #0]
}
  400f96:	bf00      	nop
  400f98:	370c      	adds	r7, #12
  400f9a:	46bd      	mov	sp, r7
  400f9c:	bc80      	pop	{r7}
  400f9e:	4770      	bx	lr

00400fa0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400fa0:	b480      	push	{r7}
  400fa2:	b083      	sub	sp, #12
  400fa4:	af00      	add	r7, sp, #0
  400fa6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400fa8:	687b      	ldr	r3, [r7, #4]
  400faa:	2210      	movs	r2, #16
  400fac:	601a      	str	r2, [r3, #0]
}
  400fae:	bf00      	nop
  400fb0:	370c      	adds	r7, #12
  400fb2:	46bd      	mov	sp, r7
  400fb4:	bc80      	pop	{r7}
  400fb6:	4770      	bx	lr

00400fb8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400fb8:	b480      	push	{r7}
  400fba:	b083      	sub	sp, #12
  400fbc:	af00      	add	r7, sp, #0
  400fbe:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	2224      	movs	r2, #36	; 0x24
  400fc4:	601a      	str	r2, [r3, #0]
}
  400fc6:	bf00      	nop
  400fc8:	370c      	adds	r7, #12
  400fca:	46bd      	mov	sp, r7
  400fcc:	bc80      	pop	{r7}
  400fce:	4770      	bx	lr

00400fd0 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400fd0:	b480      	push	{r7}
  400fd2:	b083      	sub	sp, #12
  400fd4:	af00      	add	r7, sp, #0
  400fd6:	6078      	str	r0, [r7, #4]
  400fd8:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400fda:	687b      	ldr	r3, [r7, #4]
  400fdc:	683a      	ldr	r2, [r7, #0]
  400fde:	609a      	str	r2, [r3, #8]
}
  400fe0:	bf00      	nop
  400fe2:	370c      	adds	r7, #12
  400fe4:	46bd      	mov	sp, r7
  400fe6:	bc80      	pop	{r7}
  400fe8:	4770      	bx	lr

00400fea <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400fea:	b480      	push	{r7}
  400fec:	b083      	sub	sp, #12
  400fee:	af00      	add	r7, sp, #0
  400ff0:	6078      	str	r0, [r7, #4]
  400ff2:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	683a      	ldr	r2, [r7, #0]
  400ff8:	60da      	str	r2, [r3, #12]
}
  400ffa:	bf00      	nop
  400ffc:	370c      	adds	r7, #12
  400ffe:	46bd      	mov	sp, r7
  401000:	bc80      	pop	{r7}
  401002:	4770      	bx	lr

00401004 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401004:	b480      	push	{r7}
  401006:	b083      	sub	sp, #12
  401008:	af00      	add	r7, sp, #0
  40100a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	695b      	ldr	r3, [r3, #20]
}
  401010:	4618      	mov	r0, r3
  401012:	370c      	adds	r7, #12
  401014:	46bd      	mov	sp, r7
  401016:	bc80      	pop	{r7}
  401018:	4770      	bx	lr

0040101a <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40101a:	b480      	push	{r7}
  40101c:	b083      	sub	sp, #12
  40101e:	af00      	add	r7, sp, #0
  401020:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401022:	687b      	ldr	r3, [r7, #4]
  401024:	f44f 7280 	mov.w	r2, #256	; 0x100
  401028:	601a      	str	r2, [r3, #0]
}
  40102a:	bf00      	nop
  40102c:	370c      	adds	r7, #12
  40102e:	46bd      	mov	sp, r7
  401030:	bc80      	pop	{r7}
  401032:	4770      	bx	lr

00401034 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401034:	b480      	push	{r7}
  401036:	b083      	sub	sp, #12
  401038:	af00      	add	r7, sp, #0
  40103a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  40103c:	687b      	ldr	r3, [r7, #4]
  40103e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401042:	601a      	str	r2, [r3, #0]
}
  401044:	bf00      	nop
  401046:	370c      	adds	r7, #12
  401048:	46bd      	mov	sp, r7
  40104a:	bc80      	pop	{r7}
  40104c:	4770      	bx	lr

0040104e <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40104e:	b480      	push	{r7}
  401050:	b083      	sub	sp, #12
  401052:	af00      	add	r7, sp, #0
  401054:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401056:	687b      	ldr	r3, [r7, #4]
  401058:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40105c:	601a      	str	r2, [r3, #0]
}
  40105e:	bf00      	nop
  401060:	370c      	adds	r7, #12
  401062:	46bd      	mov	sp, r7
  401064:	bc80      	pop	{r7}
  401066:	4770      	bx	lr

00401068 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  401068:	b480      	push	{r7}
  40106a:	b083      	sub	sp, #12
  40106c:	af00      	add	r7, sp, #0
  40106e:	6078      	str	r0, [r7, #4]
  401070:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401072:	bf00      	nop
  401074:	687b      	ldr	r3, [r7, #4]
  401076:	695b      	ldr	r3, [r3, #20]
  401078:	f003 0302 	and.w	r3, r3, #2
  40107c:	2b00      	cmp	r3, #0
  40107e:	d0f9      	beq.n	401074 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401080:	683b      	ldr	r3, [r7, #0]
  401082:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	61da      	str	r2, [r3, #28]

	return 0;
  40108a:	2300      	movs	r3, #0
}
  40108c:	4618      	mov	r0, r3
  40108e:	370c      	adds	r7, #12
  401090:	46bd      	mov	sp, r7
  401092:	bc80      	pop	{r7}
  401094:	4770      	bx	lr
	...

00401098 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  401098:	b580      	push	{r7, lr}
  40109a:	b082      	sub	sp, #8
  40109c:	af00      	add	r7, sp, #0
  40109e:	6078      	str	r0, [r7, #4]
  4010a0:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4010a2:	e007      	b.n	4010b4 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4010a4:	683b      	ldr	r3, [r7, #0]
  4010a6:	1c5a      	adds	r2, r3, #1
  4010a8:	603a      	str	r2, [r7, #0]
  4010aa:	781b      	ldrb	r3, [r3, #0]
  4010ac:	4619      	mov	r1, r3
  4010ae:	6878      	ldr	r0, [r7, #4]
  4010b0:	4b04      	ldr	r3, [pc, #16]	; (4010c4 <usart_write_line+0x2c>)
  4010b2:	4798      	blx	r3
	while (*string != '\0') {
  4010b4:	683b      	ldr	r3, [r7, #0]
  4010b6:	781b      	ldrb	r3, [r3, #0]
  4010b8:	2b00      	cmp	r3, #0
  4010ba:	d1f3      	bne.n	4010a4 <usart_write_line+0xc>
	}
}
  4010bc:	bf00      	nop
  4010be:	3708      	adds	r7, #8
  4010c0:	46bd      	mov	sp, r7
  4010c2:	bd80      	pop	{r7, pc}
  4010c4:	00401069 	.word	0x00401069

004010c8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4010c8:	b480      	push	{r7}
  4010ca:	b083      	sub	sp, #12
  4010cc:	af00      	add	r7, sp, #0
  4010ce:	6078      	str	r0, [r7, #4]
  4010d0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010d2:	687b      	ldr	r3, [r7, #4]
  4010d4:	695b      	ldr	r3, [r3, #20]
  4010d6:	f003 0301 	and.w	r3, r3, #1
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d101      	bne.n	4010e2 <usart_read+0x1a>
		return 1;
  4010de:	2301      	movs	r3, #1
  4010e0:	e006      	b.n	4010f0 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4010e2:	687b      	ldr	r3, [r7, #4]
  4010e4:	699b      	ldr	r3, [r3, #24]
  4010e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4010ea:	683b      	ldr	r3, [r7, #0]
  4010ec:	601a      	str	r2, [r3, #0]

	return 0;
  4010ee:	2300      	movs	r3, #0
}
  4010f0:	4618      	mov	r0, r3
  4010f2:	370c      	adds	r7, #12
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bc80      	pop	{r7}
  4010f8:	4770      	bx	lr
	...

004010fc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4010fc:	b480      	push	{r7}
  4010fe:	b083      	sub	sp, #12
  401100:	af00      	add	r7, sp, #0
  401102:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401104:	687b      	ldr	r3, [r7, #4]
  401106:	4a04      	ldr	r2, [pc, #16]	; (401118 <usart_disable_writeprotect+0x1c>)
  401108:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  40110c:	bf00      	nop
  40110e:	370c      	adds	r7, #12
  401110:	46bd      	mov	sp, r7
  401112:	bc80      	pop	{r7}
  401114:	4770      	bx	lr
  401116:	bf00      	nop
  401118:	55534100 	.word	0x55534100

0040111c <NVIC_EnableIRQ>:
{
  40111c:	b480      	push	{r7}
  40111e:	b083      	sub	sp, #12
  401120:	af00      	add	r7, sp, #0
  401122:	4603      	mov	r3, r0
  401124:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401126:	4908      	ldr	r1, [pc, #32]	; (401148 <NVIC_EnableIRQ+0x2c>)
  401128:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40112c:	095b      	lsrs	r3, r3, #5
  40112e:	79fa      	ldrb	r2, [r7, #7]
  401130:	f002 021f 	and.w	r2, r2, #31
  401134:	2001      	movs	r0, #1
  401136:	fa00 f202 	lsl.w	r2, r0, r2
  40113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40113e:	bf00      	nop
  401140:	370c      	adds	r7, #12
  401142:	46bd      	mov	sp, r7
  401144:	bc80      	pop	{r7}
  401146:	4770      	bx	lr
  401148:	e000e100 	.word	0xe000e100

0040114c <NVIC_DisableIRQ>:
{
  40114c:	b480      	push	{r7}
  40114e:	b083      	sub	sp, #12
  401150:	af00      	add	r7, sp, #0
  401152:	4603      	mov	r3, r0
  401154:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401156:	4909      	ldr	r1, [pc, #36]	; (40117c <NVIC_DisableIRQ+0x30>)
  401158:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40115c:	095b      	lsrs	r3, r3, #5
  40115e:	79fa      	ldrb	r2, [r7, #7]
  401160:	f002 021f 	and.w	r2, r2, #31
  401164:	2001      	movs	r0, #1
  401166:	fa00 f202 	lsl.w	r2, r0, r2
  40116a:	3320      	adds	r3, #32
  40116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401170:	bf00      	nop
  401172:	370c      	adds	r7, #12
  401174:	46bd      	mov	sp, r7
  401176:	bc80      	pop	{r7}
  401178:	4770      	bx	lr
  40117a:	bf00      	nop
  40117c:	e000e100 	.word	0xe000e100

00401180 <NVIC_ClearPendingIRQ>:
{
  401180:	b480      	push	{r7}
  401182:	b083      	sub	sp, #12
  401184:	af00      	add	r7, sp, #0
  401186:	4603      	mov	r3, r0
  401188:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40118a:	4909      	ldr	r1, [pc, #36]	; (4011b0 <NVIC_ClearPendingIRQ+0x30>)
  40118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401190:	095b      	lsrs	r3, r3, #5
  401192:	79fa      	ldrb	r2, [r7, #7]
  401194:	f002 021f 	and.w	r2, r2, #31
  401198:	2001      	movs	r0, #1
  40119a:	fa00 f202 	lsl.w	r2, r0, r2
  40119e:	3360      	adds	r3, #96	; 0x60
  4011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4011a4:	bf00      	nop
  4011a6:	370c      	adds	r7, #12
  4011a8:	46bd      	mov	sp, r7
  4011aa:	bc80      	pop	{r7}
  4011ac:	4770      	bx	lr
  4011ae:	bf00      	nop
  4011b0:	e000e100 	.word	0xe000e100

004011b4 <NVIC_SetPriority>:
{
  4011b4:	b480      	push	{r7}
  4011b6:	b083      	sub	sp, #12
  4011b8:	af00      	add	r7, sp, #0
  4011ba:	4603      	mov	r3, r0
  4011bc:	6039      	str	r1, [r7, #0]
  4011be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011c4:	2b00      	cmp	r3, #0
  4011c6:	da0b      	bge.n	4011e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4011c8:	490d      	ldr	r1, [pc, #52]	; (401200 <NVIC_SetPriority+0x4c>)
  4011ca:	79fb      	ldrb	r3, [r7, #7]
  4011cc:	f003 030f 	and.w	r3, r3, #15
  4011d0:	3b04      	subs	r3, #4
  4011d2:	683a      	ldr	r2, [r7, #0]
  4011d4:	b2d2      	uxtb	r2, r2
  4011d6:	0112      	lsls	r2, r2, #4
  4011d8:	b2d2      	uxtb	r2, r2
  4011da:	440b      	add	r3, r1
  4011dc:	761a      	strb	r2, [r3, #24]
}
  4011de:	e009      	b.n	4011f4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4011e0:	4908      	ldr	r1, [pc, #32]	; (401204 <NVIC_SetPriority+0x50>)
  4011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011e6:	683a      	ldr	r2, [r7, #0]
  4011e8:	b2d2      	uxtb	r2, r2
  4011ea:	0112      	lsls	r2, r2, #4
  4011ec:	b2d2      	uxtb	r2, r2
  4011ee:	440b      	add	r3, r1
  4011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4011f4:	bf00      	nop
  4011f6:	370c      	adds	r7, #12
  4011f8:	46bd      	mov	sp, r7
  4011fa:	bc80      	pop	{r7}
  4011fc:	4770      	bx	lr
  4011fe:	bf00      	nop
  401200:	e000ed00 	.word	0xe000ed00
  401204:	e000e100 	.word	0xe000e100

00401208 <osc_get_rate>:
{
  401208:	b480      	push	{r7}
  40120a:	b083      	sub	sp, #12
  40120c:	af00      	add	r7, sp, #0
  40120e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401210:	687b      	ldr	r3, [r7, #4]
  401212:	2b07      	cmp	r3, #7
  401214:	d825      	bhi.n	401262 <osc_get_rate+0x5a>
  401216:	a201      	add	r2, pc, #4	; (adr r2, 40121c <osc_get_rate+0x14>)
  401218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40121c:	0040123d 	.word	0x0040123d
  401220:	00401243 	.word	0x00401243
  401224:	00401249 	.word	0x00401249
  401228:	0040124f 	.word	0x0040124f
  40122c:	00401253 	.word	0x00401253
  401230:	00401257 	.word	0x00401257
  401234:	0040125b 	.word	0x0040125b
  401238:	0040125f 	.word	0x0040125f
		return OSC_SLCK_32K_RC_HZ;
  40123c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401240:	e010      	b.n	401264 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401246:	e00d      	b.n	401264 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40124c:	e00a      	b.n	401264 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40124e:	4b08      	ldr	r3, [pc, #32]	; (401270 <osc_get_rate+0x68>)
  401250:	e008      	b.n	401264 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401252:	4b08      	ldr	r3, [pc, #32]	; (401274 <osc_get_rate+0x6c>)
  401254:	e006      	b.n	401264 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401256:	4b08      	ldr	r3, [pc, #32]	; (401278 <osc_get_rate+0x70>)
  401258:	e004      	b.n	401264 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40125a:	4b07      	ldr	r3, [pc, #28]	; (401278 <osc_get_rate+0x70>)
  40125c:	e002      	b.n	401264 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40125e:	4b06      	ldr	r3, [pc, #24]	; (401278 <osc_get_rate+0x70>)
  401260:	e000      	b.n	401264 <osc_get_rate+0x5c>
	return 0;
  401262:	2300      	movs	r3, #0
}
  401264:	4618      	mov	r0, r3
  401266:	370c      	adds	r7, #12
  401268:	46bd      	mov	sp, r7
  40126a:	bc80      	pop	{r7}
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop
  401270:	003d0900 	.word	0x003d0900
  401274:	007a1200 	.word	0x007a1200
  401278:	00b71b00 	.word	0x00b71b00

0040127c <sysclk_get_main_hz>:
{
  40127c:	b580      	push	{r7, lr}
  40127e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401280:	2006      	movs	r0, #6
  401282:	4b04      	ldr	r3, [pc, #16]	; (401294 <sysclk_get_main_hz+0x18>)
  401284:	4798      	blx	r3
  401286:	4602      	mov	r2, r0
  401288:	4613      	mov	r3, r2
  40128a:	009b      	lsls	r3, r3, #2
  40128c:	4413      	add	r3, r2
  40128e:	009b      	lsls	r3, r3, #2
}
  401290:	4618      	mov	r0, r3
  401292:	bd80      	pop	{r7, pc}
  401294:	00401209 	.word	0x00401209

00401298 <sysclk_get_cpu_hz>:
{
  401298:	b580      	push	{r7, lr}
  40129a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40129c:	4b02      	ldr	r3, [pc, #8]	; (4012a8 <sysclk_get_cpu_hz+0x10>)
  40129e:	4798      	blx	r3
  4012a0:	4603      	mov	r3, r0
  4012a2:	085b      	lsrs	r3, r3, #1
}
  4012a4:	4618      	mov	r0, r3
  4012a6:	bd80      	pop	{r7, pc}
  4012a8:	0040127d 	.word	0x0040127d

004012ac <handler_vsync>:

/**
 * \brief Handler for vertical synchronisation using by the OV2640 image
 * sensor.
 */
void handler_vsync(uint32_t ul_id, uint32_t ul_mask) {
  4012ac:	b480      	push	{r7}
  4012ae:	b083      	sub	sp, #12
  4012b0:	af00      	add	r7, sp, #0
  4012b2:	6078      	str	r0, [r7, #4]
  4012b4:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	vsync_rising_edge_flag = true;
  4012b6:	4b04      	ldr	r3, [pc, #16]	; (4012c8 <handler_vsync+0x1c>)
  4012b8:	2201      	movs	r2, #1
  4012ba:	601a      	str	r2, [r3, #0]
}
  4012bc:	bf00      	nop
  4012be:	370c      	adds	r7, #12
  4012c0:	46bd      	mov	sp, r7
  4012c2:	bc80      	pop	{r7}
  4012c4:	4770      	bx	lr
  4012c6:	bf00      	nop
  4012c8:	2000875c 	.word	0x2000875c

004012cc <configure_vsync>:

/**
 * \brief Intialize Vsync_Handler.
 */
void configure_vsync(void) {
  4012cc:	b590      	push	{r4, r7, lr}
  4012ce:	b083      	sub	sp, #12
  4012d0:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV_VSYNC_PIO, OV_VSYNC_ID, OV_VSYNC_MASK,
  4012d2:	4b08      	ldr	r3, [pc, #32]	; (4012f4 <configure_vsync+0x28>)
  4012d4:	9300      	str	r3, [sp, #0]
  4012d6:	2301      	movs	r3, #1
  4012d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012dc:	210b      	movs	r1, #11
  4012de:	4806      	ldr	r0, [pc, #24]	; (4012f8 <configure_vsync+0x2c>)
  4012e0:	4c06      	ldr	r4, [pc, #24]	; (4012fc <configure_vsync+0x30>)
  4012e2:	47a0      	blx	r4
			OV_VSYNC_TYPE, handler_vsync);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type) OV_VSYNC_ID);
  4012e4:	200b      	movs	r0, #11
  4012e6:	4b06      	ldr	r3, [pc, #24]	; (401300 <configure_vsync+0x34>)
  4012e8:	4798      	blx	r3
}
  4012ea:	bf00      	nop
  4012ec:	3704      	adds	r7, #4
  4012ee:	46bd      	mov	sp, r7
  4012f0:	bd90      	pop	{r4, r7, pc}
  4012f2:	bf00      	nop
  4012f4:	004012ad 	.word	0x004012ad
  4012f8:	400e0e00 	.word	0x400e0e00
  4012fc:	00400919 	.word	0x00400919
  401300:	0040111d 	.word	0x0040111d

00401304 <configure_twi>:

/**
 * \brief Configures TWI.
 */
void configure_twi(void) {
  401304:	b580      	push	{r7, lr}
  401306:	b084      	sub	sp, #16
  401308:	af00      	add	r7, sp, #0
	twi_options_t opt;

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  40130a:	2013      	movs	r0, #19
  40130c:	4b0e      	ldr	r3, [pc, #56]	; (401348 <configure_twi+0x44>)
  40130e:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401310:	4b0e      	ldr	r3, [pc, #56]	; (40134c <configure_twi+0x48>)
  401312:	4798      	blx	r3
  401314:	4603      	mov	r3, r0
  401316:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401318:	4b0d      	ldr	r3, [pc, #52]	; (401350 <configure_twi+0x4c>)
  40131a:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  40131c:	1d3b      	adds	r3, r7, #4
  40131e:	4619      	mov	r1, r3
  401320:	480c      	ldr	r0, [pc, #48]	; (401354 <configure_twi+0x50>)
  401322:	4b0d      	ldr	r3, [pc, #52]	; (401358 <configure_twi+0x54>)
  401324:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  401326:	2013      	movs	r0, #19
  401328:	4b0c      	ldr	r3, [pc, #48]	; (40135c <configure_twi+0x58>)
  40132a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  40132c:	2013      	movs	r0, #19
  40132e:	4b0c      	ldr	r3, [pc, #48]	; (401360 <configure_twi+0x5c>)
  401330:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401332:	2100      	movs	r1, #0
  401334:	2013      	movs	r0, #19
  401336:	4b0b      	ldr	r3, [pc, #44]	; (401364 <configure_twi+0x60>)
  401338:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  40133a:	2013      	movs	r0, #19
  40133c:	4b0a      	ldr	r3, [pc, #40]	; (401368 <configure_twi+0x64>)
  40133e:	4798      	blx	r3
}
  401340:	bf00      	nop
  401342:	3710      	adds	r7, #16
  401344:	46bd      	mov	sp, r7
  401346:	bd80      	pop	{r7, pc}
  401348:	00403539 	.word	0x00403539
  40134c:	00401299 	.word	0x00401299
  401350:	000186a0 	.word	0x000186a0
  401354:	40018000 	.word	0x40018000
  401358:	00400a0d 	.word	0x00400a0d
  40135c:	0040114d 	.word	0x0040114d
  401360:	00401181 	.word	0x00401181
  401364:	004011b5 	.word	0x004011b5
  401368:	0040111d 	.word	0x0040111d

0040136c <init_pio_capture>:

/**
 * \brief Configuration and initialization of parallel capture.
 */
void init_pio_capture(Pio *p_pio, uint32_t ul_id) {
  40136c:	b580      	push	{r7, lr}
  40136e:	b082      	sub	sp, #8
  401370:	af00      	add	r7, sp, #0
  401372:	6078      	str	r0, [r7, #4]
  401374:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  401376:	6838      	ldr	r0, [r7, #0]
  401378:	4b1a      	ldr	r3, [pc, #104]	; (4013e4 <init_pio_capture+0x78>)
  40137a:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  40137c:	687b      	ldr	r3, [r7, #4]
  40137e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401382:	f023 0201 	bic.w	r2, r3, #1
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  40138c:	687b      	ldr	r3, [r7, #4]
  40138e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  401392:	f043 0208 	orr.w	r2, r3, #8
  401396:	687b      	ldr	r3, [r7, #4]
  401398:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  40139c:	687b      	ldr	r3, [r7, #4]
  40139e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4013ac:	687b      	ldr	r3, [r7, #4]
  4013ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013b2:	f043 0220 	orr.w	r2, r3, #32
  4013b6:	687b      	ldr	r3, [r7, #4]
  4013b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4013bc:	687b      	ldr	r3, [r7, #4]
  4013be:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4013c6:	687b      	ldr	r3, [r7, #4]
  4013c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4013d6:	687b      	ldr	r3, [r7, #4]
  4013d8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
}
  4013dc:	bf00      	nop
  4013de:	3708      	adds	r7, #8
  4013e0:	46bd      	mov	sp, r7
  4013e2:	bd80      	pop	{r7, pc}
  4013e4:	00403539 	.word	0x00403539

004013e8 <init_camera>:

/**
 * \brief Initialize camera.
 */
void init_camera(void) {
  4013e8:	b580      	push	{r7, lr}
  4013ea:	af00      	add	r7, sp, #0
	pmc_enable_pllbck(7, 0x1, 1); /* PLLA work at 96 Mhz */
  4013ec:	2201      	movs	r2, #1
  4013ee:	2101      	movs	r1, #1
  4013f0:	2007      	movs	r0, #7
  4013f2:	4b0d      	ldr	r3, [pc, #52]	; (401428 <init_camera+0x40>)
  4013f4:	4798      	blx	r3

	configure_vsync();
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <init_camera+0x44>)
  4013f8:	4798      	blx	r3
	init_pio_capture(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  4013fa:	210b      	movs	r1, #11
  4013fc:	480c      	ldr	r0, [pc, #48]	; (401430 <init_camera+0x48>)
  4013fe:	4b0d      	ldr	r3, [pc, #52]	; (401434 <init_camera+0x4c>)
  401400:	4798      	blx	r3
	
	/* Init PCK1 to work at 24 Mhz - 96/4=24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401402:	4b0d      	ldr	r3, [pc, #52]	; (401438 <init_camera+0x50>)
  401404:	2223      	movs	r2, #35	; 0x23
  401406:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401408:	4b0b      	ldr	r3, [pc, #44]	; (401438 <init_camera+0x50>)
  40140a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40140e:	601a      	str	r2, [r3, #0]
	
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401410:	bf00      	nop
  401412:	4b09      	ldr	r3, [pc, #36]	; (401438 <init_camera+0x50>)
  401414:	689b      	ldr	r3, [r3, #8]
  401416:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40141a:	2b00      	cmp	r3, #0
  40141c:	d0f9      	beq.n	401412 <init_camera+0x2a>
	}

	configure_twi();
  40141e:	4b07      	ldr	r3, [pc, #28]	; (40143c <init_camera+0x54>)
  401420:	4798      	blx	r3
}
  401422:	bf00      	nop
  401424:	bd80      	pop	{r7, pc}
  401426:	bf00      	nop
  401428:	004034b9 	.word	0x004034b9
  40142c:	004012cd 	.word	0x004012cd
  401430:	400e0e00 	.word	0x400e0e00
  401434:	0040136d 	.word	0x0040136d
  401438:	400e0400 	.word	0x400e0400
  40143c:	00401305 	.word	0x00401305

00401440 <configure_camera>:

/**
 * \brief Configure camera.
 */	
void configure_camera(void) {
  401440:	b580      	push	{r7, lr}
  401442:	b086      	sub	sp, #24
  401444:	af00      	add	r7, sp, #0
	init_camera();
  401446:	4b1b      	ldr	r3, [pc, #108]	; (4014b4 <configure_camera+0x74>)
  401448:	4798      	blx	r3
	/* ov2640 Initialization */
	// First, make sure reg 0xFF=1
	const uint8_t cont_reg_val = 1;
  40144a:	2301      	movs	r3, #1
  40144c:	75fb      	strb	r3, [r7, #23]
	twi_packet_t init_packet = 
  40144e:	463b      	mov	r3, r7
  401450:	2200      	movs	r2, #0
  401452:	601a      	str	r2, [r3, #0]
  401454:	605a      	str	r2, [r3, #4]
  401456:	609a      	str	r2, [r3, #8]
  401458:	60da      	str	r2, [r3, #12]
  40145a:	611a      	str	r2, [r3, #16]
  40145c:	23ff      	movs	r3, #255	; 0xff
  40145e:	703b      	strb	r3, [r7, #0]
  401460:	2301      	movs	r3, #1
  401462:	607b      	str	r3, [r7, #4]
  401464:	f107 0317 	add.w	r3, r7, #23
  401468:	60bb      	str	r3, [r7, #8]
  40146a:	2301      	movs	r3, #1
  40146c:	60fb      	str	r3, [r7, #12]
  40146e:	2330      	movs	r3, #48	; 0x30
  401470:	743b      	strb	r3, [r7, #16]
		.addr_length  = 1,                         // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,     // TWI slave bus address
		.buffer       = &cont_reg_val,             // transfer data destination buffer
		.length       = 1                          // transfer data size (bytes)
	};
	ov_write_reg(BOARD_TWI, &init_packet);
  401472:	463b      	mov	r3, r7
  401474:	4619      	mov	r1, r3
  401476:	4810      	ldr	r0, [pc, #64]	; (4014b8 <configure_camera+0x78>)
  401478:	4b10      	ldr	r3, [pc, #64]	; (4014bc <configure_camera+0x7c>)
  40147a:	4798      	blx	r3
	
	while (ov_init(BOARD_TWI) == 1) {}
  40147c:	bf00      	nop
  40147e:	480e      	ldr	r0, [pc, #56]	; (4014b8 <configure_camera+0x78>)
  401480:	4b0f      	ldr	r3, [pc, #60]	; (4014c0 <configure_camera+0x80>)
  401482:	4798      	blx	r3
  401484:	4603      	mov	r3, r0
  401486:	2b01      	cmp	r3, #1
  401488:	d0f9      	beq.n	40147e <configure_camera+0x3e>

	/* ov2640 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  40148a:	2100      	movs	r1, #0
  40148c:	480a      	ldr	r0, [pc, #40]	; (4014b8 <configure_camera+0x78>)
  40148e:	4b0d      	ldr	r3, [pc, #52]	; (4014c4 <configure_camera+0x84>)
  401490:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401492:	2101      	movs	r1, #1
  401494:	4808      	ldr	r0, [pc, #32]	; (4014b8 <configure_camera+0x78>)
  401496:	4b0b      	ldr	r3, [pc, #44]	; (4014c4 <configure_camera+0x84>)
  401498:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  40149a:	2102      	movs	r1, #2
  40149c:	4806      	ldr	r0, [pc, #24]	; (4014b8 <configure_camera+0x78>)
  40149e:	4b09      	ldr	r3, [pc, #36]	; (4014c4 <configure_camera+0x84>)
  4014a0:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  4014a2:	2104      	movs	r1, #4
  4014a4:	4804      	ldr	r0, [pc, #16]	; (4014b8 <configure_camera+0x78>)
  4014a6:	4b07      	ldr	r3, [pc, #28]	; (4014c4 <configure_camera+0x84>)
  4014a8:	4798      	blx	r3
}   
  4014aa:	bf00      	nop
  4014ac:	3718      	adds	r7, #24
  4014ae:	46bd      	mov	sp, r7
  4014b0:	bd80      	pop	{r7, pc}
  4014b2:	bf00      	nop
  4014b4:	004013e9 	.word	0x004013e9
  4014b8:	40018000 	.word	0x40018000
  4014bc:	004018ad 	.word	0x004018ad
  4014c0:	004019a5 	.word	0x004019a5
  4014c4:	00401a31 	.word	0x00401a31

004014c8 <capture_pio>:
 *
 * \param p_pio PIO instance which will capture data from OV2640 image sensor.
 * \param p_uc_buf Buffer address where captured data must be stored.
 * \param ul_size Data frame size.
 */
uint8_t capture_pio(Pio *p_pio, uint8_t *uc_buf, uint32_t ul_size) {
  4014c8:	b480      	push	{r7}
  4014ca:	b085      	sub	sp, #20
  4014cc:	af00      	add	r7, sp, #0
  4014ce:	60f8      	str	r0, [r7, #12]
  4014d0:	60b9      	str	r1, [r7, #8]
  4014d2:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4014d4:	68fb      	ldr	r3, [r7, #12]
  4014d6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  4014da:	2b00      	cmp	r3, #0
  4014dc:	d112      	bne.n	401504 <capture_pio+0x3c>
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  4014e4:	2b00      	cmp	r3, #0
  4014e6:	d10d      	bne.n	401504 <capture_pio+0x3c>
		p_pio->PIO_RPR = (uint32_t)image_dest_buffer_ptr;
  4014e8:	4a11      	ldr	r2, [pc, #68]	; (401530 <capture_pio+0x68>)
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  4014f0:	68fb      	ldr	r3, [r7, #12]
  4014f2:	687a      	ldr	r2, [r7, #4]
  4014f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  4014f8:	68fb      	ldr	r3, [r7, #12]
  4014fa:	2201      	movs	r2, #1
  4014fc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401500:	2301      	movs	r3, #1
  401502:	e00f      	b.n	401524 <capture_pio+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401504:	68fb      	ldr	r3, [r7, #12]
  401506:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  40150a:	2b00      	cmp	r3, #0
  40150c:	d109      	bne.n	401522 <capture_pio+0x5a>
		p_pio->PIO_RNPR = (uint32_t)image_dest_buffer_ptr;
  40150e:	4a08      	ldr	r2, [pc, #32]	; (401530 <capture_pio+0x68>)
  401510:	68fb      	ldr	r3, [r7, #12]
  401512:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401516:	68fb      	ldr	r3, [r7, #12]
  401518:	687a      	ldr	r2, [r7, #4]
  40151a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  40151e:	2301      	movs	r3, #1
  401520:	e000      	b.n	401524 <capture_pio+0x5c>
		} else {
		return 0;
  401522:	2300      	movs	r3, #0
	}
}
  401524:	4618      	mov	r0, r3
  401526:	3714      	adds	r7, #20
  401528:	46bd      	mov	sp, r7
  40152a:	bc80      	pop	{r7}
  40152c:	4770      	bx	lr
  40152e:	bf00      	nop
  401530:	20008760 	.word	0x20008760

00401534 <start_capture>:

/**
 * \brief Start picture capture.
 */
void start_capture(void) {
  401534:	b580      	push	{r7, lr}
  401536:	b082      	sub	sp, #8
  401538:	af00      	add	r7, sp, #0
	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  40153a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40153e:	4818      	ldr	r0, [pc, #96]	; (4015a0 <start_capture+0x6c>)
  401540:	4b18      	ldr	r3, [pc, #96]	; (4015a4 <start_capture+0x70>)
  401542:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait vsync_rising_edge_flag = 1 before start process*/
	// not really busy waiting in a meaningful sense
	while (!vsync_rising_edge_flag) {}
  401544:	bf00      	nop
  401546:	4b18      	ldr	r3, [pc, #96]	; (4015a8 <start_capture+0x74>)
  401548:	681b      	ldr	r3, [r3, #0]
  40154a:	2b00      	cmp	r3, #0
  40154c:	d0fb      	beq.n	401546 <start_capture+0x12>
	
	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  40154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401552:	4813      	ldr	r0, [pc, #76]	; (4015a0 <start_capture+0x6c>)
  401554:	4b15      	ldr	r3, [pc, #84]	; (4015ac <start_capture+0x78>)
  401556:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  401558:	4811      	ldr	r0, [pc, #68]	; (4015a0 <start_capture+0x6c>)
  40155a:	4b15      	ldr	r3, [pc, #84]	; (4015b0 <start_capture+0x7c>)
  40155c:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	capture_pio(OV_DATA_BUS_PIO, image_dest_buffer_ptr, CAM_BUFFER_SIZE/4);
  40155e:	f241 3288 	movw	r2, #5000	; 0x1388
  401562:	4914      	ldr	r1, [pc, #80]	; (4015b4 <start_capture+0x80>)
  401564:	480e      	ldr	r0, [pc, #56]	; (4015a0 <start_capture+0x6c>)
  401566:	4b14      	ldr	r3, [pc, #80]	; (4015b8 <start_capture+0x84>)
  401568:	4798      	blx	r3
	
	uint32_t counter = 0;
  40156a:	2300      	movs	r3, #0
  40156c:	607b      	str	r3, [r7, #4]
	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  40156e:	e006      	b.n	40157e <start_capture+0x4a>
			PIO_PCIMR_RXBUFF)) {
		counter += send_audio_packet(); // send one audio packet if available
  401570:	4b12      	ldr	r3, [pc, #72]	; (4015bc <start_capture+0x88>)
  401572:	4798      	blx	r3
  401574:	4603      	mov	r3, r0
  401576:	461a      	mov	r2, r3
  401578:	687b      	ldr	r3, [r7, #4]
  40157a:	4413      	add	r3, r2
  40157c:	607b      	str	r3, [r7, #4]
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  40157e:	4b08      	ldr	r3, [pc, #32]	; (4015a0 <start_capture+0x6c>)
  401580:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401584:	f003 0308 	and.w	r3, r3, #8
  401588:	2b08      	cmp	r3, #8
  40158a:	d1f1      	bne.n	401570 <start_capture+0x3c>
		// send 0-10 packets here - useful but not killer
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  40158c:	4804      	ldr	r0, [pc, #16]	; (4015a0 <start_capture+0x6c>)
  40158e:	4b0c      	ldr	r3, [pc, #48]	; (4015c0 <start_capture+0x8c>)
  401590:	4798      	blx	r3

	/* Reset vsync flag*/
	vsync_rising_edge_flag = false;
  401592:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <start_capture+0x74>)
  401594:	2200      	movs	r2, #0
  401596:	601a      	str	r2, [r3, #0]
}
  401598:	bf00      	nop
  40159a:	3708      	adds	r7, #8
  40159c:	46bd      	mov	sp, r7
  40159e:	bd80      	pop	{r7, pc}
  4015a0:	400e0e00 	.word	0x400e0e00
  4015a4:	0040300f 	.word	0x0040300f
  4015a8:	2000875c 	.word	0x2000875c
  4015ac:	00403029 	.word	0x00403029
  4015b0:	00403245 	.word	0x00403245
  4015b4:	20008760 	.word	0x20008760
  4015b8:	004014c9 	.word	0x004014c9
  4015bc:	00402479 	.word	0x00402479
  4015c0:	00403271 	.word	0x00403271

004015c4 <find_image_len>:

/**
 *  \brief Finds image len.
	Returns a uint32_t for the length
 */
uint32_t find_image_len(void) {
  4015c4:	b480      	push	{r7}
  4015c6:	b083      	sub	sp, #12
  4015c8:	af00      	add	r7, sp, #0
	uint16_t *reading_ptr =  image_dest_buffer_ptr;
  4015ca:	4b1d      	ldr	r3, [pc, #116]	; (401640 <find_image_len+0x7c>)
  4015cc:	607b      	str	r3, [r7, #4]
	while((*reading_ptr != 0xD8FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015ce:	e002      	b.n	4015d6 <find_image_len+0x12>
	{
		reading_ptr++;
  4015d0:	687b      	ldr	r3, [r7, #4]
  4015d2:	3302      	adds	r3, #2
  4015d4:	607b      	str	r3, [r7, #4]
	while((*reading_ptr != 0xD8FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	881b      	ldrh	r3, [r3, #0]
  4015da:	f64d 02ff 	movw	r2, #55551	; 0xd8ff
  4015de:	4293      	cmp	r3, r2
  4015e0:	d003      	beq.n	4015ea <find_image_len+0x26>
  4015e2:	4a18      	ldr	r2, [pc, #96]	; (401644 <find_image_len+0x80>)
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	4293      	cmp	r3, r2
  4015e8:	d3f2      	bcc.n	4015d0 <find_image_len+0xc>
	}
	
	if (*reading_ptr != 0xD8FF)
  4015ea:	687b      	ldr	r3, [r7, #4]
  4015ec:	881b      	ldrh	r3, [r3, #0]
  4015ee:	f64d 02ff 	movw	r2, #55551	; 0xd8ff
  4015f2:	4293      	cmp	r3, r2
  4015f4:	d001      	beq.n	4015fa <find_image_len+0x36>
	{
		return 0;
  4015f6:	2300      	movs	r3, #0
  4015f8:	e01c      	b.n	401634 <find_image_len+0x70>
	}
	else
	{
		start_of_image_ptr = (uint8_t *) reading_ptr;
  4015fa:	4a13      	ldr	r2, [pc, #76]	; (401648 <find_image_len+0x84>)
  4015fc:	687b      	ldr	r3, [r7, #4]
  4015fe:	6013      	str	r3, [r2, #0]
	}
	
	while((*reading_ptr != 0xD9FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  401600:	e002      	b.n	401608 <find_image_len+0x44>
	{
		reading_ptr++;
  401602:	687b      	ldr	r3, [r7, #4]
  401604:	3302      	adds	r3, #2
  401606:	607b      	str	r3, [r7, #4]
	while((*reading_ptr != 0xD9FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  401608:	687b      	ldr	r3, [r7, #4]
  40160a:	881b      	ldrh	r3, [r3, #0]
  40160c:	f64d 12ff 	movw	r2, #55807	; 0xd9ff
  401610:	4293      	cmp	r3, r2
  401612:	d003      	beq.n	40161c <find_image_len+0x58>
  401614:	4a0b      	ldr	r2, [pc, #44]	; (401644 <find_image_len+0x80>)
  401616:	687b      	ldr	r3, [r7, #4]
  401618:	4293      	cmp	r3, r2
  40161a:	d3f2      	bcc.n	401602 <find_image_len+0x3e>
	}
	if (reading_ptr > (image_dest_buffer_ptr + CAM_BUFFER_SIZE))
  40161c:	4a09      	ldr	r2, [pc, #36]	; (401644 <find_image_len+0x80>)
  40161e:	687b      	ldr	r3, [r7, #4]
  401620:	4293      	cmp	r3, r2
  401622:	d901      	bls.n	401628 <find_image_len+0x64>
	{
		return 0;
  401624:	2300      	movs	r3, #0
  401626:	e005      	b.n	401634 <find_image_len+0x70>
	}
	// need to get past end of file to include it in image
	reading_ptr++;
  401628:	687b      	ldr	r3, [r7, #4]
  40162a:	3302      	adds	r3, #2
  40162c:	607b      	str	r3, [r7, #4]
	return (uint32_t) (((uint8_t*) reading_ptr) - ((uint8_t*) image_dest_buffer_ptr));
  40162e:	687b      	ldr	r3, [r7, #4]
  401630:	4a03      	ldr	r2, [pc, #12]	; (401640 <find_image_len+0x7c>)
  401632:	1a9b      	subs	r3, r3, r2
  401634:	4618      	mov	r0, r3
  401636:	370c      	adds	r7, #12
  401638:	46bd      	mov	sp, r7
  40163a:	bc80      	pop	{r7}
  40163c:	4770      	bx	lr
  40163e:	bf00      	nop
  401640:	20008760 	.word	0x20008760
  401644:	2000d580 	.word	0x2000d580
  401648:	2000d580 	.word	0x2000d580

0040164c <osc_get_rate>:
{
  40164c:	b480      	push	{r7}
  40164e:	b083      	sub	sp, #12
  401650:	af00      	add	r7, sp, #0
  401652:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401654:	687b      	ldr	r3, [r7, #4]
  401656:	2b07      	cmp	r3, #7
  401658:	d825      	bhi.n	4016a6 <osc_get_rate+0x5a>
  40165a:	a201      	add	r2, pc, #4	; (adr r2, 401660 <osc_get_rate+0x14>)
  40165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401660:	00401681 	.word	0x00401681
  401664:	00401687 	.word	0x00401687
  401668:	0040168d 	.word	0x0040168d
  40166c:	00401693 	.word	0x00401693
  401670:	00401697 	.word	0x00401697
  401674:	0040169b 	.word	0x0040169b
  401678:	0040169f 	.word	0x0040169f
  40167c:	004016a3 	.word	0x004016a3
		return OSC_SLCK_32K_RC_HZ;
  401680:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401684:	e010      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40168a:	e00d      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40168c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401690:	e00a      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401692:	4b08      	ldr	r3, [pc, #32]	; (4016b4 <osc_get_rate+0x68>)
  401694:	e008      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401696:	4b08      	ldr	r3, [pc, #32]	; (4016b8 <osc_get_rate+0x6c>)
  401698:	e006      	b.n	4016a8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40169a:	4b08      	ldr	r3, [pc, #32]	; (4016bc <osc_get_rate+0x70>)
  40169c:	e004      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40169e:	4b07      	ldr	r3, [pc, #28]	; (4016bc <osc_get_rate+0x70>)
  4016a0:	e002      	b.n	4016a8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4016a2:	4b06      	ldr	r3, [pc, #24]	; (4016bc <osc_get_rate+0x70>)
  4016a4:	e000      	b.n	4016a8 <osc_get_rate+0x5c>
	return 0;
  4016a6:	2300      	movs	r3, #0
}
  4016a8:	4618      	mov	r0, r3
  4016aa:	370c      	adds	r7, #12
  4016ac:	46bd      	mov	sp, r7
  4016ae:	bc80      	pop	{r7}
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	003d0900 	.word	0x003d0900
  4016b8:	007a1200 	.word	0x007a1200
  4016bc:	00b71b00 	.word	0x00b71b00

004016c0 <sysclk_get_main_hz>:
{
  4016c0:	b580      	push	{r7, lr}
  4016c2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4016c4:	2006      	movs	r0, #6
  4016c6:	4b04      	ldr	r3, [pc, #16]	; (4016d8 <sysclk_get_main_hz+0x18>)
  4016c8:	4798      	blx	r3
  4016ca:	4602      	mov	r2, r0
  4016cc:	4613      	mov	r3, r2
  4016ce:	009b      	lsls	r3, r3, #2
  4016d0:	4413      	add	r3, r2
  4016d2:	009b      	lsls	r3, r3, #2
}
  4016d4:	4618      	mov	r0, r3
  4016d6:	bd80      	pop	{r7, pc}
  4016d8:	0040164d 	.word	0x0040164d

004016dc <sysclk_get_cpu_hz>:
{
  4016dc:	b580      	push	{r7, lr}
  4016de:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4016e0:	4b02      	ldr	r3, [pc, #8]	; (4016ec <sysclk_get_cpu_hz+0x10>)
  4016e2:	4798      	blx	r3
  4016e4:	4603      	mov	r3, r0
  4016e6:	085b      	lsrs	r3, r3, #1
}
  4016e8:	4618      	mov	r0, r3
  4016ea:	bd80      	pop	{r7, pc}
  4016ec:	004016c1 	.word	0x004016c1

004016f0 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  4016f0:	b580      	push	{r7, lr}
  4016f2:	b08e      	sub	sp, #56	; 0x38
  4016f4:	af00      	add	r7, sp, #0
  4016f6:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4016f8:	2300      	movs	r3, #0
  4016fa:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  4016fc:	2300      	movs	r3, #0
  4016fe:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  401700:	2330      	movs	r3, #48	; 0x30
  401702:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  401706:	230a      	movs	r3, #10
  401708:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  40170c:	2301      	movs	r3, #1
  40170e:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  401710:	f107 030c 	add.w	r3, r7, #12
  401714:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  401716:	2301      	movs	r3, #1
  401718:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  40171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40171e:	4619      	mov	r1, r3
  401720:	6878      	ldr	r0, [r7, #4]
  401722:	4b0e      	ldr	r3, [pc, #56]	; (40175c <ov_id+0x6c>)
  401724:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  401726:	2330      	movs	r3, #48	; 0x30
  401728:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  40172c:	230b      	movs	r3, #11
  40172e:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401730:	2301      	movs	r3, #1
  401732:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  401734:	f107 0308 	add.w	r3, r7, #8
  401738:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  40173a:	2301      	movs	r3, #1
  40173c:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  40173e:	f107 0310 	add.w	r3, r7, #16
  401742:	4619      	mov	r1, r3
  401744:	6878      	ldr	r0, [r7, #4]
  401746:	4b05      	ldr	r3, [pc, #20]	; (40175c <ov_id+0x6c>)
  401748:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  40174a:	68fb      	ldr	r3, [r7, #12]
  40174c:	021a      	lsls	r2, r3, #8
  40174e:	68bb      	ldr	r3, [r7, #8]
  401750:	4313      	orrs	r3, r2
}
  401752:	4618      	mov	r0, r3
  401754:	3738      	adds	r7, #56	; 0x38
  401756:	46bd      	mov	sp, r7
  401758:	bd80      	pop	{r7, pc}
  40175a:	bf00      	nop
  40175c:	00401889 	.word	0x00401889

00401760 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401760:	b580      	push	{r7, lr}
  401762:	b08a      	sub	sp, #40	; 0x28
  401764:	af00      	add	r7, sp, #0
  401766:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401768:	2300      	movs	r3, #0
  40176a:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  40176c:	2300      	movs	r3, #0
  40176e:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401770:	231c      	movs	r3, #28
  401772:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401774:	2301      	movs	r3, #1
  401776:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401778:	2330      	movs	r3, #48	; 0x30
  40177a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  40177e:	f107 0310 	add.w	r3, r7, #16
  401782:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401784:	2301      	movs	r3, #1
  401786:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401788:	f107 0314 	add.w	r3, r7, #20
  40178c:	4619      	mov	r1, r3
  40178e:	6878      	ldr	r0, [r7, #4]
  401790:	4b10      	ldr	r3, [pc, #64]	; (4017d4 <ov_manufacturer+0x74>)
  401792:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  401794:	231d      	movs	r3, #29
  401796:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401798:	2301      	movs	r3, #1
  40179a:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  40179c:	2330      	movs	r3, #48	; 0x30
  40179e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  4017a2:	f107 030c 	add.w	r3, r7, #12
  4017a6:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  4017a8:	2301      	movs	r3, #1
  4017aa:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  4017ac:	f107 0314 	add.w	r3, r7, #20
  4017b0:	4619      	mov	r1, r3
  4017b2:	6878      	ldr	r0, [r7, #4]
  4017b4:	4b07      	ldr	r3, [pc, #28]	; (4017d4 <ov_manufacturer+0x74>)
  4017b6:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  4017b8:	693b      	ldr	r3, [r7, #16]
  4017ba:	2b7f      	cmp	r3, #127	; 0x7f
  4017bc:	d104      	bne.n	4017c8 <ov_manufacturer+0x68>
  4017be:	68fb      	ldr	r3, [r7, #12]
  4017c0:	2ba2      	cmp	r3, #162	; 0xa2
  4017c2:	d101      	bne.n	4017c8 <ov_manufacturer+0x68>
		return 0;
  4017c4:	2300      	movs	r3, #0
  4017c6:	e000      	b.n	4017ca <ov_manufacturer+0x6a>
	}

	return 1;
  4017c8:	2301      	movs	r3, #1
}
  4017ca:	4618      	mov	r0, r3
  4017cc:	3728      	adds	r7, #40	; 0x28
  4017ce:	46bd      	mov	sp, r7
  4017d0:	bd80      	pop	{r7, pc}
  4017d2:	bf00      	nop
  4017d4:	00401889 	.word	0x00401889

004017d8 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  4017d8:	b580      	push	{r7, lr}
  4017da:	b08a      	sub	sp, #40	; 0x28
  4017dc:	af00      	add	r7, sp, #0
  4017de:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  4017e0:	2300      	movs	r3, #0
  4017e2:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  4017e4:	2300      	movs	r3, #0
  4017e6:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  4017e8:	2300      	movs	r3, #0
  4017ea:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  4017ec:	2301      	movs	r3, #1
  4017ee:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  4017f0:	2301      	movs	r3, #1
  4017f2:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4017f4:	2330      	movs	r3, #48	; 0x30
  4017f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  4017fa:	2301      	movs	r3, #1
  4017fc:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  4017fe:	f107 030c 	add.w	r3, r7, #12
  401802:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401804:	f107 0314 	add.w	r3, r7, #20
  401808:	4619      	mov	r1, r3
  40180a:	6878      	ldr	r0, [r7, #4]
  40180c:	4b1c      	ldr	r3, [pc, #112]	; (401880 <ov_test_write+0xa8>)
  40180e:	4798      	blx	r3

	ul_entervalue = 0xAD;
  401810:	23ad      	movs	r3, #173	; 0xad
  401812:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  401814:	f107 0308 	add.w	r3, r7, #8
  401818:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  40181a:	f107 0314 	add.w	r3, r7, #20
  40181e:	4619      	mov	r1, r3
  401820:	6878      	ldr	r0, [r7, #4]
  401822:	4b18      	ldr	r3, [pc, #96]	; (401884 <ov_test_write+0xac>)
  401824:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401826:	f107 0310 	add.w	r3, r7, #16
  40182a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  40182c:	f107 0314 	add.w	r3, r7, #20
  401830:	4619      	mov	r1, r3
  401832:	6878      	ldr	r0, [r7, #4]
  401834:	4b12      	ldr	r3, [pc, #72]	; (401880 <ov_test_write+0xa8>)
  401836:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401838:	693a      	ldr	r2, [r7, #16]
  40183a:	68bb      	ldr	r3, [r7, #8]
  40183c:	429a      	cmp	r2, r3
  40183e:	d001      	beq.n	401844 <ov_test_write+0x6c>
		return 1;
  401840:	2301      	movs	r3, #1
  401842:	e018      	b.n	401876 <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  401844:	f107 030c 	add.w	r3, r7, #12
  401848:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  40184a:	f107 0314 	add.w	r3, r7, #20
  40184e:	4619      	mov	r1, r3
  401850:	6878      	ldr	r0, [r7, #4]
  401852:	4b0c      	ldr	r3, [pc, #48]	; (401884 <ov_test_write+0xac>)
  401854:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  401856:	f107 0310 	add.w	r3, r7, #16
  40185a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  40185c:	f107 0314 	add.w	r3, r7, #20
  401860:	4619      	mov	r1, r3
  401862:	6878      	ldr	r0, [r7, #4]
  401864:	4b06      	ldr	r3, [pc, #24]	; (401880 <ov_test_write+0xa8>)
  401866:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401868:	693a      	ldr	r2, [r7, #16]
  40186a:	68fb      	ldr	r3, [r7, #12]
  40186c:	429a      	cmp	r2, r3
  40186e:	d001      	beq.n	401874 <ov_test_write+0x9c>
		return 1;
  401870:	2301      	movs	r3, #1
  401872:	e000      	b.n	401876 <ov_test_write+0x9e>
	}

	return 0;
  401874:	2300      	movs	r3, #0
}
  401876:	4618      	mov	r0, r3
  401878:	3728      	adds	r7, #40	; 0x28
  40187a:	46bd      	mov	sp, r7
  40187c:	bd80      	pop	{r7, pc}
  40187e:	bf00      	nop
  401880:	00401889 	.word	0x00401889
  401884:	004018ad 	.word	0x004018ad

00401888 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401888:	b580      	push	{r7, lr}
  40188a:	b084      	sub	sp, #16
  40188c:	af00      	add	r7, sp, #0
  40188e:	6078      	str	r0, [r7, #4]
  401890:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  401892:	6839      	ldr	r1, [r7, #0]
  401894:	6878      	ldr	r0, [r7, #4]
  401896:	4b04      	ldr	r3, [pc, #16]	; (4018a8 <ov_read_reg+0x20>)
  401898:	4798      	blx	r3
  40189a:	60f8      	str	r0, [r7, #12]

	return ul_status;
  40189c:	68fb      	ldr	r3, [r7, #12]
}
  40189e:	4618      	mov	r0, r3
  4018a0:	3710      	adds	r7, #16
  4018a2:	46bd      	mov	sp, r7
  4018a4:	bd80      	pop	{r7, pc}
  4018a6:	bf00      	nop
  4018a8:	00400bc1 	.word	0x00400bc1

004018ac <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  4018ac:	b580      	push	{r7, lr}
  4018ae:	b084      	sub	sp, #16
  4018b0:	af00      	add	r7, sp, #0
  4018b2:	6078      	str	r0, [r7, #4]
  4018b4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  4018b6:	6839      	ldr	r1, [r7, #0]
  4018b8:	6878      	ldr	r0, [r7, #4]
  4018ba:	4b04      	ldr	r3, [pc, #16]	; (4018cc <ov_write_reg+0x20>)
  4018bc:	4798      	blx	r3
  4018be:	60f8      	str	r0, [r7, #12]

	return ul_status;
  4018c0:	68fb      	ldr	r3, [r7, #12]
}
  4018c2:	4618      	mov	r0, r3
  4018c4:	3710      	adds	r7, #16
  4018c6:	46bd      	mov	sp, r7
  4018c8:	bd80      	pop	{r7, pc}
  4018ca:	bf00      	nop
  4018cc:	00400ccd 	.word	0x00400ccd

004018d0 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  4018d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4018d4:	b08a      	sub	sp, #40	; 0x28
  4018d6:	af00      	add	r7, sp, #0
  4018d8:	6078      	str	r0, [r7, #4]
  4018da:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  4018dc:	2300      	movs	r3, #0
  4018de:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  4018e0:	683b      	ldr	r3, [r7, #0]
  4018e2:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  4018e4:	e048      	b.n	401978 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  4018e6:	6a3b      	ldr	r3, [r7, #32]
  4018e8:	781b      	ldrb	r3, [r3, #0]
  4018ea:	2bfe      	cmp	r3, #254	; 0xfe
  4018ec:	d126      	bne.n	40193c <ov_write_regs+0x6c>
			delay_ms(5);
  4018ee:	4b29      	ldr	r3, [pc, #164]	; (401994 <ov_write_regs+0xc4>)
  4018f0:	4798      	blx	r3
  4018f2:	4603      	mov	r3, r0
  4018f4:	4619      	mov	r1, r3
  4018f6:	f04f 0200 	mov.w	r2, #0
  4018fa:	460b      	mov	r3, r1
  4018fc:	4614      	mov	r4, r2
  4018fe:	00a6      	lsls	r6, r4, #2
  401900:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401904:	009d      	lsls	r5, r3, #2
  401906:	462b      	mov	r3, r5
  401908:	4634      	mov	r4, r6
  40190a:	185b      	adds	r3, r3, r1
  40190c:	eb44 0402 	adc.w	r4, r4, r2
  401910:	f243 61af 	movw	r1, #13999	; 0x36af
  401914:	f04f 0200 	mov.w	r2, #0
  401918:	eb13 0b01 	adds.w	fp, r3, r1
  40191c:	eb44 0c02 	adc.w	ip, r4, r2
  401920:	4658      	mov	r0, fp
  401922:	4661      	mov	r1, ip
  401924:	4c1c      	ldr	r4, [pc, #112]	; (401998 <ov_write_regs+0xc8>)
  401926:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40192a:	f04f 0300 	mov.w	r3, #0
  40192e:	47a0      	blx	r4
  401930:	4603      	mov	r3, r0
  401932:	460c      	mov	r4, r1
  401934:	4618      	mov	r0, r3
  401936:	4b19      	ldr	r3, [pc, #100]	; (40199c <ov_write_regs+0xcc>)
  401938:	4798      	blx	r3
  40193a:	e01a      	b.n	401972 <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  40193c:	6a3b      	ldr	r3, [r7, #32]
  40193e:	781b      	ldrb	r3, [r3, #0]
  401940:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  401942:	2301      	movs	r3, #1
  401944:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  401946:	2330      	movs	r3, #48	; 0x30
  401948:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  40194a:	2301      	movs	r3, #1
  40194c:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  40194e:	6a3b      	ldr	r3, [r7, #32]
  401950:	3301      	adds	r3, #1
  401952:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  401954:	f107 0308 	add.w	r3, r7, #8
  401958:	4619      	mov	r1, r3
  40195a:	6878      	ldr	r0, [r7, #4]
  40195c:	4b10      	ldr	r3, [pc, #64]	; (4019a0 <ov_write_regs+0xd0>)
  40195e:	4798      	blx	r3
  401960:	61f8      	str	r0, [r7, #28]
			ul_size++;
  401962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401964:	3301      	adds	r3, #1
  401966:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  401968:	69fb      	ldr	r3, [r7, #28]
  40196a:	2b08      	cmp	r3, #8
  40196c:	d101      	bne.n	401972 <ov_write_regs+0xa2>
				return ul_err;
  40196e:	69fb      	ldr	r3, [r7, #28]
  401970:	e00b      	b.n	40198a <ov_write_regs+0xba>
			}
		}

		p_next++;
  401972:	6a3b      	ldr	r3, [r7, #32]
  401974:	3302      	adds	r3, #2
  401976:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  401978:	6a3b      	ldr	r3, [r7, #32]
  40197a:	781b      	ldrb	r3, [r3, #0]
  40197c:	2bff      	cmp	r3, #255	; 0xff
  40197e:	d1b2      	bne.n	4018e6 <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  401980:	6a3b      	ldr	r3, [r7, #32]
  401982:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  401984:	2bff      	cmp	r3, #255	; 0xff
  401986:	d1ae      	bne.n	4018e6 <ov_write_regs+0x16>
	}
	return 0;
  401988:	2300      	movs	r3, #0
}
  40198a:	4618      	mov	r0, r3
  40198c:	3728      	adds	r7, #40	; 0x28
  40198e:	46bd      	mov	sp, r7
  401990:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  401994:	004016dd 	.word	0x004016dd
  401998:	00403d49 	.word	0x00403d49
  40199c:	20000001 	.word	0x20000001
  4019a0:	004018ad 	.word	0x004018ad

004019a4 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4019a4:	b580      	push	{r7, lr}
  4019a6:	b08a      	sub	sp, #40	; 0x28
  4019a8:	af00      	add	r7, sp, #0
  4019aa:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  4019ac:	2301      	movs	r3, #1
  4019ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  4019b2:	f107 030c 	add.w	r3, r7, #12
  4019b6:	2200      	movs	r2, #0
  4019b8:	601a      	str	r2, [r3, #0]
  4019ba:	605a      	str	r2, [r3, #4]
  4019bc:	609a      	str	r2, [r3, #8]
  4019be:	60da      	str	r2, [r3, #12]
  4019c0:	611a      	str	r2, [r3, #16]
  4019c2:	23ff      	movs	r3, #255	; 0xff
  4019c4:	733b      	strb	r3, [r7, #12]
  4019c6:	2301      	movs	r3, #1
  4019c8:	613b      	str	r3, [r7, #16]
  4019ca:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4019ce:	617b      	str	r3, [r7, #20]
  4019d0:	2301      	movs	r3, #1
  4019d2:	61bb      	str	r3, [r7, #24]
  4019d4:	2330      	movs	r3, #48	; 0x30
  4019d6:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  4019d8:	f107 030c 	add.w	r3, r7, #12
  4019dc:	4619      	mov	r1, r3
  4019de:	6878      	ldr	r0, [r7, #4]
  4019e0:	4b0f      	ldr	r3, [pc, #60]	; (401a20 <ov_init+0x7c>)
  4019e2:	4798      	blx	r3
	
	uint32_t ul_id = 0;
  4019e4:	2300      	movs	r3, #0
  4019e6:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  4019e8:	6878      	ldr	r0, [r7, #4]
  4019ea:	4b0e      	ldr	r3, [pc, #56]	; (401a24 <ov_init+0x80>)
  4019ec:	4798      	blx	r3
  4019ee:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  4019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019f2:	0a1b      	lsrs	r3, r3, #8
  4019f4:	b2db      	uxtb	r3, r3
  4019f6:	2b26      	cmp	r3, #38	; 0x26
  4019f8:	d10d      	bne.n	401a16 <ov_init+0x72>
		if (ov_manufacturer(p_twi) == 0) {
  4019fa:	6878      	ldr	r0, [r7, #4]
  4019fc:	4b0a      	ldr	r3, [pc, #40]	; (401a28 <ov_init+0x84>)
  4019fe:	4798      	blx	r3
  401a00:	4603      	mov	r3, r0
  401a02:	2b00      	cmp	r3, #0
  401a04:	d107      	bne.n	401a16 <ov_init+0x72>
			if (ov_test_write(p_twi) == 0) {
  401a06:	6878      	ldr	r0, [r7, #4]
  401a08:	4b08      	ldr	r3, [pc, #32]	; (401a2c <ov_init+0x88>)
  401a0a:	4798      	blx	r3
  401a0c:	4603      	mov	r3, r0
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d101      	bne.n	401a16 <ov_init+0x72>
				return 0;
  401a12:	2300      	movs	r3, #0
  401a14:	e000      	b.n	401a18 <ov_init+0x74>
			}
		}
	}

	return 1;
  401a16:	2301      	movs	r3, #1
}
  401a18:	4618      	mov	r0, r3
  401a1a:	3728      	adds	r7, #40	; 0x28
  401a1c:	46bd      	mov	sp, r7
  401a1e:	bd80      	pop	{r7, pc}
  401a20:	004018ad 	.word	0x004018ad
  401a24:	004016f1 	.word	0x004016f1
  401a28:	00401761 	.word	0x00401761
  401a2c:	004017d9 	.word	0x004017d9

00401a30 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  401a30:	b580      	push	{r7, lr}
  401a32:	b084      	sub	sp, #16
  401a34:	af00      	add	r7, sp, #0
  401a36:	6078      	str	r0, [r7, #4]
  401a38:	460b      	mov	r3, r1
  401a3a:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  401a3c:	2300      	movs	r3, #0
  401a3e:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  401a40:	78fb      	ldrb	r3, [r7, #3]
  401a42:	2b11      	cmp	r3, #17
  401a44:	d85c      	bhi.n	401b00 <ov_configure+0xd0>
  401a46:	a201      	add	r2, pc, #4	; (adr r2, 401a4c <ov_configure+0x1c>)
  401a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a4c:	00401a95 	.word	0x00401a95
  401a50:	00401a9b 	.word	0x00401a9b
  401a54:	00401aa1 	.word	0x00401aa1
  401a58:	00401aa7 	.word	0x00401aa7
  401a5c:	00401aad 	.word	0x00401aad
  401a60:	00401ab3 	.word	0x00401ab3
  401a64:	00401ab9 	.word	0x00401ab9
  401a68:	00401abf 	.word	0x00401abf
  401a6c:	00401ac5 	.word	0x00401ac5
  401a70:	00401acb 	.word	0x00401acb
  401a74:	00401ad1 	.word	0x00401ad1
  401a78:	00401ad7 	.word	0x00401ad7
  401a7c:	00401add 	.word	0x00401add
  401a80:	00401ae3 	.word	0x00401ae3
  401a84:	00401ae9 	.word	0x00401ae9
  401a88:	00401aef 	.word	0x00401aef
  401a8c:	00401af5 	.word	0x00401af5
  401a90:	00401afb 	.word	0x00401afb
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  401a94:	4b22      	ldr	r3, [pc, #136]	; (401b20 <ov_configure+0xf0>)
  401a96:	60fb      	str	r3, [r7, #12]
		break;
  401a98:	e033      	b.n	401b02 <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  401a9a:	4b22      	ldr	r3, [pc, #136]	; (401b24 <ov_configure+0xf4>)
  401a9c:	60fb      	str	r3, [r7, #12]
		break;
  401a9e:	e030      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  401aa0:	4b21      	ldr	r3, [pc, #132]	; (401b28 <ov_configure+0xf8>)
  401aa2:	60fb      	str	r3, [r7, #12]
		break;
  401aa4:	e02d      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  401aa6:	4b21      	ldr	r3, [pc, #132]	; (401b2c <ov_configure+0xfc>)
  401aa8:	60fb      	str	r3, [r7, #12]
		break;
  401aaa:	e02a      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  401aac:	4b20      	ldr	r3, [pc, #128]	; (401b30 <ov_configure+0x100>)
  401aae:	60fb      	str	r3, [r7, #12]
		break;
  401ab0:	e027      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  401ab2:	4b20      	ldr	r3, [pc, #128]	; (401b34 <ov_configure+0x104>)
  401ab4:	60fb      	str	r3, [r7, #12]
		break;
  401ab6:	e024      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  401ab8:	4b1f      	ldr	r3, [pc, #124]	; (401b38 <ov_configure+0x108>)
  401aba:	60fb      	str	r3, [r7, #12]
		break;
  401abc:	e021      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  401abe:	4b1f      	ldr	r3, [pc, #124]	; (401b3c <ov_configure+0x10c>)
  401ac0:	60fb      	str	r3, [r7, #12]
		break;
  401ac2:	e01e      	b.n	401b02 <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  401ac4:	4b1e      	ldr	r3, [pc, #120]	; (401b40 <ov_configure+0x110>)
  401ac6:	60fb      	str	r3, [r7, #12]
		break;
  401ac8:	e01b      	b.n	401b02 <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  401aca:	4b1e      	ldr	r3, [pc, #120]	; (401b44 <ov_configure+0x114>)
  401acc:	60fb      	str	r3, [r7, #12]
		break;
  401ace:	e018      	b.n	401b02 <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  401ad0:	4b1d      	ldr	r3, [pc, #116]	; (401b48 <ov_configure+0x118>)
  401ad2:	60fb      	str	r3, [r7, #12]
		break;
  401ad4:	e015      	b.n	401b02 <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  401ad6:	4b1d      	ldr	r3, [pc, #116]	; (401b4c <ov_configure+0x11c>)
  401ad8:	60fb      	str	r3, [r7, #12]
		break;
  401ada:	e012      	b.n	401b02 <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  401adc:	4b1c      	ldr	r3, [pc, #112]	; (401b50 <ov_configure+0x120>)
  401ade:	60fb      	str	r3, [r7, #12]
		break;
  401ae0:	e00f      	b.n	401b02 <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  401ae2:	4b1c      	ldr	r3, [pc, #112]	; (401b54 <ov_configure+0x124>)
  401ae4:	60fb      	str	r3, [r7, #12]
		break;
  401ae6:	e00c      	b.n	401b02 <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  401ae8:	4b1b      	ldr	r3, [pc, #108]	; (401b58 <ov_configure+0x128>)
  401aea:	60fb      	str	r3, [r7, #12]
		break;
  401aec:	e009      	b.n	401b02 <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  401aee:	4b1b      	ldr	r3, [pc, #108]	; (401b5c <ov_configure+0x12c>)
  401af0:	60fb      	str	r3, [r7, #12]
		break;
  401af2:	e006      	b.n	401b02 <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  401af4:	4b1a      	ldr	r3, [pc, #104]	; (401b60 <ov_configure+0x130>)
  401af6:	60fb      	str	r3, [r7, #12]
		break;
  401af8:	e003      	b.n	401b02 <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  401afa:	4b1a      	ldr	r3, [pc, #104]	; (401b64 <ov_configure+0x134>)
  401afc:	60fb      	str	r3, [r7, #12]
		break;
  401afe:	e000      	b.n	401b02 <ov_configure+0xd2>

	default:
		break;
  401b00:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  401b02:	68fb      	ldr	r3, [r7, #12]
  401b04:	2b00      	cmp	r3, #0
  401b06:	d005      	beq.n	401b14 <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  401b08:	68f9      	ldr	r1, [r7, #12]
  401b0a:	6878      	ldr	r0, [r7, #4]
  401b0c:	4b16      	ldr	r3, [pc, #88]	; (401b68 <ov_configure+0x138>)
  401b0e:	4798      	blx	r3
		return 0;
  401b10:	2300      	movs	r3, #0
  401b12:	e000      	b.n	401b16 <ov_configure+0xe6>
	}

	return 1;
  401b14:	2301      	movs	r3, #1
}
  401b16:	4618      	mov	r0, r3
  401b18:	3710      	adds	r7, #16
  401b1a:	46bd      	mov	sp, r7
  401b1c:	bd80      	pop	{r7, pc}
  401b1e:	bf00      	nop
  401b20:	00408c2c 	.word	0x00408c2c
  401b24:	00408dac 	.word	0x00408dac
  401b28:	00408dc0 	.word	0x00408dc0
  401b2c:	00408dd4 	.word	0x00408dd4
  401b30:	00408e24 	.word	0x00408e24
  401b34:	00408e78 	.word	0x00408e78
  401b38:	00408ecc 	.word	0x00408ecc
  401b3c:	00408f1c 	.word	0x00408f1c
  401b40:	00408f70 	.word	0x00408f70
  401b44:	00408fc4 	.word	0x00408fc4
  401b48:	004090b4 	.word	0x004090b4
  401b4c:	004091a4 	.word	0x004091a4
  401b50:	00409294 	.word	0x00409294
  401b54:	00409384 	.word	0x00409384
  401b58:	00409478 	.word	0x00409478
  401b5c:	0040956c 	.word	0x0040956c
  401b60:	00409660 	.word	0x00409660
  401b64:	00409754 	.word	0x00409754
  401b68:	004018d1 	.word	0x004018d1

00401b6c <NVIC_EnableIRQ>:
{
  401b6c:	b480      	push	{r7}
  401b6e:	b083      	sub	sp, #12
  401b70:	af00      	add	r7, sp, #0
  401b72:	4603      	mov	r3, r0
  401b74:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b76:	4908      	ldr	r1, [pc, #32]	; (401b98 <NVIC_EnableIRQ+0x2c>)
  401b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b7c:	095b      	lsrs	r3, r3, #5
  401b7e:	79fa      	ldrb	r2, [r7, #7]
  401b80:	f002 021f 	and.w	r2, r2, #31
  401b84:	2001      	movs	r0, #1
  401b86:	fa00 f202 	lsl.w	r2, r0, r2
  401b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401b8e:	bf00      	nop
  401b90:	370c      	adds	r7, #12
  401b92:	46bd      	mov	sp, r7
  401b94:	bc80      	pop	{r7}
  401b96:	4770      	bx	lr
  401b98:	e000e100 	.word	0xe000e100

00401b9c <osc_get_rate>:
{
  401b9c:	b480      	push	{r7}
  401b9e:	b083      	sub	sp, #12
  401ba0:	af00      	add	r7, sp, #0
  401ba2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401ba4:	687b      	ldr	r3, [r7, #4]
  401ba6:	2b07      	cmp	r3, #7
  401ba8:	d825      	bhi.n	401bf6 <osc_get_rate+0x5a>
  401baa:	a201      	add	r2, pc, #4	; (adr r2, 401bb0 <osc_get_rate+0x14>)
  401bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bb0:	00401bd1 	.word	0x00401bd1
  401bb4:	00401bd7 	.word	0x00401bd7
  401bb8:	00401bdd 	.word	0x00401bdd
  401bbc:	00401be3 	.word	0x00401be3
  401bc0:	00401be7 	.word	0x00401be7
  401bc4:	00401beb 	.word	0x00401beb
  401bc8:	00401bef 	.word	0x00401bef
  401bcc:	00401bf3 	.word	0x00401bf3
		return OSC_SLCK_32K_RC_HZ;
  401bd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401bd4:	e010      	b.n	401bf8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bda:	e00d      	b.n	401bf8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401be0:	e00a      	b.n	401bf8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401be2:	4b08      	ldr	r3, [pc, #32]	; (401c04 <osc_get_rate+0x68>)
  401be4:	e008      	b.n	401bf8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401be6:	4b08      	ldr	r3, [pc, #32]	; (401c08 <osc_get_rate+0x6c>)
  401be8:	e006      	b.n	401bf8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401bea:	4b08      	ldr	r3, [pc, #32]	; (401c0c <osc_get_rate+0x70>)
  401bec:	e004      	b.n	401bf8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401bee:	4b07      	ldr	r3, [pc, #28]	; (401c0c <osc_get_rate+0x70>)
  401bf0:	e002      	b.n	401bf8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401bf2:	4b06      	ldr	r3, [pc, #24]	; (401c0c <osc_get_rate+0x70>)
  401bf4:	e000      	b.n	401bf8 <osc_get_rate+0x5c>
	return 0;
  401bf6:	2300      	movs	r3, #0
}
  401bf8:	4618      	mov	r0, r3
  401bfa:	370c      	adds	r7, #12
  401bfc:	46bd      	mov	sp, r7
  401bfe:	bc80      	pop	{r7}
  401c00:	4770      	bx	lr
  401c02:	bf00      	nop
  401c04:	003d0900 	.word	0x003d0900
  401c08:	007a1200 	.word	0x007a1200
  401c0c:	00b71b00 	.word	0x00b71b00

00401c10 <sysclk_get_main_hz>:
{
  401c10:	b580      	push	{r7, lr}
  401c12:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401c14:	2006      	movs	r0, #6
  401c16:	4b04      	ldr	r3, [pc, #16]	; (401c28 <sysclk_get_main_hz+0x18>)
  401c18:	4798      	blx	r3
  401c1a:	4602      	mov	r2, r0
  401c1c:	4613      	mov	r3, r2
  401c1e:	009b      	lsls	r3, r3, #2
  401c20:	4413      	add	r3, r2
  401c22:	009b      	lsls	r3, r3, #2
}
  401c24:	4618      	mov	r0, r3
  401c26:	bd80      	pop	{r7, pc}
  401c28:	00401b9d 	.word	0x00401b9d

00401c2c <sysclk_get_cpu_hz>:
{
  401c2c:	b580      	push	{r7, lr}
  401c2e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c30:	4b02      	ldr	r3, [pc, #8]	; (401c3c <sysclk_get_cpu_hz+0x10>)
  401c32:	4798      	blx	r3
  401c34:	4603      	mov	r3, r0
  401c36:	085b      	lsrs	r3, r3, #1
}
  401c38:	4618      	mov	r0, r3
  401c3a:	bd80      	pop	{r7, pc}
  401c3c:	00401c11 	.word	0x00401c11

00401c40 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  401c40:	b580      	push	{r7, lr}
  401c42:	b082      	sub	sp, #8
  401c44:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  401c46:	2100      	movs	r1, #0
  401c48:	4809      	ldr	r0, [pc, #36]	; (401c70 <TC0_Handler+0x30>)
  401c4a:	4b0a      	ldr	r3, [pc, #40]	; (401c74 <TC0_Handler+0x34>)
  401c4c:	4798      	blx	r3
  401c4e:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	f003 0310 	and.w	r3, r3, #16
  401c56:	2b00      	cmp	r3, #0
  401c58:	d006      	beq.n	401c68 <TC0_Handler+0x28>
		counts++;
  401c5a:	4b07      	ldr	r3, [pc, #28]	; (401c78 <TC0_Handler+0x38>)
  401c5c:	781b      	ldrb	r3, [r3, #0]
  401c5e:	b2db      	uxtb	r3, r3
  401c60:	3301      	adds	r3, #1
  401c62:	b2da      	uxtb	r2, r3
  401c64:	4b04      	ldr	r3, [pc, #16]	; (401c78 <TC0_Handler+0x38>)
  401c66:	701a      	strb	r2, [r3, #0]
	}
}
  401c68:	bf00      	nop
  401c6a:	3708      	adds	r7, #8
  401c6c:	46bd      	mov	sp, r7
  401c6e:	bd80      	pop	{r7, pc}
  401c70:	40010000 	.word	0x40010000
  401c74:	00400487 	.word	0x00400487
  401c78:	2000d7c8 	.word	0x2000d7c8

00401c7c <configure_tc>:

void configure_tc(void)
{
  401c7c:	b590      	push	{r4, r7, lr}
  401c7e:	b087      	sub	sp, #28
  401c80:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  401c82:	4b16      	ldr	r3, [pc, #88]	; (401cdc <configure_tc+0x60>)
  401c84:	4798      	blx	r3
  401c86:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  401c88:	2017      	movs	r0, #23
  401c8a:	4b15      	ldr	r3, [pc, #84]	; (401ce0 <configure_tc+0x64>)
  401c8c:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401c8e:	1d39      	adds	r1, r7, #4
  401c90:	f107 0208 	add.w	r2, r7, #8
  401c94:	68fb      	ldr	r3, [r7, #12]
  401c96:	9300      	str	r3, [sp, #0]
  401c98:	460b      	mov	r3, r1
  401c9a:	68f9      	ldr	r1, [r7, #12]
  401c9c:	2001      	movs	r0, #1
  401c9e:	4c11      	ldr	r4, [pc, #68]	; (401ce4 <configure_tc+0x68>)
  401ca0:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  401ca2:	687b      	ldr	r3, [r7, #4]
  401ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401ca8:	461a      	mov	r2, r3
  401caa:	2100      	movs	r1, #0
  401cac:	480e      	ldr	r0, [pc, #56]	; (401ce8 <configure_tc+0x6c>)
  401cae:	4b0f      	ldr	r3, [pc, #60]	; (401cec <configure_tc+0x70>)
  401cb0:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  401cb2:	68bb      	ldr	r3, [r7, #8]
  401cb4:	68fa      	ldr	r2, [r7, #12]
  401cb6:	fbb2 f3f3 	udiv	r3, r2, r3
  401cba:	461a      	mov	r2, r3
  401cbc:	2100      	movs	r1, #0
  401cbe:	480a      	ldr	r0, [pc, #40]	; (401ce8 <configure_tc+0x6c>)
  401cc0:	4b0b      	ldr	r3, [pc, #44]	; (401cf0 <configure_tc+0x74>)
  401cc2:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  401cc4:	2017      	movs	r0, #23
  401cc6:	4b0b      	ldr	r3, [pc, #44]	; (401cf4 <configure_tc+0x78>)
  401cc8:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  401cca:	2210      	movs	r2, #16
  401ccc:	2100      	movs	r1, #0
  401cce:	4806      	ldr	r0, [pc, #24]	; (401ce8 <configure_tc+0x6c>)
  401cd0:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <configure_tc+0x7c>)
  401cd2:	4798      	blx	r3
  401cd4:	bf00      	nop
  401cd6:	3714      	adds	r7, #20
  401cd8:	46bd      	mov	sp, r7
  401cda:	bd90      	pop	{r4, r7, pc}
  401cdc:	00401c2d 	.word	0x00401c2d
  401ce0:	00403539 	.word	0x00403539
  401ce4:	004004a9 	.word	0x004004a9
  401ce8:	40010000 	.word	0x40010000
  401cec:	004003e5 	.word	0x004003e5
  401cf0:	0040043d 	.word	0x0040043d
  401cf4:	00401b6d 	.word	0x00401b6d
  401cf8:	00400461 	.word	0x00400461

00401cfc <NVIC_EnableIRQ>:
{
  401cfc:	b480      	push	{r7}
  401cfe:	b083      	sub	sp, #12
  401d00:	af00      	add	r7, sp, #0
  401d02:	4603      	mov	r3, r0
  401d04:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d06:	4908      	ldr	r1, [pc, #32]	; (401d28 <NVIC_EnableIRQ+0x2c>)
  401d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d0c:	095b      	lsrs	r3, r3, #5
  401d0e:	79fa      	ldrb	r2, [r7, #7]
  401d10:	f002 021f 	and.w	r2, r2, #31
  401d14:	2001      	movs	r0, #1
  401d16:	fa00 f202 	lsl.w	r2, r0, r2
  401d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d1e:	bf00      	nop
  401d20:	370c      	adds	r7, #12
  401d22:	46bd      	mov	sp, r7
  401d24:	bc80      	pop	{r7}
  401d26:	4770      	bx	lr
  401d28:	e000e100 	.word	0xe000e100

00401d2c <osc_get_rate>:
{
  401d2c:	b480      	push	{r7}
  401d2e:	b083      	sub	sp, #12
  401d30:	af00      	add	r7, sp, #0
  401d32:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401d34:	687b      	ldr	r3, [r7, #4]
  401d36:	2b07      	cmp	r3, #7
  401d38:	d825      	bhi.n	401d86 <osc_get_rate+0x5a>
  401d3a:	a201      	add	r2, pc, #4	; (adr r2, 401d40 <osc_get_rate+0x14>)
  401d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d40:	00401d61 	.word	0x00401d61
  401d44:	00401d67 	.word	0x00401d67
  401d48:	00401d6d 	.word	0x00401d6d
  401d4c:	00401d73 	.word	0x00401d73
  401d50:	00401d77 	.word	0x00401d77
  401d54:	00401d7b 	.word	0x00401d7b
  401d58:	00401d7f 	.word	0x00401d7f
  401d5c:	00401d83 	.word	0x00401d83
		return OSC_SLCK_32K_RC_HZ;
  401d60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d64:	e010      	b.n	401d88 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d6a:	e00d      	b.n	401d88 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d70:	e00a      	b.n	401d88 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401d72:	4b08      	ldr	r3, [pc, #32]	; (401d94 <osc_get_rate+0x68>)
  401d74:	e008      	b.n	401d88 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401d76:	4b08      	ldr	r3, [pc, #32]	; (401d98 <osc_get_rate+0x6c>)
  401d78:	e006      	b.n	401d88 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401d7a:	4b08      	ldr	r3, [pc, #32]	; (401d9c <osc_get_rate+0x70>)
  401d7c:	e004      	b.n	401d88 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401d7e:	4b07      	ldr	r3, [pc, #28]	; (401d9c <osc_get_rate+0x70>)
  401d80:	e002      	b.n	401d88 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401d82:	4b06      	ldr	r3, [pc, #24]	; (401d9c <osc_get_rate+0x70>)
  401d84:	e000      	b.n	401d88 <osc_get_rate+0x5c>
	return 0;
  401d86:	2300      	movs	r3, #0
}
  401d88:	4618      	mov	r0, r3
  401d8a:	370c      	adds	r7, #12
  401d8c:	46bd      	mov	sp, r7
  401d8e:	bc80      	pop	{r7}
  401d90:	4770      	bx	lr
  401d92:	bf00      	nop
  401d94:	003d0900 	.word	0x003d0900
  401d98:	007a1200 	.word	0x007a1200
  401d9c:	00b71b00 	.word	0x00b71b00

00401da0 <sysclk_get_main_hz>:
{
  401da0:	b580      	push	{r7, lr}
  401da2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401da4:	2006      	movs	r0, #6
  401da6:	4b04      	ldr	r3, [pc, #16]	; (401db8 <sysclk_get_main_hz+0x18>)
  401da8:	4798      	blx	r3
  401daa:	4602      	mov	r2, r0
  401dac:	4613      	mov	r3, r2
  401dae:	009b      	lsls	r3, r3, #2
  401db0:	4413      	add	r3, r2
  401db2:	009b      	lsls	r3, r3, #2
}
  401db4:	4618      	mov	r0, r3
  401db6:	bd80      	pop	{r7, pc}
  401db8:	00401d2d 	.word	0x00401d2d

00401dbc <sysclk_get_cpu_hz>:
{
  401dbc:	b580      	push	{r7, lr}
  401dbe:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401dc0:	4b02      	ldr	r3, [pc, #8]	; (401dcc <sysclk_get_cpu_hz+0x10>)
  401dc2:	4798      	blx	r3
  401dc4:	4603      	mov	r3, r0
  401dc6:	085b      	lsrs	r3, r3, #1
}
  401dc8:	4618      	mov	r0, r3
  401dca:	bd80      	pop	{r7, pc}
  401dcc:	00401da1 	.word	0x00401da1

00401dd0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401dd0:	b580      	push	{r7, lr}
  401dd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401dd4:	4b02      	ldr	r3, [pc, #8]	; (401de0 <sysclk_get_peripheral_hz+0x10>)
  401dd6:	4798      	blx	r3
  401dd8:	4603      	mov	r3, r0
  401dda:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401ddc:	4618      	mov	r0, r3
  401dde:	bd80      	pop	{r7, pc}
  401de0:	00401da1 	.word	0x00401da1

00401de4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401de4:	b580      	push	{r7, lr}
  401de6:	b082      	sub	sp, #8
  401de8:	af00      	add	r7, sp, #0
  401dea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401dec:	6878      	ldr	r0, [r7, #4]
  401dee:	4b03      	ldr	r3, [pc, #12]	; (401dfc <sysclk_enable_peripheral_clock+0x18>)
  401df0:	4798      	blx	r3
}
  401df2:	bf00      	nop
  401df4:	3708      	adds	r7, #8
  401df6:	46bd      	mov	sp, r7
  401df8:	bd80      	pop	{r7, pc}
  401dfa:	bf00      	nop
  401dfc:	00403539 	.word	0x00403539

00401e00 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart()
{
  401e00:	b580      	push	{r7, lr}
  401e02:	b082      	sub	sp, #8
  401e04:	af00      	add	r7, sp, #0
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  401e06:	2101      	movs	r1, #1
  401e08:	4815      	ldr	r0, [pc, #84]	; (401e60 <USART0_Handler+0x60>)
  401e0a:	4b16      	ldr	r3, [pc, #88]	; (401e64 <USART0_Handler+0x64>)
  401e0c:	4798      	blx	r3
	
	/* Read USART status. */
	uint32_t ul_status = usart_get_status(BOARD_USART);
  401e0e:	4814      	ldr	r0, [pc, #80]	; (401e60 <USART0_Handler+0x60>)
  401e10:	4b15      	ldr	r3, [pc, #84]	; (401e68 <USART0_Handler+0x68>)
  401e12:	4798      	blx	r3
  401e14:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	uint8_t recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401e16:	4915      	ldr	r1, [pc, #84]	; (401e6c <USART0_Handler+0x6c>)
  401e18:	4811      	ldr	r0, [pc, #68]	; (401e60 <USART0_Handler+0x60>)
  401e1a:	4b15      	ldr	r3, [pc, #84]	; (401e70 <USART0_Handler+0x70>)
  401e1c:	4798      	blx	r3
  401e1e:	4603      	mov	r3, r0
  401e20:	70fb      	strb	r3, [r7, #3]
	
	if (ul_status & US_CSR_RXRDY) {
  401e22:	687b      	ldr	r3, [r7, #4]
  401e24:	f003 0301 	and.w	r3, r3, #1
  401e28:	2b00      	cmp	r3, #0
  401e2a:	d011      	beq.n	401e50 <USART0_Handler+0x50>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401e2c:	490f      	ldr	r1, [pc, #60]	; (401e6c <USART0_Handler+0x6c>)
  401e2e:	480c      	ldr	r0, [pc, #48]	; (401e60 <USART0_Handler+0x60>)
  401e30:	4b0f      	ldr	r3, [pc, #60]	; (401e70 <USART0_Handler+0x70>)
  401e32:	4798      	blx	r3
  401e34:	4603      	mov	r3, r0
  401e36:	70fb      	strb	r3, [r7, #3]
		usart_buffer[usart_buffer_index] = (uint8_t) received_byte_wifi;
  401e38:	4b0e      	ldr	r3, [pc, #56]	; (401e74 <USART0_Handler+0x74>)
  401e3a:	681b      	ldr	r3, [r3, #0]
  401e3c:	4a0b      	ldr	r2, [pc, #44]	; (401e6c <USART0_Handler+0x6c>)
  401e3e:	6812      	ldr	r2, [r2, #0]
  401e40:	b2d1      	uxtb	r1, r2
  401e42:	4a0d      	ldr	r2, [pc, #52]	; (401e78 <USART0_Handler+0x78>)
  401e44:	54d1      	strb	r1, [r2, r3]
		usart_buffer_index++;
  401e46:	4b0b      	ldr	r3, [pc, #44]	; (401e74 <USART0_Handler+0x74>)
  401e48:	681b      	ldr	r3, [r3, #0]
  401e4a:	3301      	adds	r3, #1
  401e4c:	4a09      	ldr	r2, [pc, #36]	; (401e74 <USART0_Handler+0x74>)
  401e4e:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  401e50:	2101      	movs	r1, #1
  401e52:	4803      	ldr	r0, [pc, #12]	; (401e60 <USART0_Handler+0x60>)
  401e54:	4b09      	ldr	r3, [pc, #36]	; (401e7c <USART0_Handler+0x7c>)
  401e56:	4798      	blx	r3
}
  401e58:	bf00      	nop
  401e5a:	3708      	adds	r7, #8
  401e5c:	46bd      	mov	sp, r7
  401e5e:	bd80      	pop	{r7, pc}
  401e60:	40024000 	.word	0x40024000
  401e64:	00400feb 	.word	0x00400feb
  401e68:	00401005 	.word	0x00401005
  401e6c:	2000d58c 	.word	0x2000d58c
  401e70:	004010c9 	.word	0x004010c9
  401e74:	2000d784 	.word	0x2000d784
  401e78:	2000d590 	.word	0x2000d590
  401e7c:	00400fd1 	.word	0x00400fd1

00401e80 <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart()
{
  401e80:	b5b0      	push	{r4, r5, r7, lr}
  401e82:	b086      	sub	sp, #24
  401e84:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401e86:	4b15      	ldr	r3, [pc, #84]	; (401edc <configure_usart+0x5c>)
  401e88:	463c      	mov	r4, r7
  401e8a:	461d      	mov	r5, r3
  401e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401e90:	e895 0003 	ldmia.w	r5, {r0, r1}
  401e94:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401e98:	4b11      	ldr	r3, [pc, #68]	; (401ee0 <configure_usart+0x60>)
  401e9a:	4798      	blx	r3
  401e9c:	4602      	mov	r2, r0
  401e9e:	4b11      	ldr	r3, [pc, #68]	; (401ee4 <configure_usart+0x64>)
  401ea0:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  401ea2:	200e      	movs	r0, #14
  401ea4:	4b10      	ldr	r3, [pc, #64]	; (401ee8 <configure_usart+0x68>)
  401ea6:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401ea8:	4b0e      	ldr	r3, [pc, #56]	; (401ee4 <configure_usart+0x64>)
  401eaa:	681a      	ldr	r2, [r3, #0]
  401eac:	463b      	mov	r3, r7
  401eae:	4619      	mov	r1, r3
  401eb0:	480e      	ldr	r0, [pc, #56]	; (401eec <configure_usart+0x6c>)
  401eb2:	4b0f      	ldr	r3, [pc, #60]	; (401ef0 <configure_usart+0x70>)
  401eb4:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401eb6:	f04f 31ff 	mov.w	r1, #4294967295
  401eba:	480c      	ldr	r0, [pc, #48]	; (401eec <configure_usart+0x6c>)
  401ebc:	4b0d      	ldr	r3, [pc, #52]	; (401ef4 <configure_usart+0x74>)
  401ebe:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401ec0:	480a      	ldr	r0, [pc, #40]	; (401eec <configure_usart+0x6c>)
  401ec2:	4b0d      	ldr	r3, [pc, #52]	; (401ef8 <configure_usart+0x78>)
  401ec4:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401ec6:	4809      	ldr	r0, [pc, #36]	; (401eec <configure_usart+0x6c>)
  401ec8:	4b0c      	ldr	r3, [pc, #48]	; (401efc <configure_usart+0x7c>)
  401eca:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401ecc:	200e      	movs	r0, #14
  401ece:	4b0c      	ldr	r3, [pc, #48]	; (401f00 <configure_usart+0x80>)
  401ed0:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  401ed2:	bf00      	nop
  401ed4:	3718      	adds	r7, #24
  401ed6:	46bd      	mov	sp, r7
  401ed8:	bdb0      	pop	{r4, r5, r7, pc}
  401eda:	bf00      	nop
  401edc:	00409844 	.word	0x00409844
  401ee0:	00401dd1 	.word	0x00401dd1
  401ee4:	2000d78c 	.word	0x2000d78c
  401ee8:	00401de5 	.word	0x00401de5
  401eec:	40024000 	.word	0x40024000
  401ef0:	00400f31 	.word	0x00400f31
  401ef4:	00400feb 	.word	0x00400feb
  401ef8:	00400f71 	.word	0x00400f71
  401efc:	00400fa1 	.word	0x00400fa1
  401f00:	00401cfd 	.word	0x00401cfd

00401f04 <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  401f04:	b480      	push	{r7}
  401f06:	b083      	sub	sp, #12
  401f08:	af00      	add	r7, sp, #0
  401f0a:	6078      	str	r0, [r7, #4]
  401f0c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
}
  401f0e:	bf00      	nop
  401f10:	370c      	adds	r7, #12
  401f12:	46bd      	mov	sp, r7
  401f14:	bc80      	pop	{r7}
  401f16:	4770      	bx	lr

00401f18 <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(){
  401f18:	b590      	push	{r4, r7, lr}
  401f1a:	b083      	sub	sp, #12
  401f1c:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  401f1e:	200c      	movs	r0, #12
  401f20:	4b0e      	ldr	r3, [pc, #56]	; (401f5c <configure_command_complete+0x44>)
  401f22:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401f24:	220a      	movs	r2, #10
  401f26:	2101      	movs	r1, #1
  401f28:	480d      	ldr	r0, [pc, #52]	; (401f60 <configure_command_complete+0x48>)
  401f2a:	4b0e      	ldr	r3, [pc, #56]	; (401f64 <configure_command_complete+0x4c>)
  401f2c:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  401f2e:	4b0e      	ldr	r3, [pc, #56]	; (401f68 <configure_command_complete+0x50>)
  401f30:	9300      	str	r3, [sp, #0]
  401f32:	2370      	movs	r3, #112	; 0x70
  401f34:	2201      	movs	r2, #1
  401f36:	210c      	movs	r1, #12
  401f38:	4809      	ldr	r0, [pc, #36]	; (401f60 <configure_command_complete+0x48>)
  401f3a:	4c0c      	ldr	r4, [pc, #48]	; (401f6c <configure_command_complete+0x54>)
  401f3c:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401f3e:	200c      	movs	r0, #12
  401f40:	4b0b      	ldr	r3, [pc, #44]	; (401f70 <configure_command_complete+0x58>)
  401f42:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401f44:	2101      	movs	r1, #1
  401f46:	4806      	ldr	r0, [pc, #24]	; (401f60 <configure_command_complete+0x48>)
  401f48:	4b0a      	ldr	r3, [pc, #40]	; (401f74 <configure_command_complete+0x5c>)
  401f4a:	4798      	blx	r3
	data_recieved = 0;
  401f4c:	4b0a      	ldr	r3, [pc, #40]	; (401f78 <configure_command_complete+0x60>)
  401f4e:	2200      	movs	r2, #0
  401f50:	601a      	str	r2, [r3, #0]
}
  401f52:	bf00      	nop
  401f54:	3704      	adds	r7, #4
  401f56:	46bd      	mov	sp, r7
  401f58:	bd90      	pop	{r4, r7, pc}
  401f5a:	bf00      	nop
  401f5c:	00403539 	.word	0x00403539
  401f60:	400e1000 	.word	0x400e1000
  401f64:	00402d7b 	.word	0x00402d7b
  401f68:	00401f05 	.word	0x00401f05
  401f6c:	00400919 	.word	0x00400919
  401f70:	00401cfd 	.word	0x00401cfd
  401f74:	0040300f 	.word	0x0040300f
  401f78:	2000d584 	.word	0x2000d584

00401f7c <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401f7c:	b480      	push	{r7}
  401f7e:	b083      	sub	sp, #12
  401f80:	af00      	add	r7, sp, #0
  401f82:	6078      	str	r0, [r7, #4]
  401f84:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  401f86:	4b04      	ldr	r3, [pc, #16]	; (401f98 <handler_web_setup+0x1c>)
  401f88:	2201      	movs	r2, #1
  401f8a:	601a      	str	r2, [r3, #0]
}
  401f8c:	bf00      	nop
  401f8e:	370c      	adds	r7, #12
  401f90:	46bd      	mov	sp, r7
  401f92:	bc80      	pop	{r7}
  401f94:	4770      	bx	lr
  401f96:	bf00      	nop
  401f98:	2000d588 	.word	0x2000d588

00401f9c <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(){
  401f9c:	b590      	push	{r4, r7, lr}
  401f9e:	b083      	sub	sp, #12
  401fa0:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  401fa2:	200c      	movs	r0, #12
  401fa4:	4b0e      	ldr	r3, [pc, #56]	; (401fe0 <configure_web_setup+0x44>)
  401fa6:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  401fa8:	220a      	movs	r2, #10
  401faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401fae:	480d      	ldr	r0, [pc, #52]	; (401fe4 <configure_web_setup+0x48>)
  401fb0:	4b0d      	ldr	r3, [pc, #52]	; (401fe8 <configure_web_setup+0x4c>)
  401fb2:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  401fb4:	4b0d      	ldr	r3, [pc, #52]	; (401fec <configure_web_setup+0x50>)
  401fb6:	9300      	str	r3, [sp, #0]
  401fb8:	2379      	movs	r3, #121	; 0x79
  401fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401fbe:	210c      	movs	r1, #12
  401fc0:	4808      	ldr	r0, [pc, #32]	; (401fe4 <configure_web_setup+0x48>)
  401fc2:	4c0b      	ldr	r4, [pc, #44]	; (401ff0 <configure_web_setup+0x54>)
  401fc4:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  401fc6:	200c      	movs	r0, #12
  401fc8:	4b0a      	ldr	r3, [pc, #40]	; (401ff4 <configure_web_setup+0x58>)
  401fca:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  401fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401fd0:	4804      	ldr	r0, [pc, #16]	; (401fe4 <configure_web_setup+0x48>)
  401fd2:	4b09      	ldr	r3, [pc, #36]	; (401ff8 <configure_web_setup+0x5c>)
  401fd4:	4798      	blx	r3
}
  401fd6:	bf00      	nop
  401fd8:	3704      	adds	r7, #4
  401fda:	46bd      	mov	sp, r7
  401fdc:	bd90      	pop	{r4, r7, pc}
  401fde:	bf00      	nop
  401fe0:	00403539 	.word	0x00403539
  401fe4:	400e1000 	.word	0x400e1000
  401fe8:	00402d7b 	.word	0x00402d7b
  401fec:	00401f7d 	.word	0x00401f7d
  401ff0:	00400919 	.word	0x00400919
  401ff4:	00401cfd 	.word	0x00401cfd
  401ff8:	0040300f 	.word	0x0040300f

00401ffc <open_websocket>:
		delay_ms(10);
		timeout_counter++;
	}
}

uint8_t open_websocket(uint8_t number_of_attempts) {
  401ffc:	b590      	push	{r4, r7, lr}
  401ffe:	b085      	sub	sp, #20
  402000:	af00      	add	r7, sp, #0
  402002:	4603      	mov	r3, r0
  402004:	71fb      	strb	r3, [r7, #7]
	// figure out handle
	uint8_t status_code;
	for(int i=0; i<number_of_attempts; i++){
  402006:	2300      	movs	r3, #0
  402008:	60fb      	str	r3, [r7, #12]
  40200a:	e01c      	b.n	402046 <open_websocket+0x4a>
		uint8_t status_code = write_wifi_command_safe("websocket_client -f bin wss://bigbrothersees.me/source_audio_socket\r\n", "Opened: ", 20000, 1);
  40200c:	2301      	movs	r3, #1
  40200e:	f644 6220 	movw	r2, #20000	; 0x4e20
  402012:	4911      	ldr	r1, [pc, #68]	; (402058 <open_websocket+0x5c>)
  402014:	4811      	ldr	r0, [pc, #68]	; (40205c <open_websocket+0x60>)
  402016:	4c12      	ldr	r4, [pc, #72]	; (402060 <open_websocket+0x64>)
  402018:	47a0      	blx	r4
  40201a:	4603      	mov	r3, r0
  40201c:	72fb      	strb	r3, [r7, #11]
		if (status_code >= 10){
  40201e:	7afb      	ldrb	r3, [r7, #11]
  402020:	2b09      	cmp	r3, #9
  402022:	d90d      	bls.n	402040 <open_websocket+0x44>
			if (status_code > 18){
  402024:	7afb      	ldrb	r3, [r7, #11]
  402026:	2b12      	cmp	r3, #18
  402028:	d906      	bls.n	402038 <open_websocket+0x3c>
				write_wifi_command_safe("close all\r\n","Success",200,0);
  40202a:	2300      	movs	r3, #0
  40202c:	22c8      	movs	r2, #200	; 0xc8
  40202e:	490d      	ldr	r1, [pc, #52]	; (402064 <open_websocket+0x68>)
  402030:	480d      	ldr	r0, [pc, #52]	; (402068 <open_websocket+0x6c>)
  402032:	4c0b      	ldr	r4, [pc, #44]	; (402060 <open_websocket+0x64>)
  402034:	47a0      	blx	r4
				continue;
  402036:	e003      	b.n	402040 <open_websocket+0x44>
			}
			return status_code - 10;
  402038:	7afb      	ldrb	r3, [r7, #11]
  40203a:	3b0a      	subs	r3, #10
  40203c:	b2db      	uxtb	r3, r3
  40203e:	e007      	b.n	402050 <open_websocket+0x54>
	for(int i=0; i<number_of_attempts; i++){
  402040:	68fb      	ldr	r3, [r7, #12]
  402042:	3301      	adds	r3, #1
  402044:	60fb      	str	r3, [r7, #12]
  402046:	79fa      	ldrb	r2, [r7, #7]
  402048:	68fb      	ldr	r3, [r7, #12]
  40204a:	429a      	cmp	r2, r3
  40204c:	dcde      	bgt.n	40200c <open_websocket+0x10>
		}
	}
	// should check last thing in input buffer for handle
	return NO_WEBSOCKET_OPEN; // indicate failure
  40204e:	230a      	movs	r3, #10
}
  402050:	4618      	mov	r0, r3
  402052:	3714      	adds	r7, #20
  402054:	46bd      	mov	sp, r7
  402056:	bd90      	pop	{r4, r7, pc}
  402058:	0040985c 	.word	0x0040985c
  40205c:	00409868 	.word	0x00409868
  402060:	00402895 	.word	0x00402895
  402064:	004098b0 	.word	0x004098b0
  402068:	004098b8 	.word	0x004098b8

0040206c <check_ws_handle>:

uint8_t check_ws_handle(uint8_t theoretical_handle){
  40206c:	b590      	push	{r4, r7, lr}
  40206e:	b0ad      	sub	sp, #180	; 0xb4
  402070:	af00      	add	r7, sp, #0
  402072:	4603      	mov	r3, r0
  402074:	71fb      	strb	r3, [r7, #7]
	char* templated_response[40];
	sprintf(templated_response, "%d WEBC", theoretical_handle);
  402076:	79fa      	ldrb	r2, [r7, #7]
  402078:	f107 030c 	add.w	r3, r7, #12
  40207c:	490c      	ldr	r1, [pc, #48]	; (4020b0 <check_ws_handle+0x44>)
  40207e:	4618      	mov	r0, r3
  402080:	4b0c      	ldr	r3, [pc, #48]	; (4020b4 <check_ws_handle+0x48>)
  402082:	4798      	blx	r3
	
	uint8_t command_response = write_wifi_command_safe("list\r\n", templated_response, 100, 0);
  402084:	f107 010c 	add.w	r1, r7, #12
  402088:	2300      	movs	r3, #0
  40208a:	2264      	movs	r2, #100	; 0x64
  40208c:	480a      	ldr	r0, [pc, #40]	; (4020b8 <check_ws_handle+0x4c>)
  40208e:	4c0b      	ldr	r4, [pc, #44]	; (4020bc <check_ws_handle+0x50>)
  402090:	47a0      	blx	r4
  402092:	4603      	mov	r3, r0
  402094:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	return command_response == COMMAND_SUCCESS ? COMMAND_SUCCESS : COMMAND_FAILURE;
  402098:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  40209c:	2b00      	cmp	r3, #0
  40209e:	bf14      	ite	ne
  4020a0:	2301      	movne	r3, #1
  4020a2:	2300      	moveq	r3, #0
  4020a4:	b2db      	uxtb	r3, r3
}
  4020a6:	4618      	mov	r0, r3
  4020a8:	37b4      	adds	r7, #180	; 0xb4
  4020aa:	46bd      	mov	sp, r7
  4020ac:	bd90      	pop	{r4, r7, pc}
  4020ae:	bf00      	nop
  4020b0:	004098c4 	.word	0x004098c4
  4020b4:	00404145 	.word	0x00404145
  4020b8:	004098cc 	.word	0x004098cc
  4020bc:	00402895 	.word	0x00402895

004020c0 <setup_wifi>:
}

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(){
  4020c0:	b598      	push	{r3, r4, r7, lr}
  4020c2:	af00      	add	r7, sp, #0
	// command wifi chip to setup
	write_wifi_command_safe("setup web\r\n","Associated]", 60000, 0);
  4020c4:	2300      	movs	r3, #0
  4020c6:	f64e 2260 	movw	r2, #60000	; 0xea60
  4020ca:	4904      	ldr	r1, [pc, #16]	; (4020dc <setup_wifi+0x1c>)
  4020cc:	4804      	ldr	r0, [pc, #16]	; (4020e0 <setup_wifi+0x20>)
  4020ce:	4c05      	ldr	r4, [pc, #20]	; (4020e4 <setup_wifi+0x24>)
  4020d0:	47a0      	blx	r4
	// turn off setup flag
	wifi_setup_flag = false;
  4020d2:	4b05      	ldr	r3, [pc, #20]	; (4020e8 <setup_wifi+0x28>)
  4020d4:	2200      	movs	r2, #0
  4020d6:	601a      	str	r2, [r3, #0]
}
  4020d8:	bf00      	nop
  4020da:	bd98      	pop	{r3, r4, r7, pc}
  4020dc:	004098d4 	.word	0x004098d4
  4020e0:	004098e0 	.word	0x004098e0
  4020e4:	00402895 	.word	0x00402895
  4020e8:	2000d588 	.word	0x2000d588

004020ec <configure_wifi>:

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  4020ec:	b580      	push	{r7, lr}
  4020ee:	af00      	add	r7, sp, #0
	configure_usart();
  4020f0:	4b05      	ldr	r3, [pc, #20]	; (402108 <configure_wifi+0x1c>)
  4020f2:	4798      	blx	r3
	configure_command_complete();
  4020f4:	4b05      	ldr	r3, [pc, #20]	; (40210c <configure_wifi+0x20>)
  4020f6:	4798      	blx	r3
	configure_web_setup();	
  4020f8:	4b05      	ldr	r3, [pc, #20]	; (402110 <configure_wifi+0x24>)
  4020fa:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4020fc:	2101      	movs	r1, #1
  4020fe:	4805      	ldr	r0, [pc, #20]	; (402114 <configure_wifi+0x28>)
  402100:	4b05      	ldr	r3, [pc, #20]	; (402118 <configure_wifi+0x2c>)
  402102:	4798      	blx	r3
}
  402104:	bf00      	nop
  402106:	bd80      	pop	{r7, pc}
  402108:	00401e81 	.word	0x00401e81
  40210c:	00401f19 	.word	0x00401f19
  402110:	00401f9d 	.word	0x00401f9d
  402114:	40024000 	.word	0x40024000
  402118:	00400fd1 	.word	0x00400fd1

0040211c <reboot_wifi>:
}

/**
 *  \brief Reboots the wifi chip.
 */
void reboot_wifi() {
  40211c:	b590      	push	{r4, r7, lr}
  40211e:	b083      	sub	sp, #12
  402120:	af00      	add	r7, sp, #0
	wifi_setup_flag = false;
  402122:	4b14      	ldr	r3, [pc, #80]	; (402174 <reboot_wifi+0x58>)
  402124:	2200      	movs	r2, #0
  402126:	601a      	str	r2, [r3, #0]
	uint8_t status_code;
	
	while(write_wifi_command_safe("reboot\r\n", "Associated]", 10000,0) != COMMAND_SUCCESS){
  402128:	e005      	b.n	402136 <reboot_wifi+0x1a>
		if(wifi_setup_flag){
  40212a:	4b12      	ldr	r3, [pc, #72]	; (402174 <reboot_wifi+0x58>)
  40212c:	681b      	ldr	r3, [r3, #0]
  40212e:	2b00      	cmp	r3, #0
  402130:	d001      	beq.n	402136 <reboot_wifi+0x1a>
			setup_wifi();
  402132:	4b11      	ldr	r3, [pc, #68]	; (402178 <reboot_wifi+0x5c>)
  402134:	4798      	blx	r3
	while(write_wifi_command_safe("reboot\r\n", "Associated]", 10000,0) != COMMAND_SUCCESS){
  402136:	2300      	movs	r3, #0
  402138:	f242 7210 	movw	r2, #10000	; 0x2710
  40213c:	490f      	ldr	r1, [pc, #60]	; (40217c <reboot_wifi+0x60>)
  40213e:	4810      	ldr	r0, [pc, #64]	; (402180 <reboot_wifi+0x64>)
  402140:	4c10      	ldr	r4, [pc, #64]	; (402184 <reboot_wifi+0x68>)
  402142:	47a0      	blx	r4
  402144:	4603      	mov	r3, r0
  402146:	2b00      	cmp	r3, #0
  402148:	d1ef      	bne.n	40212a <reboot_wifi+0xe>
		}
	}
	
	status_code = write_wifi_command_safe("set sy c p off\r\n","Set OK",100,0);
  40214a:	2300      	movs	r3, #0
  40214c:	2264      	movs	r2, #100	; 0x64
  40214e:	490e      	ldr	r1, [pc, #56]	; (402188 <reboot_wifi+0x6c>)
  402150:	480e      	ldr	r0, [pc, #56]	; (40218c <reboot_wifi+0x70>)
  402152:	4c0c      	ldr	r4, [pc, #48]	; (402184 <reboot_wifi+0x68>)
  402154:	47a0      	blx	r4
  402156:	4603      	mov	r3, r0
  402158:	71fb      	strb	r3, [r7, #7]
	status_code = write_wifi_command_safe("set sy c e off\r\n","Set OK", 100, 0);
  40215a:	2300      	movs	r3, #0
  40215c:	2264      	movs	r2, #100	; 0x64
  40215e:	490a      	ldr	r1, [pc, #40]	; (402188 <reboot_wifi+0x6c>)
  402160:	480b      	ldr	r0, [pc, #44]	; (402190 <reboot_wifi+0x74>)
  402162:	4c08      	ldr	r4, [pc, #32]	; (402184 <reboot_wifi+0x68>)
  402164:	47a0      	blx	r4
  402166:	4603      	mov	r3, r0
  402168:	71fb      	strb	r3, [r7, #7]
}
  40216a:	bf00      	nop
  40216c:	370c      	adds	r7, #12
  40216e:	46bd      	mov	sp, r7
  402170:	bd90      	pop	{r4, r7, pc}
  402172:	bf00      	nop
  402174:	2000d588 	.word	0x2000d588
  402178:	004020c1 	.word	0x004020c1
  40217c:	004098d4 	.word	0x004098d4
  402180:	0040992c 	.word	0x0040992c
  402184:	00402895 	.word	0x00402895
  402188:	00409938 	.word	0x00409938
  40218c:	00409940 	.word	0x00409940
  402190:	00409954 	.word	0x00409954

00402194 <configure_websocket>:

void configure_websocket(){
  402194:	b580      	push	{r7, lr}
  402196:	af00      	add	r7, sp, #0
	// try 5 times to open the socket
	ws_handle = open_websocket(5); 
  402198:	2005      	movs	r0, #5
  40219a:	4b04      	ldr	r3, [pc, #16]	; (4021ac <configure_websocket+0x18>)
  40219c:	4798      	blx	r3
  40219e:	4603      	mov	r3, r0
  4021a0:	461a      	mov	r2, r3
  4021a2:	4b03      	ldr	r3, [pc, #12]	; (4021b0 <configure_websocket+0x1c>)
  4021a4:	701a      	strb	r2, [r3, #0]
}
  4021a6:	bf00      	nop
  4021a8:	bd80      	pop	{r7, pc}
  4021aa:	bf00      	nop
  4021ac:	00401ffd 	.word	0x00401ffd
  4021b0:	2000000a 	.word	0x2000000a
  4021b4:	00000000 	.word	0x00000000

004021b8 <reopen_websockets>:

void reopen_websockets(){
  4021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021ba:	af00      	add	r7, sp, #0
	// reopen websocket connections if something breaks
	write_wifi_command_safe("close all\r\n","Success",100,0); // fix this
  4021bc:	2300      	movs	r3, #0
  4021be:	2264      	movs	r2, #100	; 0x64
  4021c0:	4933      	ldr	r1, [pc, #204]	; (402290 <reopen_websockets+0xd8>)
  4021c2:	4834      	ldr	r0, [pc, #208]	; (402294 <reopen_websockets+0xdc>)
  4021c4:	4c34      	ldr	r4, [pc, #208]	; (402298 <reopen_websockets+0xe0>)
  4021c6:	47a0      	blx	r4
	ws_handle = NO_WEBSOCKET_OPEN;
  4021c8:	4b34      	ldr	r3, [pc, #208]	; (40229c <reopen_websockets+0xe4>)
  4021ca:	220a      	movs	r2, #10
  4021cc:	701a      	strb	r2, [r3, #0]
	
	while(ws_handle == NO_WEBSOCKET_OPEN) {
  4021ce:	e052      	b.n	402276 <reopen_websockets+0xbe>
		delay_s(reopen_delay_seconds);
  4021d0:	4b33      	ldr	r3, [pc, #204]	; (4022a0 <reopen_websockets+0xe8>)
  4021d2:	681b      	ldr	r3, [r3, #0]
  4021d4:	2b00      	cmp	r3, #0
  4021d6:	d02b      	beq.n	402230 <reopen_websockets+0x78>
  4021d8:	4b31      	ldr	r3, [pc, #196]	; (4022a0 <reopen_websockets+0xe8>)
  4021da:	681b      	ldr	r3, [r3, #0]
  4021dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4021e0:	fb02 f303 	mul.w	r3, r2, r3
  4021e4:	461d      	mov	r5, r3
  4021e6:	f04f 0600 	mov.w	r6, #0
  4021ea:	4b2e      	ldr	r3, [pc, #184]	; (4022a4 <reopen_websockets+0xec>)
  4021ec:	4798      	blx	r3
  4021ee:	4603      	mov	r3, r0
  4021f0:	f04f 0400 	mov.w	r4, #0
  4021f4:	fb03 f106 	mul.w	r1, r3, r6
  4021f8:	fb05 f204 	mul.w	r2, r5, r4
  4021fc:	440a      	add	r2, r1
  4021fe:	fba5 3403 	umull	r3, r4, r5, r3
  402202:	4422      	add	r2, r4
  402204:	4614      	mov	r4, r2
  402206:	f243 61af 	movw	r1, #13999	; 0x36af
  40220a:	f04f 0200 	mov.w	r2, #0
  40220e:	185d      	adds	r5, r3, r1
  402210:	eb44 0602 	adc.w	r6, r4, r2
  402214:	4628      	mov	r0, r5
  402216:	4631      	mov	r1, r6
  402218:	4c23      	ldr	r4, [pc, #140]	; (4022a8 <reopen_websockets+0xf0>)
  40221a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40221e:	f04f 0300 	mov.w	r3, #0
  402222:	47a0      	blx	r4
  402224:	4603      	mov	r3, r0
  402226:	460c      	mov	r4, r1
  402228:	4618      	mov	r0, r3
  40222a:	4b20      	ldr	r3, [pc, #128]	; (4022ac <reopen_websockets+0xf4>)
  40222c:	4798      	blx	r3
  40222e:	e016      	b.n	40225e <reopen_websockets+0xa6>
  402230:	4b1c      	ldr	r3, [pc, #112]	; (4022a4 <reopen_websockets+0xec>)
  402232:	4798      	blx	r3
  402234:	4603      	mov	r3, r0
  402236:	f04f 0400 	mov.w	r4, #0
  40223a:	a213      	add	r2, pc, #76	; (adr r2, 402288 <reopen_websockets+0xd0>)
  40223c:	e9d2 1200 	ldrd	r1, r2, [r2]
  402240:	185d      	adds	r5, r3, r1
  402242:	eb44 0602 	adc.w	r6, r4, r2
  402246:	4628      	mov	r0, r5
  402248:	4631      	mov	r1, r6
  40224a:	4c17      	ldr	r4, [pc, #92]	; (4022a8 <reopen_websockets+0xf0>)
  40224c:	4a18      	ldr	r2, [pc, #96]	; (4022b0 <reopen_websockets+0xf8>)
  40224e:	f04f 0300 	mov.w	r3, #0
  402252:	47a0      	blx	r4
  402254:	4603      	mov	r3, r0
  402256:	460c      	mov	r4, r1
  402258:	4618      	mov	r0, r3
  40225a:	4b14      	ldr	r3, [pc, #80]	; (4022ac <reopen_websockets+0xf4>)
  40225c:	4798      	blx	r3
		ws_handle = open_websocket(5); // try 5 times to open the socket
  40225e:	2005      	movs	r0, #5
  402260:	4b14      	ldr	r3, [pc, #80]	; (4022b4 <reopen_websockets+0xfc>)
  402262:	4798      	blx	r3
  402264:	4603      	mov	r3, r0
  402266:	461a      	mov	r2, r3
  402268:	4b0c      	ldr	r3, [pc, #48]	; (40229c <reopen_websockets+0xe4>)
  40226a:	701a      	strb	r2, [r3, #0]
		reopen_delay_seconds += 5; // this could take a while
  40226c:	4b0c      	ldr	r3, [pc, #48]	; (4022a0 <reopen_websockets+0xe8>)
  40226e:	681b      	ldr	r3, [r3, #0]
  402270:	3305      	adds	r3, #5
  402272:	4a0b      	ldr	r2, [pc, #44]	; (4022a0 <reopen_websockets+0xe8>)
  402274:	6013      	str	r3, [r2, #0]
	while(ws_handle == NO_WEBSOCKET_OPEN) {
  402276:	4b09      	ldr	r3, [pc, #36]	; (40229c <reopen_websockets+0xe4>)
  402278:	781b      	ldrb	r3, [r3, #0]
  40227a:	2b0a      	cmp	r3, #10
  40227c:	d0a8      	beq.n	4021d0 <reopen_websockets+0x18>
	}
	reopen_delay_seconds = 5;
  40227e:	4b08      	ldr	r3, [pc, #32]	; (4022a0 <reopen_websockets+0xe8>)
  402280:	2205      	movs	r2, #5
  402282:	601a      	str	r2, [r3, #0]
}
  402284:	bf00      	nop
  402286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402288:	00d59f7f 	.word	0x00d59f7f
  40228c:	00000000 	.word	0x00000000
  402290:	004098b0 	.word	0x004098b0
  402294:	004098b8 	.word	0x004098b8
  402298:	00402895 	.word	0x00402895
  40229c:	2000000a 	.word	0x2000000a
  4022a0:	2000000c 	.word	0x2000000c
  4022a4:	00401dbd 	.word	0x00401dbd
  4022a8:	00403d49 	.word	0x00403d49
  4022ac:	20000001 	.word	0x20000001
  4022b0:	00d59f80 	.word	0x00d59f80
  4022b4:	00401ffd 	.word	0x00401ffd

004022b8 <is_audio_caught_up>:
		// websocket not open
		reopen_websockets();
	}	
}

uint8_t is_audio_caught_up(){
  4022b8:	b480      	push	{r7}
  4022ba:	b085      	sub	sp, #20
  4022bc:	af00      	add	r7, sp, #0
	uint32_t end_index = (i2s_send_index + AUDIO_PACKET_SIZE) % (AUDIO_BUFFER_SIZE); // the last uint16 index that will be hit if it sends
  4022be:	4b1e      	ldr	r3, [pc, #120]	; (402338 <is_audio_caught_up+0x80>)
  4022c0:	681b      	ldr	r3, [r3, #0]
  4022c2:	33c8      	adds	r3, #200	; 0xc8
  4022c4:	4a1d      	ldr	r2, [pc, #116]	; (40233c <is_audio_caught_up+0x84>)
  4022c6:	fba2 1203 	umull	r1, r2, r2, r3
  4022ca:	0a92      	lsrs	r2, r2, #10
  4022cc:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  4022d0:	fb01 f202 	mul.w	r2, r1, r2
  4022d4:	1a9b      	subs	r3, r3, r2
  4022d6:	60fb      	str	r3, [r7, #12]
	
	// make sure that the end index isn't in front of the receive index
	uint32_t first_condition = ((i2s_capture_index - i2s_send_index) < AUDIO_PACKET_SIZE) && ((i2s_capture_index - i2s_send_index) > 0);
  4022d8:	4b19      	ldr	r3, [pc, #100]	; (402340 <is_audio_caught_up+0x88>)
  4022da:	681a      	ldr	r2, [r3, #0]
  4022dc:	4b16      	ldr	r3, [pc, #88]	; (402338 <is_audio_caught_up+0x80>)
  4022de:	681b      	ldr	r3, [r3, #0]
  4022e0:	1ad3      	subs	r3, r2, r3
  4022e2:	2bc7      	cmp	r3, #199	; 0xc7
  4022e4:	d807      	bhi.n	4022f6 <is_audio_caught_up+0x3e>
  4022e6:	4b16      	ldr	r3, [pc, #88]	; (402340 <is_audio_caught_up+0x88>)
  4022e8:	681a      	ldr	r2, [r3, #0]
  4022ea:	4b13      	ldr	r3, [pc, #76]	; (402338 <is_audio_caught_up+0x80>)
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	429a      	cmp	r2, r3
  4022f0:	d001      	beq.n	4022f6 <is_audio_caught_up+0x3e>
  4022f2:	2301      	movs	r3, #1
  4022f4:	e000      	b.n	4022f8 <is_audio_caught_up+0x40>
  4022f6:	2300      	movs	r3, #0
  4022f8:	60bb      	str	r3, [r7, #8]
	uint32_t second_condition = ((end_index - i2s_capture_index) > 0) && ((end_index - i2s_capture_index) < AUDIO_PACKET_SIZE);
  4022fa:	4b11      	ldr	r3, [pc, #68]	; (402340 <is_audio_caught_up+0x88>)
  4022fc:	681b      	ldr	r3, [r3, #0]
  4022fe:	68fa      	ldr	r2, [r7, #12]
  402300:	429a      	cmp	r2, r3
  402302:	d007      	beq.n	402314 <is_audio_caught_up+0x5c>
  402304:	4b0e      	ldr	r3, [pc, #56]	; (402340 <is_audio_caught_up+0x88>)
  402306:	681b      	ldr	r3, [r3, #0]
  402308:	68fa      	ldr	r2, [r7, #12]
  40230a:	1ad3      	subs	r3, r2, r3
  40230c:	2bc7      	cmp	r3, #199	; 0xc7
  40230e:	d801      	bhi.n	402314 <is_audio_caught_up+0x5c>
  402310:	2301      	movs	r3, #1
  402312:	e000      	b.n	402316 <is_audio_caught_up+0x5e>
  402314:	2300      	movs	r3, #0
  402316:	607b      	str	r3, [r7, #4]
	return (first_condition || second_condition) ? 1 : 0;
  402318:	68bb      	ldr	r3, [r7, #8]
  40231a:	2b00      	cmp	r3, #0
  40231c:	d102      	bne.n	402324 <is_audio_caught_up+0x6c>
  40231e:	687b      	ldr	r3, [r7, #4]
  402320:	2b00      	cmp	r3, #0
  402322:	d001      	beq.n	402328 <is_audio_caught_up+0x70>
  402324:	2301      	movs	r3, #1
  402326:	e000      	b.n	40232a <is_audio_caught_up+0x72>
  402328:	2300      	movs	r3, #0
  40232a:	b2db      	uxtb	r3, r3
}
  40232c:	4618      	mov	r0, r3
  40232e:	3714      	adds	r7, #20
  402330:	46bd      	mov	sp, r7
  402332:	bc80      	pop	{r7}
  402334:	4770      	bx	lr
  402336:	bf00      	nop
  402338:	2000d788 	.word	0x2000d788
  40233c:	10624dd3 	.word	0x10624dd3
  402340:	200009d8 	.word	0x200009d8

00402344 <send_image>:

void send_image(uint8_t *start_of_image_ptr, uint32_t image_length){
  402344:	b590      	push	{r4, r7, lr}
  402346:	b0a5      	sub	sp, #148	; 0x94
  402348:	af02      	add	r7, sp, #8
  40234a:	6078      	str	r0, [r7, #4]
  40234c:	6039      	str	r1, [r7, #0]
	// sends image data over ws connection while still streaming audio
	// throttled to audio speed
	
	uint32_t image_byte_index = 0;
  40234e:	2300      	movs	r3, #0
  402350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint8_t status_code;
	
	while (image_byte_index < image_length){
  402354:	e05f      	b.n	402416 <send_image+0xd2>
		// there's still image data to send
		//send audio data until caught up
		if (ws_handle != NO_WEBSOCKET_OPEN){
  402356:	4b3d      	ldr	r3, [pc, #244]	; (40244c <send_image+0x108>)
  402358:	781b      	ldrb	r3, [r3, #0]
  40235a:	2b0a      	cmp	r3, #10
  40235c:	d059      	beq.n	402412 <send_image+0xce>
			//websocket open
			if(is_audio_caught_up()){
  40235e:	4b3c      	ldr	r3, [pc, #240]	; (402450 <send_image+0x10c>)
  402360:	4798      	blx	r3
  402362:	4603      	mov	r3, r0
  402364:	2b00      	cmp	r3, #0
  402366:	d032      	beq.n	4023ce <send_image+0x8a>
				// if the audio sending is caught up, we can send an image packet
				status_code = write_image_data_safe(start_of_image_ptr, image_byte_index, image_length, ws_handle, "Success", 500);
  402368:	4b38      	ldr	r3, [pc, #224]	; (40244c <send_image+0x108>)
  40236a:	781a      	ldrb	r2, [r3, #0]
  40236c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  402370:	9301      	str	r3, [sp, #4]
  402372:	4b38      	ldr	r3, [pc, #224]	; (402454 <send_image+0x110>)
  402374:	9300      	str	r3, [sp, #0]
  402376:	4613      	mov	r3, r2
  402378:	683a      	ldr	r2, [r7, #0]
  40237a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
  40237e:	6878      	ldr	r0, [r7, #4]
  402380:	4c35      	ldr	r4, [pc, #212]	; (402458 <send_image+0x114>)
  402382:	47a0      	blx	r4
  402384:	4603      	mov	r3, r0
  402386:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				if(status_code == COMMAND_STCLOSE){
  40238a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
  40238e:	2b03      	cmp	r3, #3
  402390:	d103      	bne.n	40239a <send_image+0x56>
					ws_handle = NO_WEBSOCKET_OPEN;
  402392:	4b2e      	ldr	r3, [pc, #184]	; (40244c <send_image+0x108>)
  402394:	220a      	movs	r2, #10
  402396:	701a      	strb	r2, [r3, #0]
  402398:	e03d      	b.n	402416 <send_image+0xd2>
				} else if (status_code == COMMAND_FAILURE){
  40239a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
  40239e:	2b01      	cmp	r3, #1
  4023a0:	d10a      	bne.n	4023b8 <send_image+0x74>
					if(check_ws_handle(ws_handle) != COMMAND_SUCCESS){
  4023a2:	4b2a      	ldr	r3, [pc, #168]	; (40244c <send_image+0x108>)
  4023a4:	781b      	ldrb	r3, [r3, #0]
  4023a6:	4618      	mov	r0, r3
  4023a8:	4b2c      	ldr	r3, [pc, #176]	; (40245c <send_image+0x118>)
  4023aa:	4798      	blx	r3
  4023ac:	4603      	mov	r3, r0
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	d031      	beq.n	402416 <send_image+0xd2>
						reopen_websockets();
  4023b2:	4b2b      	ldr	r3, [pc, #172]	; (402460 <send_image+0x11c>)
  4023b4:	4798      	blx	r3
  4023b6:	e02e      	b.n	402416 <send_image+0xd2>
					}
				} else if (status_code == COMMAND_SUCCESS){
  4023b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d12a      	bne.n	402416 <send_image+0xd2>
					image_byte_index += IMAGE_PACKET_SIZE;
  4023c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
  4023c4:	f203 138f 	addw	r3, r3, #399	; 0x18f
  4023c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  4023cc:	e023      	b.n	402416 <send_image+0xd2>
				}

			} else{
				// the audio still has stuff to send (should be most of the time)
				status_code = write_audio_data_safe(i2s_rec_buf, ws_handle, "Success", 500);
  4023ce:	4b1f      	ldr	r3, [pc, #124]	; (40244c <send_image+0x108>)
  4023d0:	7819      	ldrb	r1, [r3, #0]
  4023d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4023d6:	4a1f      	ldr	r2, [pc, #124]	; (402454 <send_image+0x110>)
  4023d8:	4822      	ldr	r0, [pc, #136]	; (402464 <send_image+0x120>)
  4023da:	4c23      	ldr	r4, [pc, #140]	; (402468 <send_image+0x124>)
  4023dc:	47a0      	blx	r4
  4023de:	4603      	mov	r3, r0
  4023e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				if(status_code == COMMAND_STCLOSE){
  4023e4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
  4023e8:	2b03      	cmp	r3, #3
  4023ea:	d103      	bne.n	4023f4 <send_image+0xb0>
					ws_handle = NO_WEBSOCKET_OPEN;
  4023ec:	4b17      	ldr	r3, [pc, #92]	; (40244c <send_image+0x108>)
  4023ee:	220a      	movs	r2, #10
  4023f0:	701a      	strb	r2, [r3, #0]
  4023f2:	e010      	b.n	402416 <send_image+0xd2>
				} else if (status_code == COMMAND_FAILURE){
  4023f4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
  4023f8:	2b01      	cmp	r3, #1
  4023fa:	d10c      	bne.n	402416 <send_image+0xd2>
					if(check_ws_handle(ws_handle) != COMMAND_SUCCESS){
  4023fc:	4b13      	ldr	r3, [pc, #76]	; (40244c <send_image+0x108>)
  4023fe:	781b      	ldrb	r3, [r3, #0]
  402400:	4618      	mov	r0, r3
  402402:	4b16      	ldr	r3, [pc, #88]	; (40245c <send_image+0x118>)
  402404:	4798      	blx	r3
  402406:	4603      	mov	r3, r0
  402408:	2b00      	cmp	r3, #0
  40240a:	d004      	beq.n	402416 <send_image+0xd2>
						reopen_websockets();
  40240c:	4b14      	ldr	r3, [pc, #80]	; (402460 <send_image+0x11c>)
  40240e:	4798      	blx	r3
  402410:	e001      	b.n	402416 <send_image+0xd2>
					}
				}
			}
		} else{
			// websocket not open
			reopen_websockets();
  402412:	4b13      	ldr	r3, [pc, #76]	; (402460 <send_image+0x11c>)
  402414:	4798      	blx	r3
	while (image_byte_index < image_length){
  402416:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  40241a:	683b      	ldr	r3, [r7, #0]
  40241c:	429a      	cmp	r2, r3
  40241e:	d39a      	bcc.n	402356 <send_image+0x12>
		}	
	}
		
	char* templated_command[30];
	sprintf(templated_command, "write %d 10\r\nimage done", ws_handle);
  402420:	4b0a      	ldr	r3, [pc, #40]	; (40244c <send_image+0x108>)
  402422:	781b      	ldrb	r3, [r3, #0]
  402424:	461a      	mov	r2, r3
  402426:	f107 0308 	add.w	r3, r7, #8
  40242a:	4910      	ldr	r1, [pc, #64]	; (40246c <send_image+0x128>)
  40242c:	4618      	mov	r0, r3
  40242e:	4b10      	ldr	r3, [pc, #64]	; (402470 <send_image+0x12c>)
  402430:	4798      	blx	r3

	write_wifi_command_safe(templated_command, "Success", 500, 0);
  402432:	f107 0008 	add.w	r0, r7, #8
  402436:	2300      	movs	r3, #0
  402438:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40243c:	4905      	ldr	r1, [pc, #20]	; (402454 <send_image+0x110>)
  40243e:	4c0d      	ldr	r4, [pc, #52]	; (402474 <send_image+0x130>)
  402440:	47a0      	blx	r4
}
  402442:	bf00      	nop
  402444:	378c      	adds	r7, #140	; 0x8c
  402446:	46bd      	mov	sp, r7
  402448:	bd90      	pop	{r4, r7, pc}
  40244a:	bf00      	nop
  40244c:	2000000a 	.word	0x2000000a
  402450:	004022b9 	.word	0x004022b9
  402454:	004098b0 	.word	0x004098b0
  402458:	004026cd 	.word	0x004026cd
  40245c:	0040206d 	.word	0x0040206d
  402460:	004021b9 	.word	0x004021b9
  402464:	200009dc 	.word	0x200009dc
  402468:	004024e9 	.word	0x004024e9
  40246c:	00409968 	.word	0x00409968
  402470:	00404145 	.word	0x00404145
  402474:	00402895 	.word	0x00402895

00402478 <send_audio_packet>:

uint8_t send_audio_packet(){
  402478:	b590      	push	{r4, r7, lr}
  40247a:	b083      	sub	sp, #12
  40247c:	af00      	add	r7, sp, #0
	// sends one audio packet, assuming everything is OK everywhere
	// called by camera functions to stream audio while capturing image
	uint8_t status_code;
	
	if (ws_handle != NO_WEBSOCKET_OPEN && ws_handle != PREV_COMMAND_FAILED && !is_audio_caught_up()){
  40247e:	4b15      	ldr	r3, [pc, #84]	; (4024d4 <send_audio_packet+0x5c>)
  402480:	781b      	ldrb	r3, [r3, #0]
  402482:	2b0a      	cmp	r3, #10
  402484:	d021      	beq.n	4024ca <send_audio_packet+0x52>
  402486:	4b13      	ldr	r3, [pc, #76]	; (4024d4 <send_audio_packet+0x5c>)
  402488:	781b      	ldrb	r3, [r3, #0]
  40248a:	2b0b      	cmp	r3, #11
  40248c:	d01d      	beq.n	4024ca <send_audio_packet+0x52>
  40248e:	4b12      	ldr	r3, [pc, #72]	; (4024d8 <send_audio_packet+0x60>)
  402490:	4798      	blx	r3
  402492:	4603      	mov	r3, r0
  402494:	2b00      	cmp	r3, #0
  402496:	d118      	bne.n	4024ca <send_audio_packet+0x52>
			//websocket open, no recent command failure, and enough data to send
		status_code = write_audio_data_safe(i2s_rec_buf, ws_handle, "Success", 500);
  402498:	4b0e      	ldr	r3, [pc, #56]	; (4024d4 <send_audio_packet+0x5c>)
  40249a:	7819      	ldrb	r1, [r3, #0]
  40249c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4024a0:	4a0e      	ldr	r2, [pc, #56]	; (4024dc <send_audio_packet+0x64>)
  4024a2:	480f      	ldr	r0, [pc, #60]	; (4024e0 <send_audio_packet+0x68>)
  4024a4:	4c0f      	ldr	r4, [pc, #60]	; (4024e4 <send_audio_packet+0x6c>)
  4024a6:	47a0      	blx	r4
  4024a8:	4603      	mov	r3, r0
  4024aa:	71fb      	strb	r3, [r7, #7]
		
		if(status_code == COMMAND_STCLOSE){
  4024ac:	79fb      	ldrb	r3, [r7, #7]
  4024ae:	2b03      	cmp	r3, #3
  4024b0:	d103      	bne.n	4024ba <send_audio_packet+0x42>
			ws_handle = NO_WEBSOCKET_OPEN;
  4024b2:	4b08      	ldr	r3, [pc, #32]	; (4024d4 <send_audio_packet+0x5c>)
  4024b4:	220a      	movs	r2, #10
  4024b6:	701a      	strb	r2, [r3, #0]
  4024b8:	e005      	b.n	4024c6 <send_audio_packet+0x4e>
		} else if (status_code == COMMAND_FAILURE){
  4024ba:	79fb      	ldrb	r3, [r7, #7]
  4024bc:	2b01      	cmp	r3, #1
  4024be:	d102      	bne.n	4024c6 <send_audio_packet+0x4e>
			ws_handle = PREV_COMMAND_FAILED;
  4024c0:	4b04      	ldr	r3, [pc, #16]	; (4024d4 <send_audio_packet+0x5c>)
  4024c2:	220b      	movs	r2, #11
  4024c4:	701a      	strb	r2, [r3, #0]
		}
		return 1;
  4024c6:	2301      	movs	r3, #1
  4024c8:	e000      	b.n	4024cc <send_audio_packet+0x54>
	}
	return 0;
  4024ca:	2300      	movs	r3, #0
}
  4024cc:	4618      	mov	r0, r3
  4024ce:	370c      	adds	r7, #12
  4024d0:	46bd      	mov	sp, r7
  4024d2:	bd90      	pop	{r4, r7, pc}
  4024d4:	2000000a 	.word	0x2000000a
  4024d8:	004022b9 	.word	0x004022b9
  4024dc:	004098b0 	.word	0x004098b0
  4024e0:	200009dc 	.word	0x200009dc
  4024e4:	004024e9 	.word	0x004024e9

004024e8 <write_audio_data_safe>:

uint8_t write_audio_data_safe(uint16_t* data_pointer, uint8_t handle, char* resp, uint32_t timeout_ms){
  4024e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  4024ec:	b0a6      	sub	sp, #152	; 0x98
  4024ee:	af00      	add	r7, sp, #0
  4024f0:	60f8      	str	r0, [r7, #12]
  4024f2:	607a      	str	r2, [r7, #4]
  4024f4:	603b      	str	r3, [r7, #0]
  4024f6:	460b      	mov	r3, r1
  4024f8:	72fb      	strb	r3, [r7, #11]
	// returns 2 for a timeout
	// returns 3 for an unexpected stream closure
	// returns 10+stream handle for opening a stream
	
	// first thing: check if we've received any transmission since the last time
	if (usart_buffer_index != 0){
  4024fa:	4b62      	ldr	r3, [pc, #392]	; (402684 <write_audio_data_safe+0x19c>)
  4024fc:	681b      	ldr	r3, [r3, #0]
  4024fe:	2b00      	cmp	r3, #0
  402500:	d008      	beq.n	402514 <write_audio_data_safe+0x2c>
		// check for different issues
		if(strstr(usart_buffer, "[Closed: ")){
  402502:	4961      	ldr	r1, [pc, #388]	; (402688 <write_audio_data_safe+0x1a0>)
  402504:	4861      	ldr	r0, [pc, #388]	; (40268c <write_audio_data_safe+0x1a4>)
  402506:	4b62      	ldr	r3, [pc, #392]	; (402690 <write_audio_data_safe+0x1a8>)
  402508:	4798      	blx	r3
  40250a:	4603      	mov	r3, r0
  40250c:	2b00      	cmp	r3, #0
  40250e:	d001      	beq.n	402514 <write_audio_data_safe+0x2c>
			return COMMAND_STCLOSE; // return a value indicating closure of the stream
  402510:	2303      	movs	r3, #3
  402512:	e0b1      	b.n	402678 <write_audio_data_safe+0x190>
		}
	}

	uint32_t ms_counter = 0;
  402514:	2300      	movs	r3, #0
  402516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  40251a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40251e:	2100      	movs	r1, #0
  402520:	485a      	ldr	r0, [pc, #360]	; (40268c <write_audio_data_safe+0x1a4>)
  402522:	4b5c      	ldr	r3, [pc, #368]	; (402694 <write_audio_data_safe+0x1ac>)
  402524:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  402526:	4b57      	ldr	r3, [pc, #348]	; (402684 <write_audio_data_safe+0x19c>)
  402528:	2200      	movs	r2, #0
  40252a:	601a      	str	r2, [r3, #0]
	
	if(is_audio_caught_up()) // make sure that the end index isn't in front of the receive index
  40252c:	4b5a      	ldr	r3, [pc, #360]	; (402698 <write_audio_data_safe+0x1b0>)
  40252e:	4798      	blx	r3
  402530:	4603      	mov	r3, r0
  402532:	2b00      	cmp	r3, #0
  402534:	d001      	beq.n	40253a <write_audio_data_safe+0x52>
		return COMMAND_RETRYIT;
  402536:	2304      	movs	r3, #4
  402538:	e09e      	b.n	402678 <write_audio_data_safe+0x190>
	
	uint8_t curr_data_point;
	
	char* templated_command[30];
	usart_write_line(BOARD_USART,"\r\n");
  40253a:	4958      	ldr	r1, [pc, #352]	; (40269c <write_audio_data_safe+0x1b4>)
  40253c:	4858      	ldr	r0, [pc, #352]	; (4026a0 <write_audio_data_safe+0x1b8>)
  40253e:	4b59      	ldr	r3, [pc, #356]	; (4026a4 <write_audio_data_safe+0x1bc>)
  402540:	4798      	blx	r3
	sprintf(templated_command, "write %d %d\r\n", handle, AUDIO_PACKET_SIZE * 2);
  402542:	7afa      	ldrb	r2, [r7, #11]
  402544:	f107 0014 	add.w	r0, r7, #20
  402548:	f44f 73c8 	mov.w	r3, #400	; 0x190
  40254c:	4956      	ldr	r1, [pc, #344]	; (4026a8 <write_audio_data_safe+0x1c0>)
  40254e:	4c57      	ldr	r4, [pc, #348]	; (4026ac <write_audio_data_safe+0x1c4>)
  402550:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  402552:	f107 0314 	add.w	r3, r7, #20
  402556:	4619      	mov	r1, r3
  402558:	4851      	ldr	r0, [pc, #324]	; (4026a0 <write_audio_data_safe+0x1b8>)
  40255a:	4b52      	ldr	r3, [pc, #328]	; (4026a4 <write_audio_data_safe+0x1bc>)
  40255c:	4798      	blx	r3
	
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (AUDIO_PACKET_SIZE*2); i++)
  40255e:	4b54      	ldr	r3, [pc, #336]	; (4026b0 <write_audio_data_safe+0x1c8>)
  402560:	681b      	ldr	r3, [r3, #0]
  402562:	005b      	lsls	r3, r3, #1
  402564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  402568:	e01c      	b.n	4025a4 <write_audio_data_safe+0xbc>
	{
		curr_data_point = ((uint8_t*) data_pointer)[i % (AUDIO_BUFFER_SIZE*2)];	
  40256a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  40256e:	4a51      	ldr	r2, [pc, #324]	; (4026b4 <write_audio_data_safe+0x1cc>)
  402570:	fb82 1203 	smull	r1, r2, r2, r3
  402574:	12d1      	asrs	r1, r2, #11
  402576:	17da      	asrs	r2, r3, #31
  402578:	1a8a      	subs	r2, r1, r2
  40257a:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  40257e:	fb01 f202 	mul.w	r2, r1, r2
  402582:	1a9a      	subs	r2, r3, r2
  402584:	68fb      	ldr	r3, [r7, #12]
  402586:	4413      	add	r3, r2
  402588:	781b      	ldrb	r3, [r3, #0]
  40258a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		usart_putchar(BOARD_USART, curr_data_point);
  40258e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
  402592:	4619      	mov	r1, r3
  402594:	4842      	ldr	r0, [pc, #264]	; (4026a0 <write_audio_data_safe+0x1b8>)
  402596:	4b48      	ldr	r3, [pc, #288]	; (4026b8 <write_audio_data_safe+0x1d0>)
  402598:	4798      	blx	r3
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (AUDIO_PACKET_SIZE*2); i++)
  40259a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  40259e:	3301      	adds	r3, #1
  4025a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  4025a4:	4b42      	ldr	r3, [pc, #264]	; (4026b0 <write_audio_data_safe+0x1c8>)
  4025a6:	681b      	ldr	r3, [r3, #0]
  4025a8:	33c8      	adds	r3, #200	; 0xc8
  4025aa:	005a      	lsls	r2, r3, #1
  4025ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  4025b0:	429a      	cmp	r2, r3
  4025b2:	d8da      	bhi.n	40256a <write_audio_data_safe+0x82>
	}
	
	uint8_t command_response = COMMAND_UNSET;
  4025b4:	2363      	movs	r3, #99	; 0x63
  4025b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	
	while(command_response == COMMAND_UNSET) {			
  4025ba:	e054      	b.n	402666 <write_audio_data_safe+0x17e>
		if(strstr(usart_buffer, resp)){
  4025bc:	6879      	ldr	r1, [r7, #4]
  4025be:	4833      	ldr	r0, [pc, #204]	; (40268c <write_audio_data_safe+0x1a4>)
  4025c0:	4b33      	ldr	r3, [pc, #204]	; (402690 <write_audio_data_safe+0x1a8>)
  4025c2:	4798      	blx	r3
  4025c4:	4603      	mov	r3, r0
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	d012      	beq.n	4025f0 <write_audio_data_safe+0x108>
			i2s_send_index = (i2s_send_index + AUDIO_PACKET_SIZE) % AUDIO_BUFFER_SIZE; // recompute send index after loop execution
  4025ca:	4b39      	ldr	r3, [pc, #228]	; (4026b0 <write_audio_data_safe+0x1c8>)
  4025cc:	681b      	ldr	r3, [r3, #0]
  4025ce:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
  4025d2:	4b38      	ldr	r3, [pc, #224]	; (4026b4 <write_audio_data_safe+0x1cc>)
  4025d4:	fba3 1302 	umull	r1, r3, r3, r2
  4025d8:	0a9b      	lsrs	r3, r3, #10
  4025da:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  4025de:	fb01 f303 	mul.w	r3, r1, r3
  4025e2:	1ad3      	subs	r3, r2, r3
  4025e4:	4a32      	ldr	r2, [pc, #200]	; (4026b0 <write_audio_data_safe+0x1c8>)
  4025e6:	6013      	str	r3, [r2, #0]
			command_response = COMMAND_SUCCESS; // successful response
  4025e8:	2300      	movs	r3, #0
  4025ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  4025ee:	e020      	b.n	402632 <write_audio_data_safe+0x14a>
			// otherwise, parse for handle
		}
		else if(strstr(usart_buffer, "[Closed: ")){
  4025f0:	4925      	ldr	r1, [pc, #148]	; (402688 <write_audio_data_safe+0x1a0>)
  4025f2:	4826      	ldr	r0, [pc, #152]	; (40268c <write_audio_data_safe+0x1a4>)
  4025f4:	4b26      	ldr	r3, [pc, #152]	; (402690 <write_audio_data_safe+0x1a8>)
  4025f6:	4798      	blx	r3
  4025f8:	4603      	mov	r3, r0
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	d003      	beq.n	402606 <write_audio_data_safe+0x11e>
			// return a value indicating closure of the stream
			command_response = COMMAND_STCLOSE;
  4025fe:	2303      	movs	r3, #3
  402600:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  402604:	e015      	b.n	402632 <write_audio_data_safe+0x14a>
		}
		else if(strstr(usart_buffer, "Command failed")){
  402606:	492d      	ldr	r1, [pc, #180]	; (4026bc <write_audio_data_safe+0x1d4>)
  402608:	4820      	ldr	r0, [pc, #128]	; (40268c <write_audio_data_safe+0x1a4>)
  40260a:	4b21      	ldr	r3, [pc, #132]	; (402690 <write_audio_data_safe+0x1a8>)
  40260c:	4798      	blx	r3
  40260e:	4603      	mov	r3, r0
  402610:	2b00      	cmp	r3, #0
  402612:	d003      	beq.n	40261c <write_audio_data_safe+0x134>
			command_response = COMMAND_FAILURE; // command failed
  402614:	2301      	movs	r3, #1
  402616:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  40261a:	e00a      	b.n	402632 <write_audio_data_safe+0x14a>
		}
		else if(ms_counter++ > timeout_ms){
  40261c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  402620:	1c5a      	adds	r2, r3, #1
  402622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
  402626:	683a      	ldr	r2, [r7, #0]
  402628:	4293      	cmp	r3, r2
  40262a:	d902      	bls.n	402632 <write_audio_data_safe+0x14a>
			command_response = COMMAND_TIMEOUT;
  40262c:	2302      	movs	r3, #2
  40262e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}
		delay_ms(1);
  402632:	4b23      	ldr	r3, [pc, #140]	; (4026c0 <write_audio_data_safe+0x1d8>)
  402634:	4798      	blx	r3
  402636:	4603      	mov	r3, r0
  402638:	f04f 0400 	mov.w	r4, #0
  40263c:	f243 61af 	movw	r1, #13999	; 0x36af
  402640:	f04f 0200 	mov.w	r2, #0
  402644:	eb13 0b01 	adds.w	fp, r3, r1
  402648:	eb44 0c02 	adc.w	ip, r4, r2
  40264c:	4658      	mov	r0, fp
  40264e:	4661      	mov	r1, ip
  402650:	4c1c      	ldr	r4, [pc, #112]	; (4026c4 <write_audio_data_safe+0x1dc>)
  402652:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402656:	f04f 0300 	mov.w	r3, #0
  40265a:	47a0      	blx	r4
  40265c:	4603      	mov	r3, r0
  40265e:	460c      	mov	r4, r1
  402660:	4618      	mov	r0, r3
  402662:	4b19      	ldr	r3, [pc, #100]	; (4026c8 <write_audio_data_safe+0x1e0>)
  402664:	4798      	blx	r3
	while(command_response == COMMAND_UNSET) {			
  402666:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
  40266a:	2b63      	cmp	r3, #99	; 0x63
  40266c:	d0a6      	beq.n	4025bc <write_audio_data_safe+0xd4>
	}
	
	usart_buffer_index = 0;
  40266e:	4b05      	ldr	r3, [pc, #20]	; (402684 <write_audio_data_safe+0x19c>)
  402670:	2200      	movs	r2, #0
  402672:	601a      	str	r2, [r3, #0]
	return command_response;
  402674:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
  402678:	4618      	mov	r0, r3
  40267a:	3798      	adds	r7, #152	; 0x98
  40267c:	46bd      	mov	sp, r7
  40267e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  402682:	bf00      	nop
  402684:	2000d784 	.word	0x2000d784
  402688:	00409980 	.word	0x00409980
  40268c:	2000d590 	.word	0x2000d590
  402690:	0040454d 	.word	0x0040454d
  402694:	004040a9 	.word	0x004040a9
  402698:	004022b9 	.word	0x004022b9
  40269c:	0040998c 	.word	0x0040998c
  4026a0:	40024000 	.word	0x40024000
  4026a4:	00401099 	.word	0x00401099
  4026a8:	00409990 	.word	0x00409990
  4026ac:	00404145 	.word	0x00404145
  4026b0:	2000d788 	.word	0x2000d788
  4026b4:	10624dd3 	.word	0x10624dd3
  4026b8:	00401069 	.word	0x00401069
  4026bc:	004099a0 	.word	0x004099a0
  4026c0:	00401dbd 	.word	0x00401dbd
  4026c4:	00403d49 	.word	0x00403d49
  4026c8:	20000001 	.word	0x20000001

004026cc <write_image_data_safe>:

uint8_t write_image_data_safe(uint8_t* array_start_pointer, uint32_t start_index, uint32_t im_len, uint8_t handle, char* resp, uint32_t timeout_ms){
  4026cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  4026d0:	b0a8      	sub	sp, #160	; 0xa0
  4026d2:	af00      	add	r7, sp, #0
  4026d4:	60f8      	str	r0, [r7, #12]
  4026d6:	60b9      	str	r1, [r7, #8]
  4026d8:	607a      	str	r2, [r7, #4]
  4026da:	70fb      	strb	r3, [r7, #3]
	// returns 2 for a timeout
	// returns 3 for an unexpected stream closure
	// returns 10+stream handle for opening a stream
	
	// first thing: check if we've received any transmission since the last time
	if (usart_buffer_index != 0){
  4026dc:	4b5e      	ldr	r3, [pc, #376]	; (402858 <write_image_data_safe+0x18c>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	2b00      	cmp	r3, #0
  4026e2:	d008      	beq.n	4026f6 <write_image_data_safe+0x2a>
		// check for different issues
		if(strstr(usart_buffer, "[Closed: ")){
  4026e4:	495d      	ldr	r1, [pc, #372]	; (40285c <write_image_data_safe+0x190>)
  4026e6:	485e      	ldr	r0, [pc, #376]	; (402860 <write_image_data_safe+0x194>)
  4026e8:	4b5e      	ldr	r3, [pc, #376]	; (402864 <write_image_data_safe+0x198>)
  4026ea:	4798      	blx	r3
  4026ec:	4603      	mov	r3, r0
  4026ee:	2b00      	cmp	r3, #0
  4026f0:	d001      	beq.n	4026f6 <write_image_data_safe+0x2a>
			return COMMAND_STCLOSE; // return a value indicating closure of the stream
  4026f2:	2303      	movs	r3, #3
  4026f4:	e0aa      	b.n	40284c <write_image_data_safe+0x180>
		}
	}
	
	uint8_t command_finished = 0;
  4026f6:	2300      	movs	r3, #0
  4026f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	uint8_t command_failed = 0;
  4026fc:	2300      	movs	r3, #0
  4026fe:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	uint8_t parse_error = 0;
  402702:	2300      	movs	r3, #0
  402704:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	
	uint32_t ms_counter = 0;
  402708:	2300      	movs	r3, #0
  40270a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  40270e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402712:	2100      	movs	r1, #0
  402714:	4852      	ldr	r0, [pc, #328]	; (402860 <write_image_data_safe+0x194>)
  402716:	4b54      	ldr	r3, [pc, #336]	; (402868 <write_image_data_safe+0x19c>)
  402718:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  40271a:	4b4f      	ldr	r3, [pc, #316]	; (402858 <write_image_data_safe+0x18c>)
  40271c:	2200      	movs	r2, #0
  40271e:	601a      	str	r2, [r3, #0]
	
	uint32_t end_index = start_index + IMAGE_PACKET_SIZE;
  402720:	68bb      	ldr	r3, [r7, #8]
  402722:	f203 138f 	addw	r3, r3, #399	; 0x18f
  402726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	// if the end index goes past the end of the array, don't go there
	end_index = (end_index < im_len) ? end_index : im_len;
  40272a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  40272e:	687b      	ldr	r3, [r7, #4]
  402730:	4293      	cmp	r3, r2
  402732:	bf28      	it	cs
  402734:	4613      	movcs	r3, r2
  402736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	
	// usually PACKET_SIZE, unless it's the last one
	uint32_t bytes_to_send = end_index - start_index;
  40273a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  40273e:	68bb      	ldr	r3, [r7, #8]
  402740:	1ad3      	subs	r3, r2, r3
  402742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	
	uint8_t curr_data_point;
	
	char* templated_command[30];
	usart_write_line(BOARD_USART,"\r\n");
  402746:	4949      	ldr	r1, [pc, #292]	; (40286c <write_image_data_safe+0x1a0>)
  402748:	4849      	ldr	r0, [pc, #292]	; (402870 <write_image_data_safe+0x1a4>)
  40274a:	4b4a      	ldr	r3, [pc, #296]	; (402874 <write_image_data_safe+0x1a8>)
  40274c:	4798      	blx	r3
	sprintf(templated_command, "write %d %d\r\n", handle, bytes_to_send);
  40274e:	78fa      	ldrb	r2, [r7, #3]
  402750:	f107 0010 	add.w	r0, r7, #16
  402754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  402758:	4947      	ldr	r1, [pc, #284]	; (402878 <write_image_data_safe+0x1ac>)
  40275a:	4c48      	ldr	r4, [pc, #288]	; (40287c <write_image_data_safe+0x1b0>)
  40275c:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  40275e:	f107 0310 	add.w	r3, r7, #16
  402762:	4619      	mov	r1, r3
  402764:	4842      	ldr	r0, [pc, #264]	; (402870 <write_image_data_safe+0x1a4>)
  402766:	4b43      	ldr	r3, [pc, #268]	; (402874 <write_image_data_safe+0x1a8>)
  402768:	4798      	blx	r3
	
	for (int i = start_index; i < end_index; i++) {
  40276a:	68bb      	ldr	r3, [r7, #8]
  40276c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  402770:	e011      	b.n	402796 <write_image_data_safe+0xca>
		curr_data_point = (array_start_pointer)[i];	
  402772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  402776:	68fa      	ldr	r2, [r7, #12]
  402778:	4413      	add	r3, r2
  40277a:	781b      	ldrb	r3, [r3, #0]
  40277c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		usart_putchar(BOARD_USART, curr_data_point);
  402780:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
  402784:	4619      	mov	r1, r3
  402786:	483a      	ldr	r0, [pc, #232]	; (402870 <write_image_data_safe+0x1a4>)
  402788:	4b3d      	ldr	r3, [pc, #244]	; (402880 <write_image_data_safe+0x1b4>)
  40278a:	4798      	blx	r3
	for (int i = start_index; i < end_index; i++) {
  40278c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  402790:	3301      	adds	r3, #1
  402792:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  402796:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
  40279a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  40279e:	429a      	cmp	r2, r3
  4027a0:	d3e7      	bcc.n	402772 <write_image_data_safe+0xa6>
	}
	
	uint8_t command_response = COMMAND_UNSET;
  4027a2:	2363      	movs	r3, #99	; 0x63
  4027a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	while(command_response == COMMAND_UNSET) {			
  4027a8:	e047      	b.n	40283a <write_image_data_safe+0x16e>
		if(strstr(usart_buffer, resp)){
  4027aa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  4027ae:	482c      	ldr	r0, [pc, #176]	; (402860 <write_image_data_safe+0x194>)
  4027b0:	4b2c      	ldr	r3, [pc, #176]	; (402864 <write_image_data_safe+0x198>)
  4027b2:	4798      	blx	r3
  4027b4:	4603      	mov	r3, r0
  4027b6:	2b00      	cmp	r3, #0
  4027b8:	d003      	beq.n	4027c2 <write_image_data_safe+0xf6>
			command_response = COMMAND_SUCCESS; // successful response
  4027ba:	2300      	movs	r3, #0
  4027bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  4027c0:	e021      	b.n	402806 <write_image_data_safe+0x13a>
			// otherwise, parse for handle
		}
		else if(strstr(usart_buffer, "[Closed: ")){
  4027c2:	4926      	ldr	r1, [pc, #152]	; (40285c <write_image_data_safe+0x190>)
  4027c4:	4826      	ldr	r0, [pc, #152]	; (402860 <write_image_data_safe+0x194>)
  4027c6:	4b27      	ldr	r3, [pc, #156]	; (402864 <write_image_data_safe+0x198>)
  4027c8:	4798      	blx	r3
  4027ca:	4603      	mov	r3, r0
  4027cc:	2b00      	cmp	r3, #0
  4027ce:	d003      	beq.n	4027d8 <write_image_data_safe+0x10c>
			// return a value indicating closure of the stream
			command_response = COMMAND_STCLOSE;
  4027d0:	2303      	movs	r3, #3
  4027d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  4027d6:	e016      	b.n	402806 <write_image_data_safe+0x13a>
		}
		else if(strstr(usart_buffer, "Command failed")){
  4027d8:	492a      	ldr	r1, [pc, #168]	; (402884 <write_image_data_safe+0x1b8>)
  4027da:	4821      	ldr	r0, [pc, #132]	; (402860 <write_image_data_safe+0x194>)
  4027dc:	4b21      	ldr	r3, [pc, #132]	; (402864 <write_image_data_safe+0x198>)
  4027de:	4798      	blx	r3
  4027e0:	4603      	mov	r3, r0
  4027e2:	2b00      	cmp	r3, #0
  4027e4:	d003      	beq.n	4027ee <write_image_data_safe+0x122>
			command_response = COMMAND_FAILURE; // command failed
  4027e6:	2301      	movs	r3, #1
  4027e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  4027ec:	e00b      	b.n	402806 <write_image_data_safe+0x13a>
		}
		else if(ms_counter++ > timeout_ms){
  4027ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  4027f2:	1c5a      	adds	r2, r3, #1
  4027f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  4027f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  4027fc:	4293      	cmp	r3, r2
  4027fe:	d902      	bls.n	402806 <write_image_data_safe+0x13a>
			command_response = COMMAND_TIMEOUT;
  402800:	2302      	movs	r3, #2
  402802:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		delay_ms(1);
  402806:	4b20      	ldr	r3, [pc, #128]	; (402888 <write_image_data_safe+0x1bc>)
  402808:	4798      	blx	r3
  40280a:	4603      	mov	r3, r0
  40280c:	f04f 0400 	mov.w	r4, #0
  402810:	f243 61af 	movw	r1, #13999	; 0x36af
  402814:	f04f 0200 	mov.w	r2, #0
  402818:	eb13 0b01 	adds.w	fp, r3, r1
  40281c:	eb44 0c02 	adc.w	ip, r4, r2
  402820:	4658      	mov	r0, fp
  402822:	4661      	mov	r1, ip
  402824:	4c19      	ldr	r4, [pc, #100]	; (40288c <write_image_data_safe+0x1c0>)
  402826:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40282a:	f04f 0300 	mov.w	r3, #0
  40282e:	47a0      	blx	r4
  402830:	4603      	mov	r3, r0
  402832:	460c      	mov	r4, r1
  402834:	4618      	mov	r0, r3
  402836:	4b16      	ldr	r3, [pc, #88]	; (402890 <write_image_data_safe+0x1c4>)
  402838:	4798      	blx	r3
	while(command_response == COMMAND_UNSET) {			
  40283a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
  40283e:	2b63      	cmp	r3, #99	; 0x63
  402840:	d0b3      	beq.n	4027aa <write_image_data_safe+0xde>
	}
	
	usart_buffer_index = 0;
  402842:	4b05      	ldr	r3, [pc, #20]	; (402858 <write_image_data_safe+0x18c>)
  402844:	2200      	movs	r2, #0
  402846:	601a      	str	r2, [r3, #0]
	return command_response;
  402848:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
  40284c:	4618      	mov	r0, r3
  40284e:	37a0      	adds	r7, #160	; 0xa0
  402850:	46bd      	mov	sp, r7
  402852:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  402856:	bf00      	nop
  402858:	2000d784 	.word	0x2000d784
  40285c:	00409980 	.word	0x00409980
  402860:	2000d590 	.word	0x2000d590
  402864:	0040454d 	.word	0x0040454d
  402868:	004040a9 	.word	0x004040a9
  40286c:	0040998c 	.word	0x0040998c
  402870:	40024000 	.word	0x40024000
  402874:	00401099 	.word	0x00401099
  402878:	00409990 	.word	0x00409990
  40287c:	00404145 	.word	0x00404145
  402880:	00401069 	.word	0x00401069
  402884:	004099a0 	.word	0x004099a0
  402888:	00401dbd 	.word	0x00401dbd
  40288c:	00403d49 	.word	0x00403d49
  402890:	20000001 	.word	0x20000001

00402894 <write_wifi_command_safe>:

uint8_t write_wifi_command_safe(char* command, char* resp, uint32_t timeout_ms, uint8_t handle_expected){
  402894:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  402898:	b08a      	sub	sp, #40	; 0x28
  40289a:	af00      	add	r7, sp, #0
  40289c:	60f8      	str	r0, [r7, #12]
  40289e:	60b9      	str	r1, [r7, #8]
  4028a0:	607a      	str	r2, [r7, #4]
  4028a2:	70fb      	strb	r3, [r7, #3]
	// returns 0 for a successful write
	// returns 1 for a failed write
	// returns 2 for a timeout
	// returns 10+stream handle for opening a stream
	
	uint8_t command_finished = 0;
  4028a4:	2300      	movs	r3, #0
  4028a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t command_failed = 0;
  4028aa:	2300      	movs	r3, #0
  4028ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t parse_error = 0;
  4028b0:	2300      	movs	r3, #0
  4028b2:	f887 3020 	strb.w	r3, [r7, #32]
	
	uint32_t ms_counter = 0;
  4028b6:	2300      	movs	r3, #0
  4028b8:	627b      	str	r3, [r7, #36]	; 0x24
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  4028ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4028be:	2100      	movs	r1, #0
  4028c0:	4841      	ldr	r0, [pc, #260]	; (4029c8 <write_wifi_command_safe+0x134>)
  4028c2:	4b42      	ldr	r3, [pc, #264]	; (4029cc <write_wifi_command_safe+0x138>)
  4028c4:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  4028c6:	4b42      	ldr	r3, [pc, #264]	; (4029d0 <write_wifi_command_safe+0x13c>)
  4028c8:	2200      	movs	r2, #0
  4028ca:	601a      	str	r2, [r3, #0]
	
	usart_write_line(BOARD_USART,"\r\n");
  4028cc:	4941      	ldr	r1, [pc, #260]	; (4029d4 <write_wifi_command_safe+0x140>)
  4028ce:	4842      	ldr	r0, [pc, #264]	; (4029d8 <write_wifi_command_safe+0x144>)
  4028d0:	4b42      	ldr	r3, [pc, #264]	; (4029dc <write_wifi_command_safe+0x148>)
  4028d2:	4798      	blx	r3
	usart_write_line(BOARD_USART, command);
  4028d4:	68f9      	ldr	r1, [r7, #12]
  4028d6:	4840      	ldr	r0, [pc, #256]	; (4029d8 <write_wifi_command_safe+0x144>)
  4028d8:	4b40      	ldr	r3, [pc, #256]	; (4029dc <write_wifi_command_safe+0x148>)
  4028da:	4798      	blx	r3
	
	uint8_t command_response = COMMAND_UNSET;
  4028dc:	2363      	movs	r3, #99	; 0x63
  4028de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	
	while(command_response == COMMAND_UNSET) {			
  4028e2:	e063      	b.n	4029ac <write_wifi_command_safe+0x118>
		// makes sure we have complete response before matching on expected
		// 10 is new line, should be the last thing in the buffer
		if( (strstr(usart_buffer, resp))  && (usart_buffer[usart_buffer_index-1] == 10)){
  4028e4:	68b9      	ldr	r1, [r7, #8]
  4028e6:	4838      	ldr	r0, [pc, #224]	; (4029c8 <write_wifi_command_safe+0x134>)
  4028e8:	4b3d      	ldr	r3, [pc, #244]	; (4029e0 <write_wifi_command_safe+0x14c>)
  4028ea:	4798      	blx	r3
  4028ec:	4603      	mov	r3, r0
  4028ee:	2b00      	cmp	r3, #0
  4028f0:	d023      	beq.n	40293a <write_wifi_command_safe+0xa6>
  4028f2:	4b37      	ldr	r3, [pc, #220]	; (4029d0 <write_wifi_command_safe+0x13c>)
  4028f4:	681b      	ldr	r3, [r3, #0]
  4028f6:	3b01      	subs	r3, #1
  4028f8:	4a33      	ldr	r2, [pc, #204]	; (4029c8 <write_wifi_command_safe+0x134>)
  4028fa:	5cd3      	ldrb	r3, [r2, r3]
  4028fc:	b2db      	uxtb	r3, r3
  4028fe:	2b0a      	cmp	r3, #10
  402900:	d11b      	bne.n	40293a <write_wifi_command_safe+0xa6>
			if(!handle_expected) command_response = COMMAND_SUCCESS; // successful response
  402902:	78fb      	ldrb	r3, [r7, #3]
  402904:	2b00      	cmp	r3, #0
  402906:	d103      	bne.n	402910 <write_wifi_command_safe+0x7c>
  402908:	2300      	movs	r3, #0
  40290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40290e:	e033      	b.n	402978 <write_wifi_command_safe+0xe4>
			// otherwise, parse for handle
			else {
				char *opened_pointer = strstr(usart_buffer, resp);
  402910:	68b9      	ldr	r1, [r7, #8]
  402912:	482d      	ldr	r0, [pc, #180]	; (4029c8 <write_wifi_command_safe+0x134>)
  402914:	4b32      	ldr	r3, [pc, #200]	; (4029e0 <write_wifi_command_safe+0x14c>)
  402916:	4798      	blx	r3
  402918:	61f8      	str	r0, [r7, #28]
				uint32_t buffer_offset = ((uint8_t *) opened_pointer) - usart_buffer;
  40291a:	69fb      	ldr	r3, [r7, #28]
  40291c:	4a2a      	ldr	r2, [pc, #168]	; (4029c8 <write_wifi_command_safe+0x134>)
  40291e:	1a9b      	subs	r3, r3, r2
  402920:	61bb      	str	r3, [r7, #24]
				uint8_t handle = usart_buffer[buffer_offset+12] - '0';
  402922:	69bb      	ldr	r3, [r7, #24]
  402924:	330c      	adds	r3, #12
  402926:	4a28      	ldr	r2, [pc, #160]	; (4029c8 <write_wifi_command_safe+0x134>)
  402928:	5cd3      	ldrb	r3, [r2, r3]
  40292a:	b2db      	uxtb	r3, r3
  40292c:	3b30      	subs	r3, #48	; 0x30
  40292e:	75fb      	strb	r3, [r7, #23]
				command_response = handle+10;
  402930:	7dfb      	ldrb	r3, [r7, #23]
  402932:	330a      	adds	r3, #10
  402934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(!handle_expected) command_response = COMMAND_SUCCESS; // successful response
  402938:	e01e      	b.n	402978 <write_wifi_command_safe+0xe4>
			}
		}
		else if(strstr(usart_buffer, "[Closed: ")){
  40293a:	492a      	ldr	r1, [pc, #168]	; (4029e4 <write_wifi_command_safe+0x150>)
  40293c:	4822      	ldr	r0, [pc, #136]	; (4029c8 <write_wifi_command_safe+0x134>)
  40293e:	4b28      	ldr	r3, [pc, #160]	; (4029e0 <write_wifi_command_safe+0x14c>)
  402940:	4798      	blx	r3
  402942:	4603      	mov	r3, r0
  402944:	2b00      	cmp	r3, #0
  402946:	d003      	beq.n	402950 <write_wifi_command_safe+0xbc>
			// return a value indicating closure of the stream
			command_response = COMMAND_STCLOSE;
  402948:	2303      	movs	r3, #3
  40294a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40294e:	e013      	b.n	402978 <write_wifi_command_safe+0xe4>
		}
		else if (strstr(usart_buffer, "Command failed")){
  402950:	4925      	ldr	r1, [pc, #148]	; (4029e8 <write_wifi_command_safe+0x154>)
  402952:	481d      	ldr	r0, [pc, #116]	; (4029c8 <write_wifi_command_safe+0x134>)
  402954:	4b22      	ldr	r3, [pc, #136]	; (4029e0 <write_wifi_command_safe+0x14c>)
  402956:	4798      	blx	r3
  402958:	4603      	mov	r3, r0
  40295a:	2b00      	cmp	r3, #0
  40295c:	d003      	beq.n	402966 <write_wifi_command_safe+0xd2>
			command_response = COMMAND_FAILURE; // command failed
  40295e:	2301      	movs	r3, #1
  402960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402964:	e008      	b.n	402978 <write_wifi_command_safe+0xe4>
		}
		else if (ms_counter++ > timeout_ms){
  402966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402968:	1c5a      	adds	r2, r3, #1
  40296a:	627a      	str	r2, [r7, #36]	; 0x24
  40296c:	687a      	ldr	r2, [r7, #4]
  40296e:	4293      	cmp	r3, r2
  402970:	d902      	bls.n	402978 <write_wifi_command_safe+0xe4>
			command_response = COMMAND_TIMEOUT;
  402972:	2302      	movs	r3, #2
  402974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
		delay_ms(1);
  402978:	4b1c      	ldr	r3, [pc, #112]	; (4029ec <write_wifi_command_safe+0x158>)
  40297a:	4798      	blx	r3
  40297c:	4603      	mov	r3, r0
  40297e:	f04f 0400 	mov.w	r4, #0
  402982:	f243 61af 	movw	r1, #13999	; 0x36af
  402986:	f04f 0200 	mov.w	r2, #0
  40298a:	eb13 0b01 	adds.w	fp, r3, r1
  40298e:	eb44 0c02 	adc.w	ip, r4, r2
  402992:	4658      	mov	r0, fp
  402994:	4661      	mov	r1, ip
  402996:	4c16      	ldr	r4, [pc, #88]	; (4029f0 <write_wifi_command_safe+0x15c>)
  402998:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40299c:	f04f 0300 	mov.w	r3, #0
  4029a0:	47a0      	blx	r4
  4029a2:	4603      	mov	r3, r0
  4029a4:	460c      	mov	r4, r1
  4029a6:	4618      	mov	r0, r3
  4029a8:	4b12      	ldr	r3, [pc, #72]	; (4029f4 <write_wifi_command_safe+0x160>)
  4029aa:	4798      	blx	r3
	while(command_response == COMMAND_UNSET) {			
  4029ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4029b0:	2b63      	cmp	r3, #99	; 0x63
  4029b2:	d097      	beq.n	4028e4 <write_wifi_command_safe+0x50>
	}
	
	usart_buffer_index = 0;
  4029b4:	4b06      	ldr	r3, [pc, #24]	; (4029d0 <write_wifi_command_safe+0x13c>)
  4029b6:	2200      	movs	r2, #0
  4029b8:	601a      	str	r2, [r3, #0]
	return command_response;
  4029ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4029be:	4618      	mov	r0, r3
  4029c0:	3728      	adds	r7, #40	; 0x28
  4029c2:	46bd      	mov	sp, r7
  4029c4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  4029c8:	2000d590 	.word	0x2000d590
  4029cc:	004040a9 	.word	0x004040a9
  4029d0:	2000d784 	.word	0x2000d784
  4029d4:	0040998c 	.word	0x0040998c
  4029d8:	40024000 	.word	0x40024000
  4029dc:	00401099 	.word	0x00401099
  4029e0:	0040454d 	.word	0x0040454d
  4029e4:	00409980 	.word	0x00409980
  4029e8:	004099a0 	.word	0x004099a0
  4029ec:	00401dbd 	.word	0x00401dbd
  4029f0:	00403d49 	.word	0x00403d49
  4029f4:	20000001 	.word	0x20000001

004029f8 <osc_enable>:
{
  4029f8:	b580      	push	{r7, lr}
  4029fa:	b082      	sub	sp, #8
  4029fc:	af00      	add	r7, sp, #0
  4029fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402a00:	687b      	ldr	r3, [r7, #4]
  402a02:	2b07      	cmp	r3, #7
  402a04:	d831      	bhi.n	402a6a <osc_enable+0x72>
  402a06:	a201      	add	r2, pc, #4	; (adr r2, 402a0c <osc_enable+0x14>)
  402a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a0c:	00402a69 	.word	0x00402a69
  402a10:	00402a2d 	.word	0x00402a2d
  402a14:	00402a35 	.word	0x00402a35
  402a18:	00402a3d 	.word	0x00402a3d
  402a1c:	00402a45 	.word	0x00402a45
  402a20:	00402a4d 	.word	0x00402a4d
  402a24:	00402a55 	.word	0x00402a55
  402a28:	00402a5f 	.word	0x00402a5f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  402a2c:	2000      	movs	r0, #0
  402a2e:	4b11      	ldr	r3, [pc, #68]	; (402a74 <osc_enable+0x7c>)
  402a30:	4798      	blx	r3
		break;
  402a32:	e01a      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  402a34:	2001      	movs	r0, #1
  402a36:	4b0f      	ldr	r3, [pc, #60]	; (402a74 <osc_enable+0x7c>)
  402a38:	4798      	blx	r3
		break;
  402a3a:	e016      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  402a3c:	2000      	movs	r0, #0
  402a3e:	4b0e      	ldr	r3, [pc, #56]	; (402a78 <osc_enable+0x80>)
  402a40:	4798      	blx	r3
		break;
  402a42:	e012      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  402a44:	2010      	movs	r0, #16
  402a46:	4b0c      	ldr	r3, [pc, #48]	; (402a78 <osc_enable+0x80>)
  402a48:	4798      	blx	r3
		break;
  402a4a:	e00e      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  402a4c:	2020      	movs	r0, #32
  402a4e:	4b0a      	ldr	r3, [pc, #40]	; (402a78 <osc_enable+0x80>)
  402a50:	4798      	blx	r3
		break;
  402a52:	e00a      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402a54:	213e      	movs	r1, #62	; 0x3e
  402a56:	2000      	movs	r0, #0
  402a58:	4b08      	ldr	r3, [pc, #32]	; (402a7c <osc_enable+0x84>)
  402a5a:	4798      	blx	r3
		break;
  402a5c:	e005      	b.n	402a6a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  402a5e:	213e      	movs	r1, #62	; 0x3e
  402a60:	2001      	movs	r0, #1
  402a62:	4b06      	ldr	r3, [pc, #24]	; (402a7c <osc_enable+0x84>)
  402a64:	4798      	blx	r3
		break;
  402a66:	e000      	b.n	402a6a <osc_enable+0x72>
		break;
  402a68:	bf00      	nop
}
  402a6a:	bf00      	nop
  402a6c:	3708      	adds	r7, #8
  402a6e:	46bd      	mov	sp, r7
  402a70:	bd80      	pop	{r7, pc}
  402a72:	bf00      	nop
  402a74:	0040331d 	.word	0x0040331d
  402a78:	00403389 	.word	0x00403389
  402a7c:	004033f9 	.word	0x004033f9

00402a80 <osc_is_ready>:
{
  402a80:	b580      	push	{r7, lr}
  402a82:	b082      	sub	sp, #8
  402a84:	af00      	add	r7, sp, #0
  402a86:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402a88:	687b      	ldr	r3, [r7, #4]
  402a8a:	2b07      	cmp	r3, #7
  402a8c:	d826      	bhi.n	402adc <osc_is_ready+0x5c>
  402a8e:	a201      	add	r2, pc, #4	; (adr r2, 402a94 <osc_is_ready+0x14>)
  402a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a94:	00402ab5 	.word	0x00402ab5
  402a98:	00402ab9 	.word	0x00402ab9
  402a9c:	00402ab9 	.word	0x00402ab9
  402aa0:	00402acb 	.word	0x00402acb
  402aa4:	00402acb 	.word	0x00402acb
  402aa8:	00402acb 	.word	0x00402acb
  402aac:	00402acb 	.word	0x00402acb
  402ab0:	00402acb 	.word	0x00402acb
		return 1;
  402ab4:	2301      	movs	r3, #1
  402ab6:	e012      	b.n	402ade <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  402ab8:	4b0b      	ldr	r3, [pc, #44]	; (402ae8 <osc_is_ready+0x68>)
  402aba:	4798      	blx	r3
  402abc:	4603      	mov	r3, r0
  402abe:	2b00      	cmp	r3, #0
  402ac0:	bf14      	ite	ne
  402ac2:	2301      	movne	r3, #1
  402ac4:	2300      	moveq	r3, #0
  402ac6:	b2db      	uxtb	r3, r3
  402ac8:	e009      	b.n	402ade <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  402aca:	4b08      	ldr	r3, [pc, #32]	; (402aec <osc_is_ready+0x6c>)
  402acc:	4798      	blx	r3
  402ace:	4603      	mov	r3, r0
  402ad0:	2b00      	cmp	r3, #0
  402ad2:	bf14      	ite	ne
  402ad4:	2301      	movne	r3, #1
  402ad6:	2300      	moveq	r3, #0
  402ad8:	b2db      	uxtb	r3, r3
  402ada:	e000      	b.n	402ade <osc_is_ready+0x5e>
	return 0;
  402adc:	2300      	movs	r3, #0
}
  402ade:	4618      	mov	r0, r3
  402ae0:	3708      	adds	r7, #8
  402ae2:	46bd      	mov	sp, r7
  402ae4:	bd80      	pop	{r7, pc}
  402ae6:	bf00      	nop
  402ae8:	00403355 	.word	0x00403355
  402aec:	00403471 	.word	0x00403471

00402af0 <osc_get_rate>:
{
  402af0:	b480      	push	{r7}
  402af2:	b083      	sub	sp, #12
  402af4:	af00      	add	r7, sp, #0
  402af6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402af8:	687b      	ldr	r3, [r7, #4]
  402afa:	2b07      	cmp	r3, #7
  402afc:	d825      	bhi.n	402b4a <osc_get_rate+0x5a>
  402afe:	a201      	add	r2, pc, #4	; (adr r2, 402b04 <osc_get_rate+0x14>)
  402b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b04:	00402b25 	.word	0x00402b25
  402b08:	00402b2b 	.word	0x00402b2b
  402b0c:	00402b31 	.word	0x00402b31
  402b10:	00402b37 	.word	0x00402b37
  402b14:	00402b3b 	.word	0x00402b3b
  402b18:	00402b3f 	.word	0x00402b3f
  402b1c:	00402b43 	.word	0x00402b43
  402b20:	00402b47 	.word	0x00402b47
		return OSC_SLCK_32K_RC_HZ;
  402b24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402b28:	e010      	b.n	402b4c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b2e:	e00d      	b.n	402b4c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402b34:	e00a      	b.n	402b4c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402b36:	4b08      	ldr	r3, [pc, #32]	; (402b58 <osc_get_rate+0x68>)
  402b38:	e008      	b.n	402b4c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402b3a:	4b08      	ldr	r3, [pc, #32]	; (402b5c <osc_get_rate+0x6c>)
  402b3c:	e006      	b.n	402b4c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402b3e:	4b08      	ldr	r3, [pc, #32]	; (402b60 <osc_get_rate+0x70>)
  402b40:	e004      	b.n	402b4c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402b42:	4b07      	ldr	r3, [pc, #28]	; (402b60 <osc_get_rate+0x70>)
  402b44:	e002      	b.n	402b4c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402b46:	4b06      	ldr	r3, [pc, #24]	; (402b60 <osc_get_rate+0x70>)
  402b48:	e000      	b.n	402b4c <osc_get_rate+0x5c>
	return 0;
  402b4a:	2300      	movs	r3, #0
}
  402b4c:	4618      	mov	r0, r3
  402b4e:	370c      	adds	r7, #12
  402b50:	46bd      	mov	sp, r7
  402b52:	bc80      	pop	{r7}
  402b54:	4770      	bx	lr
  402b56:	bf00      	nop
  402b58:	003d0900 	.word	0x003d0900
  402b5c:	007a1200 	.word	0x007a1200
  402b60:	00b71b00 	.word	0x00b71b00

00402b64 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  402b64:	b580      	push	{r7, lr}
  402b66:	b082      	sub	sp, #8
  402b68:	af00      	add	r7, sp, #0
  402b6a:	4603      	mov	r3, r0
  402b6c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  402b6e:	bf00      	nop
  402b70:	79fb      	ldrb	r3, [r7, #7]
  402b72:	4618      	mov	r0, r3
  402b74:	4b05      	ldr	r3, [pc, #20]	; (402b8c <osc_wait_ready+0x28>)
  402b76:	4798      	blx	r3
  402b78:	4603      	mov	r3, r0
  402b7a:	f083 0301 	eor.w	r3, r3, #1
  402b7e:	b2db      	uxtb	r3, r3
  402b80:	2b00      	cmp	r3, #0
  402b82:	d1f5      	bne.n	402b70 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  402b84:	bf00      	nop
  402b86:	3708      	adds	r7, #8
  402b88:	46bd      	mov	sp, r7
  402b8a:	bd80      	pop	{r7, pc}
  402b8c:	00402a81 	.word	0x00402a81

00402b90 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  402b90:	b580      	push	{r7, lr}
  402b92:	b086      	sub	sp, #24
  402b94:	af00      	add	r7, sp, #0
  402b96:	60f8      	str	r0, [r7, #12]
  402b98:	607a      	str	r2, [r7, #4]
  402b9a:	603b      	str	r3, [r7, #0]
  402b9c:	460b      	mov	r3, r1
  402b9e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  402ba0:	7afb      	ldrb	r3, [r7, #11]
  402ba2:	4618      	mov	r0, r3
  402ba4:	4b0d      	ldr	r3, [pc, #52]	; (402bdc <pll_config_init+0x4c>)
  402ba6:	4798      	blx	r3
  402ba8:	4602      	mov	r2, r0
  402baa:	687b      	ldr	r3, [r7, #4]
  402bac:	fbb2 f3f3 	udiv	r3, r2, r3
  402bb0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  402bb2:	697b      	ldr	r3, [r7, #20]
  402bb4:	683a      	ldr	r2, [r7, #0]
  402bb6:	fb02 f303 	mul.w	r3, r2, r3
  402bba:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  402bbc:	683b      	ldr	r3, [r7, #0]
  402bbe:	3b01      	subs	r3, #1
  402bc0:	041a      	lsls	r2, r3, #16
  402bc2:	4b07      	ldr	r3, [pc, #28]	; (402be0 <pll_config_init+0x50>)
  402bc4:	4013      	ands	r3, r2
  402bc6:	687a      	ldr	r2, [r7, #4]
  402bc8:	b2d2      	uxtb	r2, r2
  402bca:	4313      	orrs	r3, r2
  402bcc:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  402bd0:	68fb      	ldr	r3, [r7, #12]
  402bd2:	601a      	str	r2, [r3, #0]
}
  402bd4:	bf00      	nop
  402bd6:	3718      	adds	r7, #24
  402bd8:	46bd      	mov	sp, r7
  402bda:	bd80      	pop	{r7, pc}
  402bdc:	00402af1 	.word	0x00402af1
  402be0:	07ff0000 	.word	0x07ff0000

00402be4 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  402be4:	b580      	push	{r7, lr}
  402be6:	b082      	sub	sp, #8
  402be8:	af00      	add	r7, sp, #0
  402bea:	6078      	str	r0, [r7, #4]
  402bec:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  402bee:	683b      	ldr	r3, [r7, #0]
  402bf0:	2b00      	cmp	r3, #0
  402bf2:	d108      	bne.n	402c06 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  402bf4:	4b09      	ldr	r3, [pc, #36]	; (402c1c <pll_enable+0x38>)
  402bf6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402bf8:	4a09      	ldr	r2, [pc, #36]	; (402c20 <pll_enable+0x3c>)
  402bfa:	687b      	ldr	r3, [r7, #4]
  402bfc:	681b      	ldr	r3, [r3, #0]
  402bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402c02:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  402c04:	e005      	b.n	402c12 <pll_enable+0x2e>
		pmc_disable_pllbck();
  402c06:	4b07      	ldr	r3, [pc, #28]	; (402c24 <pll_enable+0x40>)
  402c08:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402c0a:	4a05      	ldr	r2, [pc, #20]	; (402c20 <pll_enable+0x3c>)
  402c0c:	687b      	ldr	r3, [r7, #4]
  402c0e:	681b      	ldr	r3, [r3, #0]
  402c10:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  402c12:	bf00      	nop
  402c14:	3708      	adds	r7, #8
  402c16:	46bd      	mov	sp, r7
  402c18:	bd80      	pop	{r7, pc}
  402c1a:	bf00      	nop
  402c1c:	00403489 	.word	0x00403489
  402c20:	400e0400 	.word	0x400e0400
  402c24:	00403509 	.word	0x00403509

00402c28 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  402c28:	b580      	push	{r7, lr}
  402c2a:	b082      	sub	sp, #8
  402c2c:	af00      	add	r7, sp, #0
  402c2e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  402c30:	687b      	ldr	r3, [r7, #4]
  402c32:	2b00      	cmp	r3, #0
  402c34:	d103      	bne.n	402c3e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  402c36:	4b05      	ldr	r3, [pc, #20]	; (402c4c <pll_is_locked+0x24>)
  402c38:	4798      	blx	r3
  402c3a:	4603      	mov	r3, r0
  402c3c:	e002      	b.n	402c44 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  402c3e:	4b04      	ldr	r3, [pc, #16]	; (402c50 <pll_is_locked+0x28>)
  402c40:	4798      	blx	r3
  402c42:	4603      	mov	r3, r0
	}
}
  402c44:	4618      	mov	r0, r3
  402c46:	3708      	adds	r7, #8
  402c48:	46bd      	mov	sp, r7
  402c4a:	bd80      	pop	{r7, pc}
  402c4c:	004034a1 	.word	0x004034a1
  402c50:	00403521 	.word	0x00403521

00402c54 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  402c54:	b580      	push	{r7, lr}
  402c56:	b082      	sub	sp, #8
  402c58:	af00      	add	r7, sp, #0
  402c5a:	4603      	mov	r3, r0
  402c5c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  402c5e:	79fb      	ldrb	r3, [r7, #7]
  402c60:	3b03      	subs	r3, #3
  402c62:	2b04      	cmp	r3, #4
  402c64:	d808      	bhi.n	402c78 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  402c66:	79fb      	ldrb	r3, [r7, #7]
  402c68:	4618      	mov	r0, r3
  402c6a:	4b06      	ldr	r3, [pc, #24]	; (402c84 <pll_enable_source+0x30>)
  402c6c:	4798      	blx	r3
		osc_wait_ready(e_src);
  402c6e:	79fb      	ldrb	r3, [r7, #7]
  402c70:	4618      	mov	r0, r3
  402c72:	4b05      	ldr	r3, [pc, #20]	; (402c88 <pll_enable_source+0x34>)
  402c74:	4798      	blx	r3
		break;
  402c76:	e000      	b.n	402c7a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  402c78:	bf00      	nop
	}
}
  402c7a:	bf00      	nop
  402c7c:	3708      	adds	r7, #8
  402c7e:	46bd      	mov	sp, r7
  402c80:	bd80      	pop	{r7, pc}
  402c82:	bf00      	nop
  402c84:	004029f9 	.word	0x004029f9
  402c88:	00402b65 	.word	0x00402b65

00402c8c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  402c8c:	b580      	push	{r7, lr}
  402c8e:	b082      	sub	sp, #8
  402c90:	af00      	add	r7, sp, #0
  402c92:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402c94:	bf00      	nop
  402c96:	6878      	ldr	r0, [r7, #4]
  402c98:	4b04      	ldr	r3, [pc, #16]	; (402cac <pll_wait_for_lock+0x20>)
  402c9a:	4798      	blx	r3
  402c9c:	4603      	mov	r3, r0
  402c9e:	2b00      	cmp	r3, #0
  402ca0:	d0f9      	beq.n	402c96 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  402ca2:	2300      	movs	r3, #0
}
  402ca4:	4618      	mov	r0, r3
  402ca6:	3708      	adds	r7, #8
  402ca8:	46bd      	mov	sp, r7
  402caa:	bd80      	pop	{r7, pc}
  402cac:	00402c29 	.word	0x00402c29

00402cb0 <sysclk_get_main_hz>:
{
  402cb0:	b580      	push	{r7, lr}
  402cb2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402cb4:	2006      	movs	r0, #6
  402cb6:	4b04      	ldr	r3, [pc, #16]	; (402cc8 <sysclk_get_main_hz+0x18>)
  402cb8:	4798      	blx	r3
  402cba:	4602      	mov	r2, r0
  402cbc:	4613      	mov	r3, r2
  402cbe:	009b      	lsls	r3, r3, #2
  402cc0:	4413      	add	r3, r2
  402cc2:	009b      	lsls	r3, r3, #2
}
  402cc4:	4618      	mov	r0, r3
  402cc6:	bd80      	pop	{r7, pc}
  402cc8:	00402af1 	.word	0x00402af1

00402ccc <sysclk_get_cpu_hz>:
{
  402ccc:	b580      	push	{r7, lr}
  402cce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402cd0:	4b02      	ldr	r3, [pc, #8]	; (402cdc <sysclk_get_cpu_hz+0x10>)
  402cd2:	4798      	blx	r3
  402cd4:	4603      	mov	r3, r0
  402cd6:	085b      	lsrs	r3, r3, #1
}
  402cd8:	4618      	mov	r0, r3
  402cda:	bd80      	pop	{r7, pc}
  402cdc:	00402cb1 	.word	0x00402cb1

00402ce0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402ce0:	b590      	push	{r4, r7, lr}
  402ce2:	b083      	sub	sp, #12
  402ce4:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402ce6:	4811      	ldr	r0, [pc, #68]	; (402d2c <sysclk_init+0x4c>)
  402ce8:	4b11      	ldr	r3, [pc, #68]	; (402d30 <sysclk_init+0x50>)
  402cea:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  402cec:	2006      	movs	r0, #6
  402cee:	4b11      	ldr	r3, [pc, #68]	; (402d34 <sysclk_init+0x54>)
  402cf0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  402cf2:	1d38      	adds	r0, r7, #4
  402cf4:	2314      	movs	r3, #20
  402cf6:	2201      	movs	r2, #1
  402cf8:	2106      	movs	r1, #6
  402cfa:	4c0f      	ldr	r4, [pc, #60]	; (402d38 <sysclk_init+0x58>)
  402cfc:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  402cfe:	1d3b      	adds	r3, r7, #4
  402d00:	2100      	movs	r1, #0
  402d02:	4618      	mov	r0, r3
  402d04:	4b0d      	ldr	r3, [pc, #52]	; (402d3c <sysclk_init+0x5c>)
  402d06:	4798      	blx	r3
		pll_wait_for_lock(0);
  402d08:	2000      	movs	r0, #0
  402d0a:	4b0d      	ldr	r3, [pc, #52]	; (402d40 <sysclk_init+0x60>)
  402d0c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402d0e:	2010      	movs	r0, #16
  402d10:	4b0c      	ldr	r3, [pc, #48]	; (402d44 <sysclk_init+0x64>)
  402d12:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402d14:	4b0c      	ldr	r3, [pc, #48]	; (402d48 <sysclk_init+0x68>)
  402d16:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402d18:	4b0c      	ldr	r3, [pc, #48]	; (402d4c <sysclk_init+0x6c>)
  402d1a:	4798      	blx	r3
  402d1c:	4603      	mov	r3, r0
  402d1e:	4618      	mov	r0, r3
  402d20:	4b03      	ldr	r3, [pc, #12]	; (402d30 <sysclk_init+0x50>)
  402d22:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  402d24:	bf00      	nop
  402d26:	370c      	adds	r7, #12
  402d28:	46bd      	mov	sp, r7
  402d2a:	bd90      	pop	{r4, r7, pc}
  402d2c:	07270e00 	.word	0x07270e00
  402d30:	00403bb9 	.word	0x00403bb9
  402d34:	00402c55 	.word	0x00402c55
  402d38:	00402b91 	.word	0x00402b91
  402d3c:	00402be5 	.word	0x00402be5
  402d40:	00402c8d 	.word	0x00402c8d
  402d44:	0040329d 	.word	0x0040329d
  402d48:	00403a21 	.word	0x00403a21
  402d4c:	00402ccd 	.word	0x00402ccd

00402d50 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  402d50:	b480      	push	{r7}
  402d52:	b085      	sub	sp, #20
  402d54:	af00      	add	r7, sp, #0
  402d56:	60f8      	str	r0, [r7, #12]
  402d58:	60b9      	str	r1, [r7, #8]
  402d5a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402d5c:	687b      	ldr	r3, [r7, #4]
  402d5e:	2b00      	cmp	r3, #0
  402d60:	d003      	beq.n	402d6a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  402d62:	68fb      	ldr	r3, [r7, #12]
  402d64:	68ba      	ldr	r2, [r7, #8]
  402d66:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  402d68:	e002      	b.n	402d70 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  402d6a:	68fb      	ldr	r3, [r7, #12]
  402d6c:	68ba      	ldr	r2, [r7, #8]
  402d6e:	661a      	str	r2, [r3, #96]	; 0x60
}
  402d70:	bf00      	nop
  402d72:	3714      	adds	r7, #20
  402d74:	46bd      	mov	sp, r7
  402d76:	bc80      	pop	{r7}
  402d78:	4770      	bx	lr

00402d7a <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  402d7a:	b480      	push	{r7}
  402d7c:	b085      	sub	sp, #20
  402d7e:	af00      	add	r7, sp, #0
  402d80:	60f8      	str	r0, [r7, #12]
  402d82:	60b9      	str	r1, [r7, #8]
  402d84:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  402d86:	68fb      	ldr	r3, [r7, #12]
  402d88:	68ba      	ldr	r2, [r7, #8]
  402d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  402d8e:	687b      	ldr	r3, [r7, #4]
  402d90:	005b      	lsls	r3, r3, #1
  402d92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402d96:	fbb2 f3f3 	udiv	r3, r2, r3
  402d9a:	3b01      	subs	r3, #1
  402d9c:	f3c3 020d 	ubfx	r2, r3, #0, #14
  402da0:	68fb      	ldr	r3, [r7, #12]
  402da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  402da6:	bf00      	nop
  402da8:	3714      	adds	r7, #20
  402daa:	46bd      	mov	sp, r7
  402dac:	bc80      	pop	{r7}
  402dae:	4770      	bx	lr

00402db0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402db0:	b480      	push	{r7}
  402db2:	b087      	sub	sp, #28
  402db4:	af00      	add	r7, sp, #0
  402db6:	60f8      	str	r0, [r7, #12]
  402db8:	60b9      	str	r1, [r7, #8]
  402dba:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402dbc:	68fb      	ldr	r3, [r7, #12]
  402dbe:	687a      	ldr	r2, [r7, #4]
  402dc0:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402dc2:	68bb      	ldr	r3, [r7, #8]
  402dc4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402dc8:	d04a      	beq.n	402e60 <pio_set_peripheral+0xb0>
  402dca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402dce:	d808      	bhi.n	402de2 <pio_set_peripheral+0x32>
  402dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402dd4:	d016      	beq.n	402e04 <pio_set_peripheral+0x54>
  402dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402dda:	d02c      	beq.n	402e36 <pio_set_peripheral+0x86>
  402ddc:	2b00      	cmp	r3, #0
  402dde:	d069      	beq.n	402eb4 <pio_set_peripheral+0x104>
  402de0:	e064      	b.n	402eac <pio_set_peripheral+0xfc>
  402de2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402de6:	d065      	beq.n	402eb4 <pio_set_peripheral+0x104>
  402de8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402dec:	d803      	bhi.n	402df6 <pio_set_peripheral+0x46>
  402dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402df2:	d04a      	beq.n	402e8a <pio_set_peripheral+0xda>
  402df4:	e05a      	b.n	402eac <pio_set_peripheral+0xfc>
  402df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402dfa:	d05b      	beq.n	402eb4 <pio_set_peripheral+0x104>
  402dfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402e00:	d058      	beq.n	402eb4 <pio_set_peripheral+0x104>
  402e02:	e053      	b.n	402eac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e04:	68fb      	ldr	r3, [r7, #12]
  402e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402e08:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402e0a:	68fb      	ldr	r3, [r7, #12]
  402e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e0e:	687b      	ldr	r3, [r7, #4]
  402e10:	43d9      	mvns	r1, r3
  402e12:	697b      	ldr	r3, [r7, #20]
  402e14:	400b      	ands	r3, r1
  402e16:	401a      	ands	r2, r3
  402e18:	68fb      	ldr	r3, [r7, #12]
  402e1a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402e1c:	68fb      	ldr	r3, [r7, #12]
  402e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402e20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402e22:	68fb      	ldr	r3, [r7, #12]
  402e24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e26:	687b      	ldr	r3, [r7, #4]
  402e28:	43d9      	mvns	r1, r3
  402e2a:	697b      	ldr	r3, [r7, #20]
  402e2c:	400b      	ands	r3, r1
  402e2e:	401a      	ands	r2, r3
  402e30:	68fb      	ldr	r3, [r7, #12]
  402e32:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402e34:	e03a      	b.n	402eac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e36:	68fb      	ldr	r3, [r7, #12]
  402e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402e3a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402e3c:	687a      	ldr	r2, [r7, #4]
  402e3e:	697b      	ldr	r3, [r7, #20]
  402e40:	431a      	orrs	r2, r3
  402e42:	68fb      	ldr	r3, [r7, #12]
  402e44:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402e46:	68fb      	ldr	r3, [r7, #12]
  402e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402e4a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402e4c:	68fb      	ldr	r3, [r7, #12]
  402e4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e50:	687b      	ldr	r3, [r7, #4]
  402e52:	43d9      	mvns	r1, r3
  402e54:	697b      	ldr	r3, [r7, #20]
  402e56:	400b      	ands	r3, r1
  402e58:	401a      	ands	r2, r3
  402e5a:	68fb      	ldr	r3, [r7, #12]
  402e5c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402e5e:	e025      	b.n	402eac <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e60:	68fb      	ldr	r3, [r7, #12]
  402e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402e64:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402e66:	68fb      	ldr	r3, [r7, #12]
  402e68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e6a:	687b      	ldr	r3, [r7, #4]
  402e6c:	43d9      	mvns	r1, r3
  402e6e:	697b      	ldr	r3, [r7, #20]
  402e70:	400b      	ands	r3, r1
  402e72:	401a      	ands	r2, r3
  402e74:	68fb      	ldr	r3, [r7, #12]
  402e76:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402e78:	68fb      	ldr	r3, [r7, #12]
  402e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402e7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402e7e:	687a      	ldr	r2, [r7, #4]
  402e80:	697b      	ldr	r3, [r7, #20]
  402e82:	431a      	orrs	r2, r3
  402e84:	68fb      	ldr	r3, [r7, #12]
  402e86:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402e88:	e010      	b.n	402eac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e8a:	68fb      	ldr	r3, [r7, #12]
  402e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402e8e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402e90:	687a      	ldr	r2, [r7, #4]
  402e92:	697b      	ldr	r3, [r7, #20]
  402e94:	431a      	orrs	r2, r3
  402e96:	68fb      	ldr	r3, [r7, #12]
  402e98:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402e9a:	68fb      	ldr	r3, [r7, #12]
  402e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402e9e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402ea0:	687a      	ldr	r2, [r7, #4]
  402ea2:	697b      	ldr	r3, [r7, #20]
  402ea4:	431a      	orrs	r2, r3
  402ea6:	68fb      	ldr	r3, [r7, #12]
  402ea8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402eaa:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402eac:	68fb      	ldr	r3, [r7, #12]
  402eae:	687a      	ldr	r2, [r7, #4]
  402eb0:	605a      	str	r2, [r3, #4]
  402eb2:	e000      	b.n	402eb6 <pio_set_peripheral+0x106>
		return;
  402eb4:	bf00      	nop
}
  402eb6:	371c      	adds	r7, #28
  402eb8:	46bd      	mov	sp, r7
  402eba:	bc80      	pop	{r7}
  402ebc:	4770      	bx	lr
	...

00402ec0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  402ec0:	b580      	push	{r7, lr}
  402ec2:	b084      	sub	sp, #16
  402ec4:	af00      	add	r7, sp, #0
  402ec6:	60f8      	str	r0, [r7, #12]
  402ec8:	60b9      	str	r1, [r7, #8]
  402eca:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402ecc:	68b9      	ldr	r1, [r7, #8]
  402ece:	68f8      	ldr	r0, [r7, #12]
  402ed0:	4b19      	ldr	r3, [pc, #100]	; (402f38 <pio_set_input+0x78>)
  402ed2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  402ed4:	687b      	ldr	r3, [r7, #4]
  402ed6:	f003 0301 	and.w	r3, r3, #1
  402eda:	461a      	mov	r2, r3
  402edc:	68b9      	ldr	r1, [r7, #8]
  402ede:	68f8      	ldr	r0, [r7, #12]
  402ee0:	4b16      	ldr	r3, [pc, #88]	; (402f3c <pio_set_input+0x7c>)
  402ee2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402ee4:	687b      	ldr	r3, [r7, #4]
  402ee6:	f003 030a 	and.w	r3, r3, #10
  402eea:	2b00      	cmp	r3, #0
  402eec:	d003      	beq.n	402ef6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  402eee:	68fb      	ldr	r3, [r7, #12]
  402ef0:	68ba      	ldr	r2, [r7, #8]
  402ef2:	621a      	str	r2, [r3, #32]
  402ef4:	e002      	b.n	402efc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402ef6:	68fb      	ldr	r3, [r7, #12]
  402ef8:	68ba      	ldr	r2, [r7, #8]
  402efa:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402efc:	687b      	ldr	r3, [r7, #4]
  402efe:	f003 0302 	and.w	r3, r3, #2
  402f02:	2b00      	cmp	r3, #0
  402f04:	d004      	beq.n	402f10 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  402f06:	68fb      	ldr	r3, [r7, #12]
  402f08:	68ba      	ldr	r2, [r7, #8]
  402f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  402f0e:	e008      	b.n	402f22 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402f10:	687b      	ldr	r3, [r7, #4]
  402f12:	f003 0308 	and.w	r3, r3, #8
  402f16:	2b00      	cmp	r3, #0
  402f18:	d003      	beq.n	402f22 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  402f1a:	68fb      	ldr	r3, [r7, #12]
  402f1c:	68ba      	ldr	r2, [r7, #8]
  402f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402f22:	68fb      	ldr	r3, [r7, #12]
  402f24:	68ba      	ldr	r2, [r7, #8]
  402f26:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402f28:	68fb      	ldr	r3, [r7, #12]
  402f2a:	68ba      	ldr	r2, [r7, #8]
  402f2c:	601a      	str	r2, [r3, #0]
}
  402f2e:	bf00      	nop
  402f30:	3710      	adds	r7, #16
  402f32:	46bd      	mov	sp, r7
  402f34:	bd80      	pop	{r7, pc}
  402f36:	bf00      	nop
  402f38:	00403029 	.word	0x00403029
  402f3c:	00402d51 	.word	0x00402d51

00402f40 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402f40:	b580      	push	{r7, lr}
  402f42:	b084      	sub	sp, #16
  402f44:	af00      	add	r7, sp, #0
  402f46:	60f8      	str	r0, [r7, #12]
  402f48:	60b9      	str	r1, [r7, #8]
  402f4a:	607a      	str	r2, [r7, #4]
  402f4c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  402f4e:	68b9      	ldr	r1, [r7, #8]
  402f50:	68f8      	ldr	r0, [r7, #12]
  402f52:	4b12      	ldr	r3, [pc, #72]	; (402f9c <pio_set_output+0x5c>)
  402f54:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  402f56:	69ba      	ldr	r2, [r7, #24]
  402f58:	68b9      	ldr	r1, [r7, #8]
  402f5a:	68f8      	ldr	r0, [r7, #12]
  402f5c:	4b10      	ldr	r3, [pc, #64]	; (402fa0 <pio_set_output+0x60>)
  402f5e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402f60:	683b      	ldr	r3, [r7, #0]
  402f62:	2b00      	cmp	r3, #0
  402f64:	d003      	beq.n	402f6e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  402f66:	68fb      	ldr	r3, [r7, #12]
  402f68:	68ba      	ldr	r2, [r7, #8]
  402f6a:	651a      	str	r2, [r3, #80]	; 0x50
  402f6c:	e002      	b.n	402f74 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402f6e:	68fb      	ldr	r3, [r7, #12]
  402f70:	68ba      	ldr	r2, [r7, #8]
  402f72:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402f74:	687b      	ldr	r3, [r7, #4]
  402f76:	2b00      	cmp	r3, #0
  402f78:	d003      	beq.n	402f82 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402f7a:	68fb      	ldr	r3, [r7, #12]
  402f7c:	68ba      	ldr	r2, [r7, #8]
  402f7e:	631a      	str	r2, [r3, #48]	; 0x30
  402f80:	e002      	b.n	402f88 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402f82:	68fb      	ldr	r3, [r7, #12]
  402f84:	68ba      	ldr	r2, [r7, #8]
  402f86:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402f88:	68fb      	ldr	r3, [r7, #12]
  402f8a:	68ba      	ldr	r2, [r7, #8]
  402f8c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  402f8e:	68fb      	ldr	r3, [r7, #12]
  402f90:	68ba      	ldr	r2, [r7, #8]
  402f92:	601a      	str	r2, [r3, #0]
}
  402f94:	bf00      	nop
  402f96:	3710      	adds	r7, #16
  402f98:	46bd      	mov	sp, r7
  402f9a:	bd80      	pop	{r7, pc}
  402f9c:	00403029 	.word	0x00403029
  402fa0:	00402d51 	.word	0x00402d51

00402fa4 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402fa4:	b480      	push	{r7}
  402fa6:	b085      	sub	sp, #20
  402fa8:	af00      	add	r7, sp, #0
  402faa:	60f8      	str	r0, [r7, #12]
  402fac:	60b9      	str	r1, [r7, #8]
  402fae:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402fb0:	687b      	ldr	r3, [r7, #4]
  402fb2:	f003 0310 	and.w	r3, r3, #16
  402fb6:	2b00      	cmp	r3, #0
  402fb8:	d020      	beq.n	402ffc <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402fba:	68fb      	ldr	r3, [r7, #12]
  402fbc:	68ba      	ldr	r2, [r7, #8]
  402fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402fc2:	687b      	ldr	r3, [r7, #4]
  402fc4:	f003 0320 	and.w	r3, r3, #32
  402fc8:	2b00      	cmp	r3, #0
  402fca:	d004      	beq.n	402fd6 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402fcc:	68fb      	ldr	r3, [r7, #12]
  402fce:	68ba      	ldr	r2, [r7, #8]
  402fd0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402fd4:	e003      	b.n	402fde <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402fd6:	68fb      	ldr	r3, [r7, #12]
  402fd8:	68ba      	ldr	r2, [r7, #8]
  402fda:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402fde:	687b      	ldr	r3, [r7, #4]
  402fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402fe4:	2b00      	cmp	r3, #0
  402fe6:	d004      	beq.n	402ff2 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402fe8:	68fb      	ldr	r3, [r7, #12]
  402fea:	68ba      	ldr	r2, [r7, #8]
  402fec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402ff0:	e008      	b.n	403004 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402ff2:	68fb      	ldr	r3, [r7, #12]
  402ff4:	68ba      	ldr	r2, [r7, #8]
  402ff6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  402ffa:	e003      	b.n	403004 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  402ffc:	68fb      	ldr	r3, [r7, #12]
  402ffe:	68ba      	ldr	r2, [r7, #8]
  403000:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  403004:	bf00      	nop
  403006:	3714      	adds	r7, #20
  403008:	46bd      	mov	sp, r7
  40300a:	bc80      	pop	{r7}
  40300c:	4770      	bx	lr

0040300e <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40300e:	b480      	push	{r7}
  403010:	b083      	sub	sp, #12
  403012:	af00      	add	r7, sp, #0
  403014:	6078      	str	r0, [r7, #4]
  403016:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  403018:	687b      	ldr	r3, [r7, #4]
  40301a:	683a      	ldr	r2, [r7, #0]
  40301c:	641a      	str	r2, [r3, #64]	; 0x40
}
  40301e:	bf00      	nop
  403020:	370c      	adds	r7, #12
  403022:	46bd      	mov	sp, r7
  403024:	bc80      	pop	{r7}
  403026:	4770      	bx	lr

00403028 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  403028:	b480      	push	{r7}
  40302a:	b083      	sub	sp, #12
  40302c:	af00      	add	r7, sp, #0
  40302e:	6078      	str	r0, [r7, #4]
  403030:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  403032:	687b      	ldr	r3, [r7, #4]
  403034:	683a      	ldr	r2, [r7, #0]
  403036:	645a      	str	r2, [r3, #68]	; 0x44
}
  403038:	bf00      	nop
  40303a:	370c      	adds	r7, #12
  40303c:	46bd      	mov	sp, r7
  40303e:	bc80      	pop	{r7}
  403040:	4770      	bx	lr

00403042 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  403042:	b480      	push	{r7}
  403044:	b083      	sub	sp, #12
  403046:	af00      	add	r7, sp, #0
  403048:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40304a:	687b      	ldr	r3, [r7, #4]
  40304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40304e:	4618      	mov	r0, r3
  403050:	370c      	adds	r7, #12
  403052:	46bd      	mov	sp, r7
  403054:	bc80      	pop	{r7}
  403056:	4770      	bx	lr

00403058 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  403058:	b480      	push	{r7}
  40305a:	b083      	sub	sp, #12
  40305c:	af00      	add	r7, sp, #0
  40305e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  403060:	687b      	ldr	r3, [r7, #4]
  403062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  403064:	4618      	mov	r0, r3
  403066:	370c      	adds	r7, #12
  403068:	46bd      	mov	sp, r7
  40306a:	bc80      	pop	{r7}
  40306c:	4770      	bx	lr
	...

00403070 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403070:	b590      	push	{r4, r7, lr}
  403072:	b087      	sub	sp, #28
  403074:	af02      	add	r7, sp, #8
  403076:	6078      	str	r0, [r7, #4]
  403078:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40307a:	6878      	ldr	r0, [r7, #4]
  40307c:	4b63      	ldr	r3, [pc, #396]	; (40320c <pio_configure_pin+0x19c>)
  40307e:	4798      	blx	r3
  403080:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403082:	683b      	ldr	r3, [r7, #0]
  403084:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  403088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40308c:	d067      	beq.n	40315e <pio_configure_pin+0xee>
  40308e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403092:	d809      	bhi.n	4030a8 <pio_configure_pin+0x38>
  403094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403098:	d02b      	beq.n	4030f2 <pio_configure_pin+0x82>
  40309a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40309e:	d043      	beq.n	403128 <pio_configure_pin+0xb8>
  4030a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4030a4:	d00a      	beq.n	4030bc <pio_configure_pin+0x4c>
  4030a6:	e0a9      	b.n	4031fc <pio_configure_pin+0x18c>
  4030a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4030ac:	d07e      	beq.n	4031ac <pio_configure_pin+0x13c>
  4030ae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4030b2:	d07b      	beq.n	4031ac <pio_configure_pin+0x13c>
  4030b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4030b8:	d06c      	beq.n	403194 <pio_configure_pin+0x124>
  4030ba:	e09f      	b.n	4031fc <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4030bc:	687b      	ldr	r3, [r7, #4]
  4030be:	f003 031f 	and.w	r3, r3, #31
  4030c2:	2201      	movs	r2, #1
  4030c4:	fa02 f303 	lsl.w	r3, r2, r3
  4030c8:	461a      	mov	r2, r3
  4030ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4030ce:	68f8      	ldr	r0, [r7, #12]
  4030d0:	4b4f      	ldr	r3, [pc, #316]	; (403210 <pio_configure_pin+0x1a0>)
  4030d2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4030d4:	687b      	ldr	r3, [r7, #4]
  4030d6:	f003 031f 	and.w	r3, r3, #31
  4030da:	2201      	movs	r2, #1
  4030dc:	fa02 f303 	lsl.w	r3, r2, r3
  4030e0:	4619      	mov	r1, r3
  4030e2:	683b      	ldr	r3, [r7, #0]
  4030e4:	f003 0301 	and.w	r3, r3, #1
  4030e8:	461a      	mov	r2, r3
  4030ea:	68f8      	ldr	r0, [r7, #12]
  4030ec:	4b49      	ldr	r3, [pc, #292]	; (403214 <pio_configure_pin+0x1a4>)
  4030ee:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4030f0:	e086      	b.n	403200 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4030f2:	687b      	ldr	r3, [r7, #4]
  4030f4:	f003 031f 	and.w	r3, r3, #31
  4030f8:	2201      	movs	r2, #1
  4030fa:	fa02 f303 	lsl.w	r3, r2, r3
  4030fe:	461a      	mov	r2, r3
  403100:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403104:	68f8      	ldr	r0, [r7, #12]
  403106:	4b42      	ldr	r3, [pc, #264]	; (403210 <pio_configure_pin+0x1a0>)
  403108:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40310a:	687b      	ldr	r3, [r7, #4]
  40310c:	f003 031f 	and.w	r3, r3, #31
  403110:	2201      	movs	r2, #1
  403112:	fa02 f303 	lsl.w	r3, r2, r3
  403116:	4619      	mov	r1, r3
  403118:	683b      	ldr	r3, [r7, #0]
  40311a:	f003 0301 	and.w	r3, r3, #1
  40311e:	461a      	mov	r2, r3
  403120:	68f8      	ldr	r0, [r7, #12]
  403122:	4b3c      	ldr	r3, [pc, #240]	; (403214 <pio_configure_pin+0x1a4>)
  403124:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  403126:	e06b      	b.n	403200 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403128:	687b      	ldr	r3, [r7, #4]
  40312a:	f003 031f 	and.w	r3, r3, #31
  40312e:	2201      	movs	r2, #1
  403130:	fa02 f303 	lsl.w	r3, r2, r3
  403134:	461a      	mov	r2, r3
  403136:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40313a:	68f8      	ldr	r0, [r7, #12]
  40313c:	4b34      	ldr	r3, [pc, #208]	; (403210 <pio_configure_pin+0x1a0>)
  40313e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403140:	687b      	ldr	r3, [r7, #4]
  403142:	f003 031f 	and.w	r3, r3, #31
  403146:	2201      	movs	r2, #1
  403148:	fa02 f303 	lsl.w	r3, r2, r3
  40314c:	4619      	mov	r1, r3
  40314e:	683b      	ldr	r3, [r7, #0]
  403150:	f003 0301 	and.w	r3, r3, #1
  403154:	461a      	mov	r2, r3
  403156:	68f8      	ldr	r0, [r7, #12]
  403158:	4b2e      	ldr	r3, [pc, #184]	; (403214 <pio_configure_pin+0x1a4>)
  40315a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40315c:	e050      	b.n	403200 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40315e:	687b      	ldr	r3, [r7, #4]
  403160:	f003 031f 	and.w	r3, r3, #31
  403164:	2201      	movs	r2, #1
  403166:	fa02 f303 	lsl.w	r3, r2, r3
  40316a:	461a      	mov	r2, r3
  40316c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403170:	68f8      	ldr	r0, [r7, #12]
  403172:	4b27      	ldr	r3, [pc, #156]	; (403210 <pio_configure_pin+0x1a0>)
  403174:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403176:	687b      	ldr	r3, [r7, #4]
  403178:	f003 031f 	and.w	r3, r3, #31
  40317c:	2201      	movs	r2, #1
  40317e:	fa02 f303 	lsl.w	r3, r2, r3
  403182:	4619      	mov	r1, r3
  403184:	683b      	ldr	r3, [r7, #0]
  403186:	f003 0301 	and.w	r3, r3, #1
  40318a:	461a      	mov	r2, r3
  40318c:	68f8      	ldr	r0, [r7, #12]
  40318e:	4b21      	ldr	r3, [pc, #132]	; (403214 <pio_configure_pin+0x1a4>)
  403190:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  403192:	e035      	b.n	403200 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  403194:	687b      	ldr	r3, [r7, #4]
  403196:	f003 031f 	and.w	r3, r3, #31
  40319a:	2201      	movs	r2, #1
  40319c:	fa02 f303 	lsl.w	r3, r2, r3
  4031a0:	683a      	ldr	r2, [r7, #0]
  4031a2:	4619      	mov	r1, r3
  4031a4:	68f8      	ldr	r0, [r7, #12]
  4031a6:	4b1c      	ldr	r3, [pc, #112]	; (403218 <pio_configure_pin+0x1a8>)
  4031a8:	4798      	blx	r3
		break;
  4031aa:	e029      	b.n	403200 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4031ac:	687b      	ldr	r3, [r7, #4]
  4031ae:	f003 031f 	and.w	r3, r3, #31
  4031b2:	2201      	movs	r2, #1
  4031b4:	fa02 f303 	lsl.w	r3, r2, r3
  4031b8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4031ba:	683b      	ldr	r3, [r7, #0]
  4031bc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4031c0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4031c4:	bf0c      	ite	eq
  4031c6:	2301      	moveq	r3, #1
  4031c8:	2300      	movne	r3, #0
  4031ca:	b2db      	uxtb	r3, r3
  4031cc:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4031ce:	683b      	ldr	r3, [r7, #0]
  4031d0:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4031d4:	2b00      	cmp	r3, #0
  4031d6:	bf14      	ite	ne
  4031d8:	2301      	movne	r3, #1
  4031da:	2300      	moveq	r3, #0
  4031dc:	b2db      	uxtb	r3, r3
  4031de:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4031e0:	683b      	ldr	r3, [r7, #0]
  4031e2:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4031e6:	2b00      	cmp	r3, #0
  4031e8:	bf14      	ite	ne
  4031ea:	2301      	movne	r3, #1
  4031ec:	2300      	moveq	r3, #0
  4031ee:	b2db      	uxtb	r3, r3
  4031f0:	9300      	str	r3, [sp, #0]
  4031f2:	4603      	mov	r3, r0
  4031f4:	68f8      	ldr	r0, [r7, #12]
  4031f6:	4c09      	ldr	r4, [pc, #36]	; (40321c <pio_configure_pin+0x1ac>)
  4031f8:	47a0      	blx	r4
		break;
  4031fa:	e001      	b.n	403200 <pio_configure_pin+0x190>

	default:
		return 0;
  4031fc:	2300      	movs	r3, #0
  4031fe:	e000      	b.n	403202 <pio_configure_pin+0x192>
	}

	return 1;
  403200:	2301      	movs	r3, #1
}
  403202:	4618      	mov	r0, r3
  403204:	3714      	adds	r7, #20
  403206:	46bd      	mov	sp, r7
  403208:	bd90      	pop	{r4, r7, pc}
  40320a:	bf00      	nop
  40320c:	00403221 	.word	0x00403221
  403210:	00402db1 	.word	0x00402db1
  403214:	00402d51 	.word	0x00402d51
  403218:	00402ec1 	.word	0x00402ec1
  40321c:	00402f41 	.word	0x00402f41

00403220 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  403220:	b480      	push	{r7}
  403222:	b085      	sub	sp, #20
  403224:	af00      	add	r7, sp, #0
  403226:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403228:	687b      	ldr	r3, [r7, #4]
  40322a:	095b      	lsrs	r3, r3, #5
  40322c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403230:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403234:	025b      	lsls	r3, r3, #9
  403236:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  403238:	68fb      	ldr	r3, [r7, #12]
}
  40323a:	4618      	mov	r0, r3
  40323c:	3714      	adds	r7, #20
  40323e:	46bd      	mov	sp, r7
  403240:	bc80      	pop	{r7}
  403242:	4770      	bx	lr

00403244 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  403244:	b480      	push	{r7}
  403246:	b083      	sub	sp, #12
  403248:	af00      	add	r7, sp, #0
  40324a:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  40324c:	687b      	ldr	r3, [r7, #4]
  40324e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  403252:	f043 0201 	orr.w	r2, r3, #1
  403256:	687b      	ldr	r3, [r7, #4]
  403258:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  40325c:	4b03      	ldr	r3, [pc, #12]	; (40326c <pio_capture_enable+0x28>)
  40325e:	2201      	movs	r2, #1
  403260:	601a      	str	r2, [r3, #0]
}
  403262:	bf00      	nop
  403264:	370c      	adds	r7, #12
  403266:	46bd      	mov	sp, r7
  403268:	bc80      	pop	{r7}
  40326a:	4770      	bx	lr
  40326c:	2000d7cc 	.word	0x2000d7cc

00403270 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  403270:	b480      	push	{r7}
  403272:	b083      	sub	sp, #12
  403274:	af00      	add	r7, sp, #0
  403276:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  403278:	687b      	ldr	r3, [r7, #4]
  40327a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40327e:	f023 0201 	bic.w	r2, r3, #1
  403282:	687b      	ldr	r3, [r7, #4]
  403284:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  403288:	4b03      	ldr	r3, [pc, #12]	; (403298 <pio_capture_disable+0x28>)
  40328a:	2200      	movs	r2, #0
  40328c:	601a      	str	r2, [r3, #0]
}
  40328e:	bf00      	nop
  403290:	370c      	adds	r7, #12
  403292:	46bd      	mov	sp, r7
  403294:	bc80      	pop	{r7}
  403296:	4770      	bx	lr
  403298:	2000d7cc 	.word	0x2000d7cc

0040329c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40329c:	b480      	push	{r7}
  40329e:	b085      	sub	sp, #20
  4032a0:	af00      	add	r7, sp, #0
  4032a2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4032a4:	491c      	ldr	r1, [pc, #112]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  4032a6:	4b1c      	ldr	r3, [pc, #112]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  4032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4032ae:	687b      	ldr	r3, [r7, #4]
  4032b0:	4313      	orrs	r3, r2
  4032b2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4032b8:	60fb      	str	r3, [r7, #12]
  4032ba:	e007      	b.n	4032cc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4032bc:	68fb      	ldr	r3, [r7, #12]
  4032be:	2b00      	cmp	r3, #0
  4032c0:	d101      	bne.n	4032c6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4032c2:	2301      	movs	r3, #1
  4032c4:	e023      	b.n	40330e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4032c6:	68fb      	ldr	r3, [r7, #12]
  4032c8:	3b01      	subs	r3, #1
  4032ca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032cc:	4b12      	ldr	r3, [pc, #72]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  4032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4032d0:	f003 0308 	and.w	r3, r3, #8
  4032d4:	2b00      	cmp	r3, #0
  4032d6:	d0f1      	beq.n	4032bc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4032d8:	4a0f      	ldr	r2, [pc, #60]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  4032da:	4b0f      	ldr	r3, [pc, #60]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  4032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032de:	f023 0303 	bic.w	r3, r3, #3
  4032e2:	f043 0302 	orr.w	r3, r3, #2
  4032e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4032ec:	60fb      	str	r3, [r7, #12]
  4032ee:	e007      	b.n	403300 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4032f0:	68fb      	ldr	r3, [r7, #12]
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d101      	bne.n	4032fa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4032f6:	2301      	movs	r3, #1
  4032f8:	e009      	b.n	40330e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4032fa:	68fb      	ldr	r3, [r7, #12]
  4032fc:	3b01      	subs	r3, #1
  4032fe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403300:	4b05      	ldr	r3, [pc, #20]	; (403318 <pmc_switch_mck_to_pllack+0x7c>)
  403302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403304:	f003 0308 	and.w	r3, r3, #8
  403308:	2b00      	cmp	r3, #0
  40330a:	d0f1      	beq.n	4032f0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40330c:	2300      	movs	r3, #0
}
  40330e:	4618      	mov	r0, r3
  403310:	3714      	adds	r7, #20
  403312:	46bd      	mov	sp, r7
  403314:	bc80      	pop	{r7}
  403316:	4770      	bx	lr
  403318:	400e0400 	.word	0x400e0400

0040331c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40331c:	b480      	push	{r7}
  40331e:	b083      	sub	sp, #12
  403320:	af00      	add	r7, sp, #0
  403322:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  403324:	687b      	ldr	r3, [r7, #4]
  403326:	2b01      	cmp	r3, #1
  403328:	d107      	bne.n	40333a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40332a:	4a08      	ldr	r2, [pc, #32]	; (40334c <pmc_switch_sclk_to_32kxtal+0x30>)
  40332c:	4b07      	ldr	r3, [pc, #28]	; (40334c <pmc_switch_sclk_to_32kxtal+0x30>)
  40332e:	689b      	ldr	r3, [r3, #8]
  403330:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  403334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403338:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40333a:	4b04      	ldr	r3, [pc, #16]	; (40334c <pmc_switch_sclk_to_32kxtal+0x30>)
  40333c:	4a04      	ldr	r2, [pc, #16]	; (403350 <pmc_switch_sclk_to_32kxtal+0x34>)
  40333e:	601a      	str	r2, [r3, #0]
}
  403340:	bf00      	nop
  403342:	370c      	adds	r7, #12
  403344:	46bd      	mov	sp, r7
  403346:	bc80      	pop	{r7}
  403348:	4770      	bx	lr
  40334a:	bf00      	nop
  40334c:	400e1410 	.word	0x400e1410
  403350:	a5000008 	.word	0xa5000008

00403354 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  403354:	b480      	push	{r7}
  403356:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  403358:	4b09      	ldr	r3, [pc, #36]	; (403380 <pmc_osc_is_ready_32kxtal+0x2c>)
  40335a:	695b      	ldr	r3, [r3, #20]
  40335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  403360:	2b00      	cmp	r3, #0
  403362:	d007      	beq.n	403374 <pmc_osc_is_ready_32kxtal+0x20>
  403364:	4b07      	ldr	r3, [pc, #28]	; (403384 <pmc_osc_is_ready_32kxtal+0x30>)
  403366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403368:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40336c:	2b00      	cmp	r3, #0
  40336e:	d001      	beq.n	403374 <pmc_osc_is_ready_32kxtal+0x20>
  403370:	2301      	movs	r3, #1
  403372:	e000      	b.n	403376 <pmc_osc_is_ready_32kxtal+0x22>
  403374:	2300      	movs	r3, #0
}
  403376:	4618      	mov	r0, r3
  403378:	46bd      	mov	sp, r7
  40337a:	bc80      	pop	{r7}
  40337c:	4770      	bx	lr
  40337e:	bf00      	nop
  403380:	400e1410 	.word	0x400e1410
  403384:	400e0400 	.word	0x400e0400

00403388 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  403388:	b480      	push	{r7}
  40338a:	b083      	sub	sp, #12
  40338c:	af00      	add	r7, sp, #0
  40338e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  403390:	4a18      	ldr	r2, [pc, #96]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  403392:	4b18      	ldr	r3, [pc, #96]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  403394:	6a1b      	ldr	r3, [r3, #32]
  403396:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40339a:	f043 0308 	orr.w	r3, r3, #8
  40339e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4033a0:	bf00      	nop
  4033a2:	4b14      	ldr	r3, [pc, #80]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4033aa:	2b00      	cmp	r3, #0
  4033ac:	d0f9      	beq.n	4033a2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4033ae:	4911      	ldr	r1, [pc, #68]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033b0:	4b10      	ldr	r3, [pc, #64]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033b2:	6a1b      	ldr	r3, [r3, #32]
  4033b4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4033b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4033bc:	687a      	ldr	r2, [r7, #4]
  4033be:	4313      	orrs	r3, r2
  4033c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4033c4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4033c6:	bf00      	nop
  4033c8:	4b0a      	ldr	r3, [pc, #40]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4033d0:	2b00      	cmp	r3, #0
  4033d2:	d0f9      	beq.n	4033c8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4033d4:	4a07      	ldr	r2, [pc, #28]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033d6:	4b07      	ldr	r3, [pc, #28]	; (4033f4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4033d8:	6a1b      	ldr	r3, [r3, #32]
  4033da:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4033e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4033e6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4033e8:	bf00      	nop
  4033ea:	370c      	adds	r7, #12
  4033ec:	46bd      	mov	sp, r7
  4033ee:	bc80      	pop	{r7}
  4033f0:	4770      	bx	lr
  4033f2:	bf00      	nop
  4033f4:	400e0400 	.word	0x400e0400

004033f8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4033f8:	b480      	push	{r7}
  4033fa:	b083      	sub	sp, #12
  4033fc:	af00      	add	r7, sp, #0
  4033fe:	6078      	str	r0, [r7, #4]
  403400:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403402:	687b      	ldr	r3, [r7, #4]
  403404:	2b00      	cmp	r3, #0
  403406:	d008      	beq.n	40341a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403408:	4916      	ldr	r1, [pc, #88]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40340a:	4b16      	ldr	r3, [pc, #88]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40340c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40340e:	4a16      	ldr	r2, [pc, #88]	; (403468 <pmc_switch_mainck_to_xtal+0x70>)
  403410:	401a      	ands	r2, r3
  403412:	4b16      	ldr	r3, [pc, #88]	; (40346c <pmc_switch_mainck_to_xtal+0x74>)
  403414:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403416:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  403418:	e01e      	b.n	403458 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40341a:	4912      	ldr	r1, [pc, #72]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40341c:	4b11      	ldr	r3, [pc, #68]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40341e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403420:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403424:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403428:	683a      	ldr	r2, [r7, #0]
  40342a:	0212      	lsls	r2, r2, #8
  40342c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40342e:	4313      	orrs	r3, r2
  403430:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403434:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403438:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40343a:	bf00      	nop
  40343c:	4b09      	ldr	r3, [pc, #36]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403440:	f003 0301 	and.w	r3, r3, #1
  403444:	2b00      	cmp	r3, #0
  403446:	d0f9      	beq.n	40343c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403448:	4a06      	ldr	r2, [pc, #24]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40344a:	4b06      	ldr	r3, [pc, #24]	; (403464 <pmc_switch_mainck_to_xtal+0x6c>)
  40344c:	6a1b      	ldr	r3, [r3, #32]
  40344e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  403452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403456:	6213      	str	r3, [r2, #32]
}
  403458:	bf00      	nop
  40345a:	370c      	adds	r7, #12
  40345c:	46bd      	mov	sp, r7
  40345e:	bc80      	pop	{r7}
  403460:	4770      	bx	lr
  403462:	bf00      	nop
  403464:	400e0400 	.word	0x400e0400
  403468:	fec8fffc 	.word	0xfec8fffc
  40346c:	01370002 	.word	0x01370002

00403470 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  403470:	b480      	push	{r7}
  403472:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403474:	4b03      	ldr	r3, [pc, #12]	; (403484 <pmc_osc_is_ready_mainck+0x14>)
  403476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40347c:	4618      	mov	r0, r3
  40347e:	46bd      	mov	sp, r7
  403480:	bc80      	pop	{r7}
  403482:	4770      	bx	lr
  403484:	400e0400 	.word	0x400e0400

00403488 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  403488:	b480      	push	{r7}
  40348a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40348c:	4b03      	ldr	r3, [pc, #12]	; (40349c <pmc_disable_pllack+0x14>)
  40348e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403492:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  403494:	bf00      	nop
  403496:	46bd      	mov	sp, r7
  403498:	bc80      	pop	{r7}
  40349a:	4770      	bx	lr
  40349c:	400e0400 	.word	0x400e0400

004034a0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4034a0:	b480      	push	{r7}
  4034a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4034a4:	4b03      	ldr	r3, [pc, #12]	; (4034b4 <pmc_is_locked_pllack+0x14>)
  4034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4034a8:	f003 0302 	and.w	r3, r3, #2
}
  4034ac:	4618      	mov	r0, r3
  4034ae:	46bd      	mov	sp, r7
  4034b0:	bc80      	pop	{r7}
  4034b2:	4770      	bx	lr
  4034b4:	400e0400 	.word	0x400e0400

004034b8 <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  4034b8:	b580      	push	{r7, lr}
  4034ba:	b084      	sub	sp, #16
  4034bc:	af00      	add	r7, sp, #0
  4034be:	60f8      	str	r0, [r7, #12]
  4034c0:	60b9      	str	r1, [r7, #8]
  4034c2:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  4034c4:	4b0d      	ldr	r3, [pc, #52]	; (4034fc <pmc_enable_pllbck+0x44>)
  4034c6:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  4034c8:	480d      	ldr	r0, [pc, #52]	; (403500 <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  4034ca:	687b      	ldr	r3, [r7, #4]
  4034cc:	b2da      	uxtb	r2, r3
  4034ce:	68bb      	ldr	r3, [r7, #8]
  4034d0:	021b      	lsls	r3, r3, #8
  4034d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  4034d6:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  4034d8:	68fb      	ldr	r3, [r7, #12]
  4034da:	0419      	lsls	r1, r3, #16
  4034dc:	4b09      	ldr	r3, [pc, #36]	; (403504 <pmc_enable_pllbck+0x4c>)
  4034de:	400b      	ands	r3, r1
  4034e0:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  4034e2:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  4034e4:	bf00      	nop
  4034e6:	4b06      	ldr	r3, [pc, #24]	; (403500 <pmc_enable_pllbck+0x48>)
  4034e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4034ea:	f003 0304 	and.w	r3, r3, #4
  4034ee:	2b00      	cmp	r3, #0
  4034f0:	d0f9      	beq.n	4034e6 <pmc_enable_pllbck+0x2e>
}
  4034f2:	bf00      	nop
  4034f4:	3710      	adds	r7, #16
  4034f6:	46bd      	mov	sp, r7
  4034f8:	bd80      	pop	{r7, pc}
  4034fa:	bf00      	nop
  4034fc:	00403509 	.word	0x00403509
  403500:	400e0400 	.word	0x400e0400
  403504:	07ff0000 	.word	0x07ff0000

00403508 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  403508:	b480      	push	{r7}
  40350a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40350c:	4b03      	ldr	r3, [pc, #12]	; (40351c <pmc_disable_pllbck+0x14>)
  40350e:	2200      	movs	r2, #0
  403510:	62da      	str	r2, [r3, #44]	; 0x2c
}
  403512:	bf00      	nop
  403514:	46bd      	mov	sp, r7
  403516:	bc80      	pop	{r7}
  403518:	4770      	bx	lr
  40351a:	bf00      	nop
  40351c:	400e0400 	.word	0x400e0400

00403520 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  403520:	b480      	push	{r7}
  403522:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  403524:	4b03      	ldr	r3, [pc, #12]	; (403534 <pmc_is_locked_pllbck+0x14>)
  403526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403528:	f003 0304 	and.w	r3, r3, #4
}
  40352c:	4618      	mov	r0, r3
  40352e:	46bd      	mov	sp, r7
  403530:	bc80      	pop	{r7}
  403532:	4770      	bx	lr
  403534:	400e0400 	.word	0x400e0400

00403538 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  403538:	b480      	push	{r7}
  40353a:	b083      	sub	sp, #12
  40353c:	af00      	add	r7, sp, #0
  40353e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  403540:	687b      	ldr	r3, [r7, #4]
  403542:	2b22      	cmp	r3, #34	; 0x22
  403544:	d901      	bls.n	40354a <pmc_enable_periph_clk+0x12>
		return 1;
  403546:	2301      	movs	r3, #1
  403548:	e02f      	b.n	4035aa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40354a:	687b      	ldr	r3, [r7, #4]
  40354c:	2b1f      	cmp	r3, #31
  40354e:	d813      	bhi.n	403578 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403550:	4b18      	ldr	r3, [pc, #96]	; (4035b4 <pmc_enable_periph_clk+0x7c>)
  403552:	699a      	ldr	r2, [r3, #24]
  403554:	2101      	movs	r1, #1
  403556:	687b      	ldr	r3, [r7, #4]
  403558:	fa01 f303 	lsl.w	r3, r1, r3
  40355c:	401a      	ands	r2, r3
  40355e:	2101      	movs	r1, #1
  403560:	687b      	ldr	r3, [r7, #4]
  403562:	fa01 f303 	lsl.w	r3, r1, r3
  403566:	429a      	cmp	r2, r3
  403568:	d01e      	beq.n	4035a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40356a:	4a12      	ldr	r2, [pc, #72]	; (4035b4 <pmc_enable_periph_clk+0x7c>)
  40356c:	2101      	movs	r1, #1
  40356e:	687b      	ldr	r3, [r7, #4]
  403570:	fa01 f303 	lsl.w	r3, r1, r3
  403574:	6113      	str	r3, [r2, #16]
  403576:	e017      	b.n	4035a8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403578:	687b      	ldr	r3, [r7, #4]
  40357a:	3b20      	subs	r3, #32
  40357c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40357e:	4b0d      	ldr	r3, [pc, #52]	; (4035b4 <pmc_enable_periph_clk+0x7c>)
  403580:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403584:	2101      	movs	r1, #1
  403586:	687b      	ldr	r3, [r7, #4]
  403588:	fa01 f303 	lsl.w	r3, r1, r3
  40358c:	401a      	ands	r2, r3
  40358e:	2101      	movs	r1, #1
  403590:	687b      	ldr	r3, [r7, #4]
  403592:	fa01 f303 	lsl.w	r3, r1, r3
  403596:	429a      	cmp	r2, r3
  403598:	d006      	beq.n	4035a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40359a:	4a06      	ldr	r2, [pc, #24]	; (4035b4 <pmc_enable_periph_clk+0x7c>)
  40359c:	2101      	movs	r1, #1
  40359e:	687b      	ldr	r3, [r7, #4]
  4035a0:	fa01 f303 	lsl.w	r3, r1, r3
  4035a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4035a8:	2300      	movs	r3, #0
}
  4035aa:	4618      	mov	r0, r3
  4035ac:	370c      	adds	r7, #12
  4035ae:	46bd      	mov	sp, r7
  4035b0:	bc80      	pop	{r7}
  4035b2:	4770      	bx	lr
  4035b4:	400e0400 	.word	0x400e0400

004035b8 <sysclk_enable_peripheral_clock>:
{
  4035b8:	b580      	push	{r7, lr}
  4035ba:	b082      	sub	sp, #8
  4035bc:	af00      	add	r7, sp, #0
  4035be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4035c0:	6878      	ldr	r0, [r7, #4]
  4035c2:	4b03      	ldr	r3, [pc, #12]	; (4035d0 <sysclk_enable_peripheral_clock+0x18>)
  4035c4:	4798      	blx	r3
}
  4035c6:	bf00      	nop
  4035c8:	3708      	adds	r7, #8
  4035ca:	46bd      	mov	sp, r7
  4035cc:	bd80      	pop	{r7, pc}
  4035ce:	bf00      	nop
  4035d0:	00403539 	.word	0x00403539

004035d4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4035d4:	b580      	push	{r7, lr}
  4035d6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4035d8:	200b      	movs	r0, #11
  4035da:	4b03      	ldr	r3, [pc, #12]	; (4035e8 <ioport_init+0x14>)
  4035dc:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4035de:	200c      	movs	r0, #12
  4035e0:	4b01      	ldr	r3, [pc, #4]	; (4035e8 <ioport_init+0x14>)
  4035e2:	4798      	blx	r3
	arch_ioport_init();
}
  4035e4:	bf00      	nop
  4035e6:	bd80      	pop	{r7, pc}
  4035e8:	004035b9 	.word	0x004035b9

004035ec <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4035ec:	b480      	push	{r7}
  4035ee:	b08d      	sub	sp, #52	; 0x34
  4035f0:	af00      	add	r7, sp, #0
  4035f2:	6078      	str	r0, [r7, #4]
  4035f4:	6039      	str	r1, [r7, #0]
  4035f6:	687b      	ldr	r3, [r7, #4]
  4035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4035fa:	683b      	ldr	r3, [r7, #0]
  4035fc:	62bb      	str	r3, [r7, #40]	; 0x28
  4035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403600:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  403602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403604:	095a      	lsrs	r2, r3, #5
  403606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403608:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40360a:	6a3b      	ldr	r3, [r7, #32]
  40360c:	f003 031f 	and.w	r3, r3, #31
  403610:	2101      	movs	r1, #1
  403612:	fa01 f303 	lsl.w	r3, r1, r3
  403616:	61fa      	str	r2, [r7, #28]
  403618:	61bb      	str	r3, [r7, #24]
  40361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40361c:	617b      	str	r3, [r7, #20]
  40361e:	69fb      	ldr	r3, [r7, #28]
  403620:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403622:	693b      	ldr	r3, [r7, #16]
  403624:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403628:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40362c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40362e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  403630:	697b      	ldr	r3, [r7, #20]
  403632:	f003 0308 	and.w	r3, r3, #8
  403636:	2b00      	cmp	r3, #0
  403638:	d003      	beq.n	403642 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40363a:	68fb      	ldr	r3, [r7, #12]
  40363c:	69ba      	ldr	r2, [r7, #24]
  40363e:	665a      	str	r2, [r3, #100]	; 0x64
  403640:	e002      	b.n	403648 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  403642:	68fb      	ldr	r3, [r7, #12]
  403644:	69ba      	ldr	r2, [r7, #24]
  403646:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  403648:	697b      	ldr	r3, [r7, #20]
  40364a:	f003 0310 	and.w	r3, r3, #16
  40364e:	2b00      	cmp	r3, #0
  403650:	d004      	beq.n	40365c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  403652:	68fb      	ldr	r3, [r7, #12]
  403654:	69ba      	ldr	r2, [r7, #24]
  403656:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40365a:	e003      	b.n	403664 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  40365c:	68fb      	ldr	r3, [r7, #12]
  40365e:	69ba      	ldr	r2, [r7, #24]
  403660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  403664:	697b      	ldr	r3, [r7, #20]
  403666:	f003 0320 	and.w	r3, r3, #32
  40366a:	2b00      	cmp	r3, #0
  40366c:	d003      	beq.n	403676 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40366e:	68fb      	ldr	r3, [r7, #12]
  403670:	69ba      	ldr	r2, [r7, #24]
  403672:	651a      	str	r2, [r3, #80]	; 0x50
  403674:	e002      	b.n	40367c <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  403676:	68fb      	ldr	r3, [r7, #12]
  403678:	69ba      	ldr	r2, [r7, #24]
  40367a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40367c:	697b      	ldr	r3, [r7, #20]
  40367e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403682:	2b00      	cmp	r3, #0
  403684:	d003      	beq.n	40368e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  403686:	68fb      	ldr	r3, [r7, #12]
  403688:	69ba      	ldr	r2, [r7, #24]
  40368a:	621a      	str	r2, [r3, #32]
  40368c:	e002      	b.n	403694 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40368e:	68fb      	ldr	r3, [r7, #12]
  403690:	69ba      	ldr	r2, [r7, #24]
  403692:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  403694:	697b      	ldr	r3, [r7, #20]
  403696:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40369a:	2b00      	cmp	r3, #0
  40369c:	d004      	beq.n	4036a8 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40369e:	68fb      	ldr	r3, [r7, #12]
  4036a0:	69ba      	ldr	r2, [r7, #24]
  4036a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4036a6:	e003      	b.n	4036b0 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4036a8:	68fb      	ldr	r3, [r7, #12]
  4036aa:	69ba      	ldr	r2, [r7, #24]
  4036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4036b0:	697b      	ldr	r3, [r7, #20]
  4036b2:	f003 0301 	and.w	r3, r3, #1
  4036b6:	2b00      	cmp	r3, #0
  4036b8:	d006      	beq.n	4036c8 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4036ba:	68fb      	ldr	r3, [r7, #12]
  4036bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4036be:	69bb      	ldr	r3, [r7, #24]
  4036c0:	431a      	orrs	r2, r3
  4036c2:	68fb      	ldr	r3, [r7, #12]
  4036c4:	671a      	str	r2, [r3, #112]	; 0x70
  4036c6:	e006      	b.n	4036d6 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4036c8:	68fb      	ldr	r3, [r7, #12]
  4036ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4036cc:	69bb      	ldr	r3, [r7, #24]
  4036ce:	43db      	mvns	r3, r3
  4036d0:	401a      	ands	r2, r3
  4036d2:	68fb      	ldr	r3, [r7, #12]
  4036d4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4036d6:	697b      	ldr	r3, [r7, #20]
  4036d8:	f003 0302 	and.w	r3, r3, #2
  4036dc:	2b00      	cmp	r3, #0
  4036de:	d006      	beq.n	4036ee <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4036e0:	68fb      	ldr	r3, [r7, #12]
  4036e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4036e4:	69bb      	ldr	r3, [r7, #24]
  4036e6:	431a      	orrs	r2, r3
  4036e8:	68fb      	ldr	r3, [r7, #12]
  4036ea:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4036ec:	e006      	b.n	4036fc <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4036ee:	68fb      	ldr	r3, [r7, #12]
  4036f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4036f2:	69bb      	ldr	r3, [r7, #24]
  4036f4:	43db      	mvns	r3, r3
  4036f6:	401a      	ands	r2, r3
  4036f8:	68fb      	ldr	r3, [r7, #12]
  4036fa:	675a      	str	r2, [r3, #116]	; 0x74
  4036fc:	bf00      	nop
  4036fe:	3734      	adds	r7, #52	; 0x34
  403700:	46bd      	mov	sp, r7
  403702:	bc80      	pop	{r7}
  403704:	4770      	bx	lr

00403706 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403706:	b480      	push	{r7}
  403708:	b08d      	sub	sp, #52	; 0x34
  40370a:	af00      	add	r7, sp, #0
  40370c:	6078      	str	r0, [r7, #4]
  40370e:	460b      	mov	r3, r1
  403710:	70fb      	strb	r3, [r7, #3]
  403712:	687b      	ldr	r3, [r7, #4]
  403714:	62fb      	str	r3, [r7, #44]	; 0x2c
  403716:	78fb      	ldrb	r3, [r7, #3]
  403718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40371e:	627b      	str	r3, [r7, #36]	; 0x24
  403720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403722:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  403724:	6a3b      	ldr	r3, [r7, #32]
  403726:	095b      	lsrs	r3, r3, #5
  403728:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40372a:	69fb      	ldr	r3, [r7, #28]
  40372c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403730:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403734:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403736:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40373c:	2b01      	cmp	r3, #1
  40373e:	d109      	bne.n	403754 <ioport_set_pin_dir+0x4e>
  403740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403742:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  403744:	697b      	ldr	r3, [r7, #20]
  403746:	f003 031f 	and.w	r3, r3, #31
  40374a:	2201      	movs	r2, #1
  40374c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40374e:	69bb      	ldr	r3, [r7, #24]
  403750:	611a      	str	r2, [r3, #16]
  403752:	e00c      	b.n	40376e <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  403754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403758:	2b00      	cmp	r3, #0
  40375a:	d108      	bne.n	40376e <ioport_set_pin_dir+0x68>
  40375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40375e:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  403760:	693b      	ldr	r3, [r7, #16]
  403762:	f003 031f 	and.w	r3, r3, #31
  403766:	2201      	movs	r2, #1
  403768:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40376a:	69bb      	ldr	r3, [r7, #24]
  40376c:	615a      	str	r2, [r3, #20]
  40376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403770:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403772:	68fb      	ldr	r3, [r7, #12]
  403774:	f003 031f 	and.w	r3, r3, #31
  403778:	2201      	movs	r2, #1
  40377a:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40377c:	69bb      	ldr	r3, [r7, #24]
  40377e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  403782:	bf00      	nop
  403784:	3734      	adds	r7, #52	; 0x34
  403786:	46bd      	mov	sp, r7
  403788:	bc80      	pop	{r7}
  40378a:	4770      	bx	lr

0040378c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  40378c:	b480      	push	{r7}
  40378e:	b08b      	sub	sp, #44	; 0x2c
  403790:	af00      	add	r7, sp, #0
  403792:	6078      	str	r0, [r7, #4]
  403794:	460b      	mov	r3, r1
  403796:	70fb      	strb	r3, [r7, #3]
  403798:	687b      	ldr	r3, [r7, #4]
  40379a:	627b      	str	r3, [r7, #36]	; 0x24
  40379c:	78fb      	ldrb	r3, [r7, #3]
  40379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4037a4:	61fb      	str	r3, [r7, #28]
  4037a6:	69fb      	ldr	r3, [r7, #28]
  4037a8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4037aa:	69bb      	ldr	r3, [r7, #24]
  4037ac:	095b      	lsrs	r3, r3, #5
  4037ae:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4037b0:	697b      	ldr	r3, [r7, #20]
  4037b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4037b6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4037ba:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4037bc:	613b      	str	r3, [r7, #16]

	if (level) {
  4037be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4037c2:	2b00      	cmp	r3, #0
  4037c4:	d009      	beq.n	4037da <ioport_set_pin_level+0x4e>
  4037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4037c8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4037ca:	68fb      	ldr	r3, [r7, #12]
  4037cc:	f003 031f 	and.w	r3, r3, #31
  4037d0:	2201      	movs	r2, #1
  4037d2:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4037d4:	693b      	ldr	r3, [r7, #16]
  4037d6:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4037d8:	e008      	b.n	4037ec <ioport_set_pin_level+0x60>
  4037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4037dc:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4037de:	68bb      	ldr	r3, [r7, #8]
  4037e0:	f003 031f 	and.w	r3, r3, #31
  4037e4:	2201      	movs	r2, #1
  4037e6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4037e8:	693b      	ldr	r3, [r7, #16]
  4037ea:	635a      	str	r2, [r3, #52]	; 0x34
  4037ec:	bf00      	nop
  4037ee:	372c      	adds	r7, #44	; 0x2c
  4037f0:	46bd      	mov	sp, r7
  4037f2:	bc80      	pop	{r7}
  4037f4:	4770      	bx	lr
	...

004037f8 <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  4037f8:	b580      	push	{r7, lr}
  4037fa:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  4037fc:	484b      	ldr	r0, [pc, #300]	; (40392c <board_init+0x134>)
  4037fe:	4b4c      	ldr	r3, [pc, #304]	; (403930 <board_init+0x138>)
  403800:	4798      	blx	r3
	
	ioport_init();
  403802:	4b4c      	ldr	r3, [pc, #304]	; (403934 <board_init+0x13c>)
  403804:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  403806:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40380a:	2009      	movs	r0, #9
  40380c:	4b4a      	ldr	r3, [pc, #296]	; (403938 <board_init+0x140>)
  40380e:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  403810:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403814:	2009      	movs	r0, #9
  403816:	4b48      	ldr	r3, [pc, #288]	; (403938 <board_init+0x140>)
  403818:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  40381a:	2101      	movs	r1, #1
  40381c:	2009      	movs	r0, #9
  40381e:	4b47      	ldr	r3, [pc, #284]	; (40393c <board_init+0x144>)
  403820:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  403822:	2100      	movs	r1, #0
  403824:	2009      	movs	r0, #9
  403826:	4b46      	ldr	r3, [pc, #280]	; (403940 <board_init+0x148>)
  403828:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  40382a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40382e:	2007      	movs	r0, #7
  403830:	4b41      	ldr	r3, [pc, #260]	; (403938 <board_init+0x140>)
  403832:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  403834:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403838:	2007      	movs	r0, #7
  40383a:	4b3f      	ldr	r3, [pc, #252]	; (403938 <board_init+0x140>)
  40383c:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  40383e:	2101      	movs	r1, #1
  403840:	2007      	movs	r0, #7
  403842:	4b3e      	ldr	r3, [pc, #248]	; (40393c <board_init+0x144>)
  403844:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  403846:	2100      	movs	r1, #0
  403848:	2007      	movs	r0, #7
  40384a:	4b3d      	ldr	r3, [pc, #244]	; (403940 <board_init+0x148>)
  40384c:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  40384e:	493d      	ldr	r1, [pc, #244]	; (403944 <board_init+0x14c>)
  403850:	2021      	movs	r0, #33	; 0x21
  403852:	4b39      	ldr	r3, [pc, #228]	; (403938 <board_init+0x140>)
  403854:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  403856:	2100      	movs	r1, #0
  403858:	2021      	movs	r0, #33	; 0x21
  40385a:	4b38      	ldr	r3, [pc, #224]	; (40393c <board_init+0x144>)
  40385c:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  40385e:	2108      	movs	r1, #8
  403860:	2021      	movs	r0, #33	; 0x21
  403862:	4b39      	ldr	r3, [pc, #228]	; (403948 <board_init+0x150>)
  403864:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  403866:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40386a:	2005      	movs	r0, #5
  40386c:	4b32      	ldr	r3, [pc, #200]	; (403938 <board_init+0x140>)
  40386e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  403870:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403874:	2006      	movs	r0, #6
  403876:	4b30      	ldr	r3, [pc, #192]	; (403938 <board_init+0x140>)
  403878:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  40387a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40387e:	2008      	movs	r0, #8
  403880:	4b2d      	ldr	r3, [pc, #180]	; (403938 <board_init+0x140>)
  403882:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  403884:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403888:	2011      	movs	r0, #17
  40388a:	4b2b      	ldr	r3, [pc, #172]	; (403938 <board_init+0x140>)
  40388c:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40388e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403892:	2003      	movs	r0, #3
  403894:	4b28      	ldr	r3, [pc, #160]	; (403938 <board_init+0x140>)
  403896:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  403898:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40389c:	2004      	movs	r0, #4
  40389e:	4b26      	ldr	r3, [pc, #152]	; (403938 <board_init+0x140>)
  4038a0:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  4038a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4038a6:	200a      	movs	r0, #10
  4038a8:	4b23      	ldr	r3, [pc, #140]	; (403938 <board_init+0x140>)
  4038aa:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  4038ac:	2101      	movs	r1, #1
  4038ae:	200a      	movs	r0, #10
  4038b0:	4b22      	ldr	r3, [pc, #136]	; (40393c <board_init+0x144>)
  4038b2:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  4038b4:	2100      	movs	r1, #0
  4038b6:	200a      	movs	r0, #10
  4038b8:	4b21      	ldr	r3, [pc, #132]	; (403940 <board_init+0x148>)
  4038ba:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4038bc:	2171      	movs	r1, #113	; 0x71
  4038be:	2010      	movs	r0, #16
  4038c0:	4b1d      	ldr	r3, [pc, #116]	; (403938 <board_init+0x140>)
  4038c2:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  4038c4:	2171      	movs	r1, #113	; 0x71
  4038c6:	200f      	movs	r0, #15
  4038c8:	4b1b      	ldr	r3, [pc, #108]	; (403938 <board_init+0x140>)
  4038ca:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  4038cc:	491f      	ldr	r1, [pc, #124]	; (40394c <board_init+0x154>)
  4038ce:	2018      	movs	r0, #24
  4038d0:	4b19      	ldr	r3, [pc, #100]	; (403938 <board_init+0x140>)
  4038d2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  4038d4:	491d      	ldr	r1, [pc, #116]	; (40394c <board_init+0x154>)
  4038d6:	2019      	movs	r0, #25
  4038d8:	4b17      	ldr	r3, [pc, #92]	; (403938 <board_init+0x140>)
  4038da:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  4038dc:	491b      	ldr	r1, [pc, #108]	; (40394c <board_init+0x154>)
  4038de:	201a      	movs	r0, #26
  4038e0:	4b15      	ldr	r3, [pc, #84]	; (403938 <board_init+0x140>)
  4038e2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  4038e4:	4919      	ldr	r1, [pc, #100]	; (40394c <board_init+0x154>)
  4038e6:	201b      	movs	r0, #27
  4038e8:	4b13      	ldr	r3, [pc, #76]	; (403938 <board_init+0x140>)
  4038ea:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  4038ec:	4917      	ldr	r1, [pc, #92]	; (40394c <board_init+0x154>)
  4038ee:	201c      	movs	r0, #28
  4038f0:	4b11      	ldr	r3, [pc, #68]	; (403938 <board_init+0x140>)
  4038f2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  4038f4:	4915      	ldr	r1, [pc, #84]	; (40394c <board_init+0x154>)
  4038f6:	201d      	movs	r0, #29
  4038f8:	4b0f      	ldr	r3, [pc, #60]	; (403938 <board_init+0x140>)
  4038fa:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  4038fc:	4913      	ldr	r1, [pc, #76]	; (40394c <board_init+0x154>)
  4038fe:	201e      	movs	r0, #30
  403900:	4b0d      	ldr	r3, [pc, #52]	; (403938 <board_init+0x140>)
  403902:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  403904:	4911      	ldr	r1, [pc, #68]	; (40394c <board_init+0x154>)
  403906:	201f      	movs	r0, #31
  403908:	4b0b      	ldr	r3, [pc, #44]	; (403938 <board_init+0x140>)
  40390a:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  40390c:	2171      	movs	r1, #113	; 0x71
  40390e:	2012      	movs	r0, #18
  403910:	4b09      	ldr	r3, [pc, #36]	; (403938 <board_init+0x140>)
  403912:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  403914:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403918:	2013      	movs	r0, #19
  40391a:	4b07      	ldr	r3, [pc, #28]	; (403938 <board_init+0x140>)
  40391c:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  40391e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403922:	2014      	movs	r0, #20
  403924:	4b04      	ldr	r3, [pc, #16]	; (403938 <board_init+0x140>)
  403926:	4798      	blx	r3
}
  403928:	bf00      	nop
  40392a:	bd80      	pop	{r7, pc}
  40392c:	400e1450 	.word	0x400e1450
  403930:	0040054d 	.word	0x0040054d
  403934:	004035d5 	.word	0x004035d5
  403938:	00403071 	.word	0x00403071
  40393c:	00403707 	.word	0x00403707
  403940:	0040378d 	.word	0x0040378d
  403944:	28000079 	.word	0x28000079
  403948:	004035ed 	.word	0x004035ed
  40394c:	28000001 	.word	0x28000001

00403950 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403950:	b580      	push	{r7, lr}
  403952:	b084      	sub	sp, #16
  403954:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  403956:	4b27      	ldr	r3, [pc, #156]	; (4039f4 <Reset_Handler+0xa4>)
  403958:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40395a:	4b27      	ldr	r3, [pc, #156]	; (4039f8 <Reset_Handler+0xa8>)
  40395c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40395e:	68fa      	ldr	r2, [r7, #12]
  403960:	68bb      	ldr	r3, [r7, #8]
  403962:	429a      	cmp	r2, r3
  403964:	d90d      	bls.n	403982 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  403966:	e007      	b.n	403978 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  403968:	68bb      	ldr	r3, [r7, #8]
  40396a:	1d1a      	adds	r2, r3, #4
  40396c:	60ba      	str	r2, [r7, #8]
  40396e:	68fa      	ldr	r2, [r7, #12]
  403970:	1d11      	adds	r1, r2, #4
  403972:	60f9      	str	r1, [r7, #12]
  403974:	6812      	ldr	r2, [r2, #0]
  403976:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  403978:	68bb      	ldr	r3, [r7, #8]
  40397a:	4a20      	ldr	r2, [pc, #128]	; (4039fc <Reset_Handler+0xac>)
  40397c:	4293      	cmp	r3, r2
  40397e:	d3f3      	bcc.n	403968 <Reset_Handler+0x18>
  403980:	e020      	b.n	4039c4 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  403982:	68fa      	ldr	r2, [r7, #12]
  403984:	68bb      	ldr	r3, [r7, #8]
  403986:	429a      	cmp	r2, r3
  403988:	d21c      	bcs.n	4039c4 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40398a:	4a1c      	ldr	r2, [pc, #112]	; (4039fc <Reset_Handler+0xac>)
  40398c:	4b1a      	ldr	r3, [pc, #104]	; (4039f8 <Reset_Handler+0xa8>)
  40398e:	1ad3      	subs	r3, r2, r3
  403990:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403992:	68fa      	ldr	r2, [r7, #12]
  403994:	687b      	ldr	r3, [r7, #4]
  403996:	4413      	add	r3, r2
  403998:	3b04      	subs	r3, #4
  40399a:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40399c:	68ba      	ldr	r2, [r7, #8]
  40399e:	687b      	ldr	r3, [r7, #4]
  4039a0:	4413      	add	r3, r2
  4039a2:	3b04      	subs	r3, #4
  4039a4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4039a6:	e00a      	b.n	4039be <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4039a8:	68bb      	ldr	r3, [r7, #8]
  4039aa:	1f1a      	subs	r2, r3, #4
  4039ac:	60ba      	str	r2, [r7, #8]
  4039ae:	68fa      	ldr	r2, [r7, #12]
  4039b0:	1f11      	subs	r1, r2, #4
  4039b2:	60f9      	str	r1, [r7, #12]
  4039b4:	6812      	ldr	r2, [r2, #0]
  4039b6:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  4039b8:	687b      	ldr	r3, [r7, #4]
  4039ba:	3b04      	subs	r3, #4
  4039bc:	607b      	str	r3, [r7, #4]
  4039be:	687b      	ldr	r3, [r7, #4]
  4039c0:	2b00      	cmp	r3, #0
  4039c2:	d1f1      	bne.n	4039a8 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4039c4:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4039c6:	4b0e      	ldr	r3, [pc, #56]	; (403a00 <Reset_Handler+0xb0>)
  4039c8:	60bb      	str	r3, [r7, #8]
  4039ca:	e004      	b.n	4039d6 <Reset_Handler+0x86>
		*pDest++ = 0;
  4039cc:	68bb      	ldr	r3, [r7, #8]
  4039ce:	1d1a      	adds	r2, r3, #4
  4039d0:	60ba      	str	r2, [r7, #8]
  4039d2:	2200      	movs	r2, #0
  4039d4:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  4039d6:	68bb      	ldr	r3, [r7, #8]
  4039d8:	4a0a      	ldr	r2, [pc, #40]	; (403a04 <Reset_Handler+0xb4>)
  4039da:	4293      	cmp	r3, r2
  4039dc:	d3f6      	bcc.n	4039cc <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4039de:	4b0a      	ldr	r3, [pc, #40]	; (403a08 <Reset_Handler+0xb8>)
  4039e0:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4039e2:	4a0a      	ldr	r2, [pc, #40]	; (403a0c <Reset_Handler+0xbc>)
  4039e4:	68fb      	ldr	r3, [r7, #12]
  4039e6:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4039e8:	4b09      	ldr	r3, [pc, #36]	; (403a10 <Reset_Handler+0xc0>)
  4039ea:	4798      	blx	r3

	/* Branch to main function */
	main();
  4039ec:	4b09      	ldr	r3, [pc, #36]	; (403a14 <Reset_Handler+0xc4>)
  4039ee:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4039f0:	e7fe      	b.n	4039f0 <Reset_Handler+0xa0>
  4039f2:	bf00      	nop
  4039f4:	00409c64 	.word	0x00409c64
  4039f8:	20000000 	.word	0x20000000
  4039fc:	200009bc 	.word	0x200009bc
  403a00:	200009bc 	.word	0x200009bc
  403a04:	2000d7d4 	.word	0x2000d7d4
  403a08:	00400000 	.word	0x00400000
  403a0c:	e000ed00 	.word	0xe000ed00
  403a10:	00404059 	.word	0x00404059
  403a14:	00403ca5 	.word	0x00403ca5

00403a18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403a18:	b480      	push	{r7}
  403a1a:	af00      	add	r7, sp, #0
	while (1) {
  403a1c:	e7fe      	b.n	403a1c <Dummy_Handler+0x4>
	...

00403a20 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  403a20:	b480      	push	{r7}
  403a22:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403a24:	4b5d      	ldr	r3, [pc, #372]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a28:	f003 0303 	and.w	r3, r3, #3
  403a2c:	2b03      	cmp	r3, #3
  403a2e:	f200 8096 	bhi.w	403b5e <SystemCoreClockUpdate+0x13e>
  403a32:	a201      	add	r2, pc, #4	; (adr r2, 403a38 <SystemCoreClockUpdate+0x18>)
  403a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403a38:	00403a49 	.word	0x00403a49
  403a3c:	00403a69 	.word	0x00403a69
  403a40:	00403ab3 	.word	0x00403ab3
  403a44:	00403ab3 	.word	0x00403ab3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403a48:	4b55      	ldr	r3, [pc, #340]	; (403ba0 <SystemCoreClockUpdate+0x180>)
  403a4a:	695b      	ldr	r3, [r3, #20]
  403a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403a50:	2b00      	cmp	r3, #0
  403a52:	d004      	beq.n	403a5e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403a54:	4b53      	ldr	r3, [pc, #332]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403a56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403a5a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  403a5c:	e080      	b.n	403b60 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403a5e:	4b51      	ldr	r3, [pc, #324]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403a60:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  403a64:	601a      	str	r2, [r3, #0]
		break;
  403a66:	e07b      	b.n	403b60 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403a68:	4b4c      	ldr	r3, [pc, #304]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403a6a:	6a1b      	ldr	r3, [r3, #32]
  403a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403a70:	2b00      	cmp	r3, #0
  403a72:	d003      	beq.n	403a7c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  403a74:	4b4b      	ldr	r3, [pc, #300]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403a76:	4a4c      	ldr	r2, [pc, #304]	; (403ba8 <SystemCoreClockUpdate+0x188>)
  403a78:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  403a7a:	e071      	b.n	403b60 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403a7c:	4b49      	ldr	r3, [pc, #292]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403a7e:	4a4b      	ldr	r2, [pc, #300]	; (403bac <SystemCoreClockUpdate+0x18c>)
  403a80:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403a82:	4b46      	ldr	r3, [pc, #280]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403a84:	6a1b      	ldr	r3, [r3, #32]
  403a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a8a:	2b10      	cmp	r3, #16
  403a8c:	d008      	beq.n	403aa0 <SystemCoreClockUpdate+0x80>
  403a8e:	2b20      	cmp	r3, #32
  403a90:	d00a      	beq.n	403aa8 <SystemCoreClockUpdate+0x88>
  403a92:	2b00      	cmp	r3, #0
  403a94:	d000      	beq.n	403a98 <SystemCoreClockUpdate+0x78>
			break;
  403a96:	e00b      	b.n	403ab0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403a98:	4b42      	ldr	r3, [pc, #264]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403a9a:	4a44      	ldr	r2, [pc, #272]	; (403bac <SystemCoreClockUpdate+0x18c>)
  403a9c:	601a      	str	r2, [r3, #0]
			break;
  403a9e:	e007      	b.n	403ab0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403aa0:	4b40      	ldr	r3, [pc, #256]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403aa2:	4a43      	ldr	r2, [pc, #268]	; (403bb0 <SystemCoreClockUpdate+0x190>)
  403aa4:	601a      	str	r2, [r3, #0]
			break;
  403aa6:	e003      	b.n	403ab0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403aa8:	4b3e      	ldr	r3, [pc, #248]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403aaa:	4a3f      	ldr	r2, [pc, #252]	; (403ba8 <SystemCoreClockUpdate+0x188>)
  403aac:	601a      	str	r2, [r3, #0]
			break;
  403aae:	bf00      	nop
		break;
  403ab0:	e056      	b.n	403b60 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403ab2:	4b3a      	ldr	r3, [pc, #232]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403ab4:	6a1b      	ldr	r3, [r3, #32]
  403ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403aba:	2b00      	cmp	r3, #0
  403abc:	d003      	beq.n	403ac6 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403abe:	4b39      	ldr	r3, [pc, #228]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403ac0:	4a39      	ldr	r2, [pc, #228]	; (403ba8 <SystemCoreClockUpdate+0x188>)
  403ac2:	601a      	str	r2, [r3, #0]
  403ac4:	e019      	b.n	403afa <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403ac6:	4b37      	ldr	r3, [pc, #220]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403ac8:	4a38      	ldr	r2, [pc, #224]	; (403bac <SystemCoreClockUpdate+0x18c>)
  403aca:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403acc:	4b33      	ldr	r3, [pc, #204]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403ace:	6a1b      	ldr	r3, [r3, #32]
  403ad0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403ad4:	2b10      	cmp	r3, #16
  403ad6:	d008      	beq.n	403aea <SystemCoreClockUpdate+0xca>
  403ad8:	2b20      	cmp	r3, #32
  403ada:	d00a      	beq.n	403af2 <SystemCoreClockUpdate+0xd2>
  403adc:	2b00      	cmp	r3, #0
  403ade:	d000      	beq.n	403ae2 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  403ae0:	e00b      	b.n	403afa <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403ae2:	4b30      	ldr	r3, [pc, #192]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403ae4:	4a31      	ldr	r2, [pc, #196]	; (403bac <SystemCoreClockUpdate+0x18c>)
  403ae6:	601a      	str	r2, [r3, #0]
					break;
  403ae8:	e007      	b.n	403afa <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403aea:	4b2e      	ldr	r3, [pc, #184]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403aec:	4a30      	ldr	r2, [pc, #192]	; (403bb0 <SystemCoreClockUpdate+0x190>)
  403aee:	601a      	str	r2, [r3, #0]
					break;
  403af0:	e003      	b.n	403afa <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403af2:	4b2c      	ldr	r3, [pc, #176]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403af4:	4a2c      	ldr	r2, [pc, #176]	; (403ba8 <SystemCoreClockUpdate+0x188>)
  403af6:	601a      	str	r2, [r3, #0]
					break;
  403af8:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403afa:	4b28      	ldr	r3, [pc, #160]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403afe:	f003 0303 	and.w	r3, r3, #3
  403b02:	2b02      	cmp	r3, #2
  403b04:	d115      	bne.n	403b32 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403b06:	4b25      	ldr	r3, [pc, #148]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  403b0a:	0c1b      	lsrs	r3, r3, #16
  403b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  403b10:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403b12:	4a24      	ldr	r2, [pc, #144]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b14:	6812      	ldr	r2, [r2, #0]
  403b16:	fb02 f303 	mul.w	r3, r2, r3
  403b1a:	4a22      	ldr	r2, [pc, #136]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b1c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403b1e:	4b1f      	ldr	r3, [pc, #124]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  403b22:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403b24:	4a1f      	ldr	r2, [pc, #124]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b26:	6812      	ldr	r2, [r2, #0]
  403b28:	fbb2 f3f3 	udiv	r3, r2, r3
  403b2c:	4a1d      	ldr	r2, [pc, #116]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b2e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  403b30:	e016      	b.n	403b60 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403b32:	4b1a      	ldr	r3, [pc, #104]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403b36:	0c1b      	lsrs	r3, r3, #16
  403b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
  403b3c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403b3e:	4a19      	ldr	r2, [pc, #100]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b40:	6812      	ldr	r2, [r2, #0]
  403b42:	fb02 f303 	mul.w	r3, r2, r3
  403b46:	4a17      	ldr	r2, [pc, #92]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b48:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403b4a:	4b14      	ldr	r3, [pc, #80]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  403b4e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403b50:	4a14      	ldr	r2, [pc, #80]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b52:	6812      	ldr	r2, [r2, #0]
  403b54:	fbb2 f3f3 	udiv	r3, r2, r3
  403b58:	4a12      	ldr	r2, [pc, #72]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b5a:	6013      	str	r3, [r2, #0]
		break;
  403b5c:	e000      	b.n	403b60 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  403b5e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403b60:	4b0e      	ldr	r3, [pc, #56]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403b68:	2b70      	cmp	r3, #112	; 0x70
  403b6a:	d108      	bne.n	403b7e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  403b6c:	4b0d      	ldr	r3, [pc, #52]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b6e:	681b      	ldr	r3, [r3, #0]
  403b70:	4a10      	ldr	r2, [pc, #64]	; (403bb4 <SystemCoreClockUpdate+0x194>)
  403b72:	fba2 2303 	umull	r2, r3, r2, r3
  403b76:	085b      	lsrs	r3, r3, #1
  403b78:	4a0a      	ldr	r2, [pc, #40]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b7a:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  403b7c:	e00a      	b.n	403b94 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403b7e:	4b07      	ldr	r3, [pc, #28]	; (403b9c <SystemCoreClockUpdate+0x17c>)
  403b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403b82:	091b      	lsrs	r3, r3, #4
  403b84:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  403b88:	4a06      	ldr	r2, [pc, #24]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b8a:	6812      	ldr	r2, [r2, #0]
  403b8c:	fa22 f303 	lsr.w	r3, r2, r3
  403b90:	4a04      	ldr	r2, [pc, #16]	; (403ba4 <SystemCoreClockUpdate+0x184>)
  403b92:	6013      	str	r3, [r2, #0]
}
  403b94:	bf00      	nop
  403b96:	46bd      	mov	sp, r7
  403b98:	bc80      	pop	{r7}
  403b9a:	4770      	bx	lr
  403b9c:	400e0400 	.word	0x400e0400
  403ba0:	400e1410 	.word	0x400e1410
  403ba4:	20000010 	.word	0x20000010
  403ba8:	00b71b00 	.word	0x00b71b00
  403bac:	003d0900 	.word	0x003d0900
  403bb0:	007a1200 	.word	0x007a1200
  403bb4:	aaaaaaab 	.word	0xaaaaaaab

00403bb8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  403bb8:	b480      	push	{r7}
  403bba:	b083      	sub	sp, #12
  403bbc:	af00      	add	r7, sp, #0
  403bbe:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403bc0:	687b      	ldr	r3, [r7, #4]
  403bc2:	4a18      	ldr	r2, [pc, #96]	; (403c24 <system_init_flash+0x6c>)
  403bc4:	4293      	cmp	r3, r2
  403bc6:	d804      	bhi.n	403bd2 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403bc8:	4b17      	ldr	r3, [pc, #92]	; (403c28 <system_init_flash+0x70>)
  403bca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403bce:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403bd0:	e023      	b.n	403c1a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403bd2:	687b      	ldr	r3, [r7, #4]
  403bd4:	4a15      	ldr	r2, [pc, #84]	; (403c2c <system_init_flash+0x74>)
  403bd6:	4293      	cmp	r3, r2
  403bd8:	d803      	bhi.n	403be2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403bda:	4b13      	ldr	r3, [pc, #76]	; (403c28 <system_init_flash+0x70>)
  403bdc:	4a14      	ldr	r2, [pc, #80]	; (403c30 <system_init_flash+0x78>)
  403bde:	601a      	str	r2, [r3, #0]
}
  403be0:	e01b      	b.n	403c1a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403be2:	687b      	ldr	r3, [r7, #4]
  403be4:	4a13      	ldr	r2, [pc, #76]	; (403c34 <system_init_flash+0x7c>)
  403be6:	4293      	cmp	r3, r2
  403be8:	d803      	bhi.n	403bf2 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403bea:	4b0f      	ldr	r3, [pc, #60]	; (403c28 <system_init_flash+0x70>)
  403bec:	4a12      	ldr	r2, [pc, #72]	; (403c38 <system_init_flash+0x80>)
  403bee:	601a      	str	r2, [r3, #0]
}
  403bf0:	e013      	b.n	403c1a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403bf2:	687b      	ldr	r3, [r7, #4]
  403bf4:	4a11      	ldr	r2, [pc, #68]	; (403c3c <system_init_flash+0x84>)
  403bf6:	4293      	cmp	r3, r2
  403bf8:	d803      	bhi.n	403c02 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403bfa:	4b0b      	ldr	r3, [pc, #44]	; (403c28 <system_init_flash+0x70>)
  403bfc:	4a10      	ldr	r2, [pc, #64]	; (403c40 <system_init_flash+0x88>)
  403bfe:	601a      	str	r2, [r3, #0]
}
  403c00:	e00b      	b.n	403c1a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403c02:	687b      	ldr	r3, [r7, #4]
  403c04:	4a0f      	ldr	r2, [pc, #60]	; (403c44 <system_init_flash+0x8c>)
  403c06:	4293      	cmp	r3, r2
  403c08:	d804      	bhi.n	403c14 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403c0a:	4b07      	ldr	r3, [pc, #28]	; (403c28 <system_init_flash+0x70>)
  403c0c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403c10:	601a      	str	r2, [r3, #0]
}
  403c12:	e002      	b.n	403c1a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403c14:	4b04      	ldr	r3, [pc, #16]	; (403c28 <system_init_flash+0x70>)
  403c16:	4a0c      	ldr	r2, [pc, #48]	; (403c48 <system_init_flash+0x90>)
  403c18:	601a      	str	r2, [r3, #0]
}
  403c1a:	bf00      	nop
  403c1c:	370c      	adds	r7, #12
  403c1e:	46bd      	mov	sp, r7
  403c20:	bc80      	pop	{r7}
  403c22:	4770      	bx	lr
  403c24:	01312cff 	.word	0x01312cff
  403c28:	400e0a00 	.word	0x400e0a00
  403c2c:	026259ff 	.word	0x026259ff
  403c30:	04000100 	.word	0x04000100
  403c34:	039386ff 	.word	0x039386ff
  403c38:	04000200 	.word	0x04000200
  403c3c:	04c4b3ff 	.word	0x04c4b3ff
  403c40:	04000300 	.word	0x04000300
  403c44:	05f5e0ff 	.word	0x05f5e0ff
  403c48:	04000500 	.word	0x04000500

00403c4c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  403c4c:	b480      	push	{r7}
  403c4e:	b085      	sub	sp, #20
  403c50:	af00      	add	r7, sp, #0
  403c52:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  403c54:	4b10      	ldr	r3, [pc, #64]	; (403c98 <_sbrk+0x4c>)
  403c56:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  403c58:	4b10      	ldr	r3, [pc, #64]	; (403c9c <_sbrk+0x50>)
  403c5a:	681b      	ldr	r3, [r3, #0]
  403c5c:	2b00      	cmp	r3, #0
  403c5e:	d102      	bne.n	403c66 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  403c60:	4b0e      	ldr	r3, [pc, #56]	; (403c9c <_sbrk+0x50>)
  403c62:	4a0f      	ldr	r2, [pc, #60]	; (403ca0 <_sbrk+0x54>)
  403c64:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403c66:	4b0d      	ldr	r3, [pc, #52]	; (403c9c <_sbrk+0x50>)
  403c68:	681b      	ldr	r3, [r3, #0]
  403c6a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  403c6c:	68ba      	ldr	r2, [r7, #8]
  403c6e:	687b      	ldr	r3, [r7, #4]
  403c70:	441a      	add	r2, r3
  403c72:	68fb      	ldr	r3, [r7, #12]
  403c74:	429a      	cmp	r2, r3
  403c76:	dd02      	ble.n	403c7e <_sbrk+0x32>
		return (caddr_t) -1;	
  403c78:	f04f 33ff 	mov.w	r3, #4294967295
  403c7c:	e006      	b.n	403c8c <_sbrk+0x40>
	}

	heap += incr;
  403c7e:	4b07      	ldr	r3, [pc, #28]	; (403c9c <_sbrk+0x50>)
  403c80:	681a      	ldr	r2, [r3, #0]
  403c82:	687b      	ldr	r3, [r7, #4]
  403c84:	4413      	add	r3, r2
  403c86:	4a05      	ldr	r2, [pc, #20]	; (403c9c <_sbrk+0x50>)
  403c88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  403c8a:	68bb      	ldr	r3, [r7, #8]
}
  403c8c:	4618      	mov	r0, r3
  403c8e:	3714      	adds	r7, #20
  403c90:	46bd      	mov	sp, r7
  403c92:	bc80      	pop	{r7}
  403c94:	4770      	bx	lr
  403c96:	bf00      	nop
  403c98:	2001fffc 	.word	0x2001fffc
  403c9c:	2000d790 	.word	0x2000d790
  403ca0:	200107d8 	.word	0x200107d8

00403ca4 <main>:
#include "microphone.h"
#include "ov2640.h"
#include "timer_interface.h"

int main (void)
{
  403ca4:	b580      	push	{r7, lr}
  403ca6:	b082      	sub	sp, #8
  403ca8:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  403caa:	4b16      	ldr	r3, [pc, #88]	; (403d04 <main+0x60>)
  403cac:	4798      	blx	r3
	board_init();
  403cae:	4b16      	ldr	r3, [pc, #88]	; (403d08 <main+0x64>)
  403cb0:	4798      	blx	r3
	configure_tc();
  403cb2:	4b16      	ldr	r3, [pc, #88]	; (403d0c <main+0x68>)
  403cb4:	4798      	blx	r3
	tc_start(TC0, 0);
  403cb6:	2100      	movs	r1, #0
  403cb8:	4815      	ldr	r0, [pc, #84]	; (403d10 <main+0x6c>)
  403cba:	4b16      	ldr	r3, [pc, #88]	; (403d14 <main+0x70>)
  403cbc:	4798      	blx	r3
		
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi 
  403cbe:	4b16      	ldr	r3, [pc, #88]	; (403d18 <main+0x74>)
  403cc0:	4798      	blx	r3
	configure_camera();		// configures and initializes camera module
  403cc2:	4b16      	ldr	r3, [pc, #88]	; (403d1c <main+0x78>)
  403cc4:	4798      	blx	r3
	
	uint8_t status_code = 0;
  403cc6:	2300      	movs	r3, #0
  403cc8:	71fb      	strb	r3, [r7, #7]
	uint32_t im_length;
	
	reboot_wifi();
  403cca:	4b15      	ldr	r3, [pc, #84]	; (403d20 <main+0x7c>)
  403ccc:	4798      	blx	r3
	//safe_mode_recovery();
	
	configure_i2s(); // microphone configuration
  403cce:	4b15      	ldr	r3, [pc, #84]	; (403d24 <main+0x80>)
  403cd0:	4798      	blx	r3
	
	configure_websocket();
  403cd2:	4b15      	ldr	r3, [pc, #84]	; (403d28 <main+0x84>)
  403cd4:	4798      	blx	r3
	
	start_i2s_capture();	
  403cd6:	4b15      	ldr	r3, [pc, #84]	; (403d2c <main+0x88>)
  403cd8:	4798      	blx	r3
	while(1) {
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  403cda:	4b15      	ldr	r3, [pc, #84]	; (403d30 <main+0x8c>)
  403cdc:	681b      	ldr	r3, [r3, #0]
  403cde:	2b00      	cmp	r3, #0
  403ce0:	d001      	beq.n	403ce6 <main+0x42>
			setup_wifi();		// the wifi chip tries to reassociate to a new network
  403ce2:	4b14      	ldr	r3, [pc, #80]	; (403d34 <main+0x90>)
  403ce4:	4798      	blx	r3
		}
		
		start_capture();		// captures image to internal memory. Owned by camera but sends audio data
  403ce6:	4b14      	ldr	r3, [pc, #80]	; (403d38 <main+0x94>)
  403ce8:	4798      	blx	r3
		im_length = find_image_len();
  403cea:	4b14      	ldr	r3, [pc, #80]	; (403d3c <main+0x98>)
  403cec:	4798      	blx	r3
  403cee:	6038      	str	r0, [r7, #0]
		if(im_length) {
  403cf0:	683b      	ldr	r3, [r7, #0]
  403cf2:	2b00      	cmp	r3, #0
  403cf4:	d0f1      	beq.n	403cda <main+0x36>
			send_image(start_of_image_ptr, im_length);
  403cf6:	4b12      	ldr	r3, [pc, #72]	; (403d40 <main+0x9c>)
  403cf8:	681b      	ldr	r3, [r3, #0]
  403cfa:	6839      	ldr	r1, [r7, #0]
  403cfc:	4618      	mov	r0, r3
  403cfe:	4b11      	ldr	r3, [pc, #68]	; (403d44 <main+0xa0>)
  403d00:	4798      	blx	r3
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  403d02:	e7ea      	b.n	403cda <main+0x36>
  403d04:	00402ce1 	.word	0x00402ce1
  403d08:	004037f9 	.word	0x004037f9
  403d0c:	00401c7d 	.word	0x00401c7d
  403d10:	40010000 	.word	0x40010000
  403d14:	0040041d 	.word	0x0040041d
  403d18:	004020ed 	.word	0x004020ed
  403d1c:	00401441 	.word	0x00401441
  403d20:	0040211d 	.word	0x0040211d
  403d24:	004007b1 	.word	0x004007b1
  403d28:	00402195 	.word	0x00402195
  403d2c:	004006f9 	.word	0x004006f9
  403d30:	2000d588 	.word	0x2000d588
  403d34:	004020c1 	.word	0x004020c1
  403d38:	00401535 	.word	0x00401535
  403d3c:	004015c5 	.word	0x004015c5
  403d40:	2000d580 	.word	0x2000d580
  403d44:	00402345 	.word	0x00402345

00403d48 <__aeabi_uldivmod>:
  403d48:	b953      	cbnz	r3, 403d60 <__aeabi_uldivmod+0x18>
  403d4a:	b94a      	cbnz	r2, 403d60 <__aeabi_uldivmod+0x18>
  403d4c:	2900      	cmp	r1, #0
  403d4e:	bf08      	it	eq
  403d50:	2800      	cmpeq	r0, #0
  403d52:	bf1c      	itt	ne
  403d54:	f04f 31ff 	movne.w	r1, #4294967295
  403d58:	f04f 30ff 	movne.w	r0, #4294967295
  403d5c:	f000 b97a 	b.w	404054 <__aeabi_idiv0>
  403d60:	f1ad 0c08 	sub.w	ip, sp, #8
  403d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403d68:	f000 f806 	bl	403d78 <__udivmoddi4>
  403d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d74:	b004      	add	sp, #16
  403d76:	4770      	bx	lr

00403d78 <__udivmoddi4>:
  403d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d7c:	468c      	mov	ip, r1
  403d7e:	460d      	mov	r5, r1
  403d80:	4604      	mov	r4, r0
  403d82:	9e08      	ldr	r6, [sp, #32]
  403d84:	2b00      	cmp	r3, #0
  403d86:	d151      	bne.n	403e2c <__udivmoddi4+0xb4>
  403d88:	428a      	cmp	r2, r1
  403d8a:	4617      	mov	r7, r2
  403d8c:	d96d      	bls.n	403e6a <__udivmoddi4+0xf2>
  403d8e:	fab2 fe82 	clz	lr, r2
  403d92:	f1be 0f00 	cmp.w	lr, #0
  403d96:	d00b      	beq.n	403db0 <__udivmoddi4+0x38>
  403d98:	f1ce 0c20 	rsb	ip, lr, #32
  403d9c:	fa01 f50e 	lsl.w	r5, r1, lr
  403da0:	fa20 fc0c 	lsr.w	ip, r0, ip
  403da4:	fa02 f70e 	lsl.w	r7, r2, lr
  403da8:	ea4c 0c05 	orr.w	ip, ip, r5
  403dac:	fa00 f40e 	lsl.w	r4, r0, lr
  403db0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403db4:	0c25      	lsrs	r5, r4, #16
  403db6:	fbbc f8fa 	udiv	r8, ip, sl
  403dba:	fa1f f987 	uxth.w	r9, r7
  403dbe:	fb0a cc18 	mls	ip, sl, r8, ip
  403dc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403dc6:	fb08 f309 	mul.w	r3, r8, r9
  403dca:	42ab      	cmp	r3, r5
  403dcc:	d90a      	bls.n	403de4 <__udivmoddi4+0x6c>
  403dce:	19ed      	adds	r5, r5, r7
  403dd0:	f108 32ff 	add.w	r2, r8, #4294967295
  403dd4:	f080 8123 	bcs.w	40401e <__udivmoddi4+0x2a6>
  403dd8:	42ab      	cmp	r3, r5
  403dda:	f240 8120 	bls.w	40401e <__udivmoddi4+0x2a6>
  403dde:	f1a8 0802 	sub.w	r8, r8, #2
  403de2:	443d      	add	r5, r7
  403de4:	1aed      	subs	r5, r5, r3
  403de6:	b2a4      	uxth	r4, r4
  403de8:	fbb5 f0fa 	udiv	r0, r5, sl
  403dec:	fb0a 5510 	mls	r5, sl, r0, r5
  403df0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403df4:	fb00 f909 	mul.w	r9, r0, r9
  403df8:	45a1      	cmp	r9, r4
  403dfa:	d909      	bls.n	403e10 <__udivmoddi4+0x98>
  403dfc:	19e4      	adds	r4, r4, r7
  403dfe:	f100 33ff 	add.w	r3, r0, #4294967295
  403e02:	f080 810a 	bcs.w	40401a <__udivmoddi4+0x2a2>
  403e06:	45a1      	cmp	r9, r4
  403e08:	f240 8107 	bls.w	40401a <__udivmoddi4+0x2a2>
  403e0c:	3802      	subs	r0, #2
  403e0e:	443c      	add	r4, r7
  403e10:	eba4 0409 	sub.w	r4, r4, r9
  403e14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403e18:	2100      	movs	r1, #0
  403e1a:	2e00      	cmp	r6, #0
  403e1c:	d061      	beq.n	403ee2 <__udivmoddi4+0x16a>
  403e1e:	fa24 f40e 	lsr.w	r4, r4, lr
  403e22:	2300      	movs	r3, #0
  403e24:	6034      	str	r4, [r6, #0]
  403e26:	6073      	str	r3, [r6, #4]
  403e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e2c:	428b      	cmp	r3, r1
  403e2e:	d907      	bls.n	403e40 <__udivmoddi4+0xc8>
  403e30:	2e00      	cmp	r6, #0
  403e32:	d054      	beq.n	403ede <__udivmoddi4+0x166>
  403e34:	2100      	movs	r1, #0
  403e36:	e886 0021 	stmia.w	r6, {r0, r5}
  403e3a:	4608      	mov	r0, r1
  403e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e40:	fab3 f183 	clz	r1, r3
  403e44:	2900      	cmp	r1, #0
  403e46:	f040 808e 	bne.w	403f66 <__udivmoddi4+0x1ee>
  403e4a:	42ab      	cmp	r3, r5
  403e4c:	d302      	bcc.n	403e54 <__udivmoddi4+0xdc>
  403e4e:	4282      	cmp	r2, r0
  403e50:	f200 80fa 	bhi.w	404048 <__udivmoddi4+0x2d0>
  403e54:	1a84      	subs	r4, r0, r2
  403e56:	eb65 0503 	sbc.w	r5, r5, r3
  403e5a:	2001      	movs	r0, #1
  403e5c:	46ac      	mov	ip, r5
  403e5e:	2e00      	cmp	r6, #0
  403e60:	d03f      	beq.n	403ee2 <__udivmoddi4+0x16a>
  403e62:	e886 1010 	stmia.w	r6, {r4, ip}
  403e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e6a:	b912      	cbnz	r2, 403e72 <__udivmoddi4+0xfa>
  403e6c:	2701      	movs	r7, #1
  403e6e:	fbb7 f7f2 	udiv	r7, r7, r2
  403e72:	fab7 fe87 	clz	lr, r7
  403e76:	f1be 0f00 	cmp.w	lr, #0
  403e7a:	d134      	bne.n	403ee6 <__udivmoddi4+0x16e>
  403e7c:	1beb      	subs	r3, r5, r7
  403e7e:	0c3a      	lsrs	r2, r7, #16
  403e80:	fa1f fc87 	uxth.w	ip, r7
  403e84:	2101      	movs	r1, #1
  403e86:	fbb3 f8f2 	udiv	r8, r3, r2
  403e8a:	0c25      	lsrs	r5, r4, #16
  403e8c:	fb02 3318 	mls	r3, r2, r8, r3
  403e90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e94:	fb0c f308 	mul.w	r3, ip, r8
  403e98:	42ab      	cmp	r3, r5
  403e9a:	d907      	bls.n	403eac <__udivmoddi4+0x134>
  403e9c:	19ed      	adds	r5, r5, r7
  403e9e:	f108 30ff 	add.w	r0, r8, #4294967295
  403ea2:	d202      	bcs.n	403eaa <__udivmoddi4+0x132>
  403ea4:	42ab      	cmp	r3, r5
  403ea6:	f200 80d1 	bhi.w	40404c <__udivmoddi4+0x2d4>
  403eaa:	4680      	mov	r8, r0
  403eac:	1aed      	subs	r5, r5, r3
  403eae:	b2a3      	uxth	r3, r4
  403eb0:	fbb5 f0f2 	udiv	r0, r5, r2
  403eb4:	fb02 5510 	mls	r5, r2, r0, r5
  403eb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403ebc:	fb0c fc00 	mul.w	ip, ip, r0
  403ec0:	45a4      	cmp	ip, r4
  403ec2:	d907      	bls.n	403ed4 <__udivmoddi4+0x15c>
  403ec4:	19e4      	adds	r4, r4, r7
  403ec6:	f100 33ff 	add.w	r3, r0, #4294967295
  403eca:	d202      	bcs.n	403ed2 <__udivmoddi4+0x15a>
  403ecc:	45a4      	cmp	ip, r4
  403ece:	f200 80b8 	bhi.w	404042 <__udivmoddi4+0x2ca>
  403ed2:	4618      	mov	r0, r3
  403ed4:	eba4 040c 	sub.w	r4, r4, ip
  403ed8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403edc:	e79d      	b.n	403e1a <__udivmoddi4+0xa2>
  403ede:	4631      	mov	r1, r6
  403ee0:	4630      	mov	r0, r6
  403ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ee6:	f1ce 0420 	rsb	r4, lr, #32
  403eea:	fa05 f30e 	lsl.w	r3, r5, lr
  403eee:	fa07 f70e 	lsl.w	r7, r7, lr
  403ef2:	fa20 f804 	lsr.w	r8, r0, r4
  403ef6:	0c3a      	lsrs	r2, r7, #16
  403ef8:	fa25 f404 	lsr.w	r4, r5, r4
  403efc:	ea48 0803 	orr.w	r8, r8, r3
  403f00:	fbb4 f1f2 	udiv	r1, r4, r2
  403f04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403f08:	fb02 4411 	mls	r4, r2, r1, r4
  403f0c:	fa1f fc87 	uxth.w	ip, r7
  403f10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403f14:	fb01 f30c 	mul.w	r3, r1, ip
  403f18:	42ab      	cmp	r3, r5
  403f1a:	fa00 f40e 	lsl.w	r4, r0, lr
  403f1e:	d909      	bls.n	403f34 <__udivmoddi4+0x1bc>
  403f20:	19ed      	adds	r5, r5, r7
  403f22:	f101 30ff 	add.w	r0, r1, #4294967295
  403f26:	f080 808a 	bcs.w	40403e <__udivmoddi4+0x2c6>
  403f2a:	42ab      	cmp	r3, r5
  403f2c:	f240 8087 	bls.w	40403e <__udivmoddi4+0x2c6>
  403f30:	3902      	subs	r1, #2
  403f32:	443d      	add	r5, r7
  403f34:	1aeb      	subs	r3, r5, r3
  403f36:	fa1f f588 	uxth.w	r5, r8
  403f3a:	fbb3 f0f2 	udiv	r0, r3, r2
  403f3e:	fb02 3310 	mls	r3, r2, r0, r3
  403f42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403f46:	fb00 f30c 	mul.w	r3, r0, ip
  403f4a:	42ab      	cmp	r3, r5
  403f4c:	d907      	bls.n	403f5e <__udivmoddi4+0x1e6>
  403f4e:	19ed      	adds	r5, r5, r7
  403f50:	f100 38ff 	add.w	r8, r0, #4294967295
  403f54:	d26f      	bcs.n	404036 <__udivmoddi4+0x2be>
  403f56:	42ab      	cmp	r3, r5
  403f58:	d96d      	bls.n	404036 <__udivmoddi4+0x2be>
  403f5a:	3802      	subs	r0, #2
  403f5c:	443d      	add	r5, r7
  403f5e:	1aeb      	subs	r3, r5, r3
  403f60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403f64:	e78f      	b.n	403e86 <__udivmoddi4+0x10e>
  403f66:	f1c1 0720 	rsb	r7, r1, #32
  403f6a:	fa22 f807 	lsr.w	r8, r2, r7
  403f6e:	408b      	lsls	r3, r1
  403f70:	fa05 f401 	lsl.w	r4, r5, r1
  403f74:	ea48 0303 	orr.w	r3, r8, r3
  403f78:	fa20 fe07 	lsr.w	lr, r0, r7
  403f7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403f80:	40fd      	lsrs	r5, r7
  403f82:	ea4e 0e04 	orr.w	lr, lr, r4
  403f86:	fbb5 f9fc 	udiv	r9, r5, ip
  403f8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403f8e:	fb0c 5519 	mls	r5, ip, r9, r5
  403f92:	fa1f f883 	uxth.w	r8, r3
  403f96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403f9a:	fb09 f408 	mul.w	r4, r9, r8
  403f9e:	42ac      	cmp	r4, r5
  403fa0:	fa02 f201 	lsl.w	r2, r2, r1
  403fa4:	fa00 fa01 	lsl.w	sl, r0, r1
  403fa8:	d908      	bls.n	403fbc <__udivmoddi4+0x244>
  403faa:	18ed      	adds	r5, r5, r3
  403fac:	f109 30ff 	add.w	r0, r9, #4294967295
  403fb0:	d243      	bcs.n	40403a <__udivmoddi4+0x2c2>
  403fb2:	42ac      	cmp	r4, r5
  403fb4:	d941      	bls.n	40403a <__udivmoddi4+0x2c2>
  403fb6:	f1a9 0902 	sub.w	r9, r9, #2
  403fba:	441d      	add	r5, r3
  403fbc:	1b2d      	subs	r5, r5, r4
  403fbe:	fa1f fe8e 	uxth.w	lr, lr
  403fc2:	fbb5 f0fc 	udiv	r0, r5, ip
  403fc6:	fb0c 5510 	mls	r5, ip, r0, r5
  403fca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403fce:	fb00 f808 	mul.w	r8, r0, r8
  403fd2:	45a0      	cmp	r8, r4
  403fd4:	d907      	bls.n	403fe6 <__udivmoddi4+0x26e>
  403fd6:	18e4      	adds	r4, r4, r3
  403fd8:	f100 35ff 	add.w	r5, r0, #4294967295
  403fdc:	d229      	bcs.n	404032 <__udivmoddi4+0x2ba>
  403fde:	45a0      	cmp	r8, r4
  403fe0:	d927      	bls.n	404032 <__udivmoddi4+0x2ba>
  403fe2:	3802      	subs	r0, #2
  403fe4:	441c      	add	r4, r3
  403fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403fea:	eba4 0408 	sub.w	r4, r4, r8
  403fee:	fba0 8902 	umull	r8, r9, r0, r2
  403ff2:	454c      	cmp	r4, r9
  403ff4:	46c6      	mov	lr, r8
  403ff6:	464d      	mov	r5, r9
  403ff8:	d315      	bcc.n	404026 <__udivmoddi4+0x2ae>
  403ffa:	d012      	beq.n	404022 <__udivmoddi4+0x2aa>
  403ffc:	b156      	cbz	r6, 404014 <__udivmoddi4+0x29c>
  403ffe:	ebba 030e 	subs.w	r3, sl, lr
  404002:	eb64 0405 	sbc.w	r4, r4, r5
  404006:	fa04 f707 	lsl.w	r7, r4, r7
  40400a:	40cb      	lsrs	r3, r1
  40400c:	431f      	orrs	r7, r3
  40400e:	40cc      	lsrs	r4, r1
  404010:	6037      	str	r7, [r6, #0]
  404012:	6074      	str	r4, [r6, #4]
  404014:	2100      	movs	r1, #0
  404016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40401a:	4618      	mov	r0, r3
  40401c:	e6f8      	b.n	403e10 <__udivmoddi4+0x98>
  40401e:	4690      	mov	r8, r2
  404020:	e6e0      	b.n	403de4 <__udivmoddi4+0x6c>
  404022:	45c2      	cmp	sl, r8
  404024:	d2ea      	bcs.n	403ffc <__udivmoddi4+0x284>
  404026:	ebb8 0e02 	subs.w	lr, r8, r2
  40402a:	eb69 0503 	sbc.w	r5, r9, r3
  40402e:	3801      	subs	r0, #1
  404030:	e7e4      	b.n	403ffc <__udivmoddi4+0x284>
  404032:	4628      	mov	r0, r5
  404034:	e7d7      	b.n	403fe6 <__udivmoddi4+0x26e>
  404036:	4640      	mov	r0, r8
  404038:	e791      	b.n	403f5e <__udivmoddi4+0x1e6>
  40403a:	4681      	mov	r9, r0
  40403c:	e7be      	b.n	403fbc <__udivmoddi4+0x244>
  40403e:	4601      	mov	r1, r0
  404040:	e778      	b.n	403f34 <__udivmoddi4+0x1bc>
  404042:	3802      	subs	r0, #2
  404044:	443c      	add	r4, r7
  404046:	e745      	b.n	403ed4 <__udivmoddi4+0x15c>
  404048:	4608      	mov	r0, r1
  40404a:	e708      	b.n	403e5e <__udivmoddi4+0xe6>
  40404c:	f1a8 0802 	sub.w	r8, r8, #2
  404050:	443d      	add	r5, r7
  404052:	e72b      	b.n	403eac <__udivmoddi4+0x134>

00404054 <__aeabi_idiv0>:
  404054:	4770      	bx	lr
  404056:	bf00      	nop

00404058 <__libc_init_array>:
  404058:	b570      	push	{r4, r5, r6, lr}
  40405a:	4e0f      	ldr	r6, [pc, #60]	; (404098 <__libc_init_array+0x40>)
  40405c:	4d0f      	ldr	r5, [pc, #60]	; (40409c <__libc_init_array+0x44>)
  40405e:	1b76      	subs	r6, r6, r5
  404060:	10b6      	asrs	r6, r6, #2
  404062:	bf18      	it	ne
  404064:	2400      	movne	r4, #0
  404066:	d005      	beq.n	404074 <__libc_init_array+0x1c>
  404068:	3401      	adds	r4, #1
  40406a:	f855 3b04 	ldr.w	r3, [r5], #4
  40406e:	4798      	blx	r3
  404070:	42a6      	cmp	r6, r4
  404072:	d1f9      	bne.n	404068 <__libc_init_array+0x10>
  404074:	4e0a      	ldr	r6, [pc, #40]	; (4040a0 <__libc_init_array+0x48>)
  404076:	4d0b      	ldr	r5, [pc, #44]	; (4040a4 <__libc_init_array+0x4c>)
  404078:	1b76      	subs	r6, r6, r5
  40407a:	f005 fddd 	bl	409c38 <_init>
  40407e:	10b6      	asrs	r6, r6, #2
  404080:	bf18      	it	ne
  404082:	2400      	movne	r4, #0
  404084:	d006      	beq.n	404094 <__libc_init_array+0x3c>
  404086:	3401      	adds	r4, #1
  404088:	f855 3b04 	ldr.w	r3, [r5], #4
  40408c:	4798      	blx	r3
  40408e:	42a6      	cmp	r6, r4
  404090:	d1f9      	bne.n	404086 <__libc_init_array+0x2e>
  404092:	bd70      	pop	{r4, r5, r6, pc}
  404094:	bd70      	pop	{r4, r5, r6, pc}
  404096:	bf00      	nop
  404098:	00409c44 	.word	0x00409c44
  40409c:	00409c44 	.word	0x00409c44
  4040a0:	00409c4c 	.word	0x00409c4c
  4040a4:	00409c44 	.word	0x00409c44

004040a8 <memset>:
  4040a8:	b470      	push	{r4, r5, r6}
  4040aa:	0786      	lsls	r6, r0, #30
  4040ac:	d046      	beq.n	40413c <memset+0x94>
  4040ae:	1e54      	subs	r4, r2, #1
  4040b0:	2a00      	cmp	r2, #0
  4040b2:	d041      	beq.n	404138 <memset+0x90>
  4040b4:	b2ca      	uxtb	r2, r1
  4040b6:	4603      	mov	r3, r0
  4040b8:	e002      	b.n	4040c0 <memset+0x18>
  4040ba:	f114 34ff 	adds.w	r4, r4, #4294967295
  4040be:	d33b      	bcc.n	404138 <memset+0x90>
  4040c0:	f803 2b01 	strb.w	r2, [r3], #1
  4040c4:	079d      	lsls	r5, r3, #30
  4040c6:	d1f8      	bne.n	4040ba <memset+0x12>
  4040c8:	2c03      	cmp	r4, #3
  4040ca:	d92e      	bls.n	40412a <memset+0x82>
  4040cc:	b2cd      	uxtb	r5, r1
  4040ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4040d2:	2c0f      	cmp	r4, #15
  4040d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4040d8:	d919      	bls.n	40410e <memset+0x66>
  4040da:	f103 0210 	add.w	r2, r3, #16
  4040de:	4626      	mov	r6, r4
  4040e0:	3e10      	subs	r6, #16
  4040e2:	2e0f      	cmp	r6, #15
  4040e4:	f842 5c10 	str.w	r5, [r2, #-16]
  4040e8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4040ec:	f842 5c08 	str.w	r5, [r2, #-8]
  4040f0:	f842 5c04 	str.w	r5, [r2, #-4]
  4040f4:	f102 0210 	add.w	r2, r2, #16
  4040f8:	d8f2      	bhi.n	4040e0 <memset+0x38>
  4040fa:	f1a4 0210 	sub.w	r2, r4, #16
  4040fe:	f022 020f 	bic.w	r2, r2, #15
  404102:	f004 040f 	and.w	r4, r4, #15
  404106:	3210      	adds	r2, #16
  404108:	2c03      	cmp	r4, #3
  40410a:	4413      	add	r3, r2
  40410c:	d90d      	bls.n	40412a <memset+0x82>
  40410e:	461e      	mov	r6, r3
  404110:	4622      	mov	r2, r4
  404112:	3a04      	subs	r2, #4
  404114:	2a03      	cmp	r2, #3
  404116:	f846 5b04 	str.w	r5, [r6], #4
  40411a:	d8fa      	bhi.n	404112 <memset+0x6a>
  40411c:	1f22      	subs	r2, r4, #4
  40411e:	f022 0203 	bic.w	r2, r2, #3
  404122:	3204      	adds	r2, #4
  404124:	4413      	add	r3, r2
  404126:	f004 0403 	and.w	r4, r4, #3
  40412a:	b12c      	cbz	r4, 404138 <memset+0x90>
  40412c:	b2c9      	uxtb	r1, r1
  40412e:	441c      	add	r4, r3
  404130:	f803 1b01 	strb.w	r1, [r3], #1
  404134:	429c      	cmp	r4, r3
  404136:	d1fb      	bne.n	404130 <memset+0x88>
  404138:	bc70      	pop	{r4, r5, r6}
  40413a:	4770      	bx	lr
  40413c:	4614      	mov	r4, r2
  40413e:	4603      	mov	r3, r0
  404140:	e7c2      	b.n	4040c8 <memset+0x20>
  404142:	bf00      	nop

00404144 <sprintf>:
  404144:	b40e      	push	{r1, r2, r3}
  404146:	b5f0      	push	{r4, r5, r6, r7, lr}
  404148:	b09c      	sub	sp, #112	; 0x70
  40414a:	ab21      	add	r3, sp, #132	; 0x84
  40414c:	490f      	ldr	r1, [pc, #60]	; (40418c <sprintf+0x48>)
  40414e:	f853 2b04 	ldr.w	r2, [r3], #4
  404152:	9301      	str	r3, [sp, #4]
  404154:	4605      	mov	r5, r0
  404156:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40415a:	6808      	ldr	r0, [r1, #0]
  40415c:	9502      	str	r5, [sp, #8]
  40415e:	f44f 7702 	mov.w	r7, #520	; 0x208
  404162:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404166:	a902      	add	r1, sp, #8
  404168:	9506      	str	r5, [sp, #24]
  40416a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40416e:	9404      	str	r4, [sp, #16]
  404170:	9407      	str	r4, [sp, #28]
  404172:	f8ad 6016 	strh.w	r6, [sp, #22]
  404176:	f000 faf5 	bl	404764 <_svfprintf_r>
  40417a:	9b02      	ldr	r3, [sp, #8]
  40417c:	2200      	movs	r2, #0
  40417e:	701a      	strb	r2, [r3, #0]
  404180:	b01c      	add	sp, #112	; 0x70
  404182:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404186:	b003      	add	sp, #12
  404188:	4770      	bx	lr
  40418a:	bf00      	nop
  40418c:	20000014 	.word	0x20000014
	...

004041c0 <strlen>:
  4041c0:	f890 f000 	pld	[r0]
  4041c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4041c8:	f020 0107 	bic.w	r1, r0, #7
  4041cc:	f06f 0c00 	mvn.w	ip, #0
  4041d0:	f010 0407 	ands.w	r4, r0, #7
  4041d4:	f891 f020 	pld	[r1, #32]
  4041d8:	f040 8049 	bne.w	40426e <strlen+0xae>
  4041dc:	f04f 0400 	mov.w	r4, #0
  4041e0:	f06f 0007 	mvn.w	r0, #7
  4041e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4041e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4041ec:	f100 0008 	add.w	r0, r0, #8
  4041f0:	fa82 f24c 	uadd8	r2, r2, ip
  4041f4:	faa4 f28c 	sel	r2, r4, ip
  4041f8:	fa83 f34c 	uadd8	r3, r3, ip
  4041fc:	faa2 f38c 	sel	r3, r2, ip
  404200:	bb4b      	cbnz	r3, 404256 <strlen+0x96>
  404202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404206:	fa82 f24c 	uadd8	r2, r2, ip
  40420a:	f100 0008 	add.w	r0, r0, #8
  40420e:	faa4 f28c 	sel	r2, r4, ip
  404212:	fa83 f34c 	uadd8	r3, r3, ip
  404216:	faa2 f38c 	sel	r3, r2, ip
  40421a:	b9e3      	cbnz	r3, 404256 <strlen+0x96>
  40421c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404220:	fa82 f24c 	uadd8	r2, r2, ip
  404224:	f100 0008 	add.w	r0, r0, #8
  404228:	faa4 f28c 	sel	r2, r4, ip
  40422c:	fa83 f34c 	uadd8	r3, r3, ip
  404230:	faa2 f38c 	sel	r3, r2, ip
  404234:	b97b      	cbnz	r3, 404256 <strlen+0x96>
  404236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40423a:	f101 0120 	add.w	r1, r1, #32
  40423e:	fa82 f24c 	uadd8	r2, r2, ip
  404242:	f100 0008 	add.w	r0, r0, #8
  404246:	faa4 f28c 	sel	r2, r4, ip
  40424a:	fa83 f34c 	uadd8	r3, r3, ip
  40424e:	faa2 f38c 	sel	r3, r2, ip
  404252:	2b00      	cmp	r3, #0
  404254:	d0c6      	beq.n	4041e4 <strlen+0x24>
  404256:	2a00      	cmp	r2, #0
  404258:	bf04      	itt	eq
  40425a:	3004      	addeq	r0, #4
  40425c:	461a      	moveq	r2, r3
  40425e:	ba12      	rev	r2, r2
  404260:	fab2 f282 	clz	r2, r2
  404264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40426c:	4770      	bx	lr
  40426e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404272:	f004 0503 	and.w	r5, r4, #3
  404276:	f1c4 0000 	rsb	r0, r4, #0
  40427a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40427e:	f014 0f04 	tst.w	r4, #4
  404282:	f891 f040 	pld	[r1, #64]	; 0x40
  404286:	fa0c f505 	lsl.w	r5, ip, r5
  40428a:	ea62 0205 	orn	r2, r2, r5
  40428e:	bf1c      	itt	ne
  404290:	ea63 0305 	ornne	r3, r3, r5
  404294:	4662      	movne	r2, ip
  404296:	f04f 0400 	mov.w	r4, #0
  40429a:	e7a9      	b.n	4041f0 <strlen+0x30>

0040429c <critical_factorization>:
  40429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042a0:	f04f 0e01 	mov.w	lr, #1
  4042a4:	4674      	mov	r4, lr
  4042a6:	2500      	movs	r5, #0
  4042a8:	f04f 36ff 	mov.w	r6, #4294967295
  4042ac:	192b      	adds	r3, r5, r4
  4042ae:	428b      	cmp	r3, r1
  4042b0:	eb00 0706 	add.w	r7, r0, r6
  4042b4:	d20d      	bcs.n	4042d2 <critical_factorization+0x36>
  4042b6:	5d3f      	ldrb	r7, [r7, r4]
  4042b8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4042bc:	45bc      	cmp	ip, r7
  4042be:	d22d      	bcs.n	40431c <critical_factorization+0x80>
  4042c0:	461d      	mov	r5, r3
  4042c2:	2401      	movs	r4, #1
  4042c4:	eba3 0e06 	sub.w	lr, r3, r6
  4042c8:	192b      	adds	r3, r5, r4
  4042ca:	428b      	cmp	r3, r1
  4042cc:	eb00 0706 	add.w	r7, r0, r6
  4042d0:	d3f1      	bcc.n	4042b6 <critical_factorization+0x1a>
  4042d2:	f04f 0801 	mov.w	r8, #1
  4042d6:	f8c2 e000 	str.w	lr, [r2]
  4042da:	4644      	mov	r4, r8
  4042dc:	2500      	movs	r5, #0
  4042de:	f04f 37ff 	mov.w	r7, #4294967295
  4042e2:	192b      	adds	r3, r5, r4
  4042e4:	4299      	cmp	r1, r3
  4042e6:	eb00 0e07 	add.w	lr, r0, r7
  4042ea:	d90e      	bls.n	40430a <critical_factorization+0x6e>
  4042ec:	f81e e004 	ldrb.w	lr, [lr, r4]
  4042f0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4042f4:	45f4      	cmp	ip, lr
  4042f6:	d918      	bls.n	40432a <critical_factorization+0x8e>
  4042f8:	461d      	mov	r5, r3
  4042fa:	2401      	movs	r4, #1
  4042fc:	eba3 0807 	sub.w	r8, r3, r7
  404300:	192b      	adds	r3, r5, r4
  404302:	4299      	cmp	r1, r3
  404304:	eb00 0e07 	add.w	lr, r0, r7
  404308:	d8f0      	bhi.n	4042ec <critical_factorization+0x50>
  40430a:	3701      	adds	r7, #1
  40430c:	1c70      	adds	r0, r6, #1
  40430e:	4287      	cmp	r7, r0
  404310:	bf24      	itt	cs
  404312:	f8c2 8000 	strcs.w	r8, [r2]
  404316:	4638      	movcs	r0, r7
  404318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40431c:	d00c      	beq.n	404338 <critical_factorization+0x9c>
  40431e:	f04f 0e01 	mov.w	lr, #1
  404322:	462e      	mov	r6, r5
  404324:	4674      	mov	r4, lr
  404326:	4475      	add	r5, lr
  404328:	e7c0      	b.n	4042ac <critical_factorization+0x10>
  40432a:	d00b      	beq.n	404344 <critical_factorization+0xa8>
  40432c:	f04f 0801 	mov.w	r8, #1
  404330:	462f      	mov	r7, r5
  404332:	4644      	mov	r4, r8
  404334:	4445      	add	r5, r8
  404336:	e7d4      	b.n	4042e2 <critical_factorization+0x46>
  404338:	4574      	cmp	r4, lr
  40433a:	bf12      	itee	ne
  40433c:	3401      	addne	r4, #1
  40433e:	461d      	moveq	r5, r3
  404340:	2401      	moveq	r4, #1
  404342:	e7b3      	b.n	4042ac <critical_factorization+0x10>
  404344:	4544      	cmp	r4, r8
  404346:	bf12      	itee	ne
  404348:	3401      	addne	r4, #1
  40434a:	461d      	moveq	r5, r3
  40434c:	2401      	moveq	r4, #1
  40434e:	e7c8      	b.n	4042e2 <critical_factorization+0x46>

00404350 <two_way_long_needle>:
  404350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404354:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  404358:	4616      	mov	r6, r2
  40435a:	4605      	mov	r5, r0
  40435c:	468b      	mov	fp, r1
  40435e:	4610      	mov	r0, r2
  404360:	4619      	mov	r1, r3
  404362:	aa03      	add	r2, sp, #12
  404364:	461c      	mov	r4, r3
  404366:	f7ff ff99 	bl	40429c <critical_factorization>
  40436a:	ab03      	add	r3, sp, #12
  40436c:	4681      	mov	r9, r0
  40436e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  404372:	f843 4f04 	str.w	r4, [r3, #4]!
  404376:	4293      	cmp	r3, r2
  404378:	d1fb      	bne.n	404372 <two_way_long_needle+0x22>
  40437a:	b14c      	cbz	r4, 404390 <two_way_long_needle+0x40>
  40437c:	1e63      	subs	r3, r4, #1
  40437e:	1e72      	subs	r2, r6, #1
  404380:	a804      	add	r0, sp, #16
  404382:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404386:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40438a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40438e:	d2f8      	bcs.n	404382 <two_way_long_needle+0x32>
  404390:	9903      	ldr	r1, [sp, #12]
  404392:	464a      	mov	r2, r9
  404394:	4431      	add	r1, r6
  404396:	4630      	mov	r0, r6
  404398:	f003 f852 	bl	407440 <memcmp>
  40439c:	2800      	cmp	r0, #0
  40439e:	d16f      	bne.n	404480 <two_way_long_needle+0x130>
  4043a0:	f109 33ff 	add.w	r3, r9, #4294967295
  4043a4:	9300      	str	r3, [sp, #0]
  4043a6:	18f3      	adds	r3, r6, r3
  4043a8:	4682      	mov	sl, r0
  4043aa:	9301      	str	r3, [sp, #4]
  4043ac:	4623      	mov	r3, r4
  4043ae:	4680      	mov	r8, r0
  4043b0:	4654      	mov	r4, sl
  4043b2:	4658      	mov	r0, fp
  4043b4:	469a      	mov	sl, r3
  4043b6:	eb08 070a 	add.w	r7, r8, sl
  4043ba:	1a3a      	subs	r2, r7, r0
  4043bc:	2100      	movs	r1, #0
  4043be:	4428      	add	r0, r5
  4043c0:	f002 ffee 	bl	4073a0 <memchr>
  4043c4:	2800      	cmp	r0, #0
  4043c6:	d156      	bne.n	404476 <two_way_long_needle+0x126>
  4043c8:	2f00      	cmp	r7, #0
  4043ca:	d054      	beq.n	404476 <two_way_long_needle+0x126>
  4043cc:	19eb      	adds	r3, r5, r7
  4043ce:	aa04      	add	r2, sp, #16
  4043d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4043d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4043d8:	b14b      	cbz	r3, 4043ee <two_way_long_needle+0x9e>
  4043da:	b124      	cbz	r4, 4043e6 <two_way_long_needle+0x96>
  4043dc:	9a03      	ldr	r2, [sp, #12]
  4043de:	4293      	cmp	r3, r2
  4043e0:	d201      	bcs.n	4043e6 <two_way_long_needle+0x96>
  4043e2:	ebaa 0302 	sub.w	r3, sl, r2
  4043e6:	4498      	add	r8, r3
  4043e8:	2400      	movs	r4, #0
  4043ea:	4638      	mov	r0, r7
  4043ec:	e7e3      	b.n	4043b6 <two_way_long_needle+0x66>
  4043ee:	454c      	cmp	r4, r9
  4043f0:	4623      	mov	r3, r4
  4043f2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4043f6:	bf38      	it	cc
  4043f8:	464b      	movcc	r3, r9
  4043fa:	4573      	cmp	r3, lr
  4043fc:	d213      	bcs.n	404426 <two_way_long_needle+0xd6>
  4043fe:	eb08 0203 	add.w	r2, r8, r3
  404402:	f816 c003 	ldrb.w	ip, [r6, r3]
  404406:	5ca8      	ldrb	r0, [r5, r2]
  404408:	4584      	cmp	ip, r0
  40440a:	442a      	add	r2, r5
  40440c:	eb06 0103 	add.w	r1, r6, r3
  404410:	d006      	beq.n	404420 <two_way_long_needle+0xd0>
  404412:	e02c      	b.n	40446e <two_way_long_needle+0x11e>
  404414:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  404418:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40441c:	4584      	cmp	ip, r0
  40441e:	d126      	bne.n	40446e <two_way_long_needle+0x11e>
  404420:	3301      	adds	r3, #1
  404422:	4573      	cmp	r3, lr
  404424:	d3f6      	bcc.n	404414 <two_way_long_needle+0xc4>
  404426:	454c      	cmp	r4, r9
  404428:	9900      	ldr	r1, [sp, #0]
  40442a:	f080 8089 	bcs.w	404540 <two_way_long_needle+0x1f0>
  40442e:	9b00      	ldr	r3, [sp, #0]
  404430:	eb08 0203 	add.w	r2, r8, r3
  404434:	9b01      	ldr	r3, [sp, #4]
  404436:	5ca8      	ldrb	r0, [r5, r2]
  404438:	781b      	ldrb	r3, [r3, #0]
  40443a:	4298      	cmp	r0, r3
  40443c:	442a      	add	r2, r5
  40443e:	d17f      	bne.n	404540 <two_way_long_needle+0x1f0>
  404440:	9801      	ldr	r0, [sp, #4]
  404442:	f104 3bff 	add.w	fp, r4, #4294967295
  404446:	e006      	b.n	404456 <two_way_long_needle+0x106>
  404448:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40444c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  404450:	45f4      	cmp	ip, lr
  404452:	d103      	bne.n	40445c <two_way_long_needle+0x10c>
  404454:	4619      	mov	r1, r3
  404456:	1e4b      	subs	r3, r1, #1
  404458:	459b      	cmp	fp, r3
  40445a:	d1f5      	bne.n	404448 <two_way_long_needle+0xf8>
  40445c:	3401      	adds	r4, #1
  40445e:	428c      	cmp	r4, r1
  404460:	d870      	bhi.n	404544 <two_way_long_needle+0x1f4>
  404462:	9c03      	ldr	r4, [sp, #12]
  404464:	4638      	mov	r0, r7
  404466:	44a0      	add	r8, r4
  404468:	ebaa 0404 	sub.w	r4, sl, r4
  40446c:	e7a3      	b.n	4043b6 <two_way_long_needle+0x66>
  40446e:	f1c9 0201 	rsb	r2, r9, #1
  404472:	4490      	add	r8, r2
  404474:	e7b7      	b.n	4043e6 <two_way_long_needle+0x96>
  404476:	2000      	movs	r0, #0
  404478:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404480:	eba4 0309 	sub.w	r3, r4, r9
  404484:	454b      	cmp	r3, r9
  404486:	bf38      	it	cc
  404488:	464b      	movcc	r3, r9
  40448a:	3301      	adds	r3, #1
  40448c:	f109 38ff 	add.w	r8, r9, #4294967295
  404490:	9303      	str	r3, [sp, #12]
  404492:	eb06 0308 	add.w	r3, r6, r8
  404496:	4658      	mov	r0, fp
  404498:	f04f 0a00 	mov.w	sl, #0
  40449c:	46cb      	mov	fp, r9
  40449e:	4699      	mov	r9, r3
  4044a0:	eb0a 0704 	add.w	r7, sl, r4
  4044a4:	1a3a      	subs	r2, r7, r0
  4044a6:	2100      	movs	r1, #0
  4044a8:	4428      	add	r0, r5
  4044aa:	f002 ff79 	bl	4073a0 <memchr>
  4044ae:	2800      	cmp	r0, #0
  4044b0:	d1e1      	bne.n	404476 <two_way_long_needle+0x126>
  4044b2:	2f00      	cmp	r7, #0
  4044b4:	d0df      	beq.n	404476 <two_way_long_needle+0x126>
  4044b6:	19eb      	adds	r3, r5, r7
  4044b8:	aa04      	add	r2, sp, #16
  4044ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4044c2:	bba3      	cbnz	r3, 40452e <two_way_long_needle+0x1de>
  4044c4:	1e61      	subs	r1, r4, #1
  4044c6:	458b      	cmp	fp, r1
  4044c8:	d215      	bcs.n	4044f6 <two_way_long_needle+0x1a6>
  4044ca:	eb0a 020b 	add.w	r2, sl, fp
  4044ce:	f816 300b 	ldrb.w	r3, [r6, fp]
  4044d2:	f815 e002 	ldrb.w	lr, [r5, r2]
  4044d6:	459e      	cmp	lr, r3
  4044d8:	442a      	add	r2, r5
  4044da:	eb06 000b 	add.w	r0, r6, fp
  4044de:	465b      	mov	r3, fp
  4044e0:	d006      	beq.n	4044f0 <two_way_long_needle+0x1a0>
  4044e2:	e027      	b.n	404534 <two_way_long_needle+0x1e4>
  4044e4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4044e8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4044ec:	45f4      	cmp	ip, lr
  4044ee:	d121      	bne.n	404534 <two_way_long_needle+0x1e4>
  4044f0:	3301      	adds	r3, #1
  4044f2:	428b      	cmp	r3, r1
  4044f4:	d3f6      	bcc.n	4044e4 <two_way_long_needle+0x194>
  4044f6:	f1b8 3fff 	cmp.w	r8, #4294967295
  4044fa:	d011      	beq.n	404520 <two_way_long_needle+0x1d0>
  4044fc:	eb0a 0208 	add.w	r2, sl, r8
  404500:	f899 1000 	ldrb.w	r1, [r9]
  404504:	5cab      	ldrb	r3, [r5, r2]
  404506:	4299      	cmp	r1, r3
  404508:	442a      	add	r2, r5
  40450a:	d10f      	bne.n	40452c <two_way_long_needle+0x1dc>
  40450c:	464b      	mov	r3, r9
  40450e:	e005      	b.n	40451c <two_way_long_needle+0x1cc>
  404510:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  404514:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  404518:	4288      	cmp	r0, r1
  40451a:	d107      	bne.n	40452c <two_way_long_needle+0x1dc>
  40451c:	42b3      	cmp	r3, r6
  40451e:	d1f7      	bne.n	404510 <two_way_long_needle+0x1c0>
  404520:	eb05 000a 	add.w	r0, r5, sl
  404524:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  404528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40452c:	9b03      	ldr	r3, [sp, #12]
  40452e:	449a      	add	sl, r3
  404530:	4638      	mov	r0, r7
  404532:	e7b5      	b.n	4044a0 <two_way_long_needle+0x150>
  404534:	f1cb 0201 	rsb	r2, fp, #1
  404538:	4492      	add	sl, r2
  40453a:	449a      	add	sl, r3
  40453c:	4638      	mov	r0, r7
  40453e:	e7af      	b.n	4044a0 <two_way_long_needle+0x150>
  404540:	4649      	mov	r1, r9
  404542:	e78b      	b.n	40445c <two_way_long_needle+0x10c>
  404544:	eb05 0008 	add.w	r0, r5, r8
  404548:	e796      	b.n	404478 <two_way_long_needle+0x128>
  40454a:	bf00      	nop

0040454c <strstr>:
  40454c:	7802      	ldrb	r2, [r0, #0]
  40454e:	2a00      	cmp	r2, #0
  404550:	f000 8101 	beq.w	404756 <strstr+0x20a>
  404554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404558:	f891 8000 	ldrb.w	r8, [r1]
  40455c:	b085      	sub	sp, #20
  40455e:	4644      	mov	r4, r8
  404560:	f1b8 0f00 	cmp.w	r8, #0
  404564:	d016      	beq.n	404594 <strstr+0x48>
  404566:	4686      	mov	lr, r0
  404568:	f101 0c01 	add.w	ip, r1, #1
  40456c:	2701      	movs	r7, #1
  40456e:	e003      	b.n	404578 <strstr+0x2c>
  404570:	f813 4b01 	ldrb.w	r4, [r3], #1
  404574:	b16c      	cbz	r4, 404592 <strstr+0x46>
  404576:	469c      	mov	ip, r3
  404578:	42a2      	cmp	r2, r4
  40457a:	bf14      	ite	ne
  40457c:	2700      	movne	r7, #0
  40457e:	f007 0701 	andeq.w	r7, r7, #1
  404582:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  404586:	4663      	mov	r3, ip
  404588:	2a00      	cmp	r2, #0
  40458a:	d1f1      	bne.n	404570 <strstr+0x24>
  40458c:	f89c 3000 	ldrb.w	r3, [ip]
  404590:	b9fb      	cbnz	r3, 4045d2 <strstr+0x86>
  404592:	b117      	cbz	r7, 40459a <strstr+0x4e>
  404594:	b005      	add	sp, #20
  404596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40459a:	460e      	mov	r6, r1
  40459c:	4605      	mov	r5, r0
  40459e:	4641      	mov	r1, r8
  4045a0:	3001      	adds	r0, #1
  4045a2:	ebac 0406 	sub.w	r4, ip, r6
  4045a6:	f003 fd2f 	bl	408008 <strchr>
  4045aa:	4607      	mov	r7, r0
  4045ac:	b188      	cbz	r0, 4045d2 <strstr+0x86>
  4045ae:	2c01      	cmp	r4, #1
  4045b0:	d0f0      	beq.n	404594 <strstr+0x48>
  4045b2:	1928      	adds	r0, r5, r4
  4045b4:	4287      	cmp	r7, r0
  4045b6:	bf94      	ite	ls
  4045b8:	1bc1      	subls	r1, r0, r7
  4045ba:	2101      	movhi	r1, #1
  4045bc:	2c1f      	cmp	r4, #31
  4045be:	468b      	mov	fp, r1
  4045c0:	d90b      	bls.n	4045da <strstr+0x8e>
  4045c2:	4623      	mov	r3, r4
  4045c4:	4632      	mov	r2, r6
  4045c6:	4638      	mov	r0, r7
  4045c8:	f7ff fec2 	bl	404350 <two_way_long_needle>
  4045cc:	b005      	add	sp, #20
  4045ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045d2:	2000      	movs	r0, #0
  4045d4:	b005      	add	sp, #20
  4045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045da:	aa03      	add	r2, sp, #12
  4045dc:	4621      	mov	r1, r4
  4045de:	4630      	mov	r0, r6
  4045e0:	f7ff fe5c 	bl	40429c <critical_factorization>
  4045e4:	9903      	ldr	r1, [sp, #12]
  4045e6:	4680      	mov	r8, r0
  4045e8:	4602      	mov	r2, r0
  4045ea:	4431      	add	r1, r6
  4045ec:	4630      	mov	r0, r6
  4045ee:	f002 ff27 	bl	407440 <memcmp>
  4045f2:	2800      	cmp	r0, #0
  4045f4:	d157      	bne.n	4046a6 <strstr+0x15a>
  4045f6:	f108 33ff 	add.w	r3, r8, #4294967295
  4045fa:	9300      	str	r3, [sp, #0]
  4045fc:	18f3      	adds	r3, r6, r3
  4045fe:	4681      	mov	r9, r0
  404600:	4605      	mov	r5, r0
  404602:	9301      	str	r3, [sp, #4]
  404604:	4658      	mov	r0, fp
  404606:	46b2      	mov	sl, r6
  404608:	1966      	adds	r6, r4, r5
  40460a:	1a32      	subs	r2, r6, r0
  40460c:	2100      	movs	r1, #0
  40460e:	4438      	add	r0, r7
  404610:	f002 fec6 	bl	4073a0 <memchr>
  404614:	2800      	cmp	r0, #0
  404616:	d1dc      	bne.n	4045d2 <strstr+0x86>
  404618:	2e00      	cmp	r6, #0
  40461a:	d0da      	beq.n	4045d2 <strstr+0x86>
  40461c:	45c8      	cmp	r8, r9
  40461e:	4643      	mov	r3, r8
  404620:	bf38      	it	cc
  404622:	464b      	movcc	r3, r9
  404624:	429c      	cmp	r4, r3
  404626:	d912      	bls.n	40464e <strstr+0x102>
  404628:	195a      	adds	r2, r3, r5
  40462a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40462e:	5cb8      	ldrb	r0, [r7, r2]
  404630:	4281      	cmp	r1, r0
  404632:	443a      	add	r2, r7
  404634:	eb0a 0e03 	add.w	lr, sl, r3
  404638:	d006      	beq.n	404648 <strstr+0xfc>
  40463a:	e02c      	b.n	404696 <strstr+0x14a>
  40463c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  404640:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404644:	4288      	cmp	r0, r1
  404646:	d126      	bne.n	404696 <strstr+0x14a>
  404648:	3301      	adds	r3, #1
  40464a:	429c      	cmp	r4, r3
  40464c:	d1f6      	bne.n	40463c <strstr+0xf0>
  40464e:	45c8      	cmp	r8, r9
  404650:	9900      	ldr	r1, [sp, #0]
  404652:	f240 8083 	bls.w	40475c <strstr+0x210>
  404656:	9b00      	ldr	r3, [sp, #0]
  404658:	18ea      	adds	r2, r5, r3
  40465a:	9b01      	ldr	r3, [sp, #4]
  40465c:	5cb8      	ldrb	r0, [r7, r2]
  40465e:	781b      	ldrb	r3, [r3, #0]
  404660:	4298      	cmp	r0, r3
  404662:	443a      	add	r2, r7
  404664:	d17a      	bne.n	40475c <strstr+0x210>
  404666:	9801      	ldr	r0, [sp, #4]
  404668:	f109 3bff 	add.w	fp, r9, #4294967295
  40466c:	e006      	b.n	40467c <strstr+0x130>
  40466e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  404672:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  404676:	45f4      	cmp	ip, lr
  404678:	d103      	bne.n	404682 <strstr+0x136>
  40467a:	4619      	mov	r1, r3
  40467c:	1e4b      	subs	r3, r1, #1
  40467e:	455b      	cmp	r3, fp
  404680:	d1f5      	bne.n	40466e <strstr+0x122>
  404682:	f109 0901 	add.w	r9, r9, #1
  404686:	4589      	cmp	r9, r1
  404688:	d857      	bhi.n	40473a <strstr+0x1ee>
  40468a:	9b03      	ldr	r3, [sp, #12]
  40468c:	4630      	mov	r0, r6
  40468e:	441d      	add	r5, r3
  404690:	eba4 0903 	sub.w	r9, r4, r3
  404694:	e7b8      	b.n	404608 <strstr+0xbc>
  404696:	f1c8 0201 	rsb	r2, r8, #1
  40469a:	4415      	add	r5, r2
  40469c:	441d      	add	r5, r3
  40469e:	f04f 0900 	mov.w	r9, #0
  4046a2:	4630      	mov	r0, r6
  4046a4:	e7b0      	b.n	404608 <strstr+0xbc>
  4046a6:	eba4 0308 	sub.w	r3, r4, r8
  4046aa:	4543      	cmp	r3, r8
  4046ac:	bf38      	it	cc
  4046ae:	4643      	movcc	r3, r8
  4046b0:	3301      	adds	r3, #1
  4046b2:	f108 39ff 	add.w	r9, r8, #4294967295
  4046b6:	9303      	str	r3, [sp, #12]
  4046b8:	eb06 0309 	add.w	r3, r6, r9
  4046bc:	4658      	mov	r0, fp
  4046be:	2500      	movs	r5, #0
  4046c0:	46bb      	mov	fp, r7
  4046c2:	469a      	mov	sl, r3
  4046c4:	1967      	adds	r7, r4, r5
  4046c6:	1a3a      	subs	r2, r7, r0
  4046c8:	2100      	movs	r1, #0
  4046ca:	4458      	add	r0, fp
  4046cc:	f002 fe68 	bl	4073a0 <memchr>
  4046d0:	2800      	cmp	r0, #0
  4046d2:	f47f af7e 	bne.w	4045d2 <strstr+0x86>
  4046d6:	2f00      	cmp	r7, #0
  4046d8:	f43f af7b 	beq.w	4045d2 <strstr+0x86>
  4046dc:	4544      	cmp	r4, r8
  4046de:	d915      	bls.n	40470c <strstr+0x1c0>
  4046e0:	eb08 0205 	add.w	r2, r8, r5
  4046e4:	f816 3008 	ldrb.w	r3, [r6, r8]
  4046e8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4046ec:	4298      	cmp	r0, r3
  4046ee:	445a      	add	r2, fp
  4046f0:	eb06 0108 	add.w	r1, r6, r8
  4046f4:	4643      	mov	r3, r8
  4046f6:	d006      	beq.n	404706 <strstr+0x1ba>
  4046f8:	e023      	b.n	404742 <strstr+0x1f6>
  4046fa:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4046fe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404702:	4586      	cmp	lr, r0
  404704:	d11d      	bne.n	404742 <strstr+0x1f6>
  404706:	3301      	adds	r3, #1
  404708:	429c      	cmp	r4, r3
  40470a:	d1f6      	bne.n	4046fa <strstr+0x1ae>
  40470c:	f1b9 3fff 	cmp.w	r9, #4294967295
  404710:	d012      	beq.n	404738 <strstr+0x1ec>
  404712:	eb05 0209 	add.w	r2, r5, r9
  404716:	f89a 3000 	ldrb.w	r3, [sl]
  40471a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40471e:	4299      	cmp	r1, r3
  404720:	445a      	add	r2, fp
  404722:	d114      	bne.n	40474e <strstr+0x202>
  404724:	4653      	mov	r3, sl
  404726:	e005      	b.n	404734 <strstr+0x1e8>
  404728:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40472c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  404730:	4288      	cmp	r0, r1
  404732:	d10c      	bne.n	40474e <strstr+0x202>
  404734:	42b3      	cmp	r3, r6
  404736:	d1f7      	bne.n	404728 <strstr+0x1dc>
  404738:	465f      	mov	r7, fp
  40473a:	1978      	adds	r0, r7, r5
  40473c:	b005      	add	sp, #20
  40473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404742:	f1c8 0201 	rsb	r2, r8, #1
  404746:	4415      	add	r5, r2
  404748:	441d      	add	r5, r3
  40474a:	4638      	mov	r0, r7
  40474c:	e7ba      	b.n	4046c4 <strstr+0x178>
  40474e:	9b03      	ldr	r3, [sp, #12]
  404750:	4638      	mov	r0, r7
  404752:	441d      	add	r5, r3
  404754:	e7b6      	b.n	4046c4 <strstr+0x178>
  404756:	780b      	ldrb	r3, [r1, #0]
  404758:	b913      	cbnz	r3, 404760 <strstr+0x214>
  40475a:	4770      	bx	lr
  40475c:	4641      	mov	r1, r8
  40475e:	e790      	b.n	404682 <strstr+0x136>
  404760:	2000      	movs	r0, #0
  404762:	4770      	bx	lr

00404764 <_svfprintf_r>:
  404764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404768:	b0c3      	sub	sp, #268	; 0x10c
  40476a:	460c      	mov	r4, r1
  40476c:	910b      	str	r1, [sp, #44]	; 0x2c
  40476e:	4692      	mov	sl, r2
  404770:	930f      	str	r3, [sp, #60]	; 0x3c
  404772:	900c      	str	r0, [sp, #48]	; 0x30
  404774:	f002 fb3a 	bl	406dec <_localeconv_r>
  404778:	6803      	ldr	r3, [r0, #0]
  40477a:	931a      	str	r3, [sp, #104]	; 0x68
  40477c:	4618      	mov	r0, r3
  40477e:	f7ff fd1f 	bl	4041c0 <strlen>
  404782:	89a3      	ldrh	r3, [r4, #12]
  404784:	9019      	str	r0, [sp, #100]	; 0x64
  404786:	0619      	lsls	r1, r3, #24
  404788:	d503      	bpl.n	404792 <_svfprintf_r+0x2e>
  40478a:	6923      	ldr	r3, [r4, #16]
  40478c:	2b00      	cmp	r3, #0
  40478e:	f001 8001 	beq.w	405794 <_svfprintf_r+0x1030>
  404792:	2300      	movs	r3, #0
  404794:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404798:	9313      	str	r3, [sp, #76]	; 0x4c
  40479a:	9314      	str	r3, [sp, #80]	; 0x50
  40479c:	9315      	str	r3, [sp, #84]	; 0x54
  40479e:	9327      	str	r3, [sp, #156]	; 0x9c
  4047a0:	9326      	str	r3, [sp, #152]	; 0x98
  4047a2:	9318      	str	r3, [sp, #96]	; 0x60
  4047a4:	931b      	str	r3, [sp, #108]	; 0x6c
  4047a6:	9309      	str	r3, [sp, #36]	; 0x24
  4047a8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4047ac:	46c8      	mov	r8, r9
  4047ae:	9316      	str	r3, [sp, #88]	; 0x58
  4047b0:	9317      	str	r3, [sp, #92]	; 0x5c
  4047b2:	f89a 3000 	ldrb.w	r3, [sl]
  4047b6:	4654      	mov	r4, sl
  4047b8:	b1e3      	cbz	r3, 4047f4 <_svfprintf_r+0x90>
  4047ba:	2b25      	cmp	r3, #37	; 0x25
  4047bc:	d102      	bne.n	4047c4 <_svfprintf_r+0x60>
  4047be:	e019      	b.n	4047f4 <_svfprintf_r+0x90>
  4047c0:	2b25      	cmp	r3, #37	; 0x25
  4047c2:	d003      	beq.n	4047cc <_svfprintf_r+0x68>
  4047c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4047c8:	2b00      	cmp	r3, #0
  4047ca:	d1f9      	bne.n	4047c0 <_svfprintf_r+0x5c>
  4047cc:	eba4 050a 	sub.w	r5, r4, sl
  4047d0:	b185      	cbz	r5, 4047f4 <_svfprintf_r+0x90>
  4047d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4047d6:	f8c8 a000 	str.w	sl, [r8]
  4047da:	3301      	adds	r3, #1
  4047dc:	442a      	add	r2, r5
  4047de:	2b07      	cmp	r3, #7
  4047e0:	f8c8 5004 	str.w	r5, [r8, #4]
  4047e4:	9227      	str	r2, [sp, #156]	; 0x9c
  4047e6:	9326      	str	r3, [sp, #152]	; 0x98
  4047e8:	dc7f      	bgt.n	4048ea <_svfprintf_r+0x186>
  4047ea:	f108 0808 	add.w	r8, r8, #8
  4047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047f0:	442b      	add	r3, r5
  4047f2:	9309      	str	r3, [sp, #36]	; 0x24
  4047f4:	7823      	ldrb	r3, [r4, #0]
  4047f6:	2b00      	cmp	r3, #0
  4047f8:	d07f      	beq.n	4048fa <_svfprintf_r+0x196>
  4047fa:	2300      	movs	r3, #0
  4047fc:	461a      	mov	r2, r3
  4047fe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404802:	4619      	mov	r1, r3
  404804:	930d      	str	r3, [sp, #52]	; 0x34
  404806:	469b      	mov	fp, r3
  404808:	f04f 30ff 	mov.w	r0, #4294967295
  40480c:	7863      	ldrb	r3, [r4, #1]
  40480e:	900a      	str	r0, [sp, #40]	; 0x28
  404810:	f104 0a01 	add.w	sl, r4, #1
  404814:	f10a 0a01 	add.w	sl, sl, #1
  404818:	f1a3 0020 	sub.w	r0, r3, #32
  40481c:	2858      	cmp	r0, #88	; 0x58
  40481e:	f200 83c0 	bhi.w	404fa2 <_svfprintf_r+0x83e>
  404822:	e8df f010 	tbh	[pc, r0, lsl #1]
  404826:	0238      	.short	0x0238
  404828:	03be03be 	.word	0x03be03be
  40482c:	03be0240 	.word	0x03be0240
  404830:	03be03be 	.word	0x03be03be
  404834:	03be03be 	.word	0x03be03be
  404838:	024503be 	.word	0x024503be
  40483c:	03be0203 	.word	0x03be0203
  404840:	026b005d 	.word	0x026b005d
  404844:	028603be 	.word	0x028603be
  404848:	039c039c 	.word	0x039c039c
  40484c:	039c039c 	.word	0x039c039c
  404850:	039c039c 	.word	0x039c039c
  404854:	039c039c 	.word	0x039c039c
  404858:	03be039c 	.word	0x03be039c
  40485c:	03be03be 	.word	0x03be03be
  404860:	03be03be 	.word	0x03be03be
  404864:	03be03be 	.word	0x03be03be
  404868:	03be03be 	.word	0x03be03be
  40486c:	033703be 	.word	0x033703be
  404870:	03be0357 	.word	0x03be0357
  404874:	03be0357 	.word	0x03be0357
  404878:	03be03be 	.word	0x03be03be
  40487c:	039703be 	.word	0x039703be
  404880:	03be03be 	.word	0x03be03be
  404884:	03be03ac 	.word	0x03be03ac
  404888:	03be03be 	.word	0x03be03be
  40488c:	03be03be 	.word	0x03be03be
  404890:	03be0259 	.word	0x03be0259
  404894:	031e03be 	.word	0x031e03be
  404898:	03be03be 	.word	0x03be03be
  40489c:	03be03be 	.word	0x03be03be
  4048a0:	03be03be 	.word	0x03be03be
  4048a4:	03be03be 	.word	0x03be03be
  4048a8:	03be03be 	.word	0x03be03be
  4048ac:	02db02c6 	.word	0x02db02c6
  4048b0:	03570357 	.word	0x03570357
  4048b4:	028b0357 	.word	0x028b0357
  4048b8:	03be02db 	.word	0x03be02db
  4048bc:	029003be 	.word	0x029003be
  4048c0:	029d03be 	.word	0x029d03be
  4048c4:	02b401cc 	.word	0x02b401cc
  4048c8:	03be0208 	.word	0x03be0208
  4048cc:	03be01e1 	.word	0x03be01e1
  4048d0:	03be007e 	.word	0x03be007e
  4048d4:	020d03be 	.word	0x020d03be
  4048d8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4048da:	930f      	str	r3, [sp, #60]	; 0x3c
  4048dc:	4240      	negs	r0, r0
  4048de:	900d      	str	r0, [sp, #52]	; 0x34
  4048e0:	f04b 0b04 	orr.w	fp, fp, #4
  4048e4:	f89a 3000 	ldrb.w	r3, [sl]
  4048e8:	e794      	b.n	404814 <_svfprintf_r+0xb0>
  4048ea:	aa25      	add	r2, sp, #148	; 0x94
  4048ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048f0:	f003 fbfe 	bl	4080f0 <__ssprint_r>
  4048f4:	b940      	cbnz	r0, 404908 <_svfprintf_r+0x1a4>
  4048f6:	46c8      	mov	r8, r9
  4048f8:	e779      	b.n	4047ee <_svfprintf_r+0x8a>
  4048fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4048fc:	b123      	cbz	r3, 404908 <_svfprintf_r+0x1a4>
  4048fe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404900:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404902:	aa25      	add	r2, sp, #148	; 0x94
  404904:	f003 fbf4 	bl	4080f0 <__ssprint_r>
  404908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40490a:	899b      	ldrh	r3, [r3, #12]
  40490c:	f013 0f40 	tst.w	r3, #64	; 0x40
  404910:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404912:	bf18      	it	ne
  404914:	f04f 33ff 	movne.w	r3, #4294967295
  404918:	9309      	str	r3, [sp, #36]	; 0x24
  40491a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40491c:	b043      	add	sp, #268	; 0x10c
  40491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404922:	f01b 0f20 	tst.w	fp, #32
  404926:	9311      	str	r3, [sp, #68]	; 0x44
  404928:	f040 81dd 	bne.w	404ce6 <_svfprintf_r+0x582>
  40492c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40492e:	f01b 0f10 	tst.w	fp, #16
  404932:	4613      	mov	r3, r2
  404934:	f040 856c 	bne.w	405410 <_svfprintf_r+0xcac>
  404938:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40493c:	f000 8568 	beq.w	405410 <_svfprintf_r+0xcac>
  404940:	8814      	ldrh	r4, [r2, #0]
  404942:	3204      	adds	r2, #4
  404944:	2500      	movs	r5, #0
  404946:	2301      	movs	r3, #1
  404948:	920f      	str	r2, [sp, #60]	; 0x3c
  40494a:	2700      	movs	r7, #0
  40494c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404950:	990a      	ldr	r1, [sp, #40]	; 0x28
  404952:	1c4a      	adds	r2, r1, #1
  404954:	f000 8265 	beq.w	404e22 <_svfprintf_r+0x6be>
  404958:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40495c:	9207      	str	r2, [sp, #28]
  40495e:	ea54 0205 	orrs.w	r2, r4, r5
  404962:	f040 8264 	bne.w	404e2e <_svfprintf_r+0x6ca>
  404966:	2900      	cmp	r1, #0
  404968:	f040 8439 	bne.w	4051de <_svfprintf_r+0xa7a>
  40496c:	2b00      	cmp	r3, #0
  40496e:	f040 84d4 	bne.w	40531a <_svfprintf_r+0xbb6>
  404972:	f01b 0301 	ands.w	r3, fp, #1
  404976:	930e      	str	r3, [sp, #56]	; 0x38
  404978:	f000 8602 	beq.w	405580 <_svfprintf_r+0xe1c>
  40497c:	ae42      	add	r6, sp, #264	; 0x108
  40497e:	2330      	movs	r3, #48	; 0x30
  404980:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404988:	4293      	cmp	r3, r2
  40498a:	bfb8      	it	lt
  40498c:	4613      	movlt	r3, r2
  40498e:	9308      	str	r3, [sp, #32]
  404990:	2300      	movs	r3, #0
  404992:	9312      	str	r3, [sp, #72]	; 0x48
  404994:	b117      	cbz	r7, 40499c <_svfprintf_r+0x238>
  404996:	9b08      	ldr	r3, [sp, #32]
  404998:	3301      	adds	r3, #1
  40499a:	9308      	str	r3, [sp, #32]
  40499c:	9b07      	ldr	r3, [sp, #28]
  40499e:	f013 0302 	ands.w	r3, r3, #2
  4049a2:	9310      	str	r3, [sp, #64]	; 0x40
  4049a4:	d002      	beq.n	4049ac <_svfprintf_r+0x248>
  4049a6:	9b08      	ldr	r3, [sp, #32]
  4049a8:	3302      	adds	r3, #2
  4049aa:	9308      	str	r3, [sp, #32]
  4049ac:	9b07      	ldr	r3, [sp, #28]
  4049ae:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4049b2:	f040 830d 	bne.w	404fd0 <_svfprintf_r+0x86c>
  4049b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4049b8:	9a08      	ldr	r2, [sp, #32]
  4049ba:	eba3 0b02 	sub.w	fp, r3, r2
  4049be:	f1bb 0f00 	cmp.w	fp, #0
  4049c2:	f340 8305 	ble.w	404fd0 <_svfprintf_r+0x86c>
  4049c6:	f1bb 0f10 	cmp.w	fp, #16
  4049ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4049ce:	dd29      	ble.n	404a24 <_svfprintf_r+0x2c0>
  4049d0:	4643      	mov	r3, r8
  4049d2:	4621      	mov	r1, r4
  4049d4:	46a8      	mov	r8, r5
  4049d6:	2710      	movs	r7, #16
  4049d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4049da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4049dc:	e006      	b.n	4049ec <_svfprintf_r+0x288>
  4049de:	f1ab 0b10 	sub.w	fp, fp, #16
  4049e2:	f1bb 0f10 	cmp.w	fp, #16
  4049e6:	f103 0308 	add.w	r3, r3, #8
  4049ea:	dd18      	ble.n	404a1e <_svfprintf_r+0x2ba>
  4049ec:	3201      	adds	r2, #1
  4049ee:	48b7      	ldr	r0, [pc, #732]	; (404ccc <_svfprintf_r+0x568>)
  4049f0:	9226      	str	r2, [sp, #152]	; 0x98
  4049f2:	3110      	adds	r1, #16
  4049f4:	2a07      	cmp	r2, #7
  4049f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4049f8:	e883 0081 	stmia.w	r3, {r0, r7}
  4049fc:	ddef      	ble.n	4049de <_svfprintf_r+0x27a>
  4049fe:	aa25      	add	r2, sp, #148	; 0x94
  404a00:	4629      	mov	r1, r5
  404a02:	4620      	mov	r0, r4
  404a04:	f003 fb74 	bl	4080f0 <__ssprint_r>
  404a08:	2800      	cmp	r0, #0
  404a0a:	f47f af7d 	bne.w	404908 <_svfprintf_r+0x1a4>
  404a0e:	f1ab 0b10 	sub.w	fp, fp, #16
  404a12:	f1bb 0f10 	cmp.w	fp, #16
  404a16:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404a18:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404a1a:	464b      	mov	r3, r9
  404a1c:	dce6      	bgt.n	4049ec <_svfprintf_r+0x288>
  404a1e:	4645      	mov	r5, r8
  404a20:	460c      	mov	r4, r1
  404a22:	4698      	mov	r8, r3
  404a24:	3201      	adds	r2, #1
  404a26:	4ba9      	ldr	r3, [pc, #676]	; (404ccc <_svfprintf_r+0x568>)
  404a28:	9226      	str	r2, [sp, #152]	; 0x98
  404a2a:	445c      	add	r4, fp
  404a2c:	2a07      	cmp	r2, #7
  404a2e:	9427      	str	r4, [sp, #156]	; 0x9c
  404a30:	e888 0808 	stmia.w	r8, {r3, fp}
  404a34:	f300 8495 	bgt.w	405362 <_svfprintf_r+0xbfe>
  404a38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404a3c:	f108 0808 	add.w	r8, r8, #8
  404a40:	b177      	cbz	r7, 404a60 <_svfprintf_r+0x2fc>
  404a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a44:	3301      	adds	r3, #1
  404a46:	3401      	adds	r4, #1
  404a48:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404a4c:	2201      	movs	r2, #1
  404a4e:	2b07      	cmp	r3, #7
  404a50:	9427      	str	r4, [sp, #156]	; 0x9c
  404a52:	9326      	str	r3, [sp, #152]	; 0x98
  404a54:	e888 0006 	stmia.w	r8, {r1, r2}
  404a58:	f300 83d8 	bgt.w	40520c <_svfprintf_r+0xaa8>
  404a5c:	f108 0808 	add.w	r8, r8, #8
  404a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a62:	b16b      	cbz	r3, 404a80 <_svfprintf_r+0x31c>
  404a64:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a66:	3301      	adds	r3, #1
  404a68:	3402      	adds	r4, #2
  404a6a:	a91e      	add	r1, sp, #120	; 0x78
  404a6c:	2202      	movs	r2, #2
  404a6e:	2b07      	cmp	r3, #7
  404a70:	9427      	str	r4, [sp, #156]	; 0x9c
  404a72:	9326      	str	r3, [sp, #152]	; 0x98
  404a74:	e888 0006 	stmia.w	r8, {r1, r2}
  404a78:	f300 83d3 	bgt.w	405222 <_svfprintf_r+0xabe>
  404a7c:	f108 0808 	add.w	r8, r8, #8
  404a80:	2d80      	cmp	r5, #128	; 0x80
  404a82:	f000 8313 	beq.w	4050ac <_svfprintf_r+0x948>
  404a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a8a:	1a9f      	subs	r7, r3, r2
  404a8c:	2f00      	cmp	r7, #0
  404a8e:	dd36      	ble.n	404afe <_svfprintf_r+0x39a>
  404a90:	2f10      	cmp	r7, #16
  404a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a94:	4d8e      	ldr	r5, [pc, #568]	; (404cd0 <_svfprintf_r+0x56c>)
  404a96:	dd27      	ble.n	404ae8 <_svfprintf_r+0x384>
  404a98:	4642      	mov	r2, r8
  404a9a:	4621      	mov	r1, r4
  404a9c:	46b0      	mov	r8, r6
  404a9e:	f04f 0b10 	mov.w	fp, #16
  404aa2:	462e      	mov	r6, r5
  404aa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404aa6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404aa8:	e004      	b.n	404ab4 <_svfprintf_r+0x350>
  404aaa:	3f10      	subs	r7, #16
  404aac:	2f10      	cmp	r7, #16
  404aae:	f102 0208 	add.w	r2, r2, #8
  404ab2:	dd15      	ble.n	404ae0 <_svfprintf_r+0x37c>
  404ab4:	3301      	adds	r3, #1
  404ab6:	3110      	adds	r1, #16
  404ab8:	2b07      	cmp	r3, #7
  404aba:	9127      	str	r1, [sp, #156]	; 0x9c
  404abc:	9326      	str	r3, [sp, #152]	; 0x98
  404abe:	e882 0840 	stmia.w	r2, {r6, fp}
  404ac2:	ddf2      	ble.n	404aaa <_svfprintf_r+0x346>
  404ac4:	aa25      	add	r2, sp, #148	; 0x94
  404ac6:	4629      	mov	r1, r5
  404ac8:	4620      	mov	r0, r4
  404aca:	f003 fb11 	bl	4080f0 <__ssprint_r>
  404ace:	2800      	cmp	r0, #0
  404ad0:	f47f af1a 	bne.w	404908 <_svfprintf_r+0x1a4>
  404ad4:	3f10      	subs	r7, #16
  404ad6:	2f10      	cmp	r7, #16
  404ad8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404adc:	464a      	mov	r2, r9
  404ade:	dce9      	bgt.n	404ab4 <_svfprintf_r+0x350>
  404ae0:	4635      	mov	r5, r6
  404ae2:	460c      	mov	r4, r1
  404ae4:	4646      	mov	r6, r8
  404ae6:	4690      	mov	r8, r2
  404ae8:	3301      	adds	r3, #1
  404aea:	443c      	add	r4, r7
  404aec:	2b07      	cmp	r3, #7
  404aee:	9427      	str	r4, [sp, #156]	; 0x9c
  404af0:	9326      	str	r3, [sp, #152]	; 0x98
  404af2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404af6:	f300 837e 	bgt.w	4051f6 <_svfprintf_r+0xa92>
  404afa:	f108 0808 	add.w	r8, r8, #8
  404afe:	9b07      	ldr	r3, [sp, #28]
  404b00:	05df      	lsls	r7, r3, #23
  404b02:	f100 8267 	bmi.w	404fd4 <_svfprintf_r+0x870>
  404b06:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b08:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b0a:	f8c8 6000 	str.w	r6, [r8]
  404b0e:	3301      	adds	r3, #1
  404b10:	440c      	add	r4, r1
  404b12:	2b07      	cmp	r3, #7
  404b14:	9427      	str	r4, [sp, #156]	; 0x9c
  404b16:	f8c8 1004 	str.w	r1, [r8, #4]
  404b1a:	9326      	str	r3, [sp, #152]	; 0x98
  404b1c:	f300 834a 	bgt.w	4051b4 <_svfprintf_r+0xa50>
  404b20:	f108 0808 	add.w	r8, r8, #8
  404b24:	9b07      	ldr	r3, [sp, #28]
  404b26:	075b      	lsls	r3, r3, #29
  404b28:	d53a      	bpl.n	404ba0 <_svfprintf_r+0x43c>
  404b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404b2c:	9a08      	ldr	r2, [sp, #32]
  404b2e:	1a9d      	subs	r5, r3, r2
  404b30:	2d00      	cmp	r5, #0
  404b32:	dd35      	ble.n	404ba0 <_svfprintf_r+0x43c>
  404b34:	2d10      	cmp	r5, #16
  404b36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b38:	dd20      	ble.n	404b7c <_svfprintf_r+0x418>
  404b3a:	2610      	movs	r6, #16
  404b3c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404b3e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404b42:	e004      	b.n	404b4e <_svfprintf_r+0x3ea>
  404b44:	3d10      	subs	r5, #16
  404b46:	2d10      	cmp	r5, #16
  404b48:	f108 0808 	add.w	r8, r8, #8
  404b4c:	dd16      	ble.n	404b7c <_svfprintf_r+0x418>
  404b4e:	3301      	adds	r3, #1
  404b50:	4a5e      	ldr	r2, [pc, #376]	; (404ccc <_svfprintf_r+0x568>)
  404b52:	9326      	str	r3, [sp, #152]	; 0x98
  404b54:	3410      	adds	r4, #16
  404b56:	2b07      	cmp	r3, #7
  404b58:	9427      	str	r4, [sp, #156]	; 0x9c
  404b5a:	e888 0044 	stmia.w	r8, {r2, r6}
  404b5e:	ddf1      	ble.n	404b44 <_svfprintf_r+0x3e0>
  404b60:	aa25      	add	r2, sp, #148	; 0x94
  404b62:	4659      	mov	r1, fp
  404b64:	4638      	mov	r0, r7
  404b66:	f003 fac3 	bl	4080f0 <__ssprint_r>
  404b6a:	2800      	cmp	r0, #0
  404b6c:	f47f aecc 	bne.w	404908 <_svfprintf_r+0x1a4>
  404b70:	3d10      	subs	r5, #16
  404b72:	2d10      	cmp	r5, #16
  404b74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b78:	46c8      	mov	r8, r9
  404b7a:	dce8      	bgt.n	404b4e <_svfprintf_r+0x3ea>
  404b7c:	3301      	adds	r3, #1
  404b7e:	4a53      	ldr	r2, [pc, #332]	; (404ccc <_svfprintf_r+0x568>)
  404b80:	9326      	str	r3, [sp, #152]	; 0x98
  404b82:	442c      	add	r4, r5
  404b84:	2b07      	cmp	r3, #7
  404b86:	9427      	str	r4, [sp, #156]	; 0x9c
  404b88:	e888 0024 	stmia.w	r8, {r2, r5}
  404b8c:	dd08      	ble.n	404ba0 <_svfprintf_r+0x43c>
  404b8e:	aa25      	add	r2, sp, #148	; 0x94
  404b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b94:	f003 faac 	bl	4080f0 <__ssprint_r>
  404b98:	2800      	cmp	r0, #0
  404b9a:	f47f aeb5 	bne.w	404908 <_svfprintf_r+0x1a4>
  404b9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404ba4:	9908      	ldr	r1, [sp, #32]
  404ba6:	428a      	cmp	r2, r1
  404ba8:	bfac      	ite	ge
  404baa:	189b      	addge	r3, r3, r2
  404bac:	185b      	addlt	r3, r3, r1
  404bae:	9309      	str	r3, [sp, #36]	; 0x24
  404bb0:	2c00      	cmp	r4, #0
  404bb2:	f040 830a 	bne.w	4051ca <_svfprintf_r+0xa66>
  404bb6:	2300      	movs	r3, #0
  404bb8:	9326      	str	r3, [sp, #152]	; 0x98
  404bba:	46c8      	mov	r8, r9
  404bbc:	e5f9      	b.n	4047b2 <_svfprintf_r+0x4e>
  404bbe:	9311      	str	r3, [sp, #68]	; 0x44
  404bc0:	f01b 0320 	ands.w	r3, fp, #32
  404bc4:	f040 81e2 	bne.w	404f8c <_svfprintf_r+0x828>
  404bc8:	f01b 0210 	ands.w	r2, fp, #16
  404bcc:	f040 842c 	bne.w	405428 <_svfprintf_r+0xcc4>
  404bd0:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404bd4:	f000 8428 	beq.w	405428 <_svfprintf_r+0xcc4>
  404bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404bda:	4613      	mov	r3, r2
  404bdc:	460a      	mov	r2, r1
  404bde:	3204      	adds	r2, #4
  404be0:	880c      	ldrh	r4, [r1, #0]
  404be2:	920f      	str	r2, [sp, #60]	; 0x3c
  404be4:	2500      	movs	r5, #0
  404be6:	e6b0      	b.n	40494a <_svfprintf_r+0x1e6>
  404be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bea:	9311      	str	r3, [sp, #68]	; 0x44
  404bec:	6816      	ldr	r6, [r2, #0]
  404bee:	2400      	movs	r4, #0
  404bf0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404bf4:	1d15      	adds	r5, r2, #4
  404bf6:	2e00      	cmp	r6, #0
  404bf8:	f000 86a5 	beq.w	405946 <_svfprintf_r+0x11e2>
  404bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404bfe:	1c53      	adds	r3, r2, #1
  404c00:	f000 8607 	beq.w	405812 <_svfprintf_r+0x10ae>
  404c04:	4621      	mov	r1, r4
  404c06:	4630      	mov	r0, r6
  404c08:	f002 fbca 	bl	4073a0 <memchr>
  404c0c:	2800      	cmp	r0, #0
  404c0e:	f000 86df 	beq.w	4059d0 <_svfprintf_r+0x126c>
  404c12:	1b83      	subs	r3, r0, r6
  404c14:	930e      	str	r3, [sp, #56]	; 0x38
  404c16:	940a      	str	r4, [sp, #40]	; 0x28
  404c18:	950f      	str	r5, [sp, #60]	; 0x3c
  404c1a:	f8cd b01c 	str.w	fp, [sp, #28]
  404c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c22:	9308      	str	r3, [sp, #32]
  404c24:	9412      	str	r4, [sp, #72]	; 0x48
  404c26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c2a:	e6b3      	b.n	404994 <_svfprintf_r+0x230>
  404c2c:	f89a 3000 	ldrb.w	r3, [sl]
  404c30:	2201      	movs	r2, #1
  404c32:	212b      	movs	r1, #43	; 0x2b
  404c34:	e5ee      	b.n	404814 <_svfprintf_r+0xb0>
  404c36:	f04b 0b20 	orr.w	fp, fp, #32
  404c3a:	f89a 3000 	ldrb.w	r3, [sl]
  404c3e:	e5e9      	b.n	404814 <_svfprintf_r+0xb0>
  404c40:	9311      	str	r3, [sp, #68]	; 0x44
  404c42:	2a00      	cmp	r2, #0
  404c44:	f040 878d 	bne.w	405b62 <_svfprintf_r+0x13fe>
  404c48:	4b22      	ldr	r3, [pc, #136]	; (404cd4 <_svfprintf_r+0x570>)
  404c4a:	9318      	str	r3, [sp, #96]	; 0x60
  404c4c:	f01b 0f20 	tst.w	fp, #32
  404c50:	f040 8111 	bne.w	404e76 <_svfprintf_r+0x712>
  404c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c56:	f01b 0f10 	tst.w	fp, #16
  404c5a:	4613      	mov	r3, r2
  404c5c:	f040 83df 	bne.w	40541e <_svfprintf_r+0xcba>
  404c60:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404c64:	f000 83db 	beq.w	40541e <_svfprintf_r+0xcba>
  404c68:	3304      	adds	r3, #4
  404c6a:	8814      	ldrh	r4, [r2, #0]
  404c6c:	930f      	str	r3, [sp, #60]	; 0x3c
  404c6e:	2500      	movs	r5, #0
  404c70:	f01b 0f01 	tst.w	fp, #1
  404c74:	f000 810c 	beq.w	404e90 <_svfprintf_r+0x72c>
  404c78:	ea54 0305 	orrs.w	r3, r4, r5
  404c7c:	f000 8108 	beq.w	404e90 <_svfprintf_r+0x72c>
  404c80:	2330      	movs	r3, #48	; 0x30
  404c82:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404c86:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404c8a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404c8e:	f04b 0b02 	orr.w	fp, fp, #2
  404c92:	2302      	movs	r3, #2
  404c94:	e659      	b.n	40494a <_svfprintf_r+0x1e6>
  404c96:	f89a 3000 	ldrb.w	r3, [sl]
  404c9a:	2900      	cmp	r1, #0
  404c9c:	f47f adba 	bne.w	404814 <_svfprintf_r+0xb0>
  404ca0:	2201      	movs	r2, #1
  404ca2:	2120      	movs	r1, #32
  404ca4:	e5b6      	b.n	404814 <_svfprintf_r+0xb0>
  404ca6:	f04b 0b01 	orr.w	fp, fp, #1
  404caa:	f89a 3000 	ldrb.w	r3, [sl]
  404cae:	e5b1      	b.n	404814 <_svfprintf_r+0xb0>
  404cb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404cb2:	6823      	ldr	r3, [r4, #0]
  404cb4:	930d      	str	r3, [sp, #52]	; 0x34
  404cb6:	4618      	mov	r0, r3
  404cb8:	2800      	cmp	r0, #0
  404cba:	4623      	mov	r3, r4
  404cbc:	f103 0304 	add.w	r3, r3, #4
  404cc0:	f6ff ae0a 	blt.w	4048d8 <_svfprintf_r+0x174>
  404cc4:	930f      	str	r3, [sp, #60]	; 0x3c
  404cc6:	f89a 3000 	ldrb.w	r3, [sl]
  404cca:	e5a3      	b.n	404814 <_svfprintf_r+0xb0>
  404ccc:	004099f8 	.word	0x004099f8
  404cd0:	00409a08 	.word	0x00409a08
  404cd4:	004099d8 	.word	0x004099d8
  404cd8:	f04b 0b10 	orr.w	fp, fp, #16
  404cdc:	f01b 0f20 	tst.w	fp, #32
  404ce0:	9311      	str	r3, [sp, #68]	; 0x44
  404ce2:	f43f ae23 	beq.w	40492c <_svfprintf_r+0x1c8>
  404ce6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ce8:	3507      	adds	r5, #7
  404cea:	f025 0307 	bic.w	r3, r5, #7
  404cee:	f103 0208 	add.w	r2, r3, #8
  404cf2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404cf6:	920f      	str	r2, [sp, #60]	; 0x3c
  404cf8:	2301      	movs	r3, #1
  404cfa:	e626      	b.n	40494a <_svfprintf_r+0x1e6>
  404cfc:	f89a 3000 	ldrb.w	r3, [sl]
  404d00:	2b2a      	cmp	r3, #42	; 0x2a
  404d02:	f10a 0401 	add.w	r4, sl, #1
  404d06:	f000 871f 	beq.w	405b48 <_svfprintf_r+0x13e4>
  404d0a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d0e:	2809      	cmp	r0, #9
  404d10:	46a2      	mov	sl, r4
  404d12:	f200 86ab 	bhi.w	405a6c <_svfprintf_r+0x1308>
  404d16:	2300      	movs	r3, #0
  404d18:	461c      	mov	r4, r3
  404d1a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404d1e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d22:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404d26:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d2a:	2809      	cmp	r0, #9
  404d2c:	d9f5      	bls.n	404d1a <_svfprintf_r+0x5b6>
  404d2e:	940a      	str	r4, [sp, #40]	; 0x28
  404d30:	e572      	b.n	404818 <_svfprintf_r+0xb4>
  404d32:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404d36:	f89a 3000 	ldrb.w	r3, [sl]
  404d3a:	e56b      	b.n	404814 <_svfprintf_r+0xb0>
  404d3c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404d40:	f89a 3000 	ldrb.w	r3, [sl]
  404d44:	e566      	b.n	404814 <_svfprintf_r+0xb0>
  404d46:	f89a 3000 	ldrb.w	r3, [sl]
  404d4a:	2b6c      	cmp	r3, #108	; 0x6c
  404d4c:	bf03      	ittte	eq
  404d4e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404d52:	f04b 0b20 	orreq.w	fp, fp, #32
  404d56:	f10a 0a01 	addeq.w	sl, sl, #1
  404d5a:	f04b 0b10 	orrne.w	fp, fp, #16
  404d5e:	e559      	b.n	404814 <_svfprintf_r+0xb0>
  404d60:	2a00      	cmp	r2, #0
  404d62:	f040 8709 	bne.w	405b78 <_svfprintf_r+0x1414>
  404d66:	f01b 0f20 	tst.w	fp, #32
  404d6a:	f040 84f7 	bne.w	40575c <_svfprintf_r+0xff8>
  404d6e:	f01b 0f10 	tst.w	fp, #16
  404d72:	f040 84aa 	bne.w	4056ca <_svfprintf_r+0xf66>
  404d76:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404d7a:	f000 84a6 	beq.w	4056ca <_svfprintf_r+0xf66>
  404d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d80:	6813      	ldr	r3, [r2, #0]
  404d82:	3204      	adds	r2, #4
  404d84:	920f      	str	r2, [sp, #60]	; 0x3c
  404d86:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404d8a:	801a      	strh	r2, [r3, #0]
  404d8c:	e511      	b.n	4047b2 <_svfprintf_r+0x4e>
  404d8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d90:	4bb2      	ldr	r3, [pc, #712]	; (40505c <_svfprintf_r+0x8f8>)
  404d92:	680c      	ldr	r4, [r1, #0]
  404d94:	9318      	str	r3, [sp, #96]	; 0x60
  404d96:	2230      	movs	r2, #48	; 0x30
  404d98:	2378      	movs	r3, #120	; 0x78
  404d9a:	3104      	adds	r1, #4
  404d9c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404da0:	9311      	str	r3, [sp, #68]	; 0x44
  404da2:	f04b 0b02 	orr.w	fp, fp, #2
  404da6:	910f      	str	r1, [sp, #60]	; 0x3c
  404da8:	2500      	movs	r5, #0
  404daa:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404dae:	2302      	movs	r3, #2
  404db0:	e5cb      	b.n	40494a <_svfprintf_r+0x1e6>
  404db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404db4:	9311      	str	r3, [sp, #68]	; 0x44
  404db6:	680a      	ldr	r2, [r1, #0]
  404db8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404dbc:	2300      	movs	r3, #0
  404dbe:	460a      	mov	r2, r1
  404dc0:	461f      	mov	r7, r3
  404dc2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404dc6:	3204      	adds	r2, #4
  404dc8:	2301      	movs	r3, #1
  404dca:	9308      	str	r3, [sp, #32]
  404dcc:	f8cd b01c 	str.w	fp, [sp, #28]
  404dd0:	970a      	str	r7, [sp, #40]	; 0x28
  404dd2:	9712      	str	r7, [sp, #72]	; 0x48
  404dd4:	920f      	str	r2, [sp, #60]	; 0x3c
  404dd6:	930e      	str	r3, [sp, #56]	; 0x38
  404dd8:	ae28      	add	r6, sp, #160	; 0xa0
  404dda:	e5df      	b.n	40499c <_svfprintf_r+0x238>
  404ddc:	9311      	str	r3, [sp, #68]	; 0x44
  404dde:	2a00      	cmp	r2, #0
  404de0:	f040 86e2 	bne.w	405ba8 <_svfprintf_r+0x1444>
  404de4:	f01b 0f20 	tst.w	fp, #32
  404de8:	d15d      	bne.n	404ea6 <_svfprintf_r+0x742>
  404dea:	f01b 0f10 	tst.w	fp, #16
  404dee:	f040 8306 	bne.w	4053fe <_svfprintf_r+0xc9a>
  404df2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404df6:	f000 8302 	beq.w	4053fe <_svfprintf_r+0xc9a>
  404dfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404dfc:	f9b1 4000 	ldrsh.w	r4, [r1]
  404e00:	3104      	adds	r1, #4
  404e02:	17e5      	asrs	r5, r4, #31
  404e04:	4622      	mov	r2, r4
  404e06:	462b      	mov	r3, r5
  404e08:	910f      	str	r1, [sp, #60]	; 0x3c
  404e0a:	2a00      	cmp	r2, #0
  404e0c:	f173 0300 	sbcs.w	r3, r3, #0
  404e10:	db58      	blt.n	404ec4 <_svfprintf_r+0x760>
  404e12:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e14:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e18:	1c4a      	adds	r2, r1, #1
  404e1a:	f04f 0301 	mov.w	r3, #1
  404e1e:	f47f ad9b 	bne.w	404958 <_svfprintf_r+0x1f4>
  404e22:	ea54 0205 	orrs.w	r2, r4, r5
  404e26:	f000 81dc 	beq.w	4051e2 <_svfprintf_r+0xa7e>
  404e2a:	f8cd b01c 	str.w	fp, [sp, #28]
  404e2e:	2b01      	cmp	r3, #1
  404e30:	f000 8278 	beq.w	405324 <_svfprintf_r+0xbc0>
  404e34:	2b02      	cmp	r3, #2
  404e36:	f040 8203 	bne.w	405240 <_svfprintf_r+0xadc>
  404e3a:	9818      	ldr	r0, [sp, #96]	; 0x60
  404e3c:	464e      	mov	r6, r9
  404e3e:	0923      	lsrs	r3, r4, #4
  404e40:	f004 010f 	and.w	r1, r4, #15
  404e44:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404e48:	092a      	lsrs	r2, r5, #4
  404e4a:	461c      	mov	r4, r3
  404e4c:	4615      	mov	r5, r2
  404e4e:	5c43      	ldrb	r3, [r0, r1]
  404e50:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404e54:	ea54 0305 	orrs.w	r3, r4, r5
  404e58:	d1f1      	bne.n	404e3e <_svfprintf_r+0x6da>
  404e5a:	eba9 0306 	sub.w	r3, r9, r6
  404e5e:	930e      	str	r3, [sp, #56]	; 0x38
  404e60:	e590      	b.n	404984 <_svfprintf_r+0x220>
  404e62:	9311      	str	r3, [sp, #68]	; 0x44
  404e64:	2a00      	cmp	r2, #0
  404e66:	f040 869b 	bne.w	405ba0 <_svfprintf_r+0x143c>
  404e6a:	4b7d      	ldr	r3, [pc, #500]	; (405060 <_svfprintf_r+0x8fc>)
  404e6c:	9318      	str	r3, [sp, #96]	; 0x60
  404e6e:	f01b 0f20 	tst.w	fp, #32
  404e72:	f43f aeef 	beq.w	404c54 <_svfprintf_r+0x4f0>
  404e76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404e78:	3507      	adds	r5, #7
  404e7a:	f025 0307 	bic.w	r3, r5, #7
  404e7e:	f103 0208 	add.w	r2, r3, #8
  404e82:	f01b 0f01 	tst.w	fp, #1
  404e86:	920f      	str	r2, [sp, #60]	; 0x3c
  404e88:	e9d3 4500 	ldrd	r4, r5, [r3]
  404e8c:	f47f aef4 	bne.w	404c78 <_svfprintf_r+0x514>
  404e90:	2302      	movs	r3, #2
  404e92:	e55a      	b.n	40494a <_svfprintf_r+0x1e6>
  404e94:	9311      	str	r3, [sp, #68]	; 0x44
  404e96:	2a00      	cmp	r2, #0
  404e98:	f040 867e 	bne.w	405b98 <_svfprintf_r+0x1434>
  404e9c:	f04b 0b10 	orr.w	fp, fp, #16
  404ea0:	f01b 0f20 	tst.w	fp, #32
  404ea4:	d0a1      	beq.n	404dea <_svfprintf_r+0x686>
  404ea6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ea8:	3507      	adds	r5, #7
  404eaa:	f025 0507 	bic.w	r5, r5, #7
  404eae:	e9d5 2300 	ldrd	r2, r3, [r5]
  404eb2:	2a00      	cmp	r2, #0
  404eb4:	f105 0108 	add.w	r1, r5, #8
  404eb8:	461d      	mov	r5, r3
  404eba:	f173 0300 	sbcs.w	r3, r3, #0
  404ebe:	910f      	str	r1, [sp, #60]	; 0x3c
  404ec0:	4614      	mov	r4, r2
  404ec2:	daa6      	bge.n	404e12 <_svfprintf_r+0x6ae>
  404ec4:	272d      	movs	r7, #45	; 0x2d
  404ec6:	4264      	negs	r4, r4
  404ec8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404ecc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404ed0:	2301      	movs	r3, #1
  404ed2:	e53d      	b.n	404950 <_svfprintf_r+0x1ec>
  404ed4:	9311      	str	r3, [sp, #68]	; 0x44
  404ed6:	2a00      	cmp	r2, #0
  404ed8:	f040 865a 	bne.w	405b90 <_svfprintf_r+0x142c>
  404edc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ede:	3507      	adds	r5, #7
  404ee0:	f025 0307 	bic.w	r3, r5, #7
  404ee4:	f103 0208 	add.w	r2, r3, #8
  404ee8:	920f      	str	r2, [sp, #60]	; 0x3c
  404eea:	681a      	ldr	r2, [r3, #0]
  404eec:	9214      	str	r2, [sp, #80]	; 0x50
  404eee:	685b      	ldr	r3, [r3, #4]
  404ef0:	9315      	str	r3, [sp, #84]	; 0x54
  404ef2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404ef4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404ef6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404efa:	4628      	mov	r0, r5
  404efc:	4621      	mov	r1, r4
  404efe:	f04f 32ff 	mov.w	r2, #4294967295
  404f02:	4b58      	ldr	r3, [pc, #352]	; (405064 <_svfprintf_r+0x900>)
  404f04:	f003 fe54 	bl	408bb0 <__aeabi_dcmpun>
  404f08:	2800      	cmp	r0, #0
  404f0a:	f040 8348 	bne.w	40559e <_svfprintf_r+0xe3a>
  404f0e:	4628      	mov	r0, r5
  404f10:	4621      	mov	r1, r4
  404f12:	f04f 32ff 	mov.w	r2, #4294967295
  404f16:	4b53      	ldr	r3, [pc, #332]	; (405064 <_svfprintf_r+0x900>)
  404f18:	f003 fe2c 	bl	408b74 <__aeabi_dcmple>
  404f1c:	2800      	cmp	r0, #0
  404f1e:	f040 833e 	bne.w	40559e <_svfprintf_r+0xe3a>
  404f22:	a814      	add	r0, sp, #80	; 0x50
  404f24:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404f26:	f003 fe1b 	bl	408b60 <__aeabi_dcmplt>
  404f2a:	2800      	cmp	r0, #0
  404f2c:	f040 852f 	bne.w	40598e <_svfprintf_r+0x122a>
  404f30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f34:	4e4c      	ldr	r6, [pc, #304]	; (405068 <_svfprintf_r+0x904>)
  404f36:	4b4d      	ldr	r3, [pc, #308]	; (40506c <_svfprintf_r+0x908>)
  404f38:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404f3c:	9007      	str	r0, [sp, #28]
  404f3e:	9811      	ldr	r0, [sp, #68]	; 0x44
  404f40:	2203      	movs	r2, #3
  404f42:	2100      	movs	r1, #0
  404f44:	9208      	str	r2, [sp, #32]
  404f46:	910a      	str	r1, [sp, #40]	; 0x28
  404f48:	2847      	cmp	r0, #71	; 0x47
  404f4a:	bfd8      	it	le
  404f4c:	461e      	movle	r6, r3
  404f4e:	920e      	str	r2, [sp, #56]	; 0x38
  404f50:	9112      	str	r1, [sp, #72]	; 0x48
  404f52:	e51f      	b.n	404994 <_svfprintf_r+0x230>
  404f54:	f04b 0b08 	orr.w	fp, fp, #8
  404f58:	f89a 3000 	ldrb.w	r3, [sl]
  404f5c:	e45a      	b.n	404814 <_svfprintf_r+0xb0>
  404f5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404f62:	2300      	movs	r3, #0
  404f64:	461c      	mov	r4, r3
  404f66:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404f6a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404f6e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404f72:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404f76:	2809      	cmp	r0, #9
  404f78:	d9f5      	bls.n	404f66 <_svfprintf_r+0x802>
  404f7a:	940d      	str	r4, [sp, #52]	; 0x34
  404f7c:	e44c      	b.n	404818 <_svfprintf_r+0xb4>
  404f7e:	f04b 0b10 	orr.w	fp, fp, #16
  404f82:	9311      	str	r3, [sp, #68]	; 0x44
  404f84:	f01b 0320 	ands.w	r3, fp, #32
  404f88:	f43f ae1e 	beq.w	404bc8 <_svfprintf_r+0x464>
  404f8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f8e:	3507      	adds	r5, #7
  404f90:	f025 0307 	bic.w	r3, r5, #7
  404f94:	f103 0208 	add.w	r2, r3, #8
  404f98:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f9c:	920f      	str	r2, [sp, #60]	; 0x3c
  404f9e:	2300      	movs	r3, #0
  404fa0:	e4d3      	b.n	40494a <_svfprintf_r+0x1e6>
  404fa2:	9311      	str	r3, [sp, #68]	; 0x44
  404fa4:	2a00      	cmp	r2, #0
  404fa6:	f040 85e0 	bne.w	405b6a <_svfprintf_r+0x1406>
  404faa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fac:	2a00      	cmp	r2, #0
  404fae:	f43f aca4 	beq.w	4048fa <_svfprintf_r+0x196>
  404fb2:	2300      	movs	r3, #0
  404fb4:	2101      	movs	r1, #1
  404fb6:	461f      	mov	r7, r3
  404fb8:	9108      	str	r1, [sp, #32]
  404fba:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404fbe:	f8cd b01c 	str.w	fp, [sp, #28]
  404fc2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404fc6:	930a      	str	r3, [sp, #40]	; 0x28
  404fc8:	9312      	str	r3, [sp, #72]	; 0x48
  404fca:	910e      	str	r1, [sp, #56]	; 0x38
  404fcc:	ae28      	add	r6, sp, #160	; 0xa0
  404fce:	e4e5      	b.n	40499c <_svfprintf_r+0x238>
  404fd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fd2:	e535      	b.n	404a40 <_svfprintf_r+0x2dc>
  404fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fd6:	2b65      	cmp	r3, #101	; 0x65
  404fd8:	f340 80a6 	ble.w	405128 <_svfprintf_r+0x9c4>
  404fdc:	a814      	add	r0, sp, #80	; 0x50
  404fde:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404fe0:	f003 fdb4 	bl	408b4c <__aeabi_dcmpeq>
  404fe4:	2800      	cmp	r0, #0
  404fe6:	f000 814f 	beq.w	405288 <_svfprintf_r+0xb24>
  404fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fec:	4a20      	ldr	r2, [pc, #128]	; (405070 <_svfprintf_r+0x90c>)
  404fee:	f8c8 2000 	str.w	r2, [r8]
  404ff2:	3301      	adds	r3, #1
  404ff4:	3401      	adds	r4, #1
  404ff6:	2201      	movs	r2, #1
  404ff8:	2b07      	cmp	r3, #7
  404ffa:	9427      	str	r4, [sp, #156]	; 0x9c
  404ffc:	9326      	str	r3, [sp, #152]	; 0x98
  404ffe:	f8c8 2004 	str.w	r2, [r8, #4]
  405002:	f300 836a 	bgt.w	4056da <_svfprintf_r+0xf76>
  405006:	f108 0808 	add.w	r8, r8, #8
  40500a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40500c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40500e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405010:	4293      	cmp	r3, r2
  405012:	db03      	blt.n	40501c <_svfprintf_r+0x8b8>
  405014:	9b07      	ldr	r3, [sp, #28]
  405016:	07dd      	lsls	r5, r3, #31
  405018:	f57f ad84 	bpl.w	404b24 <_svfprintf_r+0x3c0>
  40501c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40501e:	9919      	ldr	r1, [sp, #100]	; 0x64
  405020:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405022:	f8c8 2000 	str.w	r2, [r8]
  405026:	3301      	adds	r3, #1
  405028:	440c      	add	r4, r1
  40502a:	2b07      	cmp	r3, #7
  40502c:	f8c8 1004 	str.w	r1, [r8, #4]
  405030:	9427      	str	r4, [sp, #156]	; 0x9c
  405032:	9326      	str	r3, [sp, #152]	; 0x98
  405034:	f300 839e 	bgt.w	405774 <_svfprintf_r+0x1010>
  405038:	f108 0808 	add.w	r8, r8, #8
  40503c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40503e:	1e5e      	subs	r6, r3, #1
  405040:	2e00      	cmp	r6, #0
  405042:	f77f ad6f 	ble.w	404b24 <_svfprintf_r+0x3c0>
  405046:	2e10      	cmp	r6, #16
  405048:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40504a:	4d0a      	ldr	r5, [pc, #40]	; (405074 <_svfprintf_r+0x910>)
  40504c:	f340 81f5 	ble.w	40543a <_svfprintf_r+0xcd6>
  405050:	4622      	mov	r2, r4
  405052:	2710      	movs	r7, #16
  405054:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405058:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40505a:	e013      	b.n	405084 <_svfprintf_r+0x920>
  40505c:	004099d8 	.word	0x004099d8
  405060:	004099c4 	.word	0x004099c4
  405064:	7fefffff 	.word	0x7fefffff
  405068:	004099b8 	.word	0x004099b8
  40506c:	004099b4 	.word	0x004099b4
  405070:	004099f4 	.word	0x004099f4
  405074:	00409a08 	.word	0x00409a08
  405078:	f108 0808 	add.w	r8, r8, #8
  40507c:	3e10      	subs	r6, #16
  40507e:	2e10      	cmp	r6, #16
  405080:	f340 81da 	ble.w	405438 <_svfprintf_r+0xcd4>
  405084:	3301      	adds	r3, #1
  405086:	3210      	adds	r2, #16
  405088:	2b07      	cmp	r3, #7
  40508a:	9227      	str	r2, [sp, #156]	; 0x9c
  40508c:	9326      	str	r3, [sp, #152]	; 0x98
  40508e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405092:	ddf1      	ble.n	405078 <_svfprintf_r+0x914>
  405094:	aa25      	add	r2, sp, #148	; 0x94
  405096:	4621      	mov	r1, r4
  405098:	4658      	mov	r0, fp
  40509a:	f003 f829 	bl	4080f0 <__ssprint_r>
  40509e:	2800      	cmp	r0, #0
  4050a0:	f47f ac32 	bne.w	404908 <_svfprintf_r+0x1a4>
  4050a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4050a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050a8:	46c8      	mov	r8, r9
  4050aa:	e7e7      	b.n	40507c <_svfprintf_r+0x918>
  4050ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050ae:	9a08      	ldr	r2, [sp, #32]
  4050b0:	1a9f      	subs	r7, r3, r2
  4050b2:	2f00      	cmp	r7, #0
  4050b4:	f77f ace7 	ble.w	404a86 <_svfprintf_r+0x322>
  4050b8:	2f10      	cmp	r7, #16
  4050ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050bc:	4db6      	ldr	r5, [pc, #728]	; (405398 <_svfprintf_r+0xc34>)
  4050be:	dd27      	ble.n	405110 <_svfprintf_r+0x9ac>
  4050c0:	4642      	mov	r2, r8
  4050c2:	4621      	mov	r1, r4
  4050c4:	46b0      	mov	r8, r6
  4050c6:	f04f 0b10 	mov.w	fp, #16
  4050ca:	462e      	mov	r6, r5
  4050cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4050ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4050d0:	e004      	b.n	4050dc <_svfprintf_r+0x978>
  4050d2:	3f10      	subs	r7, #16
  4050d4:	2f10      	cmp	r7, #16
  4050d6:	f102 0208 	add.w	r2, r2, #8
  4050da:	dd15      	ble.n	405108 <_svfprintf_r+0x9a4>
  4050dc:	3301      	adds	r3, #1
  4050de:	3110      	adds	r1, #16
  4050e0:	2b07      	cmp	r3, #7
  4050e2:	9127      	str	r1, [sp, #156]	; 0x9c
  4050e4:	9326      	str	r3, [sp, #152]	; 0x98
  4050e6:	e882 0840 	stmia.w	r2, {r6, fp}
  4050ea:	ddf2      	ble.n	4050d2 <_svfprintf_r+0x96e>
  4050ec:	aa25      	add	r2, sp, #148	; 0x94
  4050ee:	4629      	mov	r1, r5
  4050f0:	4620      	mov	r0, r4
  4050f2:	f002 fffd 	bl	4080f0 <__ssprint_r>
  4050f6:	2800      	cmp	r0, #0
  4050f8:	f47f ac06 	bne.w	404908 <_svfprintf_r+0x1a4>
  4050fc:	3f10      	subs	r7, #16
  4050fe:	2f10      	cmp	r7, #16
  405100:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405102:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405104:	464a      	mov	r2, r9
  405106:	dce9      	bgt.n	4050dc <_svfprintf_r+0x978>
  405108:	4635      	mov	r5, r6
  40510a:	460c      	mov	r4, r1
  40510c:	4646      	mov	r6, r8
  40510e:	4690      	mov	r8, r2
  405110:	3301      	adds	r3, #1
  405112:	443c      	add	r4, r7
  405114:	2b07      	cmp	r3, #7
  405116:	9427      	str	r4, [sp, #156]	; 0x9c
  405118:	9326      	str	r3, [sp, #152]	; 0x98
  40511a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40511e:	f300 8232 	bgt.w	405586 <_svfprintf_r+0xe22>
  405122:	f108 0808 	add.w	r8, r8, #8
  405126:	e4ae      	b.n	404a86 <_svfprintf_r+0x322>
  405128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40512a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40512c:	2b01      	cmp	r3, #1
  40512e:	f340 81fe 	ble.w	40552e <_svfprintf_r+0xdca>
  405132:	3701      	adds	r7, #1
  405134:	3401      	adds	r4, #1
  405136:	2301      	movs	r3, #1
  405138:	2f07      	cmp	r7, #7
  40513a:	9427      	str	r4, [sp, #156]	; 0x9c
  40513c:	9726      	str	r7, [sp, #152]	; 0x98
  40513e:	f8c8 6000 	str.w	r6, [r8]
  405142:	f8c8 3004 	str.w	r3, [r8, #4]
  405146:	f300 8203 	bgt.w	405550 <_svfprintf_r+0xdec>
  40514a:	f108 0808 	add.w	r8, r8, #8
  40514e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405150:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  405152:	f8c8 3000 	str.w	r3, [r8]
  405156:	3701      	adds	r7, #1
  405158:	4414      	add	r4, r2
  40515a:	2f07      	cmp	r7, #7
  40515c:	9427      	str	r4, [sp, #156]	; 0x9c
  40515e:	9726      	str	r7, [sp, #152]	; 0x98
  405160:	f8c8 2004 	str.w	r2, [r8, #4]
  405164:	f300 8200 	bgt.w	405568 <_svfprintf_r+0xe04>
  405168:	f108 0808 	add.w	r8, r8, #8
  40516c:	a814      	add	r0, sp, #80	; 0x50
  40516e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  405170:	f003 fcec 	bl	408b4c <__aeabi_dcmpeq>
  405174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405176:	2800      	cmp	r0, #0
  405178:	f040 8101 	bne.w	40537e <_svfprintf_r+0xc1a>
  40517c:	3b01      	subs	r3, #1
  40517e:	3701      	adds	r7, #1
  405180:	3601      	adds	r6, #1
  405182:	441c      	add	r4, r3
  405184:	2f07      	cmp	r7, #7
  405186:	9726      	str	r7, [sp, #152]	; 0x98
  405188:	9427      	str	r4, [sp, #156]	; 0x9c
  40518a:	f8c8 6000 	str.w	r6, [r8]
  40518e:	f8c8 3004 	str.w	r3, [r8, #4]
  405192:	f300 8128 	bgt.w	4053e6 <_svfprintf_r+0xc82>
  405196:	f108 0808 	add.w	r8, r8, #8
  40519a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40519c:	f8c8 2004 	str.w	r2, [r8, #4]
  4051a0:	3701      	adds	r7, #1
  4051a2:	4414      	add	r4, r2
  4051a4:	ab21      	add	r3, sp, #132	; 0x84
  4051a6:	2f07      	cmp	r7, #7
  4051a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4051aa:	9726      	str	r7, [sp, #152]	; 0x98
  4051ac:	f8c8 3000 	str.w	r3, [r8]
  4051b0:	f77f acb6 	ble.w	404b20 <_svfprintf_r+0x3bc>
  4051b4:	aa25      	add	r2, sp, #148	; 0x94
  4051b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051ba:	f002 ff99 	bl	4080f0 <__ssprint_r>
  4051be:	2800      	cmp	r0, #0
  4051c0:	f47f aba2 	bne.w	404908 <_svfprintf_r+0x1a4>
  4051c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051c6:	46c8      	mov	r8, r9
  4051c8:	e4ac      	b.n	404b24 <_svfprintf_r+0x3c0>
  4051ca:	aa25      	add	r2, sp, #148	; 0x94
  4051cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051d0:	f002 ff8e 	bl	4080f0 <__ssprint_r>
  4051d4:	2800      	cmp	r0, #0
  4051d6:	f43f acee 	beq.w	404bb6 <_svfprintf_r+0x452>
  4051da:	f7ff bb95 	b.w	404908 <_svfprintf_r+0x1a4>
  4051de:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4051e2:	2b01      	cmp	r3, #1
  4051e4:	f000 8135 	beq.w	405452 <_svfprintf_r+0xcee>
  4051e8:	2b02      	cmp	r3, #2
  4051ea:	d125      	bne.n	405238 <_svfprintf_r+0xad4>
  4051ec:	f8cd b01c 	str.w	fp, [sp, #28]
  4051f0:	2400      	movs	r4, #0
  4051f2:	2500      	movs	r5, #0
  4051f4:	e621      	b.n	404e3a <_svfprintf_r+0x6d6>
  4051f6:	aa25      	add	r2, sp, #148	; 0x94
  4051f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051fa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051fc:	f002 ff78 	bl	4080f0 <__ssprint_r>
  405200:	2800      	cmp	r0, #0
  405202:	f47f ab81 	bne.w	404908 <_svfprintf_r+0x1a4>
  405206:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405208:	46c8      	mov	r8, r9
  40520a:	e478      	b.n	404afe <_svfprintf_r+0x39a>
  40520c:	aa25      	add	r2, sp, #148	; 0x94
  40520e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405210:	980c      	ldr	r0, [sp, #48]	; 0x30
  405212:	f002 ff6d 	bl	4080f0 <__ssprint_r>
  405216:	2800      	cmp	r0, #0
  405218:	f47f ab76 	bne.w	404908 <_svfprintf_r+0x1a4>
  40521c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40521e:	46c8      	mov	r8, r9
  405220:	e41e      	b.n	404a60 <_svfprintf_r+0x2fc>
  405222:	aa25      	add	r2, sp, #148	; 0x94
  405224:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405226:	980c      	ldr	r0, [sp, #48]	; 0x30
  405228:	f002 ff62 	bl	4080f0 <__ssprint_r>
  40522c:	2800      	cmp	r0, #0
  40522e:	f47f ab6b 	bne.w	404908 <_svfprintf_r+0x1a4>
  405232:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405234:	46c8      	mov	r8, r9
  405236:	e423      	b.n	404a80 <_svfprintf_r+0x31c>
  405238:	f8cd b01c 	str.w	fp, [sp, #28]
  40523c:	2400      	movs	r4, #0
  40523e:	2500      	movs	r5, #0
  405240:	4649      	mov	r1, r9
  405242:	e000      	b.n	405246 <_svfprintf_r+0xae2>
  405244:	4631      	mov	r1, r6
  405246:	08e2      	lsrs	r2, r4, #3
  405248:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40524c:	08e8      	lsrs	r0, r5, #3
  40524e:	f004 0307 	and.w	r3, r4, #7
  405252:	4605      	mov	r5, r0
  405254:	4614      	mov	r4, r2
  405256:	3330      	adds	r3, #48	; 0x30
  405258:	ea54 0205 	orrs.w	r2, r4, r5
  40525c:	f801 3c01 	strb.w	r3, [r1, #-1]
  405260:	f101 36ff 	add.w	r6, r1, #4294967295
  405264:	d1ee      	bne.n	405244 <_svfprintf_r+0xae0>
  405266:	9a07      	ldr	r2, [sp, #28]
  405268:	07d2      	lsls	r2, r2, #31
  40526a:	f57f adf6 	bpl.w	404e5a <_svfprintf_r+0x6f6>
  40526e:	2b30      	cmp	r3, #48	; 0x30
  405270:	f43f adf3 	beq.w	404e5a <_svfprintf_r+0x6f6>
  405274:	3902      	subs	r1, #2
  405276:	2330      	movs	r3, #48	; 0x30
  405278:	f806 3c01 	strb.w	r3, [r6, #-1]
  40527c:	eba9 0301 	sub.w	r3, r9, r1
  405280:	930e      	str	r3, [sp, #56]	; 0x38
  405282:	460e      	mov	r6, r1
  405284:	f7ff bb7e 	b.w	404984 <_svfprintf_r+0x220>
  405288:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40528a:	2900      	cmp	r1, #0
  40528c:	f340 822f 	ble.w	4056ee <_svfprintf_r+0xf8a>
  405290:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405294:	4293      	cmp	r3, r2
  405296:	bfa8      	it	ge
  405298:	4613      	movge	r3, r2
  40529a:	2b00      	cmp	r3, #0
  40529c:	461f      	mov	r7, r3
  40529e:	dd0d      	ble.n	4052bc <_svfprintf_r+0xb58>
  4052a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052a2:	f8c8 6000 	str.w	r6, [r8]
  4052a6:	3301      	adds	r3, #1
  4052a8:	443c      	add	r4, r7
  4052aa:	2b07      	cmp	r3, #7
  4052ac:	9427      	str	r4, [sp, #156]	; 0x9c
  4052ae:	f8c8 7004 	str.w	r7, [r8, #4]
  4052b2:	9326      	str	r3, [sp, #152]	; 0x98
  4052b4:	f300 8320 	bgt.w	4058f8 <_svfprintf_r+0x1194>
  4052b8:	f108 0808 	add.w	r8, r8, #8
  4052bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4052be:	2f00      	cmp	r7, #0
  4052c0:	bfa8      	it	ge
  4052c2:	1bdb      	subge	r3, r3, r7
  4052c4:	2b00      	cmp	r3, #0
  4052c6:	461f      	mov	r7, r3
  4052c8:	f340 80d7 	ble.w	40547a <_svfprintf_r+0xd16>
  4052cc:	2f10      	cmp	r7, #16
  4052ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052d0:	4d31      	ldr	r5, [pc, #196]	; (405398 <_svfprintf_r+0xc34>)
  4052d2:	f340 81ee 	ble.w	4056b2 <_svfprintf_r+0xf4e>
  4052d6:	4642      	mov	r2, r8
  4052d8:	4621      	mov	r1, r4
  4052da:	46b0      	mov	r8, r6
  4052dc:	f04f 0b10 	mov.w	fp, #16
  4052e0:	462e      	mov	r6, r5
  4052e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4052e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4052e6:	e004      	b.n	4052f2 <_svfprintf_r+0xb8e>
  4052e8:	3208      	adds	r2, #8
  4052ea:	3f10      	subs	r7, #16
  4052ec:	2f10      	cmp	r7, #16
  4052ee:	f340 81dc 	ble.w	4056aa <_svfprintf_r+0xf46>
  4052f2:	3301      	adds	r3, #1
  4052f4:	3110      	adds	r1, #16
  4052f6:	2b07      	cmp	r3, #7
  4052f8:	9127      	str	r1, [sp, #156]	; 0x9c
  4052fa:	9326      	str	r3, [sp, #152]	; 0x98
  4052fc:	e882 0840 	stmia.w	r2, {r6, fp}
  405300:	ddf2      	ble.n	4052e8 <_svfprintf_r+0xb84>
  405302:	aa25      	add	r2, sp, #148	; 0x94
  405304:	4629      	mov	r1, r5
  405306:	4620      	mov	r0, r4
  405308:	f002 fef2 	bl	4080f0 <__ssprint_r>
  40530c:	2800      	cmp	r0, #0
  40530e:	f47f aafb 	bne.w	404908 <_svfprintf_r+0x1a4>
  405312:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405314:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405316:	464a      	mov	r2, r9
  405318:	e7e7      	b.n	4052ea <_svfprintf_r+0xb86>
  40531a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40531c:	930e      	str	r3, [sp, #56]	; 0x38
  40531e:	464e      	mov	r6, r9
  405320:	f7ff bb30 	b.w	404984 <_svfprintf_r+0x220>
  405324:	2d00      	cmp	r5, #0
  405326:	bf08      	it	eq
  405328:	2c0a      	cmpeq	r4, #10
  40532a:	f0c0 8090 	bcc.w	40544e <_svfprintf_r+0xcea>
  40532e:	464e      	mov	r6, r9
  405330:	4620      	mov	r0, r4
  405332:	4629      	mov	r1, r5
  405334:	220a      	movs	r2, #10
  405336:	2300      	movs	r3, #0
  405338:	f7fe fd06 	bl	403d48 <__aeabi_uldivmod>
  40533c:	3230      	adds	r2, #48	; 0x30
  40533e:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405342:	4620      	mov	r0, r4
  405344:	4629      	mov	r1, r5
  405346:	2300      	movs	r3, #0
  405348:	220a      	movs	r2, #10
  40534a:	f7fe fcfd 	bl	403d48 <__aeabi_uldivmod>
  40534e:	4604      	mov	r4, r0
  405350:	460d      	mov	r5, r1
  405352:	ea54 0305 	orrs.w	r3, r4, r5
  405356:	d1eb      	bne.n	405330 <_svfprintf_r+0xbcc>
  405358:	eba9 0306 	sub.w	r3, r9, r6
  40535c:	930e      	str	r3, [sp, #56]	; 0x38
  40535e:	f7ff bb11 	b.w	404984 <_svfprintf_r+0x220>
  405362:	aa25      	add	r2, sp, #148	; 0x94
  405364:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405366:	980c      	ldr	r0, [sp, #48]	; 0x30
  405368:	f002 fec2 	bl	4080f0 <__ssprint_r>
  40536c:	2800      	cmp	r0, #0
  40536e:	f47f aacb 	bne.w	404908 <_svfprintf_r+0x1a4>
  405372:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405376:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405378:	46c8      	mov	r8, r9
  40537a:	f7ff bb61 	b.w	404a40 <_svfprintf_r+0x2dc>
  40537e:	1e5e      	subs	r6, r3, #1
  405380:	2e00      	cmp	r6, #0
  405382:	f77f af0a 	ble.w	40519a <_svfprintf_r+0xa36>
  405386:	2e10      	cmp	r6, #16
  405388:	4d03      	ldr	r5, [pc, #12]	; (405398 <_svfprintf_r+0xc34>)
  40538a:	dd23      	ble.n	4053d4 <_svfprintf_r+0xc70>
  40538c:	4622      	mov	r2, r4
  40538e:	f04f 0b10 	mov.w	fp, #16
  405392:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405394:	e007      	b.n	4053a6 <_svfprintf_r+0xc42>
  405396:	bf00      	nop
  405398:	00409a08 	.word	0x00409a08
  40539c:	3e10      	subs	r6, #16
  40539e:	2e10      	cmp	r6, #16
  4053a0:	f108 0808 	add.w	r8, r8, #8
  4053a4:	dd15      	ble.n	4053d2 <_svfprintf_r+0xc6e>
  4053a6:	3701      	adds	r7, #1
  4053a8:	3210      	adds	r2, #16
  4053aa:	2f07      	cmp	r7, #7
  4053ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4053ae:	9726      	str	r7, [sp, #152]	; 0x98
  4053b0:	e888 0820 	stmia.w	r8, {r5, fp}
  4053b4:	ddf2      	ble.n	40539c <_svfprintf_r+0xc38>
  4053b6:	aa25      	add	r2, sp, #148	; 0x94
  4053b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ba:	4620      	mov	r0, r4
  4053bc:	f002 fe98 	bl	4080f0 <__ssprint_r>
  4053c0:	2800      	cmp	r0, #0
  4053c2:	f47f aaa1 	bne.w	404908 <_svfprintf_r+0x1a4>
  4053c6:	3e10      	subs	r6, #16
  4053c8:	2e10      	cmp	r6, #16
  4053ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4053cc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4053ce:	46c8      	mov	r8, r9
  4053d0:	dce9      	bgt.n	4053a6 <_svfprintf_r+0xc42>
  4053d2:	4614      	mov	r4, r2
  4053d4:	3701      	adds	r7, #1
  4053d6:	4434      	add	r4, r6
  4053d8:	2f07      	cmp	r7, #7
  4053da:	9427      	str	r4, [sp, #156]	; 0x9c
  4053dc:	9726      	str	r7, [sp, #152]	; 0x98
  4053de:	e888 0060 	stmia.w	r8, {r5, r6}
  4053e2:	f77f aed8 	ble.w	405196 <_svfprintf_r+0xa32>
  4053e6:	aa25      	add	r2, sp, #148	; 0x94
  4053e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053ec:	f002 fe80 	bl	4080f0 <__ssprint_r>
  4053f0:	2800      	cmp	r0, #0
  4053f2:	f47f aa89 	bne.w	404908 <_svfprintf_r+0x1a4>
  4053f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053f8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4053fa:	46c8      	mov	r8, r9
  4053fc:	e6cd      	b.n	40519a <_svfprintf_r+0xa36>
  4053fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405400:	6814      	ldr	r4, [r2, #0]
  405402:	4613      	mov	r3, r2
  405404:	3304      	adds	r3, #4
  405406:	17e5      	asrs	r5, r4, #31
  405408:	930f      	str	r3, [sp, #60]	; 0x3c
  40540a:	4622      	mov	r2, r4
  40540c:	462b      	mov	r3, r5
  40540e:	e4fc      	b.n	404e0a <_svfprintf_r+0x6a6>
  405410:	3204      	adds	r2, #4
  405412:	681c      	ldr	r4, [r3, #0]
  405414:	920f      	str	r2, [sp, #60]	; 0x3c
  405416:	2301      	movs	r3, #1
  405418:	2500      	movs	r5, #0
  40541a:	f7ff ba96 	b.w	40494a <_svfprintf_r+0x1e6>
  40541e:	681c      	ldr	r4, [r3, #0]
  405420:	3304      	adds	r3, #4
  405422:	930f      	str	r3, [sp, #60]	; 0x3c
  405424:	2500      	movs	r5, #0
  405426:	e423      	b.n	404c70 <_svfprintf_r+0x50c>
  405428:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40542a:	460a      	mov	r2, r1
  40542c:	3204      	adds	r2, #4
  40542e:	680c      	ldr	r4, [r1, #0]
  405430:	920f      	str	r2, [sp, #60]	; 0x3c
  405432:	2500      	movs	r5, #0
  405434:	f7ff ba89 	b.w	40494a <_svfprintf_r+0x1e6>
  405438:	4614      	mov	r4, r2
  40543a:	3301      	adds	r3, #1
  40543c:	4434      	add	r4, r6
  40543e:	2b07      	cmp	r3, #7
  405440:	9427      	str	r4, [sp, #156]	; 0x9c
  405442:	9326      	str	r3, [sp, #152]	; 0x98
  405444:	e888 0060 	stmia.w	r8, {r5, r6}
  405448:	f77f ab6a 	ble.w	404b20 <_svfprintf_r+0x3bc>
  40544c:	e6b2      	b.n	4051b4 <_svfprintf_r+0xa50>
  40544e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405452:	f8cd b01c 	str.w	fp, [sp, #28]
  405456:	ae42      	add	r6, sp, #264	; 0x108
  405458:	3430      	adds	r4, #48	; 0x30
  40545a:	2301      	movs	r3, #1
  40545c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405460:	930e      	str	r3, [sp, #56]	; 0x38
  405462:	f7ff ba8f 	b.w	404984 <_svfprintf_r+0x220>
  405466:	aa25      	add	r2, sp, #148	; 0x94
  405468:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40546a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40546c:	f002 fe40 	bl	4080f0 <__ssprint_r>
  405470:	2800      	cmp	r0, #0
  405472:	f47f aa49 	bne.w	404908 <_svfprintf_r+0x1a4>
  405476:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405478:	46c8      	mov	r8, r9
  40547a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40547c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40547e:	429a      	cmp	r2, r3
  405480:	db44      	blt.n	40550c <_svfprintf_r+0xda8>
  405482:	9b07      	ldr	r3, [sp, #28]
  405484:	07d9      	lsls	r1, r3, #31
  405486:	d441      	bmi.n	40550c <_svfprintf_r+0xda8>
  405488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40548a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40548c:	1a9a      	subs	r2, r3, r2
  40548e:	1a1d      	subs	r5, r3, r0
  405490:	4295      	cmp	r5, r2
  405492:	bfa8      	it	ge
  405494:	4615      	movge	r5, r2
  405496:	2d00      	cmp	r5, #0
  405498:	dd0e      	ble.n	4054b8 <_svfprintf_r+0xd54>
  40549a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40549c:	f8c8 5004 	str.w	r5, [r8, #4]
  4054a0:	3101      	adds	r1, #1
  4054a2:	4406      	add	r6, r0
  4054a4:	442c      	add	r4, r5
  4054a6:	2907      	cmp	r1, #7
  4054a8:	f8c8 6000 	str.w	r6, [r8]
  4054ac:	9427      	str	r4, [sp, #156]	; 0x9c
  4054ae:	9126      	str	r1, [sp, #152]	; 0x98
  4054b0:	f300 823b 	bgt.w	40592a <_svfprintf_r+0x11c6>
  4054b4:	f108 0808 	add.w	r8, r8, #8
  4054b8:	2d00      	cmp	r5, #0
  4054ba:	bfac      	ite	ge
  4054bc:	1b56      	subge	r6, r2, r5
  4054be:	4616      	movlt	r6, r2
  4054c0:	2e00      	cmp	r6, #0
  4054c2:	f77f ab2f 	ble.w	404b24 <_svfprintf_r+0x3c0>
  4054c6:	2e10      	cmp	r6, #16
  4054c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054ca:	4db0      	ldr	r5, [pc, #704]	; (40578c <_svfprintf_r+0x1028>)
  4054cc:	ddb5      	ble.n	40543a <_svfprintf_r+0xcd6>
  4054ce:	4622      	mov	r2, r4
  4054d0:	2710      	movs	r7, #16
  4054d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4054d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4054d8:	e004      	b.n	4054e4 <_svfprintf_r+0xd80>
  4054da:	f108 0808 	add.w	r8, r8, #8
  4054de:	3e10      	subs	r6, #16
  4054e0:	2e10      	cmp	r6, #16
  4054e2:	dda9      	ble.n	405438 <_svfprintf_r+0xcd4>
  4054e4:	3301      	adds	r3, #1
  4054e6:	3210      	adds	r2, #16
  4054e8:	2b07      	cmp	r3, #7
  4054ea:	9227      	str	r2, [sp, #156]	; 0x9c
  4054ec:	9326      	str	r3, [sp, #152]	; 0x98
  4054ee:	e888 00a0 	stmia.w	r8, {r5, r7}
  4054f2:	ddf2      	ble.n	4054da <_svfprintf_r+0xd76>
  4054f4:	aa25      	add	r2, sp, #148	; 0x94
  4054f6:	4621      	mov	r1, r4
  4054f8:	4658      	mov	r0, fp
  4054fa:	f002 fdf9 	bl	4080f0 <__ssprint_r>
  4054fe:	2800      	cmp	r0, #0
  405500:	f47f aa02 	bne.w	404908 <_svfprintf_r+0x1a4>
  405504:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405506:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405508:	46c8      	mov	r8, r9
  40550a:	e7e8      	b.n	4054de <_svfprintf_r+0xd7a>
  40550c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40550e:	9819      	ldr	r0, [sp, #100]	; 0x64
  405510:	991a      	ldr	r1, [sp, #104]	; 0x68
  405512:	f8c8 1000 	str.w	r1, [r8]
  405516:	3301      	adds	r3, #1
  405518:	4404      	add	r4, r0
  40551a:	2b07      	cmp	r3, #7
  40551c:	9427      	str	r4, [sp, #156]	; 0x9c
  40551e:	f8c8 0004 	str.w	r0, [r8, #4]
  405522:	9326      	str	r3, [sp, #152]	; 0x98
  405524:	f300 81f5 	bgt.w	405912 <_svfprintf_r+0x11ae>
  405528:	f108 0808 	add.w	r8, r8, #8
  40552c:	e7ac      	b.n	405488 <_svfprintf_r+0xd24>
  40552e:	9b07      	ldr	r3, [sp, #28]
  405530:	07da      	lsls	r2, r3, #31
  405532:	f53f adfe 	bmi.w	405132 <_svfprintf_r+0x9ce>
  405536:	3701      	adds	r7, #1
  405538:	3401      	adds	r4, #1
  40553a:	2301      	movs	r3, #1
  40553c:	2f07      	cmp	r7, #7
  40553e:	9427      	str	r4, [sp, #156]	; 0x9c
  405540:	9726      	str	r7, [sp, #152]	; 0x98
  405542:	f8c8 6000 	str.w	r6, [r8]
  405546:	f8c8 3004 	str.w	r3, [r8, #4]
  40554a:	f77f ae24 	ble.w	405196 <_svfprintf_r+0xa32>
  40554e:	e74a      	b.n	4053e6 <_svfprintf_r+0xc82>
  405550:	aa25      	add	r2, sp, #148	; 0x94
  405552:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405554:	980c      	ldr	r0, [sp, #48]	; 0x30
  405556:	f002 fdcb 	bl	4080f0 <__ssprint_r>
  40555a:	2800      	cmp	r0, #0
  40555c:	f47f a9d4 	bne.w	404908 <_svfprintf_r+0x1a4>
  405560:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405562:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405564:	46c8      	mov	r8, r9
  405566:	e5f2      	b.n	40514e <_svfprintf_r+0x9ea>
  405568:	aa25      	add	r2, sp, #148	; 0x94
  40556a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40556c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40556e:	f002 fdbf 	bl	4080f0 <__ssprint_r>
  405572:	2800      	cmp	r0, #0
  405574:	f47f a9c8 	bne.w	404908 <_svfprintf_r+0x1a4>
  405578:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40557a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40557c:	46c8      	mov	r8, r9
  40557e:	e5f5      	b.n	40516c <_svfprintf_r+0xa08>
  405580:	464e      	mov	r6, r9
  405582:	f7ff b9ff 	b.w	404984 <_svfprintf_r+0x220>
  405586:	aa25      	add	r2, sp, #148	; 0x94
  405588:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40558a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40558c:	f002 fdb0 	bl	4080f0 <__ssprint_r>
  405590:	2800      	cmp	r0, #0
  405592:	f47f a9b9 	bne.w	404908 <_svfprintf_r+0x1a4>
  405596:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405598:	46c8      	mov	r8, r9
  40559a:	f7ff ba74 	b.w	404a86 <_svfprintf_r+0x322>
  40559e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4055a0:	4622      	mov	r2, r4
  4055a2:	4620      	mov	r0, r4
  4055a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4055a6:	4623      	mov	r3, r4
  4055a8:	4621      	mov	r1, r4
  4055aa:	f003 fb01 	bl	408bb0 <__aeabi_dcmpun>
  4055ae:	2800      	cmp	r0, #0
  4055b0:	f040 8286 	bne.w	405ac0 <_svfprintf_r+0x135c>
  4055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055b6:	3301      	adds	r3, #1
  4055b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055ba:	f023 0320 	bic.w	r3, r3, #32
  4055be:	930e      	str	r3, [sp, #56]	; 0x38
  4055c0:	f000 81e2 	beq.w	405988 <_svfprintf_r+0x1224>
  4055c4:	2b47      	cmp	r3, #71	; 0x47
  4055c6:	f000 811e 	beq.w	405806 <_svfprintf_r+0x10a2>
  4055ca:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4055ce:	9307      	str	r3, [sp, #28]
  4055d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4055d2:	1e1f      	subs	r7, r3, #0
  4055d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055d6:	9308      	str	r3, [sp, #32]
  4055d8:	bfbb      	ittet	lt
  4055da:	463b      	movlt	r3, r7
  4055dc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4055e0:	2300      	movge	r3, #0
  4055e2:	232d      	movlt	r3, #45	; 0x2d
  4055e4:	9310      	str	r3, [sp, #64]	; 0x40
  4055e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055e8:	2b66      	cmp	r3, #102	; 0x66
  4055ea:	f000 81bb 	beq.w	405964 <_svfprintf_r+0x1200>
  4055ee:	2b46      	cmp	r3, #70	; 0x46
  4055f0:	f000 80df 	beq.w	4057b2 <_svfprintf_r+0x104e>
  4055f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4055f6:	9a08      	ldr	r2, [sp, #32]
  4055f8:	2b45      	cmp	r3, #69	; 0x45
  4055fa:	bf0c      	ite	eq
  4055fc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4055fe:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405600:	a823      	add	r0, sp, #140	; 0x8c
  405602:	a920      	add	r1, sp, #128	; 0x80
  405604:	bf08      	it	eq
  405606:	1c5d      	addeq	r5, r3, #1
  405608:	9004      	str	r0, [sp, #16]
  40560a:	9103      	str	r1, [sp, #12]
  40560c:	a81f      	add	r0, sp, #124	; 0x7c
  40560e:	2102      	movs	r1, #2
  405610:	463b      	mov	r3, r7
  405612:	9002      	str	r0, [sp, #8]
  405614:	9501      	str	r5, [sp, #4]
  405616:	9100      	str	r1, [sp, #0]
  405618:	980c      	ldr	r0, [sp, #48]	; 0x30
  40561a:	f000 fb6d 	bl	405cf8 <_dtoa_r>
  40561e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405620:	2b67      	cmp	r3, #103	; 0x67
  405622:	4606      	mov	r6, r0
  405624:	f040 81e0 	bne.w	4059e8 <_svfprintf_r+0x1284>
  405628:	f01b 0f01 	tst.w	fp, #1
  40562c:	f000 8246 	beq.w	405abc <_svfprintf_r+0x1358>
  405630:	1974      	adds	r4, r6, r5
  405632:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405634:	9808      	ldr	r0, [sp, #32]
  405636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405638:	4639      	mov	r1, r7
  40563a:	f003 fa87 	bl	408b4c <__aeabi_dcmpeq>
  40563e:	2800      	cmp	r0, #0
  405640:	f040 8165 	bne.w	40590e <_svfprintf_r+0x11aa>
  405644:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405646:	42a3      	cmp	r3, r4
  405648:	d206      	bcs.n	405658 <_svfprintf_r+0xef4>
  40564a:	2130      	movs	r1, #48	; 0x30
  40564c:	1c5a      	adds	r2, r3, #1
  40564e:	9223      	str	r2, [sp, #140]	; 0x8c
  405650:	7019      	strb	r1, [r3, #0]
  405652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405654:	429c      	cmp	r4, r3
  405656:	d8f9      	bhi.n	40564c <_svfprintf_r+0xee8>
  405658:	1b9b      	subs	r3, r3, r6
  40565a:	9313      	str	r3, [sp, #76]	; 0x4c
  40565c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40565e:	2b47      	cmp	r3, #71	; 0x47
  405660:	f000 80e9 	beq.w	405836 <_svfprintf_r+0x10d2>
  405664:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405666:	2b65      	cmp	r3, #101	; 0x65
  405668:	f340 81cd 	ble.w	405a06 <_svfprintf_r+0x12a2>
  40566c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40566e:	2b66      	cmp	r3, #102	; 0x66
  405670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405672:	9312      	str	r3, [sp, #72]	; 0x48
  405674:	f000 819e 	beq.w	4059b4 <_svfprintf_r+0x1250>
  405678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40567a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40567c:	4619      	mov	r1, r3
  40567e:	4291      	cmp	r1, r2
  405680:	f300 818a 	bgt.w	405998 <_svfprintf_r+0x1234>
  405684:	f01b 0f01 	tst.w	fp, #1
  405688:	f040 8213 	bne.w	405ab2 <_svfprintf_r+0x134e>
  40568c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405690:	9308      	str	r3, [sp, #32]
  405692:	2367      	movs	r3, #103	; 0x67
  405694:	920e      	str	r2, [sp, #56]	; 0x38
  405696:	9311      	str	r3, [sp, #68]	; 0x44
  405698:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40569a:	2b00      	cmp	r3, #0
  40569c:	f040 80c4 	bne.w	405828 <_svfprintf_r+0x10c4>
  4056a0:	930a      	str	r3, [sp, #40]	; 0x28
  4056a2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4056a6:	f7ff b975 	b.w	404994 <_svfprintf_r+0x230>
  4056aa:	4635      	mov	r5, r6
  4056ac:	460c      	mov	r4, r1
  4056ae:	4646      	mov	r6, r8
  4056b0:	4690      	mov	r8, r2
  4056b2:	3301      	adds	r3, #1
  4056b4:	443c      	add	r4, r7
  4056b6:	2b07      	cmp	r3, #7
  4056b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4056ba:	9326      	str	r3, [sp, #152]	; 0x98
  4056bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4056c0:	f73f aed1 	bgt.w	405466 <_svfprintf_r+0xd02>
  4056c4:	f108 0808 	add.w	r8, r8, #8
  4056c8:	e6d7      	b.n	40547a <_svfprintf_r+0xd16>
  4056ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056cc:	6813      	ldr	r3, [r2, #0]
  4056ce:	3204      	adds	r2, #4
  4056d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4056d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4056d4:	601a      	str	r2, [r3, #0]
  4056d6:	f7ff b86c 	b.w	4047b2 <_svfprintf_r+0x4e>
  4056da:	aa25      	add	r2, sp, #148	; 0x94
  4056dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056de:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056e0:	f002 fd06 	bl	4080f0 <__ssprint_r>
  4056e4:	2800      	cmp	r0, #0
  4056e6:	f47f a90f 	bne.w	404908 <_svfprintf_r+0x1a4>
  4056ea:	46c8      	mov	r8, r9
  4056ec:	e48d      	b.n	40500a <_svfprintf_r+0x8a6>
  4056ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056f0:	4a27      	ldr	r2, [pc, #156]	; (405790 <_svfprintf_r+0x102c>)
  4056f2:	f8c8 2000 	str.w	r2, [r8]
  4056f6:	3301      	adds	r3, #1
  4056f8:	3401      	adds	r4, #1
  4056fa:	2201      	movs	r2, #1
  4056fc:	2b07      	cmp	r3, #7
  4056fe:	9427      	str	r4, [sp, #156]	; 0x9c
  405700:	9326      	str	r3, [sp, #152]	; 0x98
  405702:	f8c8 2004 	str.w	r2, [r8, #4]
  405706:	dc72      	bgt.n	4057ee <_svfprintf_r+0x108a>
  405708:	f108 0808 	add.w	r8, r8, #8
  40570c:	b929      	cbnz	r1, 40571a <_svfprintf_r+0xfb6>
  40570e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405710:	b91b      	cbnz	r3, 40571a <_svfprintf_r+0xfb6>
  405712:	9b07      	ldr	r3, [sp, #28]
  405714:	07d8      	lsls	r0, r3, #31
  405716:	f57f aa05 	bpl.w	404b24 <_svfprintf_r+0x3c0>
  40571a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40571c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40571e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405720:	f8c8 2000 	str.w	r2, [r8]
  405724:	3301      	adds	r3, #1
  405726:	4602      	mov	r2, r0
  405728:	4422      	add	r2, r4
  40572a:	2b07      	cmp	r3, #7
  40572c:	9227      	str	r2, [sp, #156]	; 0x9c
  40572e:	f8c8 0004 	str.w	r0, [r8, #4]
  405732:	9326      	str	r3, [sp, #152]	; 0x98
  405734:	f300 818d 	bgt.w	405a52 <_svfprintf_r+0x12ee>
  405738:	f108 0808 	add.w	r8, r8, #8
  40573c:	2900      	cmp	r1, #0
  40573e:	f2c0 8165 	blt.w	405a0c <_svfprintf_r+0x12a8>
  405742:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405744:	f8c8 6000 	str.w	r6, [r8]
  405748:	3301      	adds	r3, #1
  40574a:	188c      	adds	r4, r1, r2
  40574c:	2b07      	cmp	r3, #7
  40574e:	9427      	str	r4, [sp, #156]	; 0x9c
  405750:	9326      	str	r3, [sp, #152]	; 0x98
  405752:	f8c8 1004 	str.w	r1, [r8, #4]
  405756:	f77f a9e3 	ble.w	404b20 <_svfprintf_r+0x3bc>
  40575a:	e52b      	b.n	4051b4 <_svfprintf_r+0xa50>
  40575c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40575e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405760:	6813      	ldr	r3, [r2, #0]
  405762:	17cd      	asrs	r5, r1, #31
  405764:	4608      	mov	r0, r1
  405766:	3204      	adds	r2, #4
  405768:	4629      	mov	r1, r5
  40576a:	920f      	str	r2, [sp, #60]	; 0x3c
  40576c:	e9c3 0100 	strd	r0, r1, [r3]
  405770:	f7ff b81f 	b.w	4047b2 <_svfprintf_r+0x4e>
  405774:	aa25      	add	r2, sp, #148	; 0x94
  405776:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405778:	980c      	ldr	r0, [sp, #48]	; 0x30
  40577a:	f002 fcb9 	bl	4080f0 <__ssprint_r>
  40577e:	2800      	cmp	r0, #0
  405780:	f47f a8c2 	bne.w	404908 <_svfprintf_r+0x1a4>
  405784:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405786:	46c8      	mov	r8, r9
  405788:	e458      	b.n	40503c <_svfprintf_r+0x8d8>
  40578a:	bf00      	nop
  40578c:	00409a08 	.word	0x00409a08
  405790:	004099f4 	.word	0x004099f4
  405794:	2140      	movs	r1, #64	; 0x40
  405796:	980c      	ldr	r0, [sp, #48]	; 0x30
  405798:	f001 fb36 	bl	406e08 <_malloc_r>
  40579c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40579e:	6010      	str	r0, [r2, #0]
  4057a0:	6110      	str	r0, [r2, #16]
  4057a2:	2800      	cmp	r0, #0
  4057a4:	f000 81ec 	beq.w	405b80 <_svfprintf_r+0x141c>
  4057a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4057aa:	2340      	movs	r3, #64	; 0x40
  4057ac:	6153      	str	r3, [r2, #20]
  4057ae:	f7fe bff0 	b.w	404792 <_svfprintf_r+0x2e>
  4057b2:	a823      	add	r0, sp, #140	; 0x8c
  4057b4:	a920      	add	r1, sp, #128	; 0x80
  4057b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4057b8:	9004      	str	r0, [sp, #16]
  4057ba:	9103      	str	r1, [sp, #12]
  4057bc:	a81f      	add	r0, sp, #124	; 0x7c
  4057be:	2103      	movs	r1, #3
  4057c0:	9002      	str	r0, [sp, #8]
  4057c2:	9a08      	ldr	r2, [sp, #32]
  4057c4:	9401      	str	r4, [sp, #4]
  4057c6:	463b      	mov	r3, r7
  4057c8:	9100      	str	r1, [sp, #0]
  4057ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057cc:	f000 fa94 	bl	405cf8 <_dtoa_r>
  4057d0:	4625      	mov	r5, r4
  4057d2:	4606      	mov	r6, r0
  4057d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057d6:	2b46      	cmp	r3, #70	; 0x46
  4057d8:	eb06 0405 	add.w	r4, r6, r5
  4057dc:	f47f af29 	bne.w	405632 <_svfprintf_r+0xece>
  4057e0:	7833      	ldrb	r3, [r6, #0]
  4057e2:	2b30      	cmp	r3, #48	; 0x30
  4057e4:	f000 8172 	beq.w	405acc <_svfprintf_r+0x1368>
  4057e8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4057ea:	442c      	add	r4, r5
  4057ec:	e721      	b.n	405632 <_svfprintf_r+0xece>
  4057ee:	aa25      	add	r2, sp, #148	; 0x94
  4057f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057f4:	f002 fc7c 	bl	4080f0 <__ssprint_r>
  4057f8:	2800      	cmp	r0, #0
  4057fa:	f47f a885 	bne.w	404908 <_svfprintf_r+0x1a4>
  4057fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405800:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405802:	46c8      	mov	r8, r9
  405804:	e782      	b.n	40570c <_svfprintf_r+0xfa8>
  405806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405808:	2b00      	cmp	r3, #0
  40580a:	bf08      	it	eq
  40580c:	2301      	moveq	r3, #1
  40580e:	930a      	str	r3, [sp, #40]	; 0x28
  405810:	e6db      	b.n	4055ca <_svfprintf_r+0xe66>
  405812:	4630      	mov	r0, r6
  405814:	940a      	str	r4, [sp, #40]	; 0x28
  405816:	f7fe fcd3 	bl	4041c0 <strlen>
  40581a:	950f      	str	r5, [sp, #60]	; 0x3c
  40581c:	900e      	str	r0, [sp, #56]	; 0x38
  40581e:	f8cd b01c 	str.w	fp, [sp, #28]
  405822:	4603      	mov	r3, r0
  405824:	f7ff b9fb 	b.w	404c1e <_svfprintf_r+0x4ba>
  405828:	272d      	movs	r7, #45	; 0x2d
  40582a:	2300      	movs	r3, #0
  40582c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405830:	930a      	str	r3, [sp, #40]	; 0x28
  405832:	f7ff b8b0 	b.w	404996 <_svfprintf_r+0x232>
  405836:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405838:	9312      	str	r3, [sp, #72]	; 0x48
  40583a:	461a      	mov	r2, r3
  40583c:	3303      	adds	r3, #3
  40583e:	db04      	blt.n	40584a <_svfprintf_r+0x10e6>
  405840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405842:	4619      	mov	r1, r3
  405844:	4291      	cmp	r1, r2
  405846:	f6bf af17 	bge.w	405678 <_svfprintf_r+0xf14>
  40584a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40584c:	3b02      	subs	r3, #2
  40584e:	9311      	str	r3, [sp, #68]	; 0x44
  405850:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405854:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405858:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40585a:	3b01      	subs	r3, #1
  40585c:	2b00      	cmp	r3, #0
  40585e:	931f      	str	r3, [sp, #124]	; 0x7c
  405860:	bfbd      	ittte	lt
  405862:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405864:	f1c3 0301 	rsblt	r3, r3, #1
  405868:	222d      	movlt	r2, #45	; 0x2d
  40586a:	222b      	movge	r2, #43	; 0x2b
  40586c:	2b09      	cmp	r3, #9
  40586e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405872:	f340 8116 	ble.w	405aa2 <_svfprintf_r+0x133e>
  405876:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40587a:	4620      	mov	r0, r4
  40587c:	4dad      	ldr	r5, [pc, #692]	; (405b34 <_svfprintf_r+0x13d0>)
  40587e:	e000      	b.n	405882 <_svfprintf_r+0x111e>
  405880:	4610      	mov	r0, r2
  405882:	fb85 1203 	smull	r1, r2, r5, r3
  405886:	17d9      	asrs	r1, r3, #31
  405888:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40588c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405890:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405894:	3230      	adds	r2, #48	; 0x30
  405896:	2909      	cmp	r1, #9
  405898:	f800 2c01 	strb.w	r2, [r0, #-1]
  40589c:	460b      	mov	r3, r1
  40589e:	f100 32ff 	add.w	r2, r0, #4294967295
  4058a2:	dced      	bgt.n	405880 <_svfprintf_r+0x111c>
  4058a4:	3330      	adds	r3, #48	; 0x30
  4058a6:	3802      	subs	r0, #2
  4058a8:	b2d9      	uxtb	r1, r3
  4058aa:	4284      	cmp	r4, r0
  4058ac:	f802 1c01 	strb.w	r1, [r2, #-1]
  4058b0:	f240 815f 	bls.w	405b72 <_svfprintf_r+0x140e>
  4058b4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4058b8:	4613      	mov	r3, r2
  4058ba:	e001      	b.n	4058c0 <_svfprintf_r+0x115c>
  4058bc:	f813 1b01 	ldrb.w	r1, [r3], #1
  4058c0:	f800 1b01 	strb.w	r1, [r0], #1
  4058c4:	42a3      	cmp	r3, r4
  4058c6:	d1f9      	bne.n	4058bc <_svfprintf_r+0x1158>
  4058c8:	3301      	adds	r3, #1
  4058ca:	1a9b      	subs	r3, r3, r2
  4058cc:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4058d0:	4413      	add	r3, r2
  4058d2:	aa21      	add	r2, sp, #132	; 0x84
  4058d4:	1a9b      	subs	r3, r3, r2
  4058d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4058d8:	931b      	str	r3, [sp, #108]	; 0x6c
  4058da:	2a01      	cmp	r2, #1
  4058dc:	4413      	add	r3, r2
  4058de:	930e      	str	r3, [sp, #56]	; 0x38
  4058e0:	f340 8113 	ble.w	405b0a <_svfprintf_r+0x13a6>
  4058e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4058e8:	4413      	add	r3, r2
  4058ea:	930e      	str	r3, [sp, #56]	; 0x38
  4058ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4058f0:	9308      	str	r3, [sp, #32]
  4058f2:	2300      	movs	r3, #0
  4058f4:	9312      	str	r3, [sp, #72]	; 0x48
  4058f6:	e6cf      	b.n	405698 <_svfprintf_r+0xf34>
  4058f8:	aa25      	add	r2, sp, #148	; 0x94
  4058fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058fe:	f002 fbf7 	bl	4080f0 <__ssprint_r>
  405902:	2800      	cmp	r0, #0
  405904:	f47f a800 	bne.w	404908 <_svfprintf_r+0x1a4>
  405908:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40590a:	46c8      	mov	r8, r9
  40590c:	e4d6      	b.n	4052bc <_svfprintf_r+0xb58>
  40590e:	4623      	mov	r3, r4
  405910:	e6a2      	b.n	405658 <_svfprintf_r+0xef4>
  405912:	aa25      	add	r2, sp, #148	; 0x94
  405914:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405916:	980c      	ldr	r0, [sp, #48]	; 0x30
  405918:	f002 fbea 	bl	4080f0 <__ssprint_r>
  40591c:	2800      	cmp	r0, #0
  40591e:	f47e aff3 	bne.w	404908 <_svfprintf_r+0x1a4>
  405922:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405924:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405926:	46c8      	mov	r8, r9
  405928:	e5ae      	b.n	405488 <_svfprintf_r+0xd24>
  40592a:	aa25      	add	r2, sp, #148	; 0x94
  40592c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40592e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405930:	f002 fbde 	bl	4080f0 <__ssprint_r>
  405934:	2800      	cmp	r0, #0
  405936:	f47e afe7 	bne.w	404908 <_svfprintf_r+0x1a4>
  40593a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40593c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40593e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405940:	1a9a      	subs	r2, r3, r2
  405942:	46c8      	mov	r8, r9
  405944:	e5b8      	b.n	4054b8 <_svfprintf_r+0xd54>
  405946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405948:	9612      	str	r6, [sp, #72]	; 0x48
  40594a:	2b06      	cmp	r3, #6
  40594c:	bf28      	it	cs
  40594e:	2306      	movcs	r3, #6
  405950:	960a      	str	r6, [sp, #40]	; 0x28
  405952:	4637      	mov	r7, r6
  405954:	9308      	str	r3, [sp, #32]
  405956:	950f      	str	r5, [sp, #60]	; 0x3c
  405958:	f8cd b01c 	str.w	fp, [sp, #28]
  40595c:	930e      	str	r3, [sp, #56]	; 0x38
  40595e:	4e76      	ldr	r6, [pc, #472]	; (405b38 <_svfprintf_r+0x13d4>)
  405960:	f7ff b818 	b.w	404994 <_svfprintf_r+0x230>
  405964:	a823      	add	r0, sp, #140	; 0x8c
  405966:	a920      	add	r1, sp, #128	; 0x80
  405968:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40596a:	9004      	str	r0, [sp, #16]
  40596c:	9103      	str	r1, [sp, #12]
  40596e:	a81f      	add	r0, sp, #124	; 0x7c
  405970:	2103      	movs	r1, #3
  405972:	9002      	str	r0, [sp, #8]
  405974:	9a08      	ldr	r2, [sp, #32]
  405976:	9501      	str	r5, [sp, #4]
  405978:	463b      	mov	r3, r7
  40597a:	9100      	str	r1, [sp, #0]
  40597c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40597e:	f000 f9bb 	bl	405cf8 <_dtoa_r>
  405982:	4606      	mov	r6, r0
  405984:	1944      	adds	r4, r0, r5
  405986:	e72b      	b.n	4057e0 <_svfprintf_r+0x107c>
  405988:	2306      	movs	r3, #6
  40598a:	930a      	str	r3, [sp, #40]	; 0x28
  40598c:	e61d      	b.n	4055ca <_svfprintf_r+0xe66>
  40598e:	272d      	movs	r7, #45	; 0x2d
  405990:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405994:	f7ff bace 	b.w	404f34 <_svfprintf_r+0x7d0>
  405998:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40599a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40599c:	4413      	add	r3, r2
  40599e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4059a0:	930e      	str	r3, [sp, #56]	; 0x38
  4059a2:	2a00      	cmp	r2, #0
  4059a4:	f340 80aa 	ble.w	405afc <_svfprintf_r+0x1398>
  4059a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4059ac:	9308      	str	r3, [sp, #32]
  4059ae:	2367      	movs	r3, #103	; 0x67
  4059b0:	9311      	str	r3, [sp, #68]	; 0x44
  4059b2:	e671      	b.n	405698 <_svfprintf_r+0xf34>
  4059b4:	2b00      	cmp	r3, #0
  4059b6:	f340 80b2 	ble.w	405b1e <_svfprintf_r+0x13ba>
  4059ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4059bc:	2a00      	cmp	r2, #0
  4059be:	f040 8093 	bne.w	405ae8 <_svfprintf_r+0x1384>
  4059c2:	f01b 0f01 	tst.w	fp, #1
  4059c6:	f040 808f 	bne.w	405ae8 <_svfprintf_r+0x1384>
  4059ca:	9308      	str	r3, [sp, #32]
  4059cc:	930e      	str	r3, [sp, #56]	; 0x38
  4059ce:	e663      	b.n	405698 <_svfprintf_r+0xf34>
  4059d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059d2:	9308      	str	r3, [sp, #32]
  4059d4:	930e      	str	r3, [sp, #56]	; 0x38
  4059d6:	900a      	str	r0, [sp, #40]	; 0x28
  4059d8:	950f      	str	r5, [sp, #60]	; 0x3c
  4059da:	f8cd b01c 	str.w	fp, [sp, #28]
  4059de:	9012      	str	r0, [sp, #72]	; 0x48
  4059e0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4059e4:	f7fe bfd6 	b.w	404994 <_svfprintf_r+0x230>
  4059e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4059ea:	2b47      	cmp	r3, #71	; 0x47
  4059ec:	f47f ae20 	bne.w	405630 <_svfprintf_r+0xecc>
  4059f0:	f01b 0f01 	tst.w	fp, #1
  4059f4:	f47f aeee 	bne.w	4057d4 <_svfprintf_r+0x1070>
  4059f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4059fa:	1b9b      	subs	r3, r3, r6
  4059fc:	9313      	str	r3, [sp, #76]	; 0x4c
  4059fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a00:	2b47      	cmp	r3, #71	; 0x47
  405a02:	f43f af18 	beq.w	405836 <_svfprintf_r+0x10d2>
  405a06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405a08:	9312      	str	r3, [sp, #72]	; 0x48
  405a0a:	e721      	b.n	405850 <_svfprintf_r+0x10ec>
  405a0c:	424f      	negs	r7, r1
  405a0e:	3110      	adds	r1, #16
  405a10:	4d4a      	ldr	r5, [pc, #296]	; (405b3c <_svfprintf_r+0x13d8>)
  405a12:	da2f      	bge.n	405a74 <_svfprintf_r+0x1310>
  405a14:	2410      	movs	r4, #16
  405a16:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405a1a:	e004      	b.n	405a26 <_svfprintf_r+0x12c2>
  405a1c:	f108 0808 	add.w	r8, r8, #8
  405a20:	3f10      	subs	r7, #16
  405a22:	2f10      	cmp	r7, #16
  405a24:	dd26      	ble.n	405a74 <_svfprintf_r+0x1310>
  405a26:	3301      	adds	r3, #1
  405a28:	3210      	adds	r2, #16
  405a2a:	2b07      	cmp	r3, #7
  405a2c:	9227      	str	r2, [sp, #156]	; 0x9c
  405a2e:	9326      	str	r3, [sp, #152]	; 0x98
  405a30:	f8c8 5000 	str.w	r5, [r8]
  405a34:	f8c8 4004 	str.w	r4, [r8, #4]
  405a38:	ddf0      	ble.n	405a1c <_svfprintf_r+0x12b8>
  405a3a:	aa25      	add	r2, sp, #148	; 0x94
  405a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a3e:	4658      	mov	r0, fp
  405a40:	f002 fb56 	bl	4080f0 <__ssprint_r>
  405a44:	2800      	cmp	r0, #0
  405a46:	f47e af5f 	bne.w	404908 <_svfprintf_r+0x1a4>
  405a4a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a4e:	46c8      	mov	r8, r9
  405a50:	e7e6      	b.n	405a20 <_svfprintf_r+0x12bc>
  405a52:	aa25      	add	r2, sp, #148	; 0x94
  405a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a56:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a58:	f002 fb4a 	bl	4080f0 <__ssprint_r>
  405a5c:	2800      	cmp	r0, #0
  405a5e:	f47e af53 	bne.w	404908 <_svfprintf_r+0x1a4>
  405a62:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405a64:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a68:	46c8      	mov	r8, r9
  405a6a:	e667      	b.n	40573c <_svfprintf_r+0xfd8>
  405a6c:	2000      	movs	r0, #0
  405a6e:	900a      	str	r0, [sp, #40]	; 0x28
  405a70:	f7fe bed2 	b.w	404818 <_svfprintf_r+0xb4>
  405a74:	3301      	adds	r3, #1
  405a76:	443a      	add	r2, r7
  405a78:	2b07      	cmp	r3, #7
  405a7a:	e888 00a0 	stmia.w	r8, {r5, r7}
  405a7e:	9227      	str	r2, [sp, #156]	; 0x9c
  405a80:	9326      	str	r3, [sp, #152]	; 0x98
  405a82:	f108 0808 	add.w	r8, r8, #8
  405a86:	f77f ae5c 	ble.w	405742 <_svfprintf_r+0xfde>
  405a8a:	aa25      	add	r2, sp, #148	; 0x94
  405a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a90:	f002 fb2e 	bl	4080f0 <__ssprint_r>
  405a94:	2800      	cmp	r0, #0
  405a96:	f47e af37 	bne.w	404908 <_svfprintf_r+0x1a4>
  405a9a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a9e:	46c8      	mov	r8, r9
  405aa0:	e64f      	b.n	405742 <_svfprintf_r+0xfde>
  405aa2:	3330      	adds	r3, #48	; 0x30
  405aa4:	2230      	movs	r2, #48	; 0x30
  405aa6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405aaa:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405aae:	ab22      	add	r3, sp, #136	; 0x88
  405ab0:	e70f      	b.n	4058d2 <_svfprintf_r+0x116e>
  405ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ab4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405ab6:	4413      	add	r3, r2
  405ab8:	930e      	str	r3, [sp, #56]	; 0x38
  405aba:	e775      	b.n	4059a8 <_svfprintf_r+0x1244>
  405abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405abe:	e5cb      	b.n	405658 <_svfprintf_r+0xef4>
  405ac0:	4e1f      	ldr	r6, [pc, #124]	; (405b40 <_svfprintf_r+0x13dc>)
  405ac2:	4b20      	ldr	r3, [pc, #128]	; (405b44 <_svfprintf_r+0x13e0>)
  405ac4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405ac8:	f7ff ba36 	b.w	404f38 <_svfprintf_r+0x7d4>
  405acc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405ace:	9808      	ldr	r0, [sp, #32]
  405ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405ad2:	4639      	mov	r1, r7
  405ad4:	f003 f83a 	bl	408b4c <__aeabi_dcmpeq>
  405ad8:	2800      	cmp	r0, #0
  405ada:	f47f ae85 	bne.w	4057e8 <_svfprintf_r+0x1084>
  405ade:	f1c5 0501 	rsb	r5, r5, #1
  405ae2:	951f      	str	r5, [sp, #124]	; 0x7c
  405ae4:	442c      	add	r4, r5
  405ae6:	e5a4      	b.n	405632 <_svfprintf_r+0xece>
  405ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aea:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405aec:	4413      	add	r3, r2
  405aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405af0:	441a      	add	r2, r3
  405af2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405af6:	920e      	str	r2, [sp, #56]	; 0x38
  405af8:	9308      	str	r3, [sp, #32]
  405afa:	e5cd      	b.n	405698 <_svfprintf_r+0xf34>
  405afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405afe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b00:	f1c3 0301 	rsb	r3, r3, #1
  405b04:	441a      	add	r2, r3
  405b06:	4613      	mov	r3, r2
  405b08:	e7d6      	b.n	405ab8 <_svfprintf_r+0x1354>
  405b0a:	f01b 0301 	ands.w	r3, fp, #1
  405b0e:	9312      	str	r3, [sp, #72]	; 0x48
  405b10:	f47f aee8 	bne.w	4058e4 <_svfprintf_r+0x1180>
  405b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405b16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405b1a:	9308      	str	r3, [sp, #32]
  405b1c:	e5bc      	b.n	405698 <_svfprintf_r+0xf34>
  405b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b20:	b913      	cbnz	r3, 405b28 <_svfprintf_r+0x13c4>
  405b22:	f01b 0f01 	tst.w	fp, #1
  405b26:	d002      	beq.n	405b2e <_svfprintf_r+0x13ca>
  405b28:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405b2a:	3301      	adds	r3, #1
  405b2c:	e7df      	b.n	405aee <_svfprintf_r+0x138a>
  405b2e:	2301      	movs	r3, #1
  405b30:	e74b      	b.n	4059ca <_svfprintf_r+0x1266>
  405b32:	bf00      	nop
  405b34:	66666667 	.word	0x66666667
  405b38:	004099ec 	.word	0x004099ec
  405b3c:	00409a08 	.word	0x00409a08
  405b40:	004099c0 	.word	0x004099c0
  405b44:	004099bc 	.word	0x004099bc
  405b48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405b4a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405b4e:	6828      	ldr	r0, [r5, #0]
  405b50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405b54:	900a      	str	r0, [sp, #40]	; 0x28
  405b56:	4628      	mov	r0, r5
  405b58:	3004      	adds	r0, #4
  405b5a:	46a2      	mov	sl, r4
  405b5c:	900f      	str	r0, [sp, #60]	; 0x3c
  405b5e:	f7fe be59 	b.w	404814 <_svfprintf_r+0xb0>
  405b62:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b66:	f7ff b86f 	b.w	404c48 <_svfprintf_r+0x4e4>
  405b6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b6e:	f7ff ba1c 	b.w	404faa <_svfprintf_r+0x846>
  405b72:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405b76:	e6ac      	b.n	4058d2 <_svfprintf_r+0x116e>
  405b78:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b7c:	f7ff b8f3 	b.w	404d66 <_svfprintf_r+0x602>
  405b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b82:	230c      	movs	r3, #12
  405b84:	6013      	str	r3, [r2, #0]
  405b86:	f04f 33ff 	mov.w	r3, #4294967295
  405b8a:	9309      	str	r3, [sp, #36]	; 0x24
  405b8c:	f7fe bec5 	b.w	40491a <_svfprintf_r+0x1b6>
  405b90:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b94:	f7ff b9a2 	b.w	404edc <_svfprintf_r+0x778>
  405b98:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b9c:	f7ff b97e 	b.w	404e9c <_svfprintf_r+0x738>
  405ba0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405ba4:	f7ff b961 	b.w	404e6a <_svfprintf_r+0x706>
  405ba8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405bac:	f7ff b91a 	b.w	404de4 <_svfprintf_r+0x680>

00405bb0 <register_fini>:
  405bb0:	4b02      	ldr	r3, [pc, #8]	; (405bbc <register_fini+0xc>)
  405bb2:	b113      	cbz	r3, 405bba <register_fini+0xa>
  405bb4:	4802      	ldr	r0, [pc, #8]	; (405bc0 <register_fini+0x10>)
  405bb6:	f000 b805 	b.w	405bc4 <atexit>
  405bba:	4770      	bx	lr
  405bbc:	00000000 	.word	0x00000000
  405bc0:	00406b4d 	.word	0x00406b4d

00405bc4 <atexit>:
  405bc4:	2300      	movs	r3, #0
  405bc6:	4601      	mov	r1, r0
  405bc8:	461a      	mov	r2, r3
  405bca:	4618      	mov	r0, r3
  405bcc:	f002 bb1c 	b.w	408208 <__register_exitproc>

00405bd0 <quorem>:
  405bd0:	6902      	ldr	r2, [r0, #16]
  405bd2:	690b      	ldr	r3, [r1, #16]
  405bd4:	4293      	cmp	r3, r2
  405bd6:	f300 808d 	bgt.w	405cf4 <quorem+0x124>
  405bda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405bde:	f103 38ff 	add.w	r8, r3, #4294967295
  405be2:	f101 0714 	add.w	r7, r1, #20
  405be6:	f100 0b14 	add.w	fp, r0, #20
  405bea:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405bee:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405bf2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405bf6:	b083      	sub	sp, #12
  405bf8:	3201      	adds	r2, #1
  405bfa:	fbb3 f9f2 	udiv	r9, r3, r2
  405bfe:	eb0b 0304 	add.w	r3, fp, r4
  405c02:	9400      	str	r4, [sp, #0]
  405c04:	eb07 0a04 	add.w	sl, r7, r4
  405c08:	9301      	str	r3, [sp, #4]
  405c0a:	f1b9 0f00 	cmp.w	r9, #0
  405c0e:	d039      	beq.n	405c84 <quorem+0xb4>
  405c10:	2500      	movs	r5, #0
  405c12:	462e      	mov	r6, r5
  405c14:	46bc      	mov	ip, r7
  405c16:	46de      	mov	lr, fp
  405c18:	f85c 4b04 	ldr.w	r4, [ip], #4
  405c1c:	f8de 3000 	ldr.w	r3, [lr]
  405c20:	b2a2      	uxth	r2, r4
  405c22:	fb09 5502 	mla	r5, r9, r2, r5
  405c26:	0c22      	lsrs	r2, r4, #16
  405c28:	0c2c      	lsrs	r4, r5, #16
  405c2a:	fb09 4202 	mla	r2, r9, r2, r4
  405c2e:	b2ad      	uxth	r5, r5
  405c30:	1b75      	subs	r5, r6, r5
  405c32:	b296      	uxth	r6, r2
  405c34:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405c38:	fa15 f383 	uxtah	r3, r5, r3
  405c3c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405c40:	b29b      	uxth	r3, r3
  405c42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405c46:	45e2      	cmp	sl, ip
  405c48:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405c4c:	f84e 3b04 	str.w	r3, [lr], #4
  405c50:	ea4f 4626 	mov.w	r6, r6, asr #16
  405c54:	d2e0      	bcs.n	405c18 <quorem+0x48>
  405c56:	9b00      	ldr	r3, [sp, #0]
  405c58:	f85b 3003 	ldr.w	r3, [fp, r3]
  405c5c:	b993      	cbnz	r3, 405c84 <quorem+0xb4>
  405c5e:	9c01      	ldr	r4, [sp, #4]
  405c60:	1f23      	subs	r3, r4, #4
  405c62:	459b      	cmp	fp, r3
  405c64:	d20c      	bcs.n	405c80 <quorem+0xb0>
  405c66:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405c6a:	b94b      	cbnz	r3, 405c80 <quorem+0xb0>
  405c6c:	f1a4 0308 	sub.w	r3, r4, #8
  405c70:	e002      	b.n	405c78 <quorem+0xa8>
  405c72:	681a      	ldr	r2, [r3, #0]
  405c74:	3b04      	subs	r3, #4
  405c76:	b91a      	cbnz	r2, 405c80 <quorem+0xb0>
  405c78:	459b      	cmp	fp, r3
  405c7a:	f108 38ff 	add.w	r8, r8, #4294967295
  405c7e:	d3f8      	bcc.n	405c72 <quorem+0xa2>
  405c80:	f8c0 8010 	str.w	r8, [r0, #16]
  405c84:	4604      	mov	r4, r0
  405c86:	f001 ff0b 	bl	407aa0 <__mcmp>
  405c8a:	2800      	cmp	r0, #0
  405c8c:	db2e      	blt.n	405cec <quorem+0x11c>
  405c8e:	f109 0901 	add.w	r9, r9, #1
  405c92:	465d      	mov	r5, fp
  405c94:	2300      	movs	r3, #0
  405c96:	f857 1b04 	ldr.w	r1, [r7], #4
  405c9a:	6828      	ldr	r0, [r5, #0]
  405c9c:	b28a      	uxth	r2, r1
  405c9e:	1a9a      	subs	r2, r3, r2
  405ca0:	0c0b      	lsrs	r3, r1, #16
  405ca2:	fa12 f280 	uxtah	r2, r2, r0
  405ca6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405caa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405cae:	b292      	uxth	r2, r2
  405cb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405cb4:	45ba      	cmp	sl, r7
  405cb6:	f845 2b04 	str.w	r2, [r5], #4
  405cba:	ea4f 4323 	mov.w	r3, r3, asr #16
  405cbe:	d2ea      	bcs.n	405c96 <quorem+0xc6>
  405cc0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405cc4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405cc8:	b982      	cbnz	r2, 405cec <quorem+0x11c>
  405cca:	1f1a      	subs	r2, r3, #4
  405ccc:	4593      	cmp	fp, r2
  405cce:	d20b      	bcs.n	405ce8 <quorem+0x118>
  405cd0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405cd4:	b942      	cbnz	r2, 405ce8 <quorem+0x118>
  405cd6:	3b08      	subs	r3, #8
  405cd8:	e002      	b.n	405ce0 <quorem+0x110>
  405cda:	681a      	ldr	r2, [r3, #0]
  405cdc:	3b04      	subs	r3, #4
  405cde:	b91a      	cbnz	r2, 405ce8 <quorem+0x118>
  405ce0:	459b      	cmp	fp, r3
  405ce2:	f108 38ff 	add.w	r8, r8, #4294967295
  405ce6:	d3f8      	bcc.n	405cda <quorem+0x10a>
  405ce8:	f8c4 8010 	str.w	r8, [r4, #16]
  405cec:	4648      	mov	r0, r9
  405cee:	b003      	add	sp, #12
  405cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cf4:	2000      	movs	r0, #0
  405cf6:	4770      	bx	lr

00405cf8 <_dtoa_r>:
  405cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405cfe:	b09b      	sub	sp, #108	; 0x6c
  405d00:	4604      	mov	r4, r0
  405d02:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405d04:	4692      	mov	sl, r2
  405d06:	469b      	mov	fp, r3
  405d08:	b141      	cbz	r1, 405d1c <_dtoa_r+0x24>
  405d0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405d0c:	604a      	str	r2, [r1, #4]
  405d0e:	2301      	movs	r3, #1
  405d10:	4093      	lsls	r3, r2
  405d12:	608b      	str	r3, [r1, #8]
  405d14:	f001 fcec 	bl	4076f0 <_Bfree>
  405d18:	2300      	movs	r3, #0
  405d1a:	6423      	str	r3, [r4, #64]	; 0x40
  405d1c:	f1bb 0f00 	cmp.w	fp, #0
  405d20:	465d      	mov	r5, fp
  405d22:	db35      	blt.n	405d90 <_dtoa_r+0x98>
  405d24:	2300      	movs	r3, #0
  405d26:	6033      	str	r3, [r6, #0]
  405d28:	4b9d      	ldr	r3, [pc, #628]	; (405fa0 <_dtoa_r+0x2a8>)
  405d2a:	43ab      	bics	r3, r5
  405d2c:	d015      	beq.n	405d5a <_dtoa_r+0x62>
  405d2e:	4650      	mov	r0, sl
  405d30:	4659      	mov	r1, fp
  405d32:	2200      	movs	r2, #0
  405d34:	2300      	movs	r3, #0
  405d36:	f002 ff09 	bl	408b4c <__aeabi_dcmpeq>
  405d3a:	4680      	mov	r8, r0
  405d3c:	2800      	cmp	r0, #0
  405d3e:	d02d      	beq.n	405d9c <_dtoa_r+0xa4>
  405d40:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405d42:	2301      	movs	r3, #1
  405d44:	6013      	str	r3, [r2, #0]
  405d46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405d48:	2b00      	cmp	r3, #0
  405d4a:	f000 80bd 	beq.w	405ec8 <_dtoa_r+0x1d0>
  405d4e:	4895      	ldr	r0, [pc, #596]	; (405fa4 <_dtoa_r+0x2ac>)
  405d50:	6018      	str	r0, [r3, #0]
  405d52:	3801      	subs	r0, #1
  405d54:	b01b      	add	sp, #108	; 0x6c
  405d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405d5c:	f242 730f 	movw	r3, #9999	; 0x270f
  405d60:	6013      	str	r3, [r2, #0]
  405d62:	f1ba 0f00 	cmp.w	sl, #0
  405d66:	d10d      	bne.n	405d84 <_dtoa_r+0x8c>
  405d68:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405d6c:	b955      	cbnz	r5, 405d84 <_dtoa_r+0x8c>
  405d6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405d70:	488d      	ldr	r0, [pc, #564]	; (405fa8 <_dtoa_r+0x2b0>)
  405d72:	2b00      	cmp	r3, #0
  405d74:	d0ee      	beq.n	405d54 <_dtoa_r+0x5c>
  405d76:	f100 0308 	add.w	r3, r0, #8
  405d7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405d7c:	6013      	str	r3, [r2, #0]
  405d7e:	b01b      	add	sp, #108	; 0x6c
  405d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405d86:	4889      	ldr	r0, [pc, #548]	; (405fac <_dtoa_r+0x2b4>)
  405d88:	2b00      	cmp	r3, #0
  405d8a:	d0e3      	beq.n	405d54 <_dtoa_r+0x5c>
  405d8c:	1cc3      	adds	r3, r0, #3
  405d8e:	e7f4      	b.n	405d7a <_dtoa_r+0x82>
  405d90:	2301      	movs	r3, #1
  405d92:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405d96:	6033      	str	r3, [r6, #0]
  405d98:	46ab      	mov	fp, r5
  405d9a:	e7c5      	b.n	405d28 <_dtoa_r+0x30>
  405d9c:	aa18      	add	r2, sp, #96	; 0x60
  405d9e:	ab19      	add	r3, sp, #100	; 0x64
  405da0:	9201      	str	r2, [sp, #4]
  405da2:	9300      	str	r3, [sp, #0]
  405da4:	4652      	mov	r2, sl
  405da6:	465b      	mov	r3, fp
  405da8:	4620      	mov	r0, r4
  405daa:	f001 ff19 	bl	407be0 <__d2b>
  405dae:	0d2b      	lsrs	r3, r5, #20
  405db0:	4681      	mov	r9, r0
  405db2:	d071      	beq.n	405e98 <_dtoa_r+0x1a0>
  405db4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405db8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405dbc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405dbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405dc2:	4650      	mov	r0, sl
  405dc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405dc8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405dcc:	2200      	movs	r2, #0
  405dce:	4b78      	ldr	r3, [pc, #480]	; (405fb0 <_dtoa_r+0x2b8>)
  405dd0:	f002 faa0 	bl	408314 <__aeabi_dsub>
  405dd4:	a36c      	add	r3, pc, #432	; (adr r3, 405f88 <_dtoa_r+0x290>)
  405dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dda:	f002 fc4f 	bl	40867c <__aeabi_dmul>
  405dde:	a36c      	add	r3, pc, #432	; (adr r3, 405f90 <_dtoa_r+0x298>)
  405de0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405de4:	f002 fa98 	bl	408318 <__adddf3>
  405de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405dec:	4630      	mov	r0, r6
  405dee:	f002 fbdf 	bl	4085b0 <__aeabi_i2d>
  405df2:	a369      	add	r3, pc, #420	; (adr r3, 405f98 <_dtoa_r+0x2a0>)
  405df4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405df8:	f002 fc40 	bl	40867c <__aeabi_dmul>
  405dfc:	4602      	mov	r2, r0
  405dfe:	460b      	mov	r3, r1
  405e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405e04:	f002 fa88 	bl	408318 <__adddf3>
  405e08:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405e0c:	f002 fee6 	bl	408bdc <__aeabi_d2iz>
  405e10:	2200      	movs	r2, #0
  405e12:	9002      	str	r0, [sp, #8]
  405e14:	2300      	movs	r3, #0
  405e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405e1a:	f002 fea1 	bl	408b60 <__aeabi_dcmplt>
  405e1e:	2800      	cmp	r0, #0
  405e20:	f040 8173 	bne.w	40610a <_dtoa_r+0x412>
  405e24:	9d02      	ldr	r5, [sp, #8]
  405e26:	2d16      	cmp	r5, #22
  405e28:	f200 815d 	bhi.w	4060e6 <_dtoa_r+0x3ee>
  405e2c:	4b61      	ldr	r3, [pc, #388]	; (405fb4 <_dtoa_r+0x2bc>)
  405e2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405e32:	e9d3 0100 	ldrd	r0, r1, [r3]
  405e36:	4652      	mov	r2, sl
  405e38:	465b      	mov	r3, fp
  405e3a:	f002 feaf 	bl	408b9c <__aeabi_dcmpgt>
  405e3e:	2800      	cmp	r0, #0
  405e40:	f000 81c5 	beq.w	4061ce <_dtoa_r+0x4d6>
  405e44:	1e6b      	subs	r3, r5, #1
  405e46:	9302      	str	r3, [sp, #8]
  405e48:	2300      	movs	r3, #0
  405e4a:	930e      	str	r3, [sp, #56]	; 0x38
  405e4c:	1bbf      	subs	r7, r7, r6
  405e4e:	1e7b      	subs	r3, r7, #1
  405e50:	9306      	str	r3, [sp, #24]
  405e52:	f100 8154 	bmi.w	4060fe <_dtoa_r+0x406>
  405e56:	2300      	movs	r3, #0
  405e58:	9308      	str	r3, [sp, #32]
  405e5a:	9b02      	ldr	r3, [sp, #8]
  405e5c:	2b00      	cmp	r3, #0
  405e5e:	f2c0 8145 	blt.w	4060ec <_dtoa_r+0x3f4>
  405e62:	9a06      	ldr	r2, [sp, #24]
  405e64:	930d      	str	r3, [sp, #52]	; 0x34
  405e66:	4611      	mov	r1, r2
  405e68:	4419      	add	r1, r3
  405e6a:	2300      	movs	r3, #0
  405e6c:	9106      	str	r1, [sp, #24]
  405e6e:	930c      	str	r3, [sp, #48]	; 0x30
  405e70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e72:	2b09      	cmp	r3, #9
  405e74:	d82a      	bhi.n	405ecc <_dtoa_r+0x1d4>
  405e76:	2b05      	cmp	r3, #5
  405e78:	f340 865b 	ble.w	406b32 <_dtoa_r+0xe3a>
  405e7c:	3b04      	subs	r3, #4
  405e7e:	9324      	str	r3, [sp, #144]	; 0x90
  405e80:	2500      	movs	r5, #0
  405e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e84:	3b02      	subs	r3, #2
  405e86:	2b03      	cmp	r3, #3
  405e88:	f200 8642 	bhi.w	406b10 <_dtoa_r+0xe18>
  405e8c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405e90:	02c903d4 	.word	0x02c903d4
  405e94:	046103df 	.word	0x046103df
  405e98:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405e9a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405e9c:	443e      	add	r6, r7
  405e9e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405ea2:	2b20      	cmp	r3, #32
  405ea4:	f340 818e 	ble.w	4061c4 <_dtoa_r+0x4cc>
  405ea8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405eac:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405eb0:	409d      	lsls	r5, r3
  405eb2:	fa2a f000 	lsr.w	r0, sl, r0
  405eb6:	4328      	orrs	r0, r5
  405eb8:	f002 fb6a 	bl	408590 <__aeabi_ui2d>
  405ebc:	2301      	movs	r3, #1
  405ebe:	3e01      	subs	r6, #1
  405ec0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405ec4:	9314      	str	r3, [sp, #80]	; 0x50
  405ec6:	e781      	b.n	405dcc <_dtoa_r+0xd4>
  405ec8:	483b      	ldr	r0, [pc, #236]	; (405fb8 <_dtoa_r+0x2c0>)
  405eca:	e743      	b.n	405d54 <_dtoa_r+0x5c>
  405ecc:	2100      	movs	r1, #0
  405ece:	6461      	str	r1, [r4, #68]	; 0x44
  405ed0:	4620      	mov	r0, r4
  405ed2:	9125      	str	r1, [sp, #148]	; 0x94
  405ed4:	f001 fbe6 	bl	4076a4 <_Balloc>
  405ed8:	f04f 33ff 	mov.w	r3, #4294967295
  405edc:	930a      	str	r3, [sp, #40]	; 0x28
  405ede:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405ee0:	930f      	str	r3, [sp, #60]	; 0x3c
  405ee2:	2301      	movs	r3, #1
  405ee4:	9004      	str	r0, [sp, #16]
  405ee6:	6420      	str	r0, [r4, #64]	; 0x40
  405ee8:	9224      	str	r2, [sp, #144]	; 0x90
  405eea:	930b      	str	r3, [sp, #44]	; 0x2c
  405eec:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405eee:	2b00      	cmp	r3, #0
  405ef0:	f2c0 80d9 	blt.w	4060a6 <_dtoa_r+0x3ae>
  405ef4:	9a02      	ldr	r2, [sp, #8]
  405ef6:	2a0e      	cmp	r2, #14
  405ef8:	f300 80d5 	bgt.w	4060a6 <_dtoa_r+0x3ae>
  405efc:	4b2d      	ldr	r3, [pc, #180]	; (405fb4 <_dtoa_r+0x2bc>)
  405efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405f02:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405f0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405f0c:	2b00      	cmp	r3, #0
  405f0e:	f2c0 83ba 	blt.w	406686 <_dtoa_r+0x98e>
  405f12:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405f16:	4650      	mov	r0, sl
  405f18:	462a      	mov	r2, r5
  405f1a:	4633      	mov	r3, r6
  405f1c:	4659      	mov	r1, fp
  405f1e:	f002 fcd7 	bl	4088d0 <__aeabi_ddiv>
  405f22:	f002 fe5b 	bl	408bdc <__aeabi_d2iz>
  405f26:	4680      	mov	r8, r0
  405f28:	f002 fb42 	bl	4085b0 <__aeabi_i2d>
  405f2c:	462a      	mov	r2, r5
  405f2e:	4633      	mov	r3, r6
  405f30:	f002 fba4 	bl	40867c <__aeabi_dmul>
  405f34:	460b      	mov	r3, r1
  405f36:	4602      	mov	r2, r0
  405f38:	4659      	mov	r1, fp
  405f3a:	4650      	mov	r0, sl
  405f3c:	f002 f9ea 	bl	408314 <__aeabi_dsub>
  405f40:	9d04      	ldr	r5, [sp, #16]
  405f42:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405f46:	702b      	strb	r3, [r5, #0]
  405f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f4a:	2b01      	cmp	r3, #1
  405f4c:	4606      	mov	r6, r0
  405f4e:	460f      	mov	r7, r1
  405f50:	f105 0501 	add.w	r5, r5, #1
  405f54:	d068      	beq.n	406028 <_dtoa_r+0x330>
  405f56:	2200      	movs	r2, #0
  405f58:	4b18      	ldr	r3, [pc, #96]	; (405fbc <_dtoa_r+0x2c4>)
  405f5a:	f002 fb8f 	bl	40867c <__aeabi_dmul>
  405f5e:	2200      	movs	r2, #0
  405f60:	2300      	movs	r3, #0
  405f62:	4606      	mov	r6, r0
  405f64:	460f      	mov	r7, r1
  405f66:	f002 fdf1 	bl	408b4c <__aeabi_dcmpeq>
  405f6a:	2800      	cmp	r0, #0
  405f6c:	f040 8088 	bne.w	406080 <_dtoa_r+0x388>
  405f70:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405f74:	f04f 0a00 	mov.w	sl, #0
  405f78:	f8df b040 	ldr.w	fp, [pc, #64]	; 405fbc <_dtoa_r+0x2c4>
  405f7c:	940c      	str	r4, [sp, #48]	; 0x30
  405f7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405f82:	e028      	b.n	405fd6 <_dtoa_r+0x2de>
  405f84:	f3af 8000 	nop.w
  405f88:	636f4361 	.word	0x636f4361
  405f8c:	3fd287a7 	.word	0x3fd287a7
  405f90:	8b60c8b3 	.word	0x8b60c8b3
  405f94:	3fc68a28 	.word	0x3fc68a28
  405f98:	509f79fb 	.word	0x509f79fb
  405f9c:	3fd34413 	.word	0x3fd34413
  405fa0:	7ff00000 	.word	0x7ff00000
  405fa4:	004099f5 	.word	0x004099f5
  405fa8:	00409a18 	.word	0x00409a18
  405fac:	00409a24 	.word	0x00409a24
  405fb0:	3ff80000 	.word	0x3ff80000
  405fb4:	00409a60 	.word	0x00409a60
  405fb8:	004099f4 	.word	0x004099f4
  405fbc:	40240000 	.word	0x40240000
  405fc0:	f002 fb5c 	bl	40867c <__aeabi_dmul>
  405fc4:	2200      	movs	r2, #0
  405fc6:	2300      	movs	r3, #0
  405fc8:	4606      	mov	r6, r0
  405fca:	460f      	mov	r7, r1
  405fcc:	f002 fdbe 	bl	408b4c <__aeabi_dcmpeq>
  405fd0:	2800      	cmp	r0, #0
  405fd2:	f040 83c1 	bne.w	406758 <_dtoa_r+0xa60>
  405fd6:	4642      	mov	r2, r8
  405fd8:	464b      	mov	r3, r9
  405fda:	4630      	mov	r0, r6
  405fdc:	4639      	mov	r1, r7
  405fde:	f002 fc77 	bl	4088d0 <__aeabi_ddiv>
  405fe2:	f002 fdfb 	bl	408bdc <__aeabi_d2iz>
  405fe6:	4604      	mov	r4, r0
  405fe8:	f002 fae2 	bl	4085b0 <__aeabi_i2d>
  405fec:	4642      	mov	r2, r8
  405fee:	464b      	mov	r3, r9
  405ff0:	f002 fb44 	bl	40867c <__aeabi_dmul>
  405ff4:	4602      	mov	r2, r0
  405ff6:	460b      	mov	r3, r1
  405ff8:	4630      	mov	r0, r6
  405ffa:	4639      	mov	r1, r7
  405ffc:	f002 f98a 	bl	408314 <__aeabi_dsub>
  406000:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406004:	9e04      	ldr	r6, [sp, #16]
  406006:	f805 eb01 	strb.w	lr, [r5], #1
  40600a:	eba5 0e06 	sub.w	lr, r5, r6
  40600e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406010:	45b6      	cmp	lr, r6
  406012:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406016:	4652      	mov	r2, sl
  406018:	465b      	mov	r3, fp
  40601a:	d1d1      	bne.n	405fc0 <_dtoa_r+0x2c8>
  40601c:	46a0      	mov	r8, r4
  40601e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406022:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406024:	4606      	mov	r6, r0
  406026:	460f      	mov	r7, r1
  406028:	4632      	mov	r2, r6
  40602a:	463b      	mov	r3, r7
  40602c:	4630      	mov	r0, r6
  40602e:	4639      	mov	r1, r7
  406030:	f002 f972 	bl	408318 <__adddf3>
  406034:	4606      	mov	r6, r0
  406036:	460f      	mov	r7, r1
  406038:	4602      	mov	r2, r0
  40603a:	460b      	mov	r3, r1
  40603c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406040:	f002 fd8e 	bl	408b60 <__aeabi_dcmplt>
  406044:	b948      	cbnz	r0, 40605a <_dtoa_r+0x362>
  406046:	4632      	mov	r2, r6
  406048:	463b      	mov	r3, r7
  40604a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40604e:	f002 fd7d 	bl	408b4c <__aeabi_dcmpeq>
  406052:	b1a8      	cbz	r0, 406080 <_dtoa_r+0x388>
  406054:	f018 0f01 	tst.w	r8, #1
  406058:	d012      	beq.n	406080 <_dtoa_r+0x388>
  40605a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40605e:	9a04      	ldr	r2, [sp, #16]
  406060:	1e6b      	subs	r3, r5, #1
  406062:	e004      	b.n	40606e <_dtoa_r+0x376>
  406064:	429a      	cmp	r2, r3
  406066:	f000 8401 	beq.w	40686c <_dtoa_r+0xb74>
  40606a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40606e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406072:	f103 0501 	add.w	r5, r3, #1
  406076:	d0f5      	beq.n	406064 <_dtoa_r+0x36c>
  406078:	f108 0801 	add.w	r8, r8, #1
  40607c:	f883 8000 	strb.w	r8, [r3]
  406080:	4649      	mov	r1, r9
  406082:	4620      	mov	r0, r4
  406084:	f001 fb34 	bl	4076f0 <_Bfree>
  406088:	2200      	movs	r2, #0
  40608a:	9b02      	ldr	r3, [sp, #8]
  40608c:	702a      	strb	r2, [r5, #0]
  40608e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406090:	3301      	adds	r3, #1
  406092:	6013      	str	r3, [r2, #0]
  406094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406096:	2b00      	cmp	r3, #0
  406098:	f000 839e 	beq.w	4067d8 <_dtoa_r+0xae0>
  40609c:	9804      	ldr	r0, [sp, #16]
  40609e:	601d      	str	r5, [r3, #0]
  4060a0:	b01b      	add	sp, #108	; 0x6c
  4060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4060a8:	2a00      	cmp	r2, #0
  4060aa:	d03e      	beq.n	40612a <_dtoa_r+0x432>
  4060ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060ae:	2a01      	cmp	r2, #1
  4060b0:	f340 8311 	ble.w	4066d6 <_dtoa_r+0x9de>
  4060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4060b8:	1e5f      	subs	r7, r3, #1
  4060ba:	42ba      	cmp	r2, r7
  4060bc:	f2c0 838f 	blt.w	4067de <_dtoa_r+0xae6>
  4060c0:	1bd7      	subs	r7, r2, r7
  4060c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060c4:	2b00      	cmp	r3, #0
  4060c6:	f2c0 848b 	blt.w	4069e0 <_dtoa_r+0xce8>
  4060ca:	9d08      	ldr	r5, [sp, #32]
  4060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060ce:	9a08      	ldr	r2, [sp, #32]
  4060d0:	441a      	add	r2, r3
  4060d2:	9208      	str	r2, [sp, #32]
  4060d4:	9a06      	ldr	r2, [sp, #24]
  4060d6:	2101      	movs	r1, #1
  4060d8:	441a      	add	r2, r3
  4060da:	4620      	mov	r0, r4
  4060dc:	9206      	str	r2, [sp, #24]
  4060de:	f001 fba1 	bl	407824 <__i2b>
  4060e2:	4606      	mov	r6, r0
  4060e4:	e024      	b.n	406130 <_dtoa_r+0x438>
  4060e6:	2301      	movs	r3, #1
  4060e8:	930e      	str	r3, [sp, #56]	; 0x38
  4060ea:	e6af      	b.n	405e4c <_dtoa_r+0x154>
  4060ec:	9a08      	ldr	r2, [sp, #32]
  4060ee:	9b02      	ldr	r3, [sp, #8]
  4060f0:	1ad2      	subs	r2, r2, r3
  4060f2:	425b      	negs	r3, r3
  4060f4:	930c      	str	r3, [sp, #48]	; 0x30
  4060f6:	2300      	movs	r3, #0
  4060f8:	9208      	str	r2, [sp, #32]
  4060fa:	930d      	str	r3, [sp, #52]	; 0x34
  4060fc:	e6b8      	b.n	405e70 <_dtoa_r+0x178>
  4060fe:	f1c7 0301 	rsb	r3, r7, #1
  406102:	9308      	str	r3, [sp, #32]
  406104:	2300      	movs	r3, #0
  406106:	9306      	str	r3, [sp, #24]
  406108:	e6a7      	b.n	405e5a <_dtoa_r+0x162>
  40610a:	9d02      	ldr	r5, [sp, #8]
  40610c:	4628      	mov	r0, r5
  40610e:	f002 fa4f 	bl	4085b0 <__aeabi_i2d>
  406112:	4602      	mov	r2, r0
  406114:	460b      	mov	r3, r1
  406116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40611a:	f002 fd17 	bl	408b4c <__aeabi_dcmpeq>
  40611e:	2800      	cmp	r0, #0
  406120:	f47f ae80 	bne.w	405e24 <_dtoa_r+0x12c>
  406124:	1e6b      	subs	r3, r5, #1
  406126:	9302      	str	r3, [sp, #8]
  406128:	e67c      	b.n	405e24 <_dtoa_r+0x12c>
  40612a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40612c:	9d08      	ldr	r5, [sp, #32]
  40612e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406130:	2d00      	cmp	r5, #0
  406132:	dd0c      	ble.n	40614e <_dtoa_r+0x456>
  406134:	9906      	ldr	r1, [sp, #24]
  406136:	2900      	cmp	r1, #0
  406138:	460b      	mov	r3, r1
  40613a:	dd08      	ble.n	40614e <_dtoa_r+0x456>
  40613c:	42a9      	cmp	r1, r5
  40613e:	9a08      	ldr	r2, [sp, #32]
  406140:	bfa8      	it	ge
  406142:	462b      	movge	r3, r5
  406144:	1ad2      	subs	r2, r2, r3
  406146:	1aed      	subs	r5, r5, r3
  406148:	1acb      	subs	r3, r1, r3
  40614a:	9208      	str	r2, [sp, #32]
  40614c:	9306      	str	r3, [sp, #24]
  40614e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406150:	b1d3      	cbz	r3, 406188 <_dtoa_r+0x490>
  406152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406154:	2b00      	cmp	r3, #0
  406156:	f000 82b7 	beq.w	4066c8 <_dtoa_r+0x9d0>
  40615a:	2f00      	cmp	r7, #0
  40615c:	dd10      	ble.n	406180 <_dtoa_r+0x488>
  40615e:	4631      	mov	r1, r6
  406160:	463a      	mov	r2, r7
  406162:	4620      	mov	r0, r4
  406164:	f001 fbfa 	bl	40795c <__pow5mult>
  406168:	464a      	mov	r2, r9
  40616a:	4601      	mov	r1, r0
  40616c:	4606      	mov	r6, r0
  40616e:	4620      	mov	r0, r4
  406170:	f001 fb62 	bl	407838 <__multiply>
  406174:	4649      	mov	r1, r9
  406176:	4680      	mov	r8, r0
  406178:	4620      	mov	r0, r4
  40617a:	f001 fab9 	bl	4076f0 <_Bfree>
  40617e:	46c1      	mov	r9, r8
  406180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406182:	1bda      	subs	r2, r3, r7
  406184:	f040 82a1 	bne.w	4066ca <_dtoa_r+0x9d2>
  406188:	2101      	movs	r1, #1
  40618a:	4620      	mov	r0, r4
  40618c:	f001 fb4a 	bl	407824 <__i2b>
  406190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406192:	2b00      	cmp	r3, #0
  406194:	4680      	mov	r8, r0
  406196:	dd1c      	ble.n	4061d2 <_dtoa_r+0x4da>
  406198:	4601      	mov	r1, r0
  40619a:	461a      	mov	r2, r3
  40619c:	4620      	mov	r0, r4
  40619e:	f001 fbdd 	bl	40795c <__pow5mult>
  4061a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061a4:	2b01      	cmp	r3, #1
  4061a6:	4680      	mov	r8, r0
  4061a8:	f340 8254 	ble.w	406654 <_dtoa_r+0x95c>
  4061ac:	2300      	movs	r3, #0
  4061ae:	930c      	str	r3, [sp, #48]	; 0x30
  4061b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4061b4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4061b8:	6918      	ldr	r0, [r3, #16]
  4061ba:	f001 fae3 	bl	407784 <__hi0bits>
  4061be:	f1c0 0020 	rsb	r0, r0, #32
  4061c2:	e010      	b.n	4061e6 <_dtoa_r+0x4ee>
  4061c4:	f1c3 0520 	rsb	r5, r3, #32
  4061c8:	fa0a f005 	lsl.w	r0, sl, r5
  4061cc:	e674      	b.n	405eb8 <_dtoa_r+0x1c0>
  4061ce:	900e      	str	r0, [sp, #56]	; 0x38
  4061d0:	e63c      	b.n	405e4c <_dtoa_r+0x154>
  4061d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4061d4:	2b01      	cmp	r3, #1
  4061d6:	f340 8287 	ble.w	4066e8 <_dtoa_r+0x9f0>
  4061da:	2300      	movs	r3, #0
  4061dc:	930c      	str	r3, [sp, #48]	; 0x30
  4061de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061e0:	2001      	movs	r0, #1
  4061e2:	2b00      	cmp	r3, #0
  4061e4:	d1e4      	bne.n	4061b0 <_dtoa_r+0x4b8>
  4061e6:	9a06      	ldr	r2, [sp, #24]
  4061e8:	4410      	add	r0, r2
  4061ea:	f010 001f 	ands.w	r0, r0, #31
  4061ee:	f000 80a1 	beq.w	406334 <_dtoa_r+0x63c>
  4061f2:	f1c0 0320 	rsb	r3, r0, #32
  4061f6:	2b04      	cmp	r3, #4
  4061f8:	f340 849e 	ble.w	406b38 <_dtoa_r+0xe40>
  4061fc:	9b08      	ldr	r3, [sp, #32]
  4061fe:	f1c0 001c 	rsb	r0, r0, #28
  406202:	4403      	add	r3, r0
  406204:	9308      	str	r3, [sp, #32]
  406206:	4613      	mov	r3, r2
  406208:	4403      	add	r3, r0
  40620a:	4405      	add	r5, r0
  40620c:	9306      	str	r3, [sp, #24]
  40620e:	9b08      	ldr	r3, [sp, #32]
  406210:	2b00      	cmp	r3, #0
  406212:	dd05      	ble.n	406220 <_dtoa_r+0x528>
  406214:	4649      	mov	r1, r9
  406216:	461a      	mov	r2, r3
  406218:	4620      	mov	r0, r4
  40621a:	f001 fbef 	bl	4079fc <__lshift>
  40621e:	4681      	mov	r9, r0
  406220:	9b06      	ldr	r3, [sp, #24]
  406222:	2b00      	cmp	r3, #0
  406224:	dd05      	ble.n	406232 <_dtoa_r+0x53a>
  406226:	4641      	mov	r1, r8
  406228:	461a      	mov	r2, r3
  40622a:	4620      	mov	r0, r4
  40622c:	f001 fbe6 	bl	4079fc <__lshift>
  406230:	4680      	mov	r8, r0
  406232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406234:	2b00      	cmp	r3, #0
  406236:	f040 8086 	bne.w	406346 <_dtoa_r+0x64e>
  40623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40623c:	2b00      	cmp	r3, #0
  40623e:	f340 8266 	ble.w	40670e <_dtoa_r+0xa16>
  406242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406244:	2b00      	cmp	r3, #0
  406246:	f000 8098 	beq.w	40637a <_dtoa_r+0x682>
  40624a:	2d00      	cmp	r5, #0
  40624c:	dd05      	ble.n	40625a <_dtoa_r+0x562>
  40624e:	4631      	mov	r1, r6
  406250:	462a      	mov	r2, r5
  406252:	4620      	mov	r0, r4
  406254:	f001 fbd2 	bl	4079fc <__lshift>
  406258:	4606      	mov	r6, r0
  40625a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40625c:	2b00      	cmp	r3, #0
  40625e:	f040 8337 	bne.w	4068d0 <_dtoa_r+0xbd8>
  406262:	9606      	str	r6, [sp, #24]
  406264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406266:	9a04      	ldr	r2, [sp, #16]
  406268:	f8dd b018 	ldr.w	fp, [sp, #24]
  40626c:	3b01      	subs	r3, #1
  40626e:	18d3      	adds	r3, r2, r3
  406270:	930b      	str	r3, [sp, #44]	; 0x2c
  406272:	f00a 0301 	and.w	r3, sl, #1
  406276:	930c      	str	r3, [sp, #48]	; 0x30
  406278:	4617      	mov	r7, r2
  40627a:	46c2      	mov	sl, r8
  40627c:	4651      	mov	r1, sl
  40627e:	4648      	mov	r0, r9
  406280:	f7ff fca6 	bl	405bd0 <quorem>
  406284:	4631      	mov	r1, r6
  406286:	4605      	mov	r5, r0
  406288:	4648      	mov	r0, r9
  40628a:	f001 fc09 	bl	407aa0 <__mcmp>
  40628e:	465a      	mov	r2, fp
  406290:	900a      	str	r0, [sp, #40]	; 0x28
  406292:	4651      	mov	r1, sl
  406294:	4620      	mov	r0, r4
  406296:	f001 fc1f 	bl	407ad8 <__mdiff>
  40629a:	68c2      	ldr	r2, [r0, #12]
  40629c:	4680      	mov	r8, r0
  40629e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4062a2:	2a00      	cmp	r2, #0
  4062a4:	f040 822b 	bne.w	4066fe <_dtoa_r+0xa06>
  4062a8:	4601      	mov	r1, r0
  4062aa:	4648      	mov	r0, r9
  4062ac:	9308      	str	r3, [sp, #32]
  4062ae:	f001 fbf7 	bl	407aa0 <__mcmp>
  4062b2:	4641      	mov	r1, r8
  4062b4:	9006      	str	r0, [sp, #24]
  4062b6:	4620      	mov	r0, r4
  4062b8:	f001 fa1a 	bl	4076f0 <_Bfree>
  4062bc:	9a06      	ldr	r2, [sp, #24]
  4062be:	9b08      	ldr	r3, [sp, #32]
  4062c0:	b932      	cbnz	r2, 4062d0 <_dtoa_r+0x5d8>
  4062c2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4062c4:	b921      	cbnz	r1, 4062d0 <_dtoa_r+0x5d8>
  4062c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4062c8:	2a00      	cmp	r2, #0
  4062ca:	f000 83ef 	beq.w	406aac <_dtoa_r+0xdb4>
  4062ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4062d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4062d2:	2900      	cmp	r1, #0
  4062d4:	f2c0 829f 	blt.w	406816 <_dtoa_r+0xb1e>
  4062d8:	d105      	bne.n	4062e6 <_dtoa_r+0x5ee>
  4062da:	9924      	ldr	r1, [sp, #144]	; 0x90
  4062dc:	b919      	cbnz	r1, 4062e6 <_dtoa_r+0x5ee>
  4062de:	990c      	ldr	r1, [sp, #48]	; 0x30
  4062e0:	2900      	cmp	r1, #0
  4062e2:	f000 8298 	beq.w	406816 <_dtoa_r+0xb1e>
  4062e6:	2a00      	cmp	r2, #0
  4062e8:	f300 8306 	bgt.w	4068f8 <_dtoa_r+0xc00>
  4062ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4062ee:	703b      	strb	r3, [r7, #0]
  4062f0:	f107 0801 	add.w	r8, r7, #1
  4062f4:	4297      	cmp	r7, r2
  4062f6:	4645      	mov	r5, r8
  4062f8:	f000 830c 	beq.w	406914 <_dtoa_r+0xc1c>
  4062fc:	4649      	mov	r1, r9
  4062fe:	2300      	movs	r3, #0
  406300:	220a      	movs	r2, #10
  406302:	4620      	mov	r0, r4
  406304:	f001 f9fe 	bl	407704 <__multadd>
  406308:	455e      	cmp	r6, fp
  40630a:	4681      	mov	r9, r0
  40630c:	4631      	mov	r1, r6
  40630e:	f04f 0300 	mov.w	r3, #0
  406312:	f04f 020a 	mov.w	r2, #10
  406316:	4620      	mov	r0, r4
  406318:	f000 81eb 	beq.w	4066f2 <_dtoa_r+0x9fa>
  40631c:	f001 f9f2 	bl	407704 <__multadd>
  406320:	4659      	mov	r1, fp
  406322:	4606      	mov	r6, r0
  406324:	2300      	movs	r3, #0
  406326:	220a      	movs	r2, #10
  406328:	4620      	mov	r0, r4
  40632a:	f001 f9eb 	bl	407704 <__multadd>
  40632e:	4647      	mov	r7, r8
  406330:	4683      	mov	fp, r0
  406332:	e7a3      	b.n	40627c <_dtoa_r+0x584>
  406334:	201c      	movs	r0, #28
  406336:	9b08      	ldr	r3, [sp, #32]
  406338:	4403      	add	r3, r0
  40633a:	9308      	str	r3, [sp, #32]
  40633c:	9b06      	ldr	r3, [sp, #24]
  40633e:	4403      	add	r3, r0
  406340:	4405      	add	r5, r0
  406342:	9306      	str	r3, [sp, #24]
  406344:	e763      	b.n	40620e <_dtoa_r+0x516>
  406346:	4641      	mov	r1, r8
  406348:	4648      	mov	r0, r9
  40634a:	f001 fba9 	bl	407aa0 <__mcmp>
  40634e:	2800      	cmp	r0, #0
  406350:	f6bf af73 	bge.w	40623a <_dtoa_r+0x542>
  406354:	9f02      	ldr	r7, [sp, #8]
  406356:	4649      	mov	r1, r9
  406358:	2300      	movs	r3, #0
  40635a:	220a      	movs	r2, #10
  40635c:	4620      	mov	r0, r4
  40635e:	3f01      	subs	r7, #1
  406360:	9702      	str	r7, [sp, #8]
  406362:	f001 f9cf 	bl	407704 <__multadd>
  406366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406368:	4681      	mov	r9, r0
  40636a:	2b00      	cmp	r3, #0
  40636c:	f040 83b6 	bne.w	406adc <_dtoa_r+0xde4>
  406370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406372:	2b00      	cmp	r3, #0
  406374:	f340 83bf 	ble.w	406af6 <_dtoa_r+0xdfe>
  406378:	930a      	str	r3, [sp, #40]	; 0x28
  40637a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40637e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406380:	465d      	mov	r5, fp
  406382:	e002      	b.n	40638a <_dtoa_r+0x692>
  406384:	f001 f9be 	bl	407704 <__multadd>
  406388:	4681      	mov	r9, r0
  40638a:	4641      	mov	r1, r8
  40638c:	4648      	mov	r0, r9
  40638e:	f7ff fc1f 	bl	405bd0 <quorem>
  406392:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406396:	f805 ab01 	strb.w	sl, [r5], #1
  40639a:	eba5 030b 	sub.w	r3, r5, fp
  40639e:	42bb      	cmp	r3, r7
  4063a0:	f04f 020a 	mov.w	r2, #10
  4063a4:	f04f 0300 	mov.w	r3, #0
  4063a8:	4649      	mov	r1, r9
  4063aa:	4620      	mov	r0, r4
  4063ac:	dbea      	blt.n	406384 <_dtoa_r+0x68c>
  4063ae:	9b04      	ldr	r3, [sp, #16]
  4063b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4063b2:	2a01      	cmp	r2, #1
  4063b4:	bfac      	ite	ge
  4063b6:	189b      	addge	r3, r3, r2
  4063b8:	3301      	addlt	r3, #1
  4063ba:	461d      	mov	r5, r3
  4063bc:	f04f 0b00 	mov.w	fp, #0
  4063c0:	4649      	mov	r1, r9
  4063c2:	2201      	movs	r2, #1
  4063c4:	4620      	mov	r0, r4
  4063c6:	f001 fb19 	bl	4079fc <__lshift>
  4063ca:	4641      	mov	r1, r8
  4063cc:	4681      	mov	r9, r0
  4063ce:	f001 fb67 	bl	407aa0 <__mcmp>
  4063d2:	2800      	cmp	r0, #0
  4063d4:	f340 823d 	ble.w	406852 <_dtoa_r+0xb5a>
  4063d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4063dc:	9904      	ldr	r1, [sp, #16]
  4063de:	1e6b      	subs	r3, r5, #1
  4063e0:	e004      	b.n	4063ec <_dtoa_r+0x6f4>
  4063e2:	428b      	cmp	r3, r1
  4063e4:	f000 81ae 	beq.w	406744 <_dtoa_r+0xa4c>
  4063e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4063ec:	2a39      	cmp	r2, #57	; 0x39
  4063ee:	f103 0501 	add.w	r5, r3, #1
  4063f2:	d0f6      	beq.n	4063e2 <_dtoa_r+0x6ea>
  4063f4:	3201      	adds	r2, #1
  4063f6:	701a      	strb	r2, [r3, #0]
  4063f8:	4641      	mov	r1, r8
  4063fa:	4620      	mov	r0, r4
  4063fc:	f001 f978 	bl	4076f0 <_Bfree>
  406400:	2e00      	cmp	r6, #0
  406402:	f43f ae3d 	beq.w	406080 <_dtoa_r+0x388>
  406406:	f1bb 0f00 	cmp.w	fp, #0
  40640a:	d005      	beq.n	406418 <_dtoa_r+0x720>
  40640c:	45b3      	cmp	fp, r6
  40640e:	d003      	beq.n	406418 <_dtoa_r+0x720>
  406410:	4659      	mov	r1, fp
  406412:	4620      	mov	r0, r4
  406414:	f001 f96c 	bl	4076f0 <_Bfree>
  406418:	4631      	mov	r1, r6
  40641a:	4620      	mov	r0, r4
  40641c:	f001 f968 	bl	4076f0 <_Bfree>
  406420:	e62e      	b.n	406080 <_dtoa_r+0x388>
  406422:	2300      	movs	r3, #0
  406424:	930b      	str	r3, [sp, #44]	; 0x2c
  406426:	9b02      	ldr	r3, [sp, #8]
  406428:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40642a:	4413      	add	r3, r2
  40642c:	930f      	str	r3, [sp, #60]	; 0x3c
  40642e:	3301      	adds	r3, #1
  406430:	2b01      	cmp	r3, #1
  406432:	461f      	mov	r7, r3
  406434:	461e      	mov	r6, r3
  406436:	930a      	str	r3, [sp, #40]	; 0x28
  406438:	bfb8      	it	lt
  40643a:	2701      	movlt	r7, #1
  40643c:	2100      	movs	r1, #0
  40643e:	2f17      	cmp	r7, #23
  406440:	6461      	str	r1, [r4, #68]	; 0x44
  406442:	d90a      	bls.n	40645a <_dtoa_r+0x762>
  406444:	2201      	movs	r2, #1
  406446:	2304      	movs	r3, #4
  406448:	005b      	lsls	r3, r3, #1
  40644a:	f103 0014 	add.w	r0, r3, #20
  40644e:	4287      	cmp	r7, r0
  406450:	4611      	mov	r1, r2
  406452:	f102 0201 	add.w	r2, r2, #1
  406456:	d2f7      	bcs.n	406448 <_dtoa_r+0x750>
  406458:	6461      	str	r1, [r4, #68]	; 0x44
  40645a:	4620      	mov	r0, r4
  40645c:	f001 f922 	bl	4076a4 <_Balloc>
  406460:	2e0e      	cmp	r6, #14
  406462:	9004      	str	r0, [sp, #16]
  406464:	6420      	str	r0, [r4, #64]	; 0x40
  406466:	f63f ad41 	bhi.w	405eec <_dtoa_r+0x1f4>
  40646a:	2d00      	cmp	r5, #0
  40646c:	f43f ad3e 	beq.w	405eec <_dtoa_r+0x1f4>
  406470:	9902      	ldr	r1, [sp, #8]
  406472:	2900      	cmp	r1, #0
  406474:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406478:	f340 8202 	ble.w	406880 <_dtoa_r+0xb88>
  40647c:	4bb8      	ldr	r3, [pc, #736]	; (406760 <_dtoa_r+0xa68>)
  40647e:	f001 020f 	and.w	r2, r1, #15
  406482:	110d      	asrs	r5, r1, #4
  406484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406488:	06e9      	lsls	r1, r5, #27
  40648a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40648e:	f140 81ae 	bpl.w	4067ee <_dtoa_r+0xaf6>
  406492:	4bb4      	ldr	r3, [pc, #720]	; (406764 <_dtoa_r+0xa6c>)
  406494:	4650      	mov	r0, sl
  406496:	4659      	mov	r1, fp
  406498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40649c:	f002 fa18 	bl	4088d0 <__aeabi_ddiv>
  4064a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4064a4:	f005 050f 	and.w	r5, r5, #15
  4064a8:	f04f 0a03 	mov.w	sl, #3
  4064ac:	b18d      	cbz	r5, 4064d2 <_dtoa_r+0x7da>
  4064ae:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406764 <_dtoa_r+0xa6c>
  4064b2:	07ea      	lsls	r2, r5, #31
  4064b4:	d509      	bpl.n	4064ca <_dtoa_r+0x7d2>
  4064b6:	4630      	mov	r0, r6
  4064b8:	4639      	mov	r1, r7
  4064ba:	e9d8 2300 	ldrd	r2, r3, [r8]
  4064be:	f002 f8dd 	bl	40867c <__aeabi_dmul>
  4064c2:	f10a 0a01 	add.w	sl, sl, #1
  4064c6:	4606      	mov	r6, r0
  4064c8:	460f      	mov	r7, r1
  4064ca:	106d      	asrs	r5, r5, #1
  4064cc:	f108 0808 	add.w	r8, r8, #8
  4064d0:	d1ef      	bne.n	4064b2 <_dtoa_r+0x7ba>
  4064d2:	463b      	mov	r3, r7
  4064d4:	4632      	mov	r2, r6
  4064d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4064da:	f002 f9f9 	bl	4088d0 <__aeabi_ddiv>
  4064de:	4607      	mov	r7, r0
  4064e0:	4688      	mov	r8, r1
  4064e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4064e4:	b143      	cbz	r3, 4064f8 <_dtoa_r+0x800>
  4064e6:	2200      	movs	r2, #0
  4064e8:	4b9f      	ldr	r3, [pc, #636]	; (406768 <_dtoa_r+0xa70>)
  4064ea:	4638      	mov	r0, r7
  4064ec:	4641      	mov	r1, r8
  4064ee:	f002 fb37 	bl	408b60 <__aeabi_dcmplt>
  4064f2:	2800      	cmp	r0, #0
  4064f4:	f040 8286 	bne.w	406a04 <_dtoa_r+0xd0c>
  4064f8:	4650      	mov	r0, sl
  4064fa:	f002 f859 	bl	4085b0 <__aeabi_i2d>
  4064fe:	463a      	mov	r2, r7
  406500:	4643      	mov	r3, r8
  406502:	f002 f8bb 	bl	40867c <__aeabi_dmul>
  406506:	4b99      	ldr	r3, [pc, #612]	; (40676c <_dtoa_r+0xa74>)
  406508:	2200      	movs	r2, #0
  40650a:	f001 ff05 	bl	408318 <__adddf3>
  40650e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406510:	4605      	mov	r5, r0
  406512:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406516:	2b00      	cmp	r3, #0
  406518:	f000 813e 	beq.w	406798 <_dtoa_r+0xaa0>
  40651c:	9b02      	ldr	r3, [sp, #8]
  40651e:	9315      	str	r3, [sp, #84]	; 0x54
  406520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406522:	9312      	str	r3, [sp, #72]	; 0x48
  406524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406526:	2b00      	cmp	r3, #0
  406528:	f000 81fa 	beq.w	406920 <_dtoa_r+0xc28>
  40652c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40652e:	4b8c      	ldr	r3, [pc, #560]	; (406760 <_dtoa_r+0xa68>)
  406530:	498f      	ldr	r1, [pc, #572]	; (406770 <_dtoa_r+0xa78>)
  406532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40653a:	2000      	movs	r0, #0
  40653c:	f002 f9c8 	bl	4088d0 <__aeabi_ddiv>
  406540:	462a      	mov	r2, r5
  406542:	4633      	mov	r3, r6
  406544:	f001 fee6 	bl	408314 <__aeabi_dsub>
  406548:	4682      	mov	sl, r0
  40654a:	468b      	mov	fp, r1
  40654c:	4638      	mov	r0, r7
  40654e:	4641      	mov	r1, r8
  406550:	f002 fb44 	bl	408bdc <__aeabi_d2iz>
  406554:	4605      	mov	r5, r0
  406556:	f002 f82b 	bl	4085b0 <__aeabi_i2d>
  40655a:	4602      	mov	r2, r0
  40655c:	460b      	mov	r3, r1
  40655e:	4638      	mov	r0, r7
  406560:	4641      	mov	r1, r8
  406562:	f001 fed7 	bl	408314 <__aeabi_dsub>
  406566:	3530      	adds	r5, #48	; 0x30
  406568:	fa5f f885 	uxtb.w	r8, r5
  40656c:	9d04      	ldr	r5, [sp, #16]
  40656e:	4606      	mov	r6, r0
  406570:	460f      	mov	r7, r1
  406572:	f885 8000 	strb.w	r8, [r5]
  406576:	4602      	mov	r2, r0
  406578:	460b      	mov	r3, r1
  40657a:	4650      	mov	r0, sl
  40657c:	4659      	mov	r1, fp
  40657e:	3501      	adds	r5, #1
  406580:	f002 fb0c 	bl	408b9c <__aeabi_dcmpgt>
  406584:	2800      	cmp	r0, #0
  406586:	d154      	bne.n	406632 <_dtoa_r+0x93a>
  406588:	4632      	mov	r2, r6
  40658a:	463b      	mov	r3, r7
  40658c:	2000      	movs	r0, #0
  40658e:	4976      	ldr	r1, [pc, #472]	; (406768 <_dtoa_r+0xa70>)
  406590:	f001 fec0 	bl	408314 <__aeabi_dsub>
  406594:	4602      	mov	r2, r0
  406596:	460b      	mov	r3, r1
  406598:	4650      	mov	r0, sl
  40659a:	4659      	mov	r1, fp
  40659c:	f002 fafe 	bl	408b9c <__aeabi_dcmpgt>
  4065a0:	2800      	cmp	r0, #0
  4065a2:	f040 8270 	bne.w	406a86 <_dtoa_r+0xd8e>
  4065a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4065a8:	2a01      	cmp	r2, #1
  4065aa:	f000 8111 	beq.w	4067d0 <_dtoa_r+0xad8>
  4065ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4065b0:	9a04      	ldr	r2, [sp, #16]
  4065b2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4065b6:	4413      	add	r3, r2
  4065b8:	4699      	mov	r9, r3
  4065ba:	e00d      	b.n	4065d8 <_dtoa_r+0x8e0>
  4065bc:	2000      	movs	r0, #0
  4065be:	496a      	ldr	r1, [pc, #424]	; (406768 <_dtoa_r+0xa70>)
  4065c0:	f001 fea8 	bl	408314 <__aeabi_dsub>
  4065c4:	4652      	mov	r2, sl
  4065c6:	465b      	mov	r3, fp
  4065c8:	f002 faca 	bl	408b60 <__aeabi_dcmplt>
  4065cc:	2800      	cmp	r0, #0
  4065ce:	f040 8258 	bne.w	406a82 <_dtoa_r+0xd8a>
  4065d2:	454d      	cmp	r5, r9
  4065d4:	f000 80fa 	beq.w	4067cc <_dtoa_r+0xad4>
  4065d8:	4650      	mov	r0, sl
  4065da:	4659      	mov	r1, fp
  4065dc:	2200      	movs	r2, #0
  4065de:	4b65      	ldr	r3, [pc, #404]	; (406774 <_dtoa_r+0xa7c>)
  4065e0:	f002 f84c 	bl	40867c <__aeabi_dmul>
  4065e4:	2200      	movs	r2, #0
  4065e6:	4b63      	ldr	r3, [pc, #396]	; (406774 <_dtoa_r+0xa7c>)
  4065e8:	4682      	mov	sl, r0
  4065ea:	468b      	mov	fp, r1
  4065ec:	4630      	mov	r0, r6
  4065ee:	4639      	mov	r1, r7
  4065f0:	f002 f844 	bl	40867c <__aeabi_dmul>
  4065f4:	460f      	mov	r7, r1
  4065f6:	4606      	mov	r6, r0
  4065f8:	f002 faf0 	bl	408bdc <__aeabi_d2iz>
  4065fc:	4680      	mov	r8, r0
  4065fe:	f001 ffd7 	bl	4085b0 <__aeabi_i2d>
  406602:	4602      	mov	r2, r0
  406604:	460b      	mov	r3, r1
  406606:	4630      	mov	r0, r6
  406608:	4639      	mov	r1, r7
  40660a:	f001 fe83 	bl	408314 <__aeabi_dsub>
  40660e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406612:	fa5f f888 	uxtb.w	r8, r8
  406616:	4652      	mov	r2, sl
  406618:	465b      	mov	r3, fp
  40661a:	f805 8b01 	strb.w	r8, [r5], #1
  40661e:	4606      	mov	r6, r0
  406620:	460f      	mov	r7, r1
  406622:	f002 fa9d 	bl	408b60 <__aeabi_dcmplt>
  406626:	4632      	mov	r2, r6
  406628:	463b      	mov	r3, r7
  40662a:	2800      	cmp	r0, #0
  40662c:	d0c6      	beq.n	4065bc <_dtoa_r+0x8c4>
  40662e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406632:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406634:	9302      	str	r3, [sp, #8]
  406636:	e523      	b.n	406080 <_dtoa_r+0x388>
  406638:	2300      	movs	r3, #0
  40663a:	930b      	str	r3, [sp, #44]	; 0x2c
  40663c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40663e:	2b00      	cmp	r3, #0
  406640:	f340 80dc 	ble.w	4067fc <_dtoa_r+0xb04>
  406644:	461f      	mov	r7, r3
  406646:	461e      	mov	r6, r3
  406648:	930f      	str	r3, [sp, #60]	; 0x3c
  40664a:	930a      	str	r3, [sp, #40]	; 0x28
  40664c:	e6f6      	b.n	40643c <_dtoa_r+0x744>
  40664e:	2301      	movs	r3, #1
  406650:	930b      	str	r3, [sp, #44]	; 0x2c
  406652:	e7f3      	b.n	40663c <_dtoa_r+0x944>
  406654:	f1ba 0f00 	cmp.w	sl, #0
  406658:	f47f ada8 	bne.w	4061ac <_dtoa_r+0x4b4>
  40665c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406660:	2b00      	cmp	r3, #0
  406662:	f47f adba 	bne.w	4061da <_dtoa_r+0x4e2>
  406666:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40666a:	0d3f      	lsrs	r7, r7, #20
  40666c:	053f      	lsls	r7, r7, #20
  40666e:	2f00      	cmp	r7, #0
  406670:	f000 820d 	beq.w	406a8e <_dtoa_r+0xd96>
  406674:	9b08      	ldr	r3, [sp, #32]
  406676:	3301      	adds	r3, #1
  406678:	9308      	str	r3, [sp, #32]
  40667a:	9b06      	ldr	r3, [sp, #24]
  40667c:	3301      	adds	r3, #1
  40667e:	9306      	str	r3, [sp, #24]
  406680:	2301      	movs	r3, #1
  406682:	930c      	str	r3, [sp, #48]	; 0x30
  406684:	e5ab      	b.n	4061de <_dtoa_r+0x4e6>
  406686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406688:	2b00      	cmp	r3, #0
  40668a:	f73f ac42 	bgt.w	405f12 <_dtoa_r+0x21a>
  40668e:	f040 8221 	bne.w	406ad4 <_dtoa_r+0xddc>
  406692:	2200      	movs	r2, #0
  406694:	4b38      	ldr	r3, [pc, #224]	; (406778 <_dtoa_r+0xa80>)
  406696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40669a:	f001 ffef 	bl	40867c <__aeabi_dmul>
  40669e:	4652      	mov	r2, sl
  4066a0:	465b      	mov	r3, fp
  4066a2:	f002 fa71 	bl	408b88 <__aeabi_dcmpge>
  4066a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4066aa:	4646      	mov	r6, r8
  4066ac:	2800      	cmp	r0, #0
  4066ae:	d041      	beq.n	406734 <_dtoa_r+0xa3c>
  4066b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4066b2:	9d04      	ldr	r5, [sp, #16]
  4066b4:	43db      	mvns	r3, r3
  4066b6:	9302      	str	r3, [sp, #8]
  4066b8:	4641      	mov	r1, r8
  4066ba:	4620      	mov	r0, r4
  4066bc:	f001 f818 	bl	4076f0 <_Bfree>
  4066c0:	2e00      	cmp	r6, #0
  4066c2:	f43f acdd 	beq.w	406080 <_dtoa_r+0x388>
  4066c6:	e6a7      	b.n	406418 <_dtoa_r+0x720>
  4066c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4066ca:	4649      	mov	r1, r9
  4066cc:	4620      	mov	r0, r4
  4066ce:	f001 f945 	bl	40795c <__pow5mult>
  4066d2:	4681      	mov	r9, r0
  4066d4:	e558      	b.n	406188 <_dtoa_r+0x490>
  4066d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4066d8:	2a00      	cmp	r2, #0
  4066da:	f000 8187 	beq.w	4069ec <_dtoa_r+0xcf4>
  4066de:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4066e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4066e4:	9d08      	ldr	r5, [sp, #32]
  4066e6:	e4f2      	b.n	4060ce <_dtoa_r+0x3d6>
  4066e8:	f1ba 0f00 	cmp.w	sl, #0
  4066ec:	f47f ad75 	bne.w	4061da <_dtoa_r+0x4e2>
  4066f0:	e7b4      	b.n	40665c <_dtoa_r+0x964>
  4066f2:	f001 f807 	bl	407704 <__multadd>
  4066f6:	4647      	mov	r7, r8
  4066f8:	4606      	mov	r6, r0
  4066fa:	4683      	mov	fp, r0
  4066fc:	e5be      	b.n	40627c <_dtoa_r+0x584>
  4066fe:	4601      	mov	r1, r0
  406700:	4620      	mov	r0, r4
  406702:	9306      	str	r3, [sp, #24]
  406704:	f000 fff4 	bl	4076f0 <_Bfree>
  406708:	2201      	movs	r2, #1
  40670a:	9b06      	ldr	r3, [sp, #24]
  40670c:	e5e0      	b.n	4062d0 <_dtoa_r+0x5d8>
  40670e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406710:	2b02      	cmp	r3, #2
  406712:	f77f ad96 	ble.w	406242 <_dtoa_r+0x54a>
  406716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406718:	2b00      	cmp	r3, #0
  40671a:	d1c9      	bne.n	4066b0 <_dtoa_r+0x9b8>
  40671c:	4641      	mov	r1, r8
  40671e:	2205      	movs	r2, #5
  406720:	4620      	mov	r0, r4
  406722:	f000 ffef 	bl	407704 <__multadd>
  406726:	4601      	mov	r1, r0
  406728:	4680      	mov	r8, r0
  40672a:	4648      	mov	r0, r9
  40672c:	f001 f9b8 	bl	407aa0 <__mcmp>
  406730:	2800      	cmp	r0, #0
  406732:	ddbd      	ble.n	4066b0 <_dtoa_r+0x9b8>
  406734:	9a02      	ldr	r2, [sp, #8]
  406736:	9904      	ldr	r1, [sp, #16]
  406738:	2331      	movs	r3, #49	; 0x31
  40673a:	3201      	adds	r2, #1
  40673c:	9202      	str	r2, [sp, #8]
  40673e:	700b      	strb	r3, [r1, #0]
  406740:	1c4d      	adds	r5, r1, #1
  406742:	e7b9      	b.n	4066b8 <_dtoa_r+0x9c0>
  406744:	9a02      	ldr	r2, [sp, #8]
  406746:	3201      	adds	r2, #1
  406748:	9202      	str	r2, [sp, #8]
  40674a:	9a04      	ldr	r2, [sp, #16]
  40674c:	2331      	movs	r3, #49	; 0x31
  40674e:	7013      	strb	r3, [r2, #0]
  406750:	e652      	b.n	4063f8 <_dtoa_r+0x700>
  406752:	2301      	movs	r3, #1
  406754:	930b      	str	r3, [sp, #44]	; 0x2c
  406756:	e666      	b.n	406426 <_dtoa_r+0x72e>
  406758:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40675c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40675e:	e48f      	b.n	406080 <_dtoa_r+0x388>
  406760:	00409a60 	.word	0x00409a60
  406764:	00409a38 	.word	0x00409a38
  406768:	3ff00000 	.word	0x3ff00000
  40676c:	401c0000 	.word	0x401c0000
  406770:	3fe00000 	.word	0x3fe00000
  406774:	40240000 	.word	0x40240000
  406778:	40140000 	.word	0x40140000
  40677c:	4650      	mov	r0, sl
  40677e:	f001 ff17 	bl	4085b0 <__aeabi_i2d>
  406782:	463a      	mov	r2, r7
  406784:	4643      	mov	r3, r8
  406786:	f001 ff79 	bl	40867c <__aeabi_dmul>
  40678a:	2200      	movs	r2, #0
  40678c:	4bc1      	ldr	r3, [pc, #772]	; (406a94 <_dtoa_r+0xd9c>)
  40678e:	f001 fdc3 	bl	408318 <__adddf3>
  406792:	4605      	mov	r5, r0
  406794:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406798:	4641      	mov	r1, r8
  40679a:	2200      	movs	r2, #0
  40679c:	4bbe      	ldr	r3, [pc, #760]	; (406a98 <_dtoa_r+0xda0>)
  40679e:	4638      	mov	r0, r7
  4067a0:	f001 fdb8 	bl	408314 <__aeabi_dsub>
  4067a4:	462a      	mov	r2, r5
  4067a6:	4633      	mov	r3, r6
  4067a8:	4682      	mov	sl, r0
  4067aa:	468b      	mov	fp, r1
  4067ac:	f002 f9f6 	bl	408b9c <__aeabi_dcmpgt>
  4067b0:	4680      	mov	r8, r0
  4067b2:	2800      	cmp	r0, #0
  4067b4:	f040 8110 	bne.w	4069d8 <_dtoa_r+0xce0>
  4067b8:	462a      	mov	r2, r5
  4067ba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4067be:	4650      	mov	r0, sl
  4067c0:	4659      	mov	r1, fp
  4067c2:	f002 f9cd 	bl	408b60 <__aeabi_dcmplt>
  4067c6:	b118      	cbz	r0, 4067d0 <_dtoa_r+0xad8>
  4067c8:	4646      	mov	r6, r8
  4067ca:	e771      	b.n	4066b0 <_dtoa_r+0x9b8>
  4067cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4067d0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4067d4:	f7ff bb8a 	b.w	405eec <_dtoa_r+0x1f4>
  4067d8:	9804      	ldr	r0, [sp, #16]
  4067da:	f7ff babb 	b.w	405d54 <_dtoa_r+0x5c>
  4067de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4067e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4067e2:	970c      	str	r7, [sp, #48]	; 0x30
  4067e4:	1afb      	subs	r3, r7, r3
  4067e6:	441a      	add	r2, r3
  4067e8:	920d      	str	r2, [sp, #52]	; 0x34
  4067ea:	2700      	movs	r7, #0
  4067ec:	e469      	b.n	4060c2 <_dtoa_r+0x3ca>
  4067ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4067f2:	f04f 0a02 	mov.w	sl, #2
  4067f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4067fa:	e657      	b.n	4064ac <_dtoa_r+0x7b4>
  4067fc:	2100      	movs	r1, #0
  4067fe:	2301      	movs	r3, #1
  406800:	6461      	str	r1, [r4, #68]	; 0x44
  406802:	4620      	mov	r0, r4
  406804:	9325      	str	r3, [sp, #148]	; 0x94
  406806:	f000 ff4d 	bl	4076a4 <_Balloc>
  40680a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40680c:	9004      	str	r0, [sp, #16]
  40680e:	6420      	str	r0, [r4, #64]	; 0x40
  406810:	930a      	str	r3, [sp, #40]	; 0x28
  406812:	930f      	str	r3, [sp, #60]	; 0x3c
  406814:	e629      	b.n	40646a <_dtoa_r+0x772>
  406816:	2a00      	cmp	r2, #0
  406818:	46d0      	mov	r8, sl
  40681a:	f8cd b018 	str.w	fp, [sp, #24]
  40681e:	469a      	mov	sl, r3
  406820:	dd11      	ble.n	406846 <_dtoa_r+0xb4e>
  406822:	4649      	mov	r1, r9
  406824:	2201      	movs	r2, #1
  406826:	4620      	mov	r0, r4
  406828:	f001 f8e8 	bl	4079fc <__lshift>
  40682c:	4641      	mov	r1, r8
  40682e:	4681      	mov	r9, r0
  406830:	f001 f936 	bl	407aa0 <__mcmp>
  406834:	2800      	cmp	r0, #0
  406836:	f340 8146 	ble.w	406ac6 <_dtoa_r+0xdce>
  40683a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40683e:	f000 8106 	beq.w	406a4e <_dtoa_r+0xd56>
  406842:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406846:	46b3      	mov	fp, r6
  406848:	f887 a000 	strb.w	sl, [r7]
  40684c:	1c7d      	adds	r5, r7, #1
  40684e:	9e06      	ldr	r6, [sp, #24]
  406850:	e5d2      	b.n	4063f8 <_dtoa_r+0x700>
  406852:	d104      	bne.n	40685e <_dtoa_r+0xb66>
  406854:	f01a 0f01 	tst.w	sl, #1
  406858:	d001      	beq.n	40685e <_dtoa_r+0xb66>
  40685a:	e5bd      	b.n	4063d8 <_dtoa_r+0x6e0>
  40685c:	4615      	mov	r5, r2
  40685e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406862:	2b30      	cmp	r3, #48	; 0x30
  406864:	f105 32ff 	add.w	r2, r5, #4294967295
  406868:	d0f8      	beq.n	40685c <_dtoa_r+0xb64>
  40686a:	e5c5      	b.n	4063f8 <_dtoa_r+0x700>
  40686c:	9904      	ldr	r1, [sp, #16]
  40686e:	2230      	movs	r2, #48	; 0x30
  406870:	700a      	strb	r2, [r1, #0]
  406872:	9a02      	ldr	r2, [sp, #8]
  406874:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406878:	3201      	adds	r2, #1
  40687a:	9202      	str	r2, [sp, #8]
  40687c:	f7ff bbfc 	b.w	406078 <_dtoa_r+0x380>
  406880:	f000 80bb 	beq.w	4069fa <_dtoa_r+0xd02>
  406884:	9b02      	ldr	r3, [sp, #8]
  406886:	425d      	negs	r5, r3
  406888:	4b84      	ldr	r3, [pc, #528]	; (406a9c <_dtoa_r+0xda4>)
  40688a:	f005 020f 	and.w	r2, r5, #15
  40688e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406892:	e9d3 2300 	ldrd	r2, r3, [r3]
  406896:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40689a:	f001 feef 	bl	40867c <__aeabi_dmul>
  40689e:	112d      	asrs	r5, r5, #4
  4068a0:	4607      	mov	r7, r0
  4068a2:	4688      	mov	r8, r1
  4068a4:	f000 812c 	beq.w	406b00 <_dtoa_r+0xe08>
  4068a8:	4e7d      	ldr	r6, [pc, #500]	; (406aa0 <_dtoa_r+0xda8>)
  4068aa:	f04f 0a02 	mov.w	sl, #2
  4068ae:	07eb      	lsls	r3, r5, #31
  4068b0:	d509      	bpl.n	4068c6 <_dtoa_r+0xbce>
  4068b2:	4638      	mov	r0, r7
  4068b4:	4641      	mov	r1, r8
  4068b6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4068ba:	f001 fedf 	bl	40867c <__aeabi_dmul>
  4068be:	f10a 0a01 	add.w	sl, sl, #1
  4068c2:	4607      	mov	r7, r0
  4068c4:	4688      	mov	r8, r1
  4068c6:	106d      	asrs	r5, r5, #1
  4068c8:	f106 0608 	add.w	r6, r6, #8
  4068cc:	d1ef      	bne.n	4068ae <_dtoa_r+0xbb6>
  4068ce:	e608      	b.n	4064e2 <_dtoa_r+0x7ea>
  4068d0:	6871      	ldr	r1, [r6, #4]
  4068d2:	4620      	mov	r0, r4
  4068d4:	f000 fee6 	bl	4076a4 <_Balloc>
  4068d8:	6933      	ldr	r3, [r6, #16]
  4068da:	3302      	adds	r3, #2
  4068dc:	009a      	lsls	r2, r3, #2
  4068de:	4605      	mov	r5, r0
  4068e0:	f106 010c 	add.w	r1, r6, #12
  4068e4:	300c      	adds	r0, #12
  4068e6:	f000 fddb 	bl	4074a0 <memcpy>
  4068ea:	4629      	mov	r1, r5
  4068ec:	2201      	movs	r2, #1
  4068ee:	4620      	mov	r0, r4
  4068f0:	f001 f884 	bl	4079fc <__lshift>
  4068f4:	9006      	str	r0, [sp, #24]
  4068f6:	e4b5      	b.n	406264 <_dtoa_r+0x56c>
  4068f8:	2b39      	cmp	r3, #57	; 0x39
  4068fa:	f8cd b018 	str.w	fp, [sp, #24]
  4068fe:	46d0      	mov	r8, sl
  406900:	f000 80a5 	beq.w	406a4e <_dtoa_r+0xd56>
  406904:	f103 0a01 	add.w	sl, r3, #1
  406908:	46b3      	mov	fp, r6
  40690a:	f887 a000 	strb.w	sl, [r7]
  40690e:	1c7d      	adds	r5, r7, #1
  406910:	9e06      	ldr	r6, [sp, #24]
  406912:	e571      	b.n	4063f8 <_dtoa_r+0x700>
  406914:	465a      	mov	r2, fp
  406916:	46d0      	mov	r8, sl
  406918:	46b3      	mov	fp, r6
  40691a:	469a      	mov	sl, r3
  40691c:	4616      	mov	r6, r2
  40691e:	e54f      	b.n	4063c0 <_dtoa_r+0x6c8>
  406920:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406922:	495e      	ldr	r1, [pc, #376]	; (406a9c <_dtoa_r+0xda4>)
  406924:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406928:	462a      	mov	r2, r5
  40692a:	4633      	mov	r3, r6
  40692c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406930:	f001 fea4 	bl	40867c <__aeabi_dmul>
  406934:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406938:	4638      	mov	r0, r7
  40693a:	4641      	mov	r1, r8
  40693c:	f002 f94e 	bl	408bdc <__aeabi_d2iz>
  406940:	4605      	mov	r5, r0
  406942:	f001 fe35 	bl	4085b0 <__aeabi_i2d>
  406946:	460b      	mov	r3, r1
  406948:	4602      	mov	r2, r0
  40694a:	4641      	mov	r1, r8
  40694c:	4638      	mov	r0, r7
  40694e:	f001 fce1 	bl	408314 <__aeabi_dsub>
  406952:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406954:	460f      	mov	r7, r1
  406956:	9904      	ldr	r1, [sp, #16]
  406958:	3530      	adds	r5, #48	; 0x30
  40695a:	2b01      	cmp	r3, #1
  40695c:	700d      	strb	r5, [r1, #0]
  40695e:	4606      	mov	r6, r0
  406960:	f101 0501 	add.w	r5, r1, #1
  406964:	d026      	beq.n	4069b4 <_dtoa_r+0xcbc>
  406966:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406968:	9a04      	ldr	r2, [sp, #16]
  40696a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406aa8 <_dtoa_r+0xdb0>
  40696e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406972:	4413      	add	r3, r2
  406974:	f04f 0a00 	mov.w	sl, #0
  406978:	4699      	mov	r9, r3
  40697a:	4652      	mov	r2, sl
  40697c:	465b      	mov	r3, fp
  40697e:	4630      	mov	r0, r6
  406980:	4639      	mov	r1, r7
  406982:	f001 fe7b 	bl	40867c <__aeabi_dmul>
  406986:	460f      	mov	r7, r1
  406988:	4606      	mov	r6, r0
  40698a:	f002 f927 	bl	408bdc <__aeabi_d2iz>
  40698e:	4680      	mov	r8, r0
  406990:	f001 fe0e 	bl	4085b0 <__aeabi_i2d>
  406994:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406998:	4602      	mov	r2, r0
  40699a:	460b      	mov	r3, r1
  40699c:	4630      	mov	r0, r6
  40699e:	4639      	mov	r1, r7
  4069a0:	f001 fcb8 	bl	408314 <__aeabi_dsub>
  4069a4:	f805 8b01 	strb.w	r8, [r5], #1
  4069a8:	454d      	cmp	r5, r9
  4069aa:	4606      	mov	r6, r0
  4069ac:	460f      	mov	r7, r1
  4069ae:	d1e4      	bne.n	40697a <_dtoa_r+0xc82>
  4069b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4069b4:	4b3b      	ldr	r3, [pc, #236]	; (406aa4 <_dtoa_r+0xdac>)
  4069b6:	2200      	movs	r2, #0
  4069b8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4069bc:	f001 fcac 	bl	408318 <__adddf3>
  4069c0:	4632      	mov	r2, r6
  4069c2:	463b      	mov	r3, r7
  4069c4:	f002 f8cc 	bl	408b60 <__aeabi_dcmplt>
  4069c8:	2800      	cmp	r0, #0
  4069ca:	d046      	beq.n	406a5a <_dtoa_r+0xd62>
  4069cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4069ce:	9302      	str	r3, [sp, #8]
  4069d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4069d4:	f7ff bb43 	b.w	40605e <_dtoa_r+0x366>
  4069d8:	f04f 0800 	mov.w	r8, #0
  4069dc:	4646      	mov	r6, r8
  4069de:	e6a9      	b.n	406734 <_dtoa_r+0xa3c>
  4069e0:	9b08      	ldr	r3, [sp, #32]
  4069e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4069e4:	1a9d      	subs	r5, r3, r2
  4069e6:	2300      	movs	r3, #0
  4069e8:	f7ff bb71 	b.w	4060ce <_dtoa_r+0x3d6>
  4069ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4069ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4069f0:	9d08      	ldr	r5, [sp, #32]
  4069f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4069f6:	f7ff bb6a 	b.w	4060ce <_dtoa_r+0x3d6>
  4069fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4069fe:	f04f 0a02 	mov.w	sl, #2
  406a02:	e56e      	b.n	4064e2 <_dtoa_r+0x7ea>
  406a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a06:	2b00      	cmp	r3, #0
  406a08:	f43f aeb8 	beq.w	40677c <_dtoa_r+0xa84>
  406a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a0e:	2b00      	cmp	r3, #0
  406a10:	f77f aede 	ble.w	4067d0 <_dtoa_r+0xad8>
  406a14:	2200      	movs	r2, #0
  406a16:	4b24      	ldr	r3, [pc, #144]	; (406aa8 <_dtoa_r+0xdb0>)
  406a18:	4638      	mov	r0, r7
  406a1a:	4641      	mov	r1, r8
  406a1c:	f001 fe2e 	bl	40867c <__aeabi_dmul>
  406a20:	4607      	mov	r7, r0
  406a22:	4688      	mov	r8, r1
  406a24:	f10a 0001 	add.w	r0, sl, #1
  406a28:	f001 fdc2 	bl	4085b0 <__aeabi_i2d>
  406a2c:	463a      	mov	r2, r7
  406a2e:	4643      	mov	r3, r8
  406a30:	f001 fe24 	bl	40867c <__aeabi_dmul>
  406a34:	2200      	movs	r2, #0
  406a36:	4b17      	ldr	r3, [pc, #92]	; (406a94 <_dtoa_r+0xd9c>)
  406a38:	f001 fc6e 	bl	408318 <__adddf3>
  406a3c:	9a02      	ldr	r2, [sp, #8]
  406a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a40:	9312      	str	r3, [sp, #72]	; 0x48
  406a42:	3a01      	subs	r2, #1
  406a44:	4605      	mov	r5, r0
  406a46:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406a4a:	9215      	str	r2, [sp, #84]	; 0x54
  406a4c:	e56a      	b.n	406524 <_dtoa_r+0x82c>
  406a4e:	2239      	movs	r2, #57	; 0x39
  406a50:	46b3      	mov	fp, r6
  406a52:	703a      	strb	r2, [r7, #0]
  406a54:	9e06      	ldr	r6, [sp, #24]
  406a56:	1c7d      	adds	r5, r7, #1
  406a58:	e4c0      	b.n	4063dc <_dtoa_r+0x6e4>
  406a5a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406a5e:	2000      	movs	r0, #0
  406a60:	4910      	ldr	r1, [pc, #64]	; (406aa4 <_dtoa_r+0xdac>)
  406a62:	f001 fc57 	bl	408314 <__aeabi_dsub>
  406a66:	4632      	mov	r2, r6
  406a68:	463b      	mov	r3, r7
  406a6a:	f002 f897 	bl	408b9c <__aeabi_dcmpgt>
  406a6e:	b908      	cbnz	r0, 406a74 <_dtoa_r+0xd7c>
  406a70:	e6ae      	b.n	4067d0 <_dtoa_r+0xad8>
  406a72:	4615      	mov	r5, r2
  406a74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406a78:	2b30      	cmp	r3, #48	; 0x30
  406a7a:	f105 32ff 	add.w	r2, r5, #4294967295
  406a7e:	d0f8      	beq.n	406a72 <_dtoa_r+0xd7a>
  406a80:	e5d7      	b.n	406632 <_dtoa_r+0x93a>
  406a82:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406a88:	9302      	str	r3, [sp, #8]
  406a8a:	f7ff bae8 	b.w	40605e <_dtoa_r+0x366>
  406a8e:	970c      	str	r7, [sp, #48]	; 0x30
  406a90:	f7ff bba5 	b.w	4061de <_dtoa_r+0x4e6>
  406a94:	401c0000 	.word	0x401c0000
  406a98:	40140000 	.word	0x40140000
  406a9c:	00409a60 	.word	0x00409a60
  406aa0:	00409a38 	.word	0x00409a38
  406aa4:	3fe00000 	.word	0x3fe00000
  406aa8:	40240000 	.word	0x40240000
  406aac:	2b39      	cmp	r3, #57	; 0x39
  406aae:	f8cd b018 	str.w	fp, [sp, #24]
  406ab2:	46d0      	mov	r8, sl
  406ab4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406ab8:	469a      	mov	sl, r3
  406aba:	d0c8      	beq.n	406a4e <_dtoa_r+0xd56>
  406abc:	f1bb 0f00 	cmp.w	fp, #0
  406ac0:	f73f aebf 	bgt.w	406842 <_dtoa_r+0xb4a>
  406ac4:	e6bf      	b.n	406846 <_dtoa_r+0xb4e>
  406ac6:	f47f aebe 	bne.w	406846 <_dtoa_r+0xb4e>
  406aca:	f01a 0f01 	tst.w	sl, #1
  406ace:	f43f aeba 	beq.w	406846 <_dtoa_r+0xb4e>
  406ad2:	e6b2      	b.n	40683a <_dtoa_r+0xb42>
  406ad4:	f04f 0800 	mov.w	r8, #0
  406ad8:	4646      	mov	r6, r8
  406ada:	e5e9      	b.n	4066b0 <_dtoa_r+0x9b8>
  406adc:	4631      	mov	r1, r6
  406ade:	2300      	movs	r3, #0
  406ae0:	220a      	movs	r2, #10
  406ae2:	4620      	mov	r0, r4
  406ae4:	f000 fe0e 	bl	407704 <__multadd>
  406ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406aea:	2b00      	cmp	r3, #0
  406aec:	4606      	mov	r6, r0
  406aee:	dd0a      	ble.n	406b06 <_dtoa_r+0xe0e>
  406af0:	930a      	str	r3, [sp, #40]	; 0x28
  406af2:	f7ff bbaa 	b.w	40624a <_dtoa_r+0x552>
  406af6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406af8:	2b02      	cmp	r3, #2
  406afa:	dc23      	bgt.n	406b44 <_dtoa_r+0xe4c>
  406afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406afe:	e43b      	b.n	406378 <_dtoa_r+0x680>
  406b00:	f04f 0a02 	mov.w	sl, #2
  406b04:	e4ed      	b.n	4064e2 <_dtoa_r+0x7ea>
  406b06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b08:	2b02      	cmp	r3, #2
  406b0a:	dc1b      	bgt.n	406b44 <_dtoa_r+0xe4c>
  406b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b0e:	e7ef      	b.n	406af0 <_dtoa_r+0xdf8>
  406b10:	2500      	movs	r5, #0
  406b12:	6465      	str	r5, [r4, #68]	; 0x44
  406b14:	4629      	mov	r1, r5
  406b16:	4620      	mov	r0, r4
  406b18:	f000 fdc4 	bl	4076a4 <_Balloc>
  406b1c:	f04f 33ff 	mov.w	r3, #4294967295
  406b20:	930a      	str	r3, [sp, #40]	; 0x28
  406b22:	930f      	str	r3, [sp, #60]	; 0x3c
  406b24:	2301      	movs	r3, #1
  406b26:	9004      	str	r0, [sp, #16]
  406b28:	9525      	str	r5, [sp, #148]	; 0x94
  406b2a:	6420      	str	r0, [r4, #64]	; 0x40
  406b2c:	930b      	str	r3, [sp, #44]	; 0x2c
  406b2e:	f7ff b9dd 	b.w	405eec <_dtoa_r+0x1f4>
  406b32:	2501      	movs	r5, #1
  406b34:	f7ff b9a5 	b.w	405e82 <_dtoa_r+0x18a>
  406b38:	f43f ab69 	beq.w	40620e <_dtoa_r+0x516>
  406b3c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406b40:	f7ff bbf9 	b.w	406336 <_dtoa_r+0x63e>
  406b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b46:	930a      	str	r3, [sp, #40]	; 0x28
  406b48:	e5e5      	b.n	406716 <_dtoa_r+0xa1e>
  406b4a:	bf00      	nop

00406b4c <__libc_fini_array>:
  406b4c:	b538      	push	{r3, r4, r5, lr}
  406b4e:	4c0a      	ldr	r4, [pc, #40]	; (406b78 <__libc_fini_array+0x2c>)
  406b50:	4d0a      	ldr	r5, [pc, #40]	; (406b7c <__libc_fini_array+0x30>)
  406b52:	1b64      	subs	r4, r4, r5
  406b54:	10a4      	asrs	r4, r4, #2
  406b56:	d00a      	beq.n	406b6e <__libc_fini_array+0x22>
  406b58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406b5c:	3b01      	subs	r3, #1
  406b5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406b62:	3c01      	subs	r4, #1
  406b64:	f855 3904 	ldr.w	r3, [r5], #-4
  406b68:	4798      	blx	r3
  406b6a:	2c00      	cmp	r4, #0
  406b6c:	d1f9      	bne.n	406b62 <__libc_fini_array+0x16>
  406b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406b72:	f003 b86b 	b.w	409c4c <_fini>
  406b76:	bf00      	nop
  406b78:	00409c5c 	.word	0x00409c5c
  406b7c:	00409c58 	.word	0x00409c58

00406b80 <_malloc_trim_r>:
  406b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406b82:	4f24      	ldr	r7, [pc, #144]	; (406c14 <_malloc_trim_r+0x94>)
  406b84:	460c      	mov	r4, r1
  406b86:	4606      	mov	r6, r0
  406b88:	f000 fd88 	bl	40769c <__malloc_lock>
  406b8c:	68bb      	ldr	r3, [r7, #8]
  406b8e:	685d      	ldr	r5, [r3, #4]
  406b90:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406b94:	310f      	adds	r1, #15
  406b96:	f025 0503 	bic.w	r5, r5, #3
  406b9a:	4429      	add	r1, r5
  406b9c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406ba0:	f021 010f 	bic.w	r1, r1, #15
  406ba4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406ba8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406bac:	db07      	blt.n	406bbe <_malloc_trim_r+0x3e>
  406bae:	2100      	movs	r1, #0
  406bb0:	4630      	mov	r0, r6
  406bb2:	f001 fa17 	bl	407fe4 <_sbrk_r>
  406bb6:	68bb      	ldr	r3, [r7, #8]
  406bb8:	442b      	add	r3, r5
  406bba:	4298      	cmp	r0, r3
  406bbc:	d004      	beq.n	406bc8 <_malloc_trim_r+0x48>
  406bbe:	4630      	mov	r0, r6
  406bc0:	f000 fd6e 	bl	4076a0 <__malloc_unlock>
  406bc4:	2000      	movs	r0, #0
  406bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bc8:	4261      	negs	r1, r4
  406bca:	4630      	mov	r0, r6
  406bcc:	f001 fa0a 	bl	407fe4 <_sbrk_r>
  406bd0:	3001      	adds	r0, #1
  406bd2:	d00d      	beq.n	406bf0 <_malloc_trim_r+0x70>
  406bd4:	4b10      	ldr	r3, [pc, #64]	; (406c18 <_malloc_trim_r+0x98>)
  406bd6:	68ba      	ldr	r2, [r7, #8]
  406bd8:	6819      	ldr	r1, [r3, #0]
  406bda:	1b2d      	subs	r5, r5, r4
  406bdc:	f045 0501 	orr.w	r5, r5, #1
  406be0:	4630      	mov	r0, r6
  406be2:	1b09      	subs	r1, r1, r4
  406be4:	6055      	str	r5, [r2, #4]
  406be6:	6019      	str	r1, [r3, #0]
  406be8:	f000 fd5a 	bl	4076a0 <__malloc_unlock>
  406bec:	2001      	movs	r0, #1
  406bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bf0:	2100      	movs	r1, #0
  406bf2:	4630      	mov	r0, r6
  406bf4:	f001 f9f6 	bl	407fe4 <_sbrk_r>
  406bf8:	68ba      	ldr	r2, [r7, #8]
  406bfa:	1a83      	subs	r3, r0, r2
  406bfc:	2b0f      	cmp	r3, #15
  406bfe:	ddde      	ble.n	406bbe <_malloc_trim_r+0x3e>
  406c00:	4c06      	ldr	r4, [pc, #24]	; (406c1c <_malloc_trim_r+0x9c>)
  406c02:	4905      	ldr	r1, [pc, #20]	; (406c18 <_malloc_trim_r+0x98>)
  406c04:	6824      	ldr	r4, [r4, #0]
  406c06:	f043 0301 	orr.w	r3, r3, #1
  406c0a:	1b00      	subs	r0, r0, r4
  406c0c:	6053      	str	r3, [r2, #4]
  406c0e:	6008      	str	r0, [r1, #0]
  406c10:	e7d5      	b.n	406bbe <_malloc_trim_r+0x3e>
  406c12:	bf00      	nop
  406c14:	200005ac 	.word	0x200005ac
  406c18:	2000d794 	.word	0x2000d794
  406c1c:	200009b4 	.word	0x200009b4

00406c20 <_free_r>:
  406c20:	2900      	cmp	r1, #0
  406c22:	d044      	beq.n	406cae <_free_r+0x8e>
  406c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c28:	460d      	mov	r5, r1
  406c2a:	4680      	mov	r8, r0
  406c2c:	f000 fd36 	bl	40769c <__malloc_lock>
  406c30:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406c34:	4969      	ldr	r1, [pc, #420]	; (406ddc <_free_r+0x1bc>)
  406c36:	f027 0301 	bic.w	r3, r7, #1
  406c3a:	f1a5 0408 	sub.w	r4, r5, #8
  406c3e:	18e2      	adds	r2, r4, r3
  406c40:	688e      	ldr	r6, [r1, #8]
  406c42:	6850      	ldr	r0, [r2, #4]
  406c44:	42b2      	cmp	r2, r6
  406c46:	f020 0003 	bic.w	r0, r0, #3
  406c4a:	d05e      	beq.n	406d0a <_free_r+0xea>
  406c4c:	07fe      	lsls	r6, r7, #31
  406c4e:	6050      	str	r0, [r2, #4]
  406c50:	d40b      	bmi.n	406c6a <_free_r+0x4a>
  406c52:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406c56:	1be4      	subs	r4, r4, r7
  406c58:	f101 0e08 	add.w	lr, r1, #8
  406c5c:	68a5      	ldr	r5, [r4, #8]
  406c5e:	4575      	cmp	r5, lr
  406c60:	443b      	add	r3, r7
  406c62:	d06d      	beq.n	406d40 <_free_r+0x120>
  406c64:	68e7      	ldr	r7, [r4, #12]
  406c66:	60ef      	str	r7, [r5, #12]
  406c68:	60bd      	str	r5, [r7, #8]
  406c6a:	1815      	adds	r5, r2, r0
  406c6c:	686d      	ldr	r5, [r5, #4]
  406c6e:	07ed      	lsls	r5, r5, #31
  406c70:	d53e      	bpl.n	406cf0 <_free_r+0xd0>
  406c72:	f043 0201 	orr.w	r2, r3, #1
  406c76:	6062      	str	r2, [r4, #4]
  406c78:	50e3      	str	r3, [r4, r3]
  406c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406c7e:	d217      	bcs.n	406cb0 <_free_r+0x90>
  406c80:	08db      	lsrs	r3, r3, #3
  406c82:	1c58      	adds	r0, r3, #1
  406c84:	109a      	asrs	r2, r3, #2
  406c86:	684d      	ldr	r5, [r1, #4]
  406c88:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406c8c:	60a7      	str	r7, [r4, #8]
  406c8e:	2301      	movs	r3, #1
  406c90:	4093      	lsls	r3, r2
  406c92:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406c96:	432b      	orrs	r3, r5
  406c98:	3a08      	subs	r2, #8
  406c9a:	60e2      	str	r2, [r4, #12]
  406c9c:	604b      	str	r3, [r1, #4]
  406c9e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406ca2:	60fc      	str	r4, [r7, #12]
  406ca4:	4640      	mov	r0, r8
  406ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406caa:	f000 bcf9 	b.w	4076a0 <__malloc_unlock>
  406cae:	4770      	bx	lr
  406cb0:	0a5a      	lsrs	r2, r3, #9
  406cb2:	2a04      	cmp	r2, #4
  406cb4:	d852      	bhi.n	406d5c <_free_r+0x13c>
  406cb6:	099a      	lsrs	r2, r3, #6
  406cb8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406cbc:	00ff      	lsls	r7, r7, #3
  406cbe:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406cc2:	19c8      	adds	r0, r1, r7
  406cc4:	59ca      	ldr	r2, [r1, r7]
  406cc6:	3808      	subs	r0, #8
  406cc8:	4290      	cmp	r0, r2
  406cca:	d04f      	beq.n	406d6c <_free_r+0x14c>
  406ccc:	6851      	ldr	r1, [r2, #4]
  406cce:	f021 0103 	bic.w	r1, r1, #3
  406cd2:	428b      	cmp	r3, r1
  406cd4:	d232      	bcs.n	406d3c <_free_r+0x11c>
  406cd6:	6892      	ldr	r2, [r2, #8]
  406cd8:	4290      	cmp	r0, r2
  406cda:	d1f7      	bne.n	406ccc <_free_r+0xac>
  406cdc:	68c3      	ldr	r3, [r0, #12]
  406cde:	60a0      	str	r0, [r4, #8]
  406ce0:	60e3      	str	r3, [r4, #12]
  406ce2:	609c      	str	r4, [r3, #8]
  406ce4:	60c4      	str	r4, [r0, #12]
  406ce6:	4640      	mov	r0, r8
  406ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406cec:	f000 bcd8 	b.w	4076a0 <__malloc_unlock>
  406cf0:	6895      	ldr	r5, [r2, #8]
  406cf2:	4f3b      	ldr	r7, [pc, #236]	; (406de0 <_free_r+0x1c0>)
  406cf4:	42bd      	cmp	r5, r7
  406cf6:	4403      	add	r3, r0
  406cf8:	d040      	beq.n	406d7c <_free_r+0x15c>
  406cfa:	68d0      	ldr	r0, [r2, #12]
  406cfc:	60e8      	str	r0, [r5, #12]
  406cfe:	f043 0201 	orr.w	r2, r3, #1
  406d02:	6085      	str	r5, [r0, #8]
  406d04:	6062      	str	r2, [r4, #4]
  406d06:	50e3      	str	r3, [r4, r3]
  406d08:	e7b7      	b.n	406c7a <_free_r+0x5a>
  406d0a:	07ff      	lsls	r7, r7, #31
  406d0c:	4403      	add	r3, r0
  406d0e:	d407      	bmi.n	406d20 <_free_r+0x100>
  406d10:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406d14:	1aa4      	subs	r4, r4, r2
  406d16:	4413      	add	r3, r2
  406d18:	68a0      	ldr	r0, [r4, #8]
  406d1a:	68e2      	ldr	r2, [r4, #12]
  406d1c:	60c2      	str	r2, [r0, #12]
  406d1e:	6090      	str	r0, [r2, #8]
  406d20:	4a30      	ldr	r2, [pc, #192]	; (406de4 <_free_r+0x1c4>)
  406d22:	6812      	ldr	r2, [r2, #0]
  406d24:	f043 0001 	orr.w	r0, r3, #1
  406d28:	4293      	cmp	r3, r2
  406d2a:	6060      	str	r0, [r4, #4]
  406d2c:	608c      	str	r4, [r1, #8]
  406d2e:	d3b9      	bcc.n	406ca4 <_free_r+0x84>
  406d30:	4b2d      	ldr	r3, [pc, #180]	; (406de8 <_free_r+0x1c8>)
  406d32:	4640      	mov	r0, r8
  406d34:	6819      	ldr	r1, [r3, #0]
  406d36:	f7ff ff23 	bl	406b80 <_malloc_trim_r>
  406d3a:	e7b3      	b.n	406ca4 <_free_r+0x84>
  406d3c:	4610      	mov	r0, r2
  406d3e:	e7cd      	b.n	406cdc <_free_r+0xbc>
  406d40:	1811      	adds	r1, r2, r0
  406d42:	6849      	ldr	r1, [r1, #4]
  406d44:	07c9      	lsls	r1, r1, #31
  406d46:	d444      	bmi.n	406dd2 <_free_r+0x1b2>
  406d48:	6891      	ldr	r1, [r2, #8]
  406d4a:	68d2      	ldr	r2, [r2, #12]
  406d4c:	60ca      	str	r2, [r1, #12]
  406d4e:	4403      	add	r3, r0
  406d50:	f043 0001 	orr.w	r0, r3, #1
  406d54:	6091      	str	r1, [r2, #8]
  406d56:	6060      	str	r0, [r4, #4]
  406d58:	50e3      	str	r3, [r4, r3]
  406d5a:	e7a3      	b.n	406ca4 <_free_r+0x84>
  406d5c:	2a14      	cmp	r2, #20
  406d5e:	d816      	bhi.n	406d8e <_free_r+0x16e>
  406d60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406d64:	00ff      	lsls	r7, r7, #3
  406d66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406d6a:	e7aa      	b.n	406cc2 <_free_r+0xa2>
  406d6c:	10aa      	asrs	r2, r5, #2
  406d6e:	2301      	movs	r3, #1
  406d70:	684d      	ldr	r5, [r1, #4]
  406d72:	4093      	lsls	r3, r2
  406d74:	432b      	orrs	r3, r5
  406d76:	604b      	str	r3, [r1, #4]
  406d78:	4603      	mov	r3, r0
  406d7a:	e7b0      	b.n	406cde <_free_r+0xbe>
  406d7c:	f043 0201 	orr.w	r2, r3, #1
  406d80:	614c      	str	r4, [r1, #20]
  406d82:	610c      	str	r4, [r1, #16]
  406d84:	60e5      	str	r5, [r4, #12]
  406d86:	60a5      	str	r5, [r4, #8]
  406d88:	6062      	str	r2, [r4, #4]
  406d8a:	50e3      	str	r3, [r4, r3]
  406d8c:	e78a      	b.n	406ca4 <_free_r+0x84>
  406d8e:	2a54      	cmp	r2, #84	; 0x54
  406d90:	d806      	bhi.n	406da0 <_free_r+0x180>
  406d92:	0b1a      	lsrs	r2, r3, #12
  406d94:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406d98:	00ff      	lsls	r7, r7, #3
  406d9a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406d9e:	e790      	b.n	406cc2 <_free_r+0xa2>
  406da0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406da4:	d806      	bhi.n	406db4 <_free_r+0x194>
  406da6:	0bda      	lsrs	r2, r3, #15
  406da8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406dac:	00ff      	lsls	r7, r7, #3
  406dae:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406db2:	e786      	b.n	406cc2 <_free_r+0xa2>
  406db4:	f240 5054 	movw	r0, #1364	; 0x554
  406db8:	4282      	cmp	r2, r0
  406dba:	d806      	bhi.n	406dca <_free_r+0x1aa>
  406dbc:	0c9a      	lsrs	r2, r3, #18
  406dbe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406dc2:	00ff      	lsls	r7, r7, #3
  406dc4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406dc8:	e77b      	b.n	406cc2 <_free_r+0xa2>
  406dca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406dce:	257e      	movs	r5, #126	; 0x7e
  406dd0:	e777      	b.n	406cc2 <_free_r+0xa2>
  406dd2:	f043 0101 	orr.w	r1, r3, #1
  406dd6:	6061      	str	r1, [r4, #4]
  406dd8:	6013      	str	r3, [r2, #0]
  406dda:	e763      	b.n	406ca4 <_free_r+0x84>
  406ddc:	200005ac 	.word	0x200005ac
  406de0:	200005b4 	.word	0x200005b4
  406de4:	200009b8 	.word	0x200009b8
  406de8:	2000d7c4 	.word	0x2000d7c4

00406dec <_localeconv_r>:
  406dec:	4a04      	ldr	r2, [pc, #16]	; (406e00 <_localeconv_r+0x14>)
  406dee:	4b05      	ldr	r3, [pc, #20]	; (406e04 <_localeconv_r+0x18>)
  406df0:	6812      	ldr	r2, [r2, #0]
  406df2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406df4:	2800      	cmp	r0, #0
  406df6:	bf08      	it	eq
  406df8:	4618      	moveq	r0, r3
  406dfa:	30f0      	adds	r0, #240	; 0xf0
  406dfc:	4770      	bx	lr
  406dfe:	bf00      	nop
  406e00:	20000014 	.word	0x20000014
  406e04:	20000440 	.word	0x20000440

00406e08 <_malloc_r>:
  406e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e0c:	f101 060b 	add.w	r6, r1, #11
  406e10:	2e16      	cmp	r6, #22
  406e12:	b083      	sub	sp, #12
  406e14:	4605      	mov	r5, r0
  406e16:	f240 809e 	bls.w	406f56 <_malloc_r+0x14e>
  406e1a:	f036 0607 	bics.w	r6, r6, #7
  406e1e:	f100 80bd 	bmi.w	406f9c <_malloc_r+0x194>
  406e22:	42b1      	cmp	r1, r6
  406e24:	f200 80ba 	bhi.w	406f9c <_malloc_r+0x194>
  406e28:	f000 fc38 	bl	40769c <__malloc_lock>
  406e2c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406e30:	f0c0 8293 	bcc.w	40735a <_malloc_r+0x552>
  406e34:	0a73      	lsrs	r3, r6, #9
  406e36:	f000 80b8 	beq.w	406faa <_malloc_r+0x1a2>
  406e3a:	2b04      	cmp	r3, #4
  406e3c:	f200 8179 	bhi.w	407132 <_malloc_r+0x32a>
  406e40:	09b3      	lsrs	r3, r6, #6
  406e42:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406e46:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406e4a:	00c3      	lsls	r3, r0, #3
  406e4c:	4fbf      	ldr	r7, [pc, #764]	; (40714c <_malloc_r+0x344>)
  406e4e:	443b      	add	r3, r7
  406e50:	f1a3 0108 	sub.w	r1, r3, #8
  406e54:	685c      	ldr	r4, [r3, #4]
  406e56:	42a1      	cmp	r1, r4
  406e58:	d106      	bne.n	406e68 <_malloc_r+0x60>
  406e5a:	e00c      	b.n	406e76 <_malloc_r+0x6e>
  406e5c:	2a00      	cmp	r2, #0
  406e5e:	f280 80aa 	bge.w	406fb6 <_malloc_r+0x1ae>
  406e62:	68e4      	ldr	r4, [r4, #12]
  406e64:	42a1      	cmp	r1, r4
  406e66:	d006      	beq.n	406e76 <_malloc_r+0x6e>
  406e68:	6863      	ldr	r3, [r4, #4]
  406e6a:	f023 0303 	bic.w	r3, r3, #3
  406e6e:	1b9a      	subs	r2, r3, r6
  406e70:	2a0f      	cmp	r2, #15
  406e72:	ddf3      	ble.n	406e5c <_malloc_r+0x54>
  406e74:	4670      	mov	r0, lr
  406e76:	693c      	ldr	r4, [r7, #16]
  406e78:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407160 <_malloc_r+0x358>
  406e7c:	4574      	cmp	r4, lr
  406e7e:	f000 81ab 	beq.w	4071d8 <_malloc_r+0x3d0>
  406e82:	6863      	ldr	r3, [r4, #4]
  406e84:	f023 0303 	bic.w	r3, r3, #3
  406e88:	1b9a      	subs	r2, r3, r6
  406e8a:	2a0f      	cmp	r2, #15
  406e8c:	f300 8190 	bgt.w	4071b0 <_malloc_r+0x3a8>
  406e90:	2a00      	cmp	r2, #0
  406e92:	f8c7 e014 	str.w	lr, [r7, #20]
  406e96:	f8c7 e010 	str.w	lr, [r7, #16]
  406e9a:	f280 809d 	bge.w	406fd8 <_malloc_r+0x1d0>
  406e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406ea2:	f080 8161 	bcs.w	407168 <_malloc_r+0x360>
  406ea6:	08db      	lsrs	r3, r3, #3
  406ea8:	f103 0c01 	add.w	ip, r3, #1
  406eac:	1099      	asrs	r1, r3, #2
  406eae:	687a      	ldr	r2, [r7, #4]
  406eb0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406eb4:	f8c4 8008 	str.w	r8, [r4, #8]
  406eb8:	2301      	movs	r3, #1
  406eba:	408b      	lsls	r3, r1
  406ebc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406ec0:	4313      	orrs	r3, r2
  406ec2:	3908      	subs	r1, #8
  406ec4:	60e1      	str	r1, [r4, #12]
  406ec6:	607b      	str	r3, [r7, #4]
  406ec8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406ecc:	f8c8 400c 	str.w	r4, [r8, #12]
  406ed0:	1082      	asrs	r2, r0, #2
  406ed2:	2401      	movs	r4, #1
  406ed4:	4094      	lsls	r4, r2
  406ed6:	429c      	cmp	r4, r3
  406ed8:	f200 808b 	bhi.w	406ff2 <_malloc_r+0x1ea>
  406edc:	421c      	tst	r4, r3
  406ede:	d106      	bne.n	406eee <_malloc_r+0xe6>
  406ee0:	f020 0003 	bic.w	r0, r0, #3
  406ee4:	0064      	lsls	r4, r4, #1
  406ee6:	421c      	tst	r4, r3
  406ee8:	f100 0004 	add.w	r0, r0, #4
  406eec:	d0fa      	beq.n	406ee4 <_malloc_r+0xdc>
  406eee:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406ef2:	46cc      	mov	ip, r9
  406ef4:	4680      	mov	r8, r0
  406ef6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406efa:	459c      	cmp	ip, r3
  406efc:	d107      	bne.n	406f0e <_malloc_r+0x106>
  406efe:	e16d      	b.n	4071dc <_malloc_r+0x3d4>
  406f00:	2a00      	cmp	r2, #0
  406f02:	f280 817b 	bge.w	4071fc <_malloc_r+0x3f4>
  406f06:	68db      	ldr	r3, [r3, #12]
  406f08:	459c      	cmp	ip, r3
  406f0a:	f000 8167 	beq.w	4071dc <_malloc_r+0x3d4>
  406f0e:	6859      	ldr	r1, [r3, #4]
  406f10:	f021 0103 	bic.w	r1, r1, #3
  406f14:	1b8a      	subs	r2, r1, r6
  406f16:	2a0f      	cmp	r2, #15
  406f18:	ddf2      	ble.n	406f00 <_malloc_r+0xf8>
  406f1a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406f1e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406f22:	9300      	str	r3, [sp, #0]
  406f24:	199c      	adds	r4, r3, r6
  406f26:	4628      	mov	r0, r5
  406f28:	f046 0601 	orr.w	r6, r6, #1
  406f2c:	f042 0501 	orr.w	r5, r2, #1
  406f30:	605e      	str	r6, [r3, #4]
  406f32:	f8c8 c00c 	str.w	ip, [r8, #12]
  406f36:	f8cc 8008 	str.w	r8, [ip, #8]
  406f3a:	617c      	str	r4, [r7, #20]
  406f3c:	613c      	str	r4, [r7, #16]
  406f3e:	f8c4 e00c 	str.w	lr, [r4, #12]
  406f42:	f8c4 e008 	str.w	lr, [r4, #8]
  406f46:	6065      	str	r5, [r4, #4]
  406f48:	505a      	str	r2, [r3, r1]
  406f4a:	f000 fba9 	bl	4076a0 <__malloc_unlock>
  406f4e:	9b00      	ldr	r3, [sp, #0]
  406f50:	f103 0408 	add.w	r4, r3, #8
  406f54:	e01e      	b.n	406f94 <_malloc_r+0x18c>
  406f56:	2910      	cmp	r1, #16
  406f58:	d820      	bhi.n	406f9c <_malloc_r+0x194>
  406f5a:	f000 fb9f 	bl	40769c <__malloc_lock>
  406f5e:	2610      	movs	r6, #16
  406f60:	2318      	movs	r3, #24
  406f62:	2002      	movs	r0, #2
  406f64:	4f79      	ldr	r7, [pc, #484]	; (40714c <_malloc_r+0x344>)
  406f66:	443b      	add	r3, r7
  406f68:	f1a3 0208 	sub.w	r2, r3, #8
  406f6c:	685c      	ldr	r4, [r3, #4]
  406f6e:	4294      	cmp	r4, r2
  406f70:	f000 813d 	beq.w	4071ee <_malloc_r+0x3e6>
  406f74:	6863      	ldr	r3, [r4, #4]
  406f76:	68e1      	ldr	r1, [r4, #12]
  406f78:	68a6      	ldr	r6, [r4, #8]
  406f7a:	f023 0303 	bic.w	r3, r3, #3
  406f7e:	4423      	add	r3, r4
  406f80:	4628      	mov	r0, r5
  406f82:	685a      	ldr	r2, [r3, #4]
  406f84:	60f1      	str	r1, [r6, #12]
  406f86:	f042 0201 	orr.w	r2, r2, #1
  406f8a:	608e      	str	r6, [r1, #8]
  406f8c:	605a      	str	r2, [r3, #4]
  406f8e:	f000 fb87 	bl	4076a0 <__malloc_unlock>
  406f92:	3408      	adds	r4, #8
  406f94:	4620      	mov	r0, r4
  406f96:	b003      	add	sp, #12
  406f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f9c:	2400      	movs	r4, #0
  406f9e:	230c      	movs	r3, #12
  406fa0:	4620      	mov	r0, r4
  406fa2:	602b      	str	r3, [r5, #0]
  406fa4:	b003      	add	sp, #12
  406fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406faa:	2040      	movs	r0, #64	; 0x40
  406fac:	f44f 7300 	mov.w	r3, #512	; 0x200
  406fb0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406fb4:	e74a      	b.n	406e4c <_malloc_r+0x44>
  406fb6:	4423      	add	r3, r4
  406fb8:	68e1      	ldr	r1, [r4, #12]
  406fba:	685a      	ldr	r2, [r3, #4]
  406fbc:	68a6      	ldr	r6, [r4, #8]
  406fbe:	f042 0201 	orr.w	r2, r2, #1
  406fc2:	60f1      	str	r1, [r6, #12]
  406fc4:	4628      	mov	r0, r5
  406fc6:	608e      	str	r6, [r1, #8]
  406fc8:	605a      	str	r2, [r3, #4]
  406fca:	f000 fb69 	bl	4076a0 <__malloc_unlock>
  406fce:	3408      	adds	r4, #8
  406fd0:	4620      	mov	r0, r4
  406fd2:	b003      	add	sp, #12
  406fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fd8:	4423      	add	r3, r4
  406fda:	4628      	mov	r0, r5
  406fdc:	685a      	ldr	r2, [r3, #4]
  406fde:	f042 0201 	orr.w	r2, r2, #1
  406fe2:	605a      	str	r2, [r3, #4]
  406fe4:	f000 fb5c 	bl	4076a0 <__malloc_unlock>
  406fe8:	3408      	adds	r4, #8
  406fea:	4620      	mov	r0, r4
  406fec:	b003      	add	sp, #12
  406fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ff2:	68bc      	ldr	r4, [r7, #8]
  406ff4:	6863      	ldr	r3, [r4, #4]
  406ff6:	f023 0803 	bic.w	r8, r3, #3
  406ffa:	45b0      	cmp	r8, r6
  406ffc:	d304      	bcc.n	407008 <_malloc_r+0x200>
  406ffe:	eba8 0306 	sub.w	r3, r8, r6
  407002:	2b0f      	cmp	r3, #15
  407004:	f300 8085 	bgt.w	407112 <_malloc_r+0x30a>
  407008:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407164 <_malloc_r+0x35c>
  40700c:	4b50      	ldr	r3, [pc, #320]	; (407150 <_malloc_r+0x348>)
  40700e:	f8d9 2000 	ldr.w	r2, [r9]
  407012:	681b      	ldr	r3, [r3, #0]
  407014:	3201      	adds	r2, #1
  407016:	4433      	add	r3, r6
  407018:	eb04 0a08 	add.w	sl, r4, r8
  40701c:	f000 8155 	beq.w	4072ca <_malloc_r+0x4c2>
  407020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407024:	330f      	adds	r3, #15
  407026:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40702a:	f02b 0b0f 	bic.w	fp, fp, #15
  40702e:	4659      	mov	r1, fp
  407030:	4628      	mov	r0, r5
  407032:	f000 ffd7 	bl	407fe4 <_sbrk_r>
  407036:	1c41      	adds	r1, r0, #1
  407038:	4602      	mov	r2, r0
  40703a:	f000 80fc 	beq.w	407236 <_malloc_r+0x42e>
  40703e:	4582      	cmp	sl, r0
  407040:	f200 80f7 	bhi.w	407232 <_malloc_r+0x42a>
  407044:	4b43      	ldr	r3, [pc, #268]	; (407154 <_malloc_r+0x34c>)
  407046:	6819      	ldr	r1, [r3, #0]
  407048:	4459      	add	r1, fp
  40704a:	6019      	str	r1, [r3, #0]
  40704c:	f000 814d 	beq.w	4072ea <_malloc_r+0x4e2>
  407050:	f8d9 0000 	ldr.w	r0, [r9]
  407054:	3001      	adds	r0, #1
  407056:	bf1b      	ittet	ne
  407058:	eba2 0a0a 	subne.w	sl, r2, sl
  40705c:	4451      	addne	r1, sl
  40705e:	f8c9 2000 	streq.w	r2, [r9]
  407062:	6019      	strne	r1, [r3, #0]
  407064:	f012 0107 	ands.w	r1, r2, #7
  407068:	f000 8115 	beq.w	407296 <_malloc_r+0x48e>
  40706c:	f1c1 0008 	rsb	r0, r1, #8
  407070:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407074:	4402      	add	r2, r0
  407076:	3108      	adds	r1, #8
  407078:	eb02 090b 	add.w	r9, r2, fp
  40707c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407080:	eba1 0909 	sub.w	r9, r1, r9
  407084:	4649      	mov	r1, r9
  407086:	4628      	mov	r0, r5
  407088:	9301      	str	r3, [sp, #4]
  40708a:	9200      	str	r2, [sp, #0]
  40708c:	f000 ffaa 	bl	407fe4 <_sbrk_r>
  407090:	1c43      	adds	r3, r0, #1
  407092:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407096:	f000 8143 	beq.w	407320 <_malloc_r+0x518>
  40709a:	1a80      	subs	r0, r0, r2
  40709c:	4448      	add	r0, r9
  40709e:	f040 0001 	orr.w	r0, r0, #1
  4070a2:	6819      	ldr	r1, [r3, #0]
  4070a4:	60ba      	str	r2, [r7, #8]
  4070a6:	4449      	add	r1, r9
  4070a8:	42bc      	cmp	r4, r7
  4070aa:	6050      	str	r0, [r2, #4]
  4070ac:	6019      	str	r1, [r3, #0]
  4070ae:	d017      	beq.n	4070e0 <_malloc_r+0x2d8>
  4070b0:	f1b8 0f0f 	cmp.w	r8, #15
  4070b4:	f240 80fb 	bls.w	4072ae <_malloc_r+0x4a6>
  4070b8:	6860      	ldr	r0, [r4, #4]
  4070ba:	f1a8 020c 	sub.w	r2, r8, #12
  4070be:	f022 0207 	bic.w	r2, r2, #7
  4070c2:	eb04 0e02 	add.w	lr, r4, r2
  4070c6:	f000 0001 	and.w	r0, r0, #1
  4070ca:	f04f 0c05 	mov.w	ip, #5
  4070ce:	4310      	orrs	r0, r2
  4070d0:	2a0f      	cmp	r2, #15
  4070d2:	6060      	str	r0, [r4, #4]
  4070d4:	f8ce c004 	str.w	ip, [lr, #4]
  4070d8:	f8ce c008 	str.w	ip, [lr, #8]
  4070dc:	f200 8117 	bhi.w	40730e <_malloc_r+0x506>
  4070e0:	4b1d      	ldr	r3, [pc, #116]	; (407158 <_malloc_r+0x350>)
  4070e2:	68bc      	ldr	r4, [r7, #8]
  4070e4:	681a      	ldr	r2, [r3, #0]
  4070e6:	4291      	cmp	r1, r2
  4070e8:	bf88      	it	hi
  4070ea:	6019      	strhi	r1, [r3, #0]
  4070ec:	4b1b      	ldr	r3, [pc, #108]	; (40715c <_malloc_r+0x354>)
  4070ee:	681a      	ldr	r2, [r3, #0]
  4070f0:	4291      	cmp	r1, r2
  4070f2:	6862      	ldr	r2, [r4, #4]
  4070f4:	bf88      	it	hi
  4070f6:	6019      	strhi	r1, [r3, #0]
  4070f8:	f022 0203 	bic.w	r2, r2, #3
  4070fc:	4296      	cmp	r6, r2
  4070fe:	eba2 0306 	sub.w	r3, r2, r6
  407102:	d801      	bhi.n	407108 <_malloc_r+0x300>
  407104:	2b0f      	cmp	r3, #15
  407106:	dc04      	bgt.n	407112 <_malloc_r+0x30a>
  407108:	4628      	mov	r0, r5
  40710a:	f000 fac9 	bl	4076a0 <__malloc_unlock>
  40710e:	2400      	movs	r4, #0
  407110:	e740      	b.n	406f94 <_malloc_r+0x18c>
  407112:	19a2      	adds	r2, r4, r6
  407114:	f043 0301 	orr.w	r3, r3, #1
  407118:	f046 0601 	orr.w	r6, r6, #1
  40711c:	6066      	str	r6, [r4, #4]
  40711e:	4628      	mov	r0, r5
  407120:	60ba      	str	r2, [r7, #8]
  407122:	6053      	str	r3, [r2, #4]
  407124:	f000 fabc 	bl	4076a0 <__malloc_unlock>
  407128:	3408      	adds	r4, #8
  40712a:	4620      	mov	r0, r4
  40712c:	b003      	add	sp, #12
  40712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407132:	2b14      	cmp	r3, #20
  407134:	d971      	bls.n	40721a <_malloc_r+0x412>
  407136:	2b54      	cmp	r3, #84	; 0x54
  407138:	f200 80a3 	bhi.w	407282 <_malloc_r+0x47a>
  40713c:	0b33      	lsrs	r3, r6, #12
  40713e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407142:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407146:	00c3      	lsls	r3, r0, #3
  407148:	e680      	b.n	406e4c <_malloc_r+0x44>
  40714a:	bf00      	nop
  40714c:	200005ac 	.word	0x200005ac
  407150:	2000d7c4 	.word	0x2000d7c4
  407154:	2000d794 	.word	0x2000d794
  407158:	2000d7bc 	.word	0x2000d7bc
  40715c:	2000d7c0 	.word	0x2000d7c0
  407160:	200005b4 	.word	0x200005b4
  407164:	200009b4 	.word	0x200009b4
  407168:	0a5a      	lsrs	r2, r3, #9
  40716a:	2a04      	cmp	r2, #4
  40716c:	d95b      	bls.n	407226 <_malloc_r+0x41e>
  40716e:	2a14      	cmp	r2, #20
  407170:	f200 80ae 	bhi.w	4072d0 <_malloc_r+0x4c8>
  407174:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407178:	00c9      	lsls	r1, r1, #3
  40717a:	325b      	adds	r2, #91	; 0x5b
  40717c:	eb07 0c01 	add.w	ip, r7, r1
  407180:	5879      	ldr	r1, [r7, r1]
  407182:	f1ac 0c08 	sub.w	ip, ip, #8
  407186:	458c      	cmp	ip, r1
  407188:	f000 8088 	beq.w	40729c <_malloc_r+0x494>
  40718c:	684a      	ldr	r2, [r1, #4]
  40718e:	f022 0203 	bic.w	r2, r2, #3
  407192:	4293      	cmp	r3, r2
  407194:	d273      	bcs.n	40727e <_malloc_r+0x476>
  407196:	6889      	ldr	r1, [r1, #8]
  407198:	458c      	cmp	ip, r1
  40719a:	d1f7      	bne.n	40718c <_malloc_r+0x384>
  40719c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4071a0:	687b      	ldr	r3, [r7, #4]
  4071a2:	60e2      	str	r2, [r4, #12]
  4071a4:	f8c4 c008 	str.w	ip, [r4, #8]
  4071a8:	6094      	str	r4, [r2, #8]
  4071aa:	f8cc 400c 	str.w	r4, [ip, #12]
  4071ae:	e68f      	b.n	406ed0 <_malloc_r+0xc8>
  4071b0:	19a1      	adds	r1, r4, r6
  4071b2:	f046 0c01 	orr.w	ip, r6, #1
  4071b6:	f042 0601 	orr.w	r6, r2, #1
  4071ba:	f8c4 c004 	str.w	ip, [r4, #4]
  4071be:	4628      	mov	r0, r5
  4071c0:	6179      	str	r1, [r7, #20]
  4071c2:	6139      	str	r1, [r7, #16]
  4071c4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4071c8:	f8c1 e008 	str.w	lr, [r1, #8]
  4071cc:	604e      	str	r6, [r1, #4]
  4071ce:	50e2      	str	r2, [r4, r3]
  4071d0:	f000 fa66 	bl	4076a0 <__malloc_unlock>
  4071d4:	3408      	adds	r4, #8
  4071d6:	e6dd      	b.n	406f94 <_malloc_r+0x18c>
  4071d8:	687b      	ldr	r3, [r7, #4]
  4071da:	e679      	b.n	406ed0 <_malloc_r+0xc8>
  4071dc:	f108 0801 	add.w	r8, r8, #1
  4071e0:	f018 0f03 	tst.w	r8, #3
  4071e4:	f10c 0c08 	add.w	ip, ip, #8
  4071e8:	f47f ae85 	bne.w	406ef6 <_malloc_r+0xee>
  4071ec:	e02d      	b.n	40724a <_malloc_r+0x442>
  4071ee:	68dc      	ldr	r4, [r3, #12]
  4071f0:	42a3      	cmp	r3, r4
  4071f2:	bf08      	it	eq
  4071f4:	3002      	addeq	r0, #2
  4071f6:	f43f ae3e 	beq.w	406e76 <_malloc_r+0x6e>
  4071fa:	e6bb      	b.n	406f74 <_malloc_r+0x16c>
  4071fc:	4419      	add	r1, r3
  4071fe:	461c      	mov	r4, r3
  407200:	684a      	ldr	r2, [r1, #4]
  407202:	68db      	ldr	r3, [r3, #12]
  407204:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407208:	f042 0201 	orr.w	r2, r2, #1
  40720c:	604a      	str	r2, [r1, #4]
  40720e:	4628      	mov	r0, r5
  407210:	60f3      	str	r3, [r6, #12]
  407212:	609e      	str	r6, [r3, #8]
  407214:	f000 fa44 	bl	4076a0 <__malloc_unlock>
  407218:	e6bc      	b.n	406f94 <_malloc_r+0x18c>
  40721a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40721e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407222:	00c3      	lsls	r3, r0, #3
  407224:	e612      	b.n	406e4c <_malloc_r+0x44>
  407226:	099a      	lsrs	r2, r3, #6
  407228:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40722c:	00c9      	lsls	r1, r1, #3
  40722e:	3238      	adds	r2, #56	; 0x38
  407230:	e7a4      	b.n	40717c <_malloc_r+0x374>
  407232:	42bc      	cmp	r4, r7
  407234:	d054      	beq.n	4072e0 <_malloc_r+0x4d8>
  407236:	68bc      	ldr	r4, [r7, #8]
  407238:	6862      	ldr	r2, [r4, #4]
  40723a:	f022 0203 	bic.w	r2, r2, #3
  40723e:	e75d      	b.n	4070fc <_malloc_r+0x2f4>
  407240:	f859 3908 	ldr.w	r3, [r9], #-8
  407244:	4599      	cmp	r9, r3
  407246:	f040 8086 	bne.w	407356 <_malloc_r+0x54e>
  40724a:	f010 0f03 	tst.w	r0, #3
  40724e:	f100 30ff 	add.w	r0, r0, #4294967295
  407252:	d1f5      	bne.n	407240 <_malloc_r+0x438>
  407254:	687b      	ldr	r3, [r7, #4]
  407256:	ea23 0304 	bic.w	r3, r3, r4
  40725a:	607b      	str	r3, [r7, #4]
  40725c:	0064      	lsls	r4, r4, #1
  40725e:	429c      	cmp	r4, r3
  407260:	f63f aec7 	bhi.w	406ff2 <_malloc_r+0x1ea>
  407264:	2c00      	cmp	r4, #0
  407266:	f43f aec4 	beq.w	406ff2 <_malloc_r+0x1ea>
  40726a:	421c      	tst	r4, r3
  40726c:	4640      	mov	r0, r8
  40726e:	f47f ae3e 	bne.w	406eee <_malloc_r+0xe6>
  407272:	0064      	lsls	r4, r4, #1
  407274:	421c      	tst	r4, r3
  407276:	f100 0004 	add.w	r0, r0, #4
  40727a:	d0fa      	beq.n	407272 <_malloc_r+0x46a>
  40727c:	e637      	b.n	406eee <_malloc_r+0xe6>
  40727e:	468c      	mov	ip, r1
  407280:	e78c      	b.n	40719c <_malloc_r+0x394>
  407282:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407286:	d815      	bhi.n	4072b4 <_malloc_r+0x4ac>
  407288:	0bf3      	lsrs	r3, r6, #15
  40728a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40728e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407292:	00c3      	lsls	r3, r0, #3
  407294:	e5da      	b.n	406e4c <_malloc_r+0x44>
  407296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40729a:	e6ed      	b.n	407078 <_malloc_r+0x270>
  40729c:	687b      	ldr	r3, [r7, #4]
  40729e:	1092      	asrs	r2, r2, #2
  4072a0:	2101      	movs	r1, #1
  4072a2:	fa01 f202 	lsl.w	r2, r1, r2
  4072a6:	4313      	orrs	r3, r2
  4072a8:	607b      	str	r3, [r7, #4]
  4072aa:	4662      	mov	r2, ip
  4072ac:	e779      	b.n	4071a2 <_malloc_r+0x39a>
  4072ae:	2301      	movs	r3, #1
  4072b0:	6053      	str	r3, [r2, #4]
  4072b2:	e729      	b.n	407108 <_malloc_r+0x300>
  4072b4:	f240 5254 	movw	r2, #1364	; 0x554
  4072b8:	4293      	cmp	r3, r2
  4072ba:	d822      	bhi.n	407302 <_malloc_r+0x4fa>
  4072bc:	0cb3      	lsrs	r3, r6, #18
  4072be:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4072c2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4072c6:	00c3      	lsls	r3, r0, #3
  4072c8:	e5c0      	b.n	406e4c <_malloc_r+0x44>
  4072ca:	f103 0b10 	add.w	fp, r3, #16
  4072ce:	e6ae      	b.n	40702e <_malloc_r+0x226>
  4072d0:	2a54      	cmp	r2, #84	; 0x54
  4072d2:	d829      	bhi.n	407328 <_malloc_r+0x520>
  4072d4:	0b1a      	lsrs	r2, r3, #12
  4072d6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4072da:	00c9      	lsls	r1, r1, #3
  4072dc:	326e      	adds	r2, #110	; 0x6e
  4072de:	e74d      	b.n	40717c <_malloc_r+0x374>
  4072e0:	4b20      	ldr	r3, [pc, #128]	; (407364 <_malloc_r+0x55c>)
  4072e2:	6819      	ldr	r1, [r3, #0]
  4072e4:	4459      	add	r1, fp
  4072e6:	6019      	str	r1, [r3, #0]
  4072e8:	e6b2      	b.n	407050 <_malloc_r+0x248>
  4072ea:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4072ee:	2800      	cmp	r0, #0
  4072f0:	f47f aeae 	bne.w	407050 <_malloc_r+0x248>
  4072f4:	eb08 030b 	add.w	r3, r8, fp
  4072f8:	68ba      	ldr	r2, [r7, #8]
  4072fa:	f043 0301 	orr.w	r3, r3, #1
  4072fe:	6053      	str	r3, [r2, #4]
  407300:	e6ee      	b.n	4070e0 <_malloc_r+0x2d8>
  407302:	207f      	movs	r0, #127	; 0x7f
  407304:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407308:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40730c:	e59e      	b.n	406e4c <_malloc_r+0x44>
  40730e:	f104 0108 	add.w	r1, r4, #8
  407312:	4628      	mov	r0, r5
  407314:	9300      	str	r3, [sp, #0]
  407316:	f7ff fc83 	bl	406c20 <_free_r>
  40731a:	9b00      	ldr	r3, [sp, #0]
  40731c:	6819      	ldr	r1, [r3, #0]
  40731e:	e6df      	b.n	4070e0 <_malloc_r+0x2d8>
  407320:	2001      	movs	r0, #1
  407322:	f04f 0900 	mov.w	r9, #0
  407326:	e6bc      	b.n	4070a2 <_malloc_r+0x29a>
  407328:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40732c:	d805      	bhi.n	40733a <_malloc_r+0x532>
  40732e:	0bda      	lsrs	r2, r3, #15
  407330:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407334:	00c9      	lsls	r1, r1, #3
  407336:	3277      	adds	r2, #119	; 0x77
  407338:	e720      	b.n	40717c <_malloc_r+0x374>
  40733a:	f240 5154 	movw	r1, #1364	; 0x554
  40733e:	428a      	cmp	r2, r1
  407340:	d805      	bhi.n	40734e <_malloc_r+0x546>
  407342:	0c9a      	lsrs	r2, r3, #18
  407344:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407348:	00c9      	lsls	r1, r1, #3
  40734a:	327c      	adds	r2, #124	; 0x7c
  40734c:	e716      	b.n	40717c <_malloc_r+0x374>
  40734e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407352:	227e      	movs	r2, #126	; 0x7e
  407354:	e712      	b.n	40717c <_malloc_r+0x374>
  407356:	687b      	ldr	r3, [r7, #4]
  407358:	e780      	b.n	40725c <_malloc_r+0x454>
  40735a:	08f0      	lsrs	r0, r6, #3
  40735c:	f106 0308 	add.w	r3, r6, #8
  407360:	e600      	b.n	406f64 <_malloc_r+0x15c>
  407362:	bf00      	nop
  407364:	2000d794 	.word	0x2000d794

00407368 <__ascii_mbtowc>:
  407368:	b082      	sub	sp, #8
  40736a:	b149      	cbz	r1, 407380 <__ascii_mbtowc+0x18>
  40736c:	b15a      	cbz	r2, 407386 <__ascii_mbtowc+0x1e>
  40736e:	b16b      	cbz	r3, 40738c <__ascii_mbtowc+0x24>
  407370:	7813      	ldrb	r3, [r2, #0]
  407372:	600b      	str	r3, [r1, #0]
  407374:	7812      	ldrb	r2, [r2, #0]
  407376:	1c10      	adds	r0, r2, #0
  407378:	bf18      	it	ne
  40737a:	2001      	movne	r0, #1
  40737c:	b002      	add	sp, #8
  40737e:	4770      	bx	lr
  407380:	a901      	add	r1, sp, #4
  407382:	2a00      	cmp	r2, #0
  407384:	d1f3      	bne.n	40736e <__ascii_mbtowc+0x6>
  407386:	4610      	mov	r0, r2
  407388:	b002      	add	sp, #8
  40738a:	4770      	bx	lr
  40738c:	f06f 0001 	mvn.w	r0, #1
  407390:	e7f4      	b.n	40737c <__ascii_mbtowc+0x14>
  407392:	bf00      	nop
	...

004073a0 <memchr>:
  4073a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4073a4:	2a10      	cmp	r2, #16
  4073a6:	db2b      	blt.n	407400 <memchr+0x60>
  4073a8:	f010 0f07 	tst.w	r0, #7
  4073ac:	d008      	beq.n	4073c0 <memchr+0x20>
  4073ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4073b2:	3a01      	subs	r2, #1
  4073b4:	428b      	cmp	r3, r1
  4073b6:	d02d      	beq.n	407414 <memchr+0x74>
  4073b8:	f010 0f07 	tst.w	r0, #7
  4073bc:	b342      	cbz	r2, 407410 <memchr+0x70>
  4073be:	d1f6      	bne.n	4073ae <memchr+0xe>
  4073c0:	b4f0      	push	{r4, r5, r6, r7}
  4073c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4073c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4073ca:	f022 0407 	bic.w	r4, r2, #7
  4073ce:	f07f 0700 	mvns.w	r7, #0
  4073d2:	2300      	movs	r3, #0
  4073d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4073d8:	3c08      	subs	r4, #8
  4073da:	ea85 0501 	eor.w	r5, r5, r1
  4073de:	ea86 0601 	eor.w	r6, r6, r1
  4073e2:	fa85 f547 	uadd8	r5, r5, r7
  4073e6:	faa3 f587 	sel	r5, r3, r7
  4073ea:	fa86 f647 	uadd8	r6, r6, r7
  4073ee:	faa5 f687 	sel	r6, r5, r7
  4073f2:	b98e      	cbnz	r6, 407418 <memchr+0x78>
  4073f4:	d1ee      	bne.n	4073d4 <memchr+0x34>
  4073f6:	bcf0      	pop	{r4, r5, r6, r7}
  4073f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4073fc:	f002 0207 	and.w	r2, r2, #7
  407400:	b132      	cbz	r2, 407410 <memchr+0x70>
  407402:	f810 3b01 	ldrb.w	r3, [r0], #1
  407406:	3a01      	subs	r2, #1
  407408:	ea83 0301 	eor.w	r3, r3, r1
  40740c:	b113      	cbz	r3, 407414 <memchr+0x74>
  40740e:	d1f8      	bne.n	407402 <memchr+0x62>
  407410:	2000      	movs	r0, #0
  407412:	4770      	bx	lr
  407414:	3801      	subs	r0, #1
  407416:	4770      	bx	lr
  407418:	2d00      	cmp	r5, #0
  40741a:	bf06      	itte	eq
  40741c:	4635      	moveq	r5, r6
  40741e:	3803      	subeq	r0, #3
  407420:	3807      	subne	r0, #7
  407422:	f015 0f01 	tst.w	r5, #1
  407426:	d107      	bne.n	407438 <memchr+0x98>
  407428:	3001      	adds	r0, #1
  40742a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40742e:	bf02      	ittt	eq
  407430:	3001      	addeq	r0, #1
  407432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407436:	3001      	addeq	r0, #1
  407438:	bcf0      	pop	{r4, r5, r6, r7}
  40743a:	3801      	subs	r0, #1
  40743c:	4770      	bx	lr
  40743e:	bf00      	nop

00407440 <memcmp>:
  407440:	2a03      	cmp	r2, #3
  407442:	b470      	push	{r4, r5, r6}
  407444:	d922      	bls.n	40748c <memcmp+0x4c>
  407446:	ea40 0301 	orr.w	r3, r0, r1
  40744a:	079b      	lsls	r3, r3, #30
  40744c:	d011      	beq.n	407472 <memcmp+0x32>
  40744e:	7803      	ldrb	r3, [r0, #0]
  407450:	780c      	ldrb	r4, [r1, #0]
  407452:	42a3      	cmp	r3, r4
  407454:	d11d      	bne.n	407492 <memcmp+0x52>
  407456:	440a      	add	r2, r1
  407458:	3101      	adds	r1, #1
  40745a:	e005      	b.n	407468 <memcmp+0x28>
  40745c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407460:	f811 4b01 	ldrb.w	r4, [r1], #1
  407464:	42a3      	cmp	r3, r4
  407466:	d114      	bne.n	407492 <memcmp+0x52>
  407468:	4291      	cmp	r1, r2
  40746a:	d1f7      	bne.n	40745c <memcmp+0x1c>
  40746c:	2000      	movs	r0, #0
  40746e:	bc70      	pop	{r4, r5, r6}
  407470:	4770      	bx	lr
  407472:	680d      	ldr	r5, [r1, #0]
  407474:	6806      	ldr	r6, [r0, #0]
  407476:	42ae      	cmp	r6, r5
  407478:	460c      	mov	r4, r1
  40747a:	4603      	mov	r3, r0
  40747c:	f101 0104 	add.w	r1, r1, #4
  407480:	f100 0004 	add.w	r0, r0, #4
  407484:	d108      	bne.n	407498 <memcmp+0x58>
  407486:	3a04      	subs	r2, #4
  407488:	2a03      	cmp	r2, #3
  40748a:	d8f2      	bhi.n	407472 <memcmp+0x32>
  40748c:	2a00      	cmp	r2, #0
  40748e:	d1de      	bne.n	40744e <memcmp+0xe>
  407490:	e7ec      	b.n	40746c <memcmp+0x2c>
  407492:	1b18      	subs	r0, r3, r4
  407494:	bc70      	pop	{r4, r5, r6}
  407496:	4770      	bx	lr
  407498:	4621      	mov	r1, r4
  40749a:	4618      	mov	r0, r3
  40749c:	e7d7      	b.n	40744e <memcmp+0xe>
  40749e:	bf00      	nop

004074a0 <memcpy>:
  4074a0:	4684      	mov	ip, r0
  4074a2:	ea41 0300 	orr.w	r3, r1, r0
  4074a6:	f013 0303 	ands.w	r3, r3, #3
  4074aa:	d16d      	bne.n	407588 <memcpy+0xe8>
  4074ac:	3a40      	subs	r2, #64	; 0x40
  4074ae:	d341      	bcc.n	407534 <memcpy+0x94>
  4074b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074b4:	f840 3b04 	str.w	r3, [r0], #4
  4074b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074bc:	f840 3b04 	str.w	r3, [r0], #4
  4074c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c4:	f840 3b04 	str.w	r3, [r0], #4
  4074c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074cc:	f840 3b04 	str.w	r3, [r0], #4
  4074d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d4:	f840 3b04 	str.w	r3, [r0], #4
  4074d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074dc:	f840 3b04 	str.w	r3, [r0], #4
  4074e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e4:	f840 3b04 	str.w	r3, [r0], #4
  4074e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ec:	f840 3b04 	str.w	r3, [r0], #4
  4074f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f4:	f840 3b04 	str.w	r3, [r0], #4
  4074f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074fc:	f840 3b04 	str.w	r3, [r0], #4
  407500:	f851 3b04 	ldr.w	r3, [r1], #4
  407504:	f840 3b04 	str.w	r3, [r0], #4
  407508:	f851 3b04 	ldr.w	r3, [r1], #4
  40750c:	f840 3b04 	str.w	r3, [r0], #4
  407510:	f851 3b04 	ldr.w	r3, [r1], #4
  407514:	f840 3b04 	str.w	r3, [r0], #4
  407518:	f851 3b04 	ldr.w	r3, [r1], #4
  40751c:	f840 3b04 	str.w	r3, [r0], #4
  407520:	f851 3b04 	ldr.w	r3, [r1], #4
  407524:	f840 3b04 	str.w	r3, [r0], #4
  407528:	f851 3b04 	ldr.w	r3, [r1], #4
  40752c:	f840 3b04 	str.w	r3, [r0], #4
  407530:	3a40      	subs	r2, #64	; 0x40
  407532:	d2bd      	bcs.n	4074b0 <memcpy+0x10>
  407534:	3230      	adds	r2, #48	; 0x30
  407536:	d311      	bcc.n	40755c <memcpy+0xbc>
  407538:	f851 3b04 	ldr.w	r3, [r1], #4
  40753c:	f840 3b04 	str.w	r3, [r0], #4
  407540:	f851 3b04 	ldr.w	r3, [r1], #4
  407544:	f840 3b04 	str.w	r3, [r0], #4
  407548:	f851 3b04 	ldr.w	r3, [r1], #4
  40754c:	f840 3b04 	str.w	r3, [r0], #4
  407550:	f851 3b04 	ldr.w	r3, [r1], #4
  407554:	f840 3b04 	str.w	r3, [r0], #4
  407558:	3a10      	subs	r2, #16
  40755a:	d2ed      	bcs.n	407538 <memcpy+0x98>
  40755c:	320c      	adds	r2, #12
  40755e:	d305      	bcc.n	40756c <memcpy+0xcc>
  407560:	f851 3b04 	ldr.w	r3, [r1], #4
  407564:	f840 3b04 	str.w	r3, [r0], #4
  407568:	3a04      	subs	r2, #4
  40756a:	d2f9      	bcs.n	407560 <memcpy+0xc0>
  40756c:	3204      	adds	r2, #4
  40756e:	d008      	beq.n	407582 <memcpy+0xe2>
  407570:	07d2      	lsls	r2, r2, #31
  407572:	bf1c      	itt	ne
  407574:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407578:	f800 3b01 	strbne.w	r3, [r0], #1
  40757c:	d301      	bcc.n	407582 <memcpy+0xe2>
  40757e:	880b      	ldrh	r3, [r1, #0]
  407580:	8003      	strh	r3, [r0, #0]
  407582:	4660      	mov	r0, ip
  407584:	4770      	bx	lr
  407586:	bf00      	nop
  407588:	2a08      	cmp	r2, #8
  40758a:	d313      	bcc.n	4075b4 <memcpy+0x114>
  40758c:	078b      	lsls	r3, r1, #30
  40758e:	d08d      	beq.n	4074ac <memcpy+0xc>
  407590:	f010 0303 	ands.w	r3, r0, #3
  407594:	d08a      	beq.n	4074ac <memcpy+0xc>
  407596:	f1c3 0304 	rsb	r3, r3, #4
  40759a:	1ad2      	subs	r2, r2, r3
  40759c:	07db      	lsls	r3, r3, #31
  40759e:	bf1c      	itt	ne
  4075a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4075a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4075a8:	d380      	bcc.n	4074ac <memcpy+0xc>
  4075aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4075ae:	f820 3b02 	strh.w	r3, [r0], #2
  4075b2:	e77b      	b.n	4074ac <memcpy+0xc>
  4075b4:	3a04      	subs	r2, #4
  4075b6:	d3d9      	bcc.n	40756c <memcpy+0xcc>
  4075b8:	3a01      	subs	r2, #1
  4075ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4075be:	f800 3b01 	strb.w	r3, [r0], #1
  4075c2:	d2f9      	bcs.n	4075b8 <memcpy+0x118>
  4075c4:	780b      	ldrb	r3, [r1, #0]
  4075c6:	7003      	strb	r3, [r0, #0]
  4075c8:	784b      	ldrb	r3, [r1, #1]
  4075ca:	7043      	strb	r3, [r0, #1]
  4075cc:	788b      	ldrb	r3, [r1, #2]
  4075ce:	7083      	strb	r3, [r0, #2]
  4075d0:	4660      	mov	r0, ip
  4075d2:	4770      	bx	lr

004075d4 <memmove>:
  4075d4:	4288      	cmp	r0, r1
  4075d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075d8:	d90d      	bls.n	4075f6 <memmove+0x22>
  4075da:	188b      	adds	r3, r1, r2
  4075dc:	4298      	cmp	r0, r3
  4075de:	d20a      	bcs.n	4075f6 <memmove+0x22>
  4075e0:	1884      	adds	r4, r0, r2
  4075e2:	2a00      	cmp	r2, #0
  4075e4:	d051      	beq.n	40768a <memmove+0xb6>
  4075e6:	4622      	mov	r2, r4
  4075e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4075ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4075f0:	4299      	cmp	r1, r3
  4075f2:	d1f9      	bne.n	4075e8 <memmove+0x14>
  4075f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075f6:	2a0f      	cmp	r2, #15
  4075f8:	d948      	bls.n	40768c <memmove+0xb8>
  4075fa:	ea41 0300 	orr.w	r3, r1, r0
  4075fe:	079b      	lsls	r3, r3, #30
  407600:	d146      	bne.n	407690 <memmove+0xbc>
  407602:	f100 0410 	add.w	r4, r0, #16
  407606:	f101 0310 	add.w	r3, r1, #16
  40760a:	4615      	mov	r5, r2
  40760c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407610:	f844 6c10 	str.w	r6, [r4, #-16]
  407614:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407618:	f844 6c0c 	str.w	r6, [r4, #-12]
  40761c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407620:	f844 6c08 	str.w	r6, [r4, #-8]
  407624:	3d10      	subs	r5, #16
  407626:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40762a:	f844 6c04 	str.w	r6, [r4, #-4]
  40762e:	2d0f      	cmp	r5, #15
  407630:	f103 0310 	add.w	r3, r3, #16
  407634:	f104 0410 	add.w	r4, r4, #16
  407638:	d8e8      	bhi.n	40760c <memmove+0x38>
  40763a:	f1a2 0310 	sub.w	r3, r2, #16
  40763e:	f023 030f 	bic.w	r3, r3, #15
  407642:	f002 0e0f 	and.w	lr, r2, #15
  407646:	3310      	adds	r3, #16
  407648:	f1be 0f03 	cmp.w	lr, #3
  40764c:	4419      	add	r1, r3
  40764e:	4403      	add	r3, r0
  407650:	d921      	bls.n	407696 <memmove+0xc2>
  407652:	1f1e      	subs	r6, r3, #4
  407654:	460d      	mov	r5, r1
  407656:	4674      	mov	r4, lr
  407658:	3c04      	subs	r4, #4
  40765a:	f855 7b04 	ldr.w	r7, [r5], #4
  40765e:	f846 7f04 	str.w	r7, [r6, #4]!
  407662:	2c03      	cmp	r4, #3
  407664:	d8f8      	bhi.n	407658 <memmove+0x84>
  407666:	f1ae 0404 	sub.w	r4, lr, #4
  40766a:	f024 0403 	bic.w	r4, r4, #3
  40766e:	3404      	adds	r4, #4
  407670:	4421      	add	r1, r4
  407672:	4423      	add	r3, r4
  407674:	f002 0203 	and.w	r2, r2, #3
  407678:	b162      	cbz	r2, 407694 <memmove+0xc0>
  40767a:	3b01      	subs	r3, #1
  40767c:	440a      	add	r2, r1
  40767e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407682:	f803 4f01 	strb.w	r4, [r3, #1]!
  407686:	428a      	cmp	r2, r1
  407688:	d1f9      	bne.n	40767e <memmove+0xaa>
  40768a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40768c:	4603      	mov	r3, r0
  40768e:	e7f3      	b.n	407678 <memmove+0xa4>
  407690:	4603      	mov	r3, r0
  407692:	e7f2      	b.n	40767a <memmove+0xa6>
  407694:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407696:	4672      	mov	r2, lr
  407698:	e7ee      	b.n	407678 <memmove+0xa4>
  40769a:	bf00      	nop

0040769c <__malloc_lock>:
  40769c:	4770      	bx	lr
  40769e:	bf00      	nop

004076a0 <__malloc_unlock>:
  4076a0:	4770      	bx	lr
  4076a2:	bf00      	nop

004076a4 <_Balloc>:
  4076a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4076a6:	b570      	push	{r4, r5, r6, lr}
  4076a8:	4605      	mov	r5, r0
  4076aa:	460c      	mov	r4, r1
  4076ac:	b14b      	cbz	r3, 4076c2 <_Balloc+0x1e>
  4076ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4076b2:	b180      	cbz	r0, 4076d6 <_Balloc+0x32>
  4076b4:	6802      	ldr	r2, [r0, #0]
  4076b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4076ba:	2300      	movs	r3, #0
  4076bc:	6103      	str	r3, [r0, #16]
  4076be:	60c3      	str	r3, [r0, #12]
  4076c0:	bd70      	pop	{r4, r5, r6, pc}
  4076c2:	2221      	movs	r2, #33	; 0x21
  4076c4:	2104      	movs	r1, #4
  4076c6:	f000 fdf1 	bl	4082ac <_calloc_r>
  4076ca:	64e8      	str	r0, [r5, #76]	; 0x4c
  4076cc:	4603      	mov	r3, r0
  4076ce:	2800      	cmp	r0, #0
  4076d0:	d1ed      	bne.n	4076ae <_Balloc+0xa>
  4076d2:	2000      	movs	r0, #0
  4076d4:	bd70      	pop	{r4, r5, r6, pc}
  4076d6:	2101      	movs	r1, #1
  4076d8:	fa01 f604 	lsl.w	r6, r1, r4
  4076dc:	1d72      	adds	r2, r6, #5
  4076de:	4628      	mov	r0, r5
  4076e0:	0092      	lsls	r2, r2, #2
  4076e2:	f000 fde3 	bl	4082ac <_calloc_r>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	d0f3      	beq.n	4076d2 <_Balloc+0x2e>
  4076ea:	6044      	str	r4, [r0, #4]
  4076ec:	6086      	str	r6, [r0, #8]
  4076ee:	e7e4      	b.n	4076ba <_Balloc+0x16>

004076f0 <_Bfree>:
  4076f0:	b131      	cbz	r1, 407700 <_Bfree+0x10>
  4076f2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4076f4:	684a      	ldr	r2, [r1, #4]
  4076f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4076fa:	6008      	str	r0, [r1, #0]
  4076fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407700:	4770      	bx	lr
  407702:	bf00      	nop

00407704 <__multadd>:
  407704:	b5f0      	push	{r4, r5, r6, r7, lr}
  407706:	690c      	ldr	r4, [r1, #16]
  407708:	b083      	sub	sp, #12
  40770a:	460d      	mov	r5, r1
  40770c:	4606      	mov	r6, r0
  40770e:	f101 0e14 	add.w	lr, r1, #20
  407712:	2700      	movs	r7, #0
  407714:	f8de 0000 	ldr.w	r0, [lr]
  407718:	b281      	uxth	r1, r0
  40771a:	fb02 3301 	mla	r3, r2, r1, r3
  40771e:	0c01      	lsrs	r1, r0, #16
  407720:	0c18      	lsrs	r0, r3, #16
  407722:	fb02 0101 	mla	r1, r2, r1, r0
  407726:	b29b      	uxth	r3, r3
  407728:	3701      	adds	r7, #1
  40772a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40772e:	42bc      	cmp	r4, r7
  407730:	f84e 3b04 	str.w	r3, [lr], #4
  407734:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407738:	dcec      	bgt.n	407714 <__multadd+0x10>
  40773a:	b13b      	cbz	r3, 40774c <__multadd+0x48>
  40773c:	68aa      	ldr	r2, [r5, #8]
  40773e:	4294      	cmp	r4, r2
  407740:	da07      	bge.n	407752 <__multadd+0x4e>
  407742:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407746:	3401      	adds	r4, #1
  407748:	6153      	str	r3, [r2, #20]
  40774a:	612c      	str	r4, [r5, #16]
  40774c:	4628      	mov	r0, r5
  40774e:	b003      	add	sp, #12
  407750:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407752:	6869      	ldr	r1, [r5, #4]
  407754:	9301      	str	r3, [sp, #4]
  407756:	3101      	adds	r1, #1
  407758:	4630      	mov	r0, r6
  40775a:	f7ff ffa3 	bl	4076a4 <_Balloc>
  40775e:	692a      	ldr	r2, [r5, #16]
  407760:	3202      	adds	r2, #2
  407762:	f105 010c 	add.w	r1, r5, #12
  407766:	4607      	mov	r7, r0
  407768:	0092      	lsls	r2, r2, #2
  40776a:	300c      	adds	r0, #12
  40776c:	f7ff fe98 	bl	4074a0 <memcpy>
  407770:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407772:	6869      	ldr	r1, [r5, #4]
  407774:	9b01      	ldr	r3, [sp, #4]
  407776:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40777a:	6028      	str	r0, [r5, #0]
  40777c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407780:	463d      	mov	r5, r7
  407782:	e7de      	b.n	407742 <__multadd+0x3e>

00407784 <__hi0bits>:
  407784:	0c02      	lsrs	r2, r0, #16
  407786:	0412      	lsls	r2, r2, #16
  407788:	4603      	mov	r3, r0
  40778a:	b9b2      	cbnz	r2, 4077ba <__hi0bits+0x36>
  40778c:	0403      	lsls	r3, r0, #16
  40778e:	2010      	movs	r0, #16
  407790:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407794:	bf04      	itt	eq
  407796:	021b      	lsleq	r3, r3, #8
  407798:	3008      	addeq	r0, #8
  40779a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40779e:	bf04      	itt	eq
  4077a0:	011b      	lsleq	r3, r3, #4
  4077a2:	3004      	addeq	r0, #4
  4077a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4077a8:	bf04      	itt	eq
  4077aa:	009b      	lsleq	r3, r3, #2
  4077ac:	3002      	addeq	r0, #2
  4077ae:	2b00      	cmp	r3, #0
  4077b0:	db02      	blt.n	4077b8 <__hi0bits+0x34>
  4077b2:	005b      	lsls	r3, r3, #1
  4077b4:	d403      	bmi.n	4077be <__hi0bits+0x3a>
  4077b6:	2020      	movs	r0, #32
  4077b8:	4770      	bx	lr
  4077ba:	2000      	movs	r0, #0
  4077bc:	e7e8      	b.n	407790 <__hi0bits+0xc>
  4077be:	3001      	adds	r0, #1
  4077c0:	4770      	bx	lr
  4077c2:	bf00      	nop

004077c4 <__lo0bits>:
  4077c4:	6803      	ldr	r3, [r0, #0]
  4077c6:	f013 0207 	ands.w	r2, r3, #7
  4077ca:	4601      	mov	r1, r0
  4077cc:	d007      	beq.n	4077de <__lo0bits+0x1a>
  4077ce:	07da      	lsls	r2, r3, #31
  4077d0:	d421      	bmi.n	407816 <__lo0bits+0x52>
  4077d2:	0798      	lsls	r0, r3, #30
  4077d4:	d421      	bmi.n	40781a <__lo0bits+0x56>
  4077d6:	089b      	lsrs	r3, r3, #2
  4077d8:	600b      	str	r3, [r1, #0]
  4077da:	2002      	movs	r0, #2
  4077dc:	4770      	bx	lr
  4077de:	b298      	uxth	r0, r3
  4077e0:	b198      	cbz	r0, 40780a <__lo0bits+0x46>
  4077e2:	4610      	mov	r0, r2
  4077e4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4077e8:	bf04      	itt	eq
  4077ea:	0a1b      	lsreq	r3, r3, #8
  4077ec:	3008      	addeq	r0, #8
  4077ee:	071a      	lsls	r2, r3, #28
  4077f0:	bf04      	itt	eq
  4077f2:	091b      	lsreq	r3, r3, #4
  4077f4:	3004      	addeq	r0, #4
  4077f6:	079a      	lsls	r2, r3, #30
  4077f8:	bf04      	itt	eq
  4077fa:	089b      	lsreq	r3, r3, #2
  4077fc:	3002      	addeq	r0, #2
  4077fe:	07da      	lsls	r2, r3, #31
  407800:	d407      	bmi.n	407812 <__lo0bits+0x4e>
  407802:	085b      	lsrs	r3, r3, #1
  407804:	d104      	bne.n	407810 <__lo0bits+0x4c>
  407806:	2020      	movs	r0, #32
  407808:	4770      	bx	lr
  40780a:	0c1b      	lsrs	r3, r3, #16
  40780c:	2010      	movs	r0, #16
  40780e:	e7e9      	b.n	4077e4 <__lo0bits+0x20>
  407810:	3001      	adds	r0, #1
  407812:	600b      	str	r3, [r1, #0]
  407814:	4770      	bx	lr
  407816:	2000      	movs	r0, #0
  407818:	4770      	bx	lr
  40781a:	085b      	lsrs	r3, r3, #1
  40781c:	600b      	str	r3, [r1, #0]
  40781e:	2001      	movs	r0, #1
  407820:	4770      	bx	lr
  407822:	bf00      	nop

00407824 <__i2b>:
  407824:	b510      	push	{r4, lr}
  407826:	460c      	mov	r4, r1
  407828:	2101      	movs	r1, #1
  40782a:	f7ff ff3b 	bl	4076a4 <_Balloc>
  40782e:	2201      	movs	r2, #1
  407830:	6144      	str	r4, [r0, #20]
  407832:	6102      	str	r2, [r0, #16]
  407834:	bd10      	pop	{r4, pc}
  407836:	bf00      	nop

00407838 <__multiply>:
  407838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40783c:	690c      	ldr	r4, [r1, #16]
  40783e:	6915      	ldr	r5, [r2, #16]
  407840:	42ac      	cmp	r4, r5
  407842:	b083      	sub	sp, #12
  407844:	468b      	mov	fp, r1
  407846:	4616      	mov	r6, r2
  407848:	da04      	bge.n	407854 <__multiply+0x1c>
  40784a:	4622      	mov	r2, r4
  40784c:	46b3      	mov	fp, r6
  40784e:	462c      	mov	r4, r5
  407850:	460e      	mov	r6, r1
  407852:	4615      	mov	r5, r2
  407854:	f8db 3008 	ldr.w	r3, [fp, #8]
  407858:	f8db 1004 	ldr.w	r1, [fp, #4]
  40785c:	eb04 0805 	add.w	r8, r4, r5
  407860:	4598      	cmp	r8, r3
  407862:	bfc8      	it	gt
  407864:	3101      	addgt	r1, #1
  407866:	f7ff ff1d 	bl	4076a4 <_Balloc>
  40786a:	f100 0914 	add.w	r9, r0, #20
  40786e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407872:	45d1      	cmp	r9, sl
  407874:	9000      	str	r0, [sp, #0]
  407876:	d205      	bcs.n	407884 <__multiply+0x4c>
  407878:	464b      	mov	r3, r9
  40787a:	2100      	movs	r1, #0
  40787c:	f843 1b04 	str.w	r1, [r3], #4
  407880:	459a      	cmp	sl, r3
  407882:	d8fb      	bhi.n	40787c <__multiply+0x44>
  407884:	f106 0c14 	add.w	ip, r6, #20
  407888:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40788c:	f10b 0b14 	add.w	fp, fp, #20
  407890:	459c      	cmp	ip, r3
  407892:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407896:	d24c      	bcs.n	407932 <__multiply+0xfa>
  407898:	f8cd a004 	str.w	sl, [sp, #4]
  40789c:	469a      	mov	sl, r3
  40789e:	f8dc 5000 	ldr.w	r5, [ip]
  4078a2:	b2af      	uxth	r7, r5
  4078a4:	b1ef      	cbz	r7, 4078e2 <__multiply+0xaa>
  4078a6:	2100      	movs	r1, #0
  4078a8:	464d      	mov	r5, r9
  4078aa:	465e      	mov	r6, fp
  4078ac:	460c      	mov	r4, r1
  4078ae:	f856 2b04 	ldr.w	r2, [r6], #4
  4078b2:	6828      	ldr	r0, [r5, #0]
  4078b4:	b293      	uxth	r3, r2
  4078b6:	b281      	uxth	r1, r0
  4078b8:	fb07 1303 	mla	r3, r7, r3, r1
  4078bc:	0c12      	lsrs	r2, r2, #16
  4078be:	0c01      	lsrs	r1, r0, #16
  4078c0:	4423      	add	r3, r4
  4078c2:	fb07 1102 	mla	r1, r7, r2, r1
  4078c6:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4078ca:	b29b      	uxth	r3, r3
  4078cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4078d0:	45b6      	cmp	lr, r6
  4078d2:	f845 3b04 	str.w	r3, [r5], #4
  4078d6:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4078da:	d8e8      	bhi.n	4078ae <__multiply+0x76>
  4078dc:	602c      	str	r4, [r5, #0]
  4078de:	f8dc 5000 	ldr.w	r5, [ip]
  4078e2:	0c2d      	lsrs	r5, r5, #16
  4078e4:	d01d      	beq.n	407922 <__multiply+0xea>
  4078e6:	f8d9 3000 	ldr.w	r3, [r9]
  4078ea:	4648      	mov	r0, r9
  4078ec:	461c      	mov	r4, r3
  4078ee:	4659      	mov	r1, fp
  4078f0:	2200      	movs	r2, #0
  4078f2:	880e      	ldrh	r6, [r1, #0]
  4078f4:	0c24      	lsrs	r4, r4, #16
  4078f6:	fb05 4406 	mla	r4, r5, r6, r4
  4078fa:	4422      	add	r2, r4
  4078fc:	b29b      	uxth	r3, r3
  4078fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407902:	f840 3b04 	str.w	r3, [r0], #4
  407906:	f851 3b04 	ldr.w	r3, [r1], #4
  40790a:	6804      	ldr	r4, [r0, #0]
  40790c:	0c1b      	lsrs	r3, r3, #16
  40790e:	b2a6      	uxth	r6, r4
  407910:	fb05 6303 	mla	r3, r5, r3, r6
  407914:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407918:	458e      	cmp	lr, r1
  40791a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40791e:	d8e8      	bhi.n	4078f2 <__multiply+0xba>
  407920:	6003      	str	r3, [r0, #0]
  407922:	f10c 0c04 	add.w	ip, ip, #4
  407926:	45e2      	cmp	sl, ip
  407928:	f109 0904 	add.w	r9, r9, #4
  40792c:	d8b7      	bhi.n	40789e <__multiply+0x66>
  40792e:	f8dd a004 	ldr.w	sl, [sp, #4]
  407932:	f1b8 0f00 	cmp.w	r8, #0
  407936:	dd0b      	ble.n	407950 <__multiply+0x118>
  407938:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40793c:	f1aa 0a04 	sub.w	sl, sl, #4
  407940:	b11b      	cbz	r3, 40794a <__multiply+0x112>
  407942:	e005      	b.n	407950 <__multiply+0x118>
  407944:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407948:	b913      	cbnz	r3, 407950 <__multiply+0x118>
  40794a:	f1b8 0801 	subs.w	r8, r8, #1
  40794e:	d1f9      	bne.n	407944 <__multiply+0x10c>
  407950:	9800      	ldr	r0, [sp, #0]
  407952:	f8c0 8010 	str.w	r8, [r0, #16]
  407956:	b003      	add	sp, #12
  407958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040795c <__pow5mult>:
  40795c:	f012 0303 	ands.w	r3, r2, #3
  407960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407964:	4614      	mov	r4, r2
  407966:	4607      	mov	r7, r0
  407968:	d12e      	bne.n	4079c8 <__pow5mult+0x6c>
  40796a:	460d      	mov	r5, r1
  40796c:	10a4      	asrs	r4, r4, #2
  40796e:	d01c      	beq.n	4079aa <__pow5mult+0x4e>
  407970:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407972:	b396      	cbz	r6, 4079da <__pow5mult+0x7e>
  407974:	07e3      	lsls	r3, r4, #31
  407976:	f04f 0800 	mov.w	r8, #0
  40797a:	d406      	bmi.n	40798a <__pow5mult+0x2e>
  40797c:	1064      	asrs	r4, r4, #1
  40797e:	d014      	beq.n	4079aa <__pow5mult+0x4e>
  407980:	6830      	ldr	r0, [r6, #0]
  407982:	b1a8      	cbz	r0, 4079b0 <__pow5mult+0x54>
  407984:	4606      	mov	r6, r0
  407986:	07e3      	lsls	r3, r4, #31
  407988:	d5f8      	bpl.n	40797c <__pow5mult+0x20>
  40798a:	4632      	mov	r2, r6
  40798c:	4629      	mov	r1, r5
  40798e:	4638      	mov	r0, r7
  407990:	f7ff ff52 	bl	407838 <__multiply>
  407994:	b1b5      	cbz	r5, 4079c4 <__pow5mult+0x68>
  407996:	686a      	ldr	r2, [r5, #4]
  407998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40799a:	1064      	asrs	r4, r4, #1
  40799c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4079a0:	6029      	str	r1, [r5, #0]
  4079a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4079a6:	4605      	mov	r5, r0
  4079a8:	d1ea      	bne.n	407980 <__pow5mult+0x24>
  4079aa:	4628      	mov	r0, r5
  4079ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079b0:	4632      	mov	r2, r6
  4079b2:	4631      	mov	r1, r6
  4079b4:	4638      	mov	r0, r7
  4079b6:	f7ff ff3f 	bl	407838 <__multiply>
  4079ba:	6030      	str	r0, [r6, #0]
  4079bc:	f8c0 8000 	str.w	r8, [r0]
  4079c0:	4606      	mov	r6, r0
  4079c2:	e7e0      	b.n	407986 <__pow5mult+0x2a>
  4079c4:	4605      	mov	r5, r0
  4079c6:	e7d9      	b.n	40797c <__pow5mult+0x20>
  4079c8:	1e5a      	subs	r2, r3, #1
  4079ca:	4d0b      	ldr	r5, [pc, #44]	; (4079f8 <__pow5mult+0x9c>)
  4079cc:	2300      	movs	r3, #0
  4079ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4079d2:	f7ff fe97 	bl	407704 <__multadd>
  4079d6:	4605      	mov	r5, r0
  4079d8:	e7c8      	b.n	40796c <__pow5mult+0x10>
  4079da:	2101      	movs	r1, #1
  4079dc:	4638      	mov	r0, r7
  4079de:	f7ff fe61 	bl	4076a4 <_Balloc>
  4079e2:	f240 2171 	movw	r1, #625	; 0x271
  4079e6:	2201      	movs	r2, #1
  4079e8:	2300      	movs	r3, #0
  4079ea:	6141      	str	r1, [r0, #20]
  4079ec:	6102      	str	r2, [r0, #16]
  4079ee:	4606      	mov	r6, r0
  4079f0:	64b8      	str	r0, [r7, #72]	; 0x48
  4079f2:	6003      	str	r3, [r0, #0]
  4079f4:	e7be      	b.n	407974 <__pow5mult+0x18>
  4079f6:	bf00      	nop
  4079f8:	00409b28 	.word	0x00409b28

004079fc <__lshift>:
  4079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407a00:	4691      	mov	r9, r2
  407a02:	690a      	ldr	r2, [r1, #16]
  407a04:	688b      	ldr	r3, [r1, #8]
  407a06:	ea4f 1469 	mov.w	r4, r9, asr #5
  407a0a:	eb04 0802 	add.w	r8, r4, r2
  407a0e:	f108 0501 	add.w	r5, r8, #1
  407a12:	429d      	cmp	r5, r3
  407a14:	460e      	mov	r6, r1
  407a16:	4607      	mov	r7, r0
  407a18:	6849      	ldr	r1, [r1, #4]
  407a1a:	dd04      	ble.n	407a26 <__lshift+0x2a>
  407a1c:	005b      	lsls	r3, r3, #1
  407a1e:	429d      	cmp	r5, r3
  407a20:	f101 0101 	add.w	r1, r1, #1
  407a24:	dcfa      	bgt.n	407a1c <__lshift+0x20>
  407a26:	4638      	mov	r0, r7
  407a28:	f7ff fe3c 	bl	4076a4 <_Balloc>
  407a2c:	2c00      	cmp	r4, #0
  407a2e:	f100 0314 	add.w	r3, r0, #20
  407a32:	dd06      	ble.n	407a42 <__lshift+0x46>
  407a34:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407a38:	2100      	movs	r1, #0
  407a3a:	f843 1b04 	str.w	r1, [r3], #4
  407a3e:	429a      	cmp	r2, r3
  407a40:	d1fb      	bne.n	407a3a <__lshift+0x3e>
  407a42:	6934      	ldr	r4, [r6, #16]
  407a44:	f106 0114 	add.w	r1, r6, #20
  407a48:	f019 091f 	ands.w	r9, r9, #31
  407a4c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407a50:	d01d      	beq.n	407a8e <__lshift+0x92>
  407a52:	f1c9 0c20 	rsb	ip, r9, #32
  407a56:	2200      	movs	r2, #0
  407a58:	680c      	ldr	r4, [r1, #0]
  407a5a:	fa04 f409 	lsl.w	r4, r4, r9
  407a5e:	4314      	orrs	r4, r2
  407a60:	f843 4b04 	str.w	r4, [r3], #4
  407a64:	f851 2b04 	ldr.w	r2, [r1], #4
  407a68:	458e      	cmp	lr, r1
  407a6a:	fa22 f20c 	lsr.w	r2, r2, ip
  407a6e:	d8f3      	bhi.n	407a58 <__lshift+0x5c>
  407a70:	601a      	str	r2, [r3, #0]
  407a72:	b10a      	cbz	r2, 407a78 <__lshift+0x7c>
  407a74:	f108 0502 	add.w	r5, r8, #2
  407a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407a7a:	6872      	ldr	r2, [r6, #4]
  407a7c:	3d01      	subs	r5, #1
  407a7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407a82:	6105      	str	r5, [r0, #16]
  407a84:	6031      	str	r1, [r6, #0]
  407a86:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a8e:	3b04      	subs	r3, #4
  407a90:	f851 2b04 	ldr.w	r2, [r1], #4
  407a94:	f843 2f04 	str.w	r2, [r3, #4]!
  407a98:	458e      	cmp	lr, r1
  407a9a:	d8f9      	bhi.n	407a90 <__lshift+0x94>
  407a9c:	e7ec      	b.n	407a78 <__lshift+0x7c>
  407a9e:	bf00      	nop

00407aa0 <__mcmp>:
  407aa0:	b430      	push	{r4, r5}
  407aa2:	690b      	ldr	r3, [r1, #16]
  407aa4:	4605      	mov	r5, r0
  407aa6:	6900      	ldr	r0, [r0, #16]
  407aa8:	1ac0      	subs	r0, r0, r3
  407aaa:	d10f      	bne.n	407acc <__mcmp+0x2c>
  407aac:	009b      	lsls	r3, r3, #2
  407aae:	3514      	adds	r5, #20
  407ab0:	3114      	adds	r1, #20
  407ab2:	4419      	add	r1, r3
  407ab4:	442b      	add	r3, r5
  407ab6:	e001      	b.n	407abc <__mcmp+0x1c>
  407ab8:	429d      	cmp	r5, r3
  407aba:	d207      	bcs.n	407acc <__mcmp+0x2c>
  407abc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407ac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407ac4:	4294      	cmp	r4, r2
  407ac6:	d0f7      	beq.n	407ab8 <__mcmp+0x18>
  407ac8:	d302      	bcc.n	407ad0 <__mcmp+0x30>
  407aca:	2001      	movs	r0, #1
  407acc:	bc30      	pop	{r4, r5}
  407ace:	4770      	bx	lr
  407ad0:	f04f 30ff 	mov.w	r0, #4294967295
  407ad4:	e7fa      	b.n	407acc <__mcmp+0x2c>
  407ad6:	bf00      	nop

00407ad8 <__mdiff>:
  407ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407adc:	690f      	ldr	r7, [r1, #16]
  407ade:	460e      	mov	r6, r1
  407ae0:	6911      	ldr	r1, [r2, #16]
  407ae2:	1a7f      	subs	r7, r7, r1
  407ae4:	2f00      	cmp	r7, #0
  407ae6:	4690      	mov	r8, r2
  407ae8:	d117      	bne.n	407b1a <__mdiff+0x42>
  407aea:	0089      	lsls	r1, r1, #2
  407aec:	f106 0514 	add.w	r5, r6, #20
  407af0:	f102 0e14 	add.w	lr, r2, #20
  407af4:	186b      	adds	r3, r5, r1
  407af6:	4471      	add	r1, lr
  407af8:	e001      	b.n	407afe <__mdiff+0x26>
  407afa:	429d      	cmp	r5, r3
  407afc:	d25c      	bcs.n	407bb8 <__mdiff+0xe0>
  407afe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407b02:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407b06:	42a2      	cmp	r2, r4
  407b08:	d0f7      	beq.n	407afa <__mdiff+0x22>
  407b0a:	d25e      	bcs.n	407bca <__mdiff+0xf2>
  407b0c:	4633      	mov	r3, r6
  407b0e:	462c      	mov	r4, r5
  407b10:	4646      	mov	r6, r8
  407b12:	4675      	mov	r5, lr
  407b14:	4698      	mov	r8, r3
  407b16:	2701      	movs	r7, #1
  407b18:	e005      	b.n	407b26 <__mdiff+0x4e>
  407b1a:	db58      	blt.n	407bce <__mdiff+0xf6>
  407b1c:	f106 0514 	add.w	r5, r6, #20
  407b20:	f108 0414 	add.w	r4, r8, #20
  407b24:	2700      	movs	r7, #0
  407b26:	6871      	ldr	r1, [r6, #4]
  407b28:	f7ff fdbc 	bl	4076a4 <_Balloc>
  407b2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407b30:	6936      	ldr	r6, [r6, #16]
  407b32:	60c7      	str	r7, [r0, #12]
  407b34:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407b38:	46a6      	mov	lr, r4
  407b3a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407b3e:	f100 0414 	add.w	r4, r0, #20
  407b42:	2300      	movs	r3, #0
  407b44:	f85e 1b04 	ldr.w	r1, [lr], #4
  407b48:	f855 8b04 	ldr.w	r8, [r5], #4
  407b4c:	b28a      	uxth	r2, r1
  407b4e:	fa13 f388 	uxtah	r3, r3, r8
  407b52:	0c09      	lsrs	r1, r1, #16
  407b54:	1a9a      	subs	r2, r3, r2
  407b56:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407b5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407b5e:	b292      	uxth	r2, r2
  407b60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407b64:	45f4      	cmp	ip, lr
  407b66:	f844 2b04 	str.w	r2, [r4], #4
  407b6a:	ea4f 4323 	mov.w	r3, r3, asr #16
  407b6e:	d8e9      	bhi.n	407b44 <__mdiff+0x6c>
  407b70:	42af      	cmp	r7, r5
  407b72:	d917      	bls.n	407ba4 <__mdiff+0xcc>
  407b74:	46a4      	mov	ip, r4
  407b76:	46ae      	mov	lr, r5
  407b78:	f85e 2b04 	ldr.w	r2, [lr], #4
  407b7c:	fa13 f382 	uxtah	r3, r3, r2
  407b80:	1419      	asrs	r1, r3, #16
  407b82:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407b86:	b29b      	uxth	r3, r3
  407b88:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407b8c:	4577      	cmp	r7, lr
  407b8e:	f84c 2b04 	str.w	r2, [ip], #4
  407b92:	ea4f 4321 	mov.w	r3, r1, asr #16
  407b96:	d8ef      	bhi.n	407b78 <__mdiff+0xa0>
  407b98:	43ed      	mvns	r5, r5
  407b9a:	442f      	add	r7, r5
  407b9c:	f027 0703 	bic.w	r7, r7, #3
  407ba0:	3704      	adds	r7, #4
  407ba2:	443c      	add	r4, r7
  407ba4:	3c04      	subs	r4, #4
  407ba6:	b922      	cbnz	r2, 407bb2 <__mdiff+0xda>
  407ba8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407bac:	3e01      	subs	r6, #1
  407bae:	2b00      	cmp	r3, #0
  407bb0:	d0fa      	beq.n	407ba8 <__mdiff+0xd0>
  407bb2:	6106      	str	r6, [r0, #16]
  407bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bb8:	2100      	movs	r1, #0
  407bba:	f7ff fd73 	bl	4076a4 <_Balloc>
  407bbe:	2201      	movs	r2, #1
  407bc0:	2300      	movs	r3, #0
  407bc2:	6102      	str	r2, [r0, #16]
  407bc4:	6143      	str	r3, [r0, #20]
  407bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bca:	4674      	mov	r4, lr
  407bcc:	e7ab      	b.n	407b26 <__mdiff+0x4e>
  407bce:	4633      	mov	r3, r6
  407bd0:	f106 0414 	add.w	r4, r6, #20
  407bd4:	f102 0514 	add.w	r5, r2, #20
  407bd8:	4616      	mov	r6, r2
  407bda:	2701      	movs	r7, #1
  407bdc:	4698      	mov	r8, r3
  407bde:	e7a2      	b.n	407b26 <__mdiff+0x4e>

00407be0 <__d2b>:
  407be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407be4:	b082      	sub	sp, #8
  407be6:	2101      	movs	r1, #1
  407be8:	461c      	mov	r4, r3
  407bea:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407bee:	4615      	mov	r5, r2
  407bf0:	9e08      	ldr	r6, [sp, #32]
  407bf2:	f7ff fd57 	bl	4076a4 <_Balloc>
  407bf6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407bfa:	4680      	mov	r8, r0
  407bfc:	b10f      	cbz	r7, 407c02 <__d2b+0x22>
  407bfe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407c02:	9401      	str	r4, [sp, #4]
  407c04:	b31d      	cbz	r5, 407c4e <__d2b+0x6e>
  407c06:	a802      	add	r0, sp, #8
  407c08:	f840 5d08 	str.w	r5, [r0, #-8]!
  407c0c:	f7ff fdda 	bl	4077c4 <__lo0bits>
  407c10:	2800      	cmp	r0, #0
  407c12:	d134      	bne.n	407c7e <__d2b+0x9e>
  407c14:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407c18:	f8c8 2014 	str.w	r2, [r8, #20]
  407c1c:	2b00      	cmp	r3, #0
  407c1e:	bf0c      	ite	eq
  407c20:	2101      	moveq	r1, #1
  407c22:	2102      	movne	r1, #2
  407c24:	f8c8 3018 	str.w	r3, [r8, #24]
  407c28:	f8c8 1010 	str.w	r1, [r8, #16]
  407c2c:	b9df      	cbnz	r7, 407c66 <__d2b+0x86>
  407c2e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407c32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407c36:	6030      	str	r0, [r6, #0]
  407c38:	6918      	ldr	r0, [r3, #16]
  407c3a:	f7ff fda3 	bl	407784 <__hi0bits>
  407c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407c44:	6018      	str	r0, [r3, #0]
  407c46:	4640      	mov	r0, r8
  407c48:	b002      	add	sp, #8
  407c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c4e:	a801      	add	r0, sp, #4
  407c50:	f7ff fdb8 	bl	4077c4 <__lo0bits>
  407c54:	9b01      	ldr	r3, [sp, #4]
  407c56:	f8c8 3014 	str.w	r3, [r8, #20]
  407c5a:	2101      	movs	r1, #1
  407c5c:	3020      	adds	r0, #32
  407c5e:	f8c8 1010 	str.w	r1, [r8, #16]
  407c62:	2f00      	cmp	r7, #0
  407c64:	d0e3      	beq.n	407c2e <__d2b+0x4e>
  407c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c68:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407c6c:	4407      	add	r7, r0
  407c6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407c72:	6037      	str	r7, [r6, #0]
  407c74:	6018      	str	r0, [r3, #0]
  407c76:	4640      	mov	r0, r8
  407c78:	b002      	add	sp, #8
  407c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c7e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407c82:	f1c0 0220 	rsb	r2, r0, #32
  407c86:	fa03 f202 	lsl.w	r2, r3, r2
  407c8a:	430a      	orrs	r2, r1
  407c8c:	40c3      	lsrs	r3, r0
  407c8e:	9301      	str	r3, [sp, #4]
  407c90:	f8c8 2014 	str.w	r2, [r8, #20]
  407c94:	e7c2      	b.n	407c1c <__d2b+0x3c>
  407c96:	bf00      	nop

00407c98 <_realloc_r>:
  407c98:	2900      	cmp	r1, #0
  407c9a:	f000 8095 	beq.w	407dc8 <_realloc_r+0x130>
  407c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ca2:	460d      	mov	r5, r1
  407ca4:	4616      	mov	r6, r2
  407ca6:	b083      	sub	sp, #12
  407ca8:	4680      	mov	r8, r0
  407caa:	f106 070b 	add.w	r7, r6, #11
  407cae:	f7ff fcf5 	bl	40769c <__malloc_lock>
  407cb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407cb6:	2f16      	cmp	r7, #22
  407cb8:	f02e 0403 	bic.w	r4, lr, #3
  407cbc:	f1a5 0908 	sub.w	r9, r5, #8
  407cc0:	d83c      	bhi.n	407d3c <_realloc_r+0xa4>
  407cc2:	2210      	movs	r2, #16
  407cc4:	4617      	mov	r7, r2
  407cc6:	42be      	cmp	r6, r7
  407cc8:	d83d      	bhi.n	407d46 <_realloc_r+0xae>
  407cca:	4294      	cmp	r4, r2
  407ccc:	da43      	bge.n	407d56 <_realloc_r+0xbe>
  407cce:	4bc4      	ldr	r3, [pc, #784]	; (407fe0 <_realloc_r+0x348>)
  407cd0:	6899      	ldr	r1, [r3, #8]
  407cd2:	eb09 0004 	add.w	r0, r9, r4
  407cd6:	4288      	cmp	r0, r1
  407cd8:	f000 80b4 	beq.w	407e44 <_realloc_r+0x1ac>
  407cdc:	6843      	ldr	r3, [r0, #4]
  407cde:	f023 0101 	bic.w	r1, r3, #1
  407ce2:	4401      	add	r1, r0
  407ce4:	6849      	ldr	r1, [r1, #4]
  407ce6:	07c9      	lsls	r1, r1, #31
  407ce8:	d54c      	bpl.n	407d84 <_realloc_r+0xec>
  407cea:	f01e 0f01 	tst.w	lr, #1
  407cee:	f000 809b 	beq.w	407e28 <_realloc_r+0x190>
  407cf2:	4631      	mov	r1, r6
  407cf4:	4640      	mov	r0, r8
  407cf6:	f7ff f887 	bl	406e08 <_malloc_r>
  407cfa:	4606      	mov	r6, r0
  407cfc:	2800      	cmp	r0, #0
  407cfe:	d03a      	beq.n	407d76 <_realloc_r+0xde>
  407d00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407d04:	f023 0301 	bic.w	r3, r3, #1
  407d08:	444b      	add	r3, r9
  407d0a:	f1a0 0208 	sub.w	r2, r0, #8
  407d0e:	429a      	cmp	r2, r3
  407d10:	f000 8121 	beq.w	407f56 <_realloc_r+0x2be>
  407d14:	1f22      	subs	r2, r4, #4
  407d16:	2a24      	cmp	r2, #36	; 0x24
  407d18:	f200 8107 	bhi.w	407f2a <_realloc_r+0x292>
  407d1c:	2a13      	cmp	r2, #19
  407d1e:	f200 80db 	bhi.w	407ed8 <_realloc_r+0x240>
  407d22:	4603      	mov	r3, r0
  407d24:	462a      	mov	r2, r5
  407d26:	6811      	ldr	r1, [r2, #0]
  407d28:	6019      	str	r1, [r3, #0]
  407d2a:	6851      	ldr	r1, [r2, #4]
  407d2c:	6059      	str	r1, [r3, #4]
  407d2e:	6892      	ldr	r2, [r2, #8]
  407d30:	609a      	str	r2, [r3, #8]
  407d32:	4629      	mov	r1, r5
  407d34:	4640      	mov	r0, r8
  407d36:	f7fe ff73 	bl	406c20 <_free_r>
  407d3a:	e01c      	b.n	407d76 <_realloc_r+0xde>
  407d3c:	f027 0707 	bic.w	r7, r7, #7
  407d40:	2f00      	cmp	r7, #0
  407d42:	463a      	mov	r2, r7
  407d44:	dabf      	bge.n	407cc6 <_realloc_r+0x2e>
  407d46:	2600      	movs	r6, #0
  407d48:	230c      	movs	r3, #12
  407d4a:	4630      	mov	r0, r6
  407d4c:	f8c8 3000 	str.w	r3, [r8]
  407d50:	b003      	add	sp, #12
  407d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d56:	462e      	mov	r6, r5
  407d58:	1be3      	subs	r3, r4, r7
  407d5a:	2b0f      	cmp	r3, #15
  407d5c:	d81e      	bhi.n	407d9c <_realloc_r+0x104>
  407d5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407d62:	f003 0301 	and.w	r3, r3, #1
  407d66:	4323      	orrs	r3, r4
  407d68:	444c      	add	r4, r9
  407d6a:	f8c9 3004 	str.w	r3, [r9, #4]
  407d6e:	6863      	ldr	r3, [r4, #4]
  407d70:	f043 0301 	orr.w	r3, r3, #1
  407d74:	6063      	str	r3, [r4, #4]
  407d76:	4640      	mov	r0, r8
  407d78:	f7ff fc92 	bl	4076a0 <__malloc_unlock>
  407d7c:	4630      	mov	r0, r6
  407d7e:	b003      	add	sp, #12
  407d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d84:	f023 0303 	bic.w	r3, r3, #3
  407d88:	18e1      	adds	r1, r4, r3
  407d8a:	4291      	cmp	r1, r2
  407d8c:	db1f      	blt.n	407dce <_realloc_r+0x136>
  407d8e:	68c3      	ldr	r3, [r0, #12]
  407d90:	6882      	ldr	r2, [r0, #8]
  407d92:	462e      	mov	r6, r5
  407d94:	60d3      	str	r3, [r2, #12]
  407d96:	460c      	mov	r4, r1
  407d98:	609a      	str	r2, [r3, #8]
  407d9a:	e7dd      	b.n	407d58 <_realloc_r+0xc0>
  407d9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407da0:	eb09 0107 	add.w	r1, r9, r7
  407da4:	f002 0201 	and.w	r2, r2, #1
  407da8:	444c      	add	r4, r9
  407daa:	f043 0301 	orr.w	r3, r3, #1
  407dae:	4317      	orrs	r7, r2
  407db0:	f8c9 7004 	str.w	r7, [r9, #4]
  407db4:	604b      	str	r3, [r1, #4]
  407db6:	6863      	ldr	r3, [r4, #4]
  407db8:	f043 0301 	orr.w	r3, r3, #1
  407dbc:	3108      	adds	r1, #8
  407dbe:	6063      	str	r3, [r4, #4]
  407dc0:	4640      	mov	r0, r8
  407dc2:	f7fe ff2d 	bl	406c20 <_free_r>
  407dc6:	e7d6      	b.n	407d76 <_realloc_r+0xde>
  407dc8:	4611      	mov	r1, r2
  407dca:	f7ff b81d 	b.w	406e08 <_malloc_r>
  407dce:	f01e 0f01 	tst.w	lr, #1
  407dd2:	d18e      	bne.n	407cf2 <_realloc_r+0x5a>
  407dd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407dd8:	eba9 0a01 	sub.w	sl, r9, r1
  407ddc:	f8da 1004 	ldr.w	r1, [sl, #4]
  407de0:	f021 0103 	bic.w	r1, r1, #3
  407de4:	440b      	add	r3, r1
  407de6:	4423      	add	r3, r4
  407de8:	4293      	cmp	r3, r2
  407dea:	db25      	blt.n	407e38 <_realloc_r+0x1a0>
  407dec:	68c2      	ldr	r2, [r0, #12]
  407dee:	6881      	ldr	r1, [r0, #8]
  407df0:	4656      	mov	r6, sl
  407df2:	60ca      	str	r2, [r1, #12]
  407df4:	6091      	str	r1, [r2, #8]
  407df6:	f8da 100c 	ldr.w	r1, [sl, #12]
  407dfa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407dfe:	1f22      	subs	r2, r4, #4
  407e00:	2a24      	cmp	r2, #36	; 0x24
  407e02:	60c1      	str	r1, [r0, #12]
  407e04:	6088      	str	r0, [r1, #8]
  407e06:	f200 8094 	bhi.w	407f32 <_realloc_r+0x29a>
  407e0a:	2a13      	cmp	r2, #19
  407e0c:	d96f      	bls.n	407eee <_realloc_r+0x256>
  407e0e:	6829      	ldr	r1, [r5, #0]
  407e10:	f8ca 1008 	str.w	r1, [sl, #8]
  407e14:	6869      	ldr	r1, [r5, #4]
  407e16:	f8ca 100c 	str.w	r1, [sl, #12]
  407e1a:	2a1b      	cmp	r2, #27
  407e1c:	f200 80a2 	bhi.w	407f64 <_realloc_r+0x2cc>
  407e20:	3508      	adds	r5, #8
  407e22:	f10a 0210 	add.w	r2, sl, #16
  407e26:	e063      	b.n	407ef0 <_realloc_r+0x258>
  407e28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407e2c:	eba9 0a03 	sub.w	sl, r9, r3
  407e30:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e34:	f021 0103 	bic.w	r1, r1, #3
  407e38:	1863      	adds	r3, r4, r1
  407e3a:	4293      	cmp	r3, r2
  407e3c:	f6ff af59 	blt.w	407cf2 <_realloc_r+0x5a>
  407e40:	4656      	mov	r6, sl
  407e42:	e7d8      	b.n	407df6 <_realloc_r+0x15e>
  407e44:	6841      	ldr	r1, [r0, #4]
  407e46:	f021 0b03 	bic.w	fp, r1, #3
  407e4a:	44a3      	add	fp, r4
  407e4c:	f107 0010 	add.w	r0, r7, #16
  407e50:	4583      	cmp	fp, r0
  407e52:	da56      	bge.n	407f02 <_realloc_r+0x26a>
  407e54:	f01e 0f01 	tst.w	lr, #1
  407e58:	f47f af4b 	bne.w	407cf2 <_realloc_r+0x5a>
  407e5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e60:	eba9 0a01 	sub.w	sl, r9, r1
  407e64:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e68:	f021 0103 	bic.w	r1, r1, #3
  407e6c:	448b      	add	fp, r1
  407e6e:	4558      	cmp	r0, fp
  407e70:	dce2      	bgt.n	407e38 <_realloc_r+0x1a0>
  407e72:	4656      	mov	r6, sl
  407e74:	f8da 100c 	ldr.w	r1, [sl, #12]
  407e78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407e7c:	1f22      	subs	r2, r4, #4
  407e7e:	2a24      	cmp	r2, #36	; 0x24
  407e80:	60c1      	str	r1, [r0, #12]
  407e82:	6088      	str	r0, [r1, #8]
  407e84:	f200 808f 	bhi.w	407fa6 <_realloc_r+0x30e>
  407e88:	2a13      	cmp	r2, #19
  407e8a:	f240 808a 	bls.w	407fa2 <_realloc_r+0x30a>
  407e8e:	6829      	ldr	r1, [r5, #0]
  407e90:	f8ca 1008 	str.w	r1, [sl, #8]
  407e94:	6869      	ldr	r1, [r5, #4]
  407e96:	f8ca 100c 	str.w	r1, [sl, #12]
  407e9a:	2a1b      	cmp	r2, #27
  407e9c:	f200 808a 	bhi.w	407fb4 <_realloc_r+0x31c>
  407ea0:	3508      	adds	r5, #8
  407ea2:	f10a 0210 	add.w	r2, sl, #16
  407ea6:	6829      	ldr	r1, [r5, #0]
  407ea8:	6011      	str	r1, [r2, #0]
  407eaa:	6869      	ldr	r1, [r5, #4]
  407eac:	6051      	str	r1, [r2, #4]
  407eae:	68a9      	ldr	r1, [r5, #8]
  407eb0:	6091      	str	r1, [r2, #8]
  407eb2:	eb0a 0107 	add.w	r1, sl, r7
  407eb6:	ebab 0207 	sub.w	r2, fp, r7
  407eba:	f042 0201 	orr.w	r2, r2, #1
  407ebe:	6099      	str	r1, [r3, #8]
  407ec0:	604a      	str	r2, [r1, #4]
  407ec2:	f8da 3004 	ldr.w	r3, [sl, #4]
  407ec6:	f003 0301 	and.w	r3, r3, #1
  407eca:	431f      	orrs	r7, r3
  407ecc:	4640      	mov	r0, r8
  407ece:	f8ca 7004 	str.w	r7, [sl, #4]
  407ed2:	f7ff fbe5 	bl	4076a0 <__malloc_unlock>
  407ed6:	e751      	b.n	407d7c <_realloc_r+0xe4>
  407ed8:	682b      	ldr	r3, [r5, #0]
  407eda:	6003      	str	r3, [r0, #0]
  407edc:	686b      	ldr	r3, [r5, #4]
  407ede:	6043      	str	r3, [r0, #4]
  407ee0:	2a1b      	cmp	r2, #27
  407ee2:	d82d      	bhi.n	407f40 <_realloc_r+0x2a8>
  407ee4:	f100 0308 	add.w	r3, r0, #8
  407ee8:	f105 0208 	add.w	r2, r5, #8
  407eec:	e71b      	b.n	407d26 <_realloc_r+0x8e>
  407eee:	4632      	mov	r2, r6
  407ef0:	6829      	ldr	r1, [r5, #0]
  407ef2:	6011      	str	r1, [r2, #0]
  407ef4:	6869      	ldr	r1, [r5, #4]
  407ef6:	6051      	str	r1, [r2, #4]
  407ef8:	68a9      	ldr	r1, [r5, #8]
  407efa:	6091      	str	r1, [r2, #8]
  407efc:	461c      	mov	r4, r3
  407efe:	46d1      	mov	r9, sl
  407f00:	e72a      	b.n	407d58 <_realloc_r+0xc0>
  407f02:	eb09 0107 	add.w	r1, r9, r7
  407f06:	ebab 0b07 	sub.w	fp, fp, r7
  407f0a:	f04b 0201 	orr.w	r2, fp, #1
  407f0e:	6099      	str	r1, [r3, #8]
  407f10:	604a      	str	r2, [r1, #4]
  407f12:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407f16:	f003 0301 	and.w	r3, r3, #1
  407f1a:	431f      	orrs	r7, r3
  407f1c:	4640      	mov	r0, r8
  407f1e:	f845 7c04 	str.w	r7, [r5, #-4]
  407f22:	f7ff fbbd 	bl	4076a0 <__malloc_unlock>
  407f26:	462e      	mov	r6, r5
  407f28:	e728      	b.n	407d7c <_realloc_r+0xe4>
  407f2a:	4629      	mov	r1, r5
  407f2c:	f7ff fb52 	bl	4075d4 <memmove>
  407f30:	e6ff      	b.n	407d32 <_realloc_r+0x9a>
  407f32:	4629      	mov	r1, r5
  407f34:	4630      	mov	r0, r6
  407f36:	461c      	mov	r4, r3
  407f38:	46d1      	mov	r9, sl
  407f3a:	f7ff fb4b 	bl	4075d4 <memmove>
  407f3e:	e70b      	b.n	407d58 <_realloc_r+0xc0>
  407f40:	68ab      	ldr	r3, [r5, #8]
  407f42:	6083      	str	r3, [r0, #8]
  407f44:	68eb      	ldr	r3, [r5, #12]
  407f46:	60c3      	str	r3, [r0, #12]
  407f48:	2a24      	cmp	r2, #36	; 0x24
  407f4a:	d017      	beq.n	407f7c <_realloc_r+0x2e4>
  407f4c:	f100 0310 	add.w	r3, r0, #16
  407f50:	f105 0210 	add.w	r2, r5, #16
  407f54:	e6e7      	b.n	407d26 <_realloc_r+0x8e>
  407f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407f5a:	f023 0303 	bic.w	r3, r3, #3
  407f5e:	441c      	add	r4, r3
  407f60:	462e      	mov	r6, r5
  407f62:	e6f9      	b.n	407d58 <_realloc_r+0xc0>
  407f64:	68a9      	ldr	r1, [r5, #8]
  407f66:	f8ca 1010 	str.w	r1, [sl, #16]
  407f6a:	68e9      	ldr	r1, [r5, #12]
  407f6c:	f8ca 1014 	str.w	r1, [sl, #20]
  407f70:	2a24      	cmp	r2, #36	; 0x24
  407f72:	d00c      	beq.n	407f8e <_realloc_r+0x2f6>
  407f74:	3510      	adds	r5, #16
  407f76:	f10a 0218 	add.w	r2, sl, #24
  407f7a:	e7b9      	b.n	407ef0 <_realloc_r+0x258>
  407f7c:	692b      	ldr	r3, [r5, #16]
  407f7e:	6103      	str	r3, [r0, #16]
  407f80:	696b      	ldr	r3, [r5, #20]
  407f82:	6143      	str	r3, [r0, #20]
  407f84:	f105 0218 	add.w	r2, r5, #24
  407f88:	f100 0318 	add.w	r3, r0, #24
  407f8c:	e6cb      	b.n	407d26 <_realloc_r+0x8e>
  407f8e:	692a      	ldr	r2, [r5, #16]
  407f90:	f8ca 2018 	str.w	r2, [sl, #24]
  407f94:	696a      	ldr	r2, [r5, #20]
  407f96:	f8ca 201c 	str.w	r2, [sl, #28]
  407f9a:	3518      	adds	r5, #24
  407f9c:	f10a 0220 	add.w	r2, sl, #32
  407fa0:	e7a6      	b.n	407ef0 <_realloc_r+0x258>
  407fa2:	4632      	mov	r2, r6
  407fa4:	e77f      	b.n	407ea6 <_realloc_r+0x20e>
  407fa6:	4629      	mov	r1, r5
  407fa8:	4630      	mov	r0, r6
  407faa:	9301      	str	r3, [sp, #4]
  407fac:	f7ff fb12 	bl	4075d4 <memmove>
  407fb0:	9b01      	ldr	r3, [sp, #4]
  407fb2:	e77e      	b.n	407eb2 <_realloc_r+0x21a>
  407fb4:	68a9      	ldr	r1, [r5, #8]
  407fb6:	f8ca 1010 	str.w	r1, [sl, #16]
  407fba:	68e9      	ldr	r1, [r5, #12]
  407fbc:	f8ca 1014 	str.w	r1, [sl, #20]
  407fc0:	2a24      	cmp	r2, #36	; 0x24
  407fc2:	d003      	beq.n	407fcc <_realloc_r+0x334>
  407fc4:	3510      	adds	r5, #16
  407fc6:	f10a 0218 	add.w	r2, sl, #24
  407fca:	e76c      	b.n	407ea6 <_realloc_r+0x20e>
  407fcc:	692a      	ldr	r2, [r5, #16]
  407fce:	f8ca 2018 	str.w	r2, [sl, #24]
  407fd2:	696a      	ldr	r2, [r5, #20]
  407fd4:	f8ca 201c 	str.w	r2, [sl, #28]
  407fd8:	3518      	adds	r5, #24
  407fda:	f10a 0220 	add.w	r2, sl, #32
  407fde:	e762      	b.n	407ea6 <_realloc_r+0x20e>
  407fe0:	200005ac 	.word	0x200005ac

00407fe4 <_sbrk_r>:
  407fe4:	b538      	push	{r3, r4, r5, lr}
  407fe6:	4c07      	ldr	r4, [pc, #28]	; (408004 <_sbrk_r+0x20>)
  407fe8:	2300      	movs	r3, #0
  407fea:	4605      	mov	r5, r0
  407fec:	4608      	mov	r0, r1
  407fee:	6023      	str	r3, [r4, #0]
  407ff0:	f7fb fe2c 	bl	403c4c <_sbrk>
  407ff4:	1c43      	adds	r3, r0, #1
  407ff6:	d000      	beq.n	407ffa <_sbrk_r+0x16>
  407ff8:	bd38      	pop	{r3, r4, r5, pc}
  407ffa:	6823      	ldr	r3, [r4, #0]
  407ffc:	2b00      	cmp	r3, #0
  407ffe:	d0fb      	beq.n	407ff8 <_sbrk_r+0x14>
  408000:	602b      	str	r3, [r5, #0]
  408002:	bd38      	pop	{r3, r4, r5, pc}
  408004:	2000d7d0 	.word	0x2000d7d0

00408008 <strchr>:
  408008:	b2c9      	uxtb	r1, r1
  40800a:	2900      	cmp	r1, #0
  40800c:	d041      	beq.n	408092 <strchr+0x8a>
  40800e:	0782      	lsls	r2, r0, #30
  408010:	b4f0      	push	{r4, r5, r6, r7}
  408012:	d067      	beq.n	4080e4 <strchr+0xdc>
  408014:	7803      	ldrb	r3, [r0, #0]
  408016:	2b00      	cmp	r3, #0
  408018:	d068      	beq.n	4080ec <strchr+0xe4>
  40801a:	4299      	cmp	r1, r3
  40801c:	d037      	beq.n	40808e <strchr+0x86>
  40801e:	1c43      	adds	r3, r0, #1
  408020:	e004      	b.n	40802c <strchr+0x24>
  408022:	f813 0b01 	ldrb.w	r0, [r3], #1
  408026:	b390      	cbz	r0, 40808e <strchr+0x86>
  408028:	4281      	cmp	r1, r0
  40802a:	d02f      	beq.n	40808c <strchr+0x84>
  40802c:	079a      	lsls	r2, r3, #30
  40802e:	461c      	mov	r4, r3
  408030:	d1f7      	bne.n	408022 <strchr+0x1a>
  408032:	6825      	ldr	r5, [r4, #0]
  408034:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  408038:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40803c:	ea83 0605 	eor.w	r6, r3, r5
  408040:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  408044:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  408048:	ea20 0006 	bic.w	r0, r0, r6
  40804c:	ea22 0205 	bic.w	r2, r2, r5
  408050:	4302      	orrs	r2, r0
  408052:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408056:	d111      	bne.n	40807c <strchr+0x74>
  408058:	4620      	mov	r0, r4
  40805a:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40805e:	ea83 0706 	eor.w	r7, r3, r6
  408062:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  408066:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40806a:	ea25 0507 	bic.w	r5, r5, r7
  40806e:	ea22 0206 	bic.w	r2, r2, r6
  408072:	432a      	orrs	r2, r5
  408074:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408078:	d0ef      	beq.n	40805a <strchr+0x52>
  40807a:	4604      	mov	r4, r0
  40807c:	7820      	ldrb	r0, [r4, #0]
  40807e:	b918      	cbnz	r0, 408088 <strchr+0x80>
  408080:	e005      	b.n	40808e <strchr+0x86>
  408082:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  408086:	b110      	cbz	r0, 40808e <strchr+0x86>
  408088:	4281      	cmp	r1, r0
  40808a:	d1fa      	bne.n	408082 <strchr+0x7a>
  40808c:	4620      	mov	r0, r4
  40808e:	bcf0      	pop	{r4, r5, r6, r7}
  408090:	4770      	bx	lr
  408092:	0783      	lsls	r3, r0, #30
  408094:	d024      	beq.n	4080e0 <strchr+0xd8>
  408096:	7803      	ldrb	r3, [r0, #0]
  408098:	2b00      	cmp	r3, #0
  40809a:	d0f9      	beq.n	408090 <strchr+0x88>
  40809c:	1c43      	adds	r3, r0, #1
  40809e:	e003      	b.n	4080a8 <strchr+0xa0>
  4080a0:	7802      	ldrb	r2, [r0, #0]
  4080a2:	3301      	adds	r3, #1
  4080a4:	2a00      	cmp	r2, #0
  4080a6:	d0f3      	beq.n	408090 <strchr+0x88>
  4080a8:	0799      	lsls	r1, r3, #30
  4080aa:	4618      	mov	r0, r3
  4080ac:	d1f8      	bne.n	4080a0 <strchr+0x98>
  4080ae:	6819      	ldr	r1, [r3, #0]
  4080b0:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4080b4:	ea22 0201 	bic.w	r2, r2, r1
  4080b8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4080bc:	d108      	bne.n	4080d0 <strchr+0xc8>
  4080be:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4080c2:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4080c6:	ea22 0201 	bic.w	r2, r2, r1
  4080ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4080ce:	d0f6      	beq.n	4080be <strchr+0xb6>
  4080d0:	781a      	ldrb	r2, [r3, #0]
  4080d2:	4618      	mov	r0, r3
  4080d4:	b142      	cbz	r2, 4080e8 <strchr+0xe0>
  4080d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4080da:	2b00      	cmp	r3, #0
  4080dc:	d1fb      	bne.n	4080d6 <strchr+0xce>
  4080de:	4770      	bx	lr
  4080e0:	4603      	mov	r3, r0
  4080e2:	e7e4      	b.n	4080ae <strchr+0xa6>
  4080e4:	4604      	mov	r4, r0
  4080e6:	e7a4      	b.n	408032 <strchr+0x2a>
  4080e8:	4618      	mov	r0, r3
  4080ea:	4770      	bx	lr
  4080ec:	4618      	mov	r0, r3
  4080ee:	e7ce      	b.n	40808e <strchr+0x86>

004080f0 <__ssprint_r>:
  4080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4080f4:	6893      	ldr	r3, [r2, #8]
  4080f6:	b083      	sub	sp, #12
  4080f8:	4690      	mov	r8, r2
  4080fa:	2b00      	cmp	r3, #0
  4080fc:	d070      	beq.n	4081e0 <__ssprint_r+0xf0>
  4080fe:	4682      	mov	sl, r0
  408100:	460c      	mov	r4, r1
  408102:	6817      	ldr	r7, [r2, #0]
  408104:	688d      	ldr	r5, [r1, #8]
  408106:	6808      	ldr	r0, [r1, #0]
  408108:	e042      	b.n	408190 <__ssprint_r+0xa0>
  40810a:	89a3      	ldrh	r3, [r4, #12]
  40810c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408110:	d02e      	beq.n	408170 <__ssprint_r+0x80>
  408112:	6965      	ldr	r5, [r4, #20]
  408114:	6921      	ldr	r1, [r4, #16]
  408116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40811a:	eba0 0b01 	sub.w	fp, r0, r1
  40811e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408122:	f10b 0001 	add.w	r0, fp, #1
  408126:	106d      	asrs	r5, r5, #1
  408128:	4430      	add	r0, r6
  40812a:	42a8      	cmp	r0, r5
  40812c:	462a      	mov	r2, r5
  40812e:	bf84      	itt	hi
  408130:	4605      	movhi	r5, r0
  408132:	462a      	movhi	r2, r5
  408134:	055b      	lsls	r3, r3, #21
  408136:	d538      	bpl.n	4081aa <__ssprint_r+0xba>
  408138:	4611      	mov	r1, r2
  40813a:	4650      	mov	r0, sl
  40813c:	f7fe fe64 	bl	406e08 <_malloc_r>
  408140:	2800      	cmp	r0, #0
  408142:	d03c      	beq.n	4081be <__ssprint_r+0xce>
  408144:	465a      	mov	r2, fp
  408146:	6921      	ldr	r1, [r4, #16]
  408148:	9001      	str	r0, [sp, #4]
  40814a:	f7ff f9a9 	bl	4074a0 <memcpy>
  40814e:	89a2      	ldrh	r2, [r4, #12]
  408150:	9b01      	ldr	r3, [sp, #4]
  408152:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40815a:	81a2      	strh	r2, [r4, #12]
  40815c:	eba5 020b 	sub.w	r2, r5, fp
  408160:	eb03 000b 	add.w	r0, r3, fp
  408164:	6165      	str	r5, [r4, #20]
  408166:	6123      	str	r3, [r4, #16]
  408168:	6020      	str	r0, [r4, #0]
  40816a:	60a2      	str	r2, [r4, #8]
  40816c:	4635      	mov	r5, r6
  40816e:	46b3      	mov	fp, r6
  408170:	465a      	mov	r2, fp
  408172:	4649      	mov	r1, r9
  408174:	f7ff fa2e 	bl	4075d4 <memmove>
  408178:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40817c:	68a2      	ldr	r2, [r4, #8]
  40817e:	6820      	ldr	r0, [r4, #0]
  408180:	1b55      	subs	r5, r2, r5
  408182:	4458      	add	r0, fp
  408184:	1b9e      	subs	r6, r3, r6
  408186:	60a5      	str	r5, [r4, #8]
  408188:	6020      	str	r0, [r4, #0]
  40818a:	f8c8 6008 	str.w	r6, [r8, #8]
  40818e:	b33e      	cbz	r6, 4081e0 <__ssprint_r+0xf0>
  408190:	687e      	ldr	r6, [r7, #4]
  408192:	463b      	mov	r3, r7
  408194:	3708      	adds	r7, #8
  408196:	2e00      	cmp	r6, #0
  408198:	d0fa      	beq.n	408190 <__ssprint_r+0xa0>
  40819a:	42ae      	cmp	r6, r5
  40819c:	f8d3 9000 	ldr.w	r9, [r3]
  4081a0:	46ab      	mov	fp, r5
  4081a2:	d2b2      	bcs.n	40810a <__ssprint_r+0x1a>
  4081a4:	4635      	mov	r5, r6
  4081a6:	46b3      	mov	fp, r6
  4081a8:	e7e2      	b.n	408170 <__ssprint_r+0x80>
  4081aa:	4650      	mov	r0, sl
  4081ac:	f7ff fd74 	bl	407c98 <_realloc_r>
  4081b0:	4603      	mov	r3, r0
  4081b2:	2800      	cmp	r0, #0
  4081b4:	d1d2      	bne.n	40815c <__ssprint_r+0x6c>
  4081b6:	6921      	ldr	r1, [r4, #16]
  4081b8:	4650      	mov	r0, sl
  4081ba:	f7fe fd31 	bl	406c20 <_free_r>
  4081be:	230c      	movs	r3, #12
  4081c0:	f8ca 3000 	str.w	r3, [sl]
  4081c4:	89a3      	ldrh	r3, [r4, #12]
  4081c6:	2200      	movs	r2, #0
  4081c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4081cc:	f04f 30ff 	mov.w	r0, #4294967295
  4081d0:	81a3      	strh	r3, [r4, #12]
  4081d2:	f8c8 2008 	str.w	r2, [r8, #8]
  4081d6:	f8c8 2004 	str.w	r2, [r8, #4]
  4081da:	b003      	add	sp, #12
  4081dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081e0:	2000      	movs	r0, #0
  4081e2:	f8c8 0004 	str.w	r0, [r8, #4]
  4081e6:	b003      	add	sp, #12
  4081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004081ec <__ascii_wctomb>:
  4081ec:	b121      	cbz	r1, 4081f8 <__ascii_wctomb+0xc>
  4081ee:	2aff      	cmp	r2, #255	; 0xff
  4081f0:	d804      	bhi.n	4081fc <__ascii_wctomb+0x10>
  4081f2:	700a      	strb	r2, [r1, #0]
  4081f4:	2001      	movs	r0, #1
  4081f6:	4770      	bx	lr
  4081f8:	4608      	mov	r0, r1
  4081fa:	4770      	bx	lr
  4081fc:	238a      	movs	r3, #138	; 0x8a
  4081fe:	6003      	str	r3, [r0, #0]
  408200:	f04f 30ff 	mov.w	r0, #4294967295
  408204:	4770      	bx	lr
  408206:	bf00      	nop

00408208 <__register_exitproc>:
  408208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40820c:	4c25      	ldr	r4, [pc, #148]	; (4082a4 <__register_exitproc+0x9c>)
  40820e:	6825      	ldr	r5, [r4, #0]
  408210:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408214:	4606      	mov	r6, r0
  408216:	4688      	mov	r8, r1
  408218:	4692      	mov	sl, r2
  40821a:	4699      	mov	r9, r3
  40821c:	b3c4      	cbz	r4, 408290 <__register_exitproc+0x88>
  40821e:	6860      	ldr	r0, [r4, #4]
  408220:	281f      	cmp	r0, #31
  408222:	dc17      	bgt.n	408254 <__register_exitproc+0x4c>
  408224:	1c43      	adds	r3, r0, #1
  408226:	b176      	cbz	r6, 408246 <__register_exitproc+0x3e>
  408228:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40822c:	2201      	movs	r2, #1
  40822e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  408232:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  408236:	4082      	lsls	r2, r0
  408238:	4311      	orrs	r1, r2
  40823a:	2e02      	cmp	r6, #2
  40823c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  408240:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  408244:	d01e      	beq.n	408284 <__register_exitproc+0x7c>
  408246:	3002      	adds	r0, #2
  408248:	6063      	str	r3, [r4, #4]
  40824a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40824e:	2000      	movs	r0, #0
  408250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408254:	4b14      	ldr	r3, [pc, #80]	; (4082a8 <__register_exitproc+0xa0>)
  408256:	b303      	cbz	r3, 40829a <__register_exitproc+0x92>
  408258:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40825c:	f3af 8000 	nop.w
  408260:	4604      	mov	r4, r0
  408262:	b1d0      	cbz	r0, 40829a <__register_exitproc+0x92>
  408264:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408268:	2700      	movs	r7, #0
  40826a:	e880 0088 	stmia.w	r0, {r3, r7}
  40826e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408272:	4638      	mov	r0, r7
  408274:	2301      	movs	r3, #1
  408276:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40827a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40827e:	2e00      	cmp	r6, #0
  408280:	d0e1      	beq.n	408246 <__register_exitproc+0x3e>
  408282:	e7d1      	b.n	408228 <__register_exitproc+0x20>
  408284:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  408288:	430a      	orrs	r2, r1
  40828a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40828e:	e7da      	b.n	408246 <__register_exitproc+0x3e>
  408290:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  408294:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408298:	e7c1      	b.n	40821e <__register_exitproc+0x16>
  40829a:	f04f 30ff 	mov.w	r0, #4294967295
  40829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082a2:	bf00      	nop
  4082a4:	004099b0 	.word	0x004099b0
  4082a8:	00000000 	.word	0x00000000

004082ac <_calloc_r>:
  4082ac:	b510      	push	{r4, lr}
  4082ae:	fb02 f101 	mul.w	r1, r2, r1
  4082b2:	f7fe fda9 	bl	406e08 <_malloc_r>
  4082b6:	4604      	mov	r4, r0
  4082b8:	b1d8      	cbz	r0, 4082f2 <_calloc_r+0x46>
  4082ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4082be:	f022 0203 	bic.w	r2, r2, #3
  4082c2:	3a04      	subs	r2, #4
  4082c4:	2a24      	cmp	r2, #36	; 0x24
  4082c6:	d818      	bhi.n	4082fa <_calloc_r+0x4e>
  4082c8:	2a13      	cmp	r2, #19
  4082ca:	d914      	bls.n	4082f6 <_calloc_r+0x4a>
  4082cc:	2300      	movs	r3, #0
  4082ce:	2a1b      	cmp	r2, #27
  4082d0:	6003      	str	r3, [r0, #0]
  4082d2:	6043      	str	r3, [r0, #4]
  4082d4:	d916      	bls.n	408304 <_calloc_r+0x58>
  4082d6:	2a24      	cmp	r2, #36	; 0x24
  4082d8:	6083      	str	r3, [r0, #8]
  4082da:	60c3      	str	r3, [r0, #12]
  4082dc:	bf11      	iteee	ne
  4082de:	f100 0210 	addne.w	r2, r0, #16
  4082e2:	6103      	streq	r3, [r0, #16]
  4082e4:	6143      	streq	r3, [r0, #20]
  4082e6:	f100 0218 	addeq.w	r2, r0, #24
  4082ea:	2300      	movs	r3, #0
  4082ec:	6013      	str	r3, [r2, #0]
  4082ee:	6053      	str	r3, [r2, #4]
  4082f0:	6093      	str	r3, [r2, #8]
  4082f2:	4620      	mov	r0, r4
  4082f4:	bd10      	pop	{r4, pc}
  4082f6:	4602      	mov	r2, r0
  4082f8:	e7f7      	b.n	4082ea <_calloc_r+0x3e>
  4082fa:	2100      	movs	r1, #0
  4082fc:	f7fb fed4 	bl	4040a8 <memset>
  408300:	4620      	mov	r0, r4
  408302:	bd10      	pop	{r4, pc}
  408304:	f100 0208 	add.w	r2, r0, #8
  408308:	e7ef      	b.n	4082ea <_calloc_r+0x3e>
  40830a:	bf00      	nop

0040830c <__aeabi_drsub>:
  40830c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408310:	e002      	b.n	408318 <__adddf3>
  408312:	bf00      	nop

00408314 <__aeabi_dsub>:
  408314:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408318 <__adddf3>:
  408318:	b530      	push	{r4, r5, lr}
  40831a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40831e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408322:	ea94 0f05 	teq	r4, r5
  408326:	bf08      	it	eq
  408328:	ea90 0f02 	teqeq	r0, r2
  40832c:	bf1f      	itttt	ne
  40832e:	ea54 0c00 	orrsne.w	ip, r4, r0
  408332:	ea55 0c02 	orrsne.w	ip, r5, r2
  408336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40833a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40833e:	f000 80e2 	beq.w	408506 <__adddf3+0x1ee>
  408342:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40834a:	bfb8      	it	lt
  40834c:	426d      	neglt	r5, r5
  40834e:	dd0c      	ble.n	40836a <__adddf3+0x52>
  408350:	442c      	add	r4, r5
  408352:	ea80 0202 	eor.w	r2, r0, r2
  408356:	ea81 0303 	eor.w	r3, r1, r3
  40835a:	ea82 0000 	eor.w	r0, r2, r0
  40835e:	ea83 0101 	eor.w	r1, r3, r1
  408362:	ea80 0202 	eor.w	r2, r0, r2
  408366:	ea81 0303 	eor.w	r3, r1, r3
  40836a:	2d36      	cmp	r5, #54	; 0x36
  40836c:	bf88      	it	hi
  40836e:	bd30      	pophi	{r4, r5, pc}
  408370:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408374:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408378:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40837c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408380:	d002      	beq.n	408388 <__adddf3+0x70>
  408382:	4240      	negs	r0, r0
  408384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408388:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40838c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408394:	d002      	beq.n	40839c <__adddf3+0x84>
  408396:	4252      	negs	r2, r2
  408398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40839c:	ea94 0f05 	teq	r4, r5
  4083a0:	f000 80a7 	beq.w	4084f2 <__adddf3+0x1da>
  4083a4:	f1a4 0401 	sub.w	r4, r4, #1
  4083a8:	f1d5 0e20 	rsbs	lr, r5, #32
  4083ac:	db0d      	blt.n	4083ca <__adddf3+0xb2>
  4083ae:	fa02 fc0e 	lsl.w	ip, r2, lr
  4083b2:	fa22 f205 	lsr.w	r2, r2, r5
  4083b6:	1880      	adds	r0, r0, r2
  4083b8:	f141 0100 	adc.w	r1, r1, #0
  4083bc:	fa03 f20e 	lsl.w	r2, r3, lr
  4083c0:	1880      	adds	r0, r0, r2
  4083c2:	fa43 f305 	asr.w	r3, r3, r5
  4083c6:	4159      	adcs	r1, r3
  4083c8:	e00e      	b.n	4083e8 <__adddf3+0xd0>
  4083ca:	f1a5 0520 	sub.w	r5, r5, #32
  4083ce:	f10e 0e20 	add.w	lr, lr, #32
  4083d2:	2a01      	cmp	r2, #1
  4083d4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4083d8:	bf28      	it	cs
  4083da:	f04c 0c02 	orrcs.w	ip, ip, #2
  4083de:	fa43 f305 	asr.w	r3, r3, r5
  4083e2:	18c0      	adds	r0, r0, r3
  4083e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4083e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4083ec:	d507      	bpl.n	4083fe <__adddf3+0xe6>
  4083ee:	f04f 0e00 	mov.w	lr, #0
  4083f2:	f1dc 0c00 	rsbs	ip, ip, #0
  4083f6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4083fa:	eb6e 0101 	sbc.w	r1, lr, r1
  4083fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408402:	d31b      	bcc.n	40843c <__adddf3+0x124>
  408404:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408408:	d30c      	bcc.n	408424 <__adddf3+0x10c>
  40840a:	0849      	lsrs	r1, r1, #1
  40840c:	ea5f 0030 	movs.w	r0, r0, rrx
  408410:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408414:	f104 0401 	add.w	r4, r4, #1
  408418:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40841c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408420:	f080 809a 	bcs.w	408558 <__adddf3+0x240>
  408424:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408428:	bf08      	it	eq
  40842a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40842e:	f150 0000 	adcs.w	r0, r0, #0
  408432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408436:	ea41 0105 	orr.w	r1, r1, r5
  40843a:	bd30      	pop	{r4, r5, pc}
  40843c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408440:	4140      	adcs	r0, r0
  408442:	eb41 0101 	adc.w	r1, r1, r1
  408446:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40844a:	f1a4 0401 	sub.w	r4, r4, #1
  40844e:	d1e9      	bne.n	408424 <__adddf3+0x10c>
  408450:	f091 0f00 	teq	r1, #0
  408454:	bf04      	itt	eq
  408456:	4601      	moveq	r1, r0
  408458:	2000      	moveq	r0, #0
  40845a:	fab1 f381 	clz	r3, r1
  40845e:	bf08      	it	eq
  408460:	3320      	addeq	r3, #32
  408462:	f1a3 030b 	sub.w	r3, r3, #11
  408466:	f1b3 0220 	subs.w	r2, r3, #32
  40846a:	da0c      	bge.n	408486 <__adddf3+0x16e>
  40846c:	320c      	adds	r2, #12
  40846e:	dd08      	ble.n	408482 <__adddf3+0x16a>
  408470:	f102 0c14 	add.w	ip, r2, #20
  408474:	f1c2 020c 	rsb	r2, r2, #12
  408478:	fa01 f00c 	lsl.w	r0, r1, ip
  40847c:	fa21 f102 	lsr.w	r1, r1, r2
  408480:	e00c      	b.n	40849c <__adddf3+0x184>
  408482:	f102 0214 	add.w	r2, r2, #20
  408486:	bfd8      	it	le
  408488:	f1c2 0c20 	rsble	ip, r2, #32
  40848c:	fa01 f102 	lsl.w	r1, r1, r2
  408490:	fa20 fc0c 	lsr.w	ip, r0, ip
  408494:	bfdc      	itt	le
  408496:	ea41 010c 	orrle.w	r1, r1, ip
  40849a:	4090      	lslle	r0, r2
  40849c:	1ae4      	subs	r4, r4, r3
  40849e:	bfa2      	ittt	ge
  4084a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4084a4:	4329      	orrge	r1, r5
  4084a6:	bd30      	popge	{r4, r5, pc}
  4084a8:	ea6f 0404 	mvn.w	r4, r4
  4084ac:	3c1f      	subs	r4, #31
  4084ae:	da1c      	bge.n	4084ea <__adddf3+0x1d2>
  4084b0:	340c      	adds	r4, #12
  4084b2:	dc0e      	bgt.n	4084d2 <__adddf3+0x1ba>
  4084b4:	f104 0414 	add.w	r4, r4, #20
  4084b8:	f1c4 0220 	rsb	r2, r4, #32
  4084bc:	fa20 f004 	lsr.w	r0, r0, r4
  4084c0:	fa01 f302 	lsl.w	r3, r1, r2
  4084c4:	ea40 0003 	orr.w	r0, r0, r3
  4084c8:	fa21 f304 	lsr.w	r3, r1, r4
  4084cc:	ea45 0103 	orr.w	r1, r5, r3
  4084d0:	bd30      	pop	{r4, r5, pc}
  4084d2:	f1c4 040c 	rsb	r4, r4, #12
  4084d6:	f1c4 0220 	rsb	r2, r4, #32
  4084da:	fa20 f002 	lsr.w	r0, r0, r2
  4084de:	fa01 f304 	lsl.w	r3, r1, r4
  4084e2:	ea40 0003 	orr.w	r0, r0, r3
  4084e6:	4629      	mov	r1, r5
  4084e8:	bd30      	pop	{r4, r5, pc}
  4084ea:	fa21 f004 	lsr.w	r0, r1, r4
  4084ee:	4629      	mov	r1, r5
  4084f0:	bd30      	pop	{r4, r5, pc}
  4084f2:	f094 0f00 	teq	r4, #0
  4084f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4084fa:	bf06      	itte	eq
  4084fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408500:	3401      	addeq	r4, #1
  408502:	3d01      	subne	r5, #1
  408504:	e74e      	b.n	4083a4 <__adddf3+0x8c>
  408506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40850a:	bf18      	it	ne
  40850c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408510:	d029      	beq.n	408566 <__adddf3+0x24e>
  408512:	ea94 0f05 	teq	r4, r5
  408516:	bf08      	it	eq
  408518:	ea90 0f02 	teqeq	r0, r2
  40851c:	d005      	beq.n	40852a <__adddf3+0x212>
  40851e:	ea54 0c00 	orrs.w	ip, r4, r0
  408522:	bf04      	itt	eq
  408524:	4619      	moveq	r1, r3
  408526:	4610      	moveq	r0, r2
  408528:	bd30      	pop	{r4, r5, pc}
  40852a:	ea91 0f03 	teq	r1, r3
  40852e:	bf1e      	ittt	ne
  408530:	2100      	movne	r1, #0
  408532:	2000      	movne	r0, #0
  408534:	bd30      	popne	{r4, r5, pc}
  408536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40853a:	d105      	bne.n	408548 <__adddf3+0x230>
  40853c:	0040      	lsls	r0, r0, #1
  40853e:	4149      	adcs	r1, r1
  408540:	bf28      	it	cs
  408542:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408546:	bd30      	pop	{r4, r5, pc}
  408548:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40854c:	bf3c      	itt	cc
  40854e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408552:	bd30      	popcc	{r4, r5, pc}
  408554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408558:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40855c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408560:	f04f 0000 	mov.w	r0, #0
  408564:	bd30      	pop	{r4, r5, pc}
  408566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40856a:	bf1a      	itte	ne
  40856c:	4619      	movne	r1, r3
  40856e:	4610      	movne	r0, r2
  408570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408574:	bf1c      	itt	ne
  408576:	460b      	movne	r3, r1
  408578:	4602      	movne	r2, r0
  40857a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40857e:	bf06      	itte	eq
  408580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408584:	ea91 0f03 	teqeq	r1, r3
  408588:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40858c:	bd30      	pop	{r4, r5, pc}
  40858e:	bf00      	nop

00408590 <__aeabi_ui2d>:
  408590:	f090 0f00 	teq	r0, #0
  408594:	bf04      	itt	eq
  408596:	2100      	moveq	r1, #0
  408598:	4770      	bxeq	lr
  40859a:	b530      	push	{r4, r5, lr}
  40859c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4085a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4085a4:	f04f 0500 	mov.w	r5, #0
  4085a8:	f04f 0100 	mov.w	r1, #0
  4085ac:	e750      	b.n	408450 <__adddf3+0x138>
  4085ae:	bf00      	nop

004085b0 <__aeabi_i2d>:
  4085b0:	f090 0f00 	teq	r0, #0
  4085b4:	bf04      	itt	eq
  4085b6:	2100      	moveq	r1, #0
  4085b8:	4770      	bxeq	lr
  4085ba:	b530      	push	{r4, r5, lr}
  4085bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4085c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4085c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4085c8:	bf48      	it	mi
  4085ca:	4240      	negmi	r0, r0
  4085cc:	f04f 0100 	mov.w	r1, #0
  4085d0:	e73e      	b.n	408450 <__adddf3+0x138>
  4085d2:	bf00      	nop

004085d4 <__aeabi_f2d>:
  4085d4:	0042      	lsls	r2, r0, #1
  4085d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4085da:	ea4f 0131 	mov.w	r1, r1, rrx
  4085de:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4085e2:	bf1f      	itttt	ne
  4085e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4085e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4085ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4085f0:	4770      	bxne	lr
  4085f2:	f092 0f00 	teq	r2, #0
  4085f6:	bf14      	ite	ne
  4085f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4085fc:	4770      	bxeq	lr
  4085fe:	b530      	push	{r4, r5, lr}
  408600:	f44f 7460 	mov.w	r4, #896	; 0x380
  408604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40860c:	e720      	b.n	408450 <__adddf3+0x138>
  40860e:	bf00      	nop

00408610 <__aeabi_ul2d>:
  408610:	ea50 0201 	orrs.w	r2, r0, r1
  408614:	bf08      	it	eq
  408616:	4770      	bxeq	lr
  408618:	b530      	push	{r4, r5, lr}
  40861a:	f04f 0500 	mov.w	r5, #0
  40861e:	e00a      	b.n	408636 <__aeabi_l2d+0x16>

00408620 <__aeabi_l2d>:
  408620:	ea50 0201 	orrs.w	r2, r0, r1
  408624:	bf08      	it	eq
  408626:	4770      	bxeq	lr
  408628:	b530      	push	{r4, r5, lr}
  40862a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40862e:	d502      	bpl.n	408636 <__aeabi_l2d+0x16>
  408630:	4240      	negs	r0, r0
  408632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408636:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40863a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40863e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408642:	f43f aedc 	beq.w	4083fe <__adddf3+0xe6>
  408646:	f04f 0203 	mov.w	r2, #3
  40864a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40864e:	bf18      	it	ne
  408650:	3203      	addne	r2, #3
  408652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408656:	bf18      	it	ne
  408658:	3203      	addne	r2, #3
  40865a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40865e:	f1c2 0320 	rsb	r3, r2, #32
  408662:	fa00 fc03 	lsl.w	ip, r0, r3
  408666:	fa20 f002 	lsr.w	r0, r0, r2
  40866a:	fa01 fe03 	lsl.w	lr, r1, r3
  40866e:	ea40 000e 	orr.w	r0, r0, lr
  408672:	fa21 f102 	lsr.w	r1, r1, r2
  408676:	4414      	add	r4, r2
  408678:	e6c1      	b.n	4083fe <__adddf3+0xe6>
  40867a:	bf00      	nop

0040867c <__aeabi_dmul>:
  40867c:	b570      	push	{r4, r5, r6, lr}
  40867e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408682:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408686:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40868a:	bf1d      	ittte	ne
  40868c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408690:	ea94 0f0c 	teqne	r4, ip
  408694:	ea95 0f0c 	teqne	r5, ip
  408698:	f000 f8de 	bleq	408858 <__aeabi_dmul+0x1dc>
  40869c:	442c      	add	r4, r5
  40869e:	ea81 0603 	eor.w	r6, r1, r3
  4086a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4086a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4086aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4086ae:	bf18      	it	ne
  4086b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4086b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4086b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4086bc:	d038      	beq.n	408730 <__aeabi_dmul+0xb4>
  4086be:	fba0 ce02 	umull	ip, lr, r0, r2
  4086c2:	f04f 0500 	mov.w	r5, #0
  4086c6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4086ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4086ce:	fbe0 e503 	umlal	lr, r5, r0, r3
  4086d2:	f04f 0600 	mov.w	r6, #0
  4086d6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4086da:	f09c 0f00 	teq	ip, #0
  4086de:	bf18      	it	ne
  4086e0:	f04e 0e01 	orrne.w	lr, lr, #1
  4086e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4086e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4086ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4086f0:	d204      	bcs.n	4086fc <__aeabi_dmul+0x80>
  4086f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4086f6:	416d      	adcs	r5, r5
  4086f8:	eb46 0606 	adc.w	r6, r6, r6
  4086fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408700:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408704:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408708:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40870c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408710:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408714:	bf88      	it	hi
  408716:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40871a:	d81e      	bhi.n	40875a <__aeabi_dmul+0xde>
  40871c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408720:	bf08      	it	eq
  408722:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408726:	f150 0000 	adcs.w	r0, r0, #0
  40872a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40872e:	bd70      	pop	{r4, r5, r6, pc}
  408730:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408734:	ea46 0101 	orr.w	r1, r6, r1
  408738:	ea40 0002 	orr.w	r0, r0, r2
  40873c:	ea81 0103 	eor.w	r1, r1, r3
  408740:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408744:	bfc2      	ittt	gt
  408746:	ebd4 050c 	rsbsgt	r5, r4, ip
  40874a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40874e:	bd70      	popgt	{r4, r5, r6, pc}
  408750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408754:	f04f 0e00 	mov.w	lr, #0
  408758:	3c01      	subs	r4, #1
  40875a:	f300 80ab 	bgt.w	4088b4 <__aeabi_dmul+0x238>
  40875e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408762:	bfde      	ittt	le
  408764:	2000      	movle	r0, #0
  408766:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40876a:	bd70      	pople	{r4, r5, r6, pc}
  40876c:	f1c4 0400 	rsb	r4, r4, #0
  408770:	3c20      	subs	r4, #32
  408772:	da35      	bge.n	4087e0 <__aeabi_dmul+0x164>
  408774:	340c      	adds	r4, #12
  408776:	dc1b      	bgt.n	4087b0 <__aeabi_dmul+0x134>
  408778:	f104 0414 	add.w	r4, r4, #20
  40877c:	f1c4 0520 	rsb	r5, r4, #32
  408780:	fa00 f305 	lsl.w	r3, r0, r5
  408784:	fa20 f004 	lsr.w	r0, r0, r4
  408788:	fa01 f205 	lsl.w	r2, r1, r5
  40878c:	ea40 0002 	orr.w	r0, r0, r2
  408790:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408794:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40879c:	fa21 f604 	lsr.w	r6, r1, r4
  4087a0:	eb42 0106 	adc.w	r1, r2, r6
  4087a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4087a8:	bf08      	it	eq
  4087aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4087ae:	bd70      	pop	{r4, r5, r6, pc}
  4087b0:	f1c4 040c 	rsb	r4, r4, #12
  4087b4:	f1c4 0520 	rsb	r5, r4, #32
  4087b8:	fa00 f304 	lsl.w	r3, r0, r4
  4087bc:	fa20 f005 	lsr.w	r0, r0, r5
  4087c0:	fa01 f204 	lsl.w	r2, r1, r4
  4087c4:	ea40 0002 	orr.w	r0, r0, r2
  4087c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4087cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4087d0:	f141 0100 	adc.w	r1, r1, #0
  4087d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4087d8:	bf08      	it	eq
  4087da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4087de:	bd70      	pop	{r4, r5, r6, pc}
  4087e0:	f1c4 0520 	rsb	r5, r4, #32
  4087e4:	fa00 f205 	lsl.w	r2, r0, r5
  4087e8:	ea4e 0e02 	orr.w	lr, lr, r2
  4087ec:	fa20 f304 	lsr.w	r3, r0, r4
  4087f0:	fa01 f205 	lsl.w	r2, r1, r5
  4087f4:	ea43 0302 	orr.w	r3, r3, r2
  4087f8:	fa21 f004 	lsr.w	r0, r1, r4
  4087fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408800:	fa21 f204 	lsr.w	r2, r1, r4
  408804:	ea20 0002 	bic.w	r0, r0, r2
  408808:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40880c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408810:	bf08      	it	eq
  408812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408816:	bd70      	pop	{r4, r5, r6, pc}
  408818:	f094 0f00 	teq	r4, #0
  40881c:	d10f      	bne.n	40883e <__aeabi_dmul+0x1c2>
  40881e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408822:	0040      	lsls	r0, r0, #1
  408824:	eb41 0101 	adc.w	r1, r1, r1
  408828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40882c:	bf08      	it	eq
  40882e:	3c01      	subeq	r4, #1
  408830:	d0f7      	beq.n	408822 <__aeabi_dmul+0x1a6>
  408832:	ea41 0106 	orr.w	r1, r1, r6
  408836:	f095 0f00 	teq	r5, #0
  40883a:	bf18      	it	ne
  40883c:	4770      	bxne	lr
  40883e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408842:	0052      	lsls	r2, r2, #1
  408844:	eb43 0303 	adc.w	r3, r3, r3
  408848:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40884c:	bf08      	it	eq
  40884e:	3d01      	subeq	r5, #1
  408850:	d0f7      	beq.n	408842 <__aeabi_dmul+0x1c6>
  408852:	ea43 0306 	orr.w	r3, r3, r6
  408856:	4770      	bx	lr
  408858:	ea94 0f0c 	teq	r4, ip
  40885c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408860:	bf18      	it	ne
  408862:	ea95 0f0c 	teqne	r5, ip
  408866:	d00c      	beq.n	408882 <__aeabi_dmul+0x206>
  408868:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40886c:	bf18      	it	ne
  40886e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408872:	d1d1      	bne.n	408818 <__aeabi_dmul+0x19c>
  408874:	ea81 0103 	eor.w	r1, r1, r3
  408878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40887c:	f04f 0000 	mov.w	r0, #0
  408880:	bd70      	pop	{r4, r5, r6, pc}
  408882:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408886:	bf06      	itte	eq
  408888:	4610      	moveq	r0, r2
  40888a:	4619      	moveq	r1, r3
  40888c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408890:	d019      	beq.n	4088c6 <__aeabi_dmul+0x24a>
  408892:	ea94 0f0c 	teq	r4, ip
  408896:	d102      	bne.n	40889e <__aeabi_dmul+0x222>
  408898:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40889c:	d113      	bne.n	4088c6 <__aeabi_dmul+0x24a>
  40889e:	ea95 0f0c 	teq	r5, ip
  4088a2:	d105      	bne.n	4088b0 <__aeabi_dmul+0x234>
  4088a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4088a8:	bf1c      	itt	ne
  4088aa:	4610      	movne	r0, r2
  4088ac:	4619      	movne	r1, r3
  4088ae:	d10a      	bne.n	4088c6 <__aeabi_dmul+0x24a>
  4088b0:	ea81 0103 	eor.w	r1, r1, r3
  4088b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4088b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4088bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4088c0:	f04f 0000 	mov.w	r0, #0
  4088c4:	bd70      	pop	{r4, r5, r6, pc}
  4088c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4088ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4088ce:	bd70      	pop	{r4, r5, r6, pc}

004088d0 <__aeabi_ddiv>:
  4088d0:	b570      	push	{r4, r5, r6, lr}
  4088d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4088d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4088da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4088de:	bf1d      	ittte	ne
  4088e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4088e4:	ea94 0f0c 	teqne	r4, ip
  4088e8:	ea95 0f0c 	teqne	r5, ip
  4088ec:	f000 f8a7 	bleq	408a3e <__aeabi_ddiv+0x16e>
  4088f0:	eba4 0405 	sub.w	r4, r4, r5
  4088f4:	ea81 0e03 	eor.w	lr, r1, r3
  4088f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4088fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408900:	f000 8088 	beq.w	408a14 <__aeabi_ddiv+0x144>
  408904:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408908:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40890c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408910:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408914:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408918:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40891c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408920:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408924:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408928:	429d      	cmp	r5, r3
  40892a:	bf08      	it	eq
  40892c:	4296      	cmpeq	r6, r2
  40892e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408932:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408936:	d202      	bcs.n	40893e <__aeabi_ddiv+0x6e>
  408938:	085b      	lsrs	r3, r3, #1
  40893a:	ea4f 0232 	mov.w	r2, r2, rrx
  40893e:	1ab6      	subs	r6, r6, r2
  408940:	eb65 0503 	sbc.w	r5, r5, r3
  408944:	085b      	lsrs	r3, r3, #1
  408946:	ea4f 0232 	mov.w	r2, r2, rrx
  40894a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40894e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408952:	ebb6 0e02 	subs.w	lr, r6, r2
  408956:	eb75 0e03 	sbcs.w	lr, r5, r3
  40895a:	bf22      	ittt	cs
  40895c:	1ab6      	subcs	r6, r6, r2
  40895e:	4675      	movcs	r5, lr
  408960:	ea40 000c 	orrcs.w	r0, r0, ip
  408964:	085b      	lsrs	r3, r3, #1
  408966:	ea4f 0232 	mov.w	r2, r2, rrx
  40896a:	ebb6 0e02 	subs.w	lr, r6, r2
  40896e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408972:	bf22      	ittt	cs
  408974:	1ab6      	subcs	r6, r6, r2
  408976:	4675      	movcs	r5, lr
  408978:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40897c:	085b      	lsrs	r3, r3, #1
  40897e:	ea4f 0232 	mov.w	r2, r2, rrx
  408982:	ebb6 0e02 	subs.w	lr, r6, r2
  408986:	eb75 0e03 	sbcs.w	lr, r5, r3
  40898a:	bf22      	ittt	cs
  40898c:	1ab6      	subcs	r6, r6, r2
  40898e:	4675      	movcs	r5, lr
  408990:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408994:	085b      	lsrs	r3, r3, #1
  408996:	ea4f 0232 	mov.w	r2, r2, rrx
  40899a:	ebb6 0e02 	subs.w	lr, r6, r2
  40899e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4089a2:	bf22      	ittt	cs
  4089a4:	1ab6      	subcs	r6, r6, r2
  4089a6:	4675      	movcs	r5, lr
  4089a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4089ac:	ea55 0e06 	orrs.w	lr, r5, r6
  4089b0:	d018      	beq.n	4089e4 <__aeabi_ddiv+0x114>
  4089b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4089b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4089ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4089be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4089c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4089c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4089ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4089ce:	d1c0      	bne.n	408952 <__aeabi_ddiv+0x82>
  4089d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089d4:	d10b      	bne.n	4089ee <__aeabi_ddiv+0x11e>
  4089d6:	ea41 0100 	orr.w	r1, r1, r0
  4089da:	f04f 0000 	mov.w	r0, #0
  4089de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4089e2:	e7b6      	b.n	408952 <__aeabi_ddiv+0x82>
  4089e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089e8:	bf04      	itt	eq
  4089ea:	4301      	orreq	r1, r0
  4089ec:	2000      	moveq	r0, #0
  4089ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4089f2:	bf88      	it	hi
  4089f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4089f8:	f63f aeaf 	bhi.w	40875a <__aeabi_dmul+0xde>
  4089fc:	ebb5 0c03 	subs.w	ip, r5, r3
  408a00:	bf04      	itt	eq
  408a02:	ebb6 0c02 	subseq.w	ip, r6, r2
  408a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408a0a:	f150 0000 	adcs.w	r0, r0, #0
  408a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408a12:	bd70      	pop	{r4, r5, r6, pc}
  408a14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408a18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408a1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408a20:	bfc2      	ittt	gt
  408a22:	ebd4 050c 	rsbsgt	r5, r4, ip
  408a26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408a2a:	bd70      	popgt	{r4, r5, r6, pc}
  408a2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408a30:	f04f 0e00 	mov.w	lr, #0
  408a34:	3c01      	subs	r4, #1
  408a36:	e690      	b.n	40875a <__aeabi_dmul+0xde>
  408a38:	ea45 0e06 	orr.w	lr, r5, r6
  408a3c:	e68d      	b.n	40875a <__aeabi_dmul+0xde>
  408a3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408a42:	ea94 0f0c 	teq	r4, ip
  408a46:	bf08      	it	eq
  408a48:	ea95 0f0c 	teqeq	r5, ip
  408a4c:	f43f af3b 	beq.w	4088c6 <__aeabi_dmul+0x24a>
  408a50:	ea94 0f0c 	teq	r4, ip
  408a54:	d10a      	bne.n	408a6c <__aeabi_ddiv+0x19c>
  408a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408a5a:	f47f af34 	bne.w	4088c6 <__aeabi_dmul+0x24a>
  408a5e:	ea95 0f0c 	teq	r5, ip
  408a62:	f47f af25 	bne.w	4088b0 <__aeabi_dmul+0x234>
  408a66:	4610      	mov	r0, r2
  408a68:	4619      	mov	r1, r3
  408a6a:	e72c      	b.n	4088c6 <__aeabi_dmul+0x24a>
  408a6c:	ea95 0f0c 	teq	r5, ip
  408a70:	d106      	bne.n	408a80 <__aeabi_ddiv+0x1b0>
  408a72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408a76:	f43f aefd 	beq.w	408874 <__aeabi_dmul+0x1f8>
  408a7a:	4610      	mov	r0, r2
  408a7c:	4619      	mov	r1, r3
  408a7e:	e722      	b.n	4088c6 <__aeabi_dmul+0x24a>
  408a80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a84:	bf18      	it	ne
  408a86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a8a:	f47f aec5 	bne.w	408818 <__aeabi_dmul+0x19c>
  408a8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408a92:	f47f af0d 	bne.w	4088b0 <__aeabi_dmul+0x234>
  408a96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408a9a:	f47f aeeb 	bne.w	408874 <__aeabi_dmul+0x1f8>
  408a9e:	e712      	b.n	4088c6 <__aeabi_dmul+0x24a>

00408aa0 <__gedf2>:
  408aa0:	f04f 3cff 	mov.w	ip, #4294967295
  408aa4:	e006      	b.n	408ab4 <__cmpdf2+0x4>
  408aa6:	bf00      	nop

00408aa8 <__ledf2>:
  408aa8:	f04f 0c01 	mov.w	ip, #1
  408aac:	e002      	b.n	408ab4 <__cmpdf2+0x4>
  408aae:	bf00      	nop

00408ab0 <__cmpdf2>:
  408ab0:	f04f 0c01 	mov.w	ip, #1
  408ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
  408ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408ac4:	bf18      	it	ne
  408ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408aca:	d01b      	beq.n	408b04 <__cmpdf2+0x54>
  408acc:	b001      	add	sp, #4
  408ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408ad2:	bf0c      	ite	eq
  408ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408ad8:	ea91 0f03 	teqne	r1, r3
  408adc:	bf02      	ittt	eq
  408ade:	ea90 0f02 	teqeq	r0, r2
  408ae2:	2000      	moveq	r0, #0
  408ae4:	4770      	bxeq	lr
  408ae6:	f110 0f00 	cmn.w	r0, #0
  408aea:	ea91 0f03 	teq	r1, r3
  408aee:	bf58      	it	pl
  408af0:	4299      	cmppl	r1, r3
  408af2:	bf08      	it	eq
  408af4:	4290      	cmpeq	r0, r2
  408af6:	bf2c      	ite	cs
  408af8:	17d8      	asrcs	r0, r3, #31
  408afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408afe:	f040 0001 	orr.w	r0, r0, #1
  408b02:	4770      	bx	lr
  408b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b0c:	d102      	bne.n	408b14 <__cmpdf2+0x64>
  408b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408b12:	d107      	bne.n	408b24 <__cmpdf2+0x74>
  408b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b1c:	d1d6      	bne.n	408acc <__cmpdf2+0x1c>
  408b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408b22:	d0d3      	beq.n	408acc <__cmpdf2+0x1c>
  408b24:	f85d 0b04 	ldr.w	r0, [sp], #4
  408b28:	4770      	bx	lr
  408b2a:	bf00      	nop

00408b2c <__aeabi_cdrcmple>:
  408b2c:	4684      	mov	ip, r0
  408b2e:	4610      	mov	r0, r2
  408b30:	4662      	mov	r2, ip
  408b32:	468c      	mov	ip, r1
  408b34:	4619      	mov	r1, r3
  408b36:	4663      	mov	r3, ip
  408b38:	e000      	b.n	408b3c <__aeabi_cdcmpeq>
  408b3a:	bf00      	nop

00408b3c <__aeabi_cdcmpeq>:
  408b3c:	b501      	push	{r0, lr}
  408b3e:	f7ff ffb7 	bl	408ab0 <__cmpdf2>
  408b42:	2800      	cmp	r0, #0
  408b44:	bf48      	it	mi
  408b46:	f110 0f00 	cmnmi.w	r0, #0
  408b4a:	bd01      	pop	{r0, pc}

00408b4c <__aeabi_dcmpeq>:
  408b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b50:	f7ff fff4 	bl	408b3c <__aeabi_cdcmpeq>
  408b54:	bf0c      	ite	eq
  408b56:	2001      	moveq	r0, #1
  408b58:	2000      	movne	r0, #0
  408b5a:	f85d fb08 	ldr.w	pc, [sp], #8
  408b5e:	bf00      	nop

00408b60 <__aeabi_dcmplt>:
  408b60:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b64:	f7ff ffea 	bl	408b3c <__aeabi_cdcmpeq>
  408b68:	bf34      	ite	cc
  408b6a:	2001      	movcc	r0, #1
  408b6c:	2000      	movcs	r0, #0
  408b6e:	f85d fb08 	ldr.w	pc, [sp], #8
  408b72:	bf00      	nop

00408b74 <__aeabi_dcmple>:
  408b74:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b78:	f7ff ffe0 	bl	408b3c <__aeabi_cdcmpeq>
  408b7c:	bf94      	ite	ls
  408b7e:	2001      	movls	r0, #1
  408b80:	2000      	movhi	r0, #0
  408b82:	f85d fb08 	ldr.w	pc, [sp], #8
  408b86:	bf00      	nop

00408b88 <__aeabi_dcmpge>:
  408b88:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b8c:	f7ff ffce 	bl	408b2c <__aeabi_cdrcmple>
  408b90:	bf94      	ite	ls
  408b92:	2001      	movls	r0, #1
  408b94:	2000      	movhi	r0, #0
  408b96:	f85d fb08 	ldr.w	pc, [sp], #8
  408b9a:	bf00      	nop

00408b9c <__aeabi_dcmpgt>:
  408b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ba0:	f7ff ffc4 	bl	408b2c <__aeabi_cdrcmple>
  408ba4:	bf34      	ite	cc
  408ba6:	2001      	movcc	r0, #1
  408ba8:	2000      	movcs	r0, #0
  408baa:	f85d fb08 	ldr.w	pc, [sp], #8
  408bae:	bf00      	nop

00408bb0 <__aeabi_dcmpun>:
  408bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bb8:	d102      	bne.n	408bc0 <__aeabi_dcmpun+0x10>
  408bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408bbe:	d10a      	bne.n	408bd6 <__aeabi_dcmpun+0x26>
  408bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bc8:	d102      	bne.n	408bd0 <__aeabi_dcmpun+0x20>
  408bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408bce:	d102      	bne.n	408bd6 <__aeabi_dcmpun+0x26>
  408bd0:	f04f 0000 	mov.w	r0, #0
  408bd4:	4770      	bx	lr
  408bd6:	f04f 0001 	mov.w	r0, #1
  408bda:	4770      	bx	lr

00408bdc <__aeabi_d2iz>:
  408bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408be4:	d215      	bcs.n	408c12 <__aeabi_d2iz+0x36>
  408be6:	d511      	bpl.n	408c0c <__aeabi_d2iz+0x30>
  408be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408bf0:	d912      	bls.n	408c18 <__aeabi_d2iz+0x3c>
  408bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408c02:	fa23 f002 	lsr.w	r0, r3, r2
  408c06:	bf18      	it	ne
  408c08:	4240      	negne	r0, r0
  408c0a:	4770      	bx	lr
  408c0c:	f04f 0000 	mov.w	r0, #0
  408c10:	4770      	bx	lr
  408c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408c16:	d105      	bne.n	408c24 <__aeabi_d2iz+0x48>
  408c18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408c1c:	bf08      	it	eq
  408c1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408c22:	4770      	bx	lr
  408c24:	f04f 0000 	mov.w	r0, #0
  408c28:	4770      	bx	lr
  408c2a:	bf00      	nop

00408c2c <OV2640_JPEG_INIT>:
  408c2c:	00ff ff2c df2e 01ff 323c 0311 0209 2804     ..,.....<2.....(
  408c3c:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  408c4c:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  408c5c:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408c6c:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408c7c:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408c8c:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408c9c:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408cac:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408cbc:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408ccc:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408cdc:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408cec:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408cfc:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  408d0c:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  408d1c:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  408d2c:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  408d3c:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  408d4c:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  408d5c:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408d6c:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408d7c:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408d8c:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408d9c:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408dac <OV2640_YUV422>:
  408dac:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408dbc:	0000 ffff                                   ....

00408dc0 <OV2640_JPEG>:
  408dc0:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408dd0:	ffff 0000                                   ....

00408dd4 <OV2640_JPEG_320x240>:
  408dd4:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  408de4:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  408df4:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  408e04:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  408e14:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

00408e24 <OV2640_JPEG_640x480>:
  408e24:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e34:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408e44:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408e54:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  408e64:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  408e74:	ffff 0000                                   ....

00408e78 <OV2640_JPEG_800x600>:
  408e78:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e88:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408e98:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408ea8:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408eb8:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408ec8:	ffff 0000                                   ....

00408ecc <OV2640_JPEG_1024x768>:
  408ecc:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408edc:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408eec:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408efc:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408f0c:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

00408f1c <OV2640_JPEG_1280x1024>:
  408f1c:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408f2c:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408f3c:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408f4c:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408f5c:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408f6c:	ffff 0000                                   ....

00408f70 <OV2640_JPEG_1600x1200>:
  408f70:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408f80:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408f90:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408fa0:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408fb0:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408fc0:	ffff 0000                                   ....

00408fc4 <OV2640_QVGA_YUV422_10FPS>:
  408fc4:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  408fd4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408fe4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408ff4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409004:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409014:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409024:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409034:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409044:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409054:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409064:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409074:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409084:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409094:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4090a4:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004090b4 <OV2640_QVGA_YUV422_15FPS>:
  4090b4:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  4090c4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4090d4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4090e4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4090f4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409104:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409114:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409124:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409134:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409144:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409154:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409164:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409174:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409184:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409194:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004091a4 <OV2640_QVGA_YUV422_20FPS>:
  4091a4:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  4091b4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4091c4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4091d4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4091e4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4091f4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409204:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409214:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409224:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409234:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409244:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409254:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409264:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409274:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409284:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409294 <OV2640_QVGA_YUV422_30FPS>:
  409294:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  4092a4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4092b4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4092c4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4092d4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4092e4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4092f4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409304:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409314:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409324:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409334:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409344:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409354:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409364:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409374:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409384 <OV2640_QVGA_RGB888>:
  409384:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  409394:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  4093a4:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  4093b4:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4093c4:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4093d4:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4093e4:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  4093f4:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  409404:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  409414:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  409424:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  409434:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  409444:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  409454:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  409464:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  409474:	0228 ffff                                   (...

00409478 <OV2640_QQVGA_YUV422>:
  409478:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  409488:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  409498:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  4094a8:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  4094b8:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  4094c8:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  4094d8:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  4094e8:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  4094f8:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  409508:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409518:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409528:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409538:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409548:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  409558:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  409568:	00d9 ffff                                   ....

0040956c <OV2640_QQVGA_RGB888>:
  40956c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40957c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40958c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40959c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4095ac:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4095bc:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4095cc:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  4095dc:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  4095ec:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  4095fc:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  40960c:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40961c:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40962c:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40963c:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  40964c:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40965c:	0228 ffff                                   (...

00409660 <OV2640_TEST_PATTERN>:
  409660:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409670:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409680:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409690:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4096a0:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4096b0:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4096c0:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  4096d0:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  4096e0:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  4096f0:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  409700:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  409710:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  409720:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  409730:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  409740:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  409750:	0228 ffff                                   (...

00409754 <OV2640_VGA_YUV422_20FPS>:
  409754:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409764:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409774:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409784:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409794:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4097a4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4097b4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4097c4:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4097d4:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4097e4:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4097f4:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409804:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409814:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409824:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  409834:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  409844:	1000 000e 00c0 0000 0800 0000 0000 0000     ................
	...
  40985c:	704f 6e65 6465 203a 0000 0000 6577 7362     Opened: ....webs
  40986c:	636f 656b 5f74 6c63 6569 746e 2d20 2066     ocket_client -f 
  40987c:	6962 206e 7377 3a73 2f2f 6962 6267 6f72     bin wss://bigbro
  40988c:	6874 7265 6573 7365 6d2e 2f65 6f73 7275     thersees.me/sour
  40989c:	6563 615f 6475 6f69 735f 636f 656b 0d74     ce_audio_socket.
  4098ac:	000a 0000 7553 6363 7365 0073 6c63 736f     ....Success.clos
  4098bc:	2065 6c61 0d6c 000a 6425 5720 4245 0043     e all...%d WEBC.
  4098cc:	696c 7473 0a0d 0000 7341 6f73 6963 7461     list....Associat
  4098dc:	6465 005d 6573 7574 2070 6577 0d62 000a     ed].setup web...
  4098ec:	6567 2074 7973 7473 6d65 732e 6661 6d65     get system.safem
  4098fc:	646f 2e65 7473 7461 7375 0a0d 0000 0000     ode.status......
  40990c:	6166 6c75 7374 705f 6972 746e 0a0d 0000     faults_print....
  40991c:	6166 6c75 7374 725f 7365 7465 0a0d 0000     faults_reset....
  40992c:	6572 6f62 746f 0a0d 0000 0000 6553 2074     reboot......Set 
  40993c:	4b4f 0000 6573 2074 7973 6320 7020 6f20     OK..set sy c p o
  40994c:	6666 0a0d 0000 0000 6573 2074 7973 6320     ff......set sy c
  40995c:	6520 6f20 6666 0a0d 0000 0000 7277 7469      e off......writ
  40996c:	2065 6425 3120 0d30 690a 616d 6567 6420     e %d 10..image d
  40997c:	6e6f 0065 435b 6f6c 6573 3a64 0020 0000     one.[Closed: ...
  40998c:	0a0d 0000 7277 7469 2065 6425 2520 0d64     ....write %d %d.
  40999c:	000a 0000 6f43 6d6d 6e61 2064 6166 6c69     ....Command fail
  4099ac:	6465 0000                                   ed..

004099b0 <_global_impure_ptr>:
  4099b0:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  4099c0:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4099d0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4099e0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4099f0:	296c 0000 0030 0000                         l)..0...

004099f8 <blanks.7208>:
  4099f8:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409a08 <zeroes.7209>:
  409a08:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409a18:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409a28:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

00409a38 <__mprec_bigtens>:
  409a38:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409a48:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409a58:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409a60 <__mprec_tens>:
  409a60:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409a70:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409a80:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409a90:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409aa0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409ab0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409ac0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409ad0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409ae0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409af0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409b00:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409b10:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409b20:	9db4 79d9 7843 44ea                         ...yCx.D

00409b28 <p05.6040>:
  409b28:	0005 0000 0019 0000 007d 0000               ........}...

00409b34 <_ctype_>:
  409b34:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  409b44:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409b54:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  409b64:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  409b74:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  409b84:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  409b94:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  409ba4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  409bb4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409c38 <_init>:
  409c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c3a:	bf00      	nop
  409c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c3e:	bc08      	pop	{r3}
  409c40:	469e      	mov	lr, r3
  409c42:	4770      	bx	lr

00409c44 <__init_array_start>:
  409c44:	00405bb1 	.word	0x00405bb1

00409c48 <__frame_dummy_init_array_entry>:
  409c48:	004000f1                                ..@.

00409c4c <_fini>:
  409c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c4e:	bf00      	nop
  409c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c52:	bc08      	pop	{r3}
  409c54:	469e      	mov	lr, r3
  409c56:	4770      	bx	lr

00409c58 <__fini_array_start>:
  409c58:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <ws_handle>:
2000000a:	000a                                        ..

2000000c <reopen_delay_seconds>:
2000000c:	0005 0000                                   ....

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <_impure_ptr>:
20000014:	0018 2000                                   ... 

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__global_locale>:
20000440:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000460:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000480:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000500:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000520:	81ed 0040 7369 0040 0000 0000 9b34 0040     ..@.is@.....4.@.
20000530:	9a34 0040 99d4 0040 99d4 0040 99d4 0040     4.@...@...@...@.
20000540:	99d4 0040 99d4 0040 99d4 0040 99d4 0040     ..@...@...@...@.
20000550:	99d4 0040 99d4 0040 ffff ffff ffff ffff     ..@...@.........
20000560:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000588:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005ac <__malloc_av_>:
	...
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 

200009b4 <__malloc_sbrk_base>:
200009b4:	ffff ffff                                   ....

200009b8 <__malloc_trim_threshold>:
200009b8:	0000 0002                                   ....
