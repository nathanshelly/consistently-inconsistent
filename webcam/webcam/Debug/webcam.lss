
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008058  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408058  00408058  00018058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20000000  00408060  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00007ff0  20000884  004088e4  00020884  2**2
                  ALLOC
  4 .stack        00003004  20008874  004108d4  00020884  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ae  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b166  00000000  00000000  00020907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d9a  00000000  00000000  0002ba6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000725c  00000000  00000000  0002d807  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c60  00000000  00000000  00034a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb0  00000000  00000000  000356c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000674c  00000000  00000000  00036273  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d826  00000000  00000000  0003c9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f607  00000000  00000000  0004a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003e84  00000000  00000000  000997ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b878 	.word	0x2000b878
  400004:	004024cd 	.word	0x004024cd
  400008:	00402595 	.word	0x00402595
  40000c:	00402595 	.word	0x00402595
  400010:	00402595 	.word	0x00402595
  400014:	00402595 	.word	0x00402595
  400018:	00402595 	.word	0x00402595
	...
  40002c:	00402595 	.word	0x00402595
  400030:	00402595 	.word	0x00402595
  400034:	00000000 	.word	0x00000000
  400038:	00402595 	.word	0x00402595
  40003c:	00402595 	.word	0x00402595
  400040:	00402595 	.word	0x00402595
  400044:	00402595 	.word	0x00402595
  400048:	00402595 	.word	0x00402595
  40004c:	00402595 	.word	0x00402595
  400050:	00402595 	.word	0x00402595
  400054:	00402595 	.word	0x00402595
  400058:	00402595 	.word	0x00402595
  40005c:	00000000 	.word	0x00000000
  400060:	00402595 	.word	0x00402595
  400064:	00402595 	.word	0x00402595
  400068:	00000000 	.word	0x00000000
  40006c:	004009b1 	.word	0x004009b1
  400070:	004009c9 	.word	0x004009c9
  400074:	00000000 	.word	0x00000000
  400078:	00400fd9 	.word	0x00400fd9
  40007c:	00402595 	.word	0x00402595
	...
  400088:	00402595 	.word	0x00402595
  40008c:	00402595 	.word	0x00402595
  400090:	00402595 	.word	0x00402595
  400094:	00402595 	.word	0x00402595
  400098:	00400709 	.word	0x00400709
  40009c:	00400e19 	.word	0x00400e19
  4000a0:	00402595 	.word	0x00402595
  4000a4:	00402595 	.word	0x00402595
	...
  4000b4:	00402595 	.word	0x00402595
  4000b8:	00402595 	.word	0x00402595
  4000bc:	00402595 	.word	0x00402595
  4000c0:	00402595 	.word	0x00402595
  4000c4:	00402595 	.word	0x00402595
  4000c8:	00402595 	.word	0x00402595

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000884 	.word	0x20000884
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00408060 	.word	0x00408060

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000888 	.word	0x20000888
  40011c:	00408060 	.word	0x00408060
  400120:	00408060 	.word	0x00408060
  400124:	00000000 	.word	0x00000000

00400128 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400128:	b480      	push	{r7}
  40012a:	b085      	sub	sp, #20
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	2b00      	cmp	r3, #0
  400138:	d00f      	beq.n	40015a <ssc_set_clock_divider+0x32>
  40013a:	68bb      	ldr	r3, [r7, #8]
  40013c:	2b00      	cmp	r3, #0
  40013e:	d00c      	beq.n	40015a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400140:	687a      	ldr	r2, [r7, #4]
  400142:	68bb      	ldr	r3, [r7, #8]
  400144:	441a      	add	r2, r3
  400146:	68bb      	ldr	r3, [r7, #8]
  400148:	fbb2 f3f3 	udiv	r3, r2, r3
  40014c:	085b      	lsrs	r3, r3, #1
  40014e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400156:	2300      	movs	r3, #0
  400158:	e000      	b.n	40015c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40015a:	2301      	movs	r3, #1
	}
}
  40015c:	4618      	mov	r0, r3
  40015e:	3714      	adds	r7, #20
  400160:	46bd      	mov	sp, r7
  400162:	bc80      	pop	{r7}
  400164:	4770      	bx	lr
  400166:	bf00      	nop

00400168 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400168:	b580      	push	{r7, lr}
  40016a:	b092      	sub	sp, #72	; 0x48
  40016c:	af00      	add	r7, sp, #0
  40016e:	60f8      	str	r0, [r7, #12]
  400170:	60b9      	str	r1, [r7, #8]
  400172:	607a      	str	r2, [r7, #4]
  400174:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40017a:	221c      	movs	r2, #28
  40017c:	2100      	movs	r1, #0
  40017e:	4618      	mov	r0, r3
  400180:	4b36      	ldr	r3, [pc, #216]	; (40025c <ssc_i2s_set_receiver+0xf4>)
  400182:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400184:	f107 0310 	add.w	r3, r7, #16
  400188:	221c      	movs	r2, #28
  40018a:	2100      	movs	r1, #0
  40018c:	4618      	mov	r0, r3
  40018e:	4b33      	ldr	r3, [pc, #204]	; (40025c <ssc_i2s_set_receiver+0xf4>)
  400190:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  400192:	683b      	ldr	r3, [r7, #0]
  400194:	2b02      	cmp	r3, #2
  400196:	d004      	beq.n	4001a2 <ssc_i2s_set_receiver+0x3a>
  400198:	2b03      	cmp	r3, #3
  40019a:	d00a      	beq.n	4001b2 <ssc_i2s_set_receiver+0x4a>
  40019c:	2b01      	cmp	r3, #1
  40019e:	d004      	beq.n	4001aa <ssc_i2s_set_receiver+0x42>
  4001a0:	e00b      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001a6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001a8:	e007      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001ae:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b0:	e003      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ba:	68bb      	ldr	r3, [r7, #8]
  4001bc:	f003 0302 	and.w	r3, r3, #2
  4001c0:	2b00      	cmp	r3, #0
  4001c2:	d022      	beq.n	40020a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001c4:	683b      	ldr	r3, [r7, #0]
  4001c6:	2b03      	cmp	r3, #3
  4001c8:	d102      	bne.n	4001d0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001ca:	2301      	movs	r3, #1
  4001cc:	61bb      	str	r3, [r7, #24]
  4001ce:	e001      	b.n	4001d4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001d0:	2300      	movs	r3, #0
  4001d2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001d4:	2300      	movs	r3, #0
  4001d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001d8:	2304      	movs	r3, #4
  4001da:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001dc:	2300      	movs	r3, #0
  4001de:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001e4:	2301      	movs	r3, #1
  4001e6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001ea:	3b01      	subs	r3, #1
  4001ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001f0:	3b01      	subs	r3, #1
  4001f2:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4001f4:	2380      	movs	r3, #128	; 0x80
  4001f6:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  4001fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400202:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400204:	2300      	movs	r3, #0
  400206:	62bb      	str	r3, [r7, #40]	; 0x28
  400208:	e01b      	b.n	400242 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40020a:	68bb      	ldr	r3, [r7, #8]
  40020c:	f003 0308 	and.w	r3, r3, #8
  400210:	2b00      	cmp	r3, #0
  400212:	d016      	beq.n	400242 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400214:	687b      	ldr	r3, [r7, #4]
  400216:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400218:	2300      	movs	r3, #0
  40021a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40021c:	2300      	movs	r3, #0
  40021e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400220:	2300      	movs	r3, #0
  400222:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400224:	2301      	movs	r3, #1
  400226:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400228:	2300      	movs	r3, #0
  40022a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40022c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40022e:	3b01      	subs	r3, #1
  400230:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400232:	2380      	movs	r3, #128	; 0x80
  400234:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400236:	2300      	movs	r3, #0
  400238:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40023a:	2300      	movs	r3, #0
  40023c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40023e:	2300      	movs	r3, #0
  400240:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400242:	f107 0210 	add.w	r2, r7, #16
  400246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40024a:	4619      	mov	r1, r3
  40024c:	68f8      	ldr	r0, [r7, #12]
  40024e:	4b04      	ldr	r3, [pc, #16]	; (400260 <ssc_i2s_set_receiver+0xf8>)
  400250:	4798      	blx	r3
}
  400252:	bf00      	nop
  400254:	3748      	adds	r7, #72	; 0x48
  400256:	46bd      	mov	sp, r7
  400258:	bd80      	pop	{r7, pc}
  40025a:	bf00      	nop
  40025c:	00402df1 	.word	0x00402df1
  400260:	004002b5 	.word	0x004002b5

00400264 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400264:	b480      	push	{r7}
  400266:	b083      	sub	sp, #12
  400268:	af00      	add	r7, sp, #0
  40026a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40026c:	687b      	ldr	r3, [r7, #4]
  40026e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400272:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400274:	687b      	ldr	r3, [r7, #4]
  400276:	2200      	movs	r2, #0
  400278:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	2200      	movs	r2, #0
  40027e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400280:	687b      	ldr	r3, [r7, #4]
  400282:	2200      	movs	r2, #0
  400284:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400286:	687b      	ldr	r3, [r7, #4]
  400288:	2200      	movs	r2, #0
  40028a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40028c:	687b      	ldr	r3, [r7, #4]
  40028e:	2200      	movs	r2, #0
  400290:	61da      	str	r2, [r3, #28]
}
  400292:	bf00      	nop
  400294:	370c      	adds	r7, #12
  400296:	46bd      	mov	sp, r7
  400298:	bc80      	pop	{r7}
  40029a:	4770      	bx	lr

0040029c <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  40029c:	b480      	push	{r7}
  40029e:	b083      	sub	sp, #12
  4002a0:	af00      	add	r7, sp, #0
  4002a2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002a4:	687b      	ldr	r3, [r7, #4]
  4002a6:	2201      	movs	r2, #1
  4002a8:	601a      	str	r2, [r3, #0]
}
  4002aa:	bf00      	nop
  4002ac:	370c      	adds	r7, #12
  4002ae:	46bd      	mov	sp, r7
  4002b0:	bc80      	pop	{r7}
  4002b2:	4770      	bx	lr

004002b4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002b4:	b480      	push	{r7}
  4002b6:	b085      	sub	sp, #20
  4002b8:	af00      	add	r7, sp, #0
  4002ba:	60f8      	str	r0, [r7, #12]
  4002bc:	60b9      	str	r1, [r7, #8]
  4002be:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002c0:	68bb      	ldr	r3, [r7, #8]
  4002c2:	2b00      	cmp	r3, #0
  4002c4:	d103      	bne.n	4002ce <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	2200      	movs	r2, #0
  4002ca:	611a      	str	r2, [r3, #16]
  4002cc:	e01c      	b.n	400308 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ce:	68fb      	ldr	r3, [r7, #12]
  4002d0:	691a      	ldr	r2, [r3, #16]
  4002d2:	68bb      	ldr	r3, [r7, #8]
  4002d4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002d6:	68bb      	ldr	r3, [r7, #8]
  4002d8:	685b      	ldr	r3, [r3, #4]
		data_frame_opt_t *p_rx_data_frame)
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002da:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002dc:	68bb      	ldr	r3, [r7, #8]
  4002de:	689b      	ldr	r3, [r3, #8]
  4002e0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	68db      	ldr	r3, [r3, #12]
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	699b      	ldr	r3, [r3, #24]
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
  4002ec:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002ee:	68bb      	ldr	r3, [r7, #8]
  4002f0:	691b      	ldr	r3, [r3, #16]
  4002f2:	061b      	lsls	r3, r3, #24
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
  4002f4:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4002f6:	68bb      	ldr	r3, [r7, #8]
  4002f8:	695b      	ldr	r3, [r3, #20]
  4002fa:	041b      	lsls	r3, r3, #16
  4002fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400300:	430b      	orrs	r3, r1
		data_frame_opt_t *p_rx_data_frame)
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400302:	431a      	orrs	r2, r3
  400304:	68fb      	ldr	r3, [r7, #12]
  400306:	611a      	str	r2, [r3, #16]
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
	}

	if (p_rx_data_frame == NULL) {
  400308:	687b      	ldr	r3, [r7, #4]
  40030a:	2b00      	cmp	r3, #0
  40030c:	d103      	bne.n	400316 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40030e:	68fb      	ldr	r3, [r7, #12]
  400310:	2200      	movs	r2, #0
  400312:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400314:	e021      	b.n	40035a <ssc_set_receiver+0xa6>
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400316:	68fb      	ldr	r3, [r7, #12]
  400318:	695a      	ldr	r2, [r3, #20]
  40031a:	687b      	ldr	r3, [r7, #4]
  40031c:	681b      	ldr	r3, [r3, #0]
  40031e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400322:	687b      	ldr	r3, [r7, #4]
  400324:	685b      	ldr	r3, [r3, #4]
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400328:	687b      	ldr	r3, [r7, #4]
  40032a:	689b      	ldr	r3, [r3, #8]
  40032c:	021b      	lsls	r3, r3, #8
  40032e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
  400332:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	68db      	ldr	r3, [r3, #12]
  400338:	041b      	lsls	r3, r3, #16
  40033a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40033e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400340:	687b      	ldr	r3, [r7, #4]
  400342:	691b      	ldr	r3, [r3, #16]
  400344:	071b      	lsls	r3, r3, #28
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400346:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	695b      	ldr	r3, [r3, #20]
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40034c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
  40034e:	687b      	ldr	r3, [r7, #4]
  400350:	699b      	ldr	r3, [r3, #24]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
  400352:	430b      	orrs	r3, r1
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400354:	431a      	orrs	r2, r3
  400356:	68fb      	ldr	r3, [r7, #12]
  400358:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  40035a:	bf00      	nop
  40035c:	3714      	adds	r7, #20
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400364:	b480      	push	{r7}
  400366:	b083      	sub	sp, #12
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
  40036c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40036e:	687b      	ldr	r3, [r7, #4]
  400370:	683a      	ldr	r2, [r7, #0]
  400372:	645a      	str	r2, [r3, #68]	; 0x44
}
  400374:	bf00      	nop
  400376:	370c      	adds	r7, #12
  400378:	46bd      	mov	sp, r7
  40037a:	bc80      	pop	{r7}
  40037c:	4770      	bx	lr
  40037e:	bf00      	nop

00400380 <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  400380:	b480      	push	{r7}
  400382:	b083      	sub	sp, #12
  400384:	af00      	add	r7, sp, #0
  400386:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  400388:	687b      	ldr	r3, [r7, #4]
  40038a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  40038c:	4618      	mov	r0, r3
  40038e:	370c      	adds	r7, #12
  400390:	46bd      	mov	sp, r7
  400392:	bc80      	pop	{r7}
  400394:	4770      	bx	lr
  400396:	bf00      	nop

00400398 <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  400398:	b480      	push	{r7}
  40039a:	b085      	sub	sp, #20
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003a2:	f242 7310 	movw	r3, #10000	; 0x2710
  4003a6:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003a8:	e006      	b.n	4003b8 <ssc_read+0x20>
		if (!ul_timeout--) {
  4003aa:	68fb      	ldr	r3, [r7, #12]
  4003ac:	1e5a      	subs	r2, r3, #1
  4003ae:	60fa      	str	r2, [r7, #12]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d101      	bne.n	4003b8 <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003b4:	2301      	movs	r3, #1
  4003b6:	e00a      	b.n	4003ce <ssc_read+0x36>
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003b8:	687b      	ldr	r3, [r7, #4]
  4003ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003bc:	f003 0310 	and.w	r3, r3, #16
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	d0f2      	beq.n	4003aa <ssc_read+0x12>
		if (!ul_timeout--) {
			return SSC_RC_ERROR;
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	6a1a      	ldr	r2, [r3, #32]
  4003c8:	683b      	ldr	r3, [r7, #0]
  4003ca:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003cc:	2300      	movs	r3, #0
}
  4003ce:	4618      	mov	r0, r3
  4003d0:	3714      	adds	r7, #20
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bc80      	pop	{r7}
  4003d6:	4770      	bx	lr

004003d8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003d8:	b480      	push	{r7}
  4003da:	b087      	sub	sp, #28
  4003dc:	af00      	add	r7, sp, #0
  4003de:	60f8      	str	r0, [r7, #12]
  4003e0:	60b9      	str	r1, [r7, #8]
  4003e2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e4:	68fa      	ldr	r2, [r7, #12]
  4003e6:	68bb      	ldr	r3, [r7, #8]
  4003e8:	019b      	lsls	r3, r3, #6
  4003ea:	4413      	add	r3, r2
  4003ec:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003ee:	697b      	ldr	r3, [r7, #20]
  4003f0:	2202      	movs	r2, #2
  4003f2:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4003f4:	697b      	ldr	r3, [r7, #20]
  4003f6:	f04f 32ff 	mov.w	r2, #4294967295
  4003fa:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4003fc:	697b      	ldr	r3, [r7, #20]
  4003fe:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400400:	697b      	ldr	r3, [r7, #20]
  400402:	687a      	ldr	r2, [r7, #4]
  400404:	605a      	str	r2, [r3, #4]
}
  400406:	bf00      	nop
  400408:	371c      	adds	r7, #28
  40040a:	46bd      	mov	sp, r7
  40040c:	bc80      	pop	{r7}
  40040e:	4770      	bx	lr

00400410 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400410:	b480      	push	{r7}
  400412:	b083      	sub	sp, #12
  400414:	af00      	add	r7, sp, #0
  400416:	6078      	str	r0, [r7, #4]
  400418:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40041a:	687a      	ldr	r2, [r7, #4]
  40041c:	683b      	ldr	r3, [r7, #0]
  40041e:	019b      	lsls	r3, r3, #6
  400420:	4413      	add	r3, r2
  400422:	2205      	movs	r2, #5
  400424:	601a      	str	r2, [r3, #0]
}
  400426:	bf00      	nop
  400428:	370c      	adds	r7, #12
  40042a:	46bd      	mov	sp, r7
  40042c:	bc80      	pop	{r7}
  40042e:	4770      	bx	lr

00400430 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400430:	b480      	push	{r7}
  400432:	b085      	sub	sp, #20
  400434:	af00      	add	r7, sp, #0
  400436:	60f8      	str	r0, [r7, #12]
  400438:	60b9      	str	r1, [r7, #8]
  40043a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40043c:	68fa      	ldr	r2, [r7, #12]
  40043e:	68bb      	ldr	r3, [r7, #8]
  400440:	019b      	lsls	r3, r3, #6
  400442:	4413      	add	r3, r2
  400444:	331c      	adds	r3, #28
  400446:	687a      	ldr	r2, [r7, #4]
  400448:	601a      	str	r2, [r3, #0]
}
  40044a:	bf00      	nop
  40044c:	3714      	adds	r7, #20
  40044e:	46bd      	mov	sp, r7
  400450:	bc80      	pop	{r7}
  400452:	4770      	bx	lr

00400454 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400454:	b480      	push	{r7}
  400456:	b087      	sub	sp, #28
  400458:	af00      	add	r7, sp, #0
  40045a:	60f8      	str	r0, [r7, #12]
  40045c:	60b9      	str	r1, [r7, #8]
  40045e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400460:	68fa      	ldr	r2, [r7, #12]
  400462:	68bb      	ldr	r3, [r7, #8]
  400464:	019b      	lsls	r3, r3, #6
  400466:	4413      	add	r3, r2
  400468:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  40046a:	697b      	ldr	r3, [r7, #20]
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	625a      	str	r2, [r3, #36]	; 0x24
}
  400470:	bf00      	nop
  400472:	371c      	adds	r7, #28
  400474:	46bd      	mov	sp, r7
  400476:	bc80      	pop	{r7}
  400478:	4770      	bx	lr
  40047a:	bf00      	nop

0040047c <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40047c:	b480      	push	{r7}
  40047e:	b085      	sub	sp, #20
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
  400484:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400486:	687a      	ldr	r2, [r7, #4]
  400488:	683b      	ldr	r3, [r7, #0]
  40048a:	019b      	lsls	r3, r3, #6
  40048c:	4413      	add	r3, r2
  40048e:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400490:	68fb      	ldr	r3, [r7, #12]
  400492:	6a1b      	ldr	r3, [r3, #32]
}
  400494:	4618      	mov	r0, r3
  400496:	3714      	adds	r7, #20
  400498:	46bd      	mov	sp, r7
  40049a:	bc80      	pop	{r7}
  40049c:	4770      	bx	lr
  40049e:	bf00      	nop

004004a0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b08d      	sub	sp, #52	; 0x34
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	60f8      	str	r0, [r7, #12]
  4004a8:	60b9      	str	r1, [r7, #8]
  4004aa:	607a      	str	r2, [r7, #4]
  4004ac:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004ae:	2302      	movs	r3, #2
  4004b0:	613b      	str	r3, [r7, #16]
  4004b2:	2308      	movs	r3, #8
  4004b4:	617b      	str	r3, [r7, #20]
  4004b6:	2320      	movs	r3, #32
  4004b8:	61bb      	str	r3, [r7, #24]
  4004ba:	2380      	movs	r3, #128	; 0x80
  4004bc:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004c0:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004c2:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004c4:	2300      	movs	r3, #0
  4004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004c8:	e01a      	b.n	400500 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004cc:	009b      	lsls	r3, r3, #2
  4004ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004d2:	4413      	add	r3, r2
  4004d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004d8:	68ba      	ldr	r2, [r7, #8]
  4004da:	fbb2 f3f3 	udiv	r3, r2, r3
  4004de:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4004e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004e2:	0c1b      	lsrs	r3, r3, #16
  4004e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4004e6:	68fa      	ldr	r2, [r7, #12]
  4004e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004ea:	429a      	cmp	r2, r3
  4004ec:	d901      	bls.n	4004f2 <tc_find_mck_divisor+0x52>
			return 0;
  4004ee:	2300      	movs	r3, #0
  4004f0:	e023      	b.n	40053a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4004f2:	68fa      	ldr	r2, [r7, #12]
  4004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004f6:	429a      	cmp	r2, r3
  4004f8:	d206      	bcs.n	400508 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004fc:	3301      	adds	r3, #1
  4004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400502:	2b04      	cmp	r3, #4
  400504:	d9e1      	bls.n	4004ca <tc_find_mck_divisor+0x2a>
  400506:	e000      	b.n	40050a <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  400508:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40050c:	2b04      	cmp	r3, #4
  40050e:	d901      	bls.n	400514 <tc_find_mck_divisor+0x74>
		return 0;
  400510:	2300      	movs	r3, #0
  400512:	e012      	b.n	40053a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400514:	687b      	ldr	r3, [r7, #4]
  400516:	2b00      	cmp	r3, #0
  400518:	d008      	beq.n	40052c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40051c:	009b      	lsls	r3, r3, #2
  40051e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400522:	4413      	add	r3, r2
  400524:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400528:	687b      	ldr	r3, [r7, #4]
  40052a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40052c:	683b      	ldr	r3, [r7, #0]
  40052e:	2b00      	cmp	r3, #0
  400530:	d002      	beq.n	400538 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400532:	683b      	ldr	r3, [r7, #0]
  400534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400536:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400538:	2301      	movs	r3, #1
}
  40053a:	4618      	mov	r0, r3
  40053c:	3734      	adds	r7, #52	; 0x34
  40053e:	46bd      	mov	sp, r7
  400540:	bc80      	pop	{r7}
  400542:	4770      	bx	lr

00400544 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400544:	b480      	push	{r7}
  400546:	b083      	sub	sp, #12
  400548:	af00      	add	r7, sp, #0
  40054a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40054c:	687b      	ldr	r3, [r7, #4]
  40054e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400552:	605a      	str	r2, [r3, #4]

}
  400554:	bf00      	nop
  400556:	370c      	adds	r7, #12
  400558:	46bd      	mov	sp, r7
  40055a:	bc80      	pop	{r7}
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	4603      	mov	r3, r0
  400568:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40056a:	4908      	ldr	r1, [pc, #32]	; (40058c <NVIC_EnableIRQ+0x2c>)
  40056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400570:	095b      	lsrs	r3, r3, #5
  400572:	79fa      	ldrb	r2, [r7, #7]
  400574:	f002 021f 	and.w	r2, r2, #31
  400578:	2001      	movs	r0, #1
  40057a:	fa00 f202 	lsl.w	r2, r0, r2
  40057e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400582:	bf00      	nop
  400584:	370c      	adds	r7, #12
  400586:	46bd      	mov	sp, r7
  400588:	bc80      	pop	{r7}
  40058a:	4770      	bx	lr
  40058c:	e000e100 	.word	0xe000e100

00400590 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400590:	b480      	push	{r7}
  400592:	b083      	sub	sp, #12
  400594:	af00      	add	r7, sp, #0
  400596:	4603      	mov	r3, r0
  400598:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40059a:	4909      	ldr	r1, [pc, #36]	; (4005c0 <NVIC_DisableIRQ+0x30>)
  40059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005a0:	095b      	lsrs	r3, r3, #5
  4005a2:	79fa      	ldrb	r2, [r7, #7]
  4005a4:	f002 021f 	and.w	r2, r2, #31
  4005a8:	2001      	movs	r0, #1
  4005aa:	fa00 f202 	lsl.w	r2, r0, r2
  4005ae:	3320      	adds	r3, #32
  4005b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005b4:	bf00      	nop
  4005b6:	370c      	adds	r7, #12
  4005b8:	46bd      	mov	sp, r7
  4005ba:	bc80      	pop	{r7}
  4005bc:	4770      	bx	lr
  4005be:	bf00      	nop
  4005c0:	e000e100 	.word	0xe000e100

004005c4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005c4:	b480      	push	{r7}
  4005c6:	b083      	sub	sp, #12
  4005c8:	af00      	add	r7, sp, #0
  4005ca:	4603      	mov	r3, r0
  4005cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005ce:	4909      	ldr	r1, [pc, #36]	; (4005f4 <NVIC_ClearPendingIRQ+0x30>)
  4005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005d4:	095b      	lsrs	r3, r3, #5
  4005d6:	79fa      	ldrb	r2, [r7, #7]
  4005d8:	f002 021f 	and.w	r2, r2, #31
  4005dc:	2001      	movs	r0, #1
  4005de:	fa00 f202 	lsl.w	r2, r0, r2
  4005e2:	3360      	adds	r3, #96	; 0x60
  4005e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005e8:	bf00      	nop
  4005ea:	370c      	adds	r7, #12
  4005ec:	46bd      	mov	sp, r7
  4005ee:	bc80      	pop	{r7}
  4005f0:	4770      	bx	lr
  4005f2:	bf00      	nop
  4005f4:	e000e100 	.word	0xe000e100

004005f8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4005f8:	b480      	push	{r7}
  4005fa:	b083      	sub	sp, #12
  4005fc:	af00      	add	r7, sp, #0
  4005fe:	4603      	mov	r3, r0
  400600:	6039      	str	r1, [r7, #0]
  400602:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400604:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400608:	2b00      	cmp	r3, #0
  40060a:	da0b      	bge.n	400624 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40060c:	490d      	ldr	r1, [pc, #52]	; (400644 <NVIC_SetPriority+0x4c>)
  40060e:	79fb      	ldrb	r3, [r7, #7]
  400610:	f003 030f 	and.w	r3, r3, #15
  400614:	3b04      	subs	r3, #4
  400616:	683a      	ldr	r2, [r7, #0]
  400618:	b2d2      	uxtb	r2, r2
  40061a:	0112      	lsls	r2, r2, #4
  40061c:	b2d2      	uxtb	r2, r2
  40061e:	440b      	add	r3, r1
  400620:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400622:	e009      	b.n	400638 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400624:	4908      	ldr	r1, [pc, #32]	; (400648 <NVIC_SetPriority+0x50>)
  400626:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40062a:	683a      	ldr	r2, [r7, #0]
  40062c:	b2d2      	uxtb	r2, r2
  40062e:	0112      	lsls	r2, r2, #4
  400630:	b2d2      	uxtb	r2, r2
  400632:	440b      	add	r3, r1
  400634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400638:	bf00      	nop
  40063a:	370c      	adds	r7, #12
  40063c:	46bd      	mov	sp, r7
  40063e:	bc80      	pop	{r7}
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	e000ed00 	.word	0xe000ed00
  400648:	e000e100 	.word	0xe000e100

0040064c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40064c:	b480      	push	{r7}
  40064e:	b083      	sub	sp, #12
  400650:	af00      	add	r7, sp, #0
  400652:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400654:	687b      	ldr	r3, [r7, #4]
  400656:	2b07      	cmp	r3, #7
  400658:	d825      	bhi.n	4006a6 <osc_get_rate+0x5a>
  40065a:	a201      	add	r2, pc, #4	; (adr r2, 400660 <osc_get_rate+0x14>)
  40065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400660:	00400681 	.word	0x00400681
  400664:	00400687 	.word	0x00400687
  400668:	0040068d 	.word	0x0040068d
  40066c:	00400693 	.word	0x00400693
  400670:	00400697 	.word	0x00400697
  400674:	0040069b 	.word	0x0040069b
  400678:	0040069f 	.word	0x0040069f
  40067c:	004006a3 	.word	0x004006a3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400680:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400684:	e010      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40068a:	e00d      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40068c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400690:	e00a      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400692:	4b08      	ldr	r3, [pc, #32]	; (4006b4 <osc_get_rate+0x68>)
  400694:	e008      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400696:	4b08      	ldr	r3, [pc, #32]	; (4006b8 <osc_get_rate+0x6c>)
  400698:	e006      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40069a:	4b08      	ldr	r3, [pc, #32]	; (4006bc <osc_get_rate+0x70>)
  40069c:	e004      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40069e:	4b07      	ldr	r3, [pc, #28]	; (4006bc <osc_get_rate+0x70>)
  4006a0:	e002      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006a2:	4b06      	ldr	r3, [pc, #24]	; (4006bc <osc_get_rate+0x70>)
  4006a4:	e000      	b.n	4006a8 <osc_get_rate+0x5c>
	}

	return 0;
  4006a6:	2300      	movs	r3, #0
}
  4006a8:	4618      	mov	r0, r3
  4006aa:	370c      	adds	r7, #12
  4006ac:	46bd      	mov	sp, r7
  4006ae:	bc80      	pop	{r7}
  4006b0:	4770      	bx	lr
  4006b2:	bf00      	nop
  4006b4:	003d0900 	.word	0x003d0900
  4006b8:	007a1200 	.word	0x007a1200
  4006bc:	00b71b00 	.word	0x00b71b00

004006c0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006c0:	b580      	push	{r7, lr}
  4006c2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006c4:	2006      	movs	r0, #6
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <sysclk_get_main_hz+0x18>)
  4006c8:	4798      	blx	r3
  4006ca:	4602      	mov	r2, r0
  4006cc:	4613      	mov	r3, r2
  4006ce:	009b      	lsls	r3, r3, #2
  4006d0:	4413      	add	r3, r2
  4006d2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006d4:	4618      	mov	r0, r3
  4006d6:	bd80      	pop	{r7, pc}
  4006d8:	0040064d 	.word	0x0040064d

004006dc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006dc:	b580      	push	{r7, lr}
  4006de:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <sysclk_get_cpu_hz+0x10>)
  4006e2:	4798      	blx	r3
  4006e4:	4603      	mov	r3, r0
  4006e6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006e8:	4618      	mov	r0, r3
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	004006c1 	.word	0x004006c1

004006f0 <start_i2s_capture>:
/** Receiver buffer content. */
volatile uint16_t i2s_rec_buf[AUDIO_BUFFER_SIZE] = {0};
	
volatile uint8_t capture_toggle = 0;

void start_i2s_capture(void){ ssc_enable_interrupt(SSC, SSC_IDR_RXRDY); }
  4006f0:	b580      	push	{r7, lr}
  4006f2:	af00      	add	r7, sp, #0
  4006f4:	2110      	movs	r1, #16
  4006f6:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4006fa:	4b02      	ldr	r3, [pc, #8]	; (400704 <start_i2s_capture+0x14>)
  4006fc:	4798      	blx	r3
  4006fe:	bf00      	nop
  400700:	bd80      	pop	{r7, pc}
  400702:	bf00      	nop
  400704:	00400365 	.word	0x00400365

00400708 <SSC_Handler>:

/**
 * \brief Synchronous Serial Controller Handler.
 */
void SSC_Handler(void)
{
  400708:	b590      	push	{r4, r7, lr}
  40070a:	b083      	sub	sp, #12
  40070c:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40070e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400712:	4b19      	ldr	r3, [pc, #100]	; (400778 <SSC_Handler+0x70>)
  400714:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  400716:	1d3b      	adds	r3, r7, #4
  400718:	4619      	mov	r1, r3
  40071a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40071e:	4b17      	ldr	r3, [pc, #92]	; (40077c <SSC_Handler+0x74>)
  400720:	4798      	blx	r3
	
	if(!(capture_toggle++ % 2) && i2s_receive_index < AUDIO_BUFFER_SIZE)
  400722:	4b17      	ldr	r3, [pc, #92]	; (400780 <SSC_Handler+0x78>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	1c5a      	adds	r2, r3, #1
  40072a:	b2d1      	uxtb	r1, r2
  40072c:	4a14      	ldr	r2, [pc, #80]	; (400780 <SSC_Handler+0x78>)
  40072e:	7011      	strb	r1, [r2, #0]
  400730:	f003 0301 	and.w	r3, r3, #1
  400734:	b2db      	uxtb	r3, r3
  400736:	2b00      	cmp	r3, #0
  400738:	d112      	bne.n	400760 <SSC_Handler+0x58>
  40073a:	4b12      	ldr	r3, [pc, #72]	; (400784 <SSC_Handler+0x7c>)
  40073c:	681b      	ldr	r3, [r3, #0]
  40073e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400742:	d20d      	bcs.n	400760 <SSC_Handler+0x58>
		i2s_rec_buf[i2s_receive_index++] = modify_data(ul_data);
  400744:	4b0f      	ldr	r3, [pc, #60]	; (400784 <SSC_Handler+0x7c>)
  400746:	681c      	ldr	r4, [r3, #0]
  400748:	1c63      	adds	r3, r4, #1
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <SSC_Handler+0x7c>)
  40074c:	6013      	str	r3, [r2, #0]
  40074e:	687b      	ldr	r3, [r7, #4]
  400750:	4618      	mov	r0, r3
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <SSC_Handler+0x80>)
  400754:	4798      	blx	r3
  400756:	4603      	mov	r3, r0
  400758:	461a      	mov	r2, r3
  40075a:	4b0c      	ldr	r3, [pc, #48]	; (40078c <SSC_Handler+0x84>)
  40075c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (i2s_receive_index >= AUDIO_BUFFER_SIZE)// && !buffer_filled)
  400760:	4b08      	ldr	r3, [pc, #32]	; (400784 <SSC_Handler+0x7c>)
  400762:	681b      	ldr	r3, [r3, #0]
  400764:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400768:	d302      	bcc.n	400770 <SSC_Handler+0x68>
		//buffer_filled = 1;
		i2s_receive_index = 0;
  40076a:	4b06      	ldr	r3, [pc, #24]	; (400784 <SSC_Handler+0x7c>)
  40076c:	2200      	movs	r2, #0
  40076e:	601a      	str	r2, [r3, #0]
}
  400770:	bf00      	nop
  400772:	370c      	adds	r7, #12
  400774:	46bd      	mov	sp, r7
  400776:	bd90      	pop	{r4, r7, pc}
  400778:	00400381 	.word	0x00400381
  40077c:	00400399 	.word	0x00400399
  400780:	200085a4 	.word	0x200085a4
  400784:	200008a0 	.word	0x200008a0
  400788:	00400791 	.word	0x00400791
  40078c:	200008a4 	.word	0x200008a4

00400790 <modify_data>:

// get rid of zero padding and tristated signal
uint16_t modify_data(uint32_t data_to_modify) { return (uint16_t) (data_to_modify >> 16); }
  400790:	b480      	push	{r7}
  400792:	b083      	sub	sp, #12
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	0c1b      	lsrs	r3, r3, #16
  40079c:	b29b      	uxth	r3, r3
  40079e:	4618      	mov	r0, r3
  4007a0:	370c      	adds	r7, #12
  4007a2:	46bd      	mov	sp, r7
  4007a4:	bc80      	pop	{r7}
  4007a6:	4770      	bx	lr

004007a8 <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void){
  4007a8:	b590      	push	{r4, r7, lr}
  4007aa:	b085      	sub	sp, #20
  4007ac:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007ae:	2016      	movs	r0, #22
  4007b0:	4b18      	ldr	r3, [pc, #96]	; (400814 <configure_i2s+0x6c>)
  4007b2:	4798      	blx	r3
	ssc_reset(SSC);
  4007b4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007b8:	4b17      	ldr	r3, [pc, #92]	; (400818 <configure_i2s+0x70>)
  4007ba:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007bc:	4b17      	ldr	r3, [pc, #92]	; (40081c <configure_i2s+0x74>)
  4007be:	4798      	blx	r3
  4007c0:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007c2:	687a      	ldr	r2, [r7, #4]
  4007c4:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007c8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007cc:	4b14      	ldr	r3, [pc, #80]	; (400820 <configure_i2s+0x78>)
  4007ce:	4798      	blx	r3
  4007d0:	4603      	mov	r3, r0
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d11a      	bne.n	40080c <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  4007d6:	2320      	movs	r3, #32
  4007d8:	9300      	str	r3, [sp, #0]
  4007da:	2301      	movs	r3, #1
  4007dc:	2202      	movs	r2, #2
  4007de:	2102      	movs	r1, #2
  4007e0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007e4:	4c0f      	ldr	r4, [pc, #60]	; (400824 <configure_i2s+0x7c>)
  4007e6:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  4007e8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007ec:	4b0e      	ldr	r3, [pc, #56]	; (400828 <configure_i2s+0x80>)
  4007ee:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  4007f0:	2016      	movs	r0, #22
  4007f2:	4b0e      	ldr	r3, [pc, #56]	; (40082c <configure_i2s+0x84>)
  4007f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  4007f6:	2016      	movs	r0, #22
  4007f8:	4b0d      	ldr	r3, [pc, #52]	; (400830 <configure_i2s+0x88>)
  4007fa:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  4007fc:	2104      	movs	r1, #4
  4007fe:	2016      	movs	r0, #22
  400800:	4b0c      	ldr	r3, [pc, #48]	; (400834 <configure_i2s+0x8c>)
  400802:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400804:	2016      	movs	r0, #22
  400806:	4b0c      	ldr	r3, [pc, #48]	; (400838 <configure_i2s+0x90>)
  400808:	4798      	blx	r3
  40080a:	e000      	b.n	40080e <configure_i2s+0x66>
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
	ssc_reset(SSC);
	uint32_t ul_mck = sysclk_get_cpu_hz();
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  40080c:	bf00      	nop
	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
	NVIC_ClearPendingIRQ(SSC_IRQn);
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
	NVIC_EnableIRQ(SSC_IRQn);
  40080e:	370c      	adds	r7, #12
  400810:	46bd      	mov	sp, r7
  400812:	bd90      	pop	{r4, r7, pc}
  400814:	004020b1 	.word	0x004020b1
  400818:	00400265 	.word	0x00400265
  40081c:	004006dd 	.word	0x004006dd
  400820:	00400129 	.word	0x00400129
  400824:	00400169 	.word	0x00400169
  400828:	0040029d 	.word	0x0040029d
  40082c:	00400591 	.word	0x00400591
  400830:	004005c5 	.word	0x004005c5
  400834:	004005f9 	.word	0x004005f9
  400838:	00400561 	.word	0x00400561

0040083c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b084      	sub	sp, #16
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
  400844:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400846:	6878      	ldr	r0, [r7, #4]
  400848:	4b2c      	ldr	r3, [pc, #176]	; (4008fc <pio_handler_process+0xc0>)
  40084a:	4798      	blx	r3
  40084c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40084e:	6878      	ldr	r0, [r7, #4]
  400850:	4b2b      	ldr	r3, [pc, #172]	; (400900 <pio_handler_process+0xc4>)
  400852:	4798      	blx	r3
  400854:	4602      	mov	r2, r0
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	4013      	ands	r3, r2
  40085a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40085c:	68fb      	ldr	r3, [r7, #12]
  40085e:	2b00      	cmp	r3, #0
  400860:	d03c      	beq.n	4008dc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400862:	2300      	movs	r3, #0
  400864:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400866:	e034      	b.n	4008d2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400868:	4a26      	ldr	r2, [pc, #152]	; (400904 <pio_handler_process+0xc8>)
  40086a:	68bb      	ldr	r3, [r7, #8]
  40086c:	011b      	lsls	r3, r3, #4
  40086e:	4413      	add	r3, r2
  400870:	681a      	ldr	r2, [r3, #0]
  400872:	683b      	ldr	r3, [r7, #0]
  400874:	429a      	cmp	r2, r3
  400876:	d126      	bne.n	4008c6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400878:	4a22      	ldr	r2, [pc, #136]	; (400904 <pio_handler_process+0xc8>)
  40087a:	68bb      	ldr	r3, [r7, #8]
  40087c:	011b      	lsls	r3, r3, #4
  40087e:	4413      	add	r3, r2
  400880:	3304      	adds	r3, #4
  400882:	681a      	ldr	r2, [r3, #0]
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	4013      	ands	r3, r2
  400888:	2b00      	cmp	r3, #0
  40088a:	d01c      	beq.n	4008c6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40088c:	4a1d      	ldr	r2, [pc, #116]	; (400904 <pio_handler_process+0xc8>)
  40088e:	68bb      	ldr	r3, [r7, #8]
  400890:	011b      	lsls	r3, r3, #4
  400892:	4413      	add	r3, r2
  400894:	330c      	adds	r3, #12
  400896:	681b      	ldr	r3, [r3, #0]
  400898:	491a      	ldr	r1, [pc, #104]	; (400904 <pio_handler_process+0xc8>)
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	0112      	lsls	r2, r2, #4
  40089e:	440a      	add	r2, r1
  4008a0:	6810      	ldr	r0, [r2, #0]
  4008a2:	4918      	ldr	r1, [pc, #96]	; (400904 <pio_handler_process+0xc8>)
  4008a4:	68ba      	ldr	r2, [r7, #8]
  4008a6:	0112      	lsls	r2, r2, #4
  4008a8:	440a      	add	r2, r1
  4008aa:	3204      	adds	r2, #4
  4008ac:	6812      	ldr	r2, [r2, #0]
  4008ae:	4611      	mov	r1, r2
  4008b0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008b2:	4a14      	ldr	r2, [pc, #80]	; (400904 <pio_handler_process+0xc8>)
  4008b4:	68bb      	ldr	r3, [r7, #8]
  4008b6:	011b      	lsls	r3, r3, #4
  4008b8:	4413      	add	r3, r2
  4008ba:	3304      	adds	r3, #4
  4008bc:	681b      	ldr	r3, [r3, #0]
  4008be:	43db      	mvns	r3, r3
  4008c0:	68fa      	ldr	r2, [r7, #12]
  4008c2:	4013      	ands	r3, r2
  4008c4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008c6:	68bb      	ldr	r3, [r7, #8]
  4008c8:	3301      	adds	r3, #1
  4008ca:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008cc:	68bb      	ldr	r3, [r7, #8]
  4008ce:	2b06      	cmp	r3, #6
  4008d0:	d803      	bhi.n	4008da <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4008d2:	68fb      	ldr	r3, [r7, #12]
  4008d4:	2b00      	cmp	r3, #0
  4008d6:	d1c7      	bne.n	400868 <pio_handler_process+0x2c>
  4008d8:	e000      	b.n	4008dc <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4008da:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008dc:	4b0a      	ldr	r3, [pc, #40]	; (400908 <pio_handler_process+0xcc>)
  4008de:	681b      	ldr	r3, [r3, #0]
  4008e0:	2b00      	cmp	r3, #0
  4008e2:	d007      	beq.n	4008f4 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4008e4:	4b09      	ldr	r3, [pc, #36]	; (40090c <pio_handler_process+0xd0>)
  4008e6:	681b      	ldr	r3, [r3, #0]
  4008e8:	2b00      	cmp	r3, #0
  4008ea:	d003      	beq.n	4008f4 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4008ec:	4b07      	ldr	r3, [pc, #28]	; (40090c <pio_handler_process+0xd0>)
  4008ee:	681b      	ldr	r3, [r3, #0]
  4008f0:	6878      	ldr	r0, [r7, #4]
  4008f2:	4798      	blx	r3
		}
	}
#endif
}
  4008f4:	bf00      	nop
  4008f6:	3710      	adds	r7, #16
  4008f8:	46bd      	mov	sp, r7
  4008fa:	bd80      	pop	{r7, pc}
  4008fc:	00401c61 	.word	0x00401c61
  400900:	00401c79 	.word	0x00401c79
  400904:	200085a8 	.word	0x200085a8
  400908:	2000886c 	.word	0x2000886c
  40090c:	2000861c 	.word	0x2000861c

00400910 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400910:	b580      	push	{r7, lr}
  400912:	b086      	sub	sp, #24
  400914:	af00      	add	r7, sp, #0
  400916:	60f8      	str	r0, [r7, #12]
  400918:	60b9      	str	r1, [r7, #8]
  40091a:	607a      	str	r2, [r7, #4]
  40091c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40091e:	4b21      	ldr	r3, [pc, #132]	; (4009a4 <pio_handler_set+0x94>)
  400920:	681b      	ldr	r3, [r3, #0]
  400922:	2b06      	cmp	r3, #6
  400924:	d901      	bls.n	40092a <pio_handler_set+0x1a>
		return 1;
  400926:	2301      	movs	r3, #1
  400928:	e038      	b.n	40099c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40092a:	2300      	movs	r3, #0
  40092c:	75fb      	strb	r3, [r7, #23]
  40092e:	e011      	b.n	400954 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400930:	7dfb      	ldrb	r3, [r7, #23]
  400932:	011b      	lsls	r3, r3, #4
  400934:	4a1c      	ldr	r2, [pc, #112]	; (4009a8 <pio_handler_set+0x98>)
  400936:	4413      	add	r3, r2
  400938:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40093a:	693b      	ldr	r3, [r7, #16]
  40093c:	681a      	ldr	r2, [r3, #0]
  40093e:	68bb      	ldr	r3, [r7, #8]
  400940:	429a      	cmp	r2, r3
  400942:	d104      	bne.n	40094e <pio_handler_set+0x3e>
  400944:	693b      	ldr	r3, [r7, #16]
  400946:	685a      	ldr	r2, [r3, #4]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	429a      	cmp	r2, r3
  40094c:	d008      	beq.n	400960 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40094e:	7dfb      	ldrb	r3, [r7, #23]
  400950:	3301      	adds	r3, #1
  400952:	75fb      	strb	r3, [r7, #23]
  400954:	7dfa      	ldrb	r2, [r7, #23]
  400956:	4b13      	ldr	r3, [pc, #76]	; (4009a4 <pio_handler_set+0x94>)
  400958:	681b      	ldr	r3, [r3, #0]
  40095a:	429a      	cmp	r2, r3
  40095c:	d9e8      	bls.n	400930 <pio_handler_set+0x20>
  40095e:	e000      	b.n	400962 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400960:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400962:	693b      	ldr	r3, [r7, #16]
  400964:	68ba      	ldr	r2, [r7, #8]
  400966:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400968:	693b      	ldr	r3, [r7, #16]
  40096a:	687a      	ldr	r2, [r7, #4]
  40096c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40096e:	693b      	ldr	r3, [r7, #16]
  400970:	683a      	ldr	r2, [r7, #0]
  400972:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400974:	693b      	ldr	r3, [r7, #16]
  400976:	6a3a      	ldr	r2, [r7, #32]
  400978:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40097a:	7dfa      	ldrb	r2, [r7, #23]
  40097c:	4b09      	ldr	r3, [pc, #36]	; (4009a4 <pio_handler_set+0x94>)
  40097e:	681b      	ldr	r3, [r3, #0]
  400980:	3301      	adds	r3, #1
  400982:	429a      	cmp	r2, r3
  400984:	d104      	bne.n	400990 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400986:	4b07      	ldr	r3, [pc, #28]	; (4009a4 <pio_handler_set+0x94>)
  400988:	681b      	ldr	r3, [r3, #0]
  40098a:	3301      	adds	r3, #1
  40098c:	4a05      	ldr	r2, [pc, #20]	; (4009a4 <pio_handler_set+0x94>)
  40098e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400990:	683a      	ldr	r2, [r7, #0]
  400992:	6879      	ldr	r1, [r7, #4]
  400994:	68f8      	ldr	r0, [r7, #12]
  400996:	4b05      	ldr	r3, [pc, #20]	; (4009ac <pio_handler_set+0x9c>)
  400998:	4798      	blx	r3

	return 0;
  40099a:	2300      	movs	r3, #0
}
  40099c:	4618      	mov	r0, r3
  40099e:	3718      	adds	r7, #24
  4009a0:	46bd      	mov	sp, r7
  4009a2:	bd80      	pop	{r7, pc}
  4009a4:	20008618 	.word	0x20008618
  4009a8:	200085a8 	.word	0x200085a8
  4009ac:	00401bbd 	.word	0x00401bbd

004009b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009b0:	b580      	push	{r7, lr}
  4009b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009b4:	210b      	movs	r1, #11
  4009b6:	4802      	ldr	r0, [pc, #8]	; (4009c0 <PIOA_Handler+0x10>)
  4009b8:	4b02      	ldr	r3, [pc, #8]	; (4009c4 <PIOA_Handler+0x14>)
  4009ba:	4798      	blx	r3
}
  4009bc:	bf00      	nop
  4009be:	bd80      	pop	{r7, pc}
  4009c0:	400e0e00 	.word	0x400e0e00
  4009c4:	0040083d 	.word	0x0040083d

004009c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009cc:	210c      	movs	r1, #12
  4009ce:	4802      	ldr	r0, [pc, #8]	; (4009d8 <PIOB_Handler+0x10>)
  4009d0:	4b02      	ldr	r3, [pc, #8]	; (4009dc <PIOB_Handler+0x14>)
  4009d2:	4798      	blx	r3
}
  4009d4:	bf00      	nop
  4009d6:	bd80      	pop	{r7, pc}
  4009d8:	400e1000 	.word	0x400e1000
  4009dc:	0040083d 	.word	0x0040083d

004009e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4009e0:	b480      	push	{r7}
  4009e2:	b089      	sub	sp, #36	; 0x24
  4009e4:	af00      	add	r7, sp, #0
  4009e6:	60f8      	str	r0, [r7, #12]
  4009e8:	60b9      	str	r1, [r7, #8]
  4009ea:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4009ec:	68bb      	ldr	r3, [r7, #8]
  4009ee:	011a      	lsls	r2, r3, #4
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	429a      	cmp	r2, r3
  4009f4:	d802      	bhi.n	4009fc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4009f6:	2310      	movs	r3, #16
  4009f8:	61fb      	str	r3, [r7, #28]
  4009fa:	e001      	b.n	400a00 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4009fc:	2308      	movs	r3, #8
  4009fe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a00:	687b      	ldr	r3, [r7, #4]
  400a02:	00da      	lsls	r2, r3, #3
  400a04:	69fb      	ldr	r3, [r7, #28]
  400a06:	68b9      	ldr	r1, [r7, #8]
  400a08:	fb01 f303 	mul.w	r3, r1, r3
  400a0c:	085b      	lsrs	r3, r3, #1
  400a0e:	441a      	add	r2, r3
  400a10:	69fb      	ldr	r3, [r7, #28]
  400a12:	68b9      	ldr	r1, [r7, #8]
  400a14:	fb01 f303 	mul.w	r3, r1, r3
  400a18:	fbb2 f3f3 	udiv	r3, r2, r3
  400a1c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400a1e:	69bb      	ldr	r3, [r7, #24]
  400a20:	08db      	lsrs	r3, r3, #3
  400a22:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400a24:	69bb      	ldr	r3, [r7, #24]
  400a26:	f003 0307 	and.w	r3, r3, #7
  400a2a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a2c:	697b      	ldr	r3, [r7, #20]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d003      	beq.n	400a3a <usart_set_async_baudrate+0x5a>
  400a32:	697b      	ldr	r3, [r7, #20]
  400a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400a38:	d301      	bcc.n	400a3e <usart_set_async_baudrate+0x5e>
		return 1;
  400a3a:	2301      	movs	r3, #1
  400a3c:	e00f      	b.n	400a5e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400a3e:	69fb      	ldr	r3, [r7, #28]
  400a40:	2b08      	cmp	r3, #8
  400a42:	d105      	bne.n	400a50 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400a44:	68fb      	ldr	r3, [r7, #12]
  400a46:	685b      	ldr	r3, [r3, #4]
  400a48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400a4c:	68fb      	ldr	r3, [r7, #12]
  400a4e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a50:	693b      	ldr	r3, [r7, #16]
  400a52:	041a      	lsls	r2, r3, #16
  400a54:	697b      	ldr	r3, [r7, #20]
  400a56:	431a      	orrs	r2, r3
  400a58:	68fb      	ldr	r3, [r7, #12]
  400a5a:	621a      	str	r2, [r3, #32]

	return 0;
  400a5c:	2300      	movs	r3, #0
}
  400a5e:	4618      	mov	r0, r3
  400a60:	3724      	adds	r7, #36	; 0x24
  400a62:	46bd      	mov	sp, r7
  400a64:	bc80      	pop	{r7}
  400a66:	4770      	bx	lr

00400a68 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400a68:	b580      	push	{r7, lr}
  400a6a:	b082      	sub	sp, #8
  400a6c:	af00      	add	r7, sp, #0
  400a6e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400a70:	6878      	ldr	r0, [r7, #4]
  400a72:	4b0f      	ldr	r3, [pc, #60]	; (400ab0 <usart_reset+0x48>)
  400a74:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400a76:	687b      	ldr	r3, [r7, #4]
  400a78:	2200      	movs	r2, #0
  400a7a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400a7c:	687b      	ldr	r3, [r7, #4]
  400a7e:	2200      	movs	r2, #0
  400a80:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a82:	687b      	ldr	r3, [r7, #4]
  400a84:	2200      	movs	r2, #0
  400a86:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400a88:	6878      	ldr	r0, [r7, #4]
  400a8a:	4b0a      	ldr	r3, [pc, #40]	; (400ab4 <usart_reset+0x4c>)
  400a8c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400a8e:	6878      	ldr	r0, [r7, #4]
  400a90:	4b09      	ldr	r3, [pc, #36]	; (400ab8 <usart_reset+0x50>)
  400a92:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400a94:	6878      	ldr	r0, [r7, #4]
  400a96:	4b09      	ldr	r3, [pc, #36]	; (400abc <usart_reset+0x54>)
  400a98:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400a9a:	6878      	ldr	r0, [r7, #4]
  400a9c:	4b08      	ldr	r3, [pc, #32]	; (400ac0 <usart_reset+0x58>)
  400a9e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400aa0:	6878      	ldr	r0, [r7, #4]
  400aa2:	4b08      	ldr	r3, [pc, #32]	; (400ac4 <usart_reset+0x5c>)
  400aa4:	4798      	blx	r3
#endif
}
  400aa6:	bf00      	nop
  400aa8:	3708      	adds	r7, #8
  400aaa:	46bd      	mov	sp, r7
  400aac:	bd80      	pop	{r7, pc}
  400aae:	bf00      	nop
  400ab0:	00400d25 	.word	0x00400d25
  400ab4:	00400ba5 	.word	0x00400ba5
  400ab8:	00400bd5 	.word	0x00400bd5
  400abc:	00400c3d 	.word	0x00400c3d
  400ac0:	00400c75 	.word	0x00400c75
  400ac4:	00400c59 	.word	0x00400c59

00400ac8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400ac8:	b580      	push	{r7, lr}
  400aca:	b084      	sub	sp, #16
  400acc:	af00      	add	r7, sp, #0
  400ace:	60f8      	str	r0, [r7, #12]
  400ad0:	60b9      	str	r1, [r7, #8]
  400ad2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400ad4:	68f8      	ldr	r0, [r7, #12]
  400ad6:	4b1a      	ldr	r3, [pc, #104]	; (400b40 <usart_init_rs232+0x78>)
  400ad8:	4798      	blx	r3

	ul_reg_val = 0;
  400ada:	4b1a      	ldr	r3, [pc, #104]	; (400b44 <usart_init_rs232+0x7c>)
  400adc:	2200      	movs	r2, #0
  400ade:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400ae0:	68bb      	ldr	r3, [r7, #8]
  400ae2:	2b00      	cmp	r3, #0
  400ae4:	d009      	beq.n	400afa <usart_init_rs232+0x32>
  400ae6:	68bb      	ldr	r3, [r7, #8]
  400ae8:	681b      	ldr	r3, [r3, #0]
  400aea:	687a      	ldr	r2, [r7, #4]
  400aec:	4619      	mov	r1, r3
  400aee:	68f8      	ldr	r0, [r7, #12]
  400af0:	4b15      	ldr	r3, [pc, #84]	; (400b48 <usart_init_rs232+0x80>)
  400af2:	4798      	blx	r3
  400af4:	4603      	mov	r3, r0
  400af6:	2b00      	cmp	r3, #0
  400af8:	d001      	beq.n	400afe <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400afa:	2301      	movs	r3, #1
  400afc:	e01b      	b.n	400b36 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400afe:	68bb      	ldr	r3, [r7, #8]
  400b00:	685a      	ldr	r2, [r3, #4]
  400b02:	68bb      	ldr	r3, [r7, #8]
  400b04:	689b      	ldr	r3, [r3, #8]
  400b06:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b08:	68bb      	ldr	r3, [r7, #8]
  400b0a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b0c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b0e:	68bb      	ldr	r3, [r7, #8]
  400b10:	68db      	ldr	r3, [r3, #12]
  400b12:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b14:	4b0b      	ldr	r3, [pc, #44]	; (400b44 <usart_init_rs232+0x7c>)
  400b16:	681b      	ldr	r3, [r3, #0]
  400b18:	4313      	orrs	r3, r2
  400b1a:	4a0a      	ldr	r2, [pc, #40]	; (400b44 <usart_init_rs232+0x7c>)
  400b1c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400b1e:	4b09      	ldr	r3, [pc, #36]	; (400b44 <usart_init_rs232+0x7c>)
  400b20:	681b      	ldr	r3, [r3, #0]
  400b22:	4a08      	ldr	r2, [pc, #32]	; (400b44 <usart_init_rs232+0x7c>)
  400b24:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	685a      	ldr	r2, [r3, #4]
  400b2a:	4b06      	ldr	r3, [pc, #24]	; (400b44 <usart_init_rs232+0x7c>)
  400b2c:	681b      	ldr	r3, [r3, #0]
  400b2e:	431a      	orrs	r2, r3
  400b30:	68fb      	ldr	r3, [r7, #12]
  400b32:	605a      	str	r2, [r3, #4]

	return 0;
  400b34:	2300      	movs	r3, #0
}
  400b36:	4618      	mov	r0, r3
  400b38:	3710      	adds	r7, #16
  400b3a:	46bd      	mov	sp, r7
  400b3c:	bd80      	pop	{r7, pc}
  400b3e:	bf00      	nop
  400b40:	00400a69 	.word	0x00400a69
  400b44:	20008620 	.word	0x20008620
  400b48:	004009e1 	.word	0x004009e1

00400b4c <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400b4c:	b580      	push	{r7, lr}
  400b4e:	b084      	sub	sp, #16
  400b50:	af00      	add	r7, sp, #0
  400b52:	60f8      	str	r0, [r7, #12]
  400b54:	60b9      	str	r1, [r7, #8]
  400b56:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400b58:	687a      	ldr	r2, [r7, #4]
  400b5a:	68b9      	ldr	r1, [r7, #8]
  400b5c:	68f8      	ldr	r0, [r7, #12]
  400b5e:	4b0a      	ldr	r3, [pc, #40]	; (400b88 <usart_init_hw_handshaking+0x3c>)
  400b60:	4798      	blx	r3
  400b62:	4603      	mov	r3, r0
  400b64:	2b00      	cmp	r3, #0
  400b66:	d001      	beq.n	400b6c <usart_init_hw_handshaking+0x20>
		return 1;
  400b68:	2301      	movs	r3, #1
  400b6a:	e008      	b.n	400b7e <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400b6c:	68fb      	ldr	r3, [r7, #12]
  400b6e:	685b      	ldr	r3, [r3, #4]
  400b70:	f023 030f 	bic.w	r3, r3, #15
  400b74:	f043 0202 	orr.w	r2, r3, #2
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400b7c:	2300      	movs	r3, #0
}
  400b7e:	4618      	mov	r0, r3
  400b80:	3710      	adds	r7, #16
  400b82:	46bd      	mov	sp, r7
  400b84:	bd80      	pop	{r7, pc}
  400b86:	bf00      	nop
  400b88:	00400ac9 	.word	0x00400ac9

00400b8c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400b8c:	b480      	push	{r7}
  400b8e:	b083      	sub	sp, #12
  400b90:	af00      	add	r7, sp, #0
  400b92:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400b94:	687b      	ldr	r3, [r7, #4]
  400b96:	2240      	movs	r2, #64	; 0x40
  400b98:	601a      	str	r2, [r3, #0]
}
  400b9a:	bf00      	nop
  400b9c:	370c      	adds	r7, #12
  400b9e:	46bd      	mov	sp, r7
  400ba0:	bc80      	pop	{r7}
  400ba2:	4770      	bx	lr

00400ba4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400ba4:	b480      	push	{r7}
  400ba6:	b083      	sub	sp, #12
  400ba8:	af00      	add	r7, sp, #0
  400baa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bac:	687b      	ldr	r3, [r7, #4]
  400bae:	2288      	movs	r2, #136	; 0x88
  400bb0:	601a      	str	r2, [r3, #0]
}
  400bb2:	bf00      	nop
  400bb4:	370c      	adds	r7, #12
  400bb6:	46bd      	mov	sp, r7
  400bb8:	bc80      	pop	{r7}
  400bba:	4770      	bx	lr

00400bbc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b083      	sub	sp, #12
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	2210      	movs	r2, #16
  400bc8:	601a      	str	r2, [r3, #0]
}
  400bca:	bf00      	nop
  400bcc:	370c      	adds	r7, #12
  400bce:	46bd      	mov	sp, r7
  400bd0:	bc80      	pop	{r7}
  400bd2:	4770      	bx	lr

00400bd4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400bd4:	b480      	push	{r7}
  400bd6:	b083      	sub	sp, #12
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400bdc:	687b      	ldr	r3, [r7, #4]
  400bde:	2224      	movs	r2, #36	; 0x24
  400be0:	601a      	str	r2, [r3, #0]
}
  400be2:	bf00      	nop
  400be4:	370c      	adds	r7, #12
  400be6:	46bd      	mov	sp, r7
  400be8:	bc80      	pop	{r7}
  400bea:	4770      	bx	lr

00400bec <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
  400bf4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400bf6:	687b      	ldr	r3, [r7, #4]
  400bf8:	683a      	ldr	r2, [r7, #0]
  400bfa:	609a      	str	r2, [r3, #8]
}
  400bfc:	bf00      	nop
  400bfe:	370c      	adds	r7, #12
  400c00:	46bd      	mov	sp, r7
  400c02:	bc80      	pop	{r7}
  400c04:	4770      	bx	lr
  400c06:	bf00      	nop

00400c08 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c08:	b480      	push	{r7}
  400c0a:	b083      	sub	sp, #12
  400c0c:	af00      	add	r7, sp, #0
  400c0e:	6078      	str	r0, [r7, #4]
  400c10:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400c12:	687b      	ldr	r3, [r7, #4]
  400c14:	683a      	ldr	r2, [r7, #0]
  400c16:	60da      	str	r2, [r3, #12]
}
  400c18:	bf00      	nop
  400c1a:	370c      	adds	r7, #12
  400c1c:	46bd      	mov	sp, r7
  400c1e:	bc80      	pop	{r7}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop

00400c24 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400c24:	b480      	push	{r7}
  400c26:	b083      	sub	sp, #12
  400c28:	af00      	add	r7, sp, #0
  400c2a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400c2c:	687b      	ldr	r3, [r7, #4]
  400c2e:	695b      	ldr	r3, [r3, #20]
}
  400c30:	4618      	mov	r0, r3
  400c32:	370c      	adds	r7, #12
  400c34:	46bd      	mov	sp, r7
  400c36:	bc80      	pop	{r7}
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop

00400c3c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400c3c:	b480      	push	{r7}
  400c3e:	b083      	sub	sp, #12
  400c40:	af00      	add	r7, sp, #0
  400c42:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400c44:	687b      	ldr	r3, [r7, #4]
  400c46:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c4a:	601a      	str	r2, [r3, #0]
}
  400c4c:	bf00      	nop
  400c4e:	370c      	adds	r7, #12
  400c50:	46bd      	mov	sp, r7
  400c52:	bc80      	pop	{r7}
  400c54:	4770      	bx	lr
  400c56:	bf00      	nop

00400c58 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400c58:	b480      	push	{r7}
  400c5a:	b083      	sub	sp, #12
  400c5c:	af00      	add	r7, sp, #0
  400c5e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400c60:	687b      	ldr	r3, [r7, #4]
  400c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400c66:	601a      	str	r2, [r3, #0]
}
  400c68:	bf00      	nop
  400c6a:	370c      	adds	r7, #12
  400c6c:	46bd      	mov	sp, r7
  400c6e:	bc80      	pop	{r7}
  400c70:	4770      	bx	lr
  400c72:	bf00      	nop

00400c74 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400c74:	b480      	push	{r7}
  400c76:	b083      	sub	sp, #12
  400c78:	af00      	add	r7, sp, #0
  400c7a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400c7c:	687b      	ldr	r3, [r7, #4]
  400c7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400c82:	601a      	str	r2, [r3, #0]
}
  400c84:	bf00      	nop
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	bc80      	pop	{r7}
  400c8c:	4770      	bx	lr
  400c8e:	bf00      	nop

00400c90 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400c90:	b480      	push	{r7}
  400c92:	b083      	sub	sp, #12
  400c94:	af00      	add	r7, sp, #0
  400c96:	6078      	str	r0, [r7, #4]
  400c98:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c9a:	bf00      	nop
  400c9c:	687b      	ldr	r3, [r7, #4]
  400c9e:	695b      	ldr	r3, [r3, #20]
  400ca0:	f003 0302 	and.w	r3, r3, #2
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d0f9      	beq.n	400c9c <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400ca8:	683b      	ldr	r3, [r7, #0]
  400caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	61da      	str	r2, [r3, #28]

	return 0;
  400cb2:	2300      	movs	r3, #0
}
  400cb4:	4618      	mov	r0, r3
  400cb6:	370c      	adds	r7, #12
  400cb8:	46bd      	mov	sp, r7
  400cba:	bc80      	pop	{r7}
  400cbc:	4770      	bx	lr
  400cbe:	bf00      	nop

00400cc0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400cc0:	b580      	push	{r7, lr}
  400cc2:	b082      	sub	sp, #8
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	6078      	str	r0, [r7, #4]
  400cc8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400cca:	e007      	b.n	400cdc <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400ccc:	683b      	ldr	r3, [r7, #0]
  400cce:	1c5a      	adds	r2, r3, #1
  400cd0:	603a      	str	r2, [r7, #0]
  400cd2:	781b      	ldrb	r3, [r3, #0]
  400cd4:	4619      	mov	r1, r3
  400cd6:	6878      	ldr	r0, [r7, #4]
  400cd8:	4b04      	ldr	r3, [pc, #16]	; (400cec <usart_write_line+0x2c>)
  400cda:	4798      	blx	r3
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
	while (*string != '\0') {
  400cdc:	683b      	ldr	r3, [r7, #0]
  400cde:	781b      	ldrb	r3, [r3, #0]
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d1f3      	bne.n	400ccc <usart_write_line+0xc>
		usart_putchar(p_usart, *string++);
	}
}
  400ce4:	bf00      	nop
  400ce6:	3708      	adds	r7, #8
  400ce8:	46bd      	mov	sp, r7
  400cea:	bd80      	pop	{r7, pc}
  400cec:	00400c91 	.word	0x00400c91

00400cf0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400cf0:	b480      	push	{r7}
  400cf2:	b083      	sub	sp, #12
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	6078      	str	r0, [r7, #4]
  400cf8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400cfa:	687b      	ldr	r3, [r7, #4]
  400cfc:	695b      	ldr	r3, [r3, #20]
  400cfe:	f003 0301 	and.w	r3, r3, #1
  400d02:	2b00      	cmp	r3, #0
  400d04:	d101      	bne.n	400d0a <usart_read+0x1a>
		return 1;
  400d06:	2301      	movs	r3, #1
  400d08:	e006      	b.n	400d18 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d0a:	687b      	ldr	r3, [r7, #4]
  400d0c:	699b      	ldr	r3, [r3, #24]
  400d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400d12:	683b      	ldr	r3, [r7, #0]
  400d14:	601a      	str	r2, [r3, #0]

	return 0;
  400d16:	2300      	movs	r3, #0
}
  400d18:	4618      	mov	r0, r3
  400d1a:	370c      	adds	r7, #12
  400d1c:	46bd      	mov	sp, r7
  400d1e:	bc80      	pop	{r7}
  400d20:	4770      	bx	lr
  400d22:	bf00      	nop

00400d24 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400d24:	b480      	push	{r7}
  400d26:	b083      	sub	sp, #12
  400d28:	af00      	add	r7, sp, #0
  400d2a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d2c:	687b      	ldr	r3, [r7, #4]
  400d2e:	4a04      	ldr	r2, [pc, #16]	; (400d40 <usart_disable_writeprotect+0x1c>)
  400d30:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400d34:	bf00      	nop
  400d36:	370c      	adds	r7, #12
  400d38:	46bd      	mov	sp, r7
  400d3a:	bc80      	pop	{r7}
  400d3c:	4770      	bx	lr
  400d3e:	bf00      	nop
  400d40:	55534100 	.word	0x55534100

00400d44 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400d44:	b480      	push	{r7}
  400d46:	b083      	sub	sp, #12
  400d48:	af00      	add	r7, sp, #0
  400d4a:	4603      	mov	r3, r0
  400d4c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d4e:	4908      	ldr	r1, [pc, #32]	; (400d70 <NVIC_EnableIRQ+0x2c>)
  400d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d54:	095b      	lsrs	r3, r3, #5
  400d56:	79fa      	ldrb	r2, [r7, #7]
  400d58:	f002 021f 	and.w	r2, r2, #31
  400d5c:	2001      	movs	r0, #1
  400d5e:	fa00 f202 	lsl.w	r2, r0, r2
  400d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400d66:	bf00      	nop
  400d68:	370c      	adds	r7, #12
  400d6a:	46bd      	mov	sp, r7
  400d6c:	bc80      	pop	{r7}
  400d6e:	4770      	bx	lr
  400d70:	e000e100 	.word	0xe000e100

00400d74 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400d74:	b480      	push	{r7}
  400d76:	b083      	sub	sp, #12
  400d78:	af00      	add	r7, sp, #0
  400d7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	2b07      	cmp	r3, #7
  400d80:	d825      	bhi.n	400dce <osc_get_rate+0x5a>
  400d82:	a201      	add	r2, pc, #4	; (adr r2, 400d88 <osc_get_rate+0x14>)
  400d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d88:	00400da9 	.word	0x00400da9
  400d8c:	00400daf 	.word	0x00400daf
  400d90:	00400db5 	.word	0x00400db5
  400d94:	00400dbb 	.word	0x00400dbb
  400d98:	00400dbf 	.word	0x00400dbf
  400d9c:	00400dc3 	.word	0x00400dc3
  400da0:	00400dc7 	.word	0x00400dc7
  400da4:	00400dcb 	.word	0x00400dcb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400da8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400dac:	e010      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400db2:	e00d      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400db8:	e00a      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400dba:	4b08      	ldr	r3, [pc, #32]	; (400ddc <osc_get_rate+0x68>)
  400dbc:	e008      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400dbe:	4b08      	ldr	r3, [pc, #32]	; (400de0 <osc_get_rate+0x6c>)
  400dc0:	e006      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400dc2:	4b08      	ldr	r3, [pc, #32]	; (400de4 <osc_get_rate+0x70>)
  400dc4:	e004      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400dc6:	4b07      	ldr	r3, [pc, #28]	; (400de4 <osc_get_rate+0x70>)
  400dc8:	e002      	b.n	400dd0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400dca:	4b06      	ldr	r3, [pc, #24]	; (400de4 <osc_get_rate+0x70>)
  400dcc:	e000      	b.n	400dd0 <osc_get_rate+0x5c>
	}

	return 0;
  400dce:	2300      	movs	r3, #0
}
  400dd0:	4618      	mov	r0, r3
  400dd2:	370c      	adds	r7, #12
  400dd4:	46bd      	mov	sp, r7
  400dd6:	bc80      	pop	{r7}
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	003d0900 	.word	0x003d0900
  400de0:	007a1200 	.word	0x007a1200
  400de4:	00b71b00 	.word	0x00b71b00

00400de8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400de8:	b580      	push	{r7, lr}
  400dea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400dec:	2006      	movs	r0, #6
  400dee:	4b04      	ldr	r3, [pc, #16]	; (400e00 <sysclk_get_main_hz+0x18>)
  400df0:	4798      	blx	r3
  400df2:	4602      	mov	r2, r0
  400df4:	4613      	mov	r3, r2
  400df6:	009b      	lsls	r3, r3, #2
  400df8:	4413      	add	r3, r2
  400dfa:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400dfc:	4618      	mov	r0, r3
  400dfe:	bd80      	pop	{r7, pc}
  400e00:	00400d75 	.word	0x00400d75

00400e04 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400e04:	b580      	push	{r7, lr}
  400e06:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400e08:	4b02      	ldr	r3, [pc, #8]	; (400e14 <sysclk_get_cpu_hz+0x10>)
  400e0a:	4798      	blx	r3
  400e0c:	4603      	mov	r3, r0
  400e0e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400e10:	4618      	mov	r0, r3
  400e12:	bd80      	pop	{r7, pc}
  400e14:	00400de9 	.word	0x00400de9

00400e18 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400e18:	b580      	push	{r7, lr}
  400e1a:	b082      	sub	sp, #8
  400e1c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400e1e:	2100      	movs	r1, #0
  400e20:	4809      	ldr	r0, [pc, #36]	; (400e48 <TC0_Handler+0x30>)
  400e22:	4b0a      	ldr	r3, [pc, #40]	; (400e4c <TC0_Handler+0x34>)
  400e24:	4798      	blx	r3
  400e26:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400e28:	687b      	ldr	r3, [r7, #4]
  400e2a:	f003 0310 	and.w	r3, r3, #16
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d006      	beq.n	400e40 <TC0_Handler+0x28>
		counts++;
  400e32:	4b07      	ldr	r3, [pc, #28]	; (400e50 <TC0_Handler+0x38>)
  400e34:	781b      	ldrb	r3, [r3, #0]
  400e36:	b2db      	uxtb	r3, r3
  400e38:	3301      	adds	r3, #1
  400e3a:	b2da      	uxtb	r2, r3
  400e3c:	4b04      	ldr	r3, [pc, #16]	; (400e50 <TC0_Handler+0x38>)
  400e3e:	701a      	strb	r2, [r3, #0]
	}
}
  400e40:	bf00      	nop
  400e42:	3708      	adds	r7, #8
  400e44:	46bd      	mov	sp, r7
  400e46:	bd80      	pop	{r7, pc}
  400e48:	40010000 	.word	0x40010000
  400e4c:	0040047d 	.word	0x0040047d
  400e50:	20008868 	.word	0x20008868

00400e54 <configure_tc>:

void configure_tc(void)
{
  400e54:	b590      	push	{r4, r7, lr}
  400e56:	b087      	sub	sp, #28
  400e58:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400e5a:	4b16      	ldr	r3, [pc, #88]	; (400eb4 <configure_tc+0x60>)
  400e5c:	4798      	blx	r3
  400e5e:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400e60:	2017      	movs	r0, #23
  400e62:	4b15      	ldr	r3, [pc, #84]	; (400eb8 <configure_tc+0x64>)
  400e64:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400e66:	1d39      	adds	r1, r7, #4
  400e68:	f107 0208 	add.w	r2, r7, #8
  400e6c:	68fb      	ldr	r3, [r7, #12]
  400e6e:	9300      	str	r3, [sp, #0]
  400e70:	460b      	mov	r3, r1
  400e72:	68f9      	ldr	r1, [r7, #12]
  400e74:	2001      	movs	r0, #1
  400e76:	4c11      	ldr	r4, [pc, #68]	; (400ebc <configure_tc+0x68>)
  400e78:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400e7a:	687b      	ldr	r3, [r7, #4]
  400e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400e80:	461a      	mov	r2, r3
  400e82:	2100      	movs	r1, #0
  400e84:	480e      	ldr	r0, [pc, #56]	; (400ec0 <configure_tc+0x6c>)
  400e86:	4b0f      	ldr	r3, [pc, #60]	; (400ec4 <configure_tc+0x70>)
  400e88:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400e8a:	68bb      	ldr	r3, [r7, #8]
  400e8c:	68fa      	ldr	r2, [r7, #12]
  400e8e:	fbb2 f3f3 	udiv	r3, r2, r3
  400e92:	461a      	mov	r2, r3
  400e94:	2100      	movs	r1, #0
  400e96:	480a      	ldr	r0, [pc, #40]	; (400ec0 <configure_tc+0x6c>)
  400e98:	4b0b      	ldr	r3, [pc, #44]	; (400ec8 <configure_tc+0x74>)
  400e9a:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400e9c:	2017      	movs	r0, #23
  400e9e:	4b0b      	ldr	r3, [pc, #44]	; (400ecc <configure_tc+0x78>)
  400ea0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400ea2:	2210      	movs	r2, #16
  400ea4:	2100      	movs	r1, #0
  400ea6:	4806      	ldr	r0, [pc, #24]	; (400ec0 <configure_tc+0x6c>)
  400ea8:	4b09      	ldr	r3, [pc, #36]	; (400ed0 <configure_tc+0x7c>)
  400eaa:	4798      	blx	r3
  400eac:	bf00      	nop
  400eae:	3714      	adds	r7, #20
  400eb0:	46bd      	mov	sp, r7
  400eb2:	bd90      	pop	{r4, r7, pc}
  400eb4:	00400e05 	.word	0x00400e05
  400eb8:	004020b1 	.word	0x004020b1
  400ebc:	004004a1 	.word	0x004004a1
  400ec0:	40010000 	.word	0x40010000
  400ec4:	004003d9 	.word	0x004003d9
  400ec8:	00400431 	.word	0x00400431
  400ecc:	00400d45 	.word	0x00400d45
  400ed0:	00400455 	.word	0x00400455

00400ed4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400ed4:	b480      	push	{r7}
  400ed6:	b083      	sub	sp, #12
  400ed8:	af00      	add	r7, sp, #0
  400eda:	4603      	mov	r3, r0
  400edc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ede:	4908      	ldr	r1, [pc, #32]	; (400f00 <NVIC_EnableIRQ+0x2c>)
  400ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ee4:	095b      	lsrs	r3, r3, #5
  400ee6:	79fa      	ldrb	r2, [r7, #7]
  400ee8:	f002 021f 	and.w	r2, r2, #31
  400eec:	2001      	movs	r0, #1
  400eee:	fa00 f202 	lsl.w	r2, r0, r2
  400ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400ef6:	bf00      	nop
  400ef8:	370c      	adds	r7, #12
  400efa:	46bd      	mov	sp, r7
  400efc:	bc80      	pop	{r7}
  400efe:	4770      	bx	lr
  400f00:	e000e100 	.word	0xe000e100

00400f04 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400f04:	b480      	push	{r7}
  400f06:	b083      	sub	sp, #12
  400f08:	af00      	add	r7, sp, #0
  400f0a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f0c:	687b      	ldr	r3, [r7, #4]
  400f0e:	2b07      	cmp	r3, #7
  400f10:	d825      	bhi.n	400f5e <osc_get_rate+0x5a>
  400f12:	a201      	add	r2, pc, #4	; (adr r2, 400f18 <osc_get_rate+0x14>)
  400f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f18:	00400f39 	.word	0x00400f39
  400f1c:	00400f3f 	.word	0x00400f3f
  400f20:	00400f45 	.word	0x00400f45
  400f24:	00400f4b 	.word	0x00400f4b
  400f28:	00400f4f 	.word	0x00400f4f
  400f2c:	00400f53 	.word	0x00400f53
  400f30:	00400f57 	.word	0x00400f57
  400f34:	00400f5b 	.word	0x00400f5b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400f38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f3c:	e010      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f42:	e00d      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f48:	e00a      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400f4a:	4b08      	ldr	r3, [pc, #32]	; (400f6c <osc_get_rate+0x68>)
  400f4c:	e008      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400f4e:	4b08      	ldr	r3, [pc, #32]	; (400f70 <osc_get_rate+0x6c>)
  400f50:	e006      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400f52:	4b08      	ldr	r3, [pc, #32]	; (400f74 <osc_get_rate+0x70>)
  400f54:	e004      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400f56:	4b07      	ldr	r3, [pc, #28]	; (400f74 <osc_get_rate+0x70>)
  400f58:	e002      	b.n	400f60 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400f5a:	4b06      	ldr	r3, [pc, #24]	; (400f74 <osc_get_rate+0x70>)
  400f5c:	e000      	b.n	400f60 <osc_get_rate+0x5c>
	}

	return 0;
  400f5e:	2300      	movs	r3, #0
}
  400f60:	4618      	mov	r0, r3
  400f62:	370c      	adds	r7, #12
  400f64:	46bd      	mov	sp, r7
  400f66:	bc80      	pop	{r7}
  400f68:	4770      	bx	lr
  400f6a:	bf00      	nop
  400f6c:	003d0900 	.word	0x003d0900
  400f70:	007a1200 	.word	0x007a1200
  400f74:	00b71b00 	.word	0x00b71b00

00400f78 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400f78:	b580      	push	{r7, lr}
  400f7a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400f7c:	2006      	movs	r0, #6
  400f7e:	4b04      	ldr	r3, [pc, #16]	; (400f90 <sysclk_get_main_hz+0x18>)
  400f80:	4798      	blx	r3
  400f82:	4602      	mov	r2, r0
  400f84:	4613      	mov	r3, r2
  400f86:	009b      	lsls	r3, r3, #2
  400f88:	4413      	add	r3, r2
  400f8a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400f8c:	4618      	mov	r0, r3
  400f8e:	bd80      	pop	{r7, pc}
  400f90:	00400f05 	.word	0x00400f05

00400f94 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400f94:	b580      	push	{r7, lr}
  400f96:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400f98:	4b02      	ldr	r3, [pc, #8]	; (400fa4 <sysclk_get_cpu_hz+0x10>)
  400f9a:	4798      	blx	r3
  400f9c:	4603      	mov	r3, r0
  400f9e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fa0:	4618      	mov	r0, r3
  400fa2:	bd80      	pop	{r7, pc}
  400fa4:	00400f79 	.word	0x00400f79

00400fa8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400fa8:	b580      	push	{r7, lr}
  400faa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fac:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <sysclk_get_peripheral_hz+0x10>)
  400fae:	4798      	blx	r3
  400fb0:	4603      	mov	r3, r0
  400fb2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fb4:	4618      	mov	r0, r3
  400fb6:	bd80      	pop	{r7, pc}
  400fb8:	00400f79 	.word	0x00400f79

00400fbc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400fbc:	b580      	push	{r7, lr}
  400fbe:	b082      	sub	sp, #8
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400fc4:	6878      	ldr	r0, [r7, #4]
  400fc6:	4b03      	ldr	r3, [pc, #12]	; (400fd4 <sysclk_enable_peripheral_clock+0x18>)
  400fc8:	4798      	blx	r3
}
  400fca:	bf00      	nop
  400fcc:	3708      	adds	r7, #8
  400fce:	46bd      	mov	sp, r7
  400fd0:	bd80      	pop	{r7, pc}
  400fd2:	bf00      	nop
  400fd4:	004020b1 	.word	0x004020b1

00400fd8 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  400fd8:	b580      	push	{r7, lr}
  400fda:	b082      	sub	sp, #8
  400fdc:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  400fde:	2300      	movs	r3, #0
  400fe0:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  400fe2:	2101      	movs	r1, #1
  400fe4:	4815      	ldr	r0, [pc, #84]	; (40103c <USART0_Handler+0x64>)
  400fe6:	4b16      	ldr	r3, [pc, #88]	; (401040 <USART0_Handler+0x68>)
  400fe8:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  400fea:	4814      	ldr	r0, [pc, #80]	; (40103c <USART0_Handler+0x64>)
  400fec:	4b15      	ldr	r3, [pc, #84]	; (401044 <USART0_Handler+0x6c>)
  400fee:	4798      	blx	r3
  400ff0:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400ff2:	4915      	ldr	r1, [pc, #84]	; (401048 <USART0_Handler+0x70>)
  400ff4:	4811      	ldr	r0, [pc, #68]	; (40103c <USART0_Handler+0x64>)
  400ff6:	4b15      	ldr	r3, [pc, #84]	; (40104c <USART0_Handler+0x74>)
  400ff8:	4798      	blx	r3
  400ffa:	4603      	mov	r3, r0
  400ffc:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  400ffe:	683b      	ldr	r3, [r7, #0]
  401000:	f003 0301 	and.w	r3, r3, #1
  401004:	2b00      	cmp	r3, #0
  401006:	d011      	beq.n	40102c <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401008:	490f      	ldr	r1, [pc, #60]	; (401048 <USART0_Handler+0x70>)
  40100a:	480c      	ldr	r0, [pc, #48]	; (40103c <USART0_Handler+0x64>)
  40100c:	4b0f      	ldr	r3, [pc, #60]	; (40104c <USART0_Handler+0x74>)
  40100e:	4798      	blx	r3
  401010:	4603      	mov	r3, r0
  401012:	71fb      	strb	r3, [r7, #7]
		usart_buffer[usart_buffer_index] = (uint8_t) received_byte_wifi;
  401014:	4b0e      	ldr	r3, [pc, #56]	; (401050 <USART0_Handler+0x78>)
  401016:	681b      	ldr	r3, [r3, #0]
  401018:	4a0b      	ldr	r2, [pc, #44]	; (401048 <USART0_Handler+0x70>)
  40101a:	6812      	ldr	r2, [r2, #0]
  40101c:	b2d1      	uxtb	r1, r2
  40101e:	4a0d      	ldr	r2, [pc, #52]	; (401054 <USART0_Handler+0x7c>)
  401020:	54d1      	strb	r1, [r2, r3]
		usart_buffer_index++;
  401022:	4b0b      	ldr	r3, [pc, #44]	; (401050 <USART0_Handler+0x78>)
  401024:	681b      	ldr	r3, [r3, #0]
  401026:	3301      	adds	r3, #1
  401028:	4a09      	ldr	r2, [pc, #36]	; (401050 <USART0_Handler+0x78>)
  40102a:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  40102c:	2101      	movs	r1, #1
  40102e:	4803      	ldr	r0, [pc, #12]	; (40103c <USART0_Handler+0x64>)
  401030:	4b09      	ldr	r3, [pc, #36]	; (401058 <USART0_Handler+0x80>)
  401032:	4798      	blx	r3
}
  401034:	bf00      	nop
  401036:	3708      	adds	r7, #8
  401038:	46bd      	mov	sp, r7
  40103a:	bd80      	pop	{r7, pc}
  40103c:	40024000 	.word	0x40024000
  401040:	00400c09 	.word	0x00400c09
  401044:	00400c25 	.word	0x00400c25
  401048:	2000862c 	.word	0x2000862c
  40104c:	00400cf1 	.word	0x00400cf1
  401050:	20008824 	.word	0x20008824
  401054:	20008630 	.word	0x20008630
  401058:	00400bed 	.word	0x00400bed

0040105c <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart(void)
{
  40105c:	b5b0      	push	{r4, r5, r7, lr}
  40105e:	b086      	sub	sp, #24
  401060:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401062:	4b15      	ldr	r3, [pc, #84]	; (4010b8 <configure_usart+0x5c>)
  401064:	463c      	mov	r4, r7
  401066:	461d      	mov	r5, r3
  401068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40106a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40106c:	e895 0003 	ldmia.w	r5, {r0, r1}
  401070:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401074:	4b11      	ldr	r3, [pc, #68]	; (4010bc <configure_usart+0x60>)
  401076:	4798      	blx	r3
  401078:	4602      	mov	r2, r0
  40107a:	4b11      	ldr	r3, [pc, #68]	; (4010c0 <configure_usart+0x64>)
  40107c:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  40107e:	200e      	movs	r0, #14
  401080:	4b10      	ldr	r3, [pc, #64]	; (4010c4 <configure_usart+0x68>)
  401082:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401084:	4b0e      	ldr	r3, [pc, #56]	; (4010c0 <configure_usart+0x64>)
  401086:	681a      	ldr	r2, [r3, #0]
  401088:	463b      	mov	r3, r7
  40108a:	4619      	mov	r1, r3
  40108c:	480e      	ldr	r0, [pc, #56]	; (4010c8 <configure_usart+0x6c>)
  40108e:	4b0f      	ldr	r3, [pc, #60]	; (4010cc <configure_usart+0x70>)
  401090:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401092:	f04f 31ff 	mov.w	r1, #4294967295
  401096:	480c      	ldr	r0, [pc, #48]	; (4010c8 <configure_usart+0x6c>)
  401098:	4b0d      	ldr	r3, [pc, #52]	; (4010d0 <configure_usart+0x74>)
  40109a:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  40109c:	480a      	ldr	r0, [pc, #40]	; (4010c8 <configure_usart+0x6c>)
  40109e:	4b0d      	ldr	r3, [pc, #52]	; (4010d4 <configure_usart+0x78>)
  4010a0:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4010a2:	4809      	ldr	r0, [pc, #36]	; (4010c8 <configure_usart+0x6c>)
  4010a4:	4b0c      	ldr	r3, [pc, #48]	; (4010d8 <configure_usart+0x7c>)
  4010a6:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  4010a8:	200e      	movs	r0, #14
  4010aa:	4b0c      	ldr	r3, [pc, #48]	; (4010dc <configure_usart+0x80>)
  4010ac:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  4010ae:	bf00      	nop
  4010b0:	3718      	adds	r7, #24
  4010b2:	46bd      	mov	sp, r7
  4010b4:	bdb0      	pop	{r4, r5, r7, pc}
  4010b6:	bf00      	nop
  4010b8:	00407c1c 	.word	0x00407c1c
  4010bc:	00400fa9 	.word	0x00400fa9
  4010c0:	2000882c 	.word	0x2000882c
  4010c4:	00400fbd 	.word	0x00400fbd
  4010c8:	40024000 	.word	0x40024000
  4010cc:	00400b4d 	.word	0x00400b4d
  4010d0:	00400c09 	.word	0x00400c09
  4010d4:	00400b8d 	.word	0x00400b8d
  4010d8:	00400bbd 	.word	0x00400bbd
  4010dc:	00400ed5 	.word	0x00400ed5

004010e0 <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  4010e0:	b480      	push	{r7}
  4010e2:	b083      	sub	sp, #12
  4010e4:	af00      	add	r7, sp, #0
  4010e6:	6078      	str	r0, [r7, #4]
  4010e8:	6039      	str	r1, [r7, #0]
	//delay_ms(50);
	
	//input_buffer[buffer_index] = 0;
	//data_recieved = 1;
	//buffer_index = 0;
}
  4010ea:	bf00      	nop
  4010ec:	370c      	adds	r7, #12
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bc80      	pop	{r7}
  4010f2:	4770      	bx	lr

004010f4 <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(void){
  4010f4:	b590      	push	{r4, r7, lr}
  4010f6:	b083      	sub	sp, #12
  4010f8:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  4010fa:	200c      	movs	r0, #12
  4010fc:	4b0e      	ldr	r3, [pc, #56]	; (401138 <configure_command_complete+0x44>)
  4010fe:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401100:	220a      	movs	r2, #10
  401102:	2101      	movs	r1, #1
  401104:	480d      	ldr	r0, [pc, #52]	; (40113c <configure_command_complete+0x48>)
  401106:	4b0e      	ldr	r3, [pc, #56]	; (401140 <configure_command_complete+0x4c>)
  401108:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  40110a:	4b0e      	ldr	r3, [pc, #56]	; (401144 <configure_command_complete+0x50>)
  40110c:	9300      	str	r3, [sp, #0]
  40110e:	2370      	movs	r3, #112	; 0x70
  401110:	2201      	movs	r2, #1
  401112:	210c      	movs	r1, #12
  401114:	4809      	ldr	r0, [pc, #36]	; (40113c <configure_command_complete+0x48>)
  401116:	4c0c      	ldr	r4, [pc, #48]	; (401148 <configure_command_complete+0x54>)
  401118:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  40111a:	200c      	movs	r0, #12
  40111c:	4b0b      	ldr	r3, [pc, #44]	; (40114c <configure_command_complete+0x58>)
  40111e:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401120:	2101      	movs	r1, #1
  401122:	4806      	ldr	r0, [pc, #24]	; (40113c <configure_command_complete+0x48>)
  401124:	4b0a      	ldr	r3, [pc, #40]	; (401150 <configure_command_complete+0x5c>)
  401126:	4798      	blx	r3
	data_recieved = 0;
  401128:	4b0a      	ldr	r3, [pc, #40]	; (401154 <configure_command_complete+0x60>)
  40112a:	2200      	movs	r2, #0
  40112c:	601a      	str	r2, [r3, #0]
}
  40112e:	bf00      	nop
  401130:	3704      	adds	r7, #4
  401132:	46bd      	mov	sp, r7
  401134:	bd90      	pop	{r4, r7, pc}
  401136:	bf00      	nop
  401138:	004020b1 	.word	0x004020b1
  40113c:	400e1000 	.word	0x400e1000
  401140:	00401991 	.word	0x00401991
  401144:	004010e1 	.word	0x004010e1
  401148:	00400911 	.word	0x00400911
  40114c:	00400ed5 	.word	0x00400ed5
  401150:	00401c29 	.word	0x00401c29
  401154:	20008624 	.word	0x20008624

00401158 <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401158:	b480      	push	{r7}
  40115a:	b083      	sub	sp, #12
  40115c:	af00      	add	r7, sp, #0
  40115e:	6078      	str	r0, [r7, #4]
  401160:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  401162:	4b04      	ldr	r3, [pc, #16]	; (401174 <handler_web_setup+0x1c>)
  401164:	2201      	movs	r2, #1
  401166:	601a      	str	r2, [r3, #0]
}
  401168:	bf00      	nop
  40116a:	370c      	adds	r7, #12
  40116c:	46bd      	mov	sp, r7
  40116e:	bc80      	pop	{r7}
  401170:	4770      	bx	lr
  401172:	bf00      	nop
  401174:	20008628 	.word	0x20008628

00401178 <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(void){
  401178:	b590      	push	{r4, r7, lr}
  40117a:	b083      	sub	sp, #12
  40117c:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  40117e:	200c      	movs	r0, #12
  401180:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <configure_web_setup+0x44>)
  401182:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  401184:	220a      	movs	r2, #10
  401186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40118a:	480d      	ldr	r0, [pc, #52]	; (4011c0 <configure_web_setup+0x48>)
  40118c:	4b0d      	ldr	r3, [pc, #52]	; (4011c4 <configure_web_setup+0x4c>)
  40118e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  401190:	4b0d      	ldr	r3, [pc, #52]	; (4011c8 <configure_web_setup+0x50>)
  401192:	9300      	str	r3, [sp, #0]
  401194:	2379      	movs	r3, #121	; 0x79
  401196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40119a:	210c      	movs	r1, #12
  40119c:	4808      	ldr	r0, [pc, #32]	; (4011c0 <configure_web_setup+0x48>)
  40119e:	4c0b      	ldr	r4, [pc, #44]	; (4011cc <configure_web_setup+0x54>)
  4011a0:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  4011a2:	200c      	movs	r0, #12
  4011a4:	4b0a      	ldr	r3, [pc, #40]	; (4011d0 <configure_web_setup+0x58>)
  4011a6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  4011a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4011ac:	4804      	ldr	r0, [pc, #16]	; (4011c0 <configure_web_setup+0x48>)
  4011ae:	4b09      	ldr	r3, [pc, #36]	; (4011d4 <configure_web_setup+0x5c>)
  4011b0:	4798      	blx	r3
}
  4011b2:	bf00      	nop
  4011b4:	3704      	adds	r7, #4
  4011b6:	46bd      	mov	sp, r7
  4011b8:	bd90      	pop	{r4, r7, pc}
  4011ba:	bf00      	nop
  4011bc:	004020b1 	.word	0x004020b1
  4011c0:	400e1000 	.word	0x400e1000
  4011c4:	00401991 	.word	0x00401991
  4011c8:	00401159 	.word	0x00401159
  4011cc:	00400911 	.word	0x00400911
  4011d0:	00400ed5 	.word	0x00400ed5
  4011d4:	00401c29 	.word	0x00401c29

004011d8 <write_wifi_data_safe>:
	}
	
	//delay_ms(100);
}

uint8_t write_wifi_data_safe(uint16_t* data_pointer, uint8_t handle, char* resp, uint32_t timeout_ms){
  4011d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  4011dc:	b0a8      	sub	sp, #160	; 0xa0
  4011de:	af00      	add	r7, sp, #0
  4011e0:	60f8      	str	r0, [r7, #12]
  4011e2:	607a      	str	r2, [r7, #4]
  4011e4:	603b      	str	r3, [r7, #0]
  4011e6:	460b      	mov	r3, r1
  4011e8:	72fb      	strb	r3, [r7, #11]
	// returns 2 for a timeout
	// returns 3 for an unexpected stream closure
	// returns 10+stream handle for opening a stream
	
	// first thing: check if we've received any transmission since the last time
	if (usart_buffer_index != 0){
  4011ea:	4b64      	ldr	r3, [pc, #400]	; (40137c <write_wifi_data_safe+0x1a4>)
  4011ec:	681b      	ldr	r3, [r3, #0]
  4011ee:	2b00      	cmp	r3, #0
  4011f0:	d008      	beq.n	401204 <write_wifi_data_safe+0x2c>
		// check for different issues
		if(strstr(usart_buffer, "[Closed: ")){
  4011f2:	4963      	ldr	r1, [pc, #396]	; (401380 <write_wifi_data_safe+0x1a8>)
  4011f4:	4863      	ldr	r0, [pc, #396]	; (401384 <write_wifi_data_safe+0x1ac>)
  4011f6:	4b64      	ldr	r3, [pc, #400]	; (401388 <write_wifi_data_safe+0x1b0>)
  4011f8:	4798      	blx	r3
  4011fa:	4603      	mov	r3, r0
  4011fc:	2b00      	cmp	r3, #0
  4011fe:	d001      	beq.n	401204 <write_wifi_data_safe+0x2c>
			return COMMAND_STCLOSE; // return a value indicating closure of the stream
  401200:	2303      	movs	r3, #3
  401202:	e0b6      	b.n	401372 <write_wifi_data_safe+0x19a>
		}
	}
	
	uint8_t command_finished = 0;
  401204:	2300      	movs	r3, #0
  401206:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t command_failed = 0;
  40120a:	2300      	movs	r3, #0
  40120c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	uint8_t parse_error = 0;
  401210:	2300      	movs	r3, #0
  401212:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	
	uint32_t ms_counter = 0;
  401216:	2300      	movs	r3, #0
  401218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  40121c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  401220:	2100      	movs	r1, #0
  401222:	4858      	ldr	r0, [pc, #352]	; (401384 <write_wifi_data_safe+0x1ac>)
  401224:	4b59      	ldr	r3, [pc, #356]	; (40138c <write_wifi_data_safe+0x1b4>)
  401226:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  401228:	4b54      	ldr	r3, [pc, #336]	; (40137c <write_wifi_data_safe+0x1a4>)
  40122a:	2200      	movs	r2, #0
  40122c:	601a      	str	r2, [r3, #0]
	
	
	uint32_t end_index = (i2s_send_index*2 + PACKET_SIZE*2) % (AUDIO_BUFFER_SIZE*2); // the last uint16 index that will be hit if it sends
  40122e:	4b58      	ldr	r3, [pc, #352]	; (401390 <write_wifi_data_safe+0x1b8>)
  401230:	681b      	ldr	r3, [r3, #0]
  401232:	33c8      	adds	r3, #200	; 0xc8
  401234:	005b      	lsls	r3, r3, #1
  401236:	4a57      	ldr	r2, [pc, #348]	; (401394 <write_wifi_data_safe+0x1bc>)
  401238:	fba2 1203 	umull	r1, r2, r2, r3
  40123c:	0ad2      	lsrs	r2, r2, #11
  40123e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  401242:	fb01 f202 	mul.w	r2, r1, r2
  401246:	1a9b      	subs	r3, r3, r2
  401248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	
	if(end_index > (i2s_receive_index*2)) // make sure that the end index isn't in front of the receive index
  40124c:	4b52      	ldr	r3, [pc, #328]	; (401398 <write_wifi_data_safe+0x1c0>)
  40124e:	681b      	ldr	r3, [r3, #0]
  401250:	005a      	lsls	r2, r3, #1
  401252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  401256:	429a      	cmp	r2, r3
  401258:	d201      	bcs.n	40125e <write_wifi_data_safe+0x86>
		return COMMAND_RETRYIT;
  40125a:	2304      	movs	r3, #4
  40125c:	e089      	b.n	401372 <write_wifi_data_safe+0x19a>
	
	uint8_t curr_data_point;
	
	char* templated_command[30];
	usart_write_line(BOARD_USART,"\r\n");
  40125e:	494f      	ldr	r1, [pc, #316]	; (40139c <write_wifi_data_safe+0x1c4>)
  401260:	484f      	ldr	r0, [pc, #316]	; (4013a0 <write_wifi_data_safe+0x1c8>)
  401262:	4b50      	ldr	r3, [pc, #320]	; (4013a4 <write_wifi_data_safe+0x1cc>)
  401264:	4798      	blx	r3
	sprintf(templated_command, "write %d %d\r\n", handle, PACKET_SIZE * 2);
  401266:	7afa      	ldrb	r2, [r7, #11]
  401268:	f107 0014 	add.w	r0, r7, #20
  40126c:	f44f 73c8 	mov.w	r3, #400	; 0x190
  401270:	494d      	ldr	r1, [pc, #308]	; (4013a8 <write_wifi_data_safe+0x1d0>)
  401272:	4c4e      	ldr	r4, [pc, #312]	; (4013ac <write_wifi_data_safe+0x1d4>)
  401274:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  401276:	f107 0314 	add.w	r3, r7, #20
  40127a:	4619      	mov	r1, r3
  40127c:	4848      	ldr	r0, [pc, #288]	; (4013a0 <write_wifi_data_safe+0x1c8>)
  40127e:	4b49      	ldr	r3, [pc, #292]	; (4013a4 <write_wifi_data_safe+0x1cc>)
  401280:	4798      	blx	r3
	
	//usart_write_line(BOARD_USART, templated_command);
	
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (PACKET_SIZE*2); i++)
  401282:	4b43      	ldr	r3, [pc, #268]	; (401390 <write_wifi_data_safe+0x1b8>)
  401284:	681b      	ldr	r3, [r3, #0]
  401286:	005b      	lsls	r3, r3, #1
  401288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  40128c:	e01c      	b.n	4012c8 <write_wifi_data_safe+0xf0>
	{
		curr_data_point = ((uint8_t*) data_pointer)[i % (AUDIO_BUFFER_SIZE*2)];	
  40128e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  401292:	4a40      	ldr	r2, [pc, #256]	; (401394 <write_wifi_data_safe+0x1bc>)
  401294:	fb82 1203 	smull	r1, r2, r2, r3
  401298:	12d1      	asrs	r1, r2, #11
  40129a:	17da      	asrs	r2, r3, #31
  40129c:	1a8a      	subs	r2, r1, r2
  40129e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  4012a2:	fb01 f202 	mul.w	r2, r1, r2
  4012a6:	1a9a      	subs	r2, r3, r2
  4012a8:	68fb      	ldr	r3, [r7, #12]
  4012aa:	4413      	add	r3, r2
  4012ac:	781b      	ldrb	r3, [r3, #0]
  4012ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		usart_putchar(BOARD_USART, curr_data_point);
  4012b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
  4012b6:	4619      	mov	r1, r3
  4012b8:	4839      	ldr	r0, [pc, #228]	; (4013a0 <write_wifi_data_safe+0x1c8>)
  4012ba:	4b3d      	ldr	r3, [pc, #244]	; (4013b0 <write_wifi_data_safe+0x1d8>)
  4012bc:	4798      	blx	r3
	sprintf(templated_command, "write %d %d\r\n", handle, PACKET_SIZE * 2);
	usart_write_line(BOARD_USART, templated_command);
	
	//usart_write_line(BOARD_USART, templated_command);
	
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (PACKET_SIZE*2); i++)
  4012be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  4012c2:	3301      	adds	r3, #1
  4012c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  4012c8:	4b31      	ldr	r3, [pc, #196]	; (401390 <write_wifi_data_safe+0x1b8>)
  4012ca:	681b      	ldr	r3, [r3, #0]
  4012cc:	33c8      	adds	r3, #200	; 0xc8
  4012ce:	005a      	lsls	r2, r3, #1
  4012d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  4012d4:	429a      	cmp	r2, r3
  4012d6:	d8da      	bhi.n	40128e <write_wifi_data_safe+0xb6>
	}
	
	
	
	while(1) {			
		if(strstr(usart_buffer, resp)){
  4012d8:	6879      	ldr	r1, [r7, #4]
  4012da:	482a      	ldr	r0, [pc, #168]	; (401384 <write_wifi_data_safe+0x1ac>)
  4012dc:	4b2a      	ldr	r3, [pc, #168]	; (401388 <write_wifi_data_safe+0x1b0>)
  4012de:	4798      	blx	r3
  4012e0:	4603      	mov	r3, r0
  4012e2:	2b00      	cmp	r3, #0
  4012e4:	d010      	beq.n	401308 <write_wifi_data_safe+0x130>
			i2s_send_index = (i2s_send_index + PACKET_SIZE) % AUDIO_BUFFER_SIZE; // recompute send index after loop execution
  4012e6:	4b2a      	ldr	r3, [pc, #168]	; (401390 <write_wifi_data_safe+0x1b8>)
  4012e8:	681b      	ldr	r3, [r3, #0]
  4012ea:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
  4012ee:	4b29      	ldr	r3, [pc, #164]	; (401394 <write_wifi_data_safe+0x1bc>)
  4012f0:	fba3 1302 	umull	r1, r3, r3, r2
  4012f4:	0a9b      	lsrs	r3, r3, #10
  4012f6:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  4012fa:	fb01 f303 	mul.w	r3, r1, r3
  4012fe:	1ad3      	subs	r3, r2, r3
  401300:	4a23      	ldr	r2, [pc, #140]	; (401390 <write_wifi_data_safe+0x1b8>)
  401302:	6013      	str	r3, [r2, #0]
			return COMMAND_SUCCESS; // successful response
  401304:	2300      	movs	r3, #0
  401306:	e034      	b.n	401372 <write_wifi_data_safe+0x19a>
			// otherwise, parse for handle
		}
		if(strstr(usart_buffer, "[Closed: ")){
  401308:	491d      	ldr	r1, [pc, #116]	; (401380 <write_wifi_data_safe+0x1a8>)
  40130a:	481e      	ldr	r0, [pc, #120]	; (401384 <write_wifi_data_safe+0x1ac>)
  40130c:	4b1e      	ldr	r3, [pc, #120]	; (401388 <write_wifi_data_safe+0x1b0>)
  40130e:	4798      	blx	r3
  401310:	4603      	mov	r3, r0
  401312:	2b00      	cmp	r3, #0
  401314:	d001      	beq.n	40131a <write_wifi_data_safe+0x142>
			return COMMAND_STCLOSE; // return a value indicating closure of the stream
  401316:	2303      	movs	r3, #3
  401318:	e02b      	b.n	401372 <write_wifi_data_safe+0x19a>
		}
		if(strstr(usart_buffer, "Command failed")){
  40131a:	4926      	ldr	r1, [pc, #152]	; (4013b4 <write_wifi_data_safe+0x1dc>)
  40131c:	4819      	ldr	r0, [pc, #100]	; (401384 <write_wifi_data_safe+0x1ac>)
  40131e:	4b1a      	ldr	r3, [pc, #104]	; (401388 <write_wifi_data_safe+0x1b0>)
  401320:	4798      	blx	r3
  401322:	4603      	mov	r3, r0
  401324:	2b00      	cmp	r3, #0
  401326:	d001      	beq.n	40132c <write_wifi_data_safe+0x154>
			return COMMAND_FAILURE; // command failed
  401328:	2301      	movs	r3, #1
  40132a:	e022      	b.n	401372 <write_wifi_data_safe+0x19a>
		}
		delay_ms(1);
  40132c:	4b22      	ldr	r3, [pc, #136]	; (4013b8 <write_wifi_data_safe+0x1e0>)
  40132e:	4798      	blx	r3
  401330:	4603      	mov	r3, r0
  401332:	f04f 0400 	mov.w	r4, #0
  401336:	f243 61af 	movw	r1, #13999	; 0x36af
  40133a:	f04f 0200 	mov.w	r2, #0
  40133e:	eb13 0b01 	adds.w	fp, r3, r1
  401342:	eb44 0c02 	adc.w	ip, r4, r2
  401346:	4658      	mov	r0, fp
  401348:	4661      	mov	r1, ip
  40134a:	4c1c      	ldr	r4, [pc, #112]	; (4013bc <write_wifi_data_safe+0x1e4>)
  40134c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401350:	f04f 0300 	mov.w	r3, #0
  401354:	47a0      	blx	r4
  401356:	4603      	mov	r3, r0
  401358:	460c      	mov	r4, r1
  40135a:	4618      	mov	r0, r3
  40135c:	4b18      	ldr	r3, [pc, #96]	; (4013c0 <write_wifi_data_safe+0x1e8>)
  40135e:	4798      	blx	r3
		if(ms_counter++ > timeout_ms){
  401360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  401364:	1c5a      	adds	r2, r3, #1
  401366:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  40136a:	683a      	ldr	r2, [r7, #0]
  40136c:	4293      	cmp	r3, r2
  40136e:	d9b3      	bls.n	4012d8 <write_wifi_data_safe+0x100>
			return COMMAND_TIMEOUT;
  401370:	2302      	movs	r3, #2
		}
	}
	
}
  401372:	4618      	mov	r0, r3
  401374:	37a0      	adds	r7, #160	; 0xa0
  401376:	46bd      	mov	sp, r7
  401378:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  40137c:	20008824 	.word	0x20008824
  401380:	00407c34 	.word	0x00407c34
  401384:	20008630 	.word	0x20008630
  401388:	00403295 	.word	0x00403295
  40138c:	00402df1 	.word	0x00402df1
  401390:	20008828 	.word	0x20008828
  401394:	10624dd3 	.word	0x10624dd3
  401398:	200008a0 	.word	0x200008a0
  40139c:	00407c40 	.word	0x00407c40
  4013a0:	40024000 	.word	0x40024000
  4013a4:	00400cc1 	.word	0x00400cc1
  4013a8:	00407c44 	.word	0x00407c44
  4013ac:	00402e8d 	.word	0x00402e8d
  4013b0:	00400c91 	.word	0x00400c91
  4013b4:	00407c54 	.word	0x00407c54
  4013b8:	00400f95 	.word	0x00400f95
  4013bc:	00402a89 	.word	0x00402a89
  4013c0:	20000001 	.word	0x20000001

004013c4 <write_wifi_command_safe>:

uint8_t write_wifi_command_safe(char* command, char* resp, uint32_t timeout_ms, uint8_t handle_expected){
  4013c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  4013c8:	b08a      	sub	sp, #40	; 0x28
  4013ca:	af00      	add	r7, sp, #0
  4013cc:	60f8      	str	r0, [r7, #12]
  4013ce:	60b9      	str	r1, [r7, #8]
  4013d0:	607a      	str	r2, [r7, #4]
  4013d2:	70fb      	strb	r3, [r7, #3]
	// returns 0 for a successful write
	// returns 1 for a failed write
	// returns 2 for a timeout
	// returns 10+stream handle for opening a stream
	
	uint8_t command_finished = 0;
  4013d4:	2300      	movs	r3, #0
  4013d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t command_failed = 0;
  4013da:	2300      	movs	r3, #0
  4013dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t parse_error = 0;
  4013e0:	2300      	movs	r3, #0
  4013e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	
	uint32_t ms_counter = 0;
  4013e6:	2300      	movs	r3, #0
  4013e8:	627b      	str	r3, [r7, #36]	; 0x24
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  4013ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4013ee:	2100      	movs	r1, #0
  4013f0:	4832      	ldr	r0, [pc, #200]	; (4014bc <write_wifi_command_safe+0xf8>)
  4013f2:	4b33      	ldr	r3, [pc, #204]	; (4014c0 <write_wifi_command_safe+0xfc>)
  4013f4:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  4013f6:	4b33      	ldr	r3, [pc, #204]	; (4014c4 <write_wifi_command_safe+0x100>)
  4013f8:	2200      	movs	r2, #0
  4013fa:	601a      	str	r2, [r3, #0]
	
	usart_write_line(BOARD_USART,"\r\n");
  4013fc:	4932      	ldr	r1, [pc, #200]	; (4014c8 <write_wifi_command_safe+0x104>)
  4013fe:	4833      	ldr	r0, [pc, #204]	; (4014cc <write_wifi_command_safe+0x108>)
  401400:	4b33      	ldr	r3, [pc, #204]	; (4014d0 <write_wifi_command_safe+0x10c>)
  401402:	4798      	blx	r3
	usart_write_line(BOARD_USART, command);
  401404:	68f9      	ldr	r1, [r7, #12]
  401406:	4831      	ldr	r0, [pc, #196]	; (4014cc <write_wifi_command_safe+0x108>)
  401408:	4b31      	ldr	r3, [pc, #196]	; (4014d0 <write_wifi_command_safe+0x10c>)
  40140a:	4798      	blx	r3
	
	while(1) {			
		if( (strstr(usart_buffer, resp))  && (usart_buffer[usart_buffer_index-1] == 10)){
  40140c:	68b9      	ldr	r1, [r7, #8]
  40140e:	482b      	ldr	r0, [pc, #172]	; (4014bc <write_wifi_command_safe+0xf8>)
  401410:	4b30      	ldr	r3, [pc, #192]	; (4014d4 <write_wifi_command_safe+0x110>)
  401412:	4798      	blx	r3
  401414:	4603      	mov	r3, r0
  401416:	2b00      	cmp	r3, #0
  401418:	d020      	beq.n	40145c <write_wifi_command_safe+0x98>
  40141a:	4b2a      	ldr	r3, [pc, #168]	; (4014c4 <write_wifi_command_safe+0x100>)
  40141c:	681b      	ldr	r3, [r3, #0]
  40141e:	3b01      	subs	r3, #1
  401420:	4a26      	ldr	r2, [pc, #152]	; (4014bc <write_wifi_command_safe+0xf8>)
  401422:	5cd3      	ldrb	r3, [r2, r3]
  401424:	b2db      	uxtb	r3, r3
  401426:	2b0a      	cmp	r3, #10
  401428:	d118      	bne.n	40145c <write_wifi_command_safe+0x98>
			if(!handle_expected) return COMMAND_SUCCESS; // successful response
  40142a:	78fb      	ldrb	r3, [r7, #3]
  40142c:	2b00      	cmp	r3, #0
  40142e:	d101      	bne.n	401434 <write_wifi_command_safe+0x70>
  401430:	2300      	movs	r3, #0
  401432:	e03d      	b.n	4014b0 <write_wifi_command_safe+0xec>
			// otherwise, parse for handle
			char *opened_pointer = strstr(usart_buffer, resp);
  401434:	68b9      	ldr	r1, [r7, #8]
  401436:	4821      	ldr	r0, [pc, #132]	; (4014bc <write_wifi_command_safe+0xf8>)
  401438:	4b26      	ldr	r3, [pc, #152]	; (4014d4 <write_wifi_command_safe+0x110>)
  40143a:	4798      	blx	r3
  40143c:	61f8      	str	r0, [r7, #28]
			uint32_t buffer_offset = ((uint8_t *) opened_pointer) - usart_buffer;
  40143e:	69fb      	ldr	r3, [r7, #28]
  401440:	4a1e      	ldr	r2, [pc, #120]	; (4014bc <write_wifi_command_safe+0xf8>)
  401442:	1a9b      	subs	r3, r3, r2
  401444:	61bb      	str	r3, [r7, #24]
			uint8_t handle = usart_buffer[buffer_offset+13] - '0';
  401446:	69bb      	ldr	r3, [r7, #24]
  401448:	330d      	adds	r3, #13
  40144a:	4a1c      	ldr	r2, [pc, #112]	; (4014bc <write_wifi_command_safe+0xf8>)
  40144c:	5cd3      	ldrb	r3, [r2, r3]
  40144e:	b2db      	uxtb	r3, r3
  401450:	3b30      	subs	r3, #48	; 0x30
  401452:	75fb      	strb	r3, [r7, #23]
			return handle+10;
  401454:	7dfb      	ldrb	r3, [r7, #23]
  401456:	330a      	adds	r3, #10
  401458:	b2db      	uxtb	r3, r3
  40145a:	e029      	b.n	4014b0 <write_wifi_command_safe+0xec>
		}
		if(strstr(usart_buffer, "Command failed")){
  40145c:	491e      	ldr	r1, [pc, #120]	; (4014d8 <write_wifi_command_safe+0x114>)
  40145e:	4817      	ldr	r0, [pc, #92]	; (4014bc <write_wifi_command_safe+0xf8>)
  401460:	4b1c      	ldr	r3, [pc, #112]	; (4014d4 <write_wifi_command_safe+0x110>)
  401462:	4798      	blx	r3
  401464:	4603      	mov	r3, r0
  401466:	2b00      	cmp	r3, #0
  401468:	d001      	beq.n	40146e <write_wifi_command_safe+0xaa>
			return COMMAND_FAILURE; // command failed
  40146a:	2301      	movs	r3, #1
  40146c:	e020      	b.n	4014b0 <write_wifi_command_safe+0xec>
		}
		delay_ms(1);
  40146e:	4b1b      	ldr	r3, [pc, #108]	; (4014dc <write_wifi_command_safe+0x118>)
  401470:	4798      	blx	r3
  401472:	4603      	mov	r3, r0
  401474:	f04f 0400 	mov.w	r4, #0
  401478:	f243 61af 	movw	r1, #13999	; 0x36af
  40147c:	f04f 0200 	mov.w	r2, #0
  401480:	eb13 0b01 	adds.w	fp, r3, r1
  401484:	eb44 0c02 	adc.w	ip, r4, r2
  401488:	4658      	mov	r0, fp
  40148a:	4661      	mov	r1, ip
  40148c:	4c14      	ldr	r4, [pc, #80]	; (4014e0 <write_wifi_command_safe+0x11c>)
  40148e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401492:	f04f 0300 	mov.w	r3, #0
  401496:	47a0      	blx	r4
  401498:	4603      	mov	r3, r0
  40149a:	460c      	mov	r4, r1
  40149c:	4618      	mov	r0, r3
  40149e:	4b11      	ldr	r3, [pc, #68]	; (4014e4 <write_wifi_command_safe+0x120>)
  4014a0:	4798      	blx	r3
		if(ms_counter++ > timeout_ms){
  4014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4014a4:	1c5a      	adds	r2, r3, #1
  4014a6:	627a      	str	r2, [r7, #36]	; 0x24
  4014a8:	687a      	ldr	r2, [r7, #4]
  4014aa:	4293      	cmp	r3, r2
  4014ac:	d9ae      	bls.n	40140c <write_wifi_command_safe+0x48>
			return COMMAND_TIMEOUT;
  4014ae:	2302      	movs	r3, #2
	
	// now that the response has been processed, set the buffer index back to 0
	usart_buffer_index = 0;
	
	
}
  4014b0:	4618      	mov	r0, r3
  4014b2:	3728      	adds	r7, #40	; 0x28
  4014b4:	46bd      	mov	sp, r7
  4014b6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  4014ba:	bf00      	nop
  4014bc:	20008630 	.word	0x20008630
  4014c0:	00402df1 	.word	0x00402df1
  4014c4:	20008824 	.word	0x20008824
  4014c8:	00407c40 	.word	0x00407c40
  4014cc:	40024000 	.word	0x40024000
  4014d0:	00400cc1 	.word	0x00400cc1
  4014d4:	00403295 	.word	0x00403295
  4014d8:	00407c54 	.word	0x00407c54
  4014dc:	00400f95 	.word	0x00400f95
  4014e0:	00402a89 	.word	0x00402a89
  4014e4:	20000001 	.word	0x20000001

004014e8 <open_websocket>:
		return -1;
	}
	
}

uint8_t open_websocket(uint8_t number_of_attempts) {
  4014e8:	b590      	push	{r4, r7, lr}
  4014ea:	b085      	sub	sp, #20
  4014ec:	af00      	add	r7, sp, #0
  4014ee:	4603      	mov	r3, r0
  4014f0:	71fb      	strb	r3, [r7, #7]
	// figure out handle
	//write_wifi_command("close all\r\n", 2);
	uint8_t status_code;
	for(int i=0; i<number_of_attempts; i++){
  4014f2:	2300      	movs	r3, #0
  4014f4:	60fb      	str	r3, [r7, #12]
  4014f6:	e01c      	b.n	401532 <open_websocket+0x4a>
	
		uint8_t status_code = write_wifi_command_safe("websocket_client -f bin wss://bigbrothersees.me/source_audio_socket\r\n", "[Opened: ", 20000, 1);
  4014f8:	2301      	movs	r3, #1
  4014fa:	f644 6220 	movw	r2, #20000	; 0x4e20
  4014fe:	4911      	ldr	r1, [pc, #68]	; (401544 <open_websocket+0x5c>)
  401500:	4811      	ldr	r0, [pc, #68]	; (401548 <open_websocket+0x60>)
  401502:	4c12      	ldr	r4, [pc, #72]	; (40154c <open_websocket+0x64>)
  401504:	47a0      	blx	r4
  401506:	4603      	mov	r3, r0
  401508:	72fb      	strb	r3, [r7, #11]
		if (status_code >= 10){
  40150a:	7afb      	ldrb	r3, [r7, #11]
  40150c:	2b09      	cmp	r3, #9
  40150e:	d90d      	bls.n	40152c <open_websocket+0x44>
			if (status_code > 18){
  401510:	7afb      	ldrb	r3, [r7, #11]
  401512:	2b12      	cmp	r3, #18
  401514:	d906      	bls.n	401524 <open_websocket+0x3c>
				write_wifi_command_safe("close all\r\n","Success",200,0);
  401516:	2300      	movs	r3, #0
  401518:	22c8      	movs	r2, #200	; 0xc8
  40151a:	490d      	ldr	r1, [pc, #52]	; (401550 <open_websocket+0x68>)
  40151c:	480d      	ldr	r0, [pc, #52]	; (401554 <open_websocket+0x6c>)
  40151e:	4c0b      	ldr	r4, [pc, #44]	; (40154c <open_websocket+0x64>)
  401520:	47a0      	blx	r4
				continue;
  401522:	e003      	b.n	40152c <open_websocket+0x44>
			}
			return status_code - 10;
  401524:	7afb      	ldrb	r3, [r7, #11]
  401526:	3b0a      	subs	r3, #10
  401528:	b2db      	uxtb	r3, r3
  40152a:	e007      	b.n	40153c <open_websocket+0x54>

uint8_t open_websocket(uint8_t number_of_attempts) {
	// figure out handle
	//write_wifi_command("close all\r\n", 2);
	uint8_t status_code;
	for(int i=0; i<number_of_attempts; i++){
  40152c:	68fb      	ldr	r3, [r7, #12]
  40152e:	3301      	adds	r3, #1
  401530:	60fb      	str	r3, [r7, #12]
  401532:	79fa      	ldrb	r2, [r7, #7]
  401534:	68fb      	ldr	r3, [r7, #12]
  401536:	429a      	cmp	r2, r3
  401538:	dcde      	bgt.n	4014f8 <open_websocket+0x10>
			return status_code - 10;
		}
		
	}
	// should check last thing in input buffer for handle
	return NO_WEBSOCKET_OPEN; // indicate failure
  40153a:	230a      	movs	r3, #10
}
  40153c:	4618      	mov	r0, r3
  40153e:	3714      	adds	r7, #20
  401540:	46bd      	mov	sp, r7
  401542:	bd90      	pop	{r4, r7, pc}
  401544:	00407d14 	.word	0x00407d14
  401548:	00407d20 	.word	0x00407d20
  40154c:	004013c5 	.word	0x004013c5
  401550:	00407d68 	.word	0x00407d68
  401554:	00407c64 	.word	0x00407c64

00401558 <send_data_ws>:

uint8_t send_data_ws(uint16_t* samples_data, uint8_t handle) {
  401558:	b590      	push	{r4, r7, lr}
  40155a:	b085      	sub	sp, #20
  40155c:	af00      	add	r7, sp, #0
  40155e:	6078      	str	r0, [r7, #4]
  401560:	460b      	mov	r3, r1
  401562:	70fb      	strb	r3, [r7, #3]
	// don't send if there are fewer than PACKET_SIZE samples to send
	uint8_t status_code = write_wifi_data_safe(samples_data, handle, "Success", 500);
  401564:	78f9      	ldrb	r1, [r7, #3]
  401566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  40156a:	4a05      	ldr	r2, [pc, #20]	; (401580 <send_data_ws+0x28>)
  40156c:	6878      	ldr	r0, [r7, #4]
  40156e:	4c05      	ldr	r4, [pc, #20]	; (401584 <send_data_ws+0x2c>)
  401570:	47a0      	blx	r4
  401572:	4603      	mov	r3, r0
  401574:	73fb      	strb	r3, [r7, #15]
	return status_code;
  401576:	7bfb      	ldrb	r3, [r7, #15]
}
  401578:	4618      	mov	r0, r3
  40157a:	3714      	adds	r7, #20
  40157c:	46bd      	mov	sp, r7
  40157e:	bd90      	pop	{r4, r7, pc}
  401580:	00407d68 	.word	0x00407d68
  401584:	004011d9 	.word	0x004011d9

00401588 <check_ws_handle>:
	sprintf(templated_command, "fcr batman.txt %d\r\n", num_bytes);
	usart_write_line(BOARD_USART, templated_command);
	usart_write_line(BOARD_USART, message);
}

uint8_t check_ws_handle(uint8_t theoretical_handle){
  401588:	b590      	push	{r4, r7, lr}
  40158a:	b0ad      	sub	sp, #180	; 0xb4
  40158c:	af00      	add	r7, sp, #0
  40158e:	4603      	mov	r3, r0
  401590:	71fb      	strb	r3, [r7, #7]
	
	char* templated_response[40];
	sprintf(templated_response, "%d WEBC", theoretical_handle);
  401592:	79fa      	ldrb	r2, [r7, #7]
  401594:	f107 030c 	add.w	r3, r7, #12
  401598:	490c      	ldr	r1, [pc, #48]	; (4015cc <check_ws_handle+0x44>)
  40159a:	4618      	mov	r0, r3
  40159c:	4b0c      	ldr	r3, [pc, #48]	; (4015d0 <check_ws_handle+0x48>)
  40159e:	4798      	blx	r3
	
	uint8_t command_response = write_wifi_command_safe("list\r\n", templated_response, 100, 0);
  4015a0:	f107 010c 	add.w	r1, r7, #12
  4015a4:	2300      	movs	r3, #0
  4015a6:	2264      	movs	r2, #100	; 0x64
  4015a8:	480a      	ldr	r0, [pc, #40]	; (4015d4 <check_ws_handle+0x4c>)
  4015aa:	4c0b      	ldr	r4, [pc, #44]	; (4015d8 <check_ws_handle+0x50>)
  4015ac:	47a0      	blx	r4
  4015ae:	4603      	mov	r3, r0
  4015b0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	if(command_response == COMMAND_SUCCESS){
  4015b4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  4015b8:	2b00      	cmp	r3, #0
  4015ba:	d101      	bne.n	4015c0 <check_ws_handle+0x38>
		return COMMAND_SUCCESS;
  4015bc:	2300      	movs	r3, #0
  4015be:	e000      	b.n	4015c2 <check_ws_handle+0x3a>
	}else{
		return COMMAND_FAILURE;
  4015c0:	2301      	movs	r3, #1
	}
}
  4015c2:	4618      	mov	r0, r3
  4015c4:	37b4      	adds	r7, #180	; 0xb4
  4015c6:	46bd      	mov	sp, r7
  4015c8:	bd90      	pop	{r4, r7, pc}
  4015ca:	bf00      	nop
  4015cc:	00407d98 	.word	0x00407d98
  4015d0:	00402e8d 	.word	0x00402e8d
  4015d4:	00407da0 	.word	0x00407da0
  4015d8:	004013c5 	.word	0x004013c5

004015dc <configure_wifi>:
}

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  4015dc:	b580      	push	{r7, lr}
  4015de:	af00      	add	r7, sp, #0
	configure_usart();
  4015e0:	4b05      	ldr	r3, [pc, #20]	; (4015f8 <configure_wifi+0x1c>)
  4015e2:	4798      	blx	r3
	configure_command_complete();
  4015e4:	4b05      	ldr	r3, [pc, #20]	; (4015fc <configure_wifi+0x20>)
  4015e6:	4798      	blx	r3
	configure_web_setup();	
  4015e8:	4b05      	ldr	r3, [pc, #20]	; (401600 <configure_wifi+0x24>)
  4015ea:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4015ec:	2101      	movs	r1, #1
  4015ee:	4805      	ldr	r0, [pc, #20]	; (401604 <configure_wifi+0x28>)
  4015f0:	4b05      	ldr	r3, [pc, #20]	; (401608 <configure_wifi+0x2c>)
  4015f2:	4798      	blx	r3
}
  4015f4:	bf00      	nop
  4015f6:	bd80      	pop	{r7, pc}
  4015f8:	0040105d 	.word	0x0040105d
  4015fc:	004010f5 	.word	0x004010f5
  401600:	00401179 	.word	0x00401179
  401604:	40024000 	.word	0x40024000
  401608:	00400bed 	.word	0x00400bed

0040160c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40160c:	b580      	push	{r7, lr}
  40160e:	b082      	sub	sp, #8
  401610:	af00      	add	r7, sp, #0
  401612:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	2b07      	cmp	r3, #7
  401618:	d831      	bhi.n	40167e <osc_enable+0x72>
  40161a:	a201      	add	r2, pc, #4	; (adr r2, 401620 <osc_enable+0x14>)
  40161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401620:	0040167d 	.word	0x0040167d
  401624:	00401641 	.word	0x00401641
  401628:	00401649 	.word	0x00401649
  40162c:	00401651 	.word	0x00401651
  401630:	00401659 	.word	0x00401659
  401634:	00401661 	.word	0x00401661
  401638:	00401669 	.word	0x00401669
  40163c:	00401673 	.word	0x00401673
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401640:	2000      	movs	r0, #0
  401642:	4b11      	ldr	r3, [pc, #68]	; (401688 <osc_enable+0x7c>)
  401644:	4798      	blx	r3
		break;
  401646:	e01a      	b.n	40167e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401648:	2001      	movs	r0, #1
  40164a:	4b0f      	ldr	r3, [pc, #60]	; (401688 <osc_enable+0x7c>)
  40164c:	4798      	blx	r3
		break;
  40164e:	e016      	b.n	40167e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401650:	2000      	movs	r0, #0
  401652:	4b0e      	ldr	r3, [pc, #56]	; (40168c <osc_enable+0x80>)
  401654:	4798      	blx	r3
		break;
  401656:	e012      	b.n	40167e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401658:	2010      	movs	r0, #16
  40165a:	4b0c      	ldr	r3, [pc, #48]	; (40168c <osc_enable+0x80>)
  40165c:	4798      	blx	r3
		break;
  40165e:	e00e      	b.n	40167e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401660:	2020      	movs	r0, #32
  401662:	4b0a      	ldr	r3, [pc, #40]	; (40168c <osc_enable+0x80>)
  401664:	4798      	blx	r3
		break;
  401666:	e00a      	b.n	40167e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401668:	213e      	movs	r1, #62	; 0x3e
  40166a:	2000      	movs	r0, #0
  40166c:	4b08      	ldr	r3, [pc, #32]	; (401690 <osc_enable+0x84>)
  40166e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  401670:	e005      	b.n	40167e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401672:	213e      	movs	r1, #62	; 0x3e
  401674:	2001      	movs	r0, #1
  401676:	4b06      	ldr	r3, [pc, #24]	; (401690 <osc_enable+0x84>)
  401678:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40167a:	e000      	b.n	40167e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40167c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40167e:	bf00      	nop
  401680:	3708      	adds	r7, #8
  401682:	46bd      	mov	sp, r7
  401684:	bd80      	pop	{r7, pc}
  401686:	bf00      	nop
  401688:	00401ee5 	.word	0x00401ee5
  40168c:	00401f51 	.word	0x00401f51
  401690:	00401fc1 	.word	0x00401fc1

00401694 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  401694:	b580      	push	{r7, lr}
  401696:	b082      	sub	sp, #8
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	2b07      	cmp	r3, #7
  4016a0:	d826      	bhi.n	4016f0 <osc_is_ready+0x5c>
  4016a2:	a201      	add	r2, pc, #4	; (adr r2, 4016a8 <osc_is_ready+0x14>)
  4016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4016a8:	004016c9 	.word	0x004016c9
  4016ac:	004016cd 	.word	0x004016cd
  4016b0:	004016cd 	.word	0x004016cd
  4016b4:	004016df 	.word	0x004016df
  4016b8:	004016df 	.word	0x004016df
  4016bc:	004016df 	.word	0x004016df
  4016c0:	004016df 	.word	0x004016df
  4016c4:	004016df 	.word	0x004016df
	case OSC_SLCK_32K_RC:
		return 1;
  4016c8:	2301      	movs	r3, #1
  4016ca:	e012      	b.n	4016f2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4016cc:	4b0b      	ldr	r3, [pc, #44]	; (4016fc <osc_is_ready+0x68>)
  4016ce:	4798      	blx	r3
  4016d0:	4603      	mov	r3, r0
  4016d2:	2b00      	cmp	r3, #0
  4016d4:	bf14      	ite	ne
  4016d6:	2301      	movne	r3, #1
  4016d8:	2300      	moveq	r3, #0
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	e009      	b.n	4016f2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4016de:	4b08      	ldr	r3, [pc, #32]	; (401700 <osc_is_ready+0x6c>)
  4016e0:	4798      	blx	r3
  4016e2:	4603      	mov	r3, r0
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	bf14      	ite	ne
  4016e8:	2301      	movne	r3, #1
  4016ea:	2300      	moveq	r3, #0
  4016ec:	b2db      	uxtb	r3, r3
  4016ee:	e000      	b.n	4016f2 <osc_is_ready+0x5e>
	}

	return 0;
  4016f0:	2300      	movs	r3, #0
}
  4016f2:	4618      	mov	r0, r3
  4016f4:	3708      	adds	r7, #8
  4016f6:	46bd      	mov	sp, r7
  4016f8:	bd80      	pop	{r7, pc}
  4016fa:	bf00      	nop
  4016fc:	00401f1d 	.word	0x00401f1d
  401700:	00402039 	.word	0x00402039

00401704 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401704:	b480      	push	{r7}
  401706:	b083      	sub	sp, #12
  401708:	af00      	add	r7, sp, #0
  40170a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40170c:	687b      	ldr	r3, [r7, #4]
  40170e:	2b07      	cmp	r3, #7
  401710:	d825      	bhi.n	40175e <osc_get_rate+0x5a>
  401712:	a201      	add	r2, pc, #4	; (adr r2, 401718 <osc_get_rate+0x14>)
  401714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401718:	00401739 	.word	0x00401739
  40171c:	0040173f 	.word	0x0040173f
  401720:	00401745 	.word	0x00401745
  401724:	0040174b 	.word	0x0040174b
  401728:	0040174f 	.word	0x0040174f
  40172c:	00401753 	.word	0x00401753
  401730:	00401757 	.word	0x00401757
  401734:	0040175b 	.word	0x0040175b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401738:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40173c:	e010      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40173e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401742:	e00d      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401748:	e00a      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40174a:	4b08      	ldr	r3, [pc, #32]	; (40176c <osc_get_rate+0x68>)
  40174c:	e008      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40174e:	4b08      	ldr	r3, [pc, #32]	; (401770 <osc_get_rate+0x6c>)
  401750:	e006      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401752:	4b08      	ldr	r3, [pc, #32]	; (401774 <osc_get_rate+0x70>)
  401754:	e004      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401756:	4b07      	ldr	r3, [pc, #28]	; (401774 <osc_get_rate+0x70>)
  401758:	e002      	b.n	401760 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40175a:	4b06      	ldr	r3, [pc, #24]	; (401774 <osc_get_rate+0x70>)
  40175c:	e000      	b.n	401760 <osc_get_rate+0x5c>
	}

	return 0;
  40175e:	2300      	movs	r3, #0
}
  401760:	4618      	mov	r0, r3
  401762:	370c      	adds	r7, #12
  401764:	46bd      	mov	sp, r7
  401766:	bc80      	pop	{r7}
  401768:	4770      	bx	lr
  40176a:	bf00      	nop
  40176c:	003d0900 	.word	0x003d0900
  401770:	007a1200 	.word	0x007a1200
  401774:	00b71b00 	.word	0x00b71b00

00401778 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401778:	b580      	push	{r7, lr}
  40177a:	b082      	sub	sp, #8
  40177c:	af00      	add	r7, sp, #0
  40177e:	4603      	mov	r3, r0
  401780:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401782:	bf00      	nop
  401784:	79fb      	ldrb	r3, [r7, #7]
  401786:	4618      	mov	r0, r3
  401788:	4b05      	ldr	r3, [pc, #20]	; (4017a0 <osc_wait_ready+0x28>)
  40178a:	4798      	blx	r3
  40178c:	4603      	mov	r3, r0
  40178e:	f083 0301 	eor.w	r3, r3, #1
  401792:	b2db      	uxtb	r3, r3
  401794:	2b00      	cmp	r3, #0
  401796:	d1f5      	bne.n	401784 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401798:	bf00      	nop
  40179a:	3708      	adds	r7, #8
  40179c:	46bd      	mov	sp, r7
  40179e:	bd80      	pop	{r7, pc}
  4017a0:	00401695 	.word	0x00401695

004017a4 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4017a4:	b580      	push	{r7, lr}
  4017a6:	b086      	sub	sp, #24
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	60f8      	str	r0, [r7, #12]
  4017ac:	607a      	str	r2, [r7, #4]
  4017ae:	603b      	str	r3, [r7, #0]
  4017b0:	460b      	mov	r3, r1
  4017b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4017b4:	7afb      	ldrb	r3, [r7, #11]
  4017b6:	4618      	mov	r0, r3
  4017b8:	4b0d      	ldr	r3, [pc, #52]	; (4017f0 <pll_config_init+0x4c>)
  4017ba:	4798      	blx	r3
  4017bc:	4602      	mov	r2, r0
  4017be:	687b      	ldr	r3, [r7, #4]
  4017c0:	fbb2 f3f3 	udiv	r3, r2, r3
  4017c4:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4017c6:	697b      	ldr	r3, [r7, #20]
  4017c8:	683a      	ldr	r2, [r7, #0]
  4017ca:	fb02 f303 	mul.w	r3, r2, r3
  4017ce:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4017d0:	683b      	ldr	r3, [r7, #0]
  4017d2:	3b01      	subs	r3, #1
  4017d4:	041a      	lsls	r2, r3, #16
  4017d6:	4b07      	ldr	r3, [pc, #28]	; (4017f4 <pll_config_init+0x50>)
  4017d8:	4013      	ands	r3, r2
  4017da:	687a      	ldr	r2, [r7, #4]
  4017dc:	b2d2      	uxtb	r2, r2
  4017de:	4313      	orrs	r3, r2
  4017e0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4017e4:	68fb      	ldr	r3, [r7, #12]
  4017e6:	601a      	str	r2, [r3, #0]
}
  4017e8:	bf00      	nop
  4017ea:	3718      	adds	r7, #24
  4017ec:	46bd      	mov	sp, r7
  4017ee:	bd80      	pop	{r7, pc}
  4017f0:	00401705 	.word	0x00401705
  4017f4:	07ff0000 	.word	0x07ff0000

004017f8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4017f8:	b580      	push	{r7, lr}
  4017fa:	b082      	sub	sp, #8
  4017fc:	af00      	add	r7, sp, #0
  4017fe:	6078      	str	r0, [r7, #4]
  401800:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401802:	683b      	ldr	r3, [r7, #0]
  401804:	2b00      	cmp	r3, #0
  401806:	d108      	bne.n	40181a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401808:	4b09      	ldr	r3, [pc, #36]	; (401830 <pll_enable+0x38>)
  40180a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40180c:	4a09      	ldr	r2, [pc, #36]	; (401834 <pll_enable+0x3c>)
  40180e:	687b      	ldr	r3, [r7, #4]
  401810:	681b      	ldr	r3, [r3, #0]
  401812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401816:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401818:	e005      	b.n	401826 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40181a:	4b07      	ldr	r3, [pc, #28]	; (401838 <pll_enable+0x40>)
  40181c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40181e:	4a05      	ldr	r2, [pc, #20]	; (401834 <pll_enable+0x3c>)
  401820:	687b      	ldr	r3, [r7, #4]
  401822:	681b      	ldr	r3, [r3, #0]
  401824:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  401826:	bf00      	nop
  401828:	3708      	adds	r7, #8
  40182a:	46bd      	mov	sp, r7
  40182c:	bd80      	pop	{r7, pc}
  40182e:	bf00      	nop
  401830:	00402051 	.word	0x00402051
  401834:	400e0400 	.word	0x400e0400
  401838:	00402081 	.word	0x00402081

0040183c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40183c:	b580      	push	{r7, lr}
  40183e:	b082      	sub	sp, #8
  401840:	af00      	add	r7, sp, #0
  401842:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401844:	687b      	ldr	r3, [r7, #4]
  401846:	2b00      	cmp	r3, #0
  401848:	d103      	bne.n	401852 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40184a:	4b05      	ldr	r3, [pc, #20]	; (401860 <pll_is_locked+0x24>)
  40184c:	4798      	blx	r3
  40184e:	4603      	mov	r3, r0
  401850:	e002      	b.n	401858 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401852:	4b04      	ldr	r3, [pc, #16]	; (401864 <pll_is_locked+0x28>)
  401854:	4798      	blx	r3
  401856:	4603      	mov	r3, r0
	}
}
  401858:	4618      	mov	r0, r3
  40185a:	3708      	adds	r7, #8
  40185c:	46bd      	mov	sp, r7
  40185e:	bd80      	pop	{r7, pc}
  401860:	00402069 	.word	0x00402069
  401864:	00402099 	.word	0x00402099

00401868 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401868:	b580      	push	{r7, lr}
  40186a:	b082      	sub	sp, #8
  40186c:	af00      	add	r7, sp, #0
  40186e:	4603      	mov	r3, r0
  401870:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401872:	79fb      	ldrb	r3, [r7, #7]
  401874:	3b03      	subs	r3, #3
  401876:	2b04      	cmp	r3, #4
  401878:	d808      	bhi.n	40188c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40187a:	79fb      	ldrb	r3, [r7, #7]
  40187c:	4618      	mov	r0, r3
  40187e:	4b06      	ldr	r3, [pc, #24]	; (401898 <pll_enable_source+0x30>)
  401880:	4798      	blx	r3
		osc_wait_ready(e_src);
  401882:	79fb      	ldrb	r3, [r7, #7]
  401884:	4618      	mov	r0, r3
  401886:	4b05      	ldr	r3, [pc, #20]	; (40189c <pll_enable_source+0x34>)
  401888:	4798      	blx	r3
		break;
  40188a:	e000      	b.n	40188e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40188c:	bf00      	nop
	}
}
  40188e:	bf00      	nop
  401890:	3708      	adds	r7, #8
  401892:	46bd      	mov	sp, r7
  401894:	bd80      	pop	{r7, pc}
  401896:	bf00      	nop
  401898:	0040160d 	.word	0x0040160d
  40189c:	00401779 	.word	0x00401779

004018a0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4018a0:	b580      	push	{r7, lr}
  4018a2:	b082      	sub	sp, #8
  4018a4:	af00      	add	r7, sp, #0
  4018a6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4018a8:	bf00      	nop
  4018aa:	6878      	ldr	r0, [r7, #4]
  4018ac:	4b04      	ldr	r3, [pc, #16]	; (4018c0 <pll_wait_for_lock+0x20>)
  4018ae:	4798      	blx	r3
  4018b0:	4603      	mov	r3, r0
  4018b2:	2b00      	cmp	r3, #0
  4018b4:	d0f9      	beq.n	4018aa <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4018b6:	2300      	movs	r3, #0
}
  4018b8:	4618      	mov	r0, r3
  4018ba:	3708      	adds	r7, #8
  4018bc:	46bd      	mov	sp, r7
  4018be:	bd80      	pop	{r7, pc}
  4018c0:	0040183d 	.word	0x0040183d

004018c4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4018c4:	b580      	push	{r7, lr}
  4018c6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4018c8:	2006      	movs	r0, #6
  4018ca:	4b04      	ldr	r3, [pc, #16]	; (4018dc <sysclk_get_main_hz+0x18>)
  4018cc:	4798      	blx	r3
  4018ce:	4602      	mov	r2, r0
  4018d0:	4613      	mov	r3, r2
  4018d2:	009b      	lsls	r3, r3, #2
  4018d4:	4413      	add	r3, r2
  4018d6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4018d8:	4618      	mov	r0, r3
  4018da:	bd80      	pop	{r7, pc}
  4018dc:	00401705 	.word	0x00401705

004018e0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4018e0:	b580      	push	{r7, lr}
  4018e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4018e4:	4b02      	ldr	r3, [pc, #8]	; (4018f0 <sysclk_get_cpu_hz+0x10>)
  4018e6:	4798      	blx	r3
  4018e8:	4603      	mov	r3, r0
  4018ea:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4018ec:	4618      	mov	r0, r3
  4018ee:	bd80      	pop	{r7, pc}
  4018f0:	004018c5 	.word	0x004018c5

004018f4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4018f4:	b590      	push	{r4, r7, lr}
  4018f6:	b083      	sub	sp, #12
  4018f8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4018fa:	4811      	ldr	r0, [pc, #68]	; (401940 <sysclk_init+0x4c>)
  4018fc:	4b11      	ldr	r3, [pc, #68]	; (401944 <sysclk_init+0x50>)
  4018fe:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401900:	2006      	movs	r0, #6
  401902:	4b11      	ldr	r3, [pc, #68]	; (401948 <sysclk_init+0x54>)
  401904:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401906:	1d38      	adds	r0, r7, #4
  401908:	2314      	movs	r3, #20
  40190a:	2201      	movs	r2, #1
  40190c:	2106      	movs	r1, #6
  40190e:	4c0f      	ldr	r4, [pc, #60]	; (40194c <sysclk_init+0x58>)
  401910:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401912:	1d3b      	adds	r3, r7, #4
  401914:	2100      	movs	r1, #0
  401916:	4618      	mov	r0, r3
  401918:	4b0d      	ldr	r3, [pc, #52]	; (401950 <sysclk_init+0x5c>)
  40191a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40191c:	2000      	movs	r0, #0
  40191e:	4b0d      	ldr	r3, [pc, #52]	; (401954 <sysclk_init+0x60>)
  401920:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401922:	2010      	movs	r0, #16
  401924:	4b0c      	ldr	r3, [pc, #48]	; (401958 <sysclk_init+0x64>)
  401926:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401928:	4b0c      	ldr	r3, [pc, #48]	; (40195c <sysclk_init+0x68>)
  40192a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40192c:	4b0c      	ldr	r3, [pc, #48]	; (401960 <sysclk_init+0x6c>)
  40192e:	4798      	blx	r3
  401930:	4603      	mov	r3, r0
  401932:	4618      	mov	r0, r3
  401934:	4b03      	ldr	r3, [pc, #12]	; (401944 <sysclk_init+0x50>)
  401936:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401938:	bf00      	nop
  40193a:	370c      	adds	r7, #12
  40193c:	46bd      	mov	sp, r7
  40193e:	bd90      	pop	{r4, r7, pc}
  401940:	07270e00 	.word	0x07270e00
  401944:	00402739 	.word	0x00402739
  401948:	00401869 	.word	0x00401869
  40194c:	004017a5 	.word	0x004017a5
  401950:	004017f9 	.word	0x004017f9
  401954:	004018a1 	.word	0x004018a1
  401958:	00401e65 	.word	0x00401e65
  40195c:	0040259d 	.word	0x0040259d
  401960:	004018e1 	.word	0x004018e1

00401964 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401964:	b480      	push	{r7}
  401966:	b085      	sub	sp, #20
  401968:	af00      	add	r7, sp, #0
  40196a:	60f8      	str	r0, [r7, #12]
  40196c:	60b9      	str	r1, [r7, #8]
  40196e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401970:	687b      	ldr	r3, [r7, #4]
  401972:	2b00      	cmp	r3, #0
  401974:	d003      	beq.n	40197e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401976:	68fb      	ldr	r3, [r7, #12]
  401978:	68ba      	ldr	r2, [r7, #8]
  40197a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  40197c:	e002      	b.n	401984 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	68ba      	ldr	r2, [r7, #8]
  401982:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  401984:	bf00      	nop
  401986:	3714      	adds	r7, #20
  401988:	46bd      	mov	sp, r7
  40198a:	bc80      	pop	{r7}
  40198c:	4770      	bx	lr
  40198e:	bf00      	nop

00401990 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401990:	b480      	push	{r7}
  401992:	b085      	sub	sp, #20
  401994:	af00      	add	r7, sp, #0
  401996:	60f8      	str	r0, [r7, #12]
  401998:	60b9      	str	r1, [r7, #8]
  40199a:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40199c:	68fb      	ldr	r3, [r7, #12]
  40199e:	68ba      	ldr	r2, [r7, #8]
  4019a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	005b      	lsls	r3, r3, #1
  4019a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4019ac:	fbb2 f3f3 	udiv	r3, r2, r3
  4019b0:	3b01      	subs	r3, #1
  4019b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4019b6:	68fb      	ldr	r3, [r7, #12]
  4019b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4019bc:	bf00      	nop
  4019be:	3714      	adds	r7, #20
  4019c0:	46bd      	mov	sp, r7
  4019c2:	bc80      	pop	{r7}
  4019c4:	4770      	bx	lr
  4019c6:	bf00      	nop

004019c8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4019c8:	b480      	push	{r7}
  4019ca:	b087      	sub	sp, #28
  4019cc:	af00      	add	r7, sp, #0
  4019ce:	60f8      	str	r0, [r7, #12]
  4019d0:	60b9      	str	r1, [r7, #8]
  4019d2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4019d4:	68fb      	ldr	r3, [r7, #12]
  4019d6:	687a      	ldr	r2, [r7, #4]
  4019d8:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4019da:	68bb      	ldr	r3, [r7, #8]
  4019dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4019e0:	d04a      	beq.n	401a78 <pio_set_peripheral+0xb0>
  4019e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4019e6:	d808      	bhi.n	4019fa <pio_set_peripheral+0x32>
  4019e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4019ec:	d016      	beq.n	401a1c <pio_set_peripheral+0x54>
  4019ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4019f2:	d02c      	beq.n	401a4e <pio_set_peripheral+0x86>
  4019f4:	2b00      	cmp	r3, #0
  4019f6:	d069      	beq.n	401acc <pio_set_peripheral+0x104>
  4019f8:	e064      	b.n	401ac4 <pio_set_peripheral+0xfc>
  4019fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4019fe:	d065      	beq.n	401acc <pio_set_peripheral+0x104>
  401a00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401a04:	d803      	bhi.n	401a0e <pio_set_peripheral+0x46>
  401a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401a0a:	d04a      	beq.n	401aa2 <pio_set_peripheral+0xda>
  401a0c:	e05a      	b.n	401ac4 <pio_set_peripheral+0xfc>
  401a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401a12:	d05b      	beq.n	401acc <pio_set_peripheral+0x104>
  401a14:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401a18:	d058      	beq.n	401acc <pio_set_peripheral+0x104>
  401a1a:	e053      	b.n	401ac4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a1c:	68fb      	ldr	r3, [r7, #12]
  401a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401a20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a26:	687b      	ldr	r3, [r7, #4]
  401a28:	43d9      	mvns	r1, r3
  401a2a:	697b      	ldr	r3, [r7, #20]
  401a2c:	400b      	ands	r3, r1
  401a2e:	401a      	ands	r2, r3
  401a30:	68fb      	ldr	r3, [r7, #12]
  401a32:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a34:	68fb      	ldr	r3, [r7, #12]
  401a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401a38:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401a3a:	68fb      	ldr	r3, [r7, #12]
  401a3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a3e:	687b      	ldr	r3, [r7, #4]
  401a40:	43d9      	mvns	r1, r3
  401a42:	697b      	ldr	r3, [r7, #20]
  401a44:	400b      	ands	r3, r1
  401a46:	401a      	ands	r2, r3
  401a48:	68fb      	ldr	r3, [r7, #12]
  401a4a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401a4c:	e03a      	b.n	401ac4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a4e:	68fb      	ldr	r3, [r7, #12]
  401a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401a52:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401a54:	687a      	ldr	r2, [r7, #4]
  401a56:	697b      	ldr	r3, [r7, #20]
  401a58:	431a      	orrs	r2, r3
  401a5a:	68fb      	ldr	r3, [r7, #12]
  401a5c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a5e:	68fb      	ldr	r3, [r7, #12]
  401a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401a62:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401a64:	68fb      	ldr	r3, [r7, #12]
  401a66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a68:	687b      	ldr	r3, [r7, #4]
  401a6a:	43d9      	mvns	r1, r3
  401a6c:	697b      	ldr	r3, [r7, #20]
  401a6e:	400b      	ands	r3, r1
  401a70:	401a      	ands	r2, r3
  401a72:	68fb      	ldr	r3, [r7, #12]
  401a74:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401a76:	e025      	b.n	401ac4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a78:	68fb      	ldr	r3, [r7, #12]
  401a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401a7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401a7e:	68fb      	ldr	r3, [r7, #12]
  401a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a82:	687b      	ldr	r3, [r7, #4]
  401a84:	43d9      	mvns	r1, r3
  401a86:	697b      	ldr	r3, [r7, #20]
  401a88:	400b      	ands	r3, r1
  401a8a:	401a      	ands	r2, r3
  401a8c:	68fb      	ldr	r3, [r7, #12]
  401a8e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a90:	68fb      	ldr	r3, [r7, #12]
  401a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401a94:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401a96:	687a      	ldr	r2, [r7, #4]
  401a98:	697b      	ldr	r3, [r7, #20]
  401a9a:	431a      	orrs	r2, r3
  401a9c:	68fb      	ldr	r3, [r7, #12]
  401a9e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401aa0:	e010      	b.n	401ac4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401aa2:	68fb      	ldr	r3, [r7, #12]
  401aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401aa6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401aa8:	687a      	ldr	r2, [r7, #4]
  401aaa:	697b      	ldr	r3, [r7, #20]
  401aac:	431a      	orrs	r2, r3
  401aae:	68fb      	ldr	r3, [r7, #12]
  401ab0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ab2:	68fb      	ldr	r3, [r7, #12]
  401ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401ab6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ab8:	687a      	ldr	r2, [r7, #4]
  401aba:	697b      	ldr	r3, [r7, #20]
  401abc:	431a      	orrs	r2, r3
  401abe:	68fb      	ldr	r3, [r7, #12]
  401ac0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401ac2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401ac4:	68fb      	ldr	r3, [r7, #12]
  401ac6:	687a      	ldr	r2, [r7, #4]
  401ac8:	605a      	str	r2, [r3, #4]
  401aca:	e000      	b.n	401ace <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  401acc:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  401ace:	371c      	adds	r7, #28
  401ad0:	46bd      	mov	sp, r7
  401ad2:	bc80      	pop	{r7}
  401ad4:	4770      	bx	lr
  401ad6:	bf00      	nop

00401ad8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401ad8:	b580      	push	{r7, lr}
  401ada:	b084      	sub	sp, #16
  401adc:	af00      	add	r7, sp, #0
  401ade:	60f8      	str	r0, [r7, #12]
  401ae0:	60b9      	str	r1, [r7, #8]
  401ae2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ae4:	68b9      	ldr	r1, [r7, #8]
  401ae6:	68f8      	ldr	r0, [r7, #12]
  401ae8:	4b19      	ldr	r3, [pc, #100]	; (401b50 <pio_set_input+0x78>)
  401aea:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401aec:	687b      	ldr	r3, [r7, #4]
  401aee:	f003 0301 	and.w	r3, r3, #1
  401af2:	461a      	mov	r2, r3
  401af4:	68b9      	ldr	r1, [r7, #8]
  401af6:	68f8      	ldr	r0, [r7, #12]
  401af8:	4b16      	ldr	r3, [pc, #88]	; (401b54 <pio_set_input+0x7c>)
  401afa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401afc:	687b      	ldr	r3, [r7, #4]
  401afe:	f003 030a 	and.w	r3, r3, #10
  401b02:	2b00      	cmp	r3, #0
  401b04:	d003      	beq.n	401b0e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401b06:	68fb      	ldr	r3, [r7, #12]
  401b08:	68ba      	ldr	r2, [r7, #8]
  401b0a:	621a      	str	r2, [r3, #32]
  401b0c:	e002      	b.n	401b14 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401b0e:	68fb      	ldr	r3, [r7, #12]
  401b10:	68ba      	ldr	r2, [r7, #8]
  401b12:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401b14:	687b      	ldr	r3, [r7, #4]
  401b16:	f003 0302 	and.w	r3, r3, #2
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	d004      	beq.n	401b28 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401b1e:	68fb      	ldr	r3, [r7, #12]
  401b20:	68ba      	ldr	r2, [r7, #8]
  401b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401b26:	e008      	b.n	401b3a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401b28:	687b      	ldr	r3, [r7, #4]
  401b2a:	f003 0308 	and.w	r3, r3, #8
  401b2e:	2b00      	cmp	r3, #0
  401b30:	d003      	beq.n	401b3a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401b32:	68fb      	ldr	r3, [r7, #12]
  401b34:	68ba      	ldr	r2, [r7, #8]
  401b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401b3a:	68fb      	ldr	r3, [r7, #12]
  401b3c:	68ba      	ldr	r2, [r7, #8]
  401b3e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401b40:	68fb      	ldr	r3, [r7, #12]
  401b42:	68ba      	ldr	r2, [r7, #8]
  401b44:	601a      	str	r2, [r3, #0]
}
  401b46:	bf00      	nop
  401b48:	3710      	adds	r7, #16
  401b4a:	46bd      	mov	sp, r7
  401b4c:	bd80      	pop	{r7, pc}
  401b4e:	bf00      	nop
  401b50:	00401c45 	.word	0x00401c45
  401b54:	00401965 	.word	0x00401965

00401b58 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401b58:	b580      	push	{r7, lr}
  401b5a:	b084      	sub	sp, #16
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	60f8      	str	r0, [r7, #12]
  401b60:	60b9      	str	r1, [r7, #8]
  401b62:	607a      	str	r2, [r7, #4]
  401b64:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401b66:	68b9      	ldr	r1, [r7, #8]
  401b68:	68f8      	ldr	r0, [r7, #12]
  401b6a:	4b12      	ldr	r3, [pc, #72]	; (401bb4 <pio_set_output+0x5c>)
  401b6c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401b6e:	69ba      	ldr	r2, [r7, #24]
  401b70:	68b9      	ldr	r1, [r7, #8]
  401b72:	68f8      	ldr	r0, [r7, #12]
  401b74:	4b10      	ldr	r3, [pc, #64]	; (401bb8 <pio_set_output+0x60>)
  401b76:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401b78:	683b      	ldr	r3, [r7, #0]
  401b7a:	2b00      	cmp	r3, #0
  401b7c:	d003      	beq.n	401b86 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401b7e:	68fb      	ldr	r3, [r7, #12]
  401b80:	68ba      	ldr	r2, [r7, #8]
  401b82:	651a      	str	r2, [r3, #80]	; 0x50
  401b84:	e002      	b.n	401b8c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401b86:	68fb      	ldr	r3, [r7, #12]
  401b88:	68ba      	ldr	r2, [r7, #8]
  401b8a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	2b00      	cmp	r3, #0
  401b90:	d003      	beq.n	401b9a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401b92:	68fb      	ldr	r3, [r7, #12]
  401b94:	68ba      	ldr	r2, [r7, #8]
  401b96:	631a      	str	r2, [r3, #48]	; 0x30
  401b98:	e002      	b.n	401ba0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401b9a:	68fb      	ldr	r3, [r7, #12]
  401b9c:	68ba      	ldr	r2, [r7, #8]
  401b9e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401ba0:	68fb      	ldr	r3, [r7, #12]
  401ba2:	68ba      	ldr	r2, [r7, #8]
  401ba4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401ba6:	68fb      	ldr	r3, [r7, #12]
  401ba8:	68ba      	ldr	r2, [r7, #8]
  401baa:	601a      	str	r2, [r3, #0]
}
  401bac:	bf00      	nop
  401bae:	3710      	adds	r7, #16
  401bb0:	46bd      	mov	sp, r7
  401bb2:	bd80      	pop	{r7, pc}
  401bb4:	00401c45 	.word	0x00401c45
  401bb8:	00401965 	.word	0x00401965

00401bbc <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401bbc:	b480      	push	{r7}
  401bbe:	b085      	sub	sp, #20
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	60f8      	str	r0, [r7, #12]
  401bc4:	60b9      	str	r1, [r7, #8]
  401bc6:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401bc8:	687b      	ldr	r3, [r7, #4]
  401bca:	f003 0310 	and.w	r3, r3, #16
  401bce:	2b00      	cmp	r3, #0
  401bd0:	d020      	beq.n	401c14 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401bd2:	68fb      	ldr	r3, [r7, #12]
  401bd4:	68ba      	ldr	r2, [r7, #8]
  401bd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401bda:	687b      	ldr	r3, [r7, #4]
  401bdc:	f003 0320 	and.w	r3, r3, #32
  401be0:	2b00      	cmp	r3, #0
  401be2:	d004      	beq.n	401bee <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401be4:	68fb      	ldr	r3, [r7, #12]
  401be6:	68ba      	ldr	r2, [r7, #8]
  401be8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401bec:	e003      	b.n	401bf6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401bee:	68fb      	ldr	r3, [r7, #12]
  401bf0:	68ba      	ldr	r2, [r7, #8]
  401bf2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401bf6:	687b      	ldr	r3, [r7, #4]
  401bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d004      	beq.n	401c0a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401c00:	68fb      	ldr	r3, [r7, #12]
  401c02:	68ba      	ldr	r2, [r7, #8]
  401c04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401c08:	e008      	b.n	401c1c <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	68ba      	ldr	r2, [r7, #8]
  401c0e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401c12:	e003      	b.n	401c1c <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  401c14:	68fb      	ldr	r3, [r7, #12]
  401c16:	68ba      	ldr	r2, [r7, #8]
  401c18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  401c1c:	bf00      	nop
  401c1e:	3714      	adds	r7, #20
  401c20:	46bd      	mov	sp, r7
  401c22:	bc80      	pop	{r7}
  401c24:	4770      	bx	lr
  401c26:	bf00      	nop

00401c28 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401c28:	b480      	push	{r7}
  401c2a:	b083      	sub	sp, #12
  401c2c:	af00      	add	r7, sp, #0
  401c2e:	6078      	str	r0, [r7, #4]
  401c30:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401c32:	687b      	ldr	r3, [r7, #4]
  401c34:	683a      	ldr	r2, [r7, #0]
  401c36:	641a      	str	r2, [r3, #64]	; 0x40
}
  401c38:	bf00      	nop
  401c3a:	370c      	adds	r7, #12
  401c3c:	46bd      	mov	sp, r7
  401c3e:	bc80      	pop	{r7}
  401c40:	4770      	bx	lr
  401c42:	bf00      	nop

00401c44 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401c44:	b480      	push	{r7}
  401c46:	b083      	sub	sp, #12
  401c48:	af00      	add	r7, sp, #0
  401c4a:	6078      	str	r0, [r7, #4]
  401c4c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401c4e:	687b      	ldr	r3, [r7, #4]
  401c50:	683a      	ldr	r2, [r7, #0]
  401c52:	645a      	str	r2, [r3, #68]	; 0x44
}
  401c54:	bf00      	nop
  401c56:	370c      	adds	r7, #12
  401c58:	46bd      	mov	sp, r7
  401c5a:	bc80      	pop	{r7}
  401c5c:	4770      	bx	lr
  401c5e:	bf00      	nop

00401c60 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401c60:	b480      	push	{r7}
  401c62:	b083      	sub	sp, #12
  401c64:	af00      	add	r7, sp, #0
  401c66:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401c68:	687b      	ldr	r3, [r7, #4]
  401c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401c6c:	4618      	mov	r0, r3
  401c6e:	370c      	adds	r7, #12
  401c70:	46bd      	mov	sp, r7
  401c72:	bc80      	pop	{r7}
  401c74:	4770      	bx	lr
  401c76:	bf00      	nop

00401c78 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401c78:	b480      	push	{r7}
  401c7a:	b083      	sub	sp, #12
  401c7c:	af00      	add	r7, sp, #0
  401c7e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401c80:	687b      	ldr	r3, [r7, #4]
  401c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401c84:	4618      	mov	r0, r3
  401c86:	370c      	adds	r7, #12
  401c88:	46bd      	mov	sp, r7
  401c8a:	bc80      	pop	{r7}
  401c8c:	4770      	bx	lr
  401c8e:	bf00      	nop

00401c90 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401c90:	b590      	push	{r4, r7, lr}
  401c92:	b087      	sub	sp, #28
  401c94:	af02      	add	r7, sp, #8
  401c96:	6078      	str	r0, [r7, #4]
  401c98:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401c9a:	6878      	ldr	r0, [r7, #4]
  401c9c:	4b63      	ldr	r3, [pc, #396]	; (401e2c <pio_configure_pin+0x19c>)
  401c9e:	4798      	blx	r3
  401ca0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401ca2:	683b      	ldr	r3, [r7, #0]
  401ca4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401cac:	d067      	beq.n	401d7e <pio_configure_pin+0xee>
  401cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401cb2:	d809      	bhi.n	401cc8 <pio_configure_pin+0x38>
  401cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401cb8:	d02b      	beq.n	401d12 <pio_configure_pin+0x82>
  401cba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cbe:	d043      	beq.n	401d48 <pio_configure_pin+0xb8>
  401cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401cc4:	d00a      	beq.n	401cdc <pio_configure_pin+0x4c>
  401cc6:	e0a9      	b.n	401e1c <pio_configure_pin+0x18c>
  401cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ccc:	d07e      	beq.n	401dcc <pio_configure_pin+0x13c>
  401cce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401cd2:	d07b      	beq.n	401dcc <pio_configure_pin+0x13c>
  401cd4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cd8:	d06c      	beq.n	401db4 <pio_configure_pin+0x124>
  401cda:	e09f      	b.n	401e1c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401cdc:	687b      	ldr	r3, [r7, #4]
  401cde:	f003 031f 	and.w	r3, r3, #31
  401ce2:	2201      	movs	r2, #1
  401ce4:	fa02 f303 	lsl.w	r3, r2, r3
  401ce8:	461a      	mov	r2, r3
  401cea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401cee:	68f8      	ldr	r0, [r7, #12]
  401cf0:	4b4f      	ldr	r3, [pc, #316]	; (401e30 <pio_configure_pin+0x1a0>)
  401cf2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401cf4:	687b      	ldr	r3, [r7, #4]
  401cf6:	f003 031f 	and.w	r3, r3, #31
  401cfa:	2201      	movs	r2, #1
  401cfc:	fa02 f303 	lsl.w	r3, r2, r3
  401d00:	4619      	mov	r1, r3
  401d02:	683b      	ldr	r3, [r7, #0]
  401d04:	f003 0301 	and.w	r3, r3, #1
  401d08:	461a      	mov	r2, r3
  401d0a:	68f8      	ldr	r0, [r7, #12]
  401d0c:	4b49      	ldr	r3, [pc, #292]	; (401e34 <pio_configure_pin+0x1a4>)
  401d0e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401d10:	e086      	b.n	401e20 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d12:	687b      	ldr	r3, [r7, #4]
  401d14:	f003 031f 	and.w	r3, r3, #31
  401d18:	2201      	movs	r2, #1
  401d1a:	fa02 f303 	lsl.w	r3, r2, r3
  401d1e:	461a      	mov	r2, r3
  401d20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d24:	68f8      	ldr	r0, [r7, #12]
  401d26:	4b42      	ldr	r3, [pc, #264]	; (401e30 <pio_configure_pin+0x1a0>)
  401d28:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d2a:	687b      	ldr	r3, [r7, #4]
  401d2c:	f003 031f 	and.w	r3, r3, #31
  401d30:	2201      	movs	r2, #1
  401d32:	fa02 f303 	lsl.w	r3, r2, r3
  401d36:	4619      	mov	r1, r3
  401d38:	683b      	ldr	r3, [r7, #0]
  401d3a:	f003 0301 	and.w	r3, r3, #1
  401d3e:	461a      	mov	r2, r3
  401d40:	68f8      	ldr	r0, [r7, #12]
  401d42:	4b3c      	ldr	r3, [pc, #240]	; (401e34 <pio_configure_pin+0x1a4>)
  401d44:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401d46:	e06b      	b.n	401e20 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401d48:	687b      	ldr	r3, [r7, #4]
  401d4a:	f003 031f 	and.w	r3, r3, #31
  401d4e:	2201      	movs	r2, #1
  401d50:	fa02 f303 	lsl.w	r3, r2, r3
  401d54:	461a      	mov	r2, r3
  401d56:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401d5a:	68f8      	ldr	r0, [r7, #12]
  401d5c:	4b34      	ldr	r3, [pc, #208]	; (401e30 <pio_configure_pin+0x1a0>)
  401d5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d60:	687b      	ldr	r3, [r7, #4]
  401d62:	f003 031f 	and.w	r3, r3, #31
  401d66:	2201      	movs	r2, #1
  401d68:	fa02 f303 	lsl.w	r3, r2, r3
  401d6c:	4619      	mov	r1, r3
  401d6e:	683b      	ldr	r3, [r7, #0]
  401d70:	f003 0301 	and.w	r3, r3, #1
  401d74:	461a      	mov	r2, r3
  401d76:	68f8      	ldr	r0, [r7, #12]
  401d78:	4b2e      	ldr	r3, [pc, #184]	; (401e34 <pio_configure_pin+0x1a4>)
  401d7a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401d7c:	e050      	b.n	401e20 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401d7e:	687b      	ldr	r3, [r7, #4]
  401d80:	f003 031f 	and.w	r3, r3, #31
  401d84:	2201      	movs	r2, #1
  401d86:	fa02 f303 	lsl.w	r3, r2, r3
  401d8a:	461a      	mov	r2, r3
  401d8c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d90:	68f8      	ldr	r0, [r7, #12]
  401d92:	4b27      	ldr	r3, [pc, #156]	; (401e30 <pio_configure_pin+0x1a0>)
  401d94:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	f003 031f 	and.w	r3, r3, #31
  401d9c:	2201      	movs	r2, #1
  401d9e:	fa02 f303 	lsl.w	r3, r2, r3
  401da2:	4619      	mov	r1, r3
  401da4:	683b      	ldr	r3, [r7, #0]
  401da6:	f003 0301 	and.w	r3, r3, #1
  401daa:	461a      	mov	r2, r3
  401dac:	68f8      	ldr	r0, [r7, #12]
  401dae:	4b21      	ldr	r3, [pc, #132]	; (401e34 <pio_configure_pin+0x1a4>)
  401db0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401db2:	e035      	b.n	401e20 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401db4:	687b      	ldr	r3, [r7, #4]
  401db6:	f003 031f 	and.w	r3, r3, #31
  401dba:	2201      	movs	r2, #1
  401dbc:	fa02 f303 	lsl.w	r3, r2, r3
  401dc0:	683a      	ldr	r2, [r7, #0]
  401dc2:	4619      	mov	r1, r3
  401dc4:	68f8      	ldr	r0, [r7, #12]
  401dc6:	4b1c      	ldr	r3, [pc, #112]	; (401e38 <pio_configure_pin+0x1a8>)
  401dc8:	4798      	blx	r3
		break;
  401dca:	e029      	b.n	401e20 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401dcc:	687b      	ldr	r3, [r7, #4]
  401dce:	f003 031f 	and.w	r3, r3, #31
  401dd2:	2201      	movs	r2, #1
  401dd4:	fa02 f303 	lsl.w	r3, r2, r3
  401dd8:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401dda:	683b      	ldr	r3, [r7, #0]
  401ddc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401de0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401de4:	bf0c      	ite	eq
  401de6:	2301      	moveq	r3, #1
  401de8:	2300      	movne	r3, #0
  401dea:	b2db      	uxtb	r3, r3
  401dec:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401dee:	683b      	ldr	r3, [r7, #0]
  401df0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401df4:	2b00      	cmp	r3, #0
  401df6:	bf14      	ite	ne
  401df8:	2301      	movne	r3, #1
  401dfa:	2300      	moveq	r3, #0
  401dfc:	b2db      	uxtb	r3, r3
  401dfe:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401e00:	683b      	ldr	r3, [r7, #0]
  401e02:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e06:	2b00      	cmp	r3, #0
  401e08:	bf14      	ite	ne
  401e0a:	2301      	movne	r3, #1
  401e0c:	2300      	moveq	r3, #0
  401e0e:	b2db      	uxtb	r3, r3
  401e10:	9300      	str	r3, [sp, #0]
  401e12:	4603      	mov	r3, r0
  401e14:	68f8      	ldr	r0, [r7, #12]
  401e16:	4c09      	ldr	r4, [pc, #36]	; (401e3c <pio_configure_pin+0x1ac>)
  401e18:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e1a:	e001      	b.n	401e20 <pio_configure_pin+0x190>

	default:
		return 0;
  401e1c:	2300      	movs	r3, #0
  401e1e:	e000      	b.n	401e22 <pio_configure_pin+0x192>
	}

	return 1;
  401e20:	2301      	movs	r3, #1
}
  401e22:	4618      	mov	r0, r3
  401e24:	3714      	adds	r7, #20
  401e26:	46bd      	mov	sp, r7
  401e28:	bd90      	pop	{r4, r7, pc}
  401e2a:	bf00      	nop
  401e2c:	00401e41 	.word	0x00401e41
  401e30:	004019c9 	.word	0x004019c9
  401e34:	00401965 	.word	0x00401965
  401e38:	00401ad9 	.word	0x00401ad9
  401e3c:	00401b59 	.word	0x00401b59

00401e40 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401e40:	b480      	push	{r7}
  401e42:	b085      	sub	sp, #20
  401e44:	af00      	add	r7, sp, #0
  401e46:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401e48:	687b      	ldr	r3, [r7, #4]
  401e4a:	095b      	lsrs	r3, r3, #5
  401e4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401e50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401e54:	025b      	lsls	r3, r3, #9
  401e56:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401e58:	68fb      	ldr	r3, [r7, #12]
}
  401e5a:	4618      	mov	r0, r3
  401e5c:	3714      	adds	r7, #20
  401e5e:	46bd      	mov	sp, r7
  401e60:	bc80      	pop	{r7}
  401e62:	4770      	bx	lr

00401e64 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401e64:	b480      	push	{r7}
  401e66:	b085      	sub	sp, #20
  401e68:	af00      	add	r7, sp, #0
  401e6a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e6c:	491c      	ldr	r1, [pc, #112]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401e6e:	4b1c      	ldr	r3, [pc, #112]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401e76:	687b      	ldr	r3, [r7, #4]
  401e78:	4313      	orrs	r3, r2
  401e7a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e80:	60fb      	str	r3, [r7, #12]
  401e82:	e007      	b.n	401e94 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e84:	68fb      	ldr	r3, [r7, #12]
  401e86:	2b00      	cmp	r3, #0
  401e88:	d101      	bne.n	401e8e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401e8a:	2301      	movs	r3, #1
  401e8c:	e023      	b.n	401ed6 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	3b01      	subs	r3, #1
  401e92:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e94:	4b12      	ldr	r3, [pc, #72]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401e98:	f003 0308 	and.w	r3, r3, #8
  401e9c:	2b00      	cmp	r3, #0
  401e9e:	d0f1      	beq.n	401e84 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401ea0:	4a0f      	ldr	r2, [pc, #60]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401ea2:	4b0f      	ldr	r3, [pc, #60]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ea6:	f023 0303 	bic.w	r3, r3, #3
  401eaa:	f043 0302 	orr.w	r3, r3, #2
  401eae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401eb4:	60fb      	str	r3, [r7, #12]
  401eb6:	e007      	b.n	401ec8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401eb8:	68fb      	ldr	r3, [r7, #12]
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d101      	bne.n	401ec2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401ebe:	2301      	movs	r3, #1
  401ec0:	e009      	b.n	401ed6 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  401ec2:	68fb      	ldr	r3, [r7, #12]
  401ec4:	3b01      	subs	r3, #1
  401ec6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ec8:	4b05      	ldr	r3, [pc, #20]	; (401ee0 <pmc_switch_mck_to_pllack+0x7c>)
  401eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401ecc:	f003 0308 	and.w	r3, r3, #8
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	d0f1      	beq.n	401eb8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401ed4:	2300      	movs	r3, #0
}
  401ed6:	4618      	mov	r0, r3
  401ed8:	3714      	adds	r7, #20
  401eda:	46bd      	mov	sp, r7
  401edc:	bc80      	pop	{r7}
  401ede:	4770      	bx	lr
  401ee0:	400e0400 	.word	0x400e0400

00401ee4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401ee4:	b480      	push	{r7}
  401ee6:	b083      	sub	sp, #12
  401ee8:	af00      	add	r7, sp, #0
  401eea:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401eec:	687b      	ldr	r3, [r7, #4]
  401eee:	2b01      	cmp	r3, #1
  401ef0:	d107      	bne.n	401f02 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401ef2:	4a08      	ldr	r2, [pc, #32]	; (401f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  401ef4:	4b07      	ldr	r3, [pc, #28]	; (401f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  401ef6:	689b      	ldr	r3, [r3, #8]
  401ef8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401f00:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401f02:	4b04      	ldr	r3, [pc, #16]	; (401f14 <pmc_switch_sclk_to_32kxtal+0x30>)
  401f04:	4a04      	ldr	r2, [pc, #16]	; (401f18 <pmc_switch_sclk_to_32kxtal+0x34>)
  401f06:	601a      	str	r2, [r3, #0]
}
  401f08:	bf00      	nop
  401f0a:	370c      	adds	r7, #12
  401f0c:	46bd      	mov	sp, r7
  401f0e:	bc80      	pop	{r7}
  401f10:	4770      	bx	lr
  401f12:	bf00      	nop
  401f14:	400e1410 	.word	0x400e1410
  401f18:	a5000008 	.word	0xa5000008

00401f1c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401f1c:	b480      	push	{r7}
  401f1e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401f20:	4b09      	ldr	r3, [pc, #36]	; (401f48 <pmc_osc_is_ready_32kxtal+0x2c>)
  401f22:	695b      	ldr	r3, [r3, #20]
  401f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401f28:	2b00      	cmp	r3, #0
  401f2a:	d007      	beq.n	401f3c <pmc_osc_is_ready_32kxtal+0x20>
  401f2c:	4b07      	ldr	r3, [pc, #28]	; (401f4c <pmc_osc_is_ready_32kxtal+0x30>)
  401f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401f34:	2b00      	cmp	r3, #0
  401f36:	d001      	beq.n	401f3c <pmc_osc_is_ready_32kxtal+0x20>
  401f38:	2301      	movs	r3, #1
  401f3a:	e000      	b.n	401f3e <pmc_osc_is_ready_32kxtal+0x22>
  401f3c:	2300      	movs	r3, #0
}
  401f3e:	4618      	mov	r0, r3
  401f40:	46bd      	mov	sp, r7
  401f42:	bc80      	pop	{r7}
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop
  401f48:	400e1410 	.word	0x400e1410
  401f4c:	400e0400 	.word	0x400e0400

00401f50 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401f50:	b480      	push	{r7}
  401f52:	b083      	sub	sp, #12
  401f54:	af00      	add	r7, sp, #0
  401f56:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401f58:	4a18      	ldr	r2, [pc, #96]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f5a:	4b18      	ldr	r3, [pc, #96]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f5c:	6a1b      	ldr	r3, [r3, #32]
  401f5e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401f62:	f043 0308 	orr.w	r3, r3, #8
  401f66:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401f68:	bf00      	nop
  401f6a:	4b14      	ldr	r3, [pc, #80]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401f72:	2b00      	cmp	r3, #0
  401f74:	d0f9      	beq.n	401f6a <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401f76:	4911      	ldr	r1, [pc, #68]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f78:	4b10      	ldr	r3, [pc, #64]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f7a:	6a1b      	ldr	r3, [r3, #32]
  401f7c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401f84:	687a      	ldr	r2, [r7, #4]
  401f86:	4313      	orrs	r3, r2
  401f88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401f8c:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401f8e:	bf00      	nop
  401f90:	4b0a      	ldr	r3, [pc, #40]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401f98:	2b00      	cmp	r3, #0
  401f9a:	d0f9      	beq.n	401f90 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401f9c:	4a07      	ldr	r2, [pc, #28]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401f9e:	4b07      	ldr	r3, [pc, #28]	; (401fbc <pmc_switch_mainck_to_fastrc+0x6c>)
  401fa0:	6a1b      	ldr	r3, [r3, #32]
  401fa2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401faa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401fae:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401fb0:	bf00      	nop
  401fb2:	370c      	adds	r7, #12
  401fb4:	46bd      	mov	sp, r7
  401fb6:	bc80      	pop	{r7}
  401fb8:	4770      	bx	lr
  401fba:	bf00      	nop
  401fbc:	400e0400 	.word	0x400e0400

00401fc0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401fc0:	b480      	push	{r7}
  401fc2:	b083      	sub	sp, #12
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	6078      	str	r0, [r7, #4]
  401fc8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401fca:	687b      	ldr	r3, [r7, #4]
  401fcc:	2b00      	cmp	r3, #0
  401fce:	d008      	beq.n	401fe2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401fd0:	4916      	ldr	r1, [pc, #88]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  401fd2:	4b16      	ldr	r3, [pc, #88]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  401fd4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401fd6:	4a16      	ldr	r2, [pc, #88]	; (402030 <pmc_switch_mainck_to_xtal+0x70>)
  401fd8:	401a      	ands	r2, r3
  401fda:	4b16      	ldr	r3, [pc, #88]	; (402034 <pmc_switch_mainck_to_xtal+0x74>)
  401fdc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401fde:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401fe0:	e01e      	b.n	402020 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401fe2:	4912      	ldr	r1, [pc, #72]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  401fe4:	4b11      	ldr	r3, [pc, #68]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  401fe6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401fe8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401fec:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401ff0:	683a      	ldr	r2, [r7, #0]
  401ff2:	0212      	lsls	r2, r2, #8
  401ff4:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ff6:	4313      	orrs	r3, r2
  401ff8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401ffc:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402000:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402002:	bf00      	nop
  402004:	4b09      	ldr	r3, [pc, #36]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  402006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402008:	f003 0301 	and.w	r3, r3, #1
  40200c:	2b00      	cmp	r3, #0
  40200e:	d0f9      	beq.n	402004 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402010:	4a06      	ldr	r2, [pc, #24]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  402012:	4b06      	ldr	r3, [pc, #24]	; (40202c <pmc_switch_mainck_to_xtal+0x6c>)
  402014:	6a1b      	ldr	r3, [r3, #32]
  402016:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40201e:	6213      	str	r3, [r2, #32]
	}
}
  402020:	bf00      	nop
  402022:	370c      	adds	r7, #12
  402024:	46bd      	mov	sp, r7
  402026:	bc80      	pop	{r7}
  402028:	4770      	bx	lr
  40202a:	bf00      	nop
  40202c:	400e0400 	.word	0x400e0400
  402030:	fec8fffc 	.word	0xfec8fffc
  402034:	01370002 	.word	0x01370002

00402038 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402038:	b480      	push	{r7}
  40203a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40203c:	4b03      	ldr	r3, [pc, #12]	; (40204c <pmc_osc_is_ready_mainck+0x14>)
  40203e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402044:	4618      	mov	r0, r3
  402046:	46bd      	mov	sp, r7
  402048:	bc80      	pop	{r7}
  40204a:	4770      	bx	lr
  40204c:	400e0400 	.word	0x400e0400

00402050 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402050:	b480      	push	{r7}
  402052:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402054:	4b03      	ldr	r3, [pc, #12]	; (402064 <pmc_disable_pllack+0x14>)
  402056:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40205a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40205c:	bf00      	nop
  40205e:	46bd      	mov	sp, r7
  402060:	bc80      	pop	{r7}
  402062:	4770      	bx	lr
  402064:	400e0400 	.word	0x400e0400

00402068 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402068:	b480      	push	{r7}
  40206a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40206c:	4b03      	ldr	r3, [pc, #12]	; (40207c <pmc_is_locked_pllack+0x14>)
  40206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402070:	f003 0302 	and.w	r3, r3, #2
}
  402074:	4618      	mov	r0, r3
  402076:	46bd      	mov	sp, r7
  402078:	bc80      	pop	{r7}
  40207a:	4770      	bx	lr
  40207c:	400e0400 	.word	0x400e0400

00402080 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  402080:	b480      	push	{r7}
  402082:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402084:	4b03      	ldr	r3, [pc, #12]	; (402094 <pmc_disable_pllbck+0x14>)
  402086:	2200      	movs	r2, #0
  402088:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40208a:	bf00      	nop
  40208c:	46bd      	mov	sp, r7
  40208e:	bc80      	pop	{r7}
  402090:	4770      	bx	lr
  402092:	bf00      	nop
  402094:	400e0400 	.word	0x400e0400

00402098 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402098:	b480      	push	{r7}
  40209a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40209c:	4b03      	ldr	r3, [pc, #12]	; (4020ac <pmc_is_locked_pllbck+0x14>)
  40209e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4020a0:	f003 0304 	and.w	r3, r3, #4
}
  4020a4:	4618      	mov	r0, r3
  4020a6:	46bd      	mov	sp, r7
  4020a8:	bc80      	pop	{r7}
  4020aa:	4770      	bx	lr
  4020ac:	400e0400 	.word	0x400e0400

004020b0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4020b0:	b480      	push	{r7}
  4020b2:	b083      	sub	sp, #12
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	2b22      	cmp	r3, #34	; 0x22
  4020bc:	d901      	bls.n	4020c2 <pmc_enable_periph_clk+0x12>
		return 1;
  4020be:	2301      	movs	r3, #1
  4020c0:	e02f      	b.n	402122 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	2b1f      	cmp	r3, #31
  4020c6:	d813      	bhi.n	4020f0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4020c8:	4b18      	ldr	r3, [pc, #96]	; (40212c <pmc_enable_periph_clk+0x7c>)
  4020ca:	699a      	ldr	r2, [r3, #24]
  4020cc:	2101      	movs	r1, #1
  4020ce:	687b      	ldr	r3, [r7, #4]
  4020d0:	fa01 f303 	lsl.w	r3, r1, r3
  4020d4:	401a      	ands	r2, r3
  4020d6:	2101      	movs	r1, #1
  4020d8:	687b      	ldr	r3, [r7, #4]
  4020da:	fa01 f303 	lsl.w	r3, r1, r3
  4020de:	429a      	cmp	r2, r3
  4020e0:	d01e      	beq.n	402120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4020e2:	4a12      	ldr	r2, [pc, #72]	; (40212c <pmc_enable_periph_clk+0x7c>)
  4020e4:	2101      	movs	r1, #1
  4020e6:	687b      	ldr	r3, [r7, #4]
  4020e8:	fa01 f303 	lsl.w	r3, r1, r3
  4020ec:	6113      	str	r3, [r2, #16]
  4020ee:	e017      	b.n	402120 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020f0:	687b      	ldr	r3, [r7, #4]
  4020f2:	3b20      	subs	r3, #32
  4020f4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020f6:	4b0d      	ldr	r3, [pc, #52]	; (40212c <pmc_enable_periph_clk+0x7c>)
  4020f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020fc:	2101      	movs	r1, #1
  4020fe:	687b      	ldr	r3, [r7, #4]
  402100:	fa01 f303 	lsl.w	r3, r1, r3
  402104:	401a      	ands	r2, r3
  402106:	2101      	movs	r1, #1
  402108:	687b      	ldr	r3, [r7, #4]
  40210a:	fa01 f303 	lsl.w	r3, r1, r3
  40210e:	429a      	cmp	r2, r3
  402110:	d006      	beq.n	402120 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402112:	4a06      	ldr	r2, [pc, #24]	; (40212c <pmc_enable_periph_clk+0x7c>)
  402114:	2101      	movs	r1, #1
  402116:	687b      	ldr	r3, [r7, #4]
  402118:	fa01 f303 	lsl.w	r3, r1, r3
  40211c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402120:	2300      	movs	r3, #0
}
  402122:	4618      	mov	r0, r3
  402124:	370c      	adds	r7, #12
  402126:	46bd      	mov	sp, r7
  402128:	bc80      	pop	{r7}
  40212a:	4770      	bx	lr
  40212c:	400e0400 	.word	0x400e0400

00402130 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402130:	b580      	push	{r7, lr}
  402132:	b082      	sub	sp, #8
  402134:	af00      	add	r7, sp, #0
  402136:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402138:	6878      	ldr	r0, [r7, #4]
  40213a:	4b03      	ldr	r3, [pc, #12]	; (402148 <sysclk_enable_peripheral_clock+0x18>)
  40213c:	4798      	blx	r3
}
  40213e:	bf00      	nop
  402140:	3708      	adds	r7, #8
  402142:	46bd      	mov	sp, r7
  402144:	bd80      	pop	{r7, pc}
  402146:	bf00      	nop
  402148:	004020b1 	.word	0x004020b1

0040214c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40214c:	b580      	push	{r7, lr}
  40214e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402150:	200b      	movs	r0, #11
  402152:	4b03      	ldr	r3, [pc, #12]	; (402160 <ioport_init+0x14>)
  402154:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  402156:	200c      	movs	r0, #12
  402158:	4b01      	ldr	r3, [pc, #4]	; (402160 <ioport_init+0x14>)
  40215a:	4798      	blx	r3
	arch_ioport_init();
}
  40215c:	bf00      	nop
  40215e:	bd80      	pop	{r7, pc}
  402160:	00402131 	.word	0x00402131

00402164 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  402164:	b480      	push	{r7}
  402166:	b08d      	sub	sp, #52	; 0x34
  402168:	af00      	add	r7, sp, #0
  40216a:	6078      	str	r0, [r7, #4]
  40216c:	6039      	str	r1, [r7, #0]
  40216e:	687b      	ldr	r3, [r7, #4]
  402170:	62fb      	str	r3, [r7, #44]	; 0x2c
  402172:	683b      	ldr	r3, [r7, #0]
  402174:	62bb      	str	r3, [r7, #40]	; 0x28
  402176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402178:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40217c:	095a      	lsrs	r2, r3, #5
  40217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402180:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402182:	6a3b      	ldr	r3, [r7, #32]
  402184:	f003 031f 	and.w	r3, r3, #31
  402188:	2101      	movs	r1, #1
  40218a:	fa01 f303 	lsl.w	r3, r1, r3
  40218e:	61fa      	str	r2, [r7, #28]
  402190:	61bb      	str	r3, [r7, #24]
  402192:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402194:	617b      	str	r3, [r7, #20]
  402196:	69fb      	ldr	r3, [r7, #28]
  402198:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40219a:	693b      	ldr	r3, [r7, #16]
  40219c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4021a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4021a4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4021a6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4021a8:	697b      	ldr	r3, [r7, #20]
  4021aa:	f003 0308 	and.w	r3, r3, #8
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	d003      	beq.n	4021ba <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4021b2:	68fb      	ldr	r3, [r7, #12]
  4021b4:	69ba      	ldr	r2, [r7, #24]
  4021b6:	665a      	str	r2, [r3, #100]	; 0x64
  4021b8:	e002      	b.n	4021c0 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4021ba:	68fb      	ldr	r3, [r7, #12]
  4021bc:	69ba      	ldr	r2, [r7, #24]
  4021be:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4021c0:	697b      	ldr	r3, [r7, #20]
  4021c2:	f003 0310 	and.w	r3, r3, #16
  4021c6:	2b00      	cmp	r3, #0
  4021c8:	d004      	beq.n	4021d4 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4021ca:	68fb      	ldr	r3, [r7, #12]
  4021cc:	69ba      	ldr	r2, [r7, #24]
  4021ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4021d2:	e003      	b.n	4021dc <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4021d4:	68fb      	ldr	r3, [r7, #12]
  4021d6:	69ba      	ldr	r2, [r7, #24]
  4021d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4021dc:	697b      	ldr	r3, [r7, #20]
  4021de:	f003 0320 	and.w	r3, r3, #32
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d003      	beq.n	4021ee <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4021e6:	68fb      	ldr	r3, [r7, #12]
  4021e8:	69ba      	ldr	r2, [r7, #24]
  4021ea:	651a      	str	r2, [r3, #80]	; 0x50
  4021ec:	e002      	b.n	4021f4 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  4021ee:	68fb      	ldr	r3, [r7, #12]
  4021f0:	69ba      	ldr	r2, [r7, #24]
  4021f2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4021f4:	697b      	ldr	r3, [r7, #20]
  4021f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	d003      	beq.n	402206 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4021fe:	68fb      	ldr	r3, [r7, #12]
  402200:	69ba      	ldr	r2, [r7, #24]
  402202:	621a      	str	r2, [r3, #32]
  402204:	e002      	b.n	40220c <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  402206:	68fb      	ldr	r3, [r7, #12]
  402208:	69ba      	ldr	r2, [r7, #24]
  40220a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  40220c:	697b      	ldr	r3, [r7, #20]
  40220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402212:	2b00      	cmp	r3, #0
  402214:	d004      	beq.n	402220 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402216:	68fb      	ldr	r3, [r7, #12]
  402218:	69ba      	ldr	r2, [r7, #24]
  40221a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40221e:	e003      	b.n	402228 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402220:	68fb      	ldr	r3, [r7, #12]
  402222:	69ba      	ldr	r2, [r7, #24]
  402224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402228:	697b      	ldr	r3, [r7, #20]
  40222a:	f003 0301 	and.w	r3, r3, #1
  40222e:	2b00      	cmp	r3, #0
  402230:	d006      	beq.n	402240 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402232:	68fb      	ldr	r3, [r7, #12]
  402234:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402236:	69bb      	ldr	r3, [r7, #24]
  402238:	431a      	orrs	r2, r3
  40223a:	68fb      	ldr	r3, [r7, #12]
  40223c:	671a      	str	r2, [r3, #112]	; 0x70
  40223e:	e006      	b.n	40224e <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402240:	68fb      	ldr	r3, [r7, #12]
  402242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402244:	69bb      	ldr	r3, [r7, #24]
  402246:	43db      	mvns	r3, r3
  402248:	401a      	ands	r2, r3
  40224a:	68fb      	ldr	r3, [r7, #12]
  40224c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40224e:	697b      	ldr	r3, [r7, #20]
  402250:	f003 0302 	and.w	r3, r3, #2
  402254:	2b00      	cmp	r3, #0
  402256:	d006      	beq.n	402266 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402258:	68fb      	ldr	r3, [r7, #12]
  40225a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40225c:	69bb      	ldr	r3, [r7, #24]
  40225e:	431a      	orrs	r2, r3
  402260:	68fb      	ldr	r3, [r7, #12]
  402262:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  402264:	e006      	b.n	402274 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402266:	68fb      	ldr	r3, [r7, #12]
  402268:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40226a:	69bb      	ldr	r3, [r7, #24]
  40226c:	43db      	mvns	r3, r3
  40226e:	401a      	ands	r2, r3
  402270:	68fb      	ldr	r3, [r7, #12]
  402272:	675a      	str	r2, [r3, #116]	; 0x74
  402274:	bf00      	nop
  402276:	3734      	adds	r7, #52	; 0x34
  402278:	46bd      	mov	sp, r7
  40227a:	bc80      	pop	{r7}
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop

00402280 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402280:	b480      	push	{r7}
  402282:	b08d      	sub	sp, #52	; 0x34
  402284:	af00      	add	r7, sp, #0
  402286:	6078      	str	r0, [r7, #4]
  402288:	460b      	mov	r3, r1
  40228a:	70fb      	strb	r3, [r7, #3]
  40228c:	687b      	ldr	r3, [r7, #4]
  40228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402290:	78fb      	ldrb	r3, [r7, #3]
  402292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402298:	627b      	str	r3, [r7, #36]	; 0x24
  40229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40229c:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40229e:	6a3b      	ldr	r3, [r7, #32]
  4022a0:	095b      	lsrs	r3, r3, #5
  4022a2:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4022a4:	69fb      	ldr	r3, [r7, #28]
  4022a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4022aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4022ae:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4022b0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4022b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022b6:	2b01      	cmp	r3, #1
  4022b8:	d109      	bne.n	4022ce <ioport_set_pin_dir+0x4e>
  4022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022bc:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022be:	697b      	ldr	r3, [r7, #20]
  4022c0:	f003 031f 	and.w	r3, r3, #31
  4022c4:	2201      	movs	r2, #1
  4022c6:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022c8:	69bb      	ldr	r3, [r7, #24]
  4022ca:	611a      	str	r2, [r3, #16]
  4022cc:	e00c      	b.n	4022e8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4022ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4022d2:	2b00      	cmp	r3, #0
  4022d4:	d108      	bne.n	4022e8 <ioport_set_pin_dir+0x68>
  4022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022d8:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022da:	693b      	ldr	r3, [r7, #16]
  4022dc:	f003 031f 	and.w	r3, r3, #31
  4022e0:	2201      	movs	r2, #1
  4022e2:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022e4:	69bb      	ldr	r3, [r7, #24]
  4022e6:	615a      	str	r2, [r3, #20]
  4022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4022ea:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4022ec:	68fb      	ldr	r3, [r7, #12]
  4022ee:	f003 031f 	and.w	r3, r3, #31
  4022f2:	2201      	movs	r2, #1
  4022f4:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022f6:	69bb      	ldr	r3, [r7, #24]
  4022f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4022fc:	bf00      	nop
  4022fe:	3734      	adds	r7, #52	; 0x34
  402300:	46bd      	mov	sp, r7
  402302:	bc80      	pop	{r7}
  402304:	4770      	bx	lr
  402306:	bf00      	nop

00402308 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402308:	b480      	push	{r7}
  40230a:	b08b      	sub	sp, #44	; 0x2c
  40230c:	af00      	add	r7, sp, #0
  40230e:	6078      	str	r0, [r7, #4]
  402310:	460b      	mov	r3, r1
  402312:	70fb      	strb	r3, [r7, #3]
  402314:	687b      	ldr	r3, [r7, #4]
  402316:	627b      	str	r3, [r7, #36]	; 0x24
  402318:	78fb      	ldrb	r3, [r7, #3]
  40231a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402320:	61fb      	str	r3, [r7, #28]
  402322:	69fb      	ldr	r3, [r7, #28]
  402324:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402326:	69bb      	ldr	r3, [r7, #24]
  402328:	095b      	lsrs	r3, r3, #5
  40232a:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40232c:	697b      	ldr	r3, [r7, #20]
  40232e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402332:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402336:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402338:	613b      	str	r3, [r7, #16]

	if (level) {
  40233a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40233e:	2b00      	cmp	r3, #0
  402340:	d009      	beq.n	402356 <ioport_set_pin_level+0x4e>
  402342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402344:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402346:	68fb      	ldr	r3, [r7, #12]
  402348:	f003 031f 	and.w	r3, r3, #31
  40234c:	2201      	movs	r2, #1
  40234e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402350:	693b      	ldr	r3, [r7, #16]
  402352:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402354:	e008      	b.n	402368 <ioport_set_pin_level+0x60>
  402356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402358:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40235a:	68bb      	ldr	r3, [r7, #8]
  40235c:	f003 031f 	and.w	r3, r3, #31
  402360:	2201      	movs	r2, #1
  402362:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402364:	693b      	ldr	r3, [r7, #16]
  402366:	635a      	str	r2, [r3, #52]	; 0x34
  402368:	bf00      	nop
  40236a:	372c      	adds	r7, #44	; 0x2c
  40236c:	46bd      	mov	sp, r7
  40236e:	bc80      	pop	{r7}
  402370:	4770      	bx	lr
  402372:	bf00      	nop

00402374 <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  402374:	b580      	push	{r7, lr}
  402376:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  402378:	484b      	ldr	r0, [pc, #300]	; (4024a8 <board_init+0x134>)
  40237a:	4b4c      	ldr	r3, [pc, #304]	; (4024ac <board_init+0x138>)
  40237c:	4798      	blx	r3
	
	ioport_init();
  40237e:	4b4c      	ldr	r3, [pc, #304]	; (4024b0 <board_init+0x13c>)
  402380:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  402382:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402386:	2009      	movs	r0, #9
  402388:	4b4a      	ldr	r3, [pc, #296]	; (4024b4 <board_init+0x140>)
  40238a:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  40238c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402390:	2009      	movs	r0, #9
  402392:	4b48      	ldr	r3, [pc, #288]	; (4024b4 <board_init+0x140>)
  402394:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  402396:	2101      	movs	r1, #1
  402398:	2009      	movs	r0, #9
  40239a:	4b47      	ldr	r3, [pc, #284]	; (4024b8 <board_init+0x144>)
  40239c:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  40239e:	2100      	movs	r1, #0
  4023a0:	2009      	movs	r0, #9
  4023a2:	4b46      	ldr	r3, [pc, #280]	; (4024bc <board_init+0x148>)
  4023a4:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  4023a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4023aa:	2007      	movs	r0, #7
  4023ac:	4b41      	ldr	r3, [pc, #260]	; (4024b4 <board_init+0x140>)
  4023ae:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  4023b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4023b4:	2007      	movs	r0, #7
  4023b6:	4b3f      	ldr	r3, [pc, #252]	; (4024b4 <board_init+0x140>)
  4023b8:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  4023ba:	2101      	movs	r1, #1
  4023bc:	2007      	movs	r0, #7
  4023be:	4b3e      	ldr	r3, [pc, #248]	; (4024b8 <board_init+0x144>)
  4023c0:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  4023c2:	2100      	movs	r1, #0
  4023c4:	2007      	movs	r0, #7
  4023c6:	4b3d      	ldr	r3, [pc, #244]	; (4024bc <board_init+0x148>)
  4023c8:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  4023ca:	493d      	ldr	r1, [pc, #244]	; (4024c0 <board_init+0x14c>)
  4023cc:	2021      	movs	r0, #33	; 0x21
  4023ce:	4b39      	ldr	r3, [pc, #228]	; (4024b4 <board_init+0x140>)
  4023d0:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  4023d2:	2100      	movs	r1, #0
  4023d4:	2021      	movs	r0, #33	; 0x21
  4023d6:	4b38      	ldr	r3, [pc, #224]	; (4024b8 <board_init+0x144>)
  4023d8:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  4023da:	2108      	movs	r1, #8
  4023dc:	2021      	movs	r0, #33	; 0x21
  4023de:	4b39      	ldr	r3, [pc, #228]	; (4024c4 <board_init+0x150>)
  4023e0:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4023e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4023e6:	2005      	movs	r0, #5
  4023e8:	4b32      	ldr	r3, [pc, #200]	; (4024b4 <board_init+0x140>)
  4023ea:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4023ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4023f0:	2006      	movs	r0, #6
  4023f2:	4b30      	ldr	r3, [pc, #192]	; (4024b4 <board_init+0x140>)
  4023f4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  4023f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4023fa:	2008      	movs	r0, #8
  4023fc:	4b2d      	ldr	r3, [pc, #180]	; (4024b4 <board_init+0x140>)
  4023fe:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  402400:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402404:	2011      	movs	r0, #17
  402406:	4b2b      	ldr	r3, [pc, #172]	; (4024b4 <board_init+0x140>)
  402408:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40240a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40240e:	2003      	movs	r0, #3
  402410:	4b28      	ldr	r3, [pc, #160]	; (4024b4 <board_init+0x140>)
  402412:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  402414:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402418:	2004      	movs	r0, #4
  40241a:	4b26      	ldr	r3, [pc, #152]	; (4024b4 <board_init+0x140>)
  40241c:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  40241e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402422:	200a      	movs	r0, #10
  402424:	4b23      	ldr	r3, [pc, #140]	; (4024b4 <board_init+0x140>)
  402426:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402428:	2101      	movs	r1, #1
  40242a:	200a      	movs	r0, #10
  40242c:	4b22      	ldr	r3, [pc, #136]	; (4024b8 <board_init+0x144>)
  40242e:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  402430:	2100      	movs	r1, #0
  402432:	200a      	movs	r0, #10
  402434:	4b21      	ldr	r3, [pc, #132]	; (4024bc <board_init+0x148>)
  402436:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  402438:	2171      	movs	r1, #113	; 0x71
  40243a:	2010      	movs	r0, #16
  40243c:	4b1d      	ldr	r3, [pc, #116]	; (4024b4 <board_init+0x140>)
  40243e:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  402440:	2171      	movs	r1, #113	; 0x71
  402442:	200f      	movs	r0, #15
  402444:	4b1b      	ldr	r3, [pc, #108]	; (4024b4 <board_init+0x140>)
  402446:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  402448:	491f      	ldr	r1, [pc, #124]	; (4024c8 <board_init+0x154>)
  40244a:	2018      	movs	r0, #24
  40244c:	4b19      	ldr	r3, [pc, #100]	; (4024b4 <board_init+0x140>)
  40244e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  402450:	491d      	ldr	r1, [pc, #116]	; (4024c8 <board_init+0x154>)
  402452:	2019      	movs	r0, #25
  402454:	4b17      	ldr	r3, [pc, #92]	; (4024b4 <board_init+0x140>)
  402456:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  402458:	491b      	ldr	r1, [pc, #108]	; (4024c8 <board_init+0x154>)
  40245a:	201a      	movs	r0, #26
  40245c:	4b15      	ldr	r3, [pc, #84]	; (4024b4 <board_init+0x140>)
  40245e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  402460:	4919      	ldr	r1, [pc, #100]	; (4024c8 <board_init+0x154>)
  402462:	201b      	movs	r0, #27
  402464:	4b13      	ldr	r3, [pc, #76]	; (4024b4 <board_init+0x140>)
  402466:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  402468:	4917      	ldr	r1, [pc, #92]	; (4024c8 <board_init+0x154>)
  40246a:	201c      	movs	r0, #28
  40246c:	4b11      	ldr	r3, [pc, #68]	; (4024b4 <board_init+0x140>)
  40246e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  402470:	4915      	ldr	r1, [pc, #84]	; (4024c8 <board_init+0x154>)
  402472:	201d      	movs	r0, #29
  402474:	4b0f      	ldr	r3, [pc, #60]	; (4024b4 <board_init+0x140>)
  402476:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  402478:	4913      	ldr	r1, [pc, #76]	; (4024c8 <board_init+0x154>)
  40247a:	201e      	movs	r0, #30
  40247c:	4b0d      	ldr	r3, [pc, #52]	; (4024b4 <board_init+0x140>)
  40247e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  402480:	4911      	ldr	r1, [pc, #68]	; (4024c8 <board_init+0x154>)
  402482:	201f      	movs	r0, #31
  402484:	4b0b      	ldr	r3, [pc, #44]	; (4024b4 <board_init+0x140>)
  402486:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  402488:	2171      	movs	r1, #113	; 0x71
  40248a:	2012      	movs	r0, #18
  40248c:	4b09      	ldr	r3, [pc, #36]	; (4024b4 <board_init+0x140>)
  40248e:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  402490:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402494:	2013      	movs	r0, #19
  402496:	4b07      	ldr	r3, [pc, #28]	; (4024b4 <board_init+0x140>)
  402498:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  40249a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40249e:	2014      	movs	r0, #20
  4024a0:	4b04      	ldr	r3, [pc, #16]	; (4024b4 <board_init+0x140>)
  4024a2:	4798      	blx	r3
}
  4024a4:	bf00      	nop
  4024a6:	bd80      	pop	{r7, pc}
  4024a8:	400e1450 	.word	0x400e1450
  4024ac:	00400545 	.word	0x00400545
  4024b0:	0040214d 	.word	0x0040214d
  4024b4:	00401c91 	.word	0x00401c91
  4024b8:	00402281 	.word	0x00402281
  4024bc:	00402309 	.word	0x00402309
  4024c0:	28000079 	.word	0x28000079
  4024c4:	00402165 	.word	0x00402165
  4024c8:	28000001 	.word	0x28000001

004024cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4024cc:	b580      	push	{r7, lr}
  4024ce:	b084      	sub	sp, #16
  4024d0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4024d2:	4b27      	ldr	r3, [pc, #156]	; (402570 <Reset_Handler+0xa4>)
  4024d4:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4024d6:	4b27      	ldr	r3, [pc, #156]	; (402574 <Reset_Handler+0xa8>)
  4024d8:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4024da:	68fa      	ldr	r2, [r7, #12]
  4024dc:	68bb      	ldr	r3, [r7, #8]
  4024de:	429a      	cmp	r2, r3
  4024e0:	d90d      	bls.n	4024fe <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4024e2:	e007      	b.n	4024f4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4024e4:	68bb      	ldr	r3, [r7, #8]
  4024e6:	1d1a      	adds	r2, r3, #4
  4024e8:	60ba      	str	r2, [r7, #8]
  4024ea:	68fa      	ldr	r2, [r7, #12]
  4024ec:	1d11      	adds	r1, r2, #4
  4024ee:	60f9      	str	r1, [r7, #12]
  4024f0:	6812      	ldr	r2, [r2, #0]
  4024f2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4024f4:	68bb      	ldr	r3, [r7, #8]
  4024f6:	4a20      	ldr	r2, [pc, #128]	; (402578 <Reset_Handler+0xac>)
  4024f8:	4293      	cmp	r3, r2
  4024fa:	d3f3      	bcc.n	4024e4 <Reset_Handler+0x18>
  4024fc:	e020      	b.n	402540 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4024fe:	68fa      	ldr	r2, [r7, #12]
  402500:	68bb      	ldr	r3, [r7, #8]
  402502:	429a      	cmp	r2, r3
  402504:	d21c      	bcs.n	402540 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402506:	4a1c      	ldr	r2, [pc, #112]	; (402578 <Reset_Handler+0xac>)
  402508:	4b1a      	ldr	r3, [pc, #104]	; (402574 <Reset_Handler+0xa8>)
  40250a:	1ad3      	subs	r3, r2, r3
  40250c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40250e:	68fa      	ldr	r2, [r7, #12]
  402510:	687b      	ldr	r3, [r7, #4]
  402512:	4413      	add	r3, r2
  402514:	3b04      	subs	r3, #4
  402516:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402518:	68ba      	ldr	r2, [r7, #8]
  40251a:	687b      	ldr	r3, [r7, #4]
  40251c:	4413      	add	r3, r2
  40251e:	3b04      	subs	r3, #4
  402520:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402522:	e00a      	b.n	40253a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402524:	68bb      	ldr	r3, [r7, #8]
  402526:	1f1a      	subs	r2, r3, #4
  402528:	60ba      	str	r2, [r7, #8]
  40252a:	68fa      	ldr	r2, [r7, #12]
  40252c:	1f11      	subs	r1, r2, #4
  40252e:	60f9      	str	r1, [r7, #12]
  402530:	6812      	ldr	r2, [r2, #0]
  402532:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402534:	687b      	ldr	r3, [r7, #4]
  402536:	3b04      	subs	r3, #4
  402538:	607b      	str	r3, [r7, #4]
  40253a:	687b      	ldr	r3, [r7, #4]
  40253c:	2b00      	cmp	r3, #0
  40253e:	d1f1      	bne.n	402524 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402540:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402542:	4b0e      	ldr	r3, [pc, #56]	; (40257c <Reset_Handler+0xb0>)
  402544:	60bb      	str	r3, [r7, #8]
  402546:	e004      	b.n	402552 <Reset_Handler+0x86>
		*pDest++ = 0;
  402548:	68bb      	ldr	r3, [r7, #8]
  40254a:	1d1a      	adds	r2, r3, #4
  40254c:	60ba      	str	r2, [r7, #8]
  40254e:	2200      	movs	r2, #0
  402550:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402552:	68bb      	ldr	r3, [r7, #8]
  402554:	4a0a      	ldr	r2, [pc, #40]	; (402580 <Reset_Handler+0xb4>)
  402556:	4293      	cmp	r3, r2
  402558:	d3f6      	bcc.n	402548 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40255a:	4b0a      	ldr	r3, [pc, #40]	; (402584 <Reset_Handler+0xb8>)
  40255c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40255e:	4a0a      	ldr	r2, [pc, #40]	; (402588 <Reset_Handler+0xbc>)
  402560:	68fb      	ldr	r3, [r7, #12]
  402562:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402564:	4b09      	ldr	r3, [pc, #36]	; (40258c <Reset_Handler+0xc0>)
  402566:	4798      	blx	r3

	/* Branch to main function */
	main();
  402568:	4b09      	ldr	r3, [pc, #36]	; (402590 <Reset_Handler+0xc4>)
  40256a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40256c:	e7fe      	b.n	40256c <Reset_Handler+0xa0>
  40256e:	bf00      	nop
  402570:	00408060 	.word	0x00408060
  402574:	20000000 	.word	0x20000000
  402578:	20000884 	.word	0x20000884
  40257c:	20000884 	.word	0x20000884
  402580:	20008874 	.word	0x20008874
  402584:	00400000 	.word	0x00400000
  402588:	e000ed00 	.word	0xe000ed00
  40258c:	00402da1 	.word	0x00402da1
  402590:	004028c9 	.word	0x004028c9

00402594 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402594:	b480      	push	{r7}
  402596:	af00      	add	r7, sp, #0
	while (1) {
	}
  402598:	e7fe      	b.n	402598 <Dummy_Handler+0x4>
  40259a:	bf00      	nop

0040259c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40259c:	b480      	push	{r7}
  40259e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4025a0:	4b5d      	ldr	r3, [pc, #372]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025a4:	f003 0303 	and.w	r3, r3, #3
  4025a8:	2b03      	cmp	r3, #3
  4025aa:	f200 8096 	bhi.w	4026da <SystemCoreClockUpdate+0x13e>
  4025ae:	a201      	add	r2, pc, #4	; (adr r2, 4025b4 <SystemCoreClockUpdate+0x18>)
  4025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025b4:	004025c5 	.word	0x004025c5
  4025b8:	004025e5 	.word	0x004025e5
  4025bc:	0040262f 	.word	0x0040262f
  4025c0:	0040262f 	.word	0x0040262f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4025c4:	4b55      	ldr	r3, [pc, #340]	; (40271c <SystemCoreClockUpdate+0x180>)
  4025c6:	695b      	ldr	r3, [r3, #20]
  4025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4025cc:	2b00      	cmp	r3, #0
  4025ce:	d004      	beq.n	4025da <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4025d0:	4b53      	ldr	r3, [pc, #332]	; (402720 <SystemCoreClockUpdate+0x184>)
  4025d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4025d6:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4025d8:	e080      	b.n	4026dc <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4025da:	4b51      	ldr	r3, [pc, #324]	; (402720 <SystemCoreClockUpdate+0x184>)
  4025dc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4025e0:	601a      	str	r2, [r3, #0]
			}
		break;
  4025e2:	e07b      	b.n	4026dc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4025e4:	4b4c      	ldr	r3, [pc, #304]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4025e6:	6a1b      	ldr	r3, [r3, #32]
  4025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4025ec:	2b00      	cmp	r3, #0
  4025ee:	d003      	beq.n	4025f8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4025f0:	4b4b      	ldr	r3, [pc, #300]	; (402720 <SystemCoreClockUpdate+0x184>)
  4025f2:	4a4c      	ldr	r2, [pc, #304]	; (402724 <SystemCoreClockUpdate+0x188>)
  4025f4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4025f6:	e071      	b.n	4026dc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025f8:	4b49      	ldr	r3, [pc, #292]	; (402720 <SystemCoreClockUpdate+0x184>)
  4025fa:	4a4b      	ldr	r2, [pc, #300]	; (402728 <SystemCoreClockUpdate+0x18c>)
  4025fc:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4025fe:	4b46      	ldr	r3, [pc, #280]	; (402718 <SystemCoreClockUpdate+0x17c>)
  402600:	6a1b      	ldr	r3, [r3, #32]
  402602:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402606:	2b10      	cmp	r3, #16
  402608:	d008      	beq.n	40261c <SystemCoreClockUpdate+0x80>
  40260a:	2b20      	cmp	r3, #32
  40260c:	d00a      	beq.n	402624 <SystemCoreClockUpdate+0x88>
  40260e:	2b00      	cmp	r3, #0
  402610:	d000      	beq.n	402614 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  402612:	e00b      	b.n	40262c <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402614:	4b42      	ldr	r3, [pc, #264]	; (402720 <SystemCoreClockUpdate+0x184>)
  402616:	4a44      	ldr	r2, [pc, #272]	; (402728 <SystemCoreClockUpdate+0x18c>)
  402618:	601a      	str	r2, [r3, #0]
			break;
  40261a:	e007      	b.n	40262c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40261c:	4b40      	ldr	r3, [pc, #256]	; (402720 <SystemCoreClockUpdate+0x184>)
  40261e:	4a43      	ldr	r2, [pc, #268]	; (40272c <SystemCoreClockUpdate+0x190>)
  402620:	601a      	str	r2, [r3, #0]
			break;
  402622:	e003      	b.n	40262c <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402624:	4b3e      	ldr	r3, [pc, #248]	; (402720 <SystemCoreClockUpdate+0x184>)
  402626:	4a3f      	ldr	r2, [pc, #252]	; (402724 <SystemCoreClockUpdate+0x188>)
  402628:	601a      	str	r2, [r3, #0]
			break;
  40262a:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  40262c:	e056      	b.n	4026dc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40262e:	4b3a      	ldr	r3, [pc, #232]	; (402718 <SystemCoreClockUpdate+0x17c>)
  402630:	6a1b      	ldr	r3, [r3, #32]
  402632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402636:	2b00      	cmp	r3, #0
  402638:	d003      	beq.n	402642 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40263a:	4b39      	ldr	r3, [pc, #228]	; (402720 <SystemCoreClockUpdate+0x184>)
  40263c:	4a39      	ldr	r2, [pc, #228]	; (402724 <SystemCoreClockUpdate+0x188>)
  40263e:	601a      	str	r2, [r3, #0]
  402640:	e019      	b.n	402676 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402642:	4b37      	ldr	r3, [pc, #220]	; (402720 <SystemCoreClockUpdate+0x184>)
  402644:	4a38      	ldr	r2, [pc, #224]	; (402728 <SystemCoreClockUpdate+0x18c>)
  402646:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402648:	4b33      	ldr	r3, [pc, #204]	; (402718 <SystemCoreClockUpdate+0x17c>)
  40264a:	6a1b      	ldr	r3, [r3, #32]
  40264c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402650:	2b10      	cmp	r3, #16
  402652:	d008      	beq.n	402666 <SystemCoreClockUpdate+0xca>
  402654:	2b20      	cmp	r3, #32
  402656:	d00a      	beq.n	40266e <SystemCoreClockUpdate+0xd2>
  402658:	2b00      	cmp	r3, #0
  40265a:	d000      	beq.n	40265e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40265c:	e00b      	b.n	402676 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40265e:	4b30      	ldr	r3, [pc, #192]	; (402720 <SystemCoreClockUpdate+0x184>)
  402660:	4a31      	ldr	r2, [pc, #196]	; (402728 <SystemCoreClockUpdate+0x18c>)
  402662:	601a      	str	r2, [r3, #0]
					break;
  402664:	e007      	b.n	402676 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402666:	4b2e      	ldr	r3, [pc, #184]	; (402720 <SystemCoreClockUpdate+0x184>)
  402668:	4a30      	ldr	r2, [pc, #192]	; (40272c <SystemCoreClockUpdate+0x190>)
  40266a:	601a      	str	r2, [r3, #0]
					break;
  40266c:	e003      	b.n	402676 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40266e:	4b2c      	ldr	r3, [pc, #176]	; (402720 <SystemCoreClockUpdate+0x184>)
  402670:	4a2c      	ldr	r2, [pc, #176]	; (402724 <SystemCoreClockUpdate+0x188>)
  402672:	601a      	str	r2, [r3, #0]
					break;
  402674:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402676:	4b28      	ldr	r3, [pc, #160]	; (402718 <SystemCoreClockUpdate+0x17c>)
  402678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40267a:	f003 0303 	and.w	r3, r3, #3
  40267e:	2b02      	cmp	r3, #2
  402680:	d115      	bne.n	4026ae <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402682:	4b25      	ldr	r3, [pc, #148]	; (402718 <SystemCoreClockUpdate+0x17c>)
  402684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402686:	4b2a      	ldr	r3, [pc, #168]	; (402730 <SystemCoreClockUpdate+0x194>)
  402688:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40268a:	0c1b      	lsrs	r3, r3, #16
  40268c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40268e:	4a24      	ldr	r2, [pc, #144]	; (402720 <SystemCoreClockUpdate+0x184>)
  402690:	6812      	ldr	r2, [r2, #0]
  402692:	fb02 f303 	mul.w	r3, r2, r3
  402696:	4a22      	ldr	r2, [pc, #136]	; (402720 <SystemCoreClockUpdate+0x184>)
  402698:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40269a:	4b1f      	ldr	r3, [pc, #124]	; (402718 <SystemCoreClockUpdate+0x17c>)
  40269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40269e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4026a0:	4a1f      	ldr	r2, [pc, #124]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026a2:	6812      	ldr	r2, [r2, #0]
  4026a4:	fbb2 f3f3 	udiv	r3, r2, r3
  4026a8:	4a1d      	ldr	r2, [pc, #116]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026aa:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4026ac:	e016      	b.n	4026dc <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4026ae:	4b1a      	ldr	r3, [pc, #104]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026b2:	4b1f      	ldr	r3, [pc, #124]	; (402730 <SystemCoreClockUpdate+0x194>)
  4026b4:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4026b6:	0c1b      	lsrs	r3, r3, #16
  4026b8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4026ba:	4a19      	ldr	r2, [pc, #100]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026bc:	6812      	ldr	r2, [r2, #0]
  4026be:	fb02 f303 	mul.w	r3, r2, r3
  4026c2:	4a17      	ldr	r2, [pc, #92]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026c4:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4026c6:	4b14      	ldr	r3, [pc, #80]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4026ca:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4026cc:	4a14      	ldr	r2, [pc, #80]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026ce:	6812      	ldr	r2, [r2, #0]
  4026d0:	fbb2 f3f3 	udiv	r3, r2, r3
  4026d4:	4a12      	ldr	r2, [pc, #72]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026d6:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4026d8:	e000      	b.n	4026dc <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4026da:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4026dc:	4b0e      	ldr	r3, [pc, #56]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026e4:	2b70      	cmp	r3, #112	; 0x70
  4026e6:	d108      	bne.n	4026fa <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4026e8:	4b0d      	ldr	r3, [pc, #52]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026ea:	681b      	ldr	r3, [r3, #0]
  4026ec:	4a11      	ldr	r2, [pc, #68]	; (402734 <SystemCoreClockUpdate+0x198>)
  4026ee:	fba2 2303 	umull	r2, r3, r2, r3
  4026f2:	085b      	lsrs	r3, r3, #1
  4026f4:	4a0a      	ldr	r2, [pc, #40]	; (402720 <SystemCoreClockUpdate+0x184>)
  4026f6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4026f8:	e00a      	b.n	402710 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4026fa:	4b07      	ldr	r3, [pc, #28]	; (402718 <SystemCoreClockUpdate+0x17c>)
  4026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402702:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  402704:	4a06      	ldr	r2, [pc, #24]	; (402720 <SystemCoreClockUpdate+0x184>)
  402706:	6812      	ldr	r2, [r2, #0]
  402708:	fa22 f303 	lsr.w	r3, r2, r3
  40270c:	4a04      	ldr	r2, [pc, #16]	; (402720 <SystemCoreClockUpdate+0x184>)
  40270e:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402710:	bf00      	nop
  402712:	46bd      	mov	sp, r7
  402714:	bc80      	pop	{r7}
  402716:	4770      	bx	lr
  402718:	400e0400 	.word	0x400e0400
  40271c:	400e1410 	.word	0x400e1410
  402720:	2000000c 	.word	0x2000000c
  402724:	00b71b00 	.word	0x00b71b00
  402728:	003d0900 	.word	0x003d0900
  40272c:	007a1200 	.word	0x007a1200
  402730:	07ff0000 	.word	0x07ff0000
  402734:	aaaaaaab 	.word	0xaaaaaaab

00402738 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402738:	b480      	push	{r7}
  40273a:	b083      	sub	sp, #12
  40273c:	af00      	add	r7, sp, #0
  40273e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402740:	687b      	ldr	r3, [r7, #4]
  402742:	4a18      	ldr	r2, [pc, #96]	; (4027a4 <system_init_flash+0x6c>)
  402744:	4293      	cmp	r3, r2
  402746:	d804      	bhi.n	402752 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402748:	4b17      	ldr	r3, [pc, #92]	; (4027a8 <system_init_flash+0x70>)
  40274a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40274e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402750:	e023      	b.n	40279a <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402752:	687b      	ldr	r3, [r7, #4]
  402754:	4a15      	ldr	r2, [pc, #84]	; (4027ac <system_init_flash+0x74>)
  402756:	4293      	cmp	r3, r2
  402758:	d803      	bhi.n	402762 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40275a:	4b13      	ldr	r3, [pc, #76]	; (4027a8 <system_init_flash+0x70>)
  40275c:	4a14      	ldr	r2, [pc, #80]	; (4027b0 <system_init_flash+0x78>)
  40275e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402760:	e01b      	b.n	40279a <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402762:	687b      	ldr	r3, [r7, #4]
  402764:	4a13      	ldr	r2, [pc, #76]	; (4027b4 <system_init_flash+0x7c>)
  402766:	4293      	cmp	r3, r2
  402768:	d803      	bhi.n	402772 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40276a:	4b0f      	ldr	r3, [pc, #60]	; (4027a8 <system_init_flash+0x70>)
  40276c:	4a12      	ldr	r2, [pc, #72]	; (4027b8 <system_init_flash+0x80>)
  40276e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402770:	e013      	b.n	40279a <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402772:	687b      	ldr	r3, [r7, #4]
  402774:	4a11      	ldr	r2, [pc, #68]	; (4027bc <system_init_flash+0x84>)
  402776:	4293      	cmp	r3, r2
  402778:	d803      	bhi.n	402782 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40277a:	4b0b      	ldr	r3, [pc, #44]	; (4027a8 <system_init_flash+0x70>)
  40277c:	4a10      	ldr	r2, [pc, #64]	; (4027c0 <system_init_flash+0x88>)
  40277e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402780:	e00b      	b.n	40279a <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402782:	687b      	ldr	r3, [r7, #4]
  402784:	4a0f      	ldr	r2, [pc, #60]	; (4027c4 <system_init_flash+0x8c>)
  402786:	4293      	cmp	r3, r2
  402788:	d804      	bhi.n	402794 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40278a:	4b07      	ldr	r3, [pc, #28]	; (4027a8 <system_init_flash+0x70>)
  40278c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402790:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402792:	e002      	b.n	40279a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402794:	4b04      	ldr	r3, [pc, #16]	; (4027a8 <system_init_flash+0x70>)
  402796:	4a0c      	ldr	r2, [pc, #48]	; (4027c8 <system_init_flash+0x90>)
  402798:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40279a:	bf00      	nop
  40279c:	370c      	adds	r7, #12
  40279e:	46bd      	mov	sp, r7
  4027a0:	bc80      	pop	{r7}
  4027a2:	4770      	bx	lr
  4027a4:	01312cff 	.word	0x01312cff
  4027a8:	400e0a00 	.word	0x400e0a00
  4027ac:	026259ff 	.word	0x026259ff
  4027b0:	04000100 	.word	0x04000100
  4027b4:	039386ff 	.word	0x039386ff
  4027b8:	04000200 	.word	0x04000200
  4027bc:	04c4b3ff 	.word	0x04c4b3ff
  4027c0:	04000300 	.word	0x04000300
  4027c4:	05f5e0ff 	.word	0x05f5e0ff
  4027c8:	04000500 	.word	0x04000500

004027cc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4027cc:	b480      	push	{r7}
  4027ce:	b085      	sub	sp, #20
  4027d0:	af00      	add	r7, sp, #0
  4027d2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4027d4:	4b10      	ldr	r3, [pc, #64]	; (402818 <_sbrk+0x4c>)
  4027d6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4027d8:	4b10      	ldr	r3, [pc, #64]	; (40281c <_sbrk+0x50>)
  4027da:	681b      	ldr	r3, [r3, #0]
  4027dc:	2b00      	cmp	r3, #0
  4027de:	d102      	bne.n	4027e6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4027e0:	4b0e      	ldr	r3, [pc, #56]	; (40281c <_sbrk+0x50>)
  4027e2:	4a0f      	ldr	r2, [pc, #60]	; (402820 <_sbrk+0x54>)
  4027e4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4027e6:	4b0d      	ldr	r3, [pc, #52]	; (40281c <_sbrk+0x50>)
  4027e8:	681b      	ldr	r3, [r3, #0]
  4027ea:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4027ec:	68ba      	ldr	r2, [r7, #8]
  4027ee:	687b      	ldr	r3, [r7, #4]
  4027f0:	441a      	add	r2, r3
  4027f2:	68fb      	ldr	r3, [r7, #12]
  4027f4:	429a      	cmp	r2, r3
  4027f6:	dd02      	ble.n	4027fe <_sbrk+0x32>
		return (caddr_t) -1;	
  4027f8:	f04f 33ff 	mov.w	r3, #4294967295
  4027fc:	e006      	b.n	40280c <_sbrk+0x40>
	}

	heap += incr;
  4027fe:	4b07      	ldr	r3, [pc, #28]	; (40281c <_sbrk+0x50>)
  402800:	681a      	ldr	r2, [r3, #0]
  402802:	687b      	ldr	r3, [r7, #4]
  402804:	4413      	add	r3, r2
  402806:	4a05      	ldr	r2, [pc, #20]	; (40281c <_sbrk+0x50>)
  402808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40280a:	68bb      	ldr	r3, [r7, #8]
}
  40280c:	4618      	mov	r0, r3
  40280e:	3714      	adds	r7, #20
  402810:	46bd      	mov	sp, r7
  402812:	bc80      	pop	{r7}
  402814:	4770      	bx	lr
  402816:	bf00      	nop
  402818:	2001fffc 	.word	0x2001fffc
  40281c:	20008830 	.word	0x20008830
  402820:	2000b878 	.word	0x2000b878

00402824 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402824:	b480      	push	{r7}
  402826:	b083      	sub	sp, #12
  402828:	af00      	add	r7, sp, #0
  40282a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40282c:	687b      	ldr	r3, [r7, #4]
  40282e:	2b07      	cmp	r3, #7
  402830:	d825      	bhi.n	40287e <osc_get_rate+0x5a>
  402832:	a201      	add	r2, pc, #4	; (adr r2, 402838 <osc_get_rate+0x14>)
  402834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402838:	00402859 	.word	0x00402859
  40283c:	0040285f 	.word	0x0040285f
  402840:	00402865 	.word	0x00402865
  402844:	0040286b 	.word	0x0040286b
  402848:	0040286f 	.word	0x0040286f
  40284c:	00402873 	.word	0x00402873
  402850:	00402877 	.word	0x00402877
  402854:	0040287b 	.word	0x0040287b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402858:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40285c:	e010      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402862:	e00d      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402868:	e00a      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40286a:	4b08      	ldr	r3, [pc, #32]	; (40288c <osc_get_rate+0x68>)
  40286c:	e008      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40286e:	4b08      	ldr	r3, [pc, #32]	; (402890 <osc_get_rate+0x6c>)
  402870:	e006      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402872:	4b08      	ldr	r3, [pc, #32]	; (402894 <osc_get_rate+0x70>)
  402874:	e004      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402876:	4b07      	ldr	r3, [pc, #28]	; (402894 <osc_get_rate+0x70>)
  402878:	e002      	b.n	402880 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40287a:	4b06      	ldr	r3, [pc, #24]	; (402894 <osc_get_rate+0x70>)
  40287c:	e000      	b.n	402880 <osc_get_rate+0x5c>
	}

	return 0;
  40287e:	2300      	movs	r3, #0
}
  402880:	4618      	mov	r0, r3
  402882:	370c      	adds	r7, #12
  402884:	46bd      	mov	sp, r7
  402886:	bc80      	pop	{r7}
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	003d0900 	.word	0x003d0900
  402890:	007a1200 	.word	0x007a1200
  402894:	00b71b00 	.word	0x00b71b00

00402898 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402898:	b580      	push	{r7, lr}
  40289a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40289c:	2006      	movs	r0, #6
  40289e:	4b04      	ldr	r3, [pc, #16]	; (4028b0 <sysclk_get_main_hz+0x18>)
  4028a0:	4798      	blx	r3
  4028a2:	4602      	mov	r2, r0
  4028a4:	4613      	mov	r3, r2
  4028a6:	009b      	lsls	r3, r3, #2
  4028a8:	4413      	add	r3, r2
  4028aa:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4028ac:	4618      	mov	r0, r3
  4028ae:	bd80      	pop	{r7, pc}
  4028b0:	00402825 	.word	0x00402825

004028b4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4028b4:	b580      	push	{r7, lr}
  4028b6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4028b8:	4b02      	ldr	r3, [pc, #8]	; (4028c4 <sysclk_get_cpu_hz+0x10>)
  4028ba:	4798      	blx	r3
  4028bc:	4603      	mov	r3, r0
  4028be:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4028c0:	4618      	mov	r0, r3
  4028c2:	bd80      	pop	{r7, pc}
  4028c4:	00402899 	.word	0x00402899

004028c8 <main>:
		}
	}
}

int main (void)
{
  4028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028cc:	b087      	sub	sp, #28
  4028ce:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  4028d0:	4b56      	ldr	r3, [pc, #344]	; (402a2c <main+0x164>)
  4028d2:	4798      	blx	r3
	board_init();
  4028d4:	4b56      	ldr	r3, [pc, #344]	; (402a30 <main+0x168>)
  4028d6:	4798      	blx	r3
	configure_tc();
  4028d8:	4b56      	ldr	r3, [pc, #344]	; (402a34 <main+0x16c>)
  4028da:	4798      	blx	r3
	tc_start(TC0, 0);
  4028dc:	2100      	movs	r1, #0
  4028de:	4856      	ldr	r0, [pc, #344]	; (402a38 <main+0x170>)
  4028e0:	4b56      	ldr	r3, [pc, #344]	; (402a3c <main+0x174>)
  4028e2:	4798      	blx	r3
		
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi 
  4028e4:	4b56      	ldr	r3, [pc, #344]	; (402a40 <main+0x178>)
  4028e6:	4798      	blx	r3
	//configure_camera();		// configures and initializes camera module
	
	uint8_t status_code = 0;
  4028e8:	2300      	movs	r3, #0
  4028ea:	75bb      	strb	r3, [r7, #22]
	
	while(write_wifi_command_safe("reboot\r\n", "[Associated]", 20000,0)){}
  4028ec:	bf00      	nop
  4028ee:	2300      	movs	r3, #0
  4028f0:	f644 6220 	movw	r2, #20000	; 0x4e20
  4028f4:	4953      	ldr	r1, [pc, #332]	; (402a44 <main+0x17c>)
  4028f6:	4854      	ldr	r0, [pc, #336]	; (402a48 <main+0x180>)
  4028f8:	4c54      	ldr	r4, [pc, #336]	; (402a4c <main+0x184>)
  4028fa:	47a0      	blx	r4
  4028fc:	4603      	mov	r3, r0
  4028fe:	2b00      	cmp	r3, #0
  402900:	d1f5      	bne.n	4028ee <main+0x26>
	
	status_code = write_wifi_command_safe("set sy c p off\r\n","Set OK",100,0);
  402902:	2300      	movs	r3, #0
  402904:	2264      	movs	r2, #100	; 0x64
  402906:	4952      	ldr	r1, [pc, #328]	; (402a50 <main+0x188>)
  402908:	4852      	ldr	r0, [pc, #328]	; (402a54 <main+0x18c>)
  40290a:	4c50      	ldr	r4, [pc, #320]	; (402a4c <main+0x184>)
  40290c:	47a0      	blx	r4
  40290e:	4603      	mov	r3, r0
  402910:	75bb      	strb	r3, [r7, #22]
	
	status_code = write_wifi_command_safe("set sy c e off\r\n","Set OK", 100, 0);
  402912:	2300      	movs	r3, #0
  402914:	2264      	movs	r2, #100	; 0x64
  402916:	494e      	ldr	r1, [pc, #312]	; (402a50 <main+0x188>)
  402918:	484f      	ldr	r0, [pc, #316]	; (402a58 <main+0x190>)
  40291a:	4c4c      	ldr	r4, [pc, #304]	; (402a4c <main+0x184>)
  40291c:	47a0      	blx	r4
  40291e:	4603      	mov	r3, r0
  402920:	75bb      	strb	r3, [r7, #22]
	
	//status_code = write_wifi_command_safe("write 0 4\r\n","Success",500, 0);
	
	//reboot_wifi();			// reboots the wifi chip (takes several seconds)
	
	configure_i2s(); // microphone configuration
  402922:	4b4e      	ldr	r3, [pc, #312]	; (402a5c <main+0x194>)
  402924:	4798      	blx	r3
	
	uint8_t ws_handle = open_websocket(5); // try 5 times to open the socket
  402926:	2005      	movs	r0, #5
  402928:	4b4d      	ldr	r3, [pc, #308]	; (402a60 <main+0x198>)
  40292a:	4798      	blx	r3
  40292c:	4603      	mov	r3, r0
  40292e:	75fb      	strb	r3, [r7, #23]

	start_i2s_capture();
  402930:	4b4c      	ldr	r3, [pc, #304]	; (402a64 <main+0x19c>)
  402932:	4798      	blx	r3
	while(1) {
		/*if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
			setup_wifi();		// the wifi chip tries to reassociate to a new network
		}*/
		
		if (ws_handle != NO_WEBSOCKET_OPEN){
  402934:	7dfb      	ldrb	r3, [r7, #23]
  402936:	2b0a      	cmp	r3, #10
  402938:	d01f      	beq.n	40297a <main+0xb2>
			//websocket open
			status_code = send_data_ws(i2s_rec_buf, ws_handle);
  40293a:	7dfb      	ldrb	r3, [r7, #23]
  40293c:	4619      	mov	r1, r3
  40293e:	484a      	ldr	r0, [pc, #296]	; (402a68 <main+0x1a0>)
  402940:	4b4a      	ldr	r3, [pc, #296]	; (402a6c <main+0x1a4>)
  402942:	4798      	blx	r3
  402944:	4603      	mov	r3, r0
  402946:	75bb      	strb	r3, [r7, #22]
			if(status_code == COMMAND_RETRYIT){
  402948:	7dbb      	ldrb	r3, [r7, #22]
  40294a:	2b04      	cmp	r3, #4
  40294c:	d06b      	beq.n	402a26 <main+0x15e>
				continue;
			}
			if(status_code == COMMAND_STCLOSE){
  40294e:	7dbb      	ldrb	r3, [r7, #22]
  402950:	2b03      	cmp	r3, #3
  402952:	d102      	bne.n	40295a <main+0x92>
				ws_handle = NO_WEBSOCKET_OPEN;
  402954:	230a      	movs	r3, #10
  402956:	75fb      	strb	r3, [r7, #23]
  402958:	e7ec      	b.n	402934 <main+0x6c>
			} else if (status_code == COMMAND_FAILURE){
  40295a:	7dbb      	ldrb	r3, [r7, #22]
  40295c:	2b01      	cmp	r3, #1
  40295e:	d1e9      	bne.n	402934 <main+0x6c>
				if(check_ws_handle(ws_handle) != COMMAND_SUCCESS){
  402960:	7dfb      	ldrb	r3, [r7, #23]
  402962:	4618      	mov	r0, r3
  402964:	4b42      	ldr	r3, [pc, #264]	; (402a70 <main+0x1a8>)
  402966:	4798      	blx	r3
  402968:	4603      	mov	r3, r0
  40296a:	2b00      	cmp	r3, #0
  40296c:	d0e2      	beq.n	402934 <main+0x6c>
					ws_handle = open_websocket(3);
  40296e:	2003      	movs	r0, #3
  402970:	4b3b      	ldr	r3, [pc, #236]	; (402a60 <main+0x198>)
  402972:	4798      	blx	r3
  402974:	4603      	mov	r3, r0
  402976:	75fb      	strb	r3, [r7, #23]
  402978:	e7dc      	b.n	402934 <main+0x6c>
			}
		} else{
			// websocket not open
			// wait a minute, then try to reopen
			// (for now, less than a minute)
			write_wifi_command_safe("close all\r\n","Success",100,0);
  40297a:	2300      	movs	r3, #0
  40297c:	2264      	movs	r2, #100	; 0x64
  40297e:	493d      	ldr	r1, [pc, #244]	; (402a74 <main+0x1ac>)
  402980:	483d      	ldr	r0, [pc, #244]	; (402a78 <main+0x1b0>)
  402982:	4c32      	ldr	r4, [pc, #200]	; (402a4c <main+0x184>)
  402984:	47a0      	blx	r4
			delay_ms(20000);
  402986:	4b3d      	ldr	r3, [pc, #244]	; (402a7c <main+0x1b4>)
  402988:	4798      	blx	r3
  40298a:	4603      	mov	r3, r0
  40298c:	4619      	mov	r1, r3
  40298e:	f04f 0200 	mov.w	r2, #0
  402992:	460b      	mov	r3, r1
  402994:	4614      	mov	r4, r2
  402996:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  40299a:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  40299e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  4029a2:	4653      	mov	r3, sl
  4029a4:	465c      	mov	r4, fp
  4029a6:	0166      	lsls	r6, r4, #5
  4029a8:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  4029ac:	015d      	lsls	r5, r3, #5
  4029ae:	1aed      	subs	r5, r5, r3
  4029b0:	eb66 0604 	sbc.w	r6, r6, r4
  4029b4:	186d      	adds	r5, r5, r1
  4029b6:	eb46 0602 	adc.w	r6, r6, r2
  4029ba:	00b3      	lsls	r3, r6, #2
  4029bc:	60fb      	str	r3, [r7, #12]
  4029be:	68fb      	ldr	r3, [r7, #12]
  4029c0:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
  4029c4:	60fb      	str	r3, [r7, #12]
  4029c6:	00ab      	lsls	r3, r5, #2
  4029c8:	60bb      	str	r3, [r7, #8]
  4029ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4029ce:	195b      	adds	r3, r3, r5
  4029d0:	eb44 0406 	adc.w	r4, r4, r6
  4029d4:	461d      	mov	r5, r3
  4029d6:	4626      	mov	r6, r4
  4029d8:	0173      	lsls	r3, r6, #5
  4029da:	607b      	str	r3, [r7, #4]
  4029dc:	687b      	ldr	r3, [r7, #4]
  4029de:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
  4029e2:	607b      	str	r3, [r7, #4]
  4029e4:	016b      	lsls	r3, r5, #5
  4029e6:	603b      	str	r3, [r7, #0]
  4029e8:	e9d7 5600 	ldrd	r5, r6, [r7]
  4029ec:	4629      	mov	r1, r5
  4029ee:	4632      	mov	r2, r6
  4029f0:	f243 63af 	movw	r3, #13999	; 0x36af
  4029f4:	f04f 0400 	mov.w	r4, #0
  4029f8:	eb11 0803 	adds.w	r8, r1, r3
  4029fc:	eb42 0904 	adc.w	r9, r2, r4
  402a00:	4640      	mov	r0, r8
  402a02:	4649      	mov	r1, r9
  402a04:	4c1e      	ldr	r4, [pc, #120]	; (402a80 <main+0x1b8>)
  402a06:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402a0a:	f04f 0300 	mov.w	r3, #0
  402a0e:	47a0      	blx	r4
  402a10:	4603      	mov	r3, r0
  402a12:	460c      	mov	r4, r1
  402a14:	4618      	mov	r0, r3
  402a16:	4b1b      	ldr	r3, [pc, #108]	; (402a84 <main+0x1bc>)
  402a18:	4798      	blx	r3
			ws_handle = open_websocket(5); // try 5 times to open the socket
  402a1a:	2005      	movs	r0, #5
  402a1c:	4b10      	ldr	r3, [pc, #64]	; (402a60 <main+0x198>)
  402a1e:	4798      	blx	r3
  402a20:	4603      	mov	r3, r0
  402a22:	75fb      	strb	r3, [r7, #23]
  402a24:	e786      	b.n	402934 <main+0x6c>
		
		if (ws_handle != NO_WEBSOCKET_OPEN){
			//websocket open
			status_code = send_data_ws(i2s_rec_buf, ws_handle);
			if(status_code == COMMAND_RETRYIT){
				continue;
  402a26:	bf00      	nop
		//post_audio_usart((uint8_t *) i2s_rec_buf, 2000);			
		

		//start_capture();		// capture the image to internal memorys
		//post_image();			// send the image to the wifi chip
	}
  402a28:	e784      	b.n	402934 <main+0x6c>
  402a2a:	bf00      	nop
  402a2c:	004018f5 	.word	0x004018f5
  402a30:	00402375 	.word	0x00402375
  402a34:	00400e55 	.word	0x00400e55
  402a38:	40010000 	.word	0x40010000
  402a3c:	00400411 	.word	0x00400411
  402a40:	004015dd 	.word	0x004015dd
  402a44:	00407e4c 	.word	0x00407e4c
  402a48:	00407e5c 	.word	0x00407e5c
  402a4c:	004013c5 	.word	0x004013c5
  402a50:	00407e68 	.word	0x00407e68
  402a54:	00407e70 	.word	0x00407e70
  402a58:	00407e84 	.word	0x00407e84
  402a5c:	004007a9 	.word	0x004007a9
  402a60:	004014e9 	.word	0x004014e9
  402a64:	004006f1 	.word	0x004006f1
  402a68:	200008a4 	.word	0x200008a4
  402a6c:	00401559 	.word	0x00401559
  402a70:	00401589 	.word	0x00401589
  402a74:	00407e98 	.word	0x00407e98
  402a78:	00407ea0 	.word	0x00407ea0
  402a7c:	004028b5 	.word	0x004028b5
  402a80:	00402a89 	.word	0x00402a89
  402a84:	20000001 	.word	0x20000001

00402a88 <__aeabi_uldivmod>:
  402a88:	b953      	cbnz	r3, 402aa0 <__aeabi_uldivmod+0x18>
  402a8a:	b94a      	cbnz	r2, 402aa0 <__aeabi_uldivmod+0x18>
  402a8c:	2900      	cmp	r1, #0
  402a8e:	bf08      	it	eq
  402a90:	2800      	cmpeq	r0, #0
  402a92:	bf1c      	itt	ne
  402a94:	f04f 31ff 	movne.w	r1, #4294967295
  402a98:	f04f 30ff 	movne.w	r0, #4294967295
  402a9c:	f000 b97e 	b.w	402d9c <__aeabi_idiv0>
  402aa0:	f1ad 0c08 	sub.w	ip, sp, #8
  402aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402aa8:	f000 f806 	bl	402ab8 <__udivmoddi4>
  402aac:	f8dd e004 	ldr.w	lr, [sp, #4]
  402ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402ab4:	b004      	add	sp, #16
  402ab6:	4770      	bx	lr

00402ab8 <__udivmoddi4>:
  402ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402abc:	468c      	mov	ip, r1
  402abe:	460e      	mov	r6, r1
  402ac0:	4604      	mov	r4, r0
  402ac2:	9d08      	ldr	r5, [sp, #32]
  402ac4:	2b00      	cmp	r3, #0
  402ac6:	d150      	bne.n	402b6a <__udivmoddi4+0xb2>
  402ac8:	428a      	cmp	r2, r1
  402aca:	4617      	mov	r7, r2
  402acc:	d96c      	bls.n	402ba8 <__udivmoddi4+0xf0>
  402ace:	fab2 fe82 	clz	lr, r2
  402ad2:	f1be 0f00 	cmp.w	lr, #0
  402ad6:	d00b      	beq.n	402af0 <__udivmoddi4+0x38>
  402ad8:	f1ce 0420 	rsb	r4, lr, #32
  402adc:	fa20 f404 	lsr.w	r4, r0, r4
  402ae0:	fa01 f60e 	lsl.w	r6, r1, lr
  402ae4:	ea44 0c06 	orr.w	ip, r4, r6
  402ae8:	fa02 f70e 	lsl.w	r7, r2, lr
  402aec:	fa00 f40e 	lsl.w	r4, r0, lr
  402af0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  402af4:	0c22      	lsrs	r2, r4, #16
  402af6:	fbbc f0f9 	udiv	r0, ip, r9
  402afa:	fa1f f887 	uxth.w	r8, r7
  402afe:	fb09 c610 	mls	r6, r9, r0, ip
  402b02:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402b06:	fb00 f308 	mul.w	r3, r0, r8
  402b0a:	42b3      	cmp	r3, r6
  402b0c:	d909      	bls.n	402b22 <__udivmoddi4+0x6a>
  402b0e:	19f6      	adds	r6, r6, r7
  402b10:	f100 32ff 	add.w	r2, r0, #4294967295
  402b14:	f080 8122 	bcs.w	402d5c <__udivmoddi4+0x2a4>
  402b18:	42b3      	cmp	r3, r6
  402b1a:	f240 811f 	bls.w	402d5c <__udivmoddi4+0x2a4>
  402b1e:	3802      	subs	r0, #2
  402b20:	443e      	add	r6, r7
  402b22:	1af6      	subs	r6, r6, r3
  402b24:	b2a2      	uxth	r2, r4
  402b26:	fbb6 f3f9 	udiv	r3, r6, r9
  402b2a:	fb09 6613 	mls	r6, r9, r3, r6
  402b2e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402b32:	fb03 f808 	mul.w	r8, r3, r8
  402b36:	45a0      	cmp	r8, r4
  402b38:	d909      	bls.n	402b4e <__udivmoddi4+0x96>
  402b3a:	19e4      	adds	r4, r4, r7
  402b3c:	f103 32ff 	add.w	r2, r3, #4294967295
  402b40:	f080 810a 	bcs.w	402d58 <__udivmoddi4+0x2a0>
  402b44:	45a0      	cmp	r8, r4
  402b46:	f240 8107 	bls.w	402d58 <__udivmoddi4+0x2a0>
  402b4a:	3b02      	subs	r3, #2
  402b4c:	443c      	add	r4, r7
  402b4e:	ebc8 0404 	rsb	r4, r8, r4
  402b52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402b56:	2100      	movs	r1, #0
  402b58:	2d00      	cmp	r5, #0
  402b5a:	d062      	beq.n	402c22 <__udivmoddi4+0x16a>
  402b5c:	fa24 f40e 	lsr.w	r4, r4, lr
  402b60:	2300      	movs	r3, #0
  402b62:	602c      	str	r4, [r5, #0]
  402b64:	606b      	str	r3, [r5, #4]
  402b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b6a:	428b      	cmp	r3, r1
  402b6c:	d907      	bls.n	402b7e <__udivmoddi4+0xc6>
  402b6e:	2d00      	cmp	r5, #0
  402b70:	d055      	beq.n	402c1e <__udivmoddi4+0x166>
  402b72:	2100      	movs	r1, #0
  402b74:	e885 0041 	stmia.w	r5, {r0, r6}
  402b78:	4608      	mov	r0, r1
  402b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b7e:	fab3 f183 	clz	r1, r3
  402b82:	2900      	cmp	r1, #0
  402b84:	f040 8090 	bne.w	402ca8 <__udivmoddi4+0x1f0>
  402b88:	42b3      	cmp	r3, r6
  402b8a:	d302      	bcc.n	402b92 <__udivmoddi4+0xda>
  402b8c:	4282      	cmp	r2, r0
  402b8e:	f200 80f8 	bhi.w	402d82 <__udivmoddi4+0x2ca>
  402b92:	1a84      	subs	r4, r0, r2
  402b94:	eb66 0603 	sbc.w	r6, r6, r3
  402b98:	2001      	movs	r0, #1
  402b9a:	46b4      	mov	ip, r6
  402b9c:	2d00      	cmp	r5, #0
  402b9e:	d040      	beq.n	402c22 <__udivmoddi4+0x16a>
  402ba0:	e885 1010 	stmia.w	r5, {r4, ip}
  402ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ba8:	b912      	cbnz	r2, 402bb0 <__udivmoddi4+0xf8>
  402baa:	2701      	movs	r7, #1
  402bac:	fbb7 f7f2 	udiv	r7, r7, r2
  402bb0:	fab7 fe87 	clz	lr, r7
  402bb4:	f1be 0f00 	cmp.w	lr, #0
  402bb8:	d135      	bne.n	402c26 <__udivmoddi4+0x16e>
  402bba:	1bf3      	subs	r3, r6, r7
  402bbc:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402bc0:	fa1f fc87 	uxth.w	ip, r7
  402bc4:	2101      	movs	r1, #1
  402bc6:	fbb3 f0f8 	udiv	r0, r3, r8
  402bca:	0c22      	lsrs	r2, r4, #16
  402bcc:	fb08 3610 	mls	r6, r8, r0, r3
  402bd0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402bd4:	fb0c f300 	mul.w	r3, ip, r0
  402bd8:	42b3      	cmp	r3, r6
  402bda:	d907      	bls.n	402bec <__udivmoddi4+0x134>
  402bdc:	19f6      	adds	r6, r6, r7
  402bde:	f100 32ff 	add.w	r2, r0, #4294967295
  402be2:	d202      	bcs.n	402bea <__udivmoddi4+0x132>
  402be4:	42b3      	cmp	r3, r6
  402be6:	f200 80ce 	bhi.w	402d86 <__udivmoddi4+0x2ce>
  402bea:	4610      	mov	r0, r2
  402bec:	1af6      	subs	r6, r6, r3
  402bee:	b2a2      	uxth	r2, r4
  402bf0:	fbb6 f3f8 	udiv	r3, r6, r8
  402bf4:	fb08 6613 	mls	r6, r8, r3, r6
  402bf8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402bfc:	fb0c fc03 	mul.w	ip, ip, r3
  402c00:	45a4      	cmp	ip, r4
  402c02:	d907      	bls.n	402c14 <__udivmoddi4+0x15c>
  402c04:	19e4      	adds	r4, r4, r7
  402c06:	f103 32ff 	add.w	r2, r3, #4294967295
  402c0a:	d202      	bcs.n	402c12 <__udivmoddi4+0x15a>
  402c0c:	45a4      	cmp	ip, r4
  402c0e:	f200 80b5 	bhi.w	402d7c <__udivmoddi4+0x2c4>
  402c12:	4613      	mov	r3, r2
  402c14:	ebcc 0404 	rsb	r4, ip, r4
  402c18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402c1c:	e79c      	b.n	402b58 <__udivmoddi4+0xa0>
  402c1e:	4629      	mov	r1, r5
  402c20:	4628      	mov	r0, r5
  402c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c26:	f1ce 0120 	rsb	r1, lr, #32
  402c2a:	fa06 f30e 	lsl.w	r3, r6, lr
  402c2e:	fa07 f70e 	lsl.w	r7, r7, lr
  402c32:	fa20 f901 	lsr.w	r9, r0, r1
  402c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402c3a:	40ce      	lsrs	r6, r1
  402c3c:	ea49 0903 	orr.w	r9, r9, r3
  402c40:	fbb6 faf8 	udiv	sl, r6, r8
  402c44:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402c48:	fb08 661a 	mls	r6, r8, sl, r6
  402c4c:	fa1f fc87 	uxth.w	ip, r7
  402c50:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402c54:	fb0a f20c 	mul.w	r2, sl, ip
  402c58:	429a      	cmp	r2, r3
  402c5a:	fa00 f40e 	lsl.w	r4, r0, lr
  402c5e:	d90a      	bls.n	402c76 <__udivmoddi4+0x1be>
  402c60:	19db      	adds	r3, r3, r7
  402c62:	f10a 31ff 	add.w	r1, sl, #4294967295
  402c66:	f080 8087 	bcs.w	402d78 <__udivmoddi4+0x2c0>
  402c6a:	429a      	cmp	r2, r3
  402c6c:	f240 8084 	bls.w	402d78 <__udivmoddi4+0x2c0>
  402c70:	f1aa 0a02 	sub.w	sl, sl, #2
  402c74:	443b      	add	r3, r7
  402c76:	1a9b      	subs	r3, r3, r2
  402c78:	fa1f f989 	uxth.w	r9, r9
  402c7c:	fbb3 f1f8 	udiv	r1, r3, r8
  402c80:	fb08 3311 	mls	r3, r8, r1, r3
  402c84:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402c88:	fb01 f60c 	mul.w	r6, r1, ip
  402c8c:	429e      	cmp	r6, r3
  402c8e:	d907      	bls.n	402ca0 <__udivmoddi4+0x1e8>
  402c90:	19db      	adds	r3, r3, r7
  402c92:	f101 32ff 	add.w	r2, r1, #4294967295
  402c96:	d26b      	bcs.n	402d70 <__udivmoddi4+0x2b8>
  402c98:	429e      	cmp	r6, r3
  402c9a:	d969      	bls.n	402d70 <__udivmoddi4+0x2b8>
  402c9c:	3902      	subs	r1, #2
  402c9e:	443b      	add	r3, r7
  402ca0:	1b9b      	subs	r3, r3, r6
  402ca2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  402ca6:	e78e      	b.n	402bc6 <__udivmoddi4+0x10e>
  402ca8:	f1c1 0e20 	rsb	lr, r1, #32
  402cac:	fa22 f40e 	lsr.w	r4, r2, lr
  402cb0:	408b      	lsls	r3, r1
  402cb2:	4323      	orrs	r3, r4
  402cb4:	fa20 f70e 	lsr.w	r7, r0, lr
  402cb8:	fa06 f401 	lsl.w	r4, r6, r1
  402cbc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402cc0:	fa26 f60e 	lsr.w	r6, r6, lr
  402cc4:	433c      	orrs	r4, r7
  402cc6:	fbb6 f9fc 	udiv	r9, r6, ip
  402cca:	0c27      	lsrs	r7, r4, #16
  402ccc:	fb0c 6619 	mls	r6, ip, r9, r6
  402cd0:	fa1f f883 	uxth.w	r8, r3
  402cd4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  402cd8:	fb09 f708 	mul.w	r7, r9, r8
  402cdc:	42b7      	cmp	r7, r6
  402cde:	fa02 f201 	lsl.w	r2, r2, r1
  402ce2:	fa00 fa01 	lsl.w	sl, r0, r1
  402ce6:	d908      	bls.n	402cfa <__udivmoddi4+0x242>
  402ce8:	18f6      	adds	r6, r6, r3
  402cea:	f109 30ff 	add.w	r0, r9, #4294967295
  402cee:	d241      	bcs.n	402d74 <__udivmoddi4+0x2bc>
  402cf0:	42b7      	cmp	r7, r6
  402cf2:	d93f      	bls.n	402d74 <__udivmoddi4+0x2bc>
  402cf4:	f1a9 0902 	sub.w	r9, r9, #2
  402cf8:	441e      	add	r6, r3
  402cfa:	1bf6      	subs	r6, r6, r7
  402cfc:	b2a0      	uxth	r0, r4
  402cfe:	fbb6 f4fc 	udiv	r4, r6, ip
  402d02:	fb0c 6614 	mls	r6, ip, r4, r6
  402d06:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  402d0a:	fb04 f808 	mul.w	r8, r4, r8
  402d0e:	45b8      	cmp	r8, r7
  402d10:	d907      	bls.n	402d22 <__udivmoddi4+0x26a>
  402d12:	18ff      	adds	r7, r7, r3
  402d14:	f104 30ff 	add.w	r0, r4, #4294967295
  402d18:	d228      	bcs.n	402d6c <__udivmoddi4+0x2b4>
  402d1a:	45b8      	cmp	r8, r7
  402d1c:	d926      	bls.n	402d6c <__udivmoddi4+0x2b4>
  402d1e:	3c02      	subs	r4, #2
  402d20:	441f      	add	r7, r3
  402d22:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402d26:	ebc8 0707 	rsb	r7, r8, r7
  402d2a:	fba0 8902 	umull	r8, r9, r0, r2
  402d2e:	454f      	cmp	r7, r9
  402d30:	4644      	mov	r4, r8
  402d32:	464e      	mov	r6, r9
  402d34:	d314      	bcc.n	402d60 <__udivmoddi4+0x2a8>
  402d36:	d029      	beq.n	402d8c <__udivmoddi4+0x2d4>
  402d38:	b365      	cbz	r5, 402d94 <__udivmoddi4+0x2dc>
  402d3a:	ebba 0304 	subs.w	r3, sl, r4
  402d3e:	eb67 0706 	sbc.w	r7, r7, r6
  402d42:	fa07 fe0e 	lsl.w	lr, r7, lr
  402d46:	40cb      	lsrs	r3, r1
  402d48:	40cf      	lsrs	r7, r1
  402d4a:	ea4e 0303 	orr.w	r3, lr, r3
  402d4e:	e885 0088 	stmia.w	r5, {r3, r7}
  402d52:	2100      	movs	r1, #0
  402d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d58:	4613      	mov	r3, r2
  402d5a:	e6f8      	b.n	402b4e <__udivmoddi4+0x96>
  402d5c:	4610      	mov	r0, r2
  402d5e:	e6e0      	b.n	402b22 <__udivmoddi4+0x6a>
  402d60:	ebb8 0402 	subs.w	r4, r8, r2
  402d64:	eb69 0603 	sbc.w	r6, r9, r3
  402d68:	3801      	subs	r0, #1
  402d6a:	e7e5      	b.n	402d38 <__udivmoddi4+0x280>
  402d6c:	4604      	mov	r4, r0
  402d6e:	e7d8      	b.n	402d22 <__udivmoddi4+0x26a>
  402d70:	4611      	mov	r1, r2
  402d72:	e795      	b.n	402ca0 <__udivmoddi4+0x1e8>
  402d74:	4681      	mov	r9, r0
  402d76:	e7c0      	b.n	402cfa <__udivmoddi4+0x242>
  402d78:	468a      	mov	sl, r1
  402d7a:	e77c      	b.n	402c76 <__udivmoddi4+0x1be>
  402d7c:	3b02      	subs	r3, #2
  402d7e:	443c      	add	r4, r7
  402d80:	e748      	b.n	402c14 <__udivmoddi4+0x15c>
  402d82:	4608      	mov	r0, r1
  402d84:	e70a      	b.n	402b9c <__udivmoddi4+0xe4>
  402d86:	3802      	subs	r0, #2
  402d88:	443e      	add	r6, r7
  402d8a:	e72f      	b.n	402bec <__udivmoddi4+0x134>
  402d8c:	45c2      	cmp	sl, r8
  402d8e:	d3e7      	bcc.n	402d60 <__udivmoddi4+0x2a8>
  402d90:	463e      	mov	r6, r7
  402d92:	e7d1      	b.n	402d38 <__udivmoddi4+0x280>
  402d94:	4629      	mov	r1, r5
  402d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d9a:	bf00      	nop

00402d9c <__aeabi_idiv0>:
  402d9c:	4770      	bx	lr
  402d9e:	bf00      	nop

00402da0 <__libc_init_array>:
  402da0:	b570      	push	{r4, r5, r6, lr}
  402da2:	4e0f      	ldr	r6, [pc, #60]	; (402de0 <__libc_init_array+0x40>)
  402da4:	4d0f      	ldr	r5, [pc, #60]	; (402de4 <__libc_init_array+0x44>)
  402da6:	1b76      	subs	r6, r6, r5
  402da8:	10b6      	asrs	r6, r6, #2
  402daa:	bf18      	it	ne
  402dac:	2400      	movne	r4, #0
  402dae:	d005      	beq.n	402dbc <__libc_init_array+0x1c>
  402db0:	3401      	adds	r4, #1
  402db2:	f855 3b04 	ldr.w	r3, [r5], #4
  402db6:	4798      	blx	r3
  402db8:	42a6      	cmp	r6, r4
  402dba:	d1f9      	bne.n	402db0 <__libc_init_array+0x10>
  402dbc:	4e0a      	ldr	r6, [pc, #40]	; (402de8 <__libc_init_array+0x48>)
  402dbe:	4d0b      	ldr	r5, [pc, #44]	; (402dec <__libc_init_array+0x4c>)
  402dc0:	1b76      	subs	r6, r6, r5
  402dc2:	f005 f937 	bl	408034 <_init>
  402dc6:	10b6      	asrs	r6, r6, #2
  402dc8:	bf18      	it	ne
  402dca:	2400      	movne	r4, #0
  402dcc:	d006      	beq.n	402ddc <__libc_init_array+0x3c>
  402dce:	3401      	adds	r4, #1
  402dd0:	f855 3b04 	ldr.w	r3, [r5], #4
  402dd4:	4798      	blx	r3
  402dd6:	42a6      	cmp	r6, r4
  402dd8:	d1f9      	bne.n	402dce <__libc_init_array+0x2e>
  402dda:	bd70      	pop	{r4, r5, r6, pc}
  402ddc:	bd70      	pop	{r4, r5, r6, pc}
  402dde:	bf00      	nop
  402de0:	00408040 	.word	0x00408040
  402de4:	00408040 	.word	0x00408040
  402de8:	00408048 	.word	0x00408048
  402dec:	00408040 	.word	0x00408040

00402df0 <memset>:
  402df0:	b470      	push	{r4, r5, r6}
  402df2:	0784      	lsls	r4, r0, #30
  402df4:	d046      	beq.n	402e84 <memset+0x94>
  402df6:	1e54      	subs	r4, r2, #1
  402df8:	2a00      	cmp	r2, #0
  402dfa:	d041      	beq.n	402e80 <memset+0x90>
  402dfc:	b2cd      	uxtb	r5, r1
  402dfe:	4603      	mov	r3, r0
  402e00:	e002      	b.n	402e08 <memset+0x18>
  402e02:	1e62      	subs	r2, r4, #1
  402e04:	b3e4      	cbz	r4, 402e80 <memset+0x90>
  402e06:	4614      	mov	r4, r2
  402e08:	f803 5b01 	strb.w	r5, [r3], #1
  402e0c:	079a      	lsls	r2, r3, #30
  402e0e:	d1f8      	bne.n	402e02 <memset+0x12>
  402e10:	2c03      	cmp	r4, #3
  402e12:	d92e      	bls.n	402e72 <memset+0x82>
  402e14:	b2cd      	uxtb	r5, r1
  402e16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402e1a:	2c0f      	cmp	r4, #15
  402e1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402e20:	d919      	bls.n	402e56 <memset+0x66>
  402e22:	f103 0210 	add.w	r2, r3, #16
  402e26:	4626      	mov	r6, r4
  402e28:	3e10      	subs	r6, #16
  402e2a:	2e0f      	cmp	r6, #15
  402e2c:	f842 5c10 	str.w	r5, [r2, #-16]
  402e30:	f842 5c0c 	str.w	r5, [r2, #-12]
  402e34:	f842 5c08 	str.w	r5, [r2, #-8]
  402e38:	f842 5c04 	str.w	r5, [r2, #-4]
  402e3c:	f102 0210 	add.w	r2, r2, #16
  402e40:	d8f2      	bhi.n	402e28 <memset+0x38>
  402e42:	f1a4 0210 	sub.w	r2, r4, #16
  402e46:	f022 020f 	bic.w	r2, r2, #15
  402e4a:	f004 040f 	and.w	r4, r4, #15
  402e4e:	3210      	adds	r2, #16
  402e50:	2c03      	cmp	r4, #3
  402e52:	4413      	add	r3, r2
  402e54:	d90d      	bls.n	402e72 <memset+0x82>
  402e56:	461e      	mov	r6, r3
  402e58:	4622      	mov	r2, r4
  402e5a:	3a04      	subs	r2, #4
  402e5c:	2a03      	cmp	r2, #3
  402e5e:	f846 5b04 	str.w	r5, [r6], #4
  402e62:	d8fa      	bhi.n	402e5a <memset+0x6a>
  402e64:	1f22      	subs	r2, r4, #4
  402e66:	f022 0203 	bic.w	r2, r2, #3
  402e6a:	3204      	adds	r2, #4
  402e6c:	4413      	add	r3, r2
  402e6e:	f004 0403 	and.w	r4, r4, #3
  402e72:	b12c      	cbz	r4, 402e80 <memset+0x90>
  402e74:	b2c9      	uxtb	r1, r1
  402e76:	441c      	add	r4, r3
  402e78:	f803 1b01 	strb.w	r1, [r3], #1
  402e7c:	42a3      	cmp	r3, r4
  402e7e:	d1fb      	bne.n	402e78 <memset+0x88>
  402e80:	bc70      	pop	{r4, r5, r6}
  402e82:	4770      	bx	lr
  402e84:	4614      	mov	r4, r2
  402e86:	4603      	mov	r3, r0
  402e88:	e7c2      	b.n	402e10 <memset+0x20>
  402e8a:	bf00      	nop

00402e8c <sprintf>:
  402e8c:	b40e      	push	{r1, r2, r3}
  402e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e90:	b09c      	sub	sp, #112	; 0x70
  402e92:	ab21      	add	r3, sp, #132	; 0x84
  402e94:	490f      	ldr	r1, [pc, #60]	; (402ed4 <sprintf+0x48>)
  402e96:	f853 2b04 	ldr.w	r2, [r3], #4
  402e9a:	9301      	str	r3, [sp, #4]
  402e9c:	4605      	mov	r5, r0
  402e9e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402ea2:	6808      	ldr	r0, [r1, #0]
  402ea4:	9502      	str	r5, [sp, #8]
  402ea6:	f44f 7702 	mov.w	r7, #520	; 0x208
  402eaa:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402eae:	a902      	add	r1, sp, #8
  402eb0:	9506      	str	r5, [sp, #24]
  402eb2:	f8ad 7014 	strh.w	r7, [sp, #20]
  402eb6:	9404      	str	r4, [sp, #16]
  402eb8:	9407      	str	r4, [sp, #28]
  402eba:	f8ad 6016 	strh.w	r6, [sp, #22]
  402ebe:	f000 faf9 	bl	4034b4 <_svfprintf_r>
  402ec2:	9b02      	ldr	r3, [sp, #8]
  402ec4:	2200      	movs	r2, #0
  402ec6:	701a      	strb	r2, [r3, #0]
  402ec8:	b01c      	add	sp, #112	; 0x70
  402eca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402ece:	b003      	add	sp, #12
  402ed0:	4770      	bx	lr
  402ed2:	bf00      	nop
  402ed4:	20000438 	.word	0x20000438
	...

00402f00 <strlen>:
  402f00:	f890 f000 	pld	[r0]
  402f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402f08:	f020 0107 	bic.w	r1, r0, #7
  402f0c:	f06f 0c00 	mvn.w	ip, #0
  402f10:	f010 0407 	ands.w	r4, r0, #7
  402f14:	f891 f020 	pld	[r1, #32]
  402f18:	f040 8049 	bne.w	402fae <strlen+0xae>
  402f1c:	f04f 0400 	mov.w	r4, #0
  402f20:	f06f 0007 	mvn.w	r0, #7
  402f24:	e9d1 2300 	ldrd	r2, r3, [r1]
  402f28:	f891 f040 	pld	[r1, #64]	; 0x40
  402f2c:	f100 0008 	add.w	r0, r0, #8
  402f30:	fa82 f24c 	uadd8	r2, r2, ip
  402f34:	faa4 f28c 	sel	r2, r4, ip
  402f38:	fa83 f34c 	uadd8	r3, r3, ip
  402f3c:	faa2 f38c 	sel	r3, r2, ip
  402f40:	bb4b      	cbnz	r3, 402f96 <strlen+0x96>
  402f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402f46:	fa82 f24c 	uadd8	r2, r2, ip
  402f4a:	f100 0008 	add.w	r0, r0, #8
  402f4e:	faa4 f28c 	sel	r2, r4, ip
  402f52:	fa83 f34c 	uadd8	r3, r3, ip
  402f56:	faa2 f38c 	sel	r3, r2, ip
  402f5a:	b9e3      	cbnz	r3, 402f96 <strlen+0x96>
  402f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  402f60:	fa82 f24c 	uadd8	r2, r2, ip
  402f64:	f100 0008 	add.w	r0, r0, #8
  402f68:	faa4 f28c 	sel	r2, r4, ip
  402f6c:	fa83 f34c 	uadd8	r3, r3, ip
  402f70:	faa2 f38c 	sel	r3, r2, ip
  402f74:	b97b      	cbnz	r3, 402f96 <strlen+0x96>
  402f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  402f7a:	f101 0120 	add.w	r1, r1, #32
  402f7e:	fa82 f24c 	uadd8	r2, r2, ip
  402f82:	f100 0008 	add.w	r0, r0, #8
  402f86:	faa4 f28c 	sel	r2, r4, ip
  402f8a:	fa83 f34c 	uadd8	r3, r3, ip
  402f8e:	faa2 f38c 	sel	r3, r2, ip
  402f92:	2b00      	cmp	r3, #0
  402f94:	d0c6      	beq.n	402f24 <strlen+0x24>
  402f96:	2a00      	cmp	r2, #0
  402f98:	bf04      	itt	eq
  402f9a:	3004      	addeq	r0, #4
  402f9c:	461a      	moveq	r2, r3
  402f9e:	ba12      	rev	r2, r2
  402fa0:	fab2 f282 	clz	r2, r2
  402fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  402fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  402fac:	4770      	bx	lr
  402fae:	e9d1 2300 	ldrd	r2, r3, [r1]
  402fb2:	f004 0503 	and.w	r5, r4, #3
  402fb6:	f1c4 0000 	rsb	r0, r4, #0
  402fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  402fbe:	f014 0f04 	tst.w	r4, #4
  402fc2:	f891 f040 	pld	[r1, #64]	; 0x40
  402fc6:	fa0c f505 	lsl.w	r5, ip, r5
  402fca:	ea62 0205 	orn	r2, r2, r5
  402fce:	bf1c      	itt	ne
  402fd0:	ea63 0305 	ornne	r3, r3, r5
  402fd4:	4662      	movne	r2, ip
  402fd6:	f04f 0400 	mov.w	r4, #0
  402fda:	e7a9      	b.n	402f30 <strlen+0x30>

00402fdc <critical_factorization>:
  402fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fe0:	f04f 0e01 	mov.w	lr, #1
  402fe4:	4674      	mov	r4, lr
  402fe6:	2500      	movs	r5, #0
  402fe8:	f04f 36ff 	mov.w	r6, #4294967295
  402fec:	192b      	adds	r3, r5, r4
  402fee:	428b      	cmp	r3, r1
  402ff0:	eb00 0706 	add.w	r7, r0, r6
  402ff4:	d20d      	bcs.n	403012 <critical_factorization+0x36>
  402ff6:	5d3f      	ldrb	r7, [r7, r4]
  402ff8:	f810 c003 	ldrb.w	ip, [r0, r3]
  402ffc:	45bc      	cmp	ip, r7
  402ffe:	d22d      	bcs.n	40305c <critical_factorization+0x80>
  403000:	461d      	mov	r5, r3
  403002:	2401      	movs	r4, #1
  403004:	ebc6 0e03 	rsb	lr, r6, r3
  403008:	192b      	adds	r3, r5, r4
  40300a:	428b      	cmp	r3, r1
  40300c:	eb00 0706 	add.w	r7, r0, r6
  403010:	d3f1      	bcc.n	402ff6 <critical_factorization+0x1a>
  403012:	f04f 0801 	mov.w	r8, #1
  403016:	f8c2 e000 	str.w	lr, [r2]
  40301a:	4644      	mov	r4, r8
  40301c:	2500      	movs	r5, #0
  40301e:	f04f 37ff 	mov.w	r7, #4294967295
  403022:	192b      	adds	r3, r5, r4
  403024:	4299      	cmp	r1, r3
  403026:	eb00 0e07 	add.w	lr, r0, r7
  40302a:	d90e      	bls.n	40304a <critical_factorization+0x6e>
  40302c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403030:	f810 c003 	ldrb.w	ip, [r0, r3]
  403034:	45f4      	cmp	ip, lr
  403036:	d918      	bls.n	40306a <critical_factorization+0x8e>
  403038:	461d      	mov	r5, r3
  40303a:	2401      	movs	r4, #1
  40303c:	ebc7 0803 	rsb	r8, r7, r3
  403040:	192b      	adds	r3, r5, r4
  403042:	4299      	cmp	r1, r3
  403044:	eb00 0e07 	add.w	lr, r0, r7
  403048:	d8f0      	bhi.n	40302c <critical_factorization+0x50>
  40304a:	3701      	adds	r7, #1
  40304c:	1c70      	adds	r0, r6, #1
  40304e:	4287      	cmp	r7, r0
  403050:	bf24      	itt	cs
  403052:	f8c2 8000 	strcs.w	r8, [r2]
  403056:	4638      	movcs	r0, r7
  403058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40305c:	d00c      	beq.n	403078 <critical_factorization+0x9c>
  40305e:	f04f 0e01 	mov.w	lr, #1
  403062:	462e      	mov	r6, r5
  403064:	4674      	mov	r4, lr
  403066:	4475      	add	r5, lr
  403068:	e7c0      	b.n	402fec <critical_factorization+0x10>
  40306a:	d00c      	beq.n	403086 <critical_factorization+0xaa>
  40306c:	f04f 0801 	mov.w	r8, #1
  403070:	462f      	mov	r7, r5
  403072:	4644      	mov	r4, r8
  403074:	4445      	add	r5, r8
  403076:	e7d4      	b.n	403022 <critical_factorization+0x46>
  403078:	4574      	cmp	r4, lr
  40307a:	bf09      	itett	eq
  40307c:	46a6      	moveq	lr, r4
  40307e:	3401      	addne	r4, #1
  403080:	461d      	moveq	r5, r3
  403082:	2401      	moveq	r4, #1
  403084:	e7b2      	b.n	402fec <critical_factorization+0x10>
  403086:	4544      	cmp	r4, r8
  403088:	bf09      	itett	eq
  40308a:	46a0      	moveq	r8, r4
  40308c:	3401      	addne	r4, #1
  40308e:	461d      	moveq	r5, r3
  403090:	2401      	moveq	r4, #1
  403092:	e7c6      	b.n	403022 <critical_factorization+0x46>

00403094 <two_way_long_needle>:
  403094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403098:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40309c:	4616      	mov	r6, r2
  40309e:	4605      	mov	r5, r0
  4030a0:	468b      	mov	fp, r1
  4030a2:	4610      	mov	r0, r2
  4030a4:	4619      	mov	r1, r3
  4030a6:	aa03      	add	r2, sp, #12
  4030a8:	461c      	mov	r4, r3
  4030aa:	f7ff ff97 	bl	402fdc <critical_factorization>
  4030ae:	ab03      	add	r3, sp, #12
  4030b0:	4681      	mov	r9, r0
  4030b2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4030b6:	f843 4f04 	str.w	r4, [r3, #4]!
  4030ba:	4293      	cmp	r3, r2
  4030bc:	d1fb      	bne.n	4030b6 <two_way_long_needle+0x22>
  4030be:	b14c      	cbz	r4, 4030d4 <two_way_long_needle+0x40>
  4030c0:	1e63      	subs	r3, r4, #1
  4030c2:	4632      	mov	r2, r6
  4030c4:	a804      	add	r0, sp, #16
  4030c6:	f812 1b01 	ldrb.w	r1, [r2], #1
  4030ca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4030ce:	f113 33ff 	adds.w	r3, r3, #4294967295
  4030d2:	d2f8      	bcs.n	4030c6 <two_way_long_needle+0x32>
  4030d4:	9903      	ldr	r1, [sp, #12]
  4030d6:	464a      	mov	r2, r9
  4030d8:	4431      	add	r1, r6
  4030da:	4630      	mov	r0, r6
  4030dc:	f003 f960 	bl	4063a0 <memcmp>
  4030e0:	2800      	cmp	r0, #0
  4030e2:	d171      	bne.n	4031c8 <two_way_long_needle+0x134>
  4030e4:	f109 33ff 	add.w	r3, r9, #4294967295
  4030e8:	9300      	str	r3, [sp, #0]
  4030ea:	18f3      	adds	r3, r6, r3
  4030ec:	4682      	mov	sl, r0
  4030ee:	9301      	str	r3, [sp, #4]
  4030f0:	4623      	mov	r3, r4
  4030f2:	4680      	mov	r8, r0
  4030f4:	4654      	mov	r4, sl
  4030f6:	4658      	mov	r0, fp
  4030f8:	469a      	mov	sl, r3
  4030fa:	eb08 070a 	add.w	r7, r8, sl
  4030fe:	1a3a      	subs	r2, r7, r0
  403100:	2100      	movs	r1, #0
  403102:	4428      	add	r0, r5
  403104:	f003 f8fc 	bl	406300 <memchr>
  403108:	2800      	cmp	r0, #0
  40310a:	d158      	bne.n	4031be <two_way_long_needle+0x12a>
  40310c:	2f00      	cmp	r7, #0
  40310e:	d056      	beq.n	4031be <two_way_long_needle+0x12a>
  403110:	19eb      	adds	r3, r5, r7
  403112:	aa04      	add	r2, sp, #16
  403114:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40311c:	b14b      	cbz	r3, 403132 <two_way_long_needle+0x9e>
  40311e:	b124      	cbz	r4, 40312a <two_way_long_needle+0x96>
  403120:	9a03      	ldr	r2, [sp, #12]
  403122:	4293      	cmp	r3, r2
  403124:	d201      	bcs.n	40312a <two_way_long_needle+0x96>
  403126:	ebc2 030a 	rsb	r3, r2, sl
  40312a:	4498      	add	r8, r3
  40312c:	2400      	movs	r4, #0
  40312e:	4638      	mov	r0, r7
  403130:	e7e3      	b.n	4030fa <two_way_long_needle+0x66>
  403132:	454c      	cmp	r4, r9
  403134:	4623      	mov	r3, r4
  403136:	f10a 3eff 	add.w	lr, sl, #4294967295
  40313a:	bf38      	it	cc
  40313c:	464b      	movcc	r3, r9
  40313e:	4573      	cmp	r3, lr
  403140:	d213      	bcs.n	40316a <two_way_long_needle+0xd6>
  403142:	eb08 0203 	add.w	r2, r8, r3
  403146:	f816 c003 	ldrb.w	ip, [r6, r3]
  40314a:	5ca8      	ldrb	r0, [r5, r2]
  40314c:	4584      	cmp	ip, r0
  40314e:	442a      	add	r2, r5
  403150:	eb06 0103 	add.w	r1, r6, r3
  403154:	d006      	beq.n	403164 <two_way_long_needle+0xd0>
  403156:	e02e      	b.n	4031b6 <two_way_long_needle+0x122>
  403158:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40315c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403160:	4584      	cmp	ip, r0
  403162:	d128      	bne.n	4031b6 <two_way_long_needle+0x122>
  403164:	3301      	adds	r3, #1
  403166:	4573      	cmp	r3, lr
  403168:	d3f6      	bcc.n	403158 <two_way_long_needle+0xc4>
  40316a:	454c      	cmp	r4, r9
  40316c:	9900      	ldr	r1, [sp, #0]
  40316e:	f080 808b 	bcs.w	403288 <two_way_long_needle+0x1f4>
  403172:	9b00      	ldr	r3, [sp, #0]
  403174:	9801      	ldr	r0, [sp, #4]
  403176:	eb08 0203 	add.w	r2, r8, r3
  40317a:	7803      	ldrb	r3, [r0, #0]
  40317c:	5ca8      	ldrb	r0, [r5, r2]
  40317e:	4283      	cmp	r3, r0
  403180:	442a      	add	r2, r5
  403182:	f040 8081 	bne.w	403288 <two_way_long_needle+0x1f4>
  403186:	9b01      	ldr	r3, [sp, #4]
  403188:	eb06 0b04 	add.w	fp, r6, r4
  40318c:	e006      	b.n	40319c <two_way_long_needle+0x108>
  40318e:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  403192:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  403196:	4586      	cmp	lr, r0
  403198:	d104      	bne.n	4031a4 <two_way_long_needle+0x110>
  40319a:	4661      	mov	r1, ip
  40319c:	459b      	cmp	fp, r3
  40319e:	f101 3cff 	add.w	ip, r1, #4294967295
  4031a2:	d1f4      	bne.n	40318e <two_way_long_needle+0xfa>
  4031a4:	3401      	adds	r4, #1
  4031a6:	428c      	cmp	r4, r1
  4031a8:	d870      	bhi.n	40328c <two_way_long_needle+0x1f8>
  4031aa:	9c03      	ldr	r4, [sp, #12]
  4031ac:	4638      	mov	r0, r7
  4031ae:	44a0      	add	r8, r4
  4031b0:	ebc4 040a 	rsb	r4, r4, sl
  4031b4:	e7a1      	b.n	4030fa <two_way_long_needle+0x66>
  4031b6:	f1c9 0201 	rsb	r2, r9, #1
  4031ba:	4490      	add	r8, r2
  4031bc:	e7b5      	b.n	40312a <two_way_long_needle+0x96>
  4031be:	2000      	movs	r0, #0
  4031c0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4031c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031c8:	ebc9 0304 	rsb	r3, r9, r4
  4031cc:	454b      	cmp	r3, r9
  4031ce:	bf38      	it	cc
  4031d0:	464b      	movcc	r3, r9
  4031d2:	3301      	adds	r3, #1
  4031d4:	f109 38ff 	add.w	r8, r9, #4294967295
  4031d8:	9303      	str	r3, [sp, #12]
  4031da:	eb06 0308 	add.w	r3, r6, r8
  4031de:	4658      	mov	r0, fp
  4031e0:	f04f 0a00 	mov.w	sl, #0
  4031e4:	46cb      	mov	fp, r9
  4031e6:	4699      	mov	r9, r3
  4031e8:	eb0a 0704 	add.w	r7, sl, r4
  4031ec:	1a3a      	subs	r2, r7, r0
  4031ee:	2100      	movs	r1, #0
  4031f0:	4428      	add	r0, r5
  4031f2:	f003 f885 	bl	406300 <memchr>
  4031f6:	2800      	cmp	r0, #0
  4031f8:	d1e1      	bne.n	4031be <two_way_long_needle+0x12a>
  4031fa:	2f00      	cmp	r7, #0
  4031fc:	d0df      	beq.n	4031be <two_way_long_needle+0x12a>
  4031fe:	19eb      	adds	r3, r5, r7
  403200:	aa04      	add	r2, sp, #16
  403202:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40320a:	bba3      	cbnz	r3, 403276 <two_way_long_needle+0x1e2>
  40320c:	1e61      	subs	r1, r4, #1
  40320e:	458b      	cmp	fp, r1
  403210:	d215      	bcs.n	40323e <two_way_long_needle+0x1aa>
  403212:	eb0a 020b 	add.w	r2, sl, fp
  403216:	f816 300b 	ldrb.w	r3, [r6, fp]
  40321a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40321e:	459e      	cmp	lr, r3
  403220:	442a      	add	r2, r5
  403222:	eb06 000b 	add.w	r0, r6, fp
  403226:	465b      	mov	r3, fp
  403228:	d006      	beq.n	403238 <two_way_long_needle+0x1a4>
  40322a:	e027      	b.n	40327c <two_way_long_needle+0x1e8>
  40322c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403230:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403234:	45f4      	cmp	ip, lr
  403236:	d121      	bne.n	40327c <two_way_long_needle+0x1e8>
  403238:	3301      	adds	r3, #1
  40323a:	428b      	cmp	r3, r1
  40323c:	d3f6      	bcc.n	40322c <two_way_long_needle+0x198>
  40323e:	f1b8 3fff 	cmp.w	r8, #4294967295
  403242:	d011      	beq.n	403268 <two_way_long_needle+0x1d4>
  403244:	eb0a 0208 	add.w	r2, sl, r8
  403248:	f899 1000 	ldrb.w	r1, [r9]
  40324c:	5cab      	ldrb	r3, [r5, r2]
  40324e:	4299      	cmp	r1, r3
  403250:	442a      	add	r2, r5
  403252:	d10f      	bne.n	403274 <two_way_long_needle+0x1e0>
  403254:	464b      	mov	r3, r9
  403256:	e005      	b.n	403264 <two_way_long_needle+0x1d0>
  403258:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40325c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403260:	4288      	cmp	r0, r1
  403262:	d107      	bne.n	403274 <two_way_long_needle+0x1e0>
  403264:	42b3      	cmp	r3, r6
  403266:	d1f7      	bne.n	403258 <two_way_long_needle+0x1c4>
  403268:	eb05 000a 	add.w	r0, r5, sl
  40326c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403274:	9b03      	ldr	r3, [sp, #12]
  403276:	449a      	add	sl, r3
  403278:	4638      	mov	r0, r7
  40327a:	e7b5      	b.n	4031e8 <two_way_long_needle+0x154>
  40327c:	f1cb 0201 	rsb	r2, fp, #1
  403280:	4492      	add	sl, r2
  403282:	449a      	add	sl, r3
  403284:	4638      	mov	r0, r7
  403286:	e7af      	b.n	4031e8 <two_way_long_needle+0x154>
  403288:	4649      	mov	r1, r9
  40328a:	e78b      	b.n	4031a4 <two_way_long_needle+0x110>
  40328c:	eb05 0008 	add.w	r0, r5, r8
  403290:	e796      	b.n	4031c0 <two_way_long_needle+0x12c>
  403292:	bf00      	nop

00403294 <strstr>:
  403294:	7803      	ldrb	r3, [r0, #0]
  403296:	2b00      	cmp	r3, #0
  403298:	f000 8104 	beq.w	4034a4 <strstr+0x210>
  40329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a0:	f891 8000 	ldrb.w	r8, [r1]
  4032a4:	b085      	sub	sp, #20
  4032a6:	4644      	mov	r4, r8
  4032a8:	f1b8 0f00 	cmp.w	r8, #0
  4032ac:	d016      	beq.n	4032dc <strstr+0x48>
  4032ae:	4686      	mov	lr, r0
  4032b0:	f101 0c01 	add.w	ip, r1, #1
  4032b4:	2701      	movs	r7, #1
  4032b6:	e003      	b.n	4032c0 <strstr+0x2c>
  4032b8:	f812 4b01 	ldrb.w	r4, [r2], #1
  4032bc:	b16c      	cbz	r4, 4032da <strstr+0x46>
  4032be:	4694      	mov	ip, r2
  4032c0:	429c      	cmp	r4, r3
  4032c2:	bf14      	ite	ne
  4032c4:	2700      	movne	r7, #0
  4032c6:	f007 0701 	andeq.w	r7, r7, #1
  4032ca:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  4032ce:	4662      	mov	r2, ip
  4032d0:	2b00      	cmp	r3, #0
  4032d2:	d1f1      	bne.n	4032b8 <strstr+0x24>
  4032d4:	f89c 3000 	ldrb.w	r3, [ip]
  4032d8:	bb0b      	cbnz	r3, 40331e <strstr+0x8a>
  4032da:	b117      	cbz	r7, 4032e2 <strstr+0x4e>
  4032dc:	b005      	add	sp, #20
  4032de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032e2:	460e      	mov	r6, r1
  4032e4:	4605      	mov	r5, r0
  4032e6:	4641      	mov	r1, r8
  4032e8:	3001      	adds	r0, #1
  4032ea:	ebc6 040c 	rsb	r4, r6, ip
  4032ee:	f003 fe9b 	bl	407028 <strchr>
  4032f2:	4607      	mov	r7, r0
  4032f4:	b198      	cbz	r0, 40331e <strstr+0x8a>
  4032f6:	2c01      	cmp	r4, #1
  4032f8:	d0f0      	beq.n	4032dc <strstr+0x48>
  4032fa:	1928      	adds	r0, r5, r4
  4032fc:	4287      	cmp	r7, r0
  4032fe:	bf94      	ite	ls
  403300:	ebc7 0b00 	rsbls	fp, r7, r0
  403304:	f04f 0b01 	movhi.w	fp, #1
  403308:	2c1f      	cmp	r4, #31
  40330a:	d90c      	bls.n	403326 <strstr+0x92>
  40330c:	4623      	mov	r3, r4
  40330e:	4632      	mov	r2, r6
  403310:	4659      	mov	r1, fp
  403312:	4638      	mov	r0, r7
  403314:	f7ff febe 	bl	403094 <two_way_long_needle>
  403318:	b005      	add	sp, #20
  40331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40331e:	2000      	movs	r0, #0
  403320:	b005      	add	sp, #20
  403322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403326:	aa03      	add	r2, sp, #12
  403328:	4621      	mov	r1, r4
  40332a:	4630      	mov	r0, r6
  40332c:	f7ff fe56 	bl	402fdc <critical_factorization>
  403330:	9903      	ldr	r1, [sp, #12]
  403332:	4680      	mov	r8, r0
  403334:	4602      	mov	r2, r0
  403336:	4431      	add	r1, r6
  403338:	4630      	mov	r0, r6
  40333a:	f003 f831 	bl	4063a0 <memcmp>
  40333e:	2800      	cmp	r0, #0
  403340:	d158      	bne.n	4033f4 <strstr+0x160>
  403342:	f108 33ff 	add.w	r3, r8, #4294967295
  403346:	9301      	str	r3, [sp, #4]
  403348:	18f3      	adds	r3, r6, r3
  40334a:	4681      	mov	r9, r0
  40334c:	4605      	mov	r5, r0
  40334e:	9300      	str	r3, [sp, #0]
  403350:	4658      	mov	r0, fp
  403352:	46b2      	mov	sl, r6
  403354:	1966      	adds	r6, r4, r5
  403356:	1a32      	subs	r2, r6, r0
  403358:	2100      	movs	r1, #0
  40335a:	4438      	add	r0, r7
  40335c:	f002 ffd0 	bl	406300 <memchr>
  403360:	2800      	cmp	r0, #0
  403362:	d1dc      	bne.n	40331e <strstr+0x8a>
  403364:	2e00      	cmp	r6, #0
  403366:	d0da      	beq.n	40331e <strstr+0x8a>
  403368:	45c8      	cmp	r8, r9
  40336a:	4643      	mov	r3, r8
  40336c:	bf38      	it	cc
  40336e:	464b      	movcc	r3, r9
  403370:	429c      	cmp	r4, r3
  403372:	d912      	bls.n	40339a <strstr+0x106>
  403374:	195a      	adds	r2, r3, r5
  403376:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40337a:	5cb8      	ldrb	r0, [r7, r2]
  40337c:	4288      	cmp	r0, r1
  40337e:	443a      	add	r2, r7
  403380:	eb0a 0e03 	add.w	lr, sl, r3
  403384:	d006      	beq.n	403394 <strstr+0x100>
  403386:	e02d      	b.n	4033e4 <strstr+0x150>
  403388:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40338c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403390:	4288      	cmp	r0, r1
  403392:	d127      	bne.n	4033e4 <strstr+0x150>
  403394:	3301      	adds	r3, #1
  403396:	429c      	cmp	r4, r3
  403398:	d8f6      	bhi.n	403388 <strstr+0xf4>
  40339a:	9b01      	ldr	r3, [sp, #4]
  40339c:	45c8      	cmp	r8, r9
  40339e:	4619      	mov	r1, r3
  4033a0:	f240 8083 	bls.w	4034aa <strstr+0x216>
  4033a4:	18ea      	adds	r2, r5, r3
  4033a6:	9800      	ldr	r0, [sp, #0]
  4033a8:	7803      	ldrb	r3, [r0, #0]
  4033aa:	5cb8      	ldrb	r0, [r7, r2]
  4033ac:	4283      	cmp	r3, r0
  4033ae:	443a      	add	r2, r7
  4033b0:	d17b      	bne.n	4034aa <strstr+0x216>
  4033b2:	9b00      	ldr	r3, [sp, #0]
  4033b4:	eb0a 0b09 	add.w	fp, sl, r9
  4033b8:	e006      	b.n	4033c8 <strstr+0x134>
  4033ba:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  4033be:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4033c2:	45f4      	cmp	ip, lr
  4033c4:	d104      	bne.n	4033d0 <strstr+0x13c>
  4033c6:	4601      	mov	r1, r0
  4033c8:	455b      	cmp	r3, fp
  4033ca:	f101 30ff 	add.w	r0, r1, #4294967295
  4033ce:	d1f4      	bne.n	4033ba <strstr+0x126>
  4033d0:	f109 0901 	add.w	r9, r9, #1
  4033d4:	4589      	cmp	r9, r1
  4033d6:	d857      	bhi.n	403488 <strstr+0x1f4>
  4033d8:	9b03      	ldr	r3, [sp, #12]
  4033da:	4630      	mov	r0, r6
  4033dc:	441d      	add	r5, r3
  4033de:	ebc3 0904 	rsb	r9, r3, r4
  4033e2:	e7b7      	b.n	403354 <strstr+0xc0>
  4033e4:	f1c8 0201 	rsb	r2, r8, #1
  4033e8:	4415      	add	r5, r2
  4033ea:	441d      	add	r5, r3
  4033ec:	f04f 0900 	mov.w	r9, #0
  4033f0:	4630      	mov	r0, r6
  4033f2:	e7af      	b.n	403354 <strstr+0xc0>
  4033f4:	ebc8 0304 	rsb	r3, r8, r4
  4033f8:	4543      	cmp	r3, r8
  4033fa:	bf38      	it	cc
  4033fc:	4643      	movcc	r3, r8
  4033fe:	3301      	adds	r3, #1
  403400:	f108 39ff 	add.w	r9, r8, #4294967295
  403404:	9303      	str	r3, [sp, #12]
  403406:	eb06 0309 	add.w	r3, r6, r9
  40340a:	4658      	mov	r0, fp
  40340c:	2500      	movs	r5, #0
  40340e:	46bb      	mov	fp, r7
  403410:	469a      	mov	sl, r3
  403412:	1967      	adds	r7, r4, r5
  403414:	1a3a      	subs	r2, r7, r0
  403416:	2100      	movs	r1, #0
  403418:	4458      	add	r0, fp
  40341a:	f002 ff71 	bl	406300 <memchr>
  40341e:	2800      	cmp	r0, #0
  403420:	f47f af7d 	bne.w	40331e <strstr+0x8a>
  403424:	2f00      	cmp	r7, #0
  403426:	f43f af7a 	beq.w	40331e <strstr+0x8a>
  40342a:	4544      	cmp	r4, r8
  40342c:	d915      	bls.n	40345a <strstr+0x1c6>
  40342e:	eb08 0205 	add.w	r2, r8, r5
  403432:	f816 3008 	ldrb.w	r3, [r6, r8]
  403436:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40343a:	4298      	cmp	r0, r3
  40343c:	445a      	add	r2, fp
  40343e:	eb06 0108 	add.w	r1, r6, r8
  403442:	4643      	mov	r3, r8
  403444:	d006      	beq.n	403454 <strstr+0x1c0>
  403446:	e023      	b.n	403490 <strstr+0x1fc>
  403448:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40344c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403450:	4586      	cmp	lr, r0
  403452:	d11d      	bne.n	403490 <strstr+0x1fc>
  403454:	3301      	adds	r3, #1
  403456:	429c      	cmp	r4, r3
  403458:	d8f6      	bhi.n	403448 <strstr+0x1b4>
  40345a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40345e:	d012      	beq.n	403486 <strstr+0x1f2>
  403460:	eb05 0209 	add.w	r2, r5, r9
  403464:	f89a 1000 	ldrb.w	r1, [sl]
  403468:	f81b 3002 	ldrb.w	r3, [fp, r2]
  40346c:	4299      	cmp	r1, r3
  40346e:	445a      	add	r2, fp
  403470:	d114      	bne.n	40349c <strstr+0x208>
  403472:	4653      	mov	r3, sl
  403474:	e005      	b.n	403482 <strstr+0x1ee>
  403476:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40347a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40347e:	4288      	cmp	r0, r1
  403480:	d10c      	bne.n	40349c <strstr+0x208>
  403482:	42b3      	cmp	r3, r6
  403484:	d1f7      	bne.n	403476 <strstr+0x1e2>
  403486:	465f      	mov	r7, fp
  403488:	1978      	adds	r0, r7, r5
  40348a:	b005      	add	sp, #20
  40348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403490:	f1c8 0201 	rsb	r2, r8, #1
  403494:	4415      	add	r5, r2
  403496:	441d      	add	r5, r3
  403498:	4638      	mov	r0, r7
  40349a:	e7ba      	b.n	403412 <strstr+0x17e>
  40349c:	9b03      	ldr	r3, [sp, #12]
  40349e:	4638      	mov	r0, r7
  4034a0:	441d      	add	r5, r3
  4034a2:	e7b6      	b.n	403412 <strstr+0x17e>
  4034a4:	780b      	ldrb	r3, [r1, #0]
  4034a6:	b913      	cbnz	r3, 4034ae <strstr+0x21a>
  4034a8:	4770      	bx	lr
  4034aa:	4641      	mov	r1, r8
  4034ac:	e790      	b.n	4033d0 <strstr+0x13c>
  4034ae:	2000      	movs	r0, #0
  4034b0:	4770      	bx	lr
  4034b2:	bf00      	nop

004034b4 <_svfprintf_r>:
  4034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034b8:	b0c1      	sub	sp, #260	; 0x104
  4034ba:	460c      	mov	r4, r1
  4034bc:	9109      	str	r1, [sp, #36]	; 0x24
  4034be:	4615      	mov	r5, r2
  4034c0:	930e      	str	r3, [sp, #56]	; 0x38
  4034c2:	900a      	str	r0, [sp, #40]	; 0x28
  4034c4:	f002 fc5e 	bl	405d84 <_localeconv_r>
  4034c8:	6803      	ldr	r3, [r0, #0]
  4034ca:	9317      	str	r3, [sp, #92]	; 0x5c
  4034cc:	4618      	mov	r0, r3
  4034ce:	f7ff fd17 	bl	402f00 <strlen>
  4034d2:	89a3      	ldrh	r3, [r4, #12]
  4034d4:	9016      	str	r0, [sp, #88]	; 0x58
  4034d6:	061e      	lsls	r6, r3, #24
  4034d8:	d503      	bpl.n	4034e2 <_svfprintf_r+0x2e>
  4034da:	6923      	ldr	r3, [r4, #16]
  4034dc:	2b00      	cmp	r3, #0
  4034de:	f001 8119 	beq.w	404714 <_svfprintf_r+0x1260>
  4034e2:	2300      	movs	r3, #0
  4034e4:	461a      	mov	r2, r3
  4034e6:	9312      	str	r3, [sp, #72]	; 0x48
  4034e8:	9325      	str	r3, [sp, #148]	; 0x94
  4034ea:	9324      	str	r3, [sp, #144]	; 0x90
  4034ec:	9319      	str	r3, [sp, #100]	; 0x64
  4034ee:	930b      	str	r3, [sp, #44]	; 0x2c
  4034f0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 403958 <_svfprintf_r+0x4a4>
  4034f4:	9214      	str	r2, [sp, #80]	; 0x50
  4034f6:	ab30      	add	r3, sp, #192	; 0xc0
  4034f8:	9323      	str	r3, [sp, #140]	; 0x8c
  4034fa:	4699      	mov	r9, r3
  4034fc:	9215      	str	r2, [sp, #84]	; 0x54
  4034fe:	46a8      	mov	r8, r5
  403500:	f898 3000 	ldrb.w	r3, [r8]
  403504:	4644      	mov	r4, r8
  403506:	b1eb      	cbz	r3, 403544 <_svfprintf_r+0x90>
  403508:	2b25      	cmp	r3, #37	; 0x25
  40350a:	d102      	bne.n	403512 <_svfprintf_r+0x5e>
  40350c:	e01a      	b.n	403544 <_svfprintf_r+0x90>
  40350e:	2b25      	cmp	r3, #37	; 0x25
  403510:	d003      	beq.n	40351a <_svfprintf_r+0x66>
  403512:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403516:	2b00      	cmp	r3, #0
  403518:	d1f9      	bne.n	40350e <_svfprintf_r+0x5a>
  40351a:	ebc8 0504 	rsb	r5, r8, r4
  40351e:	b18d      	cbz	r5, 403544 <_svfprintf_r+0x90>
  403520:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403522:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403524:	f8c9 8000 	str.w	r8, [r9]
  403528:	3301      	adds	r3, #1
  40352a:	442a      	add	r2, r5
  40352c:	2b07      	cmp	r3, #7
  40352e:	f8c9 5004 	str.w	r5, [r9, #4]
  403532:	9225      	str	r2, [sp, #148]	; 0x94
  403534:	9324      	str	r3, [sp, #144]	; 0x90
  403536:	f300 80a6 	bgt.w	403686 <_svfprintf_r+0x1d2>
  40353a:	f109 0908 	add.w	r9, r9, #8
  40353e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403540:	442b      	add	r3, r5
  403542:	930b      	str	r3, [sp, #44]	; 0x2c
  403544:	7823      	ldrb	r3, [r4, #0]
  403546:	2b00      	cmp	r3, #0
  403548:	f000 80a6 	beq.w	403698 <_svfprintf_r+0x1e4>
  40354c:	2300      	movs	r3, #0
  40354e:	461a      	mov	r2, r3
  403550:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403554:	4619      	mov	r1, r3
  403556:	930c      	str	r3, [sp, #48]	; 0x30
  403558:	9307      	str	r3, [sp, #28]
  40355a:	f04f 3bff 	mov.w	fp, #4294967295
  40355e:	7863      	ldrb	r3, [r4, #1]
  403560:	f104 0801 	add.w	r8, r4, #1
  403564:	465d      	mov	r5, fp
  403566:	f108 0801 	add.w	r8, r8, #1
  40356a:	f1a3 0020 	sub.w	r0, r3, #32
  40356e:	2858      	cmp	r0, #88	; 0x58
  403570:	f200 8425 	bhi.w	403dbe <_svfprintf_r+0x90a>
  403574:	e8df f010 	tbh	[pc, r0, lsl #1]
  403578:	04230388 	.word	0x04230388
  40357c:	03900423 	.word	0x03900423
  403580:	04230423 	.word	0x04230423
  403584:	04230423 	.word	0x04230423
  403588:	04230423 	.word	0x04230423
  40358c:	03a50397 	.word	0x03a50397
  403590:	005d0423 	.word	0x005d0423
  403594:	042300e2 	.word	0x042300e2
  403598:	010500fe 	.word	0x010500fe
  40359c:	01050105 	.word	0x01050105
  4035a0:	01050105 	.word	0x01050105
  4035a4:	01050105 	.word	0x01050105
  4035a8:	01050105 	.word	0x01050105
  4035ac:	04230423 	.word	0x04230423
  4035b0:	04230423 	.word	0x04230423
  4035b4:	04230423 	.word	0x04230423
  4035b8:	04230423 	.word	0x04230423
  4035bc:	04230423 	.word	0x04230423
  4035c0:	02810115 	.word	0x02810115
  4035c4:	02810423 	.word	0x02810423
  4035c8:	04230423 	.word	0x04230423
  4035cc:	04230423 	.word	0x04230423
  4035d0:	042302c6 	.word	0x042302c6
  4035d4:	02cd0423 	.word	0x02cd0423
  4035d8:	04230423 	.word	0x04230423
  4035dc:	04230423 	.word	0x04230423
  4035e0:	02f70423 	.word	0x02f70423
  4035e4:	04230423 	.word	0x04230423
  4035e8:	04230325 	.word	0x04230325
  4035ec:	04230423 	.word	0x04230423
  4035f0:	04230423 	.word	0x04230423
  4035f4:	04230423 	.word	0x04230423
  4035f8:	04230423 	.word	0x04230423
  4035fc:	03660423 	.word	0x03660423
  403600:	02810379 	.word	0x02810379
  403604:	02810281 	.word	0x02810281
  403608:	03790381 	.word	0x03790381
  40360c:	04230423 	.word	0x04230423
  403610:	042303d1 	.word	0x042303d1
  403614:	00a303db 	.word	0x00a303db
  403618:	03ee0064 	.word	0x03ee0064
  40361c:	03f50423 	.word	0x03f50423
  403620:	03aa0423 	.word	0x03aa0423
  403624:	04230423 	.word	0x04230423
  403628:	03bc      	.short	0x03bc
  40362a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40362c:	930e      	str	r3, [sp, #56]	; 0x38
  40362e:	4240      	negs	r0, r0
  403630:	900c      	str	r0, [sp, #48]	; 0x30
  403632:	9b07      	ldr	r3, [sp, #28]
  403634:	f043 0304 	orr.w	r3, r3, #4
  403638:	9307      	str	r3, [sp, #28]
  40363a:	f898 3000 	ldrb.w	r3, [r8]
  40363e:	e792      	b.n	403566 <_svfprintf_r+0xb2>
  403640:	980e      	ldr	r0, [sp, #56]	; 0x38
  403642:	46ab      	mov	fp, r5
  403644:	2100      	movs	r1, #0
  403646:	6804      	ldr	r4, [r0, #0]
  403648:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40364c:	1d07      	adds	r7, r0, #4
  40364e:	9807      	ldr	r0, [sp, #28]
  403650:	2330      	movs	r3, #48	; 0x30
  403652:	2278      	movs	r2, #120	; 0x78
  403654:	458b      	cmp	fp, r1
  403656:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40365a:	f04f 0500 	mov.w	r5, #0
  40365e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403662:	f040 0302 	orr.w	r3, r0, #2
  403666:	f2c0 83c7 	blt.w	403df8 <_svfprintf_r+0x944>
  40366a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40366e:	f043 0302 	orr.w	r3, r3, #2
  403672:	9307      	str	r3, [sp, #28]
  403674:	ea54 0305 	orrs.w	r3, r4, r5
  403678:	970e      	str	r7, [sp, #56]	; 0x38
  40367a:	f000 8393 	beq.w	403da4 <_svfprintf_r+0x8f0>
  40367e:	460f      	mov	r7, r1
  403680:	9211      	str	r2, [sp, #68]	; 0x44
  403682:	48b3      	ldr	r0, [pc, #716]	; (403950 <_svfprintf_r+0x49c>)
  403684:	e2ce      	b.n	403c24 <_svfprintf_r+0x770>
  403686:	aa23      	add	r2, sp, #140	; 0x8c
  403688:	9909      	ldr	r1, [sp, #36]	; 0x24
  40368a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40368c:	f003 fd34 	bl	4070f8 <__ssprint_r>
  403690:	b948      	cbnz	r0, 4036a6 <_svfprintf_r+0x1f2>
  403692:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403696:	e752      	b.n	40353e <_svfprintf_r+0x8a>
  403698:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40369a:	b123      	cbz	r3, 4036a6 <_svfprintf_r+0x1f2>
  40369c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40369e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4036a0:	aa23      	add	r2, sp, #140	; 0x8c
  4036a2:	f003 fd29 	bl	4070f8 <__ssprint_r>
  4036a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4036a8:	899b      	ldrh	r3, [r3, #12]
  4036aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4036ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4036b0:	bf18      	it	ne
  4036b2:	f04f 33ff 	movne.w	r3, #4294967295
  4036b6:	4618      	mov	r0, r3
  4036b8:	b041      	add	sp, #260	; 0x104
  4036ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036be:	9311      	str	r3, [sp, #68]	; 0x44
  4036c0:	46ab      	mov	fp, r5
  4036c2:	2a00      	cmp	r2, #0
  4036c4:	f041 8223 	bne.w	404b0e <_svfprintf_r+0x165a>
  4036c8:	9a07      	ldr	r2, [sp, #28]
  4036ca:	f012 0320 	ands.w	r3, r2, #32
  4036ce:	f000 822e 	beq.w	403b2e <_svfprintf_r+0x67a>
  4036d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4036d4:	3707      	adds	r7, #7
  4036d6:	f027 0307 	bic.w	r3, r7, #7
  4036da:	2700      	movs	r7, #0
  4036dc:	f103 0108 	add.w	r1, r3, #8
  4036e0:	45bb      	cmp	fp, r7
  4036e2:	910e      	str	r1, [sp, #56]	; 0x38
  4036e4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4036e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4036ec:	f2c0 8752 	blt.w	404594 <_svfprintf_r+0x10e0>
  4036f0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4036f4:	9307      	str	r3, [sp, #28]
  4036f6:	ea54 0305 	orrs.w	r3, r4, r5
  4036fa:	f000 8375 	beq.w	403de8 <_svfprintf_r+0x934>
  4036fe:	ae30      	add	r6, sp, #192	; 0xc0
  403700:	08e2      	lsrs	r2, r4, #3
  403702:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403706:	08e9      	lsrs	r1, r5, #3
  403708:	f004 0307 	and.w	r3, r4, #7
  40370c:	460d      	mov	r5, r1
  40370e:	4614      	mov	r4, r2
  403710:	3330      	adds	r3, #48	; 0x30
  403712:	ea54 0205 	orrs.w	r2, r4, r5
  403716:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40371a:	d1f1      	bne.n	403700 <_svfprintf_r+0x24c>
  40371c:	9a07      	ldr	r2, [sp, #28]
  40371e:	07d1      	lsls	r1, r2, #31
  403720:	f140 8084 	bpl.w	40382c <_svfprintf_r+0x378>
  403724:	2b30      	cmp	r3, #48	; 0x30
  403726:	f000 8081 	beq.w	40382c <_svfprintf_r+0x378>
  40372a:	2230      	movs	r2, #48	; 0x30
  40372c:	1e73      	subs	r3, r6, #1
  40372e:	f806 2c01 	strb.w	r2, [r6, #-1]
  403732:	aa30      	add	r2, sp, #192	; 0xc0
  403734:	1ad2      	subs	r2, r2, r3
  403736:	920d      	str	r2, [sp, #52]	; 0x34
  403738:	461e      	mov	r6, r3
  40373a:	e07a      	b.n	403832 <_svfprintf_r+0x37e>
  40373c:	f898 3000 	ldrb.w	r3, [r8]
  403740:	2b2a      	cmp	r3, #42	; 0x2a
  403742:	f108 0401 	add.w	r4, r8, #1
  403746:	f001 81b1 	beq.w	404aac <_svfprintf_r+0x15f8>
  40374a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40374e:	2809      	cmp	r0, #9
  403750:	bf98      	it	ls
  403752:	2500      	movls	r5, #0
  403754:	f201 8164 	bhi.w	404a20 <_svfprintf_r+0x156c>
  403758:	f814 3b01 	ldrb.w	r3, [r4], #1
  40375c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403760:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  403764:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403768:	2809      	cmp	r0, #9
  40376a:	d9f5      	bls.n	403758 <_svfprintf_r+0x2a4>
  40376c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  403770:	46a0      	mov	r8, r4
  403772:	e6fa      	b.n	40356a <_svfprintf_r+0xb6>
  403774:	9b07      	ldr	r3, [sp, #28]
  403776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40377a:	9307      	str	r3, [sp, #28]
  40377c:	f898 3000 	ldrb.w	r3, [r8]
  403780:	e6f1      	b.n	403566 <_svfprintf_r+0xb2>
  403782:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403786:	2300      	movs	r3, #0
  403788:	461c      	mov	r4, r3
  40378a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40378e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403792:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403796:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40379a:	2809      	cmp	r0, #9
  40379c:	d9f5      	bls.n	40378a <_svfprintf_r+0x2d6>
  40379e:	940c      	str	r4, [sp, #48]	; 0x30
  4037a0:	e6e3      	b.n	40356a <_svfprintf_r+0xb6>
  4037a2:	9311      	str	r3, [sp, #68]	; 0x44
  4037a4:	46ab      	mov	fp, r5
  4037a6:	2a00      	cmp	r2, #0
  4037a8:	f041 81c9 	bne.w	404b3e <_svfprintf_r+0x168a>
  4037ac:	9b07      	ldr	r3, [sp, #28]
  4037ae:	f043 0310 	orr.w	r3, r3, #16
  4037b2:	9307      	str	r3, [sp, #28]
  4037b4:	9b07      	ldr	r3, [sp, #28]
  4037b6:	0698      	lsls	r0, r3, #26
  4037b8:	f140 8530 	bpl.w	40421c <_svfprintf_r+0xd68>
  4037bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4037be:	3707      	adds	r7, #7
  4037c0:	f027 0707 	bic.w	r7, r7, #7
  4037c4:	e9d7 2300 	ldrd	r2, r3, [r7]
  4037c8:	f107 0108 	add.w	r1, r7, #8
  4037cc:	910e      	str	r1, [sp, #56]	; 0x38
  4037ce:	4614      	mov	r4, r2
  4037d0:	461d      	mov	r5, r3
  4037d2:	2a00      	cmp	r2, #0
  4037d4:	f173 0300 	sbcs.w	r3, r3, #0
  4037d8:	f2c0 855b 	blt.w	404292 <_svfprintf_r+0xdde>
  4037dc:	f1bb 0f00 	cmp.w	fp, #0
  4037e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4037e4:	f2c0 8538 	blt.w	404258 <_svfprintf_r+0xda4>
  4037e8:	9b07      	ldr	r3, [sp, #28]
  4037ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4037ee:	9307      	str	r3, [sp, #28]
  4037f0:	ea54 0305 	orrs.w	r3, r4, r5
  4037f4:	f000 81db 	beq.w	403bae <_svfprintf_r+0x6fa>
  4037f8:	2d00      	cmp	r5, #0
  4037fa:	bf08      	it	eq
  4037fc:	2c0a      	cmpeq	r4, #10
  4037fe:	f0c0 81db 	bcc.w	403bb8 <_svfprintf_r+0x704>
  403802:	ae30      	add	r6, sp, #192	; 0xc0
  403804:	4620      	mov	r0, r4
  403806:	4629      	mov	r1, r5
  403808:	220a      	movs	r2, #10
  40380a:	2300      	movs	r3, #0
  40380c:	f7ff f93c 	bl	402a88 <__aeabi_uldivmod>
  403810:	3230      	adds	r2, #48	; 0x30
  403812:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403816:	4620      	mov	r0, r4
  403818:	4629      	mov	r1, r5
  40381a:	2300      	movs	r3, #0
  40381c:	220a      	movs	r2, #10
  40381e:	f7ff f933 	bl	402a88 <__aeabi_uldivmod>
  403822:	4604      	mov	r4, r0
  403824:	460d      	mov	r5, r1
  403826:	ea54 0305 	orrs.w	r3, r4, r5
  40382a:	d1eb      	bne.n	403804 <_svfprintf_r+0x350>
  40382c:	ab30      	add	r3, sp, #192	; 0xc0
  40382e:	1b9b      	subs	r3, r3, r6
  403830:	930d      	str	r3, [sp, #52]	; 0x34
  403832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403834:	455b      	cmp	r3, fp
  403836:	bfb8      	it	lt
  403838:	465b      	movlt	r3, fp
  40383a:	9308      	str	r3, [sp, #32]
  40383c:	2300      	movs	r3, #0
  40383e:	9313      	str	r3, [sp, #76]	; 0x4c
  403840:	b117      	cbz	r7, 403848 <_svfprintf_r+0x394>
  403842:	9b08      	ldr	r3, [sp, #32]
  403844:	3301      	adds	r3, #1
  403846:	9308      	str	r3, [sp, #32]
  403848:	9b07      	ldr	r3, [sp, #28]
  40384a:	f013 0302 	ands.w	r3, r3, #2
  40384e:	930f      	str	r3, [sp, #60]	; 0x3c
  403850:	d002      	beq.n	403858 <_svfprintf_r+0x3a4>
  403852:	9b08      	ldr	r3, [sp, #32]
  403854:	3302      	adds	r3, #2
  403856:	9308      	str	r3, [sp, #32]
  403858:	9b07      	ldr	r3, [sp, #28]
  40385a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40385e:	9310      	str	r3, [sp, #64]	; 0x40
  403860:	f040 82d7 	bne.w	403e12 <_svfprintf_r+0x95e>
  403864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403866:	9a08      	ldr	r2, [sp, #32]
  403868:	1a9d      	subs	r5, r3, r2
  40386a:	2d00      	cmp	r5, #0
  40386c:	f340 82d1 	ble.w	403e12 <_svfprintf_r+0x95e>
  403870:	2d10      	cmp	r5, #16
  403872:	9925      	ldr	r1, [sp, #148]	; 0x94
  403874:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403876:	4f37      	ldr	r7, [pc, #220]	; (403954 <_svfprintf_r+0x4a0>)
  403878:	dd27      	ble.n	4038ca <_svfprintf_r+0x416>
  40387a:	9618      	str	r6, [sp, #96]	; 0x60
  40387c:	4648      	mov	r0, r9
  40387e:	2410      	movs	r4, #16
  403880:	46b9      	mov	r9, r7
  403882:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403884:	462f      	mov	r7, r5
  403886:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403888:	e004      	b.n	403894 <_svfprintf_r+0x3e0>
  40388a:	3f10      	subs	r7, #16
  40388c:	2f10      	cmp	r7, #16
  40388e:	f100 0008 	add.w	r0, r0, #8
  403892:	dd16      	ble.n	4038c2 <_svfprintf_r+0x40e>
  403894:	3201      	adds	r2, #1
  403896:	4b2f      	ldr	r3, [pc, #188]	; (403954 <_svfprintf_r+0x4a0>)
  403898:	9224      	str	r2, [sp, #144]	; 0x90
  40389a:	3110      	adds	r1, #16
  40389c:	2a07      	cmp	r2, #7
  40389e:	9125      	str	r1, [sp, #148]	; 0x94
  4038a0:	e880 0018 	stmia.w	r0, {r3, r4}
  4038a4:	ddf1      	ble.n	40388a <_svfprintf_r+0x3d6>
  4038a6:	aa23      	add	r2, sp, #140	; 0x8c
  4038a8:	4631      	mov	r1, r6
  4038aa:	4628      	mov	r0, r5
  4038ac:	f003 fc24 	bl	4070f8 <__ssprint_r>
  4038b0:	2800      	cmp	r0, #0
  4038b2:	f47f aef8 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4038b6:	3f10      	subs	r7, #16
  4038b8:	2f10      	cmp	r7, #16
  4038ba:	9925      	ldr	r1, [sp, #148]	; 0x94
  4038bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4038be:	a830      	add	r0, sp, #192	; 0xc0
  4038c0:	dce8      	bgt.n	403894 <_svfprintf_r+0x3e0>
  4038c2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4038c4:	463d      	mov	r5, r7
  4038c6:	464f      	mov	r7, r9
  4038c8:	4681      	mov	r9, r0
  4038ca:	3201      	adds	r2, #1
  4038cc:	186c      	adds	r4, r5, r1
  4038ce:	2a07      	cmp	r2, #7
  4038d0:	9425      	str	r4, [sp, #148]	; 0x94
  4038d2:	9224      	str	r2, [sp, #144]	; 0x90
  4038d4:	f8c9 7000 	str.w	r7, [r9]
  4038d8:	f8c9 5004 	str.w	r5, [r9, #4]
  4038dc:	f300 8428 	bgt.w	404130 <_svfprintf_r+0xc7c>
  4038e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4038e4:	f109 0908 	add.w	r9, r9, #8
  4038e8:	b177      	cbz	r7, 403908 <_svfprintf_r+0x454>
  4038ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4038ec:	3301      	adds	r3, #1
  4038ee:	3401      	adds	r4, #1
  4038f0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4038f4:	2201      	movs	r2, #1
  4038f6:	2b07      	cmp	r3, #7
  4038f8:	9425      	str	r4, [sp, #148]	; 0x94
  4038fa:	9324      	str	r3, [sp, #144]	; 0x90
  4038fc:	e889 0006 	stmia.w	r9, {r1, r2}
  403900:	f300 83a0 	bgt.w	404044 <_svfprintf_r+0xb90>
  403904:	f109 0908 	add.w	r9, r9, #8
  403908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40390a:	b16b      	cbz	r3, 403928 <_svfprintf_r+0x474>
  40390c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40390e:	3301      	adds	r3, #1
  403910:	3402      	adds	r4, #2
  403912:	a91c      	add	r1, sp, #112	; 0x70
  403914:	2202      	movs	r2, #2
  403916:	2b07      	cmp	r3, #7
  403918:	9425      	str	r4, [sp, #148]	; 0x94
  40391a:	9324      	str	r3, [sp, #144]	; 0x90
  40391c:	e889 0006 	stmia.w	r9, {r1, r2}
  403920:	f300 839c 	bgt.w	40405c <_svfprintf_r+0xba8>
  403924:	f109 0908 	add.w	r9, r9, #8
  403928:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40392a:	2b80      	cmp	r3, #128	; 0x80
  40392c:	f000 82d5 	beq.w	403eda <_svfprintf_r+0xa26>
  403930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403932:	ebc3 070b 	rsb	r7, r3, fp
  403936:	2f00      	cmp	r7, #0
  403938:	dd39      	ble.n	4039ae <_svfprintf_r+0x4fa>
  40393a:	4a07      	ldr	r2, [pc, #28]	; (403958 <_svfprintf_r+0x4a4>)
  40393c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40393e:	920f      	str	r2, [sp, #60]	; 0x3c
  403940:	2f10      	cmp	r7, #16
  403942:	dd28      	ble.n	403996 <_svfprintf_r+0x4e2>
  403944:	4622      	mov	r2, r4
  403946:	f04f 0b10 	mov.w	fp, #16
  40394a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40394c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40394e:	e00a      	b.n	403966 <_svfprintf_r+0x4b2>
  403950:	00407ee8 	.word	0x00407ee8
  403954:	00407f08 	.word	0x00407f08
  403958:	00407eb4 	.word	0x00407eb4
  40395c:	3f10      	subs	r7, #16
  40395e:	2f10      	cmp	r7, #16
  403960:	f109 0908 	add.w	r9, r9, #8
  403964:	dd16      	ble.n	403994 <_svfprintf_r+0x4e0>
  403966:	3301      	adds	r3, #1
  403968:	3210      	adds	r2, #16
  40396a:	2b07      	cmp	r3, #7
  40396c:	9225      	str	r2, [sp, #148]	; 0x94
  40396e:	9324      	str	r3, [sp, #144]	; 0x90
  403970:	e889 0c00 	stmia.w	r9, {sl, fp}
  403974:	ddf2      	ble.n	40395c <_svfprintf_r+0x4a8>
  403976:	aa23      	add	r2, sp, #140	; 0x8c
  403978:	4621      	mov	r1, r4
  40397a:	4628      	mov	r0, r5
  40397c:	f003 fbbc 	bl	4070f8 <__ssprint_r>
  403980:	2800      	cmp	r0, #0
  403982:	f47f ae90 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  403986:	3f10      	subs	r7, #16
  403988:	2f10      	cmp	r7, #16
  40398a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40398c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40398e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403992:	dce8      	bgt.n	403966 <_svfprintf_r+0x4b2>
  403994:	4614      	mov	r4, r2
  403996:	3301      	adds	r3, #1
  403998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40399a:	9324      	str	r3, [sp, #144]	; 0x90
  40399c:	443c      	add	r4, r7
  40399e:	2b07      	cmp	r3, #7
  4039a0:	9425      	str	r4, [sp, #148]	; 0x94
  4039a2:	e889 0084 	stmia.w	r9, {r2, r7}
  4039a6:	f300 8341 	bgt.w	40402c <_svfprintf_r+0xb78>
  4039aa:	f109 0908 	add.w	r9, r9, #8
  4039ae:	9b07      	ldr	r3, [sp, #28]
  4039b0:	05da      	lsls	r2, r3, #23
  4039b2:	f100 8230 	bmi.w	403e16 <_svfprintf_r+0x962>
  4039b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4039b8:	990d      	ldr	r1, [sp, #52]	; 0x34
  4039ba:	f8c9 6000 	str.w	r6, [r9]
  4039be:	3301      	adds	r3, #1
  4039c0:	440c      	add	r4, r1
  4039c2:	2b07      	cmp	r3, #7
  4039c4:	9425      	str	r4, [sp, #148]	; 0x94
  4039c6:	f8c9 1004 	str.w	r1, [r9, #4]
  4039ca:	9324      	str	r3, [sp, #144]	; 0x90
  4039cc:	f300 8318 	bgt.w	404000 <_svfprintf_r+0xb4c>
  4039d0:	f109 0908 	add.w	r9, r9, #8
  4039d4:	9b07      	ldr	r3, [sp, #28]
  4039d6:	0759      	lsls	r1, r3, #29
  4039d8:	d53f      	bpl.n	403a5a <_svfprintf_r+0x5a6>
  4039da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039dc:	9a08      	ldr	r2, [sp, #32]
  4039de:	1a9d      	subs	r5, r3, r2
  4039e0:	2d00      	cmp	r5, #0
  4039e2:	dd3a      	ble.n	403a5a <_svfprintf_r+0x5a6>
  4039e4:	2d10      	cmp	r5, #16
  4039e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4039e8:	4fbc      	ldr	r7, [pc, #752]	; (403cdc <_svfprintf_r+0x828>)
  4039ea:	dd23      	ble.n	403a34 <_svfprintf_r+0x580>
  4039ec:	4622      	mov	r2, r4
  4039ee:	2610      	movs	r6, #16
  4039f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4039f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4039f6:	e004      	b.n	403a02 <_svfprintf_r+0x54e>
  4039f8:	3d10      	subs	r5, #16
  4039fa:	2d10      	cmp	r5, #16
  4039fc:	f109 0908 	add.w	r9, r9, #8
  403a00:	dd17      	ble.n	403a32 <_svfprintf_r+0x57e>
  403a02:	3301      	adds	r3, #1
  403a04:	49b5      	ldr	r1, [pc, #724]	; (403cdc <_svfprintf_r+0x828>)
  403a06:	9324      	str	r3, [sp, #144]	; 0x90
  403a08:	3210      	adds	r2, #16
  403a0a:	2b07      	cmp	r3, #7
  403a0c:	9225      	str	r2, [sp, #148]	; 0x94
  403a0e:	e889 0042 	stmia.w	r9, {r1, r6}
  403a12:	ddf1      	ble.n	4039f8 <_svfprintf_r+0x544>
  403a14:	aa23      	add	r2, sp, #140	; 0x8c
  403a16:	4621      	mov	r1, r4
  403a18:	4658      	mov	r0, fp
  403a1a:	f003 fb6d 	bl	4070f8 <__ssprint_r>
  403a1e:	2800      	cmp	r0, #0
  403a20:	f47f ae41 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  403a24:	3d10      	subs	r5, #16
  403a26:	2d10      	cmp	r5, #16
  403a28:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403a2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403a2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403a30:	dce7      	bgt.n	403a02 <_svfprintf_r+0x54e>
  403a32:	4614      	mov	r4, r2
  403a34:	3301      	adds	r3, #1
  403a36:	442c      	add	r4, r5
  403a38:	2b07      	cmp	r3, #7
  403a3a:	9425      	str	r4, [sp, #148]	; 0x94
  403a3c:	9324      	str	r3, [sp, #144]	; 0x90
  403a3e:	f8c9 7000 	str.w	r7, [r9]
  403a42:	f8c9 5004 	str.w	r5, [r9, #4]
  403a46:	dd08      	ble.n	403a5a <_svfprintf_r+0x5a6>
  403a48:	aa23      	add	r2, sp, #140	; 0x8c
  403a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
  403a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
  403a4e:	f003 fb53 	bl	4070f8 <__ssprint_r>
  403a52:	2800      	cmp	r0, #0
  403a54:	f47f ae27 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  403a58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403a5e:	9908      	ldr	r1, [sp, #32]
  403a60:	428a      	cmp	r2, r1
  403a62:	bfac      	ite	ge
  403a64:	189b      	addge	r3, r3, r2
  403a66:	185b      	addlt	r3, r3, r1
  403a68:	930b      	str	r3, [sp, #44]	; 0x2c
  403a6a:	2c00      	cmp	r4, #0
  403a6c:	f040 82d4 	bne.w	404018 <_svfprintf_r+0xb64>
  403a70:	2300      	movs	r3, #0
  403a72:	9324      	str	r3, [sp, #144]	; 0x90
  403a74:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403a78:	e542      	b.n	403500 <_svfprintf_r+0x4c>
  403a7a:	9311      	str	r3, [sp, #68]	; 0x44
  403a7c:	46ab      	mov	fp, r5
  403a7e:	2a00      	cmp	r2, #0
  403a80:	f041 8059 	bne.w	404b36 <_svfprintf_r+0x1682>
  403a84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403a86:	3707      	adds	r7, #7
  403a88:	f027 0307 	bic.w	r3, r7, #7
  403a8c:	f103 0208 	add.w	r2, r3, #8
  403a90:	920e      	str	r2, [sp, #56]	; 0x38
  403a92:	681a      	ldr	r2, [r3, #0]
  403a94:	9214      	str	r2, [sp, #80]	; 0x50
  403a96:	685b      	ldr	r3, [r3, #4]
  403a98:	9315      	str	r3, [sp, #84]	; 0x54
  403a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403a9c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403a9e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403aa2:	4628      	mov	r0, r5
  403aa4:	4621      	mov	r1, r4
  403aa6:	f04f 32ff 	mov.w	r2, #4294967295
  403aaa:	4b8d      	ldr	r3, [pc, #564]	; (403ce0 <_svfprintf_r+0x82c>)
  403aac:	f004 f878 	bl	407ba0 <__aeabi_dcmpun>
  403ab0:	2800      	cmp	r0, #0
  403ab2:	f040 84c1 	bne.w	404438 <_svfprintf_r+0xf84>
  403ab6:	4628      	mov	r0, r5
  403ab8:	4621      	mov	r1, r4
  403aba:	f04f 32ff 	mov.w	r2, #4294967295
  403abe:	4b88      	ldr	r3, [pc, #544]	; (403ce0 <_svfprintf_r+0x82c>)
  403ac0:	f004 f850 	bl	407b64 <__aeabi_dcmple>
  403ac4:	2800      	cmp	r0, #0
  403ac6:	f040 84b7 	bne.w	404438 <_svfprintf_r+0xf84>
  403aca:	9814      	ldr	r0, [sp, #80]	; 0x50
  403acc:	9915      	ldr	r1, [sp, #84]	; 0x54
  403ace:	2200      	movs	r2, #0
  403ad0:	2300      	movs	r3, #0
  403ad2:	f004 f83d 	bl	407b50 <__aeabi_dcmplt>
  403ad6:	2800      	cmp	r0, #0
  403ad8:	f040 874b 	bne.w	404972 <_svfprintf_r+0x14be>
  403adc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403ae0:	4e80      	ldr	r6, [pc, #512]	; (403ce4 <_svfprintf_r+0x830>)
  403ae2:	4b81      	ldr	r3, [pc, #516]	; (403ce8 <_svfprintf_r+0x834>)
  403ae4:	9907      	ldr	r1, [sp, #28]
  403ae6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  403aea:	9107      	str	r1, [sp, #28]
  403aec:	9911      	ldr	r1, [sp, #68]	; 0x44
  403aee:	2203      	movs	r2, #3
  403af0:	f04f 0b00 	mov.w	fp, #0
  403af4:	9208      	str	r2, [sp, #32]
  403af6:	2947      	cmp	r1, #71	; 0x47
  403af8:	bfd8      	it	le
  403afa:	461e      	movle	r6, r3
  403afc:	920d      	str	r2, [sp, #52]	; 0x34
  403afe:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  403b02:	e69d      	b.n	403840 <_svfprintf_r+0x38c>
  403b04:	9b07      	ldr	r3, [sp, #28]
  403b06:	f043 0308 	orr.w	r3, r3, #8
  403b0a:	9307      	str	r3, [sp, #28]
  403b0c:	f898 3000 	ldrb.w	r3, [r8]
  403b10:	e529      	b.n	403566 <_svfprintf_r+0xb2>
  403b12:	9311      	str	r3, [sp, #68]	; 0x44
  403b14:	46ab      	mov	fp, r5
  403b16:	2a00      	cmp	r2, #0
  403b18:	f041 8009 	bne.w	404b2e <_svfprintf_r+0x167a>
  403b1c:	9b07      	ldr	r3, [sp, #28]
  403b1e:	f043 0310 	orr.w	r3, r3, #16
  403b22:	9307      	str	r3, [sp, #28]
  403b24:	9a07      	ldr	r2, [sp, #28]
  403b26:	f012 0320 	ands.w	r3, r2, #32
  403b2a:	f47f add2 	bne.w	4036d2 <_svfprintf_r+0x21e>
  403b2e:	9907      	ldr	r1, [sp, #28]
  403b30:	f011 0210 	ands.w	r2, r1, #16
  403b34:	f000 8507 	beq.w	404546 <_svfprintf_r+0x1092>
  403b38:	980e      	ldr	r0, [sp, #56]	; 0x38
  403b3a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403b3e:	f1bb 0f00 	cmp.w	fp, #0
  403b42:	6804      	ldr	r4, [r0, #0]
  403b44:	f100 0704 	add.w	r7, r0, #4
  403b48:	f04f 0500 	mov.w	r5, #0
  403b4c:	f2c0 8521 	blt.w	404592 <_svfprintf_r+0x10de>
  403b50:	460a      	mov	r2, r1
  403b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403b56:	9207      	str	r2, [sp, #28]
  403b58:	ea54 0205 	orrs.w	r2, r4, r5
  403b5c:	970e      	str	r7, [sp, #56]	; 0x38
  403b5e:	f000 8143 	beq.w	403de8 <_svfprintf_r+0x934>
  403b62:	461f      	mov	r7, r3
  403b64:	e5cb      	b.n	4036fe <_svfprintf_r+0x24a>
  403b66:	9311      	str	r3, [sp, #68]	; 0x44
  403b68:	46ab      	mov	fp, r5
  403b6a:	2a00      	cmp	r2, #0
  403b6c:	f040 87d7 	bne.w	404b1e <_svfprintf_r+0x166a>
  403b70:	9b07      	ldr	r3, [sp, #28]
  403b72:	f043 0310 	orr.w	r3, r3, #16
  403b76:	9307      	str	r3, [sp, #28]
  403b78:	9a07      	ldr	r2, [sp, #28]
  403b7a:	f012 0320 	ands.w	r3, r2, #32
  403b7e:	f000 8332 	beq.w	4041e6 <_svfprintf_r+0xd32>
  403b82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403b84:	3707      	adds	r7, #7
  403b86:	f027 0307 	bic.w	r3, r7, #7
  403b8a:	2700      	movs	r7, #0
  403b8c:	f103 0108 	add.w	r1, r3, #8
  403b90:	45bb      	cmp	fp, r7
  403b92:	910e      	str	r1, [sp, #56]	; 0x38
  403b94:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b98:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403b9c:	f2c0 835c 	blt.w	404258 <_svfprintf_r+0xda4>
  403ba0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403ba4:	9307      	str	r3, [sp, #28]
  403ba6:	ea54 0305 	orrs.w	r3, r4, r5
  403baa:	f47f ae25 	bne.w	4037f8 <_svfprintf_r+0x344>
  403bae:	f1bb 0f00 	cmp.w	fp, #0
  403bb2:	f000 80fe 	beq.w	403db2 <_svfprintf_r+0x8fe>
  403bb6:	2400      	movs	r4, #0
  403bb8:	ae40      	add	r6, sp, #256	; 0x100
  403bba:	3430      	adds	r4, #48	; 0x30
  403bbc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  403bc0:	e634      	b.n	40382c <_svfprintf_r+0x378>
  403bc2:	9311      	str	r3, [sp, #68]	; 0x44
  403bc4:	46ab      	mov	fp, r5
  403bc6:	2a00      	cmp	r2, #0
  403bc8:	f040 87a5 	bne.w	404b16 <_svfprintf_r+0x1662>
  403bcc:	9b07      	ldr	r3, [sp, #28]
  403bce:	4847      	ldr	r0, [pc, #284]	; (403cec <_svfprintf_r+0x838>)
  403bd0:	069d      	lsls	r5, r3, #26
  403bd2:	f140 8097 	bpl.w	403d04 <_svfprintf_r+0x850>
  403bd6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403bd8:	3707      	adds	r7, #7
  403bda:	f027 0307 	bic.w	r3, r7, #7
  403bde:	e9d3 4500 	ldrd	r4, r5, [r3]
  403be2:	f103 0208 	add.w	r2, r3, #8
  403be6:	920e      	str	r2, [sp, #56]	; 0x38
  403be8:	9a07      	ldr	r2, [sp, #28]
  403bea:	f012 0701 	ands.w	r7, r2, #1
  403bee:	f000 8241 	beq.w	404074 <_svfprintf_r+0xbc0>
  403bf2:	ea54 0305 	orrs.w	r3, r4, r5
  403bf6:	f000 84f5 	beq.w	4045e4 <_svfprintf_r+0x1130>
  403bfa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403bfe:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403c02:	2700      	movs	r7, #0
  403c04:	9a07      	ldr	r2, [sp, #28]
  403c06:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403c0a:	2330      	movs	r3, #48	; 0x30
  403c0c:	45bb      	cmp	fp, r7
  403c0e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  403c12:	f042 0302 	orr.w	r3, r2, #2
  403c16:	f2c0 86a9 	blt.w	40496c <_svfprintf_r+0x14b8>
  403c1a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403c1e:	f043 0302 	orr.w	r3, r3, #2
  403c22:	9307      	str	r3, [sp, #28]
  403c24:	ae30      	add	r6, sp, #192	; 0xc0
  403c26:	0923      	lsrs	r3, r4, #4
  403c28:	f004 010f 	and.w	r1, r4, #15
  403c2c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c30:	092a      	lsrs	r2, r5, #4
  403c32:	461c      	mov	r4, r3
  403c34:	4615      	mov	r5, r2
  403c36:	5c43      	ldrb	r3, [r0, r1]
  403c38:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403c3c:	ea54 0305 	orrs.w	r3, r4, r5
  403c40:	d1f1      	bne.n	403c26 <_svfprintf_r+0x772>
  403c42:	e5f3      	b.n	40382c <_svfprintf_r+0x378>
  403c44:	990e      	ldr	r1, [sp, #56]	; 0x38
  403c46:	9311      	str	r3, [sp, #68]	; 0x44
  403c48:	680a      	ldr	r2, [r1, #0]
  403c4a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403c4e:	2300      	movs	r3, #0
  403c50:	460a      	mov	r2, r1
  403c52:	461f      	mov	r7, r3
  403c54:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403c58:	3204      	adds	r2, #4
  403c5a:	2301      	movs	r3, #1
  403c5c:	9308      	str	r3, [sp, #32]
  403c5e:	46bb      	mov	fp, r7
  403c60:	9713      	str	r7, [sp, #76]	; 0x4c
  403c62:	920e      	str	r2, [sp, #56]	; 0x38
  403c64:	930d      	str	r3, [sp, #52]	; 0x34
  403c66:	ae26      	add	r6, sp, #152	; 0x98
  403c68:	e5ee      	b.n	403848 <_svfprintf_r+0x394>
  403c6a:	9311      	str	r3, [sp, #68]	; 0x44
  403c6c:	46ab      	mov	fp, r5
  403c6e:	2a00      	cmp	r2, #0
  403c70:	f43f ada0 	beq.w	4037b4 <_svfprintf_r+0x300>
  403c74:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c78:	e59c      	b.n	4037b4 <_svfprintf_r+0x300>
  403c7a:	9b07      	ldr	r3, [sp, #28]
  403c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c80:	9307      	str	r3, [sp, #28]
  403c82:	f898 3000 	ldrb.w	r3, [r8]
  403c86:	e46e      	b.n	403566 <_svfprintf_r+0xb2>
  403c88:	f898 3000 	ldrb.w	r3, [r8]
  403c8c:	2900      	cmp	r1, #0
  403c8e:	f47f ac6a 	bne.w	403566 <_svfprintf_r+0xb2>
  403c92:	2201      	movs	r2, #1
  403c94:	2120      	movs	r1, #32
  403c96:	e466      	b.n	403566 <_svfprintf_r+0xb2>
  403c98:	9b07      	ldr	r3, [sp, #28]
  403c9a:	f043 0301 	orr.w	r3, r3, #1
  403c9e:	9307      	str	r3, [sp, #28]
  403ca0:	f898 3000 	ldrb.w	r3, [r8]
  403ca4:	e45f      	b.n	403566 <_svfprintf_r+0xb2>
  403ca6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403ca8:	6823      	ldr	r3, [r4, #0]
  403caa:	930c      	str	r3, [sp, #48]	; 0x30
  403cac:	4618      	mov	r0, r3
  403cae:	2800      	cmp	r0, #0
  403cb0:	4623      	mov	r3, r4
  403cb2:	f103 0304 	add.w	r3, r3, #4
  403cb6:	f6ff acb8 	blt.w	40362a <_svfprintf_r+0x176>
  403cba:	930e      	str	r3, [sp, #56]	; 0x38
  403cbc:	f898 3000 	ldrb.w	r3, [r8]
  403cc0:	e451      	b.n	403566 <_svfprintf_r+0xb2>
  403cc2:	f898 3000 	ldrb.w	r3, [r8]
  403cc6:	2201      	movs	r2, #1
  403cc8:	212b      	movs	r1, #43	; 0x2b
  403cca:	e44c      	b.n	403566 <_svfprintf_r+0xb2>
  403ccc:	9311      	str	r3, [sp, #68]	; 0x44
  403cce:	46ab      	mov	fp, r5
  403cd0:	2a00      	cmp	r2, #0
  403cd2:	f43f af51 	beq.w	403b78 <_svfprintf_r+0x6c4>
  403cd6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403cda:	e74d      	b.n	403b78 <_svfprintf_r+0x6c4>
  403cdc:	00407f08 	.word	0x00407f08
  403ce0:	7fefffff 	.word	0x7fefffff
  403ce4:	00407ec8 	.word	0x00407ec8
  403ce8:	00407ec4 	.word	0x00407ec4
  403cec:	00407ed4 	.word	0x00407ed4
  403cf0:	9311      	str	r3, [sp, #68]	; 0x44
  403cf2:	46ab      	mov	fp, r5
  403cf4:	2a00      	cmp	r2, #0
  403cf6:	f040 8703 	bne.w	404b00 <_svfprintf_r+0x164c>
  403cfa:	9b07      	ldr	r3, [sp, #28]
  403cfc:	4899      	ldr	r0, [pc, #612]	; (403f64 <_svfprintf_r+0xab0>)
  403cfe:	069d      	lsls	r5, r3, #26
  403d00:	f53f af69 	bmi.w	403bd6 <_svfprintf_r+0x722>
  403d04:	9b07      	ldr	r3, [sp, #28]
  403d06:	06dc      	lsls	r4, r3, #27
  403d08:	f140 845e 	bpl.w	4045c8 <_svfprintf_r+0x1114>
  403d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d0e:	4613      	mov	r3, r2
  403d10:	3304      	adds	r3, #4
  403d12:	6814      	ldr	r4, [r2, #0]
  403d14:	930e      	str	r3, [sp, #56]	; 0x38
  403d16:	2500      	movs	r5, #0
  403d18:	e766      	b.n	403be8 <_svfprintf_r+0x734>
  403d1a:	f898 3000 	ldrb.w	r3, [r8]
  403d1e:	2b6c      	cmp	r3, #108	; 0x6c
  403d20:	f000 84e1 	beq.w	4046e6 <_svfprintf_r+0x1232>
  403d24:	9807      	ldr	r0, [sp, #28]
  403d26:	f040 0010 	orr.w	r0, r0, #16
  403d2a:	9007      	str	r0, [sp, #28]
  403d2c:	e41b      	b.n	403566 <_svfprintf_r+0xb2>
  403d2e:	2a00      	cmp	r2, #0
  403d30:	f040 86db 	bne.w	404aea <_svfprintf_r+0x1636>
  403d34:	9b07      	ldr	r3, [sp, #28]
  403d36:	069b      	lsls	r3, r3, #26
  403d38:	f140 842f 	bpl.w	40459a <_svfprintf_r+0x10e6>
  403d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d40:	6813      	ldr	r3, [r2, #0]
  403d42:	17cd      	asrs	r5, r1, #31
  403d44:	4608      	mov	r0, r1
  403d46:	3204      	adds	r2, #4
  403d48:	4629      	mov	r1, r5
  403d4a:	920e      	str	r2, [sp, #56]	; 0x38
  403d4c:	e9c3 0100 	strd	r0, r1, [r3]
  403d50:	f7ff bbd6 	b.w	403500 <_svfprintf_r+0x4c>
  403d54:	9b07      	ldr	r3, [sp, #28]
  403d56:	f043 0320 	orr.w	r3, r3, #32
  403d5a:	9307      	str	r3, [sp, #28]
  403d5c:	f898 3000 	ldrb.w	r3, [r8]
  403d60:	e401      	b.n	403566 <_svfprintf_r+0xb2>
  403d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d64:	9311      	str	r3, [sp, #68]	; 0x44
  403d66:	6816      	ldr	r6, [r2, #0]
  403d68:	2400      	movs	r4, #0
  403d6a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  403d6e:	1d17      	adds	r7, r2, #4
  403d70:	2e00      	cmp	r6, #0
  403d72:	f000 85bd 	beq.w	4048f0 <_svfprintf_r+0x143c>
  403d76:	2d00      	cmp	r5, #0
  403d78:	f2c0 850f 	blt.w	40479a <_svfprintf_r+0x12e6>
  403d7c:	462a      	mov	r2, r5
  403d7e:	4621      	mov	r1, r4
  403d80:	4630      	mov	r0, r6
  403d82:	f002 fabd 	bl	406300 <memchr>
  403d86:	2800      	cmp	r0, #0
  403d88:	f000 8604 	beq.w	404994 <_svfprintf_r+0x14e0>
  403d8c:	1b83      	subs	r3, r0, r6
  403d8e:	930d      	str	r3, [sp, #52]	; 0x34
  403d90:	46a3      	mov	fp, r4
  403d92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403d96:	970e      	str	r7, [sp, #56]	; 0x38
  403d98:	9308      	str	r3, [sp, #32]
  403d9a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  403d9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403da2:	e54d      	b.n	403840 <_svfprintf_r+0x38c>
  403da4:	486f      	ldr	r0, [pc, #444]	; (403f64 <_svfprintf_r+0xab0>)
  403da6:	9211      	str	r2, [sp, #68]	; 0x44
  403da8:	f1bb 0f00 	cmp.w	fp, #0
  403dac:	f040 8173 	bne.w	404096 <_svfprintf_r+0xbe2>
  403db0:	465f      	mov	r7, fp
  403db2:	f04f 0b00 	mov.w	fp, #0
  403db6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  403dba:	ae30      	add	r6, sp, #192	; 0xc0
  403dbc:	e539      	b.n	403832 <_svfprintf_r+0x37e>
  403dbe:	9311      	str	r3, [sp, #68]	; 0x44
  403dc0:	2a00      	cmp	r2, #0
  403dc2:	f040 86b0 	bne.w	404b26 <_svfprintf_r+0x1672>
  403dc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dc8:	2a00      	cmp	r2, #0
  403dca:	f43f ac65 	beq.w	403698 <_svfprintf_r+0x1e4>
  403dce:	2300      	movs	r3, #0
  403dd0:	2101      	movs	r1, #1
  403dd2:	461f      	mov	r7, r3
  403dd4:	9108      	str	r1, [sp, #32]
  403dd6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  403dda:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403dde:	469b      	mov	fp, r3
  403de0:	9313      	str	r3, [sp, #76]	; 0x4c
  403de2:	910d      	str	r1, [sp, #52]	; 0x34
  403de4:	ae26      	add	r6, sp, #152	; 0x98
  403de6:	e52f      	b.n	403848 <_svfprintf_r+0x394>
  403de8:	f1bb 0f00 	cmp.w	fp, #0
  403dec:	f000 85dd 	beq.w	4049aa <_svfprintf_r+0x14f6>
  403df0:	2700      	movs	r7, #0
  403df2:	2400      	movs	r4, #0
  403df4:	2500      	movs	r5, #0
  403df6:	e482      	b.n	4036fe <_svfprintf_r+0x24a>
  403df8:	485a      	ldr	r0, [pc, #360]	; (403f64 <_svfprintf_r+0xab0>)
  403dfa:	9307      	str	r3, [sp, #28]
  403dfc:	9211      	str	r2, [sp, #68]	; 0x44
  403dfe:	ea54 0305 	orrs.w	r3, r4, r5
  403e02:	970e      	str	r7, [sp, #56]	; 0x38
  403e04:	f04f 0700 	mov.w	r7, #0
  403e08:	f47f af0c 	bne.w	403c24 <_svfprintf_r+0x770>
  403e0c:	2400      	movs	r4, #0
  403e0e:	2500      	movs	r5, #0
  403e10:	e708      	b.n	403c24 <_svfprintf_r+0x770>
  403e12:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403e14:	e568      	b.n	4038e8 <_svfprintf_r+0x434>
  403e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e18:	2b65      	cmp	r3, #101	; 0x65
  403e1a:	f340 80a9 	ble.w	403f70 <_svfprintf_r+0xabc>
  403e1e:	9814      	ldr	r0, [sp, #80]	; 0x50
  403e20:	9915      	ldr	r1, [sp, #84]	; 0x54
  403e22:	2200      	movs	r2, #0
  403e24:	2300      	movs	r3, #0
  403e26:	f003 fe89 	bl	407b3c <__aeabi_dcmpeq>
  403e2a:	2800      	cmp	r0, #0
  403e2c:	f000 8135 	beq.w	40409a <_svfprintf_r+0xbe6>
  403e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e32:	4a4d      	ldr	r2, [pc, #308]	; (403f68 <_svfprintf_r+0xab4>)
  403e34:	f8c9 2000 	str.w	r2, [r9]
  403e38:	3301      	adds	r3, #1
  403e3a:	3401      	adds	r4, #1
  403e3c:	2201      	movs	r2, #1
  403e3e:	2b07      	cmp	r3, #7
  403e40:	9425      	str	r4, [sp, #148]	; 0x94
  403e42:	9324      	str	r3, [sp, #144]	; 0x90
  403e44:	f8c9 2004 	str.w	r2, [r9, #4]
  403e48:	f300 83e6 	bgt.w	404618 <_svfprintf_r+0x1164>
  403e4c:	f109 0908 	add.w	r9, r9, #8
  403e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403e52:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403e54:	4293      	cmp	r3, r2
  403e56:	db03      	blt.n	403e60 <_svfprintf_r+0x9ac>
  403e58:	9b07      	ldr	r3, [sp, #28]
  403e5a:	07db      	lsls	r3, r3, #31
  403e5c:	f57f adba 	bpl.w	4039d4 <_svfprintf_r+0x520>
  403e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e62:	9916      	ldr	r1, [sp, #88]	; 0x58
  403e64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  403e66:	f8c9 2000 	str.w	r2, [r9]
  403e6a:	3301      	adds	r3, #1
  403e6c:	440c      	add	r4, r1
  403e6e:	2b07      	cmp	r3, #7
  403e70:	9425      	str	r4, [sp, #148]	; 0x94
  403e72:	f8c9 1004 	str.w	r1, [r9, #4]
  403e76:	9324      	str	r3, [sp, #144]	; 0x90
  403e78:	f300 843f 	bgt.w	4046fa <_svfprintf_r+0x1246>
  403e7c:	f109 0908 	add.w	r9, r9, #8
  403e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e82:	1e5d      	subs	r5, r3, #1
  403e84:	2d00      	cmp	r5, #0
  403e86:	f77f ada5 	ble.w	4039d4 <_svfprintf_r+0x520>
  403e8a:	4a38      	ldr	r2, [pc, #224]	; (403f6c <_svfprintf_r+0xab8>)
  403e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403e8e:	920f      	str	r2, [sp, #60]	; 0x3c
  403e90:	2d10      	cmp	r5, #16
  403e92:	f340 81e6 	ble.w	404262 <_svfprintf_r+0xdae>
  403e96:	2610      	movs	r6, #16
  403e98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403e9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  403e9e:	e005      	b.n	403eac <_svfprintf_r+0x9f8>
  403ea0:	f109 0908 	add.w	r9, r9, #8
  403ea4:	3d10      	subs	r5, #16
  403ea6:	2d10      	cmp	r5, #16
  403ea8:	f340 81db 	ble.w	404262 <_svfprintf_r+0xdae>
  403eac:	3301      	adds	r3, #1
  403eae:	3410      	adds	r4, #16
  403eb0:	2b07      	cmp	r3, #7
  403eb2:	9425      	str	r4, [sp, #148]	; 0x94
  403eb4:	9324      	str	r3, [sp, #144]	; 0x90
  403eb6:	f8c9 a000 	str.w	sl, [r9]
  403eba:	f8c9 6004 	str.w	r6, [r9, #4]
  403ebe:	ddef      	ble.n	403ea0 <_svfprintf_r+0x9ec>
  403ec0:	aa23      	add	r2, sp, #140	; 0x8c
  403ec2:	4659      	mov	r1, fp
  403ec4:	4638      	mov	r0, r7
  403ec6:	f003 f917 	bl	4070f8 <__ssprint_r>
  403eca:	2800      	cmp	r0, #0
  403ecc:	f47f abeb 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  403ed0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  403ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ed4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403ed8:	e7e4      	b.n	403ea4 <_svfprintf_r+0x9f0>
  403eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403edc:	9a08      	ldr	r2, [sp, #32]
  403ede:	1a9f      	subs	r7, r3, r2
  403ee0:	2f00      	cmp	r7, #0
  403ee2:	f77f ad25 	ble.w	403930 <_svfprintf_r+0x47c>
  403ee6:	4a21      	ldr	r2, [pc, #132]	; (403f6c <_svfprintf_r+0xab8>)
  403ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403eea:	920f      	str	r2, [sp, #60]	; 0x3c
  403eec:	2f10      	cmp	r7, #16
  403eee:	dd2b      	ble.n	403f48 <_svfprintf_r+0xa94>
  403ef0:	464a      	mov	r2, r9
  403ef2:	4621      	mov	r1, r4
  403ef4:	46b9      	mov	r9, r7
  403ef6:	2510      	movs	r5, #16
  403ef8:	4637      	mov	r7, r6
  403efa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403efc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403efe:	e006      	b.n	403f0e <_svfprintf_r+0xa5a>
  403f00:	f1a9 0910 	sub.w	r9, r9, #16
  403f04:	f1b9 0f10 	cmp.w	r9, #16
  403f08:	f102 0208 	add.w	r2, r2, #8
  403f0c:	dd18      	ble.n	403f40 <_svfprintf_r+0xa8c>
  403f0e:	3301      	adds	r3, #1
  403f10:	3110      	adds	r1, #16
  403f12:	2b07      	cmp	r3, #7
  403f14:	9125      	str	r1, [sp, #148]	; 0x94
  403f16:	9324      	str	r3, [sp, #144]	; 0x90
  403f18:	f8c2 a000 	str.w	sl, [r2]
  403f1c:	6055      	str	r5, [r2, #4]
  403f1e:	ddef      	ble.n	403f00 <_svfprintf_r+0xa4c>
  403f20:	aa23      	add	r2, sp, #140	; 0x8c
  403f22:	4631      	mov	r1, r6
  403f24:	4620      	mov	r0, r4
  403f26:	f003 f8e7 	bl	4070f8 <__ssprint_r>
  403f2a:	2800      	cmp	r0, #0
  403f2c:	f47f abbb 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  403f30:	f1a9 0910 	sub.w	r9, r9, #16
  403f34:	f1b9 0f10 	cmp.w	r9, #16
  403f38:	9925      	ldr	r1, [sp, #148]	; 0x94
  403f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f3c:	aa30      	add	r2, sp, #192	; 0xc0
  403f3e:	dce6      	bgt.n	403f0e <_svfprintf_r+0xa5a>
  403f40:	463e      	mov	r6, r7
  403f42:	460c      	mov	r4, r1
  403f44:	464f      	mov	r7, r9
  403f46:	4691      	mov	r9, r2
  403f48:	3301      	adds	r3, #1
  403f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f4c:	9324      	str	r3, [sp, #144]	; 0x90
  403f4e:	443c      	add	r4, r7
  403f50:	2b07      	cmp	r3, #7
  403f52:	9425      	str	r4, [sp, #148]	; 0x94
  403f54:	e889 0084 	stmia.w	r9, {r2, r7}
  403f58:	f300 8245 	bgt.w	4043e6 <_svfprintf_r+0xf32>
  403f5c:	f109 0908 	add.w	r9, r9, #8
  403f60:	e4e6      	b.n	403930 <_svfprintf_r+0x47c>
  403f62:	bf00      	nop
  403f64:	00407ee8 	.word	0x00407ee8
  403f68:	00407f04 	.word	0x00407f04
  403f6c:	00407eb4 	.word	0x00407eb4
  403f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403f72:	9d24      	ldr	r5, [sp, #144]	; 0x90
  403f74:	2b01      	cmp	r3, #1
  403f76:	f340 8208 	ble.w	40438a <_svfprintf_r+0xed6>
  403f7a:	3501      	adds	r5, #1
  403f7c:	3401      	adds	r4, #1
  403f7e:	2301      	movs	r3, #1
  403f80:	2d07      	cmp	r5, #7
  403f82:	9425      	str	r4, [sp, #148]	; 0x94
  403f84:	9524      	str	r5, [sp, #144]	; 0x90
  403f86:	f8c9 6000 	str.w	r6, [r9]
  403f8a:	f8c9 3004 	str.w	r3, [r9, #4]
  403f8e:	f300 820d 	bgt.w	4043ac <_svfprintf_r+0xef8>
  403f92:	f109 0908 	add.w	r9, r9, #8
  403f96:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403f98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403f9a:	f8c9 3000 	str.w	r3, [r9]
  403f9e:	3501      	adds	r5, #1
  403fa0:	4414      	add	r4, r2
  403fa2:	2d07      	cmp	r5, #7
  403fa4:	9425      	str	r4, [sp, #148]	; 0x94
  403fa6:	9524      	str	r5, [sp, #144]	; 0x90
  403fa8:	f8c9 2004 	str.w	r2, [r9, #4]
  403fac:	f300 820e 	bgt.w	4043cc <_svfprintf_r+0xf18>
  403fb0:	f109 0908 	add.w	r9, r9, #8
  403fb4:	2300      	movs	r3, #0
  403fb6:	9814      	ldr	r0, [sp, #80]	; 0x50
  403fb8:	9915      	ldr	r1, [sp, #84]	; 0x54
  403fba:	2200      	movs	r2, #0
  403fbc:	f003 fdbe 	bl	407b3c <__aeabi_dcmpeq>
  403fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403fc2:	2800      	cmp	r0, #0
  403fc4:	f040 80c3 	bne.w	40414e <_svfprintf_r+0xc9a>
  403fc8:	3b01      	subs	r3, #1
  403fca:	3501      	adds	r5, #1
  403fcc:	3601      	adds	r6, #1
  403fce:	441c      	add	r4, r3
  403fd0:	2d07      	cmp	r5, #7
  403fd2:	9524      	str	r5, [sp, #144]	; 0x90
  403fd4:	9425      	str	r4, [sp, #148]	; 0x94
  403fd6:	f8c9 6000 	str.w	r6, [r9]
  403fda:	f8c9 3004 	str.w	r3, [r9, #4]
  403fde:	f300 80f5 	bgt.w	4041cc <_svfprintf_r+0xd18>
  403fe2:	f109 0908 	add.w	r9, r9, #8
  403fe6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403fe8:	f8c9 2004 	str.w	r2, [r9, #4]
  403fec:	3501      	adds	r5, #1
  403fee:	4414      	add	r4, r2
  403ff0:	ab1f      	add	r3, sp, #124	; 0x7c
  403ff2:	2d07      	cmp	r5, #7
  403ff4:	9425      	str	r4, [sp, #148]	; 0x94
  403ff6:	9524      	str	r5, [sp, #144]	; 0x90
  403ff8:	f8c9 3000 	str.w	r3, [r9]
  403ffc:	f77f ace8 	ble.w	4039d0 <_svfprintf_r+0x51c>
  404000:	aa23      	add	r2, sp, #140	; 0x8c
  404002:	9909      	ldr	r1, [sp, #36]	; 0x24
  404004:	980a      	ldr	r0, [sp, #40]	; 0x28
  404006:	f003 f877 	bl	4070f8 <__ssprint_r>
  40400a:	2800      	cmp	r0, #0
  40400c:	f47f ab4b 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404010:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404012:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404016:	e4dd      	b.n	4039d4 <_svfprintf_r+0x520>
  404018:	aa23      	add	r2, sp, #140	; 0x8c
  40401a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40401c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40401e:	f003 f86b 	bl	4070f8 <__ssprint_r>
  404022:	2800      	cmp	r0, #0
  404024:	f43f ad24 	beq.w	403a70 <_svfprintf_r+0x5bc>
  404028:	f7ff bb3d 	b.w	4036a6 <_svfprintf_r+0x1f2>
  40402c:	aa23      	add	r2, sp, #140	; 0x8c
  40402e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404030:	980a      	ldr	r0, [sp, #40]	; 0x28
  404032:	f003 f861 	bl	4070f8 <__ssprint_r>
  404036:	2800      	cmp	r0, #0
  404038:	f47f ab35 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  40403c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40403e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404042:	e4b4      	b.n	4039ae <_svfprintf_r+0x4fa>
  404044:	aa23      	add	r2, sp, #140	; 0x8c
  404046:	9909      	ldr	r1, [sp, #36]	; 0x24
  404048:	980a      	ldr	r0, [sp, #40]	; 0x28
  40404a:	f003 f855 	bl	4070f8 <__ssprint_r>
  40404e:	2800      	cmp	r0, #0
  404050:	f47f ab29 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404054:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404056:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40405a:	e455      	b.n	403908 <_svfprintf_r+0x454>
  40405c:	aa23      	add	r2, sp, #140	; 0x8c
  40405e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404060:	980a      	ldr	r0, [sp, #40]	; 0x28
  404062:	f003 f849 	bl	4070f8 <__ssprint_r>
  404066:	2800      	cmp	r0, #0
  404068:	f47f ab1d 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  40406c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40406e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404072:	e459      	b.n	403928 <_svfprintf_r+0x474>
  404074:	f1bb 0f00 	cmp.w	fp, #0
  404078:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40407c:	f2c0 82d8 	blt.w	404630 <_svfprintf_r+0x117c>
  404080:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404084:	9307      	str	r3, [sp, #28]
  404086:	ea54 0305 	orrs.w	r3, r4, r5
  40408a:	f47f adcb 	bne.w	403c24 <_svfprintf_r+0x770>
  40408e:	f1bb 0f00 	cmp.w	fp, #0
  404092:	f43f ae8d 	beq.w	403db0 <_svfprintf_r+0x8fc>
  404096:	2700      	movs	r7, #0
  404098:	e6b8      	b.n	403e0c <_svfprintf_r+0x958>
  40409a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40409c:	2d00      	cmp	r5, #0
  40409e:	f340 82ca 	ble.w	404636 <_svfprintf_r+0x1182>
  4040a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4040a6:	4293      	cmp	r3, r2
  4040a8:	bfa8      	it	ge
  4040aa:	4613      	movge	r3, r2
  4040ac:	2b00      	cmp	r3, #0
  4040ae:	461d      	mov	r5, r3
  4040b0:	dd0d      	ble.n	4040ce <_svfprintf_r+0xc1a>
  4040b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040b4:	f8c9 6000 	str.w	r6, [r9]
  4040b8:	3301      	adds	r3, #1
  4040ba:	442c      	add	r4, r5
  4040bc:	2b07      	cmp	r3, #7
  4040be:	9425      	str	r4, [sp, #148]	; 0x94
  4040c0:	f8c9 5004 	str.w	r5, [r9, #4]
  4040c4:	9324      	str	r3, [sp, #144]	; 0x90
  4040c6:	f300 839c 	bgt.w	404802 <_svfprintf_r+0x134e>
  4040ca:	f109 0908 	add.w	r9, r9, #8
  4040ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040d0:	2d00      	cmp	r5, #0
  4040d2:	bfa8      	it	ge
  4040d4:	1b5b      	subge	r3, r3, r5
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	461d      	mov	r5, r3
  4040da:	f340 80f6 	ble.w	4042ca <_svfprintf_r+0xe16>
  4040de:	4aba      	ldr	r2, [pc, #744]	; (4043c8 <_svfprintf_r+0xf14>)
  4040e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4040e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4040e4:	2d10      	cmp	r5, #16
  4040e6:	f340 828a 	ble.w	4045fe <_svfprintf_r+0x114a>
  4040ea:	4622      	mov	r2, r4
  4040ec:	2710      	movs	r7, #16
  4040ee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4040f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4040f4:	e005      	b.n	404102 <_svfprintf_r+0xc4e>
  4040f6:	f109 0908 	add.w	r9, r9, #8
  4040fa:	3d10      	subs	r5, #16
  4040fc:	2d10      	cmp	r5, #16
  4040fe:	f340 827d 	ble.w	4045fc <_svfprintf_r+0x1148>
  404102:	3301      	adds	r3, #1
  404104:	3210      	adds	r2, #16
  404106:	2b07      	cmp	r3, #7
  404108:	9225      	str	r2, [sp, #148]	; 0x94
  40410a:	9324      	str	r3, [sp, #144]	; 0x90
  40410c:	f8c9 a000 	str.w	sl, [r9]
  404110:	f8c9 7004 	str.w	r7, [r9, #4]
  404114:	ddef      	ble.n	4040f6 <_svfprintf_r+0xc42>
  404116:	aa23      	add	r2, sp, #140	; 0x8c
  404118:	4621      	mov	r1, r4
  40411a:	4658      	mov	r0, fp
  40411c:	f002 ffec 	bl	4070f8 <__ssprint_r>
  404120:	2800      	cmp	r0, #0
  404122:	f47f aac0 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404126:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404128:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40412a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40412e:	e7e4      	b.n	4040fa <_svfprintf_r+0xc46>
  404130:	aa23      	add	r2, sp, #140	; 0x8c
  404132:	9909      	ldr	r1, [sp, #36]	; 0x24
  404134:	980a      	ldr	r0, [sp, #40]	; 0x28
  404136:	f002 ffdf 	bl	4070f8 <__ssprint_r>
  40413a:	2800      	cmp	r0, #0
  40413c:	f47f aab3 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404140:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404144:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404146:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40414a:	f7ff bbcd 	b.w	4038e8 <_svfprintf_r+0x434>
  40414e:	1e5e      	subs	r6, r3, #1
  404150:	2e00      	cmp	r6, #0
  404152:	f77f af48 	ble.w	403fe6 <_svfprintf_r+0xb32>
  404156:	4b9c      	ldr	r3, [pc, #624]	; (4043c8 <_svfprintf_r+0xf14>)
  404158:	930f      	str	r3, [sp, #60]	; 0x3c
  40415a:	2e10      	cmp	r6, #16
  40415c:	dd2c      	ble.n	4041b8 <_svfprintf_r+0xd04>
  40415e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  404162:	2710      	movs	r7, #16
  404164:	46b0      	mov	r8, r6
  404166:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40416a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40416c:	e006      	b.n	40417c <_svfprintf_r+0xcc8>
  40416e:	f1a8 0810 	sub.w	r8, r8, #16
  404172:	f1b8 0f10 	cmp.w	r8, #16
  404176:	f109 0908 	add.w	r9, r9, #8
  40417a:	dd1a      	ble.n	4041b2 <_svfprintf_r+0xcfe>
  40417c:	3501      	adds	r5, #1
  40417e:	3410      	adds	r4, #16
  404180:	2d07      	cmp	r5, #7
  404182:	9425      	str	r4, [sp, #148]	; 0x94
  404184:	9524      	str	r5, [sp, #144]	; 0x90
  404186:	f8c9 a000 	str.w	sl, [r9]
  40418a:	f8c9 7004 	str.w	r7, [r9, #4]
  40418e:	ddee      	ble.n	40416e <_svfprintf_r+0xcba>
  404190:	aa23      	add	r2, sp, #140	; 0x8c
  404192:	4631      	mov	r1, r6
  404194:	4658      	mov	r0, fp
  404196:	f002 ffaf 	bl	4070f8 <__ssprint_r>
  40419a:	2800      	cmp	r0, #0
  40419c:	f47f aa83 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4041a0:	f1a8 0810 	sub.w	r8, r8, #16
  4041a4:	f1b8 0f10 	cmp.w	r8, #16
  4041a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4041aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4041ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4041b0:	dce4      	bgt.n	40417c <_svfprintf_r+0xcc8>
  4041b2:	4646      	mov	r6, r8
  4041b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4041b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4041ba:	3501      	adds	r5, #1
  4041bc:	4434      	add	r4, r6
  4041be:	2d07      	cmp	r5, #7
  4041c0:	9425      	str	r4, [sp, #148]	; 0x94
  4041c2:	9524      	str	r5, [sp, #144]	; 0x90
  4041c4:	e889 0048 	stmia.w	r9, {r3, r6}
  4041c8:	f77f af0b 	ble.w	403fe2 <_svfprintf_r+0xb2e>
  4041cc:	aa23      	add	r2, sp, #140	; 0x8c
  4041ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4041d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4041d2:	f002 ff91 	bl	4070f8 <__ssprint_r>
  4041d6:	2800      	cmp	r0, #0
  4041d8:	f47f aa65 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4041dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4041de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4041e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4041e4:	e6ff      	b.n	403fe6 <_svfprintf_r+0xb32>
  4041e6:	9907      	ldr	r1, [sp, #28]
  4041e8:	f011 0210 	ands.w	r2, r1, #16
  4041ec:	f000 8108 	beq.w	404400 <_svfprintf_r+0xf4c>
  4041f0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4041f2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4041f6:	f1bb 0f00 	cmp.w	fp, #0
  4041fa:	6804      	ldr	r4, [r0, #0]
  4041fc:	f100 0704 	add.w	r7, r0, #4
  404200:	f04f 0500 	mov.w	r5, #0
  404204:	db26      	blt.n	404254 <_svfprintf_r+0xda0>
  404206:	460a      	mov	r2, r1
  404208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40420c:	9207      	str	r2, [sp, #28]
  40420e:	ea54 0205 	orrs.w	r2, r4, r5
  404212:	970e      	str	r7, [sp, #56]	; 0x38
  404214:	461f      	mov	r7, r3
  404216:	f47f aaef 	bne.w	4037f8 <_svfprintf_r+0x344>
  40421a:	e4c8      	b.n	403bae <_svfprintf_r+0x6fa>
  40421c:	9b07      	ldr	r3, [sp, #28]
  40421e:	06d9      	lsls	r1, r3, #27
  404220:	d42a      	bmi.n	404278 <_svfprintf_r+0xdc4>
  404222:	9b07      	ldr	r3, [sp, #28]
  404224:	065a      	lsls	r2, r3, #25
  404226:	d527      	bpl.n	404278 <_svfprintf_r+0xdc4>
  404228:	990e      	ldr	r1, [sp, #56]	; 0x38
  40422a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40422e:	3104      	adds	r1, #4
  404230:	17e5      	asrs	r5, r4, #31
  404232:	4622      	mov	r2, r4
  404234:	462b      	mov	r3, r5
  404236:	910e      	str	r1, [sp, #56]	; 0x38
  404238:	f7ff bacb 	b.w	4037d2 <_svfprintf_r+0x31e>
  40423c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40423e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404242:	f1bb 0f00 	cmp.w	fp, #0
  404246:	680c      	ldr	r4, [r1, #0]
  404248:	f101 0704 	add.w	r7, r1, #4
  40424c:	f04f 0500 	mov.w	r5, #0
  404250:	f280 8247 	bge.w	4046e2 <_svfprintf_r+0x122e>
  404254:	970e      	str	r7, [sp, #56]	; 0x38
  404256:	461f      	mov	r7, r3
  404258:	ea54 0305 	orrs.w	r3, r4, r5
  40425c:	f47f aacc 	bne.w	4037f8 <_svfprintf_r+0x344>
  404260:	e4aa      	b.n	403bb8 <_svfprintf_r+0x704>
  404262:	3301      	adds	r3, #1
  404264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404266:	9324      	str	r3, [sp, #144]	; 0x90
  404268:	442c      	add	r4, r5
  40426a:	2b07      	cmp	r3, #7
  40426c:	9425      	str	r4, [sp, #148]	; 0x94
  40426e:	e889 0024 	stmia.w	r9, {r2, r5}
  404272:	f77f abad 	ble.w	4039d0 <_svfprintf_r+0x51c>
  404276:	e6c3      	b.n	404000 <_svfprintf_r+0xb4c>
  404278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40427a:	6814      	ldr	r4, [r2, #0]
  40427c:	4613      	mov	r3, r2
  40427e:	3304      	adds	r3, #4
  404280:	17e5      	asrs	r5, r4, #31
  404282:	4622      	mov	r2, r4
  404284:	930e      	str	r3, [sp, #56]	; 0x38
  404286:	2a00      	cmp	r2, #0
  404288:	462b      	mov	r3, r5
  40428a:	f173 0300 	sbcs.w	r3, r3, #0
  40428e:	f6bf aaa5 	bge.w	4037dc <_svfprintf_r+0x328>
  404292:	4264      	negs	r4, r4
  404294:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404298:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40429c:	f1bb 0f00 	cmp.w	fp, #0
  4042a0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4042a4:	f6ff aaa8 	blt.w	4037f8 <_svfprintf_r+0x344>
  4042a8:	9b07      	ldr	r3, [sp, #28]
  4042aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4042ae:	9307      	str	r3, [sp, #28]
  4042b0:	f7ff baa2 	b.w	4037f8 <_svfprintf_r+0x344>
  4042b4:	aa23      	add	r2, sp, #140	; 0x8c
  4042b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4042b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4042ba:	f002 ff1d 	bl	4070f8 <__ssprint_r>
  4042be:	2800      	cmp	r0, #0
  4042c0:	f47f a9f1 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4042c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4042c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4042ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4042cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4042ce:	4432      	add	r2, r6
  4042d0:	4617      	mov	r7, r2
  4042d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4042d4:	4293      	cmp	r3, r2
  4042d6:	db47      	blt.n	404368 <_svfprintf_r+0xeb4>
  4042d8:	9a07      	ldr	r2, [sp, #28]
  4042da:	07d5      	lsls	r5, r2, #31
  4042dc:	d444      	bmi.n	404368 <_svfprintf_r+0xeb4>
  4042de:	9912      	ldr	r1, [sp, #72]	; 0x48
  4042e0:	440e      	add	r6, r1
  4042e2:	1bf5      	subs	r5, r6, r7
  4042e4:	1acb      	subs	r3, r1, r3
  4042e6:	429d      	cmp	r5, r3
  4042e8:	bfa8      	it	ge
  4042ea:	461d      	movge	r5, r3
  4042ec:	2d00      	cmp	r5, #0
  4042ee:	462e      	mov	r6, r5
  4042f0:	dd0d      	ble.n	40430e <_svfprintf_r+0xe5a>
  4042f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4042f4:	f8c9 7000 	str.w	r7, [r9]
  4042f8:	3201      	adds	r2, #1
  4042fa:	442c      	add	r4, r5
  4042fc:	2a07      	cmp	r2, #7
  4042fe:	9425      	str	r4, [sp, #148]	; 0x94
  404300:	f8c9 5004 	str.w	r5, [r9, #4]
  404304:	9224      	str	r2, [sp, #144]	; 0x90
  404306:	f300 830b 	bgt.w	404920 <_svfprintf_r+0x146c>
  40430a:	f109 0908 	add.w	r9, r9, #8
  40430e:	2e00      	cmp	r6, #0
  404310:	bfac      	ite	ge
  404312:	1b9d      	subge	r5, r3, r6
  404314:	461d      	movlt	r5, r3
  404316:	2d00      	cmp	r5, #0
  404318:	f77f ab5c 	ble.w	4039d4 <_svfprintf_r+0x520>
  40431c:	4a2a      	ldr	r2, [pc, #168]	; (4043c8 <_svfprintf_r+0xf14>)
  40431e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404320:	920f      	str	r2, [sp, #60]	; 0x3c
  404322:	2d10      	cmp	r5, #16
  404324:	dd9d      	ble.n	404262 <_svfprintf_r+0xdae>
  404326:	2610      	movs	r6, #16
  404328:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40432a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40432e:	e004      	b.n	40433a <_svfprintf_r+0xe86>
  404330:	f109 0908 	add.w	r9, r9, #8
  404334:	3d10      	subs	r5, #16
  404336:	2d10      	cmp	r5, #16
  404338:	dd93      	ble.n	404262 <_svfprintf_r+0xdae>
  40433a:	3301      	adds	r3, #1
  40433c:	3410      	adds	r4, #16
  40433e:	2b07      	cmp	r3, #7
  404340:	9425      	str	r4, [sp, #148]	; 0x94
  404342:	9324      	str	r3, [sp, #144]	; 0x90
  404344:	f8c9 a000 	str.w	sl, [r9]
  404348:	f8c9 6004 	str.w	r6, [r9, #4]
  40434c:	ddf0      	ble.n	404330 <_svfprintf_r+0xe7c>
  40434e:	aa23      	add	r2, sp, #140	; 0x8c
  404350:	4659      	mov	r1, fp
  404352:	4638      	mov	r0, r7
  404354:	f002 fed0 	bl	4070f8 <__ssprint_r>
  404358:	2800      	cmp	r0, #0
  40435a:	f47f a9a4 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  40435e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404360:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404362:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404366:	e7e5      	b.n	404334 <_svfprintf_r+0xe80>
  404368:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40436a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40436c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40436e:	f8c9 1000 	str.w	r1, [r9]
  404372:	3201      	adds	r2, #1
  404374:	4404      	add	r4, r0
  404376:	2a07      	cmp	r2, #7
  404378:	9425      	str	r4, [sp, #148]	; 0x94
  40437a:	f8c9 0004 	str.w	r0, [r9, #4]
  40437e:	9224      	str	r2, [sp, #144]	; 0x90
  404380:	f300 82a9 	bgt.w	4048d6 <_svfprintf_r+0x1422>
  404384:	f109 0908 	add.w	r9, r9, #8
  404388:	e7a9      	b.n	4042de <_svfprintf_r+0xe2a>
  40438a:	9b07      	ldr	r3, [sp, #28]
  40438c:	07d8      	lsls	r0, r3, #31
  40438e:	f53f adf4 	bmi.w	403f7a <_svfprintf_r+0xac6>
  404392:	3501      	adds	r5, #1
  404394:	3401      	adds	r4, #1
  404396:	2301      	movs	r3, #1
  404398:	2d07      	cmp	r5, #7
  40439a:	9425      	str	r4, [sp, #148]	; 0x94
  40439c:	9524      	str	r5, [sp, #144]	; 0x90
  40439e:	f8c9 6000 	str.w	r6, [r9]
  4043a2:	f8c9 3004 	str.w	r3, [r9, #4]
  4043a6:	f77f ae1c 	ble.w	403fe2 <_svfprintf_r+0xb2e>
  4043aa:	e70f      	b.n	4041cc <_svfprintf_r+0xd18>
  4043ac:	aa23      	add	r2, sp, #140	; 0x8c
  4043ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043b2:	f002 fea1 	bl	4070f8 <__ssprint_r>
  4043b6:	2800      	cmp	r0, #0
  4043b8:	f47f a975 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4043bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043be:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4043c0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043c4:	e5e7      	b.n	403f96 <_svfprintf_r+0xae2>
  4043c6:	bf00      	nop
  4043c8:	00407eb4 	.word	0x00407eb4
  4043cc:	aa23      	add	r2, sp, #140	; 0x8c
  4043ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043d2:	f002 fe91 	bl	4070f8 <__ssprint_r>
  4043d6:	2800      	cmp	r0, #0
  4043d8:	f47f a965 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4043dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4043e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043e4:	e5e6      	b.n	403fb4 <_svfprintf_r+0xb00>
  4043e6:	aa23      	add	r2, sp, #140	; 0x8c
  4043e8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4043ea:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043ec:	f002 fe84 	bl	4070f8 <__ssprint_r>
  4043f0:	2800      	cmp	r0, #0
  4043f2:	f47f a958 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4043f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043f8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4043fc:	f7ff ba98 	b.w	403930 <_svfprintf_r+0x47c>
  404400:	9907      	ldr	r1, [sp, #28]
  404402:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404406:	f43f af19 	beq.w	40423c <_svfprintf_r+0xd88>
  40440a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40440c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404410:	f1bb 0f00 	cmp.w	fp, #0
  404414:	8804      	ldrh	r4, [r0, #0]
  404416:	f100 0704 	add.w	r7, r0, #4
  40441a:	f04f 0500 	mov.w	r5, #0
  40441e:	f2c0 81b9 	blt.w	404794 <_svfprintf_r+0x12e0>
  404422:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404426:	9307      	str	r3, [sp, #28]
  404428:	ea54 0305 	orrs.w	r3, r4, r5
  40442c:	970e      	str	r7, [sp, #56]	; 0x38
  40442e:	4617      	mov	r7, r2
  404430:	f47f a9e2 	bne.w	4037f8 <_svfprintf_r+0x344>
  404434:	f7ff bbbb 	b.w	403bae <_svfprintf_r+0x6fa>
  404438:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40443a:	4622      	mov	r2, r4
  40443c:	4620      	mov	r0, r4
  40443e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404440:	4623      	mov	r3, r4
  404442:	4621      	mov	r1, r4
  404444:	f003 fbac 	bl	407ba0 <__aeabi_dcmpun>
  404448:	2800      	cmp	r0, #0
  40444a:	f040 8317 	bne.w	404a7c <_svfprintf_r+0x15c8>
  40444e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404450:	f1bb 3fff 	cmp.w	fp, #4294967295
  404454:	f023 0320 	bic.w	r3, r3, #32
  404458:	930d      	str	r3, [sp, #52]	; 0x34
  40445a:	f000 8270 	beq.w	40493e <_svfprintf_r+0x148a>
  40445e:	2b47      	cmp	r3, #71	; 0x47
  404460:	f000 8192 	beq.w	404788 <_svfprintf_r+0x12d4>
  404464:	9b07      	ldr	r3, [sp, #28]
  404466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40446a:	9310      	str	r3, [sp, #64]	; 0x40
  40446c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40446e:	1e1f      	subs	r7, r3, #0
  404470:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404472:	9308      	str	r3, [sp, #32]
  404474:	bfbb      	ittet	lt
  404476:	463b      	movlt	r3, r7
  404478:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40447c:	2300      	movge	r3, #0
  40447e:	232d      	movlt	r3, #45	; 0x2d
  404480:	930f      	str	r3, [sp, #60]	; 0x3c
  404482:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404484:	2b66      	cmp	r3, #102	; 0x66
  404486:	f000 825d 	beq.w	404944 <_svfprintf_r+0x1490>
  40448a:	2b46      	cmp	r3, #70	; 0x46
  40448c:	f000 8151 	beq.w	404732 <_svfprintf_r+0x127e>
  404490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404492:	9a08      	ldr	r2, [sp, #32]
  404494:	2b45      	cmp	r3, #69	; 0x45
  404496:	a821      	add	r0, sp, #132	; 0x84
  404498:	a91e      	add	r1, sp, #120	; 0x78
  40449a:	bf0c      	ite	eq
  40449c:	f10b 0501 	addeq.w	r5, fp, #1
  4044a0:	465d      	movne	r5, fp
  4044a2:	9004      	str	r0, [sp, #16]
  4044a4:	9103      	str	r1, [sp, #12]
  4044a6:	a81d      	add	r0, sp, #116	; 0x74
  4044a8:	2102      	movs	r1, #2
  4044aa:	463b      	mov	r3, r7
  4044ac:	9002      	str	r0, [sp, #8]
  4044ae:	9501      	str	r5, [sp, #4]
  4044b0:	9100      	str	r1, [sp, #0]
  4044b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4044b4:	f000 fbf0 	bl	404c98 <_dtoa_r>
  4044b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044ba:	2b67      	cmp	r3, #103	; 0x67
  4044bc:	4606      	mov	r6, r0
  4044be:	f040 8290 	bne.w	4049e2 <_svfprintf_r+0x152e>
  4044c2:	9b07      	ldr	r3, [sp, #28]
  4044c4:	07da      	lsls	r2, r3, #31
  4044c6:	f140 82af 	bpl.w	404a28 <_svfprintf_r+0x1574>
  4044ca:	1974      	adds	r4, r6, r5
  4044cc:	9808      	ldr	r0, [sp, #32]
  4044ce:	4639      	mov	r1, r7
  4044d0:	2200      	movs	r2, #0
  4044d2:	2300      	movs	r3, #0
  4044d4:	f003 fb32 	bl	407b3c <__aeabi_dcmpeq>
  4044d8:	2800      	cmp	r0, #0
  4044da:	f040 8190 	bne.w	4047fe <_svfprintf_r+0x134a>
  4044de:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044e0:	429c      	cmp	r4, r3
  4044e2:	d906      	bls.n	4044f2 <_svfprintf_r+0x103e>
  4044e4:	2130      	movs	r1, #48	; 0x30
  4044e6:	1c5a      	adds	r2, r3, #1
  4044e8:	9221      	str	r2, [sp, #132]	; 0x84
  4044ea:	7019      	strb	r1, [r3, #0]
  4044ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4044ee:	429c      	cmp	r4, r3
  4044f0:	d8f9      	bhi.n	4044e6 <_svfprintf_r+0x1032>
  4044f2:	1b9b      	subs	r3, r3, r6
  4044f4:	9312      	str	r3, [sp, #72]	; 0x48
  4044f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4044f8:	2b47      	cmp	r3, #71	; 0x47
  4044fa:	f000 8179 	beq.w	4047f0 <_svfprintf_r+0x133c>
  4044fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404500:	2b65      	cmp	r3, #101	; 0x65
  404502:	f340 827d 	ble.w	404a00 <_svfprintf_r+0x154c>
  404506:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404508:	2b66      	cmp	r3, #102	; 0x66
  40450a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40450c:	9313      	str	r3, [sp, #76]	; 0x4c
  40450e:	f000 825b 	beq.w	4049c8 <_svfprintf_r+0x1514>
  404512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404514:	9912      	ldr	r1, [sp, #72]	; 0x48
  404516:	428a      	cmp	r2, r1
  404518:	f2c0 8230 	blt.w	40497c <_svfprintf_r+0x14c8>
  40451c:	9b07      	ldr	r3, [sp, #28]
  40451e:	07d9      	lsls	r1, r3, #31
  404520:	f100 8284 	bmi.w	404a2c <_svfprintf_r+0x1578>
  404524:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404528:	920d      	str	r2, [sp, #52]	; 0x34
  40452a:	2267      	movs	r2, #103	; 0x67
  40452c:	9211      	str	r2, [sp, #68]	; 0x44
  40452e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404530:	2a00      	cmp	r2, #0
  404532:	f040 8153 	bne.w	4047dc <_svfprintf_r+0x1328>
  404536:	9308      	str	r3, [sp, #32]
  404538:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40453a:	9307      	str	r3, [sp, #28]
  40453c:	4693      	mov	fp, r2
  40453e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404542:	f7ff b97d 	b.w	403840 <_svfprintf_r+0x38c>
  404546:	9907      	ldr	r1, [sp, #28]
  404548:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40454c:	d015      	beq.n	40457a <_svfprintf_r+0x10c6>
  40454e:	980e      	ldr	r0, [sp, #56]	; 0x38
  404550:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404554:	f1bb 0f00 	cmp.w	fp, #0
  404558:	8804      	ldrh	r4, [r0, #0]
  40455a:	f100 0704 	add.w	r7, r0, #4
  40455e:	f04f 0500 	mov.w	r5, #0
  404562:	db16      	blt.n	404592 <_svfprintf_r+0x10de>
  404564:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404568:	9307      	str	r3, [sp, #28]
  40456a:	ea54 0305 	orrs.w	r3, r4, r5
  40456e:	970e      	str	r7, [sp, #56]	; 0x38
  404570:	f43f ac3a 	beq.w	403de8 <_svfprintf_r+0x934>
  404574:	4617      	mov	r7, r2
  404576:	f7ff b8c2 	b.w	4036fe <_svfprintf_r+0x24a>
  40457a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40457c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404580:	f1bb 0f00 	cmp.w	fp, #0
  404584:	680c      	ldr	r4, [r1, #0]
  404586:	f101 0704 	add.w	r7, r1, #4
  40458a:	f04f 0500 	mov.w	r5, #0
  40458e:	f280 80a5 	bge.w	4046dc <_svfprintf_r+0x1228>
  404592:	970e      	str	r7, [sp, #56]	; 0x38
  404594:	2700      	movs	r7, #0
  404596:	f7ff b8b2 	b.w	4036fe <_svfprintf_r+0x24a>
  40459a:	9b07      	ldr	r3, [sp, #28]
  40459c:	06df      	lsls	r7, r3, #27
  40459e:	d40b      	bmi.n	4045b8 <_svfprintf_r+0x1104>
  4045a0:	9b07      	ldr	r3, [sp, #28]
  4045a2:	065e      	lsls	r6, r3, #25
  4045a4:	d508      	bpl.n	4045b8 <_svfprintf_r+0x1104>
  4045a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4045a8:	6813      	ldr	r3, [r2, #0]
  4045aa:	3204      	adds	r2, #4
  4045ac:	920e      	str	r2, [sp, #56]	; 0x38
  4045ae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4045b2:	801a      	strh	r2, [r3, #0]
  4045b4:	f7fe bfa4 	b.w	403500 <_svfprintf_r+0x4c>
  4045b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4045ba:	6813      	ldr	r3, [r2, #0]
  4045bc:	3204      	adds	r2, #4
  4045be:	920e      	str	r2, [sp, #56]	; 0x38
  4045c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045c2:	601a      	str	r2, [r3, #0]
  4045c4:	f7fe bf9c 	b.w	403500 <_svfprintf_r+0x4c>
  4045c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4045ca:	9b07      	ldr	r3, [sp, #28]
  4045cc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4045d0:	4613      	mov	r3, r2
  4045d2:	f103 0304 	add.w	r3, r3, #4
  4045d6:	bf0c      	ite	eq
  4045d8:	6814      	ldreq	r4, [r2, #0]
  4045da:	8814      	ldrhne	r4, [r2, #0]
  4045dc:	930e      	str	r3, [sp, #56]	; 0x38
  4045de:	2500      	movs	r5, #0
  4045e0:	f7ff bb02 	b.w	403be8 <_svfprintf_r+0x734>
  4045e4:	2700      	movs	r7, #0
  4045e6:	45bb      	cmp	fp, r7
  4045e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4045ec:	f6ff ac0e 	blt.w	403e0c <_svfprintf_r+0x958>
  4045f0:	9b07      	ldr	r3, [sp, #28]
  4045f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4045f6:	9307      	str	r3, [sp, #28]
  4045f8:	f7ff bbd6 	b.w	403da8 <_svfprintf_r+0x8f4>
  4045fc:	4614      	mov	r4, r2
  4045fe:	3301      	adds	r3, #1
  404600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404602:	9324      	str	r3, [sp, #144]	; 0x90
  404604:	442c      	add	r4, r5
  404606:	2b07      	cmp	r3, #7
  404608:	9425      	str	r4, [sp, #148]	; 0x94
  40460a:	e889 0024 	stmia.w	r9, {r2, r5}
  40460e:	f73f ae51 	bgt.w	4042b4 <_svfprintf_r+0xe00>
  404612:	f109 0908 	add.w	r9, r9, #8
  404616:	e658      	b.n	4042ca <_svfprintf_r+0xe16>
  404618:	aa23      	add	r2, sp, #140	; 0x8c
  40461a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40461c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40461e:	f002 fd6b 	bl	4070f8 <__ssprint_r>
  404622:	2800      	cmp	r0, #0
  404624:	f47f a83f 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404628:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40462a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40462e:	e40f      	b.n	403e50 <_svfprintf_r+0x99c>
  404630:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404632:	f7ff bbe4 	b.w	403dfe <_svfprintf_r+0x94a>
  404636:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404638:	4ab5      	ldr	r2, [pc, #724]	; (404910 <_svfprintf_r+0x145c>)
  40463a:	f8c9 2000 	str.w	r2, [r9]
  40463e:	3301      	adds	r3, #1
  404640:	3401      	adds	r4, #1
  404642:	2201      	movs	r2, #1
  404644:	2b07      	cmp	r3, #7
  404646:	9425      	str	r4, [sp, #148]	; 0x94
  404648:	9324      	str	r3, [sp, #144]	; 0x90
  40464a:	f8c9 2004 	str.w	r2, [r9, #4]
  40464e:	f300 808e 	bgt.w	40476e <_svfprintf_r+0x12ba>
  404652:	f109 0908 	add.w	r9, r9, #8
  404656:	b92d      	cbnz	r5, 404664 <_svfprintf_r+0x11b0>
  404658:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40465a:	b91b      	cbnz	r3, 404664 <_svfprintf_r+0x11b0>
  40465c:	9b07      	ldr	r3, [sp, #28]
  40465e:	07df      	lsls	r7, r3, #31
  404660:	f57f a9b8 	bpl.w	4039d4 <_svfprintf_r+0x520>
  404664:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404666:	9916      	ldr	r1, [sp, #88]	; 0x58
  404668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40466a:	f8c9 2000 	str.w	r2, [r9]
  40466e:	3301      	adds	r3, #1
  404670:	440c      	add	r4, r1
  404672:	2b07      	cmp	r3, #7
  404674:	9425      	str	r4, [sp, #148]	; 0x94
  404676:	f8c9 1004 	str.w	r1, [r9, #4]
  40467a:	9324      	str	r3, [sp, #144]	; 0x90
  40467c:	f300 81c2 	bgt.w	404a04 <_svfprintf_r+0x1550>
  404680:	f109 0908 	add.w	r9, r9, #8
  404684:	426d      	negs	r5, r5
  404686:	2d00      	cmp	r5, #0
  404688:	f340 809b 	ble.w	4047c2 <_svfprintf_r+0x130e>
  40468c:	4aa1      	ldr	r2, [pc, #644]	; (404914 <_svfprintf_r+0x1460>)
  40468e:	920f      	str	r2, [sp, #60]	; 0x3c
  404690:	2d10      	cmp	r5, #16
  404692:	f340 80c3 	ble.w	40481c <_svfprintf_r+0x1368>
  404696:	4622      	mov	r2, r4
  404698:	2710      	movs	r7, #16
  40469a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40469e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4046a0:	e005      	b.n	4046ae <_svfprintf_r+0x11fa>
  4046a2:	f109 0908 	add.w	r9, r9, #8
  4046a6:	3d10      	subs	r5, #16
  4046a8:	2d10      	cmp	r5, #16
  4046aa:	f340 80b6 	ble.w	40481a <_svfprintf_r+0x1366>
  4046ae:	3301      	adds	r3, #1
  4046b0:	3210      	adds	r2, #16
  4046b2:	2b07      	cmp	r3, #7
  4046b4:	9225      	str	r2, [sp, #148]	; 0x94
  4046b6:	9324      	str	r3, [sp, #144]	; 0x90
  4046b8:	f8c9 a000 	str.w	sl, [r9]
  4046bc:	f8c9 7004 	str.w	r7, [r9, #4]
  4046c0:	ddef      	ble.n	4046a2 <_svfprintf_r+0x11ee>
  4046c2:	aa23      	add	r2, sp, #140	; 0x8c
  4046c4:	4621      	mov	r1, r4
  4046c6:	4658      	mov	r0, fp
  4046c8:	f002 fd16 	bl	4070f8 <__ssprint_r>
  4046cc:	2800      	cmp	r0, #0
  4046ce:	f47e afea 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4046d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4046d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4046da:	e7e4      	b.n	4046a6 <_svfprintf_r+0x11f2>
  4046dc:	9a07      	ldr	r2, [sp, #28]
  4046de:	f7ff ba38 	b.w	403b52 <_svfprintf_r+0x69e>
  4046e2:	9a07      	ldr	r2, [sp, #28]
  4046e4:	e590      	b.n	404208 <_svfprintf_r+0xd54>
  4046e6:	9b07      	ldr	r3, [sp, #28]
  4046e8:	f043 0320 	orr.w	r3, r3, #32
  4046ec:	9307      	str	r3, [sp, #28]
  4046ee:	f108 0801 	add.w	r8, r8, #1
  4046f2:	f898 3000 	ldrb.w	r3, [r8]
  4046f6:	f7fe bf36 	b.w	403566 <_svfprintf_r+0xb2>
  4046fa:	aa23      	add	r2, sp, #140	; 0x8c
  4046fc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4046fe:	980a      	ldr	r0, [sp, #40]	; 0x28
  404700:	f002 fcfa 	bl	4070f8 <__ssprint_r>
  404704:	2800      	cmp	r0, #0
  404706:	f47e afce 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  40470a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40470c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404710:	f7ff bbb6 	b.w	403e80 <_svfprintf_r+0x9cc>
  404714:	2140      	movs	r1, #64	; 0x40
  404716:	980a      	ldr	r0, [sp, #40]	; 0x28
  404718:	f001 fb38 	bl	405d8c <_malloc_r>
  40471c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40471e:	6010      	str	r0, [r2, #0]
  404720:	6110      	str	r0, [r2, #16]
  404722:	2800      	cmp	r0, #0
  404724:	f000 81e5 	beq.w	404af2 <_svfprintf_r+0x163e>
  404728:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40472a:	2340      	movs	r3, #64	; 0x40
  40472c:	6153      	str	r3, [r2, #20]
  40472e:	f7fe bed8 	b.w	4034e2 <_svfprintf_r+0x2e>
  404732:	a821      	add	r0, sp, #132	; 0x84
  404734:	a91e      	add	r1, sp, #120	; 0x78
  404736:	9004      	str	r0, [sp, #16]
  404738:	9103      	str	r1, [sp, #12]
  40473a:	a81d      	add	r0, sp, #116	; 0x74
  40473c:	2103      	movs	r1, #3
  40473e:	9002      	str	r0, [sp, #8]
  404740:	9a08      	ldr	r2, [sp, #32]
  404742:	f8cd b004 	str.w	fp, [sp, #4]
  404746:	463b      	mov	r3, r7
  404748:	9100      	str	r1, [sp, #0]
  40474a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40474c:	f000 faa4 	bl	404c98 <_dtoa_r>
  404750:	465d      	mov	r5, fp
  404752:	4606      	mov	r6, r0
  404754:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404756:	2b46      	cmp	r3, #70	; 0x46
  404758:	eb06 0405 	add.w	r4, r6, r5
  40475c:	f47f aeb6 	bne.w	4044cc <_svfprintf_r+0x1018>
  404760:	7833      	ldrb	r3, [r6, #0]
  404762:	2b30      	cmp	r3, #48	; 0x30
  404764:	f000 817c 	beq.w	404a60 <_svfprintf_r+0x15ac>
  404768:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40476a:	442c      	add	r4, r5
  40476c:	e6ae      	b.n	4044cc <_svfprintf_r+0x1018>
  40476e:	aa23      	add	r2, sp, #140	; 0x8c
  404770:	9909      	ldr	r1, [sp, #36]	; 0x24
  404772:	980a      	ldr	r0, [sp, #40]	; 0x28
  404774:	f002 fcc0 	bl	4070f8 <__ssprint_r>
  404778:	2800      	cmp	r0, #0
  40477a:	f47e af94 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  40477e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404780:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404782:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404786:	e766      	b.n	404656 <_svfprintf_r+0x11a2>
  404788:	f1bb 0f00 	cmp.w	fp, #0
  40478c:	bf08      	it	eq
  40478e:	f04f 0b01 	moveq.w	fp, #1
  404792:	e667      	b.n	404464 <_svfprintf_r+0xfb0>
  404794:	970e      	str	r7, [sp, #56]	; 0x38
  404796:	4617      	mov	r7, r2
  404798:	e55e      	b.n	404258 <_svfprintf_r+0xda4>
  40479a:	4630      	mov	r0, r6
  40479c:	f7fe fbb0 	bl	402f00 <strlen>
  4047a0:	46a3      	mov	fp, r4
  4047a2:	4603      	mov	r3, r0
  4047a4:	900d      	str	r0, [sp, #52]	; 0x34
  4047a6:	f7ff baf4 	b.w	403d92 <_svfprintf_r+0x8de>
  4047aa:	aa23      	add	r2, sp, #140	; 0x8c
  4047ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4047b0:	f002 fca2 	bl	4070f8 <__ssprint_r>
  4047b4:	2800      	cmp	r0, #0
  4047b6:	f47e af76 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4047ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4047bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4047c2:	9912      	ldr	r1, [sp, #72]	; 0x48
  4047c4:	f8c9 6000 	str.w	r6, [r9]
  4047c8:	3301      	adds	r3, #1
  4047ca:	440c      	add	r4, r1
  4047cc:	2b07      	cmp	r3, #7
  4047ce:	9425      	str	r4, [sp, #148]	; 0x94
  4047d0:	9324      	str	r3, [sp, #144]	; 0x90
  4047d2:	f8c9 1004 	str.w	r1, [r9, #4]
  4047d6:	f77f a8fb 	ble.w	4039d0 <_svfprintf_r+0x51c>
  4047da:	e411      	b.n	404000 <_svfprintf_r+0xb4c>
  4047dc:	272d      	movs	r7, #45	; 0x2d
  4047de:	9308      	str	r3, [sp, #32]
  4047e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047e2:	9307      	str	r3, [sp, #28]
  4047e4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4047e8:	f04f 0b00 	mov.w	fp, #0
  4047ec:	f7ff b829 	b.w	403842 <_svfprintf_r+0x38e>
  4047f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4047f2:	1cdd      	adds	r5, r3, #3
  4047f4:	db1e      	blt.n	404834 <_svfprintf_r+0x1380>
  4047f6:	459b      	cmp	fp, r3
  4047f8:	db1c      	blt.n	404834 <_svfprintf_r+0x1380>
  4047fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4047fc:	e689      	b.n	404512 <_svfprintf_r+0x105e>
  4047fe:	4623      	mov	r3, r4
  404800:	e677      	b.n	4044f2 <_svfprintf_r+0x103e>
  404802:	aa23      	add	r2, sp, #140	; 0x8c
  404804:	9909      	ldr	r1, [sp, #36]	; 0x24
  404806:	980a      	ldr	r0, [sp, #40]	; 0x28
  404808:	f002 fc76 	bl	4070f8 <__ssprint_r>
  40480c:	2800      	cmp	r0, #0
  40480e:	f47e af4a 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404812:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404814:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404818:	e459      	b.n	4040ce <_svfprintf_r+0xc1a>
  40481a:	4614      	mov	r4, r2
  40481c:	3301      	adds	r3, #1
  40481e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404820:	9324      	str	r3, [sp, #144]	; 0x90
  404822:	442c      	add	r4, r5
  404824:	2b07      	cmp	r3, #7
  404826:	9425      	str	r4, [sp, #148]	; 0x94
  404828:	e889 0024 	stmia.w	r9, {r2, r5}
  40482c:	dcbd      	bgt.n	4047aa <_svfprintf_r+0x12f6>
  40482e:	f109 0908 	add.w	r9, r9, #8
  404832:	e7c6      	b.n	4047c2 <_svfprintf_r+0x130e>
  404834:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404836:	3a02      	subs	r2, #2
  404838:	9211      	str	r2, [sp, #68]	; 0x44
  40483a:	3b01      	subs	r3, #1
  40483c:	2b00      	cmp	r3, #0
  40483e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404842:	931d      	str	r3, [sp, #116]	; 0x74
  404844:	bfb8      	it	lt
  404846:	425b      	neglt	r3, r3
  404848:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40484c:	bfb4      	ite	lt
  40484e:	222d      	movlt	r2, #45	; 0x2d
  404850:	222b      	movge	r2, #43	; 0x2b
  404852:	2b09      	cmp	r3, #9
  404854:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404858:	f340 80f1 	ble.w	404a3e <_svfprintf_r+0x158a>
  40485c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  404860:	4604      	mov	r4, r0
  404862:	4a2d      	ldr	r2, [pc, #180]	; (404918 <_svfprintf_r+0x1464>)
  404864:	fb82 2103 	smull	r2, r1, r2, r3
  404868:	17da      	asrs	r2, r3, #31
  40486a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40486e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  404872:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  404876:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40487a:	2a09      	cmp	r2, #9
  40487c:	4613      	mov	r3, r2
  40487e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  404882:	dcee      	bgt.n	404862 <_svfprintf_r+0x13ae>
  404884:	4621      	mov	r1, r4
  404886:	3330      	adds	r3, #48	; 0x30
  404888:	b2da      	uxtb	r2, r3
  40488a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40488e:	4288      	cmp	r0, r1
  404890:	f240 813a 	bls.w	404b08 <_svfprintf_r+0x1654>
  404894:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  404898:	4623      	mov	r3, r4
  40489a:	e001      	b.n	4048a0 <_svfprintf_r+0x13ec>
  40489c:	f813 2b01 	ldrb.w	r2, [r3], #1
  4048a0:	f801 2b01 	strb.w	r2, [r1], #1
  4048a4:	4298      	cmp	r0, r3
  4048a6:	d1f9      	bne.n	40489c <_svfprintf_r+0x13e8>
  4048a8:	1c43      	adds	r3, r0, #1
  4048aa:	1b1b      	subs	r3, r3, r4
  4048ac:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4048b0:	4413      	add	r3, r2
  4048b2:	aa1f      	add	r2, sp, #124	; 0x7c
  4048b4:	1a9b      	subs	r3, r3, r2
  4048b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4048b8:	9319      	str	r3, [sp, #100]	; 0x64
  4048ba:	2a01      	cmp	r2, #1
  4048bc:	4413      	add	r3, r2
  4048be:	930d      	str	r3, [sp, #52]	; 0x34
  4048c0:	f340 80ea 	ble.w	404a98 <_svfprintf_r+0x15e4>
  4048c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4048c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4048c8:	4413      	add	r3, r2
  4048ca:	2200      	movs	r2, #0
  4048cc:	930d      	str	r3, [sp, #52]	; 0x34
  4048ce:	9213      	str	r2, [sp, #76]	; 0x4c
  4048d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048d4:	e62b      	b.n	40452e <_svfprintf_r+0x107a>
  4048d6:	aa23      	add	r2, sp, #140	; 0x8c
  4048d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4048da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4048dc:	f002 fc0c 	bl	4070f8 <__ssprint_r>
  4048e0:	2800      	cmp	r0, #0
  4048e2:	f47e aee0 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  4048e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4048e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4048ee:	e4f6      	b.n	4042de <_svfprintf_r+0xe2a>
  4048f0:	2d06      	cmp	r5, #6
  4048f2:	462b      	mov	r3, r5
  4048f4:	bf28      	it	cs
  4048f6:	2306      	movcs	r3, #6
  4048f8:	930d      	str	r3, [sp, #52]	; 0x34
  4048fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048fe:	46b3      	mov	fp, r6
  404900:	970e      	str	r7, [sp, #56]	; 0x38
  404902:	9613      	str	r6, [sp, #76]	; 0x4c
  404904:	4637      	mov	r7, r6
  404906:	9308      	str	r3, [sp, #32]
  404908:	4e04      	ldr	r6, [pc, #16]	; (40491c <_svfprintf_r+0x1468>)
  40490a:	f7fe bf99 	b.w	403840 <_svfprintf_r+0x38c>
  40490e:	bf00      	nop
  404910:	00407f04 	.word	0x00407f04
  404914:	00407eb4 	.word	0x00407eb4
  404918:	66666667 	.word	0x66666667
  40491c:	00407efc 	.word	0x00407efc
  404920:	aa23      	add	r2, sp, #140	; 0x8c
  404922:	9909      	ldr	r1, [sp, #36]	; 0x24
  404924:	980a      	ldr	r0, [sp, #40]	; 0x28
  404926:	f002 fbe7 	bl	4070f8 <__ssprint_r>
  40492a:	2800      	cmp	r0, #0
  40492c:	f47e aebb 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404932:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404934:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404936:	1ad3      	subs	r3, r2, r3
  404938:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40493c:	e4e7      	b.n	40430e <_svfprintf_r+0xe5a>
  40493e:	f04f 0b06 	mov.w	fp, #6
  404942:	e58f      	b.n	404464 <_svfprintf_r+0xfb0>
  404944:	a821      	add	r0, sp, #132	; 0x84
  404946:	a91e      	add	r1, sp, #120	; 0x78
  404948:	9004      	str	r0, [sp, #16]
  40494a:	9103      	str	r1, [sp, #12]
  40494c:	a81d      	add	r0, sp, #116	; 0x74
  40494e:	2103      	movs	r1, #3
  404950:	9002      	str	r0, [sp, #8]
  404952:	9a08      	ldr	r2, [sp, #32]
  404954:	f8cd b004 	str.w	fp, [sp, #4]
  404958:	463b      	mov	r3, r7
  40495a:	9100      	str	r1, [sp, #0]
  40495c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40495e:	f000 f99b 	bl	404c98 <_dtoa_r>
  404962:	465d      	mov	r5, fp
  404964:	4606      	mov	r6, r0
  404966:	eb00 040b 	add.w	r4, r0, fp
  40496a:	e6f9      	b.n	404760 <_svfprintf_r+0x12ac>
  40496c:	9307      	str	r3, [sp, #28]
  40496e:	f7ff b959 	b.w	403c24 <_svfprintf_r+0x770>
  404972:	272d      	movs	r7, #45	; 0x2d
  404974:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404978:	f7ff b8b2 	b.w	403ae0 <_svfprintf_r+0x62c>
  40497c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40497e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404980:	4413      	add	r3, r2
  404982:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404984:	930d      	str	r3, [sp, #52]	; 0x34
  404986:	2a00      	cmp	r2, #0
  404988:	dd7e      	ble.n	404a88 <_svfprintf_r+0x15d4>
  40498a:	2267      	movs	r2, #103	; 0x67
  40498c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404990:	9211      	str	r2, [sp, #68]	; 0x44
  404992:	e5cc      	b.n	40452e <_svfprintf_r+0x107a>
  404994:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  404998:	970e      	str	r7, [sp, #56]	; 0x38
  40499a:	9308      	str	r3, [sp, #32]
  40499c:	950d      	str	r5, [sp, #52]	; 0x34
  40499e:	4683      	mov	fp, r0
  4049a0:	9013      	str	r0, [sp, #76]	; 0x4c
  4049a2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4049a6:	f7fe bf4b 	b.w	403840 <_svfprintf_r+0x38c>
  4049aa:	9b07      	ldr	r3, [sp, #28]
  4049ac:	07db      	lsls	r3, r3, #31
  4049ae:	465f      	mov	r7, fp
  4049b0:	d505      	bpl.n	4049be <_svfprintf_r+0x150a>
  4049b2:	ae40      	add	r6, sp, #256	; 0x100
  4049b4:	2330      	movs	r3, #48	; 0x30
  4049b6:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4049ba:	f7fe bf37 	b.w	40382c <_svfprintf_r+0x378>
  4049be:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4049c2:	ae30      	add	r6, sp, #192	; 0xc0
  4049c4:	f7fe bf35 	b.w	403832 <_svfprintf_r+0x37e>
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	dd7d      	ble.n	404ac8 <_svfprintf_r+0x1614>
  4049cc:	f1bb 0f00 	cmp.w	fp, #0
  4049d0:	d13d      	bne.n	404a4e <_svfprintf_r+0x159a>
  4049d2:	9a07      	ldr	r2, [sp, #28]
  4049d4:	07d4      	lsls	r4, r2, #31
  4049d6:	d43a      	bmi.n	404a4e <_svfprintf_r+0x159a>
  4049d8:	461a      	mov	r2, r3
  4049da:	920d      	str	r2, [sp, #52]	; 0x34
  4049dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4049e0:	e5a5      	b.n	40452e <_svfprintf_r+0x107a>
  4049e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049e4:	2b47      	cmp	r3, #71	; 0x47
  4049e6:	f47f ad70 	bne.w	4044ca <_svfprintf_r+0x1016>
  4049ea:	9b07      	ldr	r3, [sp, #28]
  4049ec:	07db      	lsls	r3, r3, #31
  4049ee:	f53f aeb1 	bmi.w	404754 <_svfprintf_r+0x12a0>
  4049f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4049f4:	1b9b      	subs	r3, r3, r6
  4049f6:	9312      	str	r3, [sp, #72]	; 0x48
  4049f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4049fa:	2b47      	cmp	r3, #71	; 0x47
  4049fc:	f43f aef8 	beq.w	4047f0 <_svfprintf_r+0x133c>
  404a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404a02:	e71a      	b.n	40483a <_svfprintf_r+0x1386>
  404a04:	aa23      	add	r2, sp, #140	; 0x8c
  404a06:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a08:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a0a:	f002 fb75 	bl	4070f8 <__ssprint_r>
  404a0e:	2800      	cmp	r0, #0
  404a10:	f47e ae49 	bne.w	4036a6 <_svfprintf_r+0x1f2>
  404a14:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404a16:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a1a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a1e:	e631      	b.n	404684 <_svfprintf_r+0x11d0>
  404a20:	46a0      	mov	r8, r4
  404a22:	2500      	movs	r5, #0
  404a24:	f7fe bda1 	b.w	40356a <_svfprintf_r+0xb6>
  404a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404a2a:	e562      	b.n	4044f2 <_svfprintf_r+0x103e>
  404a2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a30:	4413      	add	r3, r2
  404a32:	2267      	movs	r2, #103	; 0x67
  404a34:	930d      	str	r3, [sp, #52]	; 0x34
  404a36:	9211      	str	r2, [sp, #68]	; 0x44
  404a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a3c:	e577      	b.n	40452e <_svfprintf_r+0x107a>
  404a3e:	3330      	adds	r3, #48	; 0x30
  404a40:	2230      	movs	r2, #48	; 0x30
  404a42:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  404a46:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  404a4a:	ab20      	add	r3, sp, #128	; 0x80
  404a4c:	e731      	b.n	4048b2 <_svfprintf_r+0x13fe>
  404a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a50:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a52:	189d      	adds	r5, r3, r2
  404a54:	eb05 030b 	add.w	r3, r5, fp
  404a58:	930d      	str	r3, [sp, #52]	; 0x34
  404a5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a5e:	e566      	b.n	40452e <_svfprintf_r+0x107a>
  404a60:	9808      	ldr	r0, [sp, #32]
  404a62:	4639      	mov	r1, r7
  404a64:	2200      	movs	r2, #0
  404a66:	2300      	movs	r3, #0
  404a68:	f003 f868 	bl	407b3c <__aeabi_dcmpeq>
  404a6c:	2800      	cmp	r0, #0
  404a6e:	f47f ae7b 	bne.w	404768 <_svfprintf_r+0x12b4>
  404a72:	f1c5 0501 	rsb	r5, r5, #1
  404a76:	951d      	str	r5, [sp, #116]	; 0x74
  404a78:	442c      	add	r4, r5
  404a7a:	e527      	b.n	4044cc <_svfprintf_r+0x1018>
  404a7c:	4e32      	ldr	r6, [pc, #200]	; (404b48 <_svfprintf_r+0x1694>)
  404a7e:	4b33      	ldr	r3, [pc, #204]	; (404b4c <_svfprintf_r+0x1698>)
  404a80:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404a84:	f7ff b82e 	b.w	403ae4 <_svfprintf_r+0x630>
  404a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404a8c:	f1c3 0301 	rsb	r3, r3, #1
  404a90:	441a      	add	r2, r3
  404a92:	4613      	mov	r3, r2
  404a94:	920d      	str	r2, [sp, #52]	; 0x34
  404a96:	e778      	b.n	40498a <_svfprintf_r+0x14d6>
  404a98:	9b07      	ldr	r3, [sp, #28]
  404a9a:	f013 0301 	ands.w	r3, r3, #1
  404a9e:	f47f af11 	bne.w	4048c4 <_svfprintf_r+0x1410>
  404aa2:	9313      	str	r3, [sp, #76]	; 0x4c
  404aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404aaa:	e540      	b.n	40452e <_svfprintf_r+0x107a>
  404aac:	980e      	ldr	r0, [sp, #56]	; 0x38
  404aae:	f898 3001 	ldrb.w	r3, [r8, #1]
  404ab2:	6805      	ldr	r5, [r0, #0]
  404ab4:	3004      	adds	r0, #4
  404ab6:	2d00      	cmp	r5, #0
  404ab8:	900e      	str	r0, [sp, #56]	; 0x38
  404aba:	46a0      	mov	r8, r4
  404abc:	f6be ad53 	bge.w	403566 <_svfprintf_r+0xb2>
  404ac0:	f04f 35ff 	mov.w	r5, #4294967295
  404ac4:	f7fe bd4f 	b.w	403566 <_svfprintf_r+0xb2>
  404ac8:	f1bb 0f00 	cmp.w	fp, #0
  404acc:	d102      	bne.n	404ad4 <_svfprintf_r+0x1620>
  404ace:	9b07      	ldr	r3, [sp, #28]
  404ad0:	07d8      	lsls	r0, r3, #31
  404ad2:	d507      	bpl.n	404ae4 <_svfprintf_r+0x1630>
  404ad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  404ad6:	1c5d      	adds	r5, r3, #1
  404ad8:	eb05 030b 	add.w	r3, r5, fp
  404adc:	930d      	str	r3, [sp, #52]	; 0x34
  404ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ae2:	e524      	b.n	40452e <_svfprintf_r+0x107a>
  404ae4:	2301      	movs	r3, #1
  404ae6:	930d      	str	r3, [sp, #52]	; 0x34
  404ae8:	e521      	b.n	40452e <_svfprintf_r+0x107a>
  404aea:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404aee:	f7ff b921 	b.w	403d34 <_svfprintf_r+0x880>
  404af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404af4:	230c      	movs	r3, #12
  404af6:	6013      	str	r3, [r2, #0]
  404af8:	f04f 30ff 	mov.w	r0, #4294967295
  404afc:	f7fe bddc 	b.w	4036b8 <_svfprintf_r+0x204>
  404b00:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b04:	f7ff b8f9 	b.w	403cfa <_svfprintf_r+0x846>
  404b08:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  404b0c:	e6d1      	b.n	4048b2 <_svfprintf_r+0x13fe>
  404b0e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b12:	f7fe bdd9 	b.w	4036c8 <_svfprintf_r+0x214>
  404b16:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b1a:	f7ff b857 	b.w	403bcc <_svfprintf_r+0x718>
  404b1e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b22:	f7ff b825 	b.w	403b70 <_svfprintf_r+0x6bc>
  404b26:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b2a:	f7ff b94c 	b.w	403dc6 <_svfprintf_r+0x912>
  404b2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b32:	f7fe bff3 	b.w	403b1c <_svfprintf_r+0x668>
  404b36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b3a:	f7fe bfa3 	b.w	403a84 <_svfprintf_r+0x5d0>
  404b3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b42:	f7fe be33 	b.w	4037ac <_svfprintf_r+0x2f8>
  404b46:	bf00      	nop
  404b48:	00407ed0 	.word	0x00407ed0
  404b4c:	00407ecc 	.word	0x00407ecc

00404b50 <register_fini>:
  404b50:	4b02      	ldr	r3, [pc, #8]	; (404b5c <register_fini+0xc>)
  404b52:	b113      	cbz	r3, 404b5a <register_fini+0xa>
  404b54:	4802      	ldr	r0, [pc, #8]	; (404b60 <register_fini+0x10>)
  404b56:	f000 b805 	b.w	404b64 <atexit>
  404b5a:	4770      	bx	lr
  404b5c:	00000000 	.word	0x00000000
  404b60:	00405af1 	.word	0x00405af1

00404b64 <atexit>:
  404b64:	2300      	movs	r3, #0
  404b66:	4601      	mov	r1, r0
  404b68:	461a      	mov	r2, r3
  404b6a:	4618      	mov	r0, r3
  404b6c:	f002 bb44 	b.w	4071f8 <__register_exitproc>

00404b70 <quorem>:
  404b70:	6902      	ldr	r2, [r0, #16]
  404b72:	690b      	ldr	r3, [r1, #16]
  404b74:	4293      	cmp	r3, r2
  404b76:	f300 808d 	bgt.w	404c94 <quorem+0x124>
  404b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b7e:	f103 38ff 	add.w	r8, r3, #4294967295
  404b82:	f101 0714 	add.w	r7, r1, #20
  404b86:	f100 0b14 	add.w	fp, r0, #20
  404b8a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404b8e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404b92:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404b96:	b083      	sub	sp, #12
  404b98:	3201      	adds	r2, #1
  404b9a:	fbb3 f9f2 	udiv	r9, r3, r2
  404b9e:	eb0b 0304 	add.w	r3, fp, r4
  404ba2:	9400      	str	r4, [sp, #0]
  404ba4:	eb07 0a04 	add.w	sl, r7, r4
  404ba8:	9301      	str	r3, [sp, #4]
  404baa:	f1b9 0f00 	cmp.w	r9, #0
  404bae:	d039      	beq.n	404c24 <quorem+0xb4>
  404bb0:	2500      	movs	r5, #0
  404bb2:	46bc      	mov	ip, r7
  404bb4:	46de      	mov	lr, fp
  404bb6:	462b      	mov	r3, r5
  404bb8:	f85c 6b04 	ldr.w	r6, [ip], #4
  404bbc:	f8de 2000 	ldr.w	r2, [lr]
  404bc0:	b2b4      	uxth	r4, r6
  404bc2:	fb09 5504 	mla	r5, r9, r4, r5
  404bc6:	0c36      	lsrs	r6, r6, #16
  404bc8:	0c2c      	lsrs	r4, r5, #16
  404bca:	fb09 4406 	mla	r4, r9, r6, r4
  404bce:	b2ad      	uxth	r5, r5
  404bd0:	1b5b      	subs	r3, r3, r5
  404bd2:	b2a6      	uxth	r6, r4
  404bd4:	fa13 f382 	uxtah	r3, r3, r2
  404bd8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  404bdc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404be0:	b29b      	uxth	r3, r3
  404be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404be6:	45e2      	cmp	sl, ip
  404be8:	f84e 3b04 	str.w	r3, [lr], #4
  404bec:	ea4f 4514 	mov.w	r5, r4, lsr #16
  404bf0:	ea4f 4326 	mov.w	r3, r6, asr #16
  404bf4:	d2e0      	bcs.n	404bb8 <quorem+0x48>
  404bf6:	9b00      	ldr	r3, [sp, #0]
  404bf8:	f85b 3003 	ldr.w	r3, [fp, r3]
  404bfc:	b993      	cbnz	r3, 404c24 <quorem+0xb4>
  404bfe:	9c01      	ldr	r4, [sp, #4]
  404c00:	1f23      	subs	r3, r4, #4
  404c02:	459b      	cmp	fp, r3
  404c04:	d20c      	bcs.n	404c20 <quorem+0xb0>
  404c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404c0a:	b94b      	cbnz	r3, 404c20 <quorem+0xb0>
  404c0c:	f1a4 0308 	sub.w	r3, r4, #8
  404c10:	e002      	b.n	404c18 <quorem+0xa8>
  404c12:	681a      	ldr	r2, [r3, #0]
  404c14:	3b04      	subs	r3, #4
  404c16:	b91a      	cbnz	r2, 404c20 <quorem+0xb0>
  404c18:	459b      	cmp	fp, r3
  404c1a:	f108 38ff 	add.w	r8, r8, #4294967295
  404c1e:	d3f8      	bcc.n	404c12 <quorem+0xa2>
  404c20:	f8c0 8010 	str.w	r8, [r0, #16]
  404c24:	4604      	mov	r4, r0
  404c26:	f001 fef7 	bl	406a18 <__mcmp>
  404c2a:	2800      	cmp	r0, #0
  404c2c:	db2e      	blt.n	404c8c <quorem+0x11c>
  404c2e:	f109 0901 	add.w	r9, r9, #1
  404c32:	465d      	mov	r5, fp
  404c34:	2300      	movs	r3, #0
  404c36:	f857 1b04 	ldr.w	r1, [r7], #4
  404c3a:	6828      	ldr	r0, [r5, #0]
  404c3c:	b28a      	uxth	r2, r1
  404c3e:	1a9a      	subs	r2, r3, r2
  404c40:	0c09      	lsrs	r1, r1, #16
  404c42:	fa12 f280 	uxtah	r2, r2, r0
  404c46:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  404c4a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404c4e:	b291      	uxth	r1, r2
  404c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  404c54:	45ba      	cmp	sl, r7
  404c56:	f845 1b04 	str.w	r1, [r5], #4
  404c5a:	ea4f 4323 	mov.w	r3, r3, asr #16
  404c5e:	d2ea      	bcs.n	404c36 <quorem+0xc6>
  404c60:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404c64:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404c68:	b982      	cbnz	r2, 404c8c <quorem+0x11c>
  404c6a:	1f1a      	subs	r2, r3, #4
  404c6c:	4593      	cmp	fp, r2
  404c6e:	d20b      	bcs.n	404c88 <quorem+0x118>
  404c70:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404c74:	b942      	cbnz	r2, 404c88 <quorem+0x118>
  404c76:	3b08      	subs	r3, #8
  404c78:	e002      	b.n	404c80 <quorem+0x110>
  404c7a:	681a      	ldr	r2, [r3, #0]
  404c7c:	3b04      	subs	r3, #4
  404c7e:	b91a      	cbnz	r2, 404c88 <quorem+0x118>
  404c80:	459b      	cmp	fp, r3
  404c82:	f108 38ff 	add.w	r8, r8, #4294967295
  404c86:	d3f8      	bcc.n	404c7a <quorem+0x10a>
  404c88:	f8c4 8010 	str.w	r8, [r4, #16]
  404c8c:	4648      	mov	r0, r9
  404c8e:	b003      	add	sp, #12
  404c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c94:	2000      	movs	r0, #0
  404c96:	4770      	bx	lr

00404c98 <_dtoa_r>:
  404c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404c9e:	b097      	sub	sp, #92	; 0x5c
  404ca0:	4681      	mov	r9, r0
  404ca2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  404ca4:	4692      	mov	sl, r2
  404ca6:	469b      	mov	fp, r3
  404ca8:	b149      	cbz	r1, 404cbe <_dtoa_r+0x26>
  404caa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404cac:	604a      	str	r2, [r1, #4]
  404cae:	2301      	movs	r3, #1
  404cb0:	4093      	lsls	r3, r2
  404cb2:	608b      	str	r3, [r1, #8]
  404cb4:	f001 fcce 	bl	406654 <_Bfree>
  404cb8:	2300      	movs	r3, #0
  404cba:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  404cbe:	f1bb 0f00 	cmp.w	fp, #0
  404cc2:	46d8      	mov	r8, fp
  404cc4:	db33      	blt.n	404d2e <_dtoa_r+0x96>
  404cc6:	2300      	movs	r3, #0
  404cc8:	6023      	str	r3, [r4, #0]
  404cca:	4ba5      	ldr	r3, [pc, #660]	; (404f60 <_dtoa_r+0x2c8>)
  404ccc:	461a      	mov	r2, r3
  404cce:	ea08 0303 	and.w	r3, r8, r3
  404cd2:	4293      	cmp	r3, r2
  404cd4:	d014      	beq.n	404d00 <_dtoa_r+0x68>
  404cd6:	4650      	mov	r0, sl
  404cd8:	4659      	mov	r1, fp
  404cda:	2200      	movs	r2, #0
  404cdc:	2300      	movs	r3, #0
  404cde:	f002 ff2d 	bl	407b3c <__aeabi_dcmpeq>
  404ce2:	4605      	mov	r5, r0
  404ce4:	b348      	cbz	r0, 404d3a <_dtoa_r+0xa2>
  404ce6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404ce8:	2301      	movs	r3, #1
  404cea:	6013      	str	r3, [r2, #0]
  404cec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cee:	2b00      	cmp	r3, #0
  404cf0:	f000 80c5 	beq.w	404e7e <_dtoa_r+0x1e6>
  404cf4:	489b      	ldr	r0, [pc, #620]	; (404f64 <_dtoa_r+0x2cc>)
  404cf6:	6018      	str	r0, [r3, #0]
  404cf8:	3801      	subs	r0, #1
  404cfa:	b017      	add	sp, #92	; 0x5c
  404cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d00:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404d02:	f242 730f 	movw	r3, #9999	; 0x270f
  404d06:	6013      	str	r3, [r2, #0]
  404d08:	f1ba 0f00 	cmp.w	sl, #0
  404d0c:	f000 80a2 	beq.w	404e54 <_dtoa_r+0x1bc>
  404d10:	4895      	ldr	r0, [pc, #596]	; (404f68 <_dtoa_r+0x2d0>)
  404d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d14:	2b00      	cmp	r3, #0
  404d16:	d0f0      	beq.n	404cfa <_dtoa_r+0x62>
  404d18:	78c3      	ldrb	r3, [r0, #3]
  404d1a:	2b00      	cmp	r3, #0
  404d1c:	f000 80b1 	beq.w	404e82 <_dtoa_r+0x1ea>
  404d20:	f100 0308 	add.w	r3, r0, #8
  404d24:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404d26:	6013      	str	r3, [r2, #0]
  404d28:	b017      	add	sp, #92	; 0x5c
  404d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d2e:	2301      	movs	r3, #1
  404d30:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  404d34:	6023      	str	r3, [r4, #0]
  404d36:	46c3      	mov	fp, r8
  404d38:	e7c7      	b.n	404cca <_dtoa_r+0x32>
  404d3a:	aa14      	add	r2, sp, #80	; 0x50
  404d3c:	ab15      	add	r3, sp, #84	; 0x54
  404d3e:	9201      	str	r2, [sp, #4]
  404d40:	9300      	str	r3, [sp, #0]
  404d42:	4652      	mov	r2, sl
  404d44:	465b      	mov	r3, fp
  404d46:	4648      	mov	r0, r9
  404d48:	f001 ff10 	bl	406b6c <__d2b>
  404d4c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  404d50:	9008      	str	r0, [sp, #32]
  404d52:	f040 8088 	bne.w	404e66 <_dtoa_r+0x1ce>
  404d56:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404d58:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404d5a:	442c      	add	r4, r5
  404d5c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  404d60:	2b20      	cmp	r3, #32
  404d62:	f340 8291 	ble.w	405288 <_dtoa_r+0x5f0>
  404d66:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404d6a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  404d6e:	fa08 f803 	lsl.w	r8, r8, r3
  404d72:	fa2a f000 	lsr.w	r0, sl, r0
  404d76:	ea40 0008 	orr.w	r0, r0, r8
  404d7a:	f002 fc01 	bl	407580 <__aeabi_ui2d>
  404d7e:	2301      	movs	r3, #1
  404d80:	3c01      	subs	r4, #1
  404d82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404d86:	9310      	str	r3, [sp, #64]	; 0x40
  404d88:	2200      	movs	r2, #0
  404d8a:	4b78      	ldr	r3, [pc, #480]	; (404f6c <_dtoa_r+0x2d4>)
  404d8c:	f002 faba 	bl	407304 <__aeabi_dsub>
  404d90:	a36d      	add	r3, pc, #436	; (adr r3, 404f48 <_dtoa_r+0x2b0>)
  404d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d96:	f002 fc69 	bl	40766c <__aeabi_dmul>
  404d9a:	a36d      	add	r3, pc, #436	; (adr r3, 404f50 <_dtoa_r+0x2b8>)
  404d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404da0:	f002 fab2 	bl	407308 <__adddf3>
  404da4:	4606      	mov	r6, r0
  404da6:	4620      	mov	r0, r4
  404da8:	460f      	mov	r7, r1
  404daa:	f002 fbf9 	bl	4075a0 <__aeabi_i2d>
  404dae:	a36a      	add	r3, pc, #424	; (adr r3, 404f58 <_dtoa_r+0x2c0>)
  404db0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404db4:	f002 fc5a 	bl	40766c <__aeabi_dmul>
  404db8:	4602      	mov	r2, r0
  404dba:	460b      	mov	r3, r1
  404dbc:	4630      	mov	r0, r6
  404dbe:	4639      	mov	r1, r7
  404dc0:	f002 faa2 	bl	407308 <__adddf3>
  404dc4:	4606      	mov	r6, r0
  404dc6:	460f      	mov	r7, r1
  404dc8:	f002 ff00 	bl	407bcc <__aeabi_d2iz>
  404dcc:	2200      	movs	r2, #0
  404dce:	9004      	str	r0, [sp, #16]
  404dd0:	2300      	movs	r3, #0
  404dd2:	4630      	mov	r0, r6
  404dd4:	4639      	mov	r1, r7
  404dd6:	f002 febb 	bl	407b50 <__aeabi_dcmplt>
  404dda:	2800      	cmp	r0, #0
  404ddc:	f040 8230 	bne.w	405240 <_dtoa_r+0x5a8>
  404de0:	9e04      	ldr	r6, [sp, #16]
  404de2:	2e16      	cmp	r6, #22
  404de4:	f200 8229 	bhi.w	40523a <_dtoa_r+0x5a2>
  404de8:	4b61      	ldr	r3, [pc, #388]	; (404f70 <_dtoa_r+0x2d8>)
  404dea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  404dee:	e9d3 0100 	ldrd	r0, r1, [r3]
  404df2:	4652      	mov	r2, sl
  404df4:	465b      	mov	r3, fp
  404df6:	f002 fec9 	bl	407b8c <__aeabi_dcmpgt>
  404dfa:	2800      	cmp	r0, #0
  404dfc:	f000 8249 	beq.w	405292 <_dtoa_r+0x5fa>
  404e00:	1e73      	subs	r3, r6, #1
  404e02:	9304      	str	r3, [sp, #16]
  404e04:	2300      	movs	r3, #0
  404e06:	930c      	str	r3, [sp, #48]	; 0x30
  404e08:	1b2c      	subs	r4, r5, r4
  404e0a:	1e63      	subs	r3, r4, #1
  404e0c:	9302      	str	r3, [sp, #8]
  404e0e:	f100 8232 	bmi.w	405276 <_dtoa_r+0x5de>
  404e12:	2300      	movs	r3, #0
  404e14:	9305      	str	r3, [sp, #20]
  404e16:	9b04      	ldr	r3, [sp, #16]
  404e18:	2b00      	cmp	r3, #0
  404e1a:	f2c0 8223 	blt.w	405264 <_dtoa_r+0x5cc>
  404e1e:	9a02      	ldr	r2, [sp, #8]
  404e20:	930b      	str	r3, [sp, #44]	; 0x2c
  404e22:	4611      	mov	r1, r2
  404e24:	4419      	add	r1, r3
  404e26:	2300      	movs	r3, #0
  404e28:	9102      	str	r1, [sp, #8]
  404e2a:	930a      	str	r3, [sp, #40]	; 0x28
  404e2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404e2e:	2b09      	cmp	r3, #9
  404e30:	d829      	bhi.n	404e86 <_dtoa_r+0x1ee>
  404e32:	2b05      	cmp	r3, #5
  404e34:	f340 8658 	ble.w	405ae8 <_dtoa_r+0xe50>
  404e38:	3b04      	subs	r3, #4
  404e3a:	9320      	str	r3, [sp, #128]	; 0x80
  404e3c:	2500      	movs	r5, #0
  404e3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404e40:	3b02      	subs	r3, #2
  404e42:	2b03      	cmp	r3, #3
  404e44:	f200 8635 	bhi.w	405ab2 <_dtoa_r+0xe1a>
  404e48:	e8df f013 	tbh	[pc, r3, lsl #1]
  404e4c:	0228032c 	.word	0x0228032c
  404e50:	04590337 	.word	0x04590337
  404e54:	4b44      	ldr	r3, [pc, #272]	; (404f68 <_dtoa_r+0x2d0>)
  404e56:	4a47      	ldr	r2, [pc, #284]	; (404f74 <_dtoa_r+0x2dc>)
  404e58:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404e5c:	2800      	cmp	r0, #0
  404e5e:	bf14      	ite	ne
  404e60:	4618      	movne	r0, r3
  404e62:	4610      	moveq	r0, r2
  404e64:	e755      	b.n	404d12 <_dtoa_r+0x7a>
  404e66:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404e6a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404e6e:	9510      	str	r5, [sp, #64]	; 0x40
  404e70:	4650      	mov	r0, sl
  404e72:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  404e76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404e7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404e7c:	e784      	b.n	404d88 <_dtoa_r+0xf0>
  404e7e:	483e      	ldr	r0, [pc, #248]	; (404f78 <_dtoa_r+0x2e0>)
  404e80:	e73b      	b.n	404cfa <_dtoa_r+0x62>
  404e82:	1cc3      	adds	r3, r0, #3
  404e84:	e74e      	b.n	404d24 <_dtoa_r+0x8c>
  404e86:	2100      	movs	r1, #0
  404e88:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  404e8c:	4648      	mov	r0, r9
  404e8e:	9120      	str	r1, [sp, #128]	; 0x80
  404e90:	f001 fbba 	bl	406608 <_Balloc>
  404e94:	f04f 33ff 	mov.w	r3, #4294967295
  404e98:	9306      	str	r3, [sp, #24]
  404e9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404e9c:	930d      	str	r3, [sp, #52]	; 0x34
  404e9e:	2301      	movs	r3, #1
  404ea0:	9007      	str	r0, [sp, #28]
  404ea2:	9221      	str	r2, [sp, #132]	; 0x84
  404ea4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  404ea8:	9309      	str	r3, [sp, #36]	; 0x24
  404eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404eac:	2b00      	cmp	r3, #0
  404eae:	f2c0 80d1 	blt.w	405054 <_dtoa_r+0x3bc>
  404eb2:	9a04      	ldr	r2, [sp, #16]
  404eb4:	2a0e      	cmp	r2, #14
  404eb6:	f300 80cd 	bgt.w	405054 <_dtoa_r+0x3bc>
  404eba:	4b2d      	ldr	r3, [pc, #180]	; (404f70 <_dtoa_r+0x2d8>)
  404ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
  404ec4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404eca:	2b00      	cmp	r3, #0
  404ecc:	f2c0 8300 	blt.w	4054d0 <_dtoa_r+0x838>
  404ed0:	4656      	mov	r6, sl
  404ed2:	465f      	mov	r7, fp
  404ed4:	4650      	mov	r0, sl
  404ed6:	4659      	mov	r1, fp
  404ed8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  404edc:	4652      	mov	r2, sl
  404ede:	465b      	mov	r3, fp
  404ee0:	f002 fcee 	bl	4078c0 <__aeabi_ddiv>
  404ee4:	f002 fe72 	bl	407bcc <__aeabi_d2iz>
  404ee8:	4604      	mov	r4, r0
  404eea:	f002 fb59 	bl	4075a0 <__aeabi_i2d>
  404eee:	4652      	mov	r2, sl
  404ef0:	465b      	mov	r3, fp
  404ef2:	f002 fbbb 	bl	40766c <__aeabi_dmul>
  404ef6:	460b      	mov	r3, r1
  404ef8:	4602      	mov	r2, r0
  404efa:	4639      	mov	r1, r7
  404efc:	4630      	mov	r0, r6
  404efe:	f002 fa01 	bl	407304 <__aeabi_dsub>
  404f02:	9d07      	ldr	r5, [sp, #28]
  404f04:	f104 0330 	add.w	r3, r4, #48	; 0x30
  404f08:	702b      	strb	r3, [r5, #0]
  404f0a:	9b06      	ldr	r3, [sp, #24]
  404f0c:	2b01      	cmp	r3, #1
  404f0e:	4606      	mov	r6, r0
  404f10:	460f      	mov	r7, r1
  404f12:	f105 0501 	add.w	r5, r5, #1
  404f16:	d062      	beq.n	404fde <_dtoa_r+0x346>
  404f18:	2200      	movs	r2, #0
  404f1a:	4b18      	ldr	r3, [pc, #96]	; (404f7c <_dtoa_r+0x2e4>)
  404f1c:	f002 fba6 	bl	40766c <__aeabi_dmul>
  404f20:	2200      	movs	r2, #0
  404f22:	2300      	movs	r3, #0
  404f24:	4606      	mov	r6, r0
  404f26:	460f      	mov	r7, r1
  404f28:	f002 fe08 	bl	407b3c <__aeabi_dcmpeq>
  404f2c:	2800      	cmp	r0, #0
  404f2e:	d17e      	bne.n	40502e <_dtoa_r+0x396>
  404f30:	f8cd 9014 	str.w	r9, [sp, #20]
  404f34:	f8dd a018 	ldr.w	sl, [sp, #24]
  404f38:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404f3c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404f40:	e029      	b.n	404f96 <_dtoa_r+0x2fe>
  404f42:	bf00      	nop
  404f44:	f3af 8000 	nop.w
  404f48:	636f4361 	.word	0x636f4361
  404f4c:	3fd287a7 	.word	0x3fd287a7
  404f50:	8b60c8b3 	.word	0x8b60c8b3
  404f54:	3fc68a28 	.word	0x3fc68a28
  404f58:	509f79fb 	.word	0x509f79fb
  404f5c:	3fd34413 	.word	0x3fd34413
  404f60:	7ff00000 	.word	0x7ff00000
  404f64:	00407f05 	.word	0x00407f05
  404f68:	00407f24 	.word	0x00407f24
  404f6c:	3ff80000 	.word	0x3ff80000
  404f70:	00407f38 	.word	0x00407f38
  404f74:	00407f18 	.word	0x00407f18
  404f78:	00407f04 	.word	0x00407f04
  404f7c:	40240000 	.word	0x40240000
  404f80:	f002 fb74 	bl	40766c <__aeabi_dmul>
  404f84:	2200      	movs	r2, #0
  404f86:	2300      	movs	r3, #0
  404f88:	4606      	mov	r6, r0
  404f8a:	460f      	mov	r7, r1
  404f8c:	f002 fdd6 	bl	407b3c <__aeabi_dcmpeq>
  404f90:	2800      	cmp	r0, #0
  404f92:	f040 83b7 	bne.w	405704 <_dtoa_r+0xa6c>
  404f96:	4642      	mov	r2, r8
  404f98:	464b      	mov	r3, r9
  404f9a:	4630      	mov	r0, r6
  404f9c:	4639      	mov	r1, r7
  404f9e:	f002 fc8f 	bl	4078c0 <__aeabi_ddiv>
  404fa2:	f002 fe13 	bl	407bcc <__aeabi_d2iz>
  404fa6:	4604      	mov	r4, r0
  404fa8:	f002 fafa 	bl	4075a0 <__aeabi_i2d>
  404fac:	4642      	mov	r2, r8
  404fae:	464b      	mov	r3, r9
  404fb0:	f002 fb5c 	bl	40766c <__aeabi_dmul>
  404fb4:	4602      	mov	r2, r0
  404fb6:	460b      	mov	r3, r1
  404fb8:	4630      	mov	r0, r6
  404fba:	4639      	mov	r1, r7
  404fbc:	f002 f9a2 	bl	407304 <__aeabi_dsub>
  404fc0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404fc4:	f805 eb01 	strb.w	lr, [r5], #1
  404fc8:	ebcb 0e05 	rsb	lr, fp, r5
  404fcc:	45d6      	cmp	lr, sl
  404fce:	4606      	mov	r6, r0
  404fd0:	460f      	mov	r7, r1
  404fd2:	f04f 0200 	mov.w	r2, #0
  404fd6:	4bb0      	ldr	r3, [pc, #704]	; (405298 <_dtoa_r+0x600>)
  404fd8:	d1d2      	bne.n	404f80 <_dtoa_r+0x2e8>
  404fda:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404fde:	4632      	mov	r2, r6
  404fe0:	463b      	mov	r3, r7
  404fe2:	4630      	mov	r0, r6
  404fe4:	4639      	mov	r1, r7
  404fe6:	f002 f98f 	bl	407308 <__adddf3>
  404fea:	4606      	mov	r6, r0
  404fec:	460f      	mov	r7, r1
  404fee:	4602      	mov	r2, r0
  404ff0:	460b      	mov	r3, r1
  404ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ff6:	f002 fdab 	bl	407b50 <__aeabi_dcmplt>
  404ffa:	b940      	cbnz	r0, 40500e <_dtoa_r+0x376>
  404ffc:	4632      	mov	r2, r6
  404ffe:	463b      	mov	r3, r7
  405000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405004:	f002 fd9a 	bl	407b3c <__aeabi_dcmpeq>
  405008:	b188      	cbz	r0, 40502e <_dtoa_r+0x396>
  40500a:	07e3      	lsls	r3, r4, #31
  40500c:	d50f      	bpl.n	40502e <_dtoa_r+0x396>
  40500e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  405012:	9a07      	ldr	r2, [sp, #28]
  405014:	1e6b      	subs	r3, r5, #1
  405016:	e004      	b.n	405022 <_dtoa_r+0x38a>
  405018:	429a      	cmp	r2, r3
  40501a:	f000 842c 	beq.w	405876 <_dtoa_r+0xbde>
  40501e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405022:	2c39      	cmp	r4, #57	; 0x39
  405024:	f103 0501 	add.w	r5, r3, #1
  405028:	d0f6      	beq.n	405018 <_dtoa_r+0x380>
  40502a:	3401      	adds	r4, #1
  40502c:	701c      	strb	r4, [r3, #0]
  40502e:	9908      	ldr	r1, [sp, #32]
  405030:	4648      	mov	r0, r9
  405032:	f001 fb0f 	bl	406654 <_Bfree>
  405036:	2200      	movs	r2, #0
  405038:	9b04      	ldr	r3, [sp, #16]
  40503a:	702a      	strb	r2, [r5, #0]
  40503c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40503e:	3301      	adds	r3, #1
  405040:	6013      	str	r3, [r2, #0]
  405042:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405044:	2b00      	cmp	r3, #0
  405046:	f000 83a7 	beq.w	405798 <_dtoa_r+0xb00>
  40504a:	9807      	ldr	r0, [sp, #28]
  40504c:	601d      	str	r5, [r3, #0]
  40504e:	b017      	add	sp, #92	; 0x5c
  405050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405054:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405056:	2a00      	cmp	r2, #0
  405058:	f000 8112 	beq.w	405280 <_dtoa_r+0x5e8>
  40505c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40505e:	2a01      	cmp	r2, #1
  405060:	f340 8258 	ble.w	405514 <_dtoa_r+0x87c>
  405064:	9b06      	ldr	r3, [sp, #24]
  405066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405068:	1e5f      	subs	r7, r3, #1
  40506a:	42ba      	cmp	r2, r7
  40506c:	f2c0 8397 	blt.w	40579e <_dtoa_r+0xb06>
  405070:	1bd7      	subs	r7, r2, r7
  405072:	9b06      	ldr	r3, [sp, #24]
  405074:	2b00      	cmp	r3, #0
  405076:	f2c0 848a 	blt.w	40598e <_dtoa_r+0xcf6>
  40507a:	9d05      	ldr	r5, [sp, #20]
  40507c:	9b06      	ldr	r3, [sp, #24]
  40507e:	9a05      	ldr	r2, [sp, #20]
  405080:	441a      	add	r2, r3
  405082:	9205      	str	r2, [sp, #20]
  405084:	9a02      	ldr	r2, [sp, #8]
  405086:	2101      	movs	r1, #1
  405088:	441a      	add	r2, r3
  40508a:	4648      	mov	r0, r9
  40508c:	9202      	str	r2, [sp, #8]
  40508e:	f001 fb79 	bl	406784 <__i2b>
  405092:	4606      	mov	r6, r0
  405094:	b165      	cbz	r5, 4050b0 <_dtoa_r+0x418>
  405096:	9902      	ldr	r1, [sp, #8]
  405098:	2900      	cmp	r1, #0
  40509a:	460b      	mov	r3, r1
  40509c:	dd08      	ble.n	4050b0 <_dtoa_r+0x418>
  40509e:	42a9      	cmp	r1, r5
  4050a0:	9a05      	ldr	r2, [sp, #20]
  4050a2:	bfa8      	it	ge
  4050a4:	462b      	movge	r3, r5
  4050a6:	1ad2      	subs	r2, r2, r3
  4050a8:	1aed      	subs	r5, r5, r3
  4050aa:	1acb      	subs	r3, r1, r3
  4050ac:	9205      	str	r2, [sp, #20]
  4050ae:	9302      	str	r3, [sp, #8]
  4050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050b2:	2b00      	cmp	r3, #0
  4050b4:	f340 82fc 	ble.w	4056b0 <_dtoa_r+0xa18>
  4050b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4050ba:	2a00      	cmp	r2, #0
  4050bc:	f000 8201 	beq.w	4054c2 <_dtoa_r+0x82a>
  4050c0:	2f00      	cmp	r7, #0
  4050c2:	f000 81fe 	beq.w	4054c2 <_dtoa_r+0x82a>
  4050c6:	4631      	mov	r1, r6
  4050c8:	463a      	mov	r2, r7
  4050ca:	4648      	mov	r0, r9
  4050cc:	f001 fbfc 	bl	4068c8 <__pow5mult>
  4050d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4050d4:	4601      	mov	r1, r0
  4050d6:	4642      	mov	r2, r8
  4050d8:	4606      	mov	r6, r0
  4050da:	4648      	mov	r0, r9
  4050dc:	f001 fb5c 	bl	406798 <__multiply>
  4050e0:	4641      	mov	r1, r8
  4050e2:	4604      	mov	r4, r0
  4050e4:	4648      	mov	r0, r9
  4050e6:	f001 fab5 	bl	406654 <_Bfree>
  4050ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050ec:	1bdb      	subs	r3, r3, r7
  4050ee:	930a      	str	r3, [sp, #40]	; 0x28
  4050f0:	f040 81e6 	bne.w	4054c0 <_dtoa_r+0x828>
  4050f4:	2101      	movs	r1, #1
  4050f6:	4648      	mov	r0, r9
  4050f8:	f001 fb44 	bl	406784 <__i2b>
  4050fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050fe:	4680      	mov	r8, r0
  405100:	2b00      	cmp	r3, #0
  405102:	f000 8219 	beq.w	405538 <_dtoa_r+0x8a0>
  405106:	4601      	mov	r1, r0
  405108:	461a      	mov	r2, r3
  40510a:	4648      	mov	r0, r9
  40510c:	f001 fbdc 	bl	4068c8 <__pow5mult>
  405110:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405112:	2b01      	cmp	r3, #1
  405114:	4680      	mov	r8, r0
  405116:	f340 82f8 	ble.w	40570a <_dtoa_r+0xa72>
  40511a:	2700      	movs	r7, #0
  40511c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405120:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405124:	6918      	ldr	r0, [r3, #16]
  405126:	f001 fadf 	bl	4066e8 <__hi0bits>
  40512a:	f1c0 0020 	rsb	r0, r0, #32
  40512e:	9a02      	ldr	r2, [sp, #8]
  405130:	4410      	add	r0, r2
  405132:	f010 001f 	ands.w	r0, r0, #31
  405136:	f000 81f6 	beq.w	405526 <_dtoa_r+0x88e>
  40513a:	f1c0 0320 	rsb	r3, r0, #32
  40513e:	2b04      	cmp	r3, #4
  405140:	f340 84ca 	ble.w	405ad8 <_dtoa_r+0xe40>
  405144:	9b05      	ldr	r3, [sp, #20]
  405146:	f1c0 001c 	rsb	r0, r0, #28
  40514a:	4403      	add	r3, r0
  40514c:	9305      	str	r3, [sp, #20]
  40514e:	4613      	mov	r3, r2
  405150:	4403      	add	r3, r0
  405152:	4405      	add	r5, r0
  405154:	9302      	str	r3, [sp, #8]
  405156:	9b05      	ldr	r3, [sp, #20]
  405158:	2b00      	cmp	r3, #0
  40515a:	dd05      	ble.n	405168 <_dtoa_r+0x4d0>
  40515c:	4621      	mov	r1, r4
  40515e:	461a      	mov	r2, r3
  405160:	4648      	mov	r0, r9
  405162:	f001 fc01 	bl	406968 <__lshift>
  405166:	4604      	mov	r4, r0
  405168:	9b02      	ldr	r3, [sp, #8]
  40516a:	2b00      	cmp	r3, #0
  40516c:	dd05      	ble.n	40517a <_dtoa_r+0x4e2>
  40516e:	4641      	mov	r1, r8
  405170:	461a      	mov	r2, r3
  405172:	4648      	mov	r0, r9
  405174:	f001 fbf8 	bl	406968 <__lshift>
  405178:	4680      	mov	r8, r0
  40517a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40517c:	2b00      	cmp	r3, #0
  40517e:	f040 827c 	bne.w	40567a <_dtoa_r+0x9e2>
  405182:	9b06      	ldr	r3, [sp, #24]
  405184:	2b00      	cmp	r3, #0
  405186:	f340 8295 	ble.w	4056b4 <_dtoa_r+0xa1c>
  40518a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40518c:	2b00      	cmp	r3, #0
  40518e:	f040 81f5 	bne.w	40557c <_dtoa_r+0x8e4>
  405192:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405196:	9f06      	ldr	r7, [sp, #24]
  405198:	465d      	mov	r5, fp
  40519a:	e002      	b.n	4051a2 <_dtoa_r+0x50a>
  40519c:	f001 fa64 	bl	406668 <__multadd>
  4051a0:	4604      	mov	r4, r0
  4051a2:	4641      	mov	r1, r8
  4051a4:	4620      	mov	r0, r4
  4051a6:	f7ff fce3 	bl	404b70 <quorem>
  4051aa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4051ae:	f805 ab01 	strb.w	sl, [r5], #1
  4051b2:	ebcb 0305 	rsb	r3, fp, r5
  4051b6:	42bb      	cmp	r3, r7
  4051b8:	f04f 020a 	mov.w	r2, #10
  4051bc:	f04f 0300 	mov.w	r3, #0
  4051c0:	4621      	mov	r1, r4
  4051c2:	4648      	mov	r0, r9
  4051c4:	dbea      	blt.n	40519c <_dtoa_r+0x504>
  4051c6:	9b07      	ldr	r3, [sp, #28]
  4051c8:	9a06      	ldr	r2, [sp, #24]
  4051ca:	2a01      	cmp	r2, #1
  4051cc:	bfac      	ite	ge
  4051ce:	189b      	addge	r3, r3, r2
  4051d0:	3301      	addlt	r3, #1
  4051d2:	461d      	mov	r5, r3
  4051d4:	f04f 0b00 	mov.w	fp, #0
  4051d8:	4621      	mov	r1, r4
  4051da:	2201      	movs	r2, #1
  4051dc:	4648      	mov	r0, r9
  4051de:	f001 fbc3 	bl	406968 <__lshift>
  4051e2:	4641      	mov	r1, r8
  4051e4:	9008      	str	r0, [sp, #32]
  4051e6:	f001 fc17 	bl	406a18 <__mcmp>
  4051ea:	2800      	cmp	r0, #0
  4051ec:	f340 830d 	ble.w	40580a <_dtoa_r+0xb72>
  4051f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4051f4:	9907      	ldr	r1, [sp, #28]
  4051f6:	1e6b      	subs	r3, r5, #1
  4051f8:	e004      	b.n	405204 <_dtoa_r+0x56c>
  4051fa:	428b      	cmp	r3, r1
  4051fc:	f000 8278 	beq.w	4056f0 <_dtoa_r+0xa58>
  405200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405204:	2a39      	cmp	r2, #57	; 0x39
  405206:	f103 0501 	add.w	r5, r3, #1
  40520a:	d0f6      	beq.n	4051fa <_dtoa_r+0x562>
  40520c:	3201      	adds	r2, #1
  40520e:	701a      	strb	r2, [r3, #0]
  405210:	4641      	mov	r1, r8
  405212:	4648      	mov	r0, r9
  405214:	f001 fa1e 	bl	406654 <_Bfree>
  405218:	2e00      	cmp	r6, #0
  40521a:	f43f af08 	beq.w	40502e <_dtoa_r+0x396>
  40521e:	f1bb 0f00 	cmp.w	fp, #0
  405222:	d005      	beq.n	405230 <_dtoa_r+0x598>
  405224:	45b3      	cmp	fp, r6
  405226:	d003      	beq.n	405230 <_dtoa_r+0x598>
  405228:	4659      	mov	r1, fp
  40522a:	4648      	mov	r0, r9
  40522c:	f001 fa12 	bl	406654 <_Bfree>
  405230:	4631      	mov	r1, r6
  405232:	4648      	mov	r0, r9
  405234:	f001 fa0e 	bl	406654 <_Bfree>
  405238:	e6f9      	b.n	40502e <_dtoa_r+0x396>
  40523a:	2301      	movs	r3, #1
  40523c:	930c      	str	r3, [sp, #48]	; 0x30
  40523e:	e5e3      	b.n	404e08 <_dtoa_r+0x170>
  405240:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405244:	4640      	mov	r0, r8
  405246:	f002 f9ab 	bl	4075a0 <__aeabi_i2d>
  40524a:	4602      	mov	r2, r0
  40524c:	460b      	mov	r3, r1
  40524e:	4630      	mov	r0, r6
  405250:	4639      	mov	r1, r7
  405252:	f002 fc73 	bl	407b3c <__aeabi_dcmpeq>
  405256:	2800      	cmp	r0, #0
  405258:	f47f adc2 	bne.w	404de0 <_dtoa_r+0x148>
  40525c:	f108 33ff 	add.w	r3, r8, #4294967295
  405260:	9304      	str	r3, [sp, #16]
  405262:	e5bd      	b.n	404de0 <_dtoa_r+0x148>
  405264:	9a05      	ldr	r2, [sp, #20]
  405266:	9b04      	ldr	r3, [sp, #16]
  405268:	1ad2      	subs	r2, r2, r3
  40526a:	425b      	negs	r3, r3
  40526c:	930a      	str	r3, [sp, #40]	; 0x28
  40526e:	2300      	movs	r3, #0
  405270:	9205      	str	r2, [sp, #20]
  405272:	930b      	str	r3, [sp, #44]	; 0x2c
  405274:	e5da      	b.n	404e2c <_dtoa_r+0x194>
  405276:	425b      	negs	r3, r3
  405278:	9305      	str	r3, [sp, #20]
  40527a:	2300      	movs	r3, #0
  40527c:	9302      	str	r3, [sp, #8]
  40527e:	e5ca      	b.n	404e16 <_dtoa_r+0x17e>
  405280:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405282:	9d05      	ldr	r5, [sp, #20]
  405284:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405286:	e705      	b.n	405094 <_dtoa_r+0x3fc>
  405288:	f1c3 0820 	rsb	r8, r3, #32
  40528c:	fa0a f008 	lsl.w	r0, sl, r8
  405290:	e573      	b.n	404d7a <_dtoa_r+0xe2>
  405292:	900c      	str	r0, [sp, #48]	; 0x30
  405294:	e5b8      	b.n	404e08 <_dtoa_r+0x170>
  405296:	bf00      	nop
  405298:	40240000 	.word	0x40240000
  40529c:	2300      	movs	r3, #0
  40529e:	9309      	str	r3, [sp, #36]	; 0x24
  4052a0:	9b04      	ldr	r3, [sp, #16]
  4052a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4052a4:	4413      	add	r3, r2
  4052a6:	930d      	str	r3, [sp, #52]	; 0x34
  4052a8:	3301      	adds	r3, #1
  4052aa:	2b00      	cmp	r3, #0
  4052ac:	9306      	str	r3, [sp, #24]
  4052ae:	f340 8283 	ble.w	4057b8 <_dtoa_r+0xb20>
  4052b2:	9c06      	ldr	r4, [sp, #24]
  4052b4:	4626      	mov	r6, r4
  4052b6:	2100      	movs	r1, #0
  4052b8:	2e17      	cmp	r6, #23
  4052ba:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4052be:	d90b      	bls.n	4052d8 <_dtoa_r+0x640>
  4052c0:	2201      	movs	r2, #1
  4052c2:	2304      	movs	r3, #4
  4052c4:	005b      	lsls	r3, r3, #1
  4052c6:	f103 0014 	add.w	r0, r3, #20
  4052ca:	42b0      	cmp	r0, r6
  4052cc:	4611      	mov	r1, r2
  4052ce:	f102 0201 	add.w	r2, r2, #1
  4052d2:	d9f7      	bls.n	4052c4 <_dtoa_r+0x62c>
  4052d4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4052d8:	4648      	mov	r0, r9
  4052da:	f001 f995 	bl	406608 <_Balloc>
  4052de:	2c0e      	cmp	r4, #14
  4052e0:	9007      	str	r0, [sp, #28]
  4052e2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4052e6:	f63f ade0 	bhi.w	404eaa <_dtoa_r+0x212>
  4052ea:	2d00      	cmp	r5, #0
  4052ec:	f43f addd 	beq.w	404eaa <_dtoa_r+0x212>
  4052f0:	9904      	ldr	r1, [sp, #16]
  4052f2:	4657      	mov	r7, sl
  4052f4:	46d8      	mov	r8, fp
  4052f6:	2900      	cmp	r1, #0
  4052f8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4052fc:	f340 8292 	ble.w	405824 <_dtoa_r+0xb8c>
  405300:	4b91      	ldr	r3, [pc, #580]	; (405548 <_dtoa_r+0x8b0>)
  405302:	f001 020f 	and.w	r2, r1, #15
  405306:	110e      	asrs	r6, r1, #4
  405308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40530c:	06f0      	lsls	r0, r6, #27
  40530e:	e9d3 4500 	ldrd	r4, r5, [r3]
  405312:	f140 824c 	bpl.w	4057ae <_dtoa_r+0xb16>
  405316:	4b8d      	ldr	r3, [pc, #564]	; (40554c <_dtoa_r+0x8b4>)
  405318:	4650      	mov	r0, sl
  40531a:	4659      	mov	r1, fp
  40531c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405320:	f002 face 	bl	4078c0 <__aeabi_ddiv>
  405324:	f006 060f 	and.w	r6, r6, #15
  405328:	4682      	mov	sl, r0
  40532a:	468b      	mov	fp, r1
  40532c:	f04f 0803 	mov.w	r8, #3
  405330:	b186      	cbz	r6, 405354 <_dtoa_r+0x6bc>
  405332:	4f86      	ldr	r7, [pc, #536]	; (40554c <_dtoa_r+0x8b4>)
  405334:	07f1      	lsls	r1, r6, #31
  405336:	d509      	bpl.n	40534c <_dtoa_r+0x6b4>
  405338:	4620      	mov	r0, r4
  40533a:	4629      	mov	r1, r5
  40533c:	e9d7 2300 	ldrd	r2, r3, [r7]
  405340:	f002 f994 	bl	40766c <__aeabi_dmul>
  405344:	f108 0801 	add.w	r8, r8, #1
  405348:	4604      	mov	r4, r0
  40534a:	460d      	mov	r5, r1
  40534c:	1076      	asrs	r6, r6, #1
  40534e:	f107 0708 	add.w	r7, r7, #8
  405352:	d1ef      	bne.n	405334 <_dtoa_r+0x69c>
  405354:	4622      	mov	r2, r4
  405356:	462b      	mov	r3, r5
  405358:	4650      	mov	r0, sl
  40535a:	4659      	mov	r1, fp
  40535c:	f002 fab0 	bl	4078c0 <__aeabi_ddiv>
  405360:	4606      	mov	r6, r0
  405362:	460f      	mov	r7, r1
  405364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405366:	b143      	cbz	r3, 40537a <_dtoa_r+0x6e2>
  405368:	2200      	movs	r2, #0
  40536a:	4b79      	ldr	r3, [pc, #484]	; (405550 <_dtoa_r+0x8b8>)
  40536c:	4630      	mov	r0, r6
  40536e:	4639      	mov	r1, r7
  405370:	f002 fbee 	bl	407b50 <__aeabi_dcmplt>
  405374:	2800      	cmp	r0, #0
  405376:	f040 8320 	bne.w	4059ba <_dtoa_r+0xd22>
  40537a:	4640      	mov	r0, r8
  40537c:	f002 f910 	bl	4075a0 <__aeabi_i2d>
  405380:	4632      	mov	r2, r6
  405382:	463b      	mov	r3, r7
  405384:	f002 f972 	bl	40766c <__aeabi_dmul>
  405388:	4b72      	ldr	r3, [pc, #456]	; (405554 <_dtoa_r+0x8bc>)
  40538a:	2200      	movs	r2, #0
  40538c:	f001 ffbc 	bl	407308 <__adddf3>
  405390:	9b06      	ldr	r3, [sp, #24]
  405392:	4604      	mov	r4, r0
  405394:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405398:	2b00      	cmp	r3, #0
  40539a:	f000 81df 	beq.w	40575c <_dtoa_r+0xac4>
  40539e:	9b04      	ldr	r3, [sp, #16]
  4053a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4053a4:	9311      	str	r3, [sp, #68]	; 0x44
  4053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053a8:	2b00      	cmp	r3, #0
  4053aa:	f000 8297 	beq.w	4058dc <_dtoa_r+0xc44>
  4053ae:	4b66      	ldr	r3, [pc, #408]	; (405548 <_dtoa_r+0x8b0>)
  4053b0:	4969      	ldr	r1, [pc, #420]	; (405558 <_dtoa_r+0x8c0>)
  4053b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4053b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4053ba:	2000      	movs	r0, #0
  4053bc:	f002 fa80 	bl	4078c0 <__aeabi_ddiv>
  4053c0:	4622      	mov	r2, r4
  4053c2:	462b      	mov	r3, r5
  4053c4:	f001 ff9e 	bl	407304 <__aeabi_dsub>
  4053c8:	4682      	mov	sl, r0
  4053ca:	468b      	mov	fp, r1
  4053cc:	4630      	mov	r0, r6
  4053ce:	4639      	mov	r1, r7
  4053d0:	f002 fbfc 	bl	407bcc <__aeabi_d2iz>
  4053d4:	4604      	mov	r4, r0
  4053d6:	f002 f8e3 	bl	4075a0 <__aeabi_i2d>
  4053da:	4602      	mov	r2, r0
  4053dc:	460b      	mov	r3, r1
  4053de:	4630      	mov	r0, r6
  4053e0:	4639      	mov	r1, r7
  4053e2:	f001 ff8f 	bl	407304 <__aeabi_dsub>
  4053e6:	3430      	adds	r4, #48	; 0x30
  4053e8:	9d07      	ldr	r5, [sp, #28]
  4053ea:	b2e4      	uxtb	r4, r4
  4053ec:	4606      	mov	r6, r0
  4053ee:	460f      	mov	r7, r1
  4053f0:	702c      	strb	r4, [r5, #0]
  4053f2:	4602      	mov	r2, r0
  4053f4:	460b      	mov	r3, r1
  4053f6:	4650      	mov	r0, sl
  4053f8:	4659      	mov	r1, fp
  4053fa:	3501      	adds	r5, #1
  4053fc:	f002 fbc6 	bl	407b8c <__aeabi_dcmpgt>
  405400:	2800      	cmp	r0, #0
  405402:	d14c      	bne.n	40549e <_dtoa_r+0x806>
  405404:	4632      	mov	r2, r6
  405406:	463b      	mov	r3, r7
  405408:	2000      	movs	r0, #0
  40540a:	4951      	ldr	r1, [pc, #324]	; (405550 <_dtoa_r+0x8b8>)
  40540c:	f001 ff7a 	bl	407304 <__aeabi_dsub>
  405410:	4602      	mov	r2, r0
  405412:	460b      	mov	r3, r1
  405414:	4650      	mov	r0, sl
  405416:	4659      	mov	r1, fp
  405418:	f002 fbb8 	bl	407b8c <__aeabi_dcmpgt>
  40541c:	2800      	cmp	r0, #0
  40541e:	f040 830d 	bne.w	405a3c <_dtoa_r+0xda4>
  405422:	f1b8 0f01 	cmp.w	r8, #1
  405426:	f340 81b3 	ble.w	405790 <_dtoa_r+0xaf8>
  40542a:	9b07      	ldr	r3, [sp, #28]
  40542c:	4498      	add	r8, r3
  40542e:	e00d      	b.n	40544c <_dtoa_r+0x7b4>
  405430:	2000      	movs	r0, #0
  405432:	4947      	ldr	r1, [pc, #284]	; (405550 <_dtoa_r+0x8b8>)
  405434:	f001 ff66 	bl	407304 <__aeabi_dsub>
  405438:	4652      	mov	r2, sl
  40543a:	465b      	mov	r3, fp
  40543c:	f002 fb88 	bl	407b50 <__aeabi_dcmplt>
  405440:	2800      	cmp	r0, #0
  405442:	f040 82fb 	bne.w	405a3c <_dtoa_r+0xda4>
  405446:	4545      	cmp	r5, r8
  405448:	f000 81a2 	beq.w	405790 <_dtoa_r+0xaf8>
  40544c:	4650      	mov	r0, sl
  40544e:	4659      	mov	r1, fp
  405450:	2200      	movs	r2, #0
  405452:	4b42      	ldr	r3, [pc, #264]	; (40555c <_dtoa_r+0x8c4>)
  405454:	f002 f90a 	bl	40766c <__aeabi_dmul>
  405458:	2200      	movs	r2, #0
  40545a:	4b40      	ldr	r3, [pc, #256]	; (40555c <_dtoa_r+0x8c4>)
  40545c:	4682      	mov	sl, r0
  40545e:	468b      	mov	fp, r1
  405460:	4630      	mov	r0, r6
  405462:	4639      	mov	r1, r7
  405464:	f002 f902 	bl	40766c <__aeabi_dmul>
  405468:	460f      	mov	r7, r1
  40546a:	4606      	mov	r6, r0
  40546c:	f002 fbae 	bl	407bcc <__aeabi_d2iz>
  405470:	4604      	mov	r4, r0
  405472:	f002 f895 	bl	4075a0 <__aeabi_i2d>
  405476:	4602      	mov	r2, r0
  405478:	460b      	mov	r3, r1
  40547a:	4630      	mov	r0, r6
  40547c:	4639      	mov	r1, r7
  40547e:	f001 ff41 	bl	407304 <__aeabi_dsub>
  405482:	3430      	adds	r4, #48	; 0x30
  405484:	b2e4      	uxtb	r4, r4
  405486:	4652      	mov	r2, sl
  405488:	465b      	mov	r3, fp
  40548a:	f805 4b01 	strb.w	r4, [r5], #1
  40548e:	4606      	mov	r6, r0
  405490:	460f      	mov	r7, r1
  405492:	f002 fb5d 	bl	407b50 <__aeabi_dcmplt>
  405496:	4632      	mov	r2, r6
  405498:	463b      	mov	r3, r7
  40549a:	2800      	cmp	r0, #0
  40549c:	d0c8      	beq.n	405430 <_dtoa_r+0x798>
  40549e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054a0:	9304      	str	r3, [sp, #16]
  4054a2:	e5c4      	b.n	40502e <_dtoa_r+0x396>
  4054a4:	2300      	movs	r3, #0
  4054a6:	9309      	str	r3, [sp, #36]	; 0x24
  4054a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4054aa:	2b00      	cmp	r3, #0
  4054ac:	f340 8189 	ble.w	4057c2 <_dtoa_r+0xb2a>
  4054b0:	461e      	mov	r6, r3
  4054b2:	461c      	mov	r4, r3
  4054b4:	930d      	str	r3, [sp, #52]	; 0x34
  4054b6:	9306      	str	r3, [sp, #24]
  4054b8:	e6fd      	b.n	4052b6 <_dtoa_r+0x61e>
  4054ba:	2301      	movs	r3, #1
  4054bc:	9309      	str	r3, [sp, #36]	; 0x24
  4054be:	e7f3      	b.n	4054a8 <_dtoa_r+0x810>
  4054c0:	9408      	str	r4, [sp, #32]
  4054c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4054c4:	9908      	ldr	r1, [sp, #32]
  4054c6:	4648      	mov	r0, r9
  4054c8:	f001 f9fe 	bl	4068c8 <__pow5mult>
  4054cc:	4604      	mov	r4, r0
  4054ce:	e611      	b.n	4050f4 <_dtoa_r+0x45c>
  4054d0:	9b06      	ldr	r3, [sp, #24]
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	f73f acfc 	bgt.w	404ed0 <_dtoa_r+0x238>
  4054d8:	f040 82da 	bne.w	405a90 <_dtoa_r+0xdf8>
  4054dc:	2200      	movs	r2, #0
  4054de:	4b20      	ldr	r3, [pc, #128]	; (405560 <_dtoa_r+0x8c8>)
  4054e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4054e4:	f002 f8c2 	bl	40766c <__aeabi_dmul>
  4054e8:	4652      	mov	r2, sl
  4054ea:	465b      	mov	r3, fp
  4054ec:	f002 fb44 	bl	407b78 <__aeabi_dcmpge>
  4054f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4054f4:	4646      	mov	r6, r8
  4054f6:	2800      	cmp	r0, #0
  4054f8:	f000 80f2 	beq.w	4056e0 <_dtoa_r+0xa48>
  4054fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4054fe:	9d07      	ldr	r5, [sp, #28]
  405500:	43db      	mvns	r3, r3
  405502:	9304      	str	r3, [sp, #16]
  405504:	4641      	mov	r1, r8
  405506:	4648      	mov	r0, r9
  405508:	f001 f8a4 	bl	406654 <_Bfree>
  40550c:	2e00      	cmp	r6, #0
  40550e:	f43f ad8e 	beq.w	40502e <_dtoa_r+0x396>
  405512:	e68d      	b.n	405230 <_dtoa_r+0x598>
  405514:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405516:	2a00      	cmp	r2, #0
  405518:	f000 8241 	beq.w	40599e <_dtoa_r+0xd06>
  40551c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405520:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405522:	9d05      	ldr	r5, [sp, #20]
  405524:	e5ab      	b.n	40507e <_dtoa_r+0x3e6>
  405526:	201c      	movs	r0, #28
  405528:	9b05      	ldr	r3, [sp, #20]
  40552a:	4403      	add	r3, r0
  40552c:	9305      	str	r3, [sp, #20]
  40552e:	9b02      	ldr	r3, [sp, #8]
  405530:	4403      	add	r3, r0
  405532:	4405      	add	r5, r0
  405534:	9302      	str	r3, [sp, #8]
  405536:	e60e      	b.n	405156 <_dtoa_r+0x4be>
  405538:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40553a:	2b01      	cmp	r3, #1
  40553c:	f340 8282 	ble.w	405a44 <_dtoa_r+0xdac>
  405540:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  405542:	2001      	movs	r0, #1
  405544:	e5f3      	b.n	40512e <_dtoa_r+0x496>
  405546:	bf00      	nop
  405548:	00407f38 	.word	0x00407f38
  40554c:	00408000 	.word	0x00408000
  405550:	3ff00000 	.word	0x3ff00000
  405554:	401c0000 	.word	0x401c0000
  405558:	3fe00000 	.word	0x3fe00000
  40555c:	40240000 	.word	0x40240000
  405560:	40140000 	.word	0x40140000
  405564:	4631      	mov	r1, r6
  405566:	2300      	movs	r3, #0
  405568:	220a      	movs	r2, #10
  40556a:	4648      	mov	r0, r9
  40556c:	f001 f87c 	bl	406668 <__multadd>
  405570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405572:	2b00      	cmp	r3, #0
  405574:	4606      	mov	r6, r0
  405576:	f340 8297 	ble.w	405aa8 <_dtoa_r+0xe10>
  40557a:	9306      	str	r3, [sp, #24]
  40557c:	2d00      	cmp	r5, #0
  40557e:	dd05      	ble.n	40558c <_dtoa_r+0x8f4>
  405580:	4631      	mov	r1, r6
  405582:	462a      	mov	r2, r5
  405584:	4648      	mov	r0, r9
  405586:	f001 f9ef 	bl	406968 <__lshift>
  40558a:	4606      	mov	r6, r0
  40558c:	2f00      	cmp	r7, #0
  40558e:	f040 817c 	bne.w	40588a <_dtoa_r+0xbf2>
  405592:	9605      	str	r6, [sp, #20]
  405594:	9b06      	ldr	r3, [sp, #24]
  405596:	9a07      	ldr	r2, [sp, #28]
  405598:	f8dd b014 	ldr.w	fp, [sp, #20]
  40559c:	3b01      	subs	r3, #1
  40559e:	18d3      	adds	r3, r2, r3
  4055a0:	9308      	str	r3, [sp, #32]
  4055a2:	f00a 0301 	and.w	r3, sl, #1
  4055a6:	9309      	str	r3, [sp, #36]	; 0x24
  4055a8:	4617      	mov	r7, r2
  4055aa:	46c2      	mov	sl, r8
  4055ac:	4651      	mov	r1, sl
  4055ae:	4620      	mov	r0, r4
  4055b0:	f7ff fade 	bl	404b70 <quorem>
  4055b4:	4631      	mov	r1, r6
  4055b6:	4605      	mov	r5, r0
  4055b8:	4620      	mov	r0, r4
  4055ba:	f001 fa2d 	bl	406a18 <__mcmp>
  4055be:	465a      	mov	r2, fp
  4055c0:	9002      	str	r0, [sp, #8]
  4055c2:	4651      	mov	r1, sl
  4055c4:	4648      	mov	r0, r9
  4055c6:	f001 fa47 	bl	406a58 <__mdiff>
  4055ca:	68c2      	ldr	r2, [r0, #12]
  4055cc:	4680      	mov	r8, r0
  4055ce:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4055d2:	2a00      	cmp	r2, #0
  4055d4:	d149      	bne.n	40566a <_dtoa_r+0x9d2>
  4055d6:	4601      	mov	r1, r0
  4055d8:	4620      	mov	r0, r4
  4055da:	9306      	str	r3, [sp, #24]
  4055dc:	f001 fa1c 	bl	406a18 <__mcmp>
  4055e0:	4641      	mov	r1, r8
  4055e2:	9005      	str	r0, [sp, #20]
  4055e4:	4648      	mov	r0, r9
  4055e6:	f001 f835 	bl	406654 <_Bfree>
  4055ea:	9a05      	ldr	r2, [sp, #20]
  4055ec:	9b06      	ldr	r3, [sp, #24]
  4055ee:	b92a      	cbnz	r2, 4055fc <_dtoa_r+0x964>
  4055f0:	9920      	ldr	r1, [sp, #128]	; 0x80
  4055f2:	b919      	cbnz	r1, 4055fc <_dtoa_r+0x964>
  4055f4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4055f6:	2900      	cmp	r1, #0
  4055f8:	f000 8236 	beq.w	405a68 <_dtoa_r+0xdd0>
  4055fc:	9902      	ldr	r1, [sp, #8]
  4055fe:	2900      	cmp	r1, #0
  405600:	f2c0 80e4 	blt.w	4057cc <_dtoa_r+0xb34>
  405604:	d105      	bne.n	405612 <_dtoa_r+0x97a>
  405606:	9920      	ldr	r1, [sp, #128]	; 0x80
  405608:	b919      	cbnz	r1, 405612 <_dtoa_r+0x97a>
  40560a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40560c:	2900      	cmp	r1, #0
  40560e:	f000 80dd 	beq.w	4057cc <_dtoa_r+0xb34>
  405612:	2a00      	cmp	r2, #0
  405614:	f300 814d 	bgt.w	4058b2 <_dtoa_r+0xc1a>
  405618:	9a08      	ldr	r2, [sp, #32]
  40561a:	703b      	strb	r3, [r7, #0]
  40561c:	f107 0801 	add.w	r8, r7, #1
  405620:	4297      	cmp	r7, r2
  405622:	4645      	mov	r5, r8
  405624:	f000 8154 	beq.w	4058d0 <_dtoa_r+0xc38>
  405628:	4621      	mov	r1, r4
  40562a:	2300      	movs	r3, #0
  40562c:	220a      	movs	r2, #10
  40562e:	4648      	mov	r0, r9
  405630:	f001 f81a 	bl	406668 <__multadd>
  405634:	455e      	cmp	r6, fp
  405636:	4604      	mov	r4, r0
  405638:	4631      	mov	r1, r6
  40563a:	f04f 0300 	mov.w	r3, #0
  40563e:	f04f 020a 	mov.w	r2, #10
  405642:	4648      	mov	r0, r9
  405644:	d00b      	beq.n	40565e <_dtoa_r+0x9c6>
  405646:	f001 f80f 	bl	406668 <__multadd>
  40564a:	4659      	mov	r1, fp
  40564c:	4606      	mov	r6, r0
  40564e:	2300      	movs	r3, #0
  405650:	220a      	movs	r2, #10
  405652:	4648      	mov	r0, r9
  405654:	f001 f808 	bl	406668 <__multadd>
  405658:	4647      	mov	r7, r8
  40565a:	4683      	mov	fp, r0
  40565c:	e7a6      	b.n	4055ac <_dtoa_r+0x914>
  40565e:	f001 f803 	bl	406668 <__multadd>
  405662:	4647      	mov	r7, r8
  405664:	4606      	mov	r6, r0
  405666:	4683      	mov	fp, r0
  405668:	e7a0      	b.n	4055ac <_dtoa_r+0x914>
  40566a:	4601      	mov	r1, r0
  40566c:	4648      	mov	r0, r9
  40566e:	9305      	str	r3, [sp, #20]
  405670:	f000 fff0 	bl	406654 <_Bfree>
  405674:	2201      	movs	r2, #1
  405676:	9b05      	ldr	r3, [sp, #20]
  405678:	e7c0      	b.n	4055fc <_dtoa_r+0x964>
  40567a:	4641      	mov	r1, r8
  40567c:	4620      	mov	r0, r4
  40567e:	f001 f9cb 	bl	406a18 <__mcmp>
  405682:	2800      	cmp	r0, #0
  405684:	f6bf ad7d 	bge.w	405182 <_dtoa_r+0x4ea>
  405688:	4621      	mov	r1, r4
  40568a:	9c04      	ldr	r4, [sp, #16]
  40568c:	2300      	movs	r3, #0
  40568e:	3c01      	subs	r4, #1
  405690:	220a      	movs	r2, #10
  405692:	4648      	mov	r0, r9
  405694:	9404      	str	r4, [sp, #16]
  405696:	f000 ffe7 	bl	406668 <__multadd>
  40569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40569c:	4604      	mov	r4, r0
  40569e:	2b00      	cmp	r3, #0
  4056a0:	f47f af60 	bne.w	405564 <_dtoa_r+0x8cc>
  4056a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4056a6:	2b00      	cmp	r3, #0
  4056a8:	f340 81f6 	ble.w	405a98 <_dtoa_r+0xe00>
  4056ac:	9306      	str	r3, [sp, #24]
  4056ae:	e570      	b.n	405192 <_dtoa_r+0x4fa>
  4056b0:	9c08      	ldr	r4, [sp, #32]
  4056b2:	e51f      	b.n	4050f4 <_dtoa_r+0x45c>
  4056b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4056b6:	2b02      	cmp	r3, #2
  4056b8:	f77f ad67 	ble.w	40518a <_dtoa_r+0x4f2>
  4056bc:	9b06      	ldr	r3, [sp, #24]
  4056be:	2b00      	cmp	r3, #0
  4056c0:	f040 8179 	bne.w	4059b6 <_dtoa_r+0xd1e>
  4056c4:	4641      	mov	r1, r8
  4056c6:	2205      	movs	r2, #5
  4056c8:	4648      	mov	r0, r9
  4056ca:	f000 ffcd 	bl	406668 <__multadd>
  4056ce:	4601      	mov	r1, r0
  4056d0:	4680      	mov	r8, r0
  4056d2:	4620      	mov	r0, r4
  4056d4:	f001 f9a0 	bl	406a18 <__mcmp>
  4056d8:	2800      	cmp	r0, #0
  4056da:	9408      	str	r4, [sp, #32]
  4056dc:	f77f af0e 	ble.w	4054fc <_dtoa_r+0x864>
  4056e0:	9a04      	ldr	r2, [sp, #16]
  4056e2:	9907      	ldr	r1, [sp, #28]
  4056e4:	2331      	movs	r3, #49	; 0x31
  4056e6:	3201      	adds	r2, #1
  4056e8:	9204      	str	r2, [sp, #16]
  4056ea:	700b      	strb	r3, [r1, #0]
  4056ec:	1c4d      	adds	r5, r1, #1
  4056ee:	e709      	b.n	405504 <_dtoa_r+0x86c>
  4056f0:	9a04      	ldr	r2, [sp, #16]
  4056f2:	3201      	adds	r2, #1
  4056f4:	9204      	str	r2, [sp, #16]
  4056f6:	9a07      	ldr	r2, [sp, #28]
  4056f8:	2331      	movs	r3, #49	; 0x31
  4056fa:	7013      	strb	r3, [r2, #0]
  4056fc:	e588      	b.n	405210 <_dtoa_r+0x578>
  4056fe:	2301      	movs	r3, #1
  405700:	9309      	str	r3, [sp, #36]	; 0x24
  405702:	e5cd      	b.n	4052a0 <_dtoa_r+0x608>
  405704:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405708:	e491      	b.n	40502e <_dtoa_r+0x396>
  40570a:	f1ba 0f00 	cmp.w	sl, #0
  40570e:	f47f ad04 	bne.w	40511a <_dtoa_r+0x482>
  405712:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405716:	2b00      	cmp	r3, #0
  405718:	f040 813f 	bne.w	40599a <_dtoa_r+0xd02>
  40571c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405720:	0d3f      	lsrs	r7, r7, #20
  405722:	053f      	lsls	r7, r7, #20
  405724:	b137      	cbz	r7, 405734 <_dtoa_r+0xa9c>
  405726:	9b05      	ldr	r3, [sp, #20]
  405728:	3301      	adds	r3, #1
  40572a:	9305      	str	r3, [sp, #20]
  40572c:	9b02      	ldr	r3, [sp, #8]
  40572e:	3301      	adds	r3, #1
  405730:	9302      	str	r3, [sp, #8]
  405732:	2701      	movs	r7, #1
  405734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405736:	2001      	movs	r0, #1
  405738:	2b00      	cmp	r3, #0
  40573a:	f43f acf8 	beq.w	40512e <_dtoa_r+0x496>
  40573e:	e4ed      	b.n	40511c <_dtoa_r+0x484>
  405740:	4640      	mov	r0, r8
  405742:	f001 ff2d 	bl	4075a0 <__aeabi_i2d>
  405746:	4632      	mov	r2, r6
  405748:	463b      	mov	r3, r7
  40574a:	f001 ff8f 	bl	40766c <__aeabi_dmul>
  40574e:	2200      	movs	r2, #0
  405750:	4bbf      	ldr	r3, [pc, #764]	; (405a50 <_dtoa_r+0xdb8>)
  405752:	f001 fdd9 	bl	407308 <__adddf3>
  405756:	4604      	mov	r4, r0
  405758:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40575c:	4630      	mov	r0, r6
  40575e:	4639      	mov	r1, r7
  405760:	2200      	movs	r2, #0
  405762:	4bbc      	ldr	r3, [pc, #752]	; (405a54 <_dtoa_r+0xdbc>)
  405764:	f001 fdce 	bl	407304 <__aeabi_dsub>
  405768:	4622      	mov	r2, r4
  40576a:	462b      	mov	r3, r5
  40576c:	4606      	mov	r6, r0
  40576e:	460f      	mov	r7, r1
  405770:	f002 fa0c 	bl	407b8c <__aeabi_dcmpgt>
  405774:	4680      	mov	r8, r0
  405776:	2800      	cmp	r0, #0
  405778:	f040 8105 	bne.w	405986 <_dtoa_r+0xcee>
  40577c:	4622      	mov	r2, r4
  40577e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  405782:	4630      	mov	r0, r6
  405784:	4639      	mov	r1, r7
  405786:	f002 f9e3 	bl	407b50 <__aeabi_dcmplt>
  40578a:	b108      	cbz	r0, 405790 <_dtoa_r+0xaf8>
  40578c:	4646      	mov	r6, r8
  40578e:	e6b5      	b.n	4054fc <_dtoa_r+0x864>
  405790:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  405794:	f7ff bb89 	b.w	404eaa <_dtoa_r+0x212>
  405798:	9807      	ldr	r0, [sp, #28]
  40579a:	f7ff baae 	b.w	404cfa <_dtoa_r+0x62>
  40579e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4057a2:	970a      	str	r7, [sp, #40]	; 0x28
  4057a4:	1afb      	subs	r3, r7, r3
  4057a6:	441a      	add	r2, r3
  4057a8:	920b      	str	r2, [sp, #44]	; 0x2c
  4057aa:	2700      	movs	r7, #0
  4057ac:	e461      	b.n	405072 <_dtoa_r+0x3da>
  4057ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4057b2:	f04f 0802 	mov.w	r8, #2
  4057b6:	e5bb      	b.n	405330 <_dtoa_r+0x698>
  4057b8:	461c      	mov	r4, r3
  4057ba:	2100      	movs	r1, #0
  4057bc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4057c0:	e58a      	b.n	4052d8 <_dtoa_r+0x640>
  4057c2:	2401      	movs	r4, #1
  4057c4:	9421      	str	r4, [sp, #132]	; 0x84
  4057c6:	940d      	str	r4, [sp, #52]	; 0x34
  4057c8:	9406      	str	r4, [sp, #24]
  4057ca:	e7f6      	b.n	4057ba <_dtoa_r+0xb22>
  4057cc:	2a00      	cmp	r2, #0
  4057ce:	46d0      	mov	r8, sl
  4057d0:	f8cd b014 	str.w	fp, [sp, #20]
  4057d4:	469a      	mov	sl, r3
  4057d6:	dd11      	ble.n	4057fc <_dtoa_r+0xb64>
  4057d8:	4621      	mov	r1, r4
  4057da:	2201      	movs	r2, #1
  4057dc:	4648      	mov	r0, r9
  4057de:	f001 f8c3 	bl	406968 <__lshift>
  4057e2:	4641      	mov	r1, r8
  4057e4:	4604      	mov	r4, r0
  4057e6:	f001 f917 	bl	406a18 <__mcmp>
  4057ea:	2800      	cmp	r0, #0
  4057ec:	f340 8149 	ble.w	405a82 <_dtoa_r+0xdea>
  4057f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4057f4:	f000 8106 	beq.w	405a04 <_dtoa_r+0xd6c>
  4057f8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4057fc:	46b3      	mov	fp, r6
  4057fe:	f887 a000 	strb.w	sl, [r7]
  405802:	1c7d      	adds	r5, r7, #1
  405804:	9e05      	ldr	r6, [sp, #20]
  405806:	9408      	str	r4, [sp, #32]
  405808:	e502      	b.n	405210 <_dtoa_r+0x578>
  40580a:	d104      	bne.n	405816 <_dtoa_r+0xb7e>
  40580c:	f01a 0f01 	tst.w	sl, #1
  405810:	d001      	beq.n	405816 <_dtoa_r+0xb7e>
  405812:	e4ed      	b.n	4051f0 <_dtoa_r+0x558>
  405814:	4615      	mov	r5, r2
  405816:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40581a:	2b30      	cmp	r3, #48	; 0x30
  40581c:	f105 32ff 	add.w	r2, r5, #4294967295
  405820:	d0f8      	beq.n	405814 <_dtoa_r+0xb7c>
  405822:	e4f5      	b.n	405210 <_dtoa_r+0x578>
  405824:	9b04      	ldr	r3, [sp, #16]
  405826:	425c      	negs	r4, r3
  405828:	2c00      	cmp	r4, #0
  40582a:	f000 80bf 	beq.w	4059ac <_dtoa_r+0xd14>
  40582e:	4b8a      	ldr	r3, [pc, #552]	; (405a58 <_dtoa_r+0xdc0>)
  405830:	f004 020f 	and.w	r2, r4, #15
  405834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405838:	e9d3 2300 	ldrd	r2, r3, [r3]
  40583c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  405840:	f001 ff14 	bl	40766c <__aeabi_dmul>
  405844:	1124      	asrs	r4, r4, #4
  405846:	4606      	mov	r6, r0
  405848:	460f      	mov	r7, r1
  40584a:	f000 812a 	beq.w	405aa2 <_dtoa_r+0xe0a>
  40584e:	4d83      	ldr	r5, [pc, #524]	; (405a5c <_dtoa_r+0xdc4>)
  405850:	f04f 0802 	mov.w	r8, #2
  405854:	07e2      	lsls	r2, r4, #31
  405856:	d509      	bpl.n	40586c <_dtoa_r+0xbd4>
  405858:	4630      	mov	r0, r6
  40585a:	4639      	mov	r1, r7
  40585c:	e9d5 2300 	ldrd	r2, r3, [r5]
  405860:	f001 ff04 	bl	40766c <__aeabi_dmul>
  405864:	f108 0801 	add.w	r8, r8, #1
  405868:	4606      	mov	r6, r0
  40586a:	460f      	mov	r7, r1
  40586c:	1064      	asrs	r4, r4, #1
  40586e:	f105 0508 	add.w	r5, r5, #8
  405872:	d1ef      	bne.n	405854 <_dtoa_r+0xbbc>
  405874:	e576      	b.n	405364 <_dtoa_r+0x6cc>
  405876:	9907      	ldr	r1, [sp, #28]
  405878:	2230      	movs	r2, #48	; 0x30
  40587a:	700a      	strb	r2, [r1, #0]
  40587c:	9a04      	ldr	r2, [sp, #16]
  40587e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  405882:	3201      	adds	r2, #1
  405884:	9204      	str	r2, [sp, #16]
  405886:	f7ff bbd0 	b.w	40502a <_dtoa_r+0x392>
  40588a:	6871      	ldr	r1, [r6, #4]
  40588c:	4648      	mov	r0, r9
  40588e:	f000 febb 	bl	406608 <_Balloc>
  405892:	6933      	ldr	r3, [r6, #16]
  405894:	1c9a      	adds	r2, r3, #2
  405896:	4605      	mov	r5, r0
  405898:	0092      	lsls	r2, r2, #2
  40589a:	f106 010c 	add.w	r1, r6, #12
  40589e:	300c      	adds	r0, #12
  4058a0:	f000 fdb0 	bl	406404 <memcpy>
  4058a4:	4629      	mov	r1, r5
  4058a6:	2201      	movs	r2, #1
  4058a8:	4648      	mov	r0, r9
  4058aa:	f001 f85d 	bl	406968 <__lshift>
  4058ae:	9005      	str	r0, [sp, #20]
  4058b0:	e670      	b.n	405594 <_dtoa_r+0x8fc>
  4058b2:	2b39      	cmp	r3, #57	; 0x39
  4058b4:	f8cd b014 	str.w	fp, [sp, #20]
  4058b8:	46d0      	mov	r8, sl
  4058ba:	f000 80a3 	beq.w	405a04 <_dtoa_r+0xd6c>
  4058be:	f103 0a01 	add.w	sl, r3, #1
  4058c2:	46b3      	mov	fp, r6
  4058c4:	f887 a000 	strb.w	sl, [r7]
  4058c8:	1c7d      	adds	r5, r7, #1
  4058ca:	9e05      	ldr	r6, [sp, #20]
  4058cc:	9408      	str	r4, [sp, #32]
  4058ce:	e49f      	b.n	405210 <_dtoa_r+0x578>
  4058d0:	465a      	mov	r2, fp
  4058d2:	46d0      	mov	r8, sl
  4058d4:	46b3      	mov	fp, r6
  4058d6:	469a      	mov	sl, r3
  4058d8:	4616      	mov	r6, r2
  4058da:	e47d      	b.n	4051d8 <_dtoa_r+0x540>
  4058dc:	495e      	ldr	r1, [pc, #376]	; (405a58 <_dtoa_r+0xdc0>)
  4058de:	f108 3aff 	add.w	sl, r8, #4294967295
  4058e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  4058e6:	4622      	mov	r2, r4
  4058e8:	462b      	mov	r3, r5
  4058ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4058ee:	f001 febd 	bl	40766c <__aeabi_dmul>
  4058f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4058f6:	4639      	mov	r1, r7
  4058f8:	4630      	mov	r0, r6
  4058fa:	f002 f967 	bl	407bcc <__aeabi_d2iz>
  4058fe:	4604      	mov	r4, r0
  405900:	f001 fe4e 	bl	4075a0 <__aeabi_i2d>
  405904:	4602      	mov	r2, r0
  405906:	460b      	mov	r3, r1
  405908:	4630      	mov	r0, r6
  40590a:	4639      	mov	r1, r7
  40590c:	f001 fcfa 	bl	407304 <__aeabi_dsub>
  405910:	9a07      	ldr	r2, [sp, #28]
  405912:	3430      	adds	r4, #48	; 0x30
  405914:	f1b8 0f01 	cmp.w	r8, #1
  405918:	4606      	mov	r6, r0
  40591a:	460f      	mov	r7, r1
  40591c:	7014      	strb	r4, [r2, #0]
  40591e:	f102 0501 	add.w	r5, r2, #1
  405922:	d01e      	beq.n	405962 <_dtoa_r+0xcca>
  405924:	9b07      	ldr	r3, [sp, #28]
  405926:	eb03 0b08 	add.w	fp, r3, r8
  40592a:	46a8      	mov	r8, r5
  40592c:	2200      	movs	r2, #0
  40592e:	4b4c      	ldr	r3, [pc, #304]	; (405a60 <_dtoa_r+0xdc8>)
  405930:	4630      	mov	r0, r6
  405932:	4639      	mov	r1, r7
  405934:	f001 fe9a 	bl	40766c <__aeabi_dmul>
  405938:	460f      	mov	r7, r1
  40593a:	4606      	mov	r6, r0
  40593c:	f002 f946 	bl	407bcc <__aeabi_d2iz>
  405940:	4604      	mov	r4, r0
  405942:	f001 fe2d 	bl	4075a0 <__aeabi_i2d>
  405946:	3430      	adds	r4, #48	; 0x30
  405948:	4602      	mov	r2, r0
  40594a:	460b      	mov	r3, r1
  40594c:	4630      	mov	r0, r6
  40594e:	4639      	mov	r1, r7
  405950:	f001 fcd8 	bl	407304 <__aeabi_dsub>
  405954:	f808 4b01 	strb.w	r4, [r8], #1
  405958:	45c3      	cmp	fp, r8
  40595a:	4606      	mov	r6, r0
  40595c:	460f      	mov	r7, r1
  40595e:	d1e5      	bne.n	40592c <_dtoa_r+0xc94>
  405960:	4455      	add	r5, sl
  405962:	2200      	movs	r2, #0
  405964:	4b3f      	ldr	r3, [pc, #252]	; (405a64 <_dtoa_r+0xdcc>)
  405966:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40596a:	f001 fccd 	bl	407308 <__adddf3>
  40596e:	4632      	mov	r2, r6
  405970:	463b      	mov	r3, r7
  405972:	f002 f8ed 	bl	407b50 <__aeabi_dcmplt>
  405976:	2800      	cmp	r0, #0
  405978:	d04c      	beq.n	405a14 <_dtoa_r+0xd7c>
  40597a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40597c:	9304      	str	r3, [sp, #16]
  40597e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  405982:	f7ff bb46 	b.w	405012 <_dtoa_r+0x37a>
  405986:	f04f 0800 	mov.w	r8, #0
  40598a:	4646      	mov	r6, r8
  40598c:	e6a8      	b.n	4056e0 <_dtoa_r+0xa48>
  40598e:	9b05      	ldr	r3, [sp, #20]
  405990:	9a06      	ldr	r2, [sp, #24]
  405992:	1a9d      	subs	r5, r3, r2
  405994:	2300      	movs	r3, #0
  405996:	f7ff bb72 	b.w	40507e <_dtoa_r+0x3e6>
  40599a:	2700      	movs	r7, #0
  40599c:	e6ca      	b.n	405734 <_dtoa_r+0xa9c>
  40599e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4059a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4059a2:	9d05      	ldr	r5, [sp, #20]
  4059a4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4059a8:	f7ff bb69 	b.w	40507e <_dtoa_r+0x3e6>
  4059ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4059b0:	f04f 0802 	mov.w	r8, #2
  4059b4:	e4d6      	b.n	405364 <_dtoa_r+0x6cc>
  4059b6:	9408      	str	r4, [sp, #32]
  4059b8:	e5a0      	b.n	4054fc <_dtoa_r+0x864>
  4059ba:	9b06      	ldr	r3, [sp, #24]
  4059bc:	2b00      	cmp	r3, #0
  4059be:	f43f aebf 	beq.w	405740 <_dtoa_r+0xaa8>
  4059c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059c4:	2b00      	cmp	r3, #0
  4059c6:	f77f aee3 	ble.w	405790 <_dtoa_r+0xaf8>
  4059ca:	2200      	movs	r2, #0
  4059cc:	4b24      	ldr	r3, [pc, #144]	; (405a60 <_dtoa_r+0xdc8>)
  4059ce:	4630      	mov	r0, r6
  4059d0:	4639      	mov	r1, r7
  4059d2:	f001 fe4b 	bl	40766c <__aeabi_dmul>
  4059d6:	4606      	mov	r6, r0
  4059d8:	460f      	mov	r7, r1
  4059da:	f108 0001 	add.w	r0, r8, #1
  4059de:	f001 fddf 	bl	4075a0 <__aeabi_i2d>
  4059e2:	4632      	mov	r2, r6
  4059e4:	463b      	mov	r3, r7
  4059e6:	f001 fe41 	bl	40766c <__aeabi_dmul>
  4059ea:	2200      	movs	r2, #0
  4059ec:	4b18      	ldr	r3, [pc, #96]	; (405a50 <_dtoa_r+0xdb8>)
  4059ee:	f001 fc8b 	bl	407308 <__adddf3>
  4059f2:	9a04      	ldr	r2, [sp, #16]
  4059f4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4059f8:	3a01      	subs	r2, #1
  4059fa:	4604      	mov	r4, r0
  4059fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405a00:	9211      	str	r2, [sp, #68]	; 0x44
  405a02:	e4d0      	b.n	4053a6 <_dtoa_r+0x70e>
  405a04:	2239      	movs	r2, #57	; 0x39
  405a06:	46b3      	mov	fp, r6
  405a08:	9408      	str	r4, [sp, #32]
  405a0a:	9e05      	ldr	r6, [sp, #20]
  405a0c:	703a      	strb	r2, [r7, #0]
  405a0e:	1c7d      	adds	r5, r7, #1
  405a10:	f7ff bbf0 	b.w	4051f4 <_dtoa_r+0x55c>
  405a14:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  405a18:	2000      	movs	r0, #0
  405a1a:	4912      	ldr	r1, [pc, #72]	; (405a64 <_dtoa_r+0xdcc>)
  405a1c:	f001 fc72 	bl	407304 <__aeabi_dsub>
  405a20:	4632      	mov	r2, r6
  405a22:	463b      	mov	r3, r7
  405a24:	f002 f8b2 	bl	407b8c <__aeabi_dcmpgt>
  405a28:	b908      	cbnz	r0, 405a2e <_dtoa_r+0xd96>
  405a2a:	e6b1      	b.n	405790 <_dtoa_r+0xaf8>
  405a2c:	4615      	mov	r5, r2
  405a2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405a32:	2b30      	cmp	r3, #48	; 0x30
  405a34:	f105 32ff 	add.w	r2, r5, #4294967295
  405a38:	d0f8      	beq.n	405a2c <_dtoa_r+0xd94>
  405a3a:	e530      	b.n	40549e <_dtoa_r+0x806>
  405a3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a3e:	9304      	str	r3, [sp, #16]
  405a40:	f7ff bae7 	b.w	405012 <_dtoa_r+0x37a>
  405a44:	f1ba 0f00 	cmp.w	sl, #0
  405a48:	f47f ad7a 	bne.w	405540 <_dtoa_r+0x8a8>
  405a4c:	e661      	b.n	405712 <_dtoa_r+0xa7a>
  405a4e:	bf00      	nop
  405a50:	401c0000 	.word	0x401c0000
  405a54:	40140000 	.word	0x40140000
  405a58:	00407f38 	.word	0x00407f38
  405a5c:	00408000 	.word	0x00408000
  405a60:	40240000 	.word	0x40240000
  405a64:	3fe00000 	.word	0x3fe00000
  405a68:	2b39      	cmp	r3, #57	; 0x39
  405a6a:	f8cd b014 	str.w	fp, [sp, #20]
  405a6e:	46d0      	mov	r8, sl
  405a70:	f8dd b008 	ldr.w	fp, [sp, #8]
  405a74:	469a      	mov	sl, r3
  405a76:	d0c5      	beq.n	405a04 <_dtoa_r+0xd6c>
  405a78:	f1bb 0f00 	cmp.w	fp, #0
  405a7c:	f73f aebc 	bgt.w	4057f8 <_dtoa_r+0xb60>
  405a80:	e6bc      	b.n	4057fc <_dtoa_r+0xb64>
  405a82:	f47f aebb 	bne.w	4057fc <_dtoa_r+0xb64>
  405a86:	f01a 0f01 	tst.w	sl, #1
  405a8a:	f43f aeb7 	beq.w	4057fc <_dtoa_r+0xb64>
  405a8e:	e6af      	b.n	4057f0 <_dtoa_r+0xb58>
  405a90:	f04f 0800 	mov.w	r8, #0
  405a94:	4646      	mov	r6, r8
  405a96:	e531      	b.n	4054fc <_dtoa_r+0x864>
  405a98:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405a9a:	2b02      	cmp	r3, #2
  405a9c:	dc21      	bgt.n	405ae2 <_dtoa_r+0xe4a>
  405a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405aa0:	e604      	b.n	4056ac <_dtoa_r+0xa14>
  405aa2:	f04f 0802 	mov.w	r8, #2
  405aa6:	e45d      	b.n	405364 <_dtoa_r+0x6cc>
  405aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405aaa:	2b02      	cmp	r3, #2
  405aac:	dc19      	bgt.n	405ae2 <_dtoa_r+0xe4a>
  405aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405ab0:	e563      	b.n	40557a <_dtoa_r+0x8e2>
  405ab2:	2400      	movs	r4, #0
  405ab4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  405ab8:	4621      	mov	r1, r4
  405aba:	4648      	mov	r0, r9
  405abc:	f000 fda4 	bl	406608 <_Balloc>
  405ac0:	f04f 33ff 	mov.w	r3, #4294967295
  405ac4:	9306      	str	r3, [sp, #24]
  405ac6:	930d      	str	r3, [sp, #52]	; 0x34
  405ac8:	2301      	movs	r3, #1
  405aca:	9007      	str	r0, [sp, #28]
  405acc:	9421      	str	r4, [sp, #132]	; 0x84
  405ace:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405ad2:	9309      	str	r3, [sp, #36]	; 0x24
  405ad4:	f7ff b9e9 	b.w	404eaa <_dtoa_r+0x212>
  405ad8:	f43f ab3d 	beq.w	405156 <_dtoa_r+0x4be>
  405adc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405ae0:	e522      	b.n	405528 <_dtoa_r+0x890>
  405ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405ae4:	9306      	str	r3, [sp, #24]
  405ae6:	e5e9      	b.n	4056bc <_dtoa_r+0xa24>
  405ae8:	2501      	movs	r5, #1
  405aea:	f7ff b9a8 	b.w	404e3e <_dtoa_r+0x1a6>
  405aee:	bf00      	nop

00405af0 <__libc_fini_array>:
  405af0:	b538      	push	{r3, r4, r5, lr}
  405af2:	4d07      	ldr	r5, [pc, #28]	; (405b10 <__libc_fini_array+0x20>)
  405af4:	4c07      	ldr	r4, [pc, #28]	; (405b14 <__libc_fini_array+0x24>)
  405af6:	1b2c      	subs	r4, r5, r4
  405af8:	10a4      	asrs	r4, r4, #2
  405afa:	d005      	beq.n	405b08 <__libc_fini_array+0x18>
  405afc:	3c01      	subs	r4, #1
  405afe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405b02:	4798      	blx	r3
  405b04:	2c00      	cmp	r4, #0
  405b06:	d1f9      	bne.n	405afc <__libc_fini_array+0xc>
  405b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405b0c:	f002 ba9c 	b.w	408048 <_fini>
  405b10:	00408058 	.word	0x00408058
  405b14:	00408054 	.word	0x00408054

00405b18 <_malloc_trim_r>:
  405b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b1a:	4f23      	ldr	r7, [pc, #140]	; (405ba8 <_malloc_trim_r+0x90>)
  405b1c:	460c      	mov	r4, r1
  405b1e:	4606      	mov	r6, r0
  405b20:	f000 fd6e 	bl	406600 <__malloc_lock>
  405b24:	68bb      	ldr	r3, [r7, #8]
  405b26:	685d      	ldr	r5, [r3, #4]
  405b28:	f025 0503 	bic.w	r5, r5, #3
  405b2c:	1b29      	subs	r1, r5, r4
  405b2e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405b32:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405b36:	f021 010f 	bic.w	r1, r1, #15
  405b3a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405b3e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405b42:	db07      	blt.n	405b54 <_malloc_trim_r+0x3c>
  405b44:	2100      	movs	r1, #0
  405b46:	4630      	mov	r0, r6
  405b48:	f001 fa5c 	bl	407004 <_sbrk_r>
  405b4c:	68bb      	ldr	r3, [r7, #8]
  405b4e:	442b      	add	r3, r5
  405b50:	4298      	cmp	r0, r3
  405b52:	d004      	beq.n	405b5e <_malloc_trim_r+0x46>
  405b54:	4630      	mov	r0, r6
  405b56:	f000 fd55 	bl	406604 <__malloc_unlock>
  405b5a:	2000      	movs	r0, #0
  405b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b5e:	4261      	negs	r1, r4
  405b60:	4630      	mov	r0, r6
  405b62:	f001 fa4f 	bl	407004 <_sbrk_r>
  405b66:	3001      	adds	r0, #1
  405b68:	d00d      	beq.n	405b86 <_malloc_trim_r+0x6e>
  405b6a:	4b10      	ldr	r3, [pc, #64]	; (405bac <_malloc_trim_r+0x94>)
  405b6c:	68ba      	ldr	r2, [r7, #8]
  405b6e:	6819      	ldr	r1, [r3, #0]
  405b70:	1b2d      	subs	r5, r5, r4
  405b72:	f045 0501 	orr.w	r5, r5, #1
  405b76:	4630      	mov	r0, r6
  405b78:	1b09      	subs	r1, r1, r4
  405b7a:	6055      	str	r5, [r2, #4]
  405b7c:	6019      	str	r1, [r3, #0]
  405b7e:	f000 fd41 	bl	406604 <__malloc_unlock>
  405b82:	2001      	movs	r0, #1
  405b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b86:	2100      	movs	r1, #0
  405b88:	4630      	mov	r0, r6
  405b8a:	f001 fa3b 	bl	407004 <_sbrk_r>
  405b8e:	68ba      	ldr	r2, [r7, #8]
  405b90:	1a83      	subs	r3, r0, r2
  405b92:	2b0f      	cmp	r3, #15
  405b94:	ddde      	ble.n	405b54 <_malloc_trim_r+0x3c>
  405b96:	4c06      	ldr	r4, [pc, #24]	; (405bb0 <_malloc_trim_r+0x98>)
  405b98:	4904      	ldr	r1, [pc, #16]	; (405bac <_malloc_trim_r+0x94>)
  405b9a:	6824      	ldr	r4, [r4, #0]
  405b9c:	f043 0301 	orr.w	r3, r3, #1
  405ba0:	1b00      	subs	r0, r0, r4
  405ba2:	6053      	str	r3, [r2, #4]
  405ba4:	6008      	str	r0, [r1, #0]
  405ba6:	e7d5      	b.n	405b54 <_malloc_trim_r+0x3c>
  405ba8:	20000474 	.word	0x20000474
  405bac:	20008840 	.word	0x20008840
  405bb0:	20000880 	.word	0x20000880

00405bb4 <_free_r>:
  405bb4:	2900      	cmp	r1, #0
  405bb6:	d045      	beq.n	405c44 <_free_r+0x90>
  405bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405bbc:	460d      	mov	r5, r1
  405bbe:	4680      	mov	r8, r0
  405bc0:	f000 fd1e 	bl	406600 <__malloc_lock>
  405bc4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405bc8:	496a      	ldr	r1, [pc, #424]	; (405d74 <_free_r+0x1c0>)
  405bca:	f027 0301 	bic.w	r3, r7, #1
  405bce:	f1a5 0408 	sub.w	r4, r5, #8
  405bd2:	18e2      	adds	r2, r4, r3
  405bd4:	688e      	ldr	r6, [r1, #8]
  405bd6:	6850      	ldr	r0, [r2, #4]
  405bd8:	42b2      	cmp	r2, r6
  405bda:	f020 0003 	bic.w	r0, r0, #3
  405bde:	d062      	beq.n	405ca6 <_free_r+0xf2>
  405be0:	07fe      	lsls	r6, r7, #31
  405be2:	6050      	str	r0, [r2, #4]
  405be4:	d40b      	bmi.n	405bfe <_free_r+0x4a>
  405be6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405bea:	1be4      	subs	r4, r4, r7
  405bec:	f101 0e08 	add.w	lr, r1, #8
  405bf0:	68a5      	ldr	r5, [r4, #8]
  405bf2:	4575      	cmp	r5, lr
  405bf4:	443b      	add	r3, r7
  405bf6:	d06f      	beq.n	405cd8 <_free_r+0x124>
  405bf8:	68e7      	ldr	r7, [r4, #12]
  405bfa:	60ef      	str	r7, [r5, #12]
  405bfc:	60bd      	str	r5, [r7, #8]
  405bfe:	1815      	adds	r5, r2, r0
  405c00:	686d      	ldr	r5, [r5, #4]
  405c02:	07ed      	lsls	r5, r5, #31
  405c04:	d542      	bpl.n	405c8c <_free_r+0xd8>
  405c06:	f043 0201 	orr.w	r2, r3, #1
  405c0a:	6062      	str	r2, [r4, #4]
  405c0c:	50e3      	str	r3, [r4, r3]
  405c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c12:	d218      	bcs.n	405c46 <_free_r+0x92>
  405c14:	08db      	lsrs	r3, r3, #3
  405c16:	1c5a      	adds	r2, r3, #1
  405c18:	684d      	ldr	r5, [r1, #4]
  405c1a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  405c1e:	60a7      	str	r7, [r4, #8]
  405c20:	2001      	movs	r0, #1
  405c22:	109b      	asrs	r3, r3, #2
  405c24:	fa00 f303 	lsl.w	r3, r0, r3
  405c28:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  405c2c:	431d      	orrs	r5, r3
  405c2e:	3808      	subs	r0, #8
  405c30:	60e0      	str	r0, [r4, #12]
  405c32:	604d      	str	r5, [r1, #4]
  405c34:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  405c38:	60fc      	str	r4, [r7, #12]
  405c3a:	4640      	mov	r0, r8
  405c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c40:	f000 bce0 	b.w	406604 <__malloc_unlock>
  405c44:	4770      	bx	lr
  405c46:	0a5a      	lsrs	r2, r3, #9
  405c48:	2a04      	cmp	r2, #4
  405c4a:	d853      	bhi.n	405cf4 <_free_r+0x140>
  405c4c:	099a      	lsrs	r2, r3, #6
  405c4e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405c52:	007f      	lsls	r7, r7, #1
  405c54:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405c58:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  405c5c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  405c60:	4944      	ldr	r1, [pc, #272]	; (405d74 <_free_r+0x1c0>)
  405c62:	3808      	subs	r0, #8
  405c64:	4290      	cmp	r0, r2
  405c66:	d04d      	beq.n	405d04 <_free_r+0x150>
  405c68:	6851      	ldr	r1, [r2, #4]
  405c6a:	f021 0103 	bic.w	r1, r1, #3
  405c6e:	428b      	cmp	r3, r1
  405c70:	d202      	bcs.n	405c78 <_free_r+0xc4>
  405c72:	6892      	ldr	r2, [r2, #8]
  405c74:	4290      	cmp	r0, r2
  405c76:	d1f7      	bne.n	405c68 <_free_r+0xb4>
  405c78:	68d0      	ldr	r0, [r2, #12]
  405c7a:	60e0      	str	r0, [r4, #12]
  405c7c:	60a2      	str	r2, [r4, #8]
  405c7e:	6084      	str	r4, [r0, #8]
  405c80:	60d4      	str	r4, [r2, #12]
  405c82:	4640      	mov	r0, r8
  405c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c88:	f000 bcbc 	b.w	406604 <__malloc_unlock>
  405c8c:	6895      	ldr	r5, [r2, #8]
  405c8e:	4f3a      	ldr	r7, [pc, #232]	; (405d78 <_free_r+0x1c4>)
  405c90:	42bd      	cmp	r5, r7
  405c92:	4403      	add	r3, r0
  405c94:	d03f      	beq.n	405d16 <_free_r+0x162>
  405c96:	68d0      	ldr	r0, [r2, #12]
  405c98:	60e8      	str	r0, [r5, #12]
  405c9a:	f043 0201 	orr.w	r2, r3, #1
  405c9e:	6085      	str	r5, [r0, #8]
  405ca0:	6062      	str	r2, [r4, #4]
  405ca2:	50e3      	str	r3, [r4, r3]
  405ca4:	e7b3      	b.n	405c0e <_free_r+0x5a>
  405ca6:	07ff      	lsls	r7, r7, #31
  405ca8:	4403      	add	r3, r0
  405caa:	d407      	bmi.n	405cbc <_free_r+0x108>
  405cac:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405cb0:	1aa4      	subs	r4, r4, r2
  405cb2:	4413      	add	r3, r2
  405cb4:	68a0      	ldr	r0, [r4, #8]
  405cb6:	68e2      	ldr	r2, [r4, #12]
  405cb8:	60c2      	str	r2, [r0, #12]
  405cba:	6090      	str	r0, [r2, #8]
  405cbc:	4a2f      	ldr	r2, [pc, #188]	; (405d7c <_free_r+0x1c8>)
  405cbe:	6812      	ldr	r2, [r2, #0]
  405cc0:	f043 0001 	orr.w	r0, r3, #1
  405cc4:	4293      	cmp	r3, r2
  405cc6:	6060      	str	r0, [r4, #4]
  405cc8:	608c      	str	r4, [r1, #8]
  405cca:	d3b6      	bcc.n	405c3a <_free_r+0x86>
  405ccc:	4b2c      	ldr	r3, [pc, #176]	; (405d80 <_free_r+0x1cc>)
  405cce:	4640      	mov	r0, r8
  405cd0:	6819      	ldr	r1, [r3, #0]
  405cd2:	f7ff ff21 	bl	405b18 <_malloc_trim_r>
  405cd6:	e7b0      	b.n	405c3a <_free_r+0x86>
  405cd8:	1811      	adds	r1, r2, r0
  405cda:	6849      	ldr	r1, [r1, #4]
  405cdc:	07c9      	lsls	r1, r1, #31
  405cde:	d444      	bmi.n	405d6a <_free_r+0x1b6>
  405ce0:	6891      	ldr	r1, [r2, #8]
  405ce2:	68d2      	ldr	r2, [r2, #12]
  405ce4:	60ca      	str	r2, [r1, #12]
  405ce6:	4403      	add	r3, r0
  405ce8:	f043 0001 	orr.w	r0, r3, #1
  405cec:	6091      	str	r1, [r2, #8]
  405cee:	6060      	str	r0, [r4, #4]
  405cf0:	50e3      	str	r3, [r4, r3]
  405cf2:	e7a2      	b.n	405c3a <_free_r+0x86>
  405cf4:	2a14      	cmp	r2, #20
  405cf6:	d817      	bhi.n	405d28 <_free_r+0x174>
  405cf8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405cfc:	007f      	lsls	r7, r7, #1
  405cfe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405d02:	e7a9      	b.n	405c58 <_free_r+0xa4>
  405d04:	10aa      	asrs	r2, r5, #2
  405d06:	684b      	ldr	r3, [r1, #4]
  405d08:	2501      	movs	r5, #1
  405d0a:	fa05 f202 	lsl.w	r2, r5, r2
  405d0e:	4313      	orrs	r3, r2
  405d10:	604b      	str	r3, [r1, #4]
  405d12:	4602      	mov	r2, r0
  405d14:	e7b1      	b.n	405c7a <_free_r+0xc6>
  405d16:	f043 0201 	orr.w	r2, r3, #1
  405d1a:	614c      	str	r4, [r1, #20]
  405d1c:	610c      	str	r4, [r1, #16]
  405d1e:	60e5      	str	r5, [r4, #12]
  405d20:	60a5      	str	r5, [r4, #8]
  405d22:	6062      	str	r2, [r4, #4]
  405d24:	50e3      	str	r3, [r4, r3]
  405d26:	e788      	b.n	405c3a <_free_r+0x86>
  405d28:	2a54      	cmp	r2, #84	; 0x54
  405d2a:	d806      	bhi.n	405d3a <_free_r+0x186>
  405d2c:	0b1a      	lsrs	r2, r3, #12
  405d2e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405d32:	007f      	lsls	r7, r7, #1
  405d34:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405d38:	e78e      	b.n	405c58 <_free_r+0xa4>
  405d3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405d3e:	d806      	bhi.n	405d4e <_free_r+0x19a>
  405d40:	0bda      	lsrs	r2, r3, #15
  405d42:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405d46:	007f      	lsls	r7, r7, #1
  405d48:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405d4c:	e784      	b.n	405c58 <_free_r+0xa4>
  405d4e:	f240 5054 	movw	r0, #1364	; 0x554
  405d52:	4282      	cmp	r2, r0
  405d54:	d806      	bhi.n	405d64 <_free_r+0x1b0>
  405d56:	0c9a      	lsrs	r2, r3, #18
  405d58:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405d5c:	007f      	lsls	r7, r7, #1
  405d5e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405d62:	e779      	b.n	405c58 <_free_r+0xa4>
  405d64:	27fe      	movs	r7, #254	; 0xfe
  405d66:	257e      	movs	r5, #126	; 0x7e
  405d68:	e776      	b.n	405c58 <_free_r+0xa4>
  405d6a:	f043 0201 	orr.w	r2, r3, #1
  405d6e:	6062      	str	r2, [r4, #4]
  405d70:	50e3      	str	r3, [r4, r3]
  405d72:	e762      	b.n	405c3a <_free_r+0x86>
  405d74:	20000474 	.word	0x20000474
  405d78:	2000047c 	.word	0x2000047c
  405d7c:	2000087c 	.word	0x2000087c
  405d80:	2000883c 	.word	0x2000883c

00405d84 <_localeconv_r>:
  405d84:	4800      	ldr	r0, [pc, #0]	; (405d88 <_localeconv_r+0x4>)
  405d86:	4770      	bx	lr
  405d88:	2000043c 	.word	0x2000043c

00405d8c <_malloc_r>:
  405d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d90:	f101 050b 	add.w	r5, r1, #11
  405d94:	2d16      	cmp	r5, #22
  405d96:	b083      	sub	sp, #12
  405d98:	4606      	mov	r6, r0
  405d9a:	f240 809f 	bls.w	405edc <_malloc_r+0x150>
  405d9e:	f035 0507 	bics.w	r5, r5, #7
  405da2:	f100 80bf 	bmi.w	405f24 <_malloc_r+0x198>
  405da6:	42a9      	cmp	r1, r5
  405da8:	f200 80bc 	bhi.w	405f24 <_malloc_r+0x198>
  405dac:	f000 fc28 	bl	406600 <__malloc_lock>
  405db0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405db4:	f0c0 829c 	bcc.w	4062f0 <_malloc_r+0x564>
  405db8:	0a6b      	lsrs	r3, r5, #9
  405dba:	f000 80ba 	beq.w	405f32 <_malloc_r+0x1a6>
  405dbe:	2b04      	cmp	r3, #4
  405dc0:	f200 8183 	bhi.w	4060ca <_malloc_r+0x33e>
  405dc4:	09a8      	lsrs	r0, r5, #6
  405dc6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  405dca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  405dce:	3038      	adds	r0, #56	; 0x38
  405dd0:	4fc4      	ldr	r7, [pc, #784]	; (4060e4 <_malloc_r+0x358>)
  405dd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405dd6:	f1a3 0108 	sub.w	r1, r3, #8
  405dda:	685c      	ldr	r4, [r3, #4]
  405ddc:	42a1      	cmp	r1, r4
  405dde:	d107      	bne.n	405df0 <_malloc_r+0x64>
  405de0:	e0ac      	b.n	405f3c <_malloc_r+0x1b0>
  405de2:	2a00      	cmp	r2, #0
  405de4:	f280 80ac 	bge.w	405f40 <_malloc_r+0x1b4>
  405de8:	68e4      	ldr	r4, [r4, #12]
  405dea:	42a1      	cmp	r1, r4
  405dec:	f000 80a6 	beq.w	405f3c <_malloc_r+0x1b0>
  405df0:	6863      	ldr	r3, [r4, #4]
  405df2:	f023 0303 	bic.w	r3, r3, #3
  405df6:	1b5a      	subs	r2, r3, r5
  405df8:	2a0f      	cmp	r2, #15
  405dfa:	ddf2      	ble.n	405de2 <_malloc_r+0x56>
  405dfc:	49b9      	ldr	r1, [pc, #740]	; (4060e4 <_malloc_r+0x358>)
  405dfe:	693c      	ldr	r4, [r7, #16]
  405e00:	f101 0e08 	add.w	lr, r1, #8
  405e04:	4574      	cmp	r4, lr
  405e06:	f000 81b3 	beq.w	406170 <_malloc_r+0x3e4>
  405e0a:	6863      	ldr	r3, [r4, #4]
  405e0c:	f023 0303 	bic.w	r3, r3, #3
  405e10:	1b5a      	subs	r2, r3, r5
  405e12:	2a0f      	cmp	r2, #15
  405e14:	f300 8199 	bgt.w	40614a <_malloc_r+0x3be>
  405e18:	2a00      	cmp	r2, #0
  405e1a:	f8c1 e014 	str.w	lr, [r1, #20]
  405e1e:	f8c1 e010 	str.w	lr, [r1, #16]
  405e22:	f280 809e 	bge.w	405f62 <_malloc_r+0x1d6>
  405e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e2a:	f080 8167 	bcs.w	4060fc <_malloc_r+0x370>
  405e2e:	08db      	lsrs	r3, r3, #3
  405e30:	f103 0c01 	add.w	ip, r3, #1
  405e34:	2201      	movs	r2, #1
  405e36:	109b      	asrs	r3, r3, #2
  405e38:	fa02 f303 	lsl.w	r3, r2, r3
  405e3c:	684a      	ldr	r2, [r1, #4]
  405e3e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  405e42:	f8c4 8008 	str.w	r8, [r4, #8]
  405e46:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  405e4a:	431a      	orrs	r2, r3
  405e4c:	f1a9 0308 	sub.w	r3, r9, #8
  405e50:	60e3      	str	r3, [r4, #12]
  405e52:	604a      	str	r2, [r1, #4]
  405e54:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  405e58:	f8c8 400c 	str.w	r4, [r8, #12]
  405e5c:	1083      	asrs	r3, r0, #2
  405e5e:	2401      	movs	r4, #1
  405e60:	409c      	lsls	r4, r3
  405e62:	4294      	cmp	r4, r2
  405e64:	f200 808a 	bhi.w	405f7c <_malloc_r+0x1f0>
  405e68:	4214      	tst	r4, r2
  405e6a:	d106      	bne.n	405e7a <_malloc_r+0xee>
  405e6c:	f020 0003 	bic.w	r0, r0, #3
  405e70:	0064      	lsls	r4, r4, #1
  405e72:	4214      	tst	r4, r2
  405e74:	f100 0004 	add.w	r0, r0, #4
  405e78:	d0fa      	beq.n	405e70 <_malloc_r+0xe4>
  405e7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405e7e:	46cc      	mov	ip, r9
  405e80:	4680      	mov	r8, r0
  405e82:	f8dc 100c 	ldr.w	r1, [ip, #12]
  405e86:	458c      	cmp	ip, r1
  405e88:	d107      	bne.n	405e9a <_malloc_r+0x10e>
  405e8a:	e173      	b.n	406174 <_malloc_r+0x3e8>
  405e8c:	2a00      	cmp	r2, #0
  405e8e:	f280 8181 	bge.w	406194 <_malloc_r+0x408>
  405e92:	68c9      	ldr	r1, [r1, #12]
  405e94:	458c      	cmp	ip, r1
  405e96:	f000 816d 	beq.w	406174 <_malloc_r+0x3e8>
  405e9a:	684b      	ldr	r3, [r1, #4]
  405e9c:	f023 0303 	bic.w	r3, r3, #3
  405ea0:	1b5a      	subs	r2, r3, r5
  405ea2:	2a0f      	cmp	r2, #15
  405ea4:	ddf2      	ble.n	405e8c <_malloc_r+0x100>
  405ea6:	460c      	mov	r4, r1
  405ea8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  405eac:	f854 8f08 	ldr.w	r8, [r4, #8]!
  405eb0:	194b      	adds	r3, r1, r5
  405eb2:	f045 0501 	orr.w	r5, r5, #1
  405eb6:	604d      	str	r5, [r1, #4]
  405eb8:	f042 0101 	orr.w	r1, r2, #1
  405ebc:	f8c8 c00c 	str.w	ip, [r8, #12]
  405ec0:	4630      	mov	r0, r6
  405ec2:	f8cc 8008 	str.w	r8, [ip, #8]
  405ec6:	617b      	str	r3, [r7, #20]
  405ec8:	613b      	str	r3, [r7, #16]
  405eca:	f8c3 e00c 	str.w	lr, [r3, #12]
  405ece:	f8c3 e008 	str.w	lr, [r3, #8]
  405ed2:	6059      	str	r1, [r3, #4]
  405ed4:	509a      	str	r2, [r3, r2]
  405ed6:	f000 fb95 	bl	406604 <__malloc_unlock>
  405eda:	e01f      	b.n	405f1c <_malloc_r+0x190>
  405edc:	2910      	cmp	r1, #16
  405ede:	d821      	bhi.n	405f24 <_malloc_r+0x198>
  405ee0:	f000 fb8e 	bl	406600 <__malloc_lock>
  405ee4:	2510      	movs	r5, #16
  405ee6:	2306      	movs	r3, #6
  405ee8:	2002      	movs	r0, #2
  405eea:	4f7e      	ldr	r7, [pc, #504]	; (4060e4 <_malloc_r+0x358>)
  405eec:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  405ef0:	f1a3 0208 	sub.w	r2, r3, #8
  405ef4:	685c      	ldr	r4, [r3, #4]
  405ef6:	4294      	cmp	r4, r2
  405ef8:	f000 8145 	beq.w	406186 <_malloc_r+0x3fa>
  405efc:	6863      	ldr	r3, [r4, #4]
  405efe:	68e1      	ldr	r1, [r4, #12]
  405f00:	68a5      	ldr	r5, [r4, #8]
  405f02:	f023 0303 	bic.w	r3, r3, #3
  405f06:	4423      	add	r3, r4
  405f08:	4630      	mov	r0, r6
  405f0a:	685a      	ldr	r2, [r3, #4]
  405f0c:	60e9      	str	r1, [r5, #12]
  405f0e:	f042 0201 	orr.w	r2, r2, #1
  405f12:	608d      	str	r5, [r1, #8]
  405f14:	605a      	str	r2, [r3, #4]
  405f16:	f000 fb75 	bl	406604 <__malloc_unlock>
  405f1a:	3408      	adds	r4, #8
  405f1c:	4620      	mov	r0, r4
  405f1e:	b003      	add	sp, #12
  405f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f24:	2400      	movs	r4, #0
  405f26:	230c      	movs	r3, #12
  405f28:	4620      	mov	r0, r4
  405f2a:	6033      	str	r3, [r6, #0]
  405f2c:	b003      	add	sp, #12
  405f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f32:	2380      	movs	r3, #128	; 0x80
  405f34:	f04f 0e40 	mov.w	lr, #64	; 0x40
  405f38:	203f      	movs	r0, #63	; 0x3f
  405f3a:	e749      	b.n	405dd0 <_malloc_r+0x44>
  405f3c:	4670      	mov	r0, lr
  405f3e:	e75d      	b.n	405dfc <_malloc_r+0x70>
  405f40:	4423      	add	r3, r4
  405f42:	68e1      	ldr	r1, [r4, #12]
  405f44:	685a      	ldr	r2, [r3, #4]
  405f46:	68a5      	ldr	r5, [r4, #8]
  405f48:	f042 0201 	orr.w	r2, r2, #1
  405f4c:	60e9      	str	r1, [r5, #12]
  405f4e:	4630      	mov	r0, r6
  405f50:	608d      	str	r5, [r1, #8]
  405f52:	605a      	str	r2, [r3, #4]
  405f54:	f000 fb56 	bl	406604 <__malloc_unlock>
  405f58:	3408      	adds	r4, #8
  405f5a:	4620      	mov	r0, r4
  405f5c:	b003      	add	sp, #12
  405f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f62:	4423      	add	r3, r4
  405f64:	4630      	mov	r0, r6
  405f66:	685a      	ldr	r2, [r3, #4]
  405f68:	f042 0201 	orr.w	r2, r2, #1
  405f6c:	605a      	str	r2, [r3, #4]
  405f6e:	f000 fb49 	bl	406604 <__malloc_unlock>
  405f72:	3408      	adds	r4, #8
  405f74:	4620      	mov	r0, r4
  405f76:	b003      	add	sp, #12
  405f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f7c:	68bc      	ldr	r4, [r7, #8]
  405f7e:	6863      	ldr	r3, [r4, #4]
  405f80:	f023 0803 	bic.w	r8, r3, #3
  405f84:	45a8      	cmp	r8, r5
  405f86:	d304      	bcc.n	405f92 <_malloc_r+0x206>
  405f88:	ebc5 0308 	rsb	r3, r5, r8
  405f8c:	2b0f      	cmp	r3, #15
  405f8e:	f300 808c 	bgt.w	4060aa <_malloc_r+0x31e>
  405f92:	4b55      	ldr	r3, [pc, #340]	; (4060e8 <_malloc_r+0x35c>)
  405f94:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4060f8 <_malloc_r+0x36c>
  405f98:	681a      	ldr	r2, [r3, #0]
  405f9a:	f8d9 3000 	ldr.w	r3, [r9]
  405f9e:	3301      	adds	r3, #1
  405fa0:	442a      	add	r2, r5
  405fa2:	eb04 0a08 	add.w	sl, r4, r8
  405fa6:	f000 8160 	beq.w	40626a <_malloc_r+0x4de>
  405faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  405fae:	320f      	adds	r2, #15
  405fb0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  405fb4:	f022 020f 	bic.w	r2, r2, #15
  405fb8:	4611      	mov	r1, r2
  405fba:	4630      	mov	r0, r6
  405fbc:	9201      	str	r2, [sp, #4]
  405fbe:	f001 f821 	bl	407004 <_sbrk_r>
  405fc2:	f1b0 3fff 	cmp.w	r0, #4294967295
  405fc6:	4683      	mov	fp, r0
  405fc8:	9a01      	ldr	r2, [sp, #4]
  405fca:	f000 8158 	beq.w	40627e <_malloc_r+0x4f2>
  405fce:	4582      	cmp	sl, r0
  405fd0:	f200 80fc 	bhi.w	4061cc <_malloc_r+0x440>
  405fd4:	4b45      	ldr	r3, [pc, #276]	; (4060ec <_malloc_r+0x360>)
  405fd6:	6819      	ldr	r1, [r3, #0]
  405fd8:	45da      	cmp	sl, fp
  405fda:	4411      	add	r1, r2
  405fdc:	6019      	str	r1, [r3, #0]
  405fde:	f000 8153 	beq.w	406288 <_malloc_r+0x4fc>
  405fe2:	f8d9 0000 	ldr.w	r0, [r9]
  405fe6:	f8df e110 	ldr.w	lr, [pc, #272]	; 4060f8 <_malloc_r+0x36c>
  405fea:	3001      	adds	r0, #1
  405fec:	bf1b      	ittet	ne
  405fee:	ebca 0a0b 	rsbne	sl, sl, fp
  405ff2:	4451      	addne	r1, sl
  405ff4:	f8ce b000 	streq.w	fp, [lr]
  405ff8:	6019      	strne	r1, [r3, #0]
  405ffa:	f01b 0107 	ands.w	r1, fp, #7
  405ffe:	f000 8117 	beq.w	406230 <_malloc_r+0x4a4>
  406002:	f1c1 0008 	rsb	r0, r1, #8
  406006:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40600a:	4483      	add	fp, r0
  40600c:	3108      	adds	r1, #8
  40600e:	445a      	add	r2, fp
  406010:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406014:	ebc2 0901 	rsb	r9, r2, r1
  406018:	4649      	mov	r1, r9
  40601a:	4630      	mov	r0, r6
  40601c:	9301      	str	r3, [sp, #4]
  40601e:	f000 fff1 	bl	407004 <_sbrk_r>
  406022:	1c43      	adds	r3, r0, #1
  406024:	9b01      	ldr	r3, [sp, #4]
  406026:	f000 813f 	beq.w	4062a8 <_malloc_r+0x51c>
  40602a:	ebcb 0200 	rsb	r2, fp, r0
  40602e:	444a      	add	r2, r9
  406030:	f042 0201 	orr.w	r2, r2, #1
  406034:	6819      	ldr	r1, [r3, #0]
  406036:	f8c7 b008 	str.w	fp, [r7, #8]
  40603a:	4449      	add	r1, r9
  40603c:	42bc      	cmp	r4, r7
  40603e:	f8cb 2004 	str.w	r2, [fp, #4]
  406042:	6019      	str	r1, [r3, #0]
  406044:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4060ec <_malloc_r+0x360>
  406048:	d016      	beq.n	406078 <_malloc_r+0x2ec>
  40604a:	f1b8 0f0f 	cmp.w	r8, #15
  40604e:	f240 80fd 	bls.w	40624c <_malloc_r+0x4c0>
  406052:	6862      	ldr	r2, [r4, #4]
  406054:	f1a8 030c 	sub.w	r3, r8, #12
  406058:	f023 0307 	bic.w	r3, r3, #7
  40605c:	18e0      	adds	r0, r4, r3
  40605e:	f002 0201 	and.w	r2, r2, #1
  406062:	f04f 0e05 	mov.w	lr, #5
  406066:	431a      	orrs	r2, r3
  406068:	2b0f      	cmp	r3, #15
  40606a:	6062      	str	r2, [r4, #4]
  40606c:	f8c0 e004 	str.w	lr, [r0, #4]
  406070:	f8c0 e008 	str.w	lr, [r0, #8]
  406074:	f200 811c 	bhi.w	4062b0 <_malloc_r+0x524>
  406078:	4b1d      	ldr	r3, [pc, #116]	; (4060f0 <_malloc_r+0x364>)
  40607a:	68bc      	ldr	r4, [r7, #8]
  40607c:	681a      	ldr	r2, [r3, #0]
  40607e:	4291      	cmp	r1, r2
  406080:	bf88      	it	hi
  406082:	6019      	strhi	r1, [r3, #0]
  406084:	4b1b      	ldr	r3, [pc, #108]	; (4060f4 <_malloc_r+0x368>)
  406086:	681a      	ldr	r2, [r3, #0]
  406088:	4291      	cmp	r1, r2
  40608a:	6862      	ldr	r2, [r4, #4]
  40608c:	bf88      	it	hi
  40608e:	6019      	strhi	r1, [r3, #0]
  406090:	f022 0203 	bic.w	r2, r2, #3
  406094:	4295      	cmp	r5, r2
  406096:	eba2 0305 	sub.w	r3, r2, r5
  40609a:	d801      	bhi.n	4060a0 <_malloc_r+0x314>
  40609c:	2b0f      	cmp	r3, #15
  40609e:	dc04      	bgt.n	4060aa <_malloc_r+0x31e>
  4060a0:	4630      	mov	r0, r6
  4060a2:	f000 faaf 	bl	406604 <__malloc_unlock>
  4060a6:	2400      	movs	r4, #0
  4060a8:	e738      	b.n	405f1c <_malloc_r+0x190>
  4060aa:	1962      	adds	r2, r4, r5
  4060ac:	f043 0301 	orr.w	r3, r3, #1
  4060b0:	f045 0501 	orr.w	r5, r5, #1
  4060b4:	6065      	str	r5, [r4, #4]
  4060b6:	4630      	mov	r0, r6
  4060b8:	60ba      	str	r2, [r7, #8]
  4060ba:	6053      	str	r3, [r2, #4]
  4060bc:	f000 faa2 	bl	406604 <__malloc_unlock>
  4060c0:	3408      	adds	r4, #8
  4060c2:	4620      	mov	r0, r4
  4060c4:	b003      	add	sp, #12
  4060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060ca:	2b14      	cmp	r3, #20
  4060cc:	d971      	bls.n	4061b2 <_malloc_r+0x426>
  4060ce:	2b54      	cmp	r3, #84	; 0x54
  4060d0:	f200 80a4 	bhi.w	40621c <_malloc_r+0x490>
  4060d4:	0b28      	lsrs	r0, r5, #12
  4060d6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4060da:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4060de:	306e      	adds	r0, #110	; 0x6e
  4060e0:	e676      	b.n	405dd0 <_malloc_r+0x44>
  4060e2:	bf00      	nop
  4060e4:	20000474 	.word	0x20000474
  4060e8:	2000883c 	.word	0x2000883c
  4060ec:	20008840 	.word	0x20008840
  4060f0:	20008838 	.word	0x20008838
  4060f4:	20008834 	.word	0x20008834
  4060f8:	20000880 	.word	0x20000880
  4060fc:	0a5a      	lsrs	r2, r3, #9
  4060fe:	2a04      	cmp	r2, #4
  406100:	d95e      	bls.n	4061c0 <_malloc_r+0x434>
  406102:	2a14      	cmp	r2, #20
  406104:	f200 80b3 	bhi.w	40626e <_malloc_r+0x4e2>
  406108:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40610c:	0049      	lsls	r1, r1, #1
  40610e:	325b      	adds	r2, #91	; 0x5b
  406110:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  406114:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406118:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4062f8 <_malloc_r+0x56c>
  40611c:	f1ac 0c08 	sub.w	ip, ip, #8
  406120:	458c      	cmp	ip, r1
  406122:	f000 8088 	beq.w	406236 <_malloc_r+0x4aa>
  406126:	684a      	ldr	r2, [r1, #4]
  406128:	f022 0203 	bic.w	r2, r2, #3
  40612c:	4293      	cmp	r3, r2
  40612e:	d202      	bcs.n	406136 <_malloc_r+0x3aa>
  406130:	6889      	ldr	r1, [r1, #8]
  406132:	458c      	cmp	ip, r1
  406134:	d1f7      	bne.n	406126 <_malloc_r+0x39a>
  406136:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40613a:	687a      	ldr	r2, [r7, #4]
  40613c:	f8c4 c00c 	str.w	ip, [r4, #12]
  406140:	60a1      	str	r1, [r4, #8]
  406142:	f8cc 4008 	str.w	r4, [ip, #8]
  406146:	60cc      	str	r4, [r1, #12]
  406148:	e688      	b.n	405e5c <_malloc_r+0xd0>
  40614a:	1963      	adds	r3, r4, r5
  40614c:	f042 0701 	orr.w	r7, r2, #1
  406150:	f045 0501 	orr.w	r5, r5, #1
  406154:	6065      	str	r5, [r4, #4]
  406156:	4630      	mov	r0, r6
  406158:	614b      	str	r3, [r1, #20]
  40615a:	610b      	str	r3, [r1, #16]
  40615c:	f8c3 e00c 	str.w	lr, [r3, #12]
  406160:	f8c3 e008 	str.w	lr, [r3, #8]
  406164:	605f      	str	r7, [r3, #4]
  406166:	509a      	str	r2, [r3, r2]
  406168:	3408      	adds	r4, #8
  40616a:	f000 fa4b 	bl	406604 <__malloc_unlock>
  40616e:	e6d5      	b.n	405f1c <_malloc_r+0x190>
  406170:	684a      	ldr	r2, [r1, #4]
  406172:	e673      	b.n	405e5c <_malloc_r+0xd0>
  406174:	f108 0801 	add.w	r8, r8, #1
  406178:	f018 0f03 	tst.w	r8, #3
  40617c:	f10c 0c08 	add.w	ip, ip, #8
  406180:	f47f ae7f 	bne.w	405e82 <_malloc_r+0xf6>
  406184:	e030      	b.n	4061e8 <_malloc_r+0x45c>
  406186:	68dc      	ldr	r4, [r3, #12]
  406188:	42a3      	cmp	r3, r4
  40618a:	bf08      	it	eq
  40618c:	3002      	addeq	r0, #2
  40618e:	f43f ae35 	beq.w	405dfc <_malloc_r+0x70>
  406192:	e6b3      	b.n	405efc <_malloc_r+0x170>
  406194:	440b      	add	r3, r1
  406196:	460c      	mov	r4, r1
  406198:	685a      	ldr	r2, [r3, #4]
  40619a:	68c9      	ldr	r1, [r1, #12]
  40619c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4061a0:	f042 0201 	orr.w	r2, r2, #1
  4061a4:	605a      	str	r2, [r3, #4]
  4061a6:	4630      	mov	r0, r6
  4061a8:	60e9      	str	r1, [r5, #12]
  4061aa:	608d      	str	r5, [r1, #8]
  4061ac:	f000 fa2a 	bl	406604 <__malloc_unlock>
  4061b0:	e6b4      	b.n	405f1c <_malloc_r+0x190>
  4061b2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4061b6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4061ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4061be:	e607      	b.n	405dd0 <_malloc_r+0x44>
  4061c0:	099a      	lsrs	r2, r3, #6
  4061c2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4061c6:	0049      	lsls	r1, r1, #1
  4061c8:	3238      	adds	r2, #56	; 0x38
  4061ca:	e7a1      	b.n	406110 <_malloc_r+0x384>
  4061cc:	42bc      	cmp	r4, r7
  4061ce:	4b4a      	ldr	r3, [pc, #296]	; (4062f8 <_malloc_r+0x56c>)
  4061d0:	f43f af00 	beq.w	405fd4 <_malloc_r+0x248>
  4061d4:	689c      	ldr	r4, [r3, #8]
  4061d6:	6862      	ldr	r2, [r4, #4]
  4061d8:	f022 0203 	bic.w	r2, r2, #3
  4061dc:	e75a      	b.n	406094 <_malloc_r+0x308>
  4061de:	f859 3908 	ldr.w	r3, [r9], #-8
  4061e2:	4599      	cmp	r9, r3
  4061e4:	f040 8082 	bne.w	4062ec <_malloc_r+0x560>
  4061e8:	f010 0f03 	tst.w	r0, #3
  4061ec:	f100 30ff 	add.w	r0, r0, #4294967295
  4061f0:	d1f5      	bne.n	4061de <_malloc_r+0x452>
  4061f2:	687b      	ldr	r3, [r7, #4]
  4061f4:	ea23 0304 	bic.w	r3, r3, r4
  4061f8:	607b      	str	r3, [r7, #4]
  4061fa:	0064      	lsls	r4, r4, #1
  4061fc:	429c      	cmp	r4, r3
  4061fe:	f63f aebd 	bhi.w	405f7c <_malloc_r+0x1f0>
  406202:	2c00      	cmp	r4, #0
  406204:	f43f aeba 	beq.w	405f7c <_malloc_r+0x1f0>
  406208:	421c      	tst	r4, r3
  40620a:	4640      	mov	r0, r8
  40620c:	f47f ae35 	bne.w	405e7a <_malloc_r+0xee>
  406210:	0064      	lsls	r4, r4, #1
  406212:	421c      	tst	r4, r3
  406214:	f100 0004 	add.w	r0, r0, #4
  406218:	d0fa      	beq.n	406210 <_malloc_r+0x484>
  40621a:	e62e      	b.n	405e7a <_malloc_r+0xee>
  40621c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406220:	d818      	bhi.n	406254 <_malloc_r+0x4c8>
  406222:	0be8      	lsrs	r0, r5, #15
  406224:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406228:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40622c:	3077      	adds	r0, #119	; 0x77
  40622e:	e5cf      	b.n	405dd0 <_malloc_r+0x44>
  406230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406234:	e6eb      	b.n	40600e <_malloc_r+0x282>
  406236:	2101      	movs	r1, #1
  406238:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40623c:	1092      	asrs	r2, r2, #2
  40623e:	fa01 f202 	lsl.w	r2, r1, r2
  406242:	431a      	orrs	r2, r3
  406244:	f8c8 2004 	str.w	r2, [r8, #4]
  406248:	4661      	mov	r1, ip
  40624a:	e777      	b.n	40613c <_malloc_r+0x3b0>
  40624c:	2301      	movs	r3, #1
  40624e:	f8cb 3004 	str.w	r3, [fp, #4]
  406252:	e725      	b.n	4060a0 <_malloc_r+0x314>
  406254:	f240 5254 	movw	r2, #1364	; 0x554
  406258:	4293      	cmp	r3, r2
  40625a:	d820      	bhi.n	40629e <_malloc_r+0x512>
  40625c:	0ca8      	lsrs	r0, r5, #18
  40625e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  406262:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406266:	307c      	adds	r0, #124	; 0x7c
  406268:	e5b2      	b.n	405dd0 <_malloc_r+0x44>
  40626a:	3210      	adds	r2, #16
  40626c:	e6a4      	b.n	405fb8 <_malloc_r+0x22c>
  40626e:	2a54      	cmp	r2, #84	; 0x54
  406270:	d826      	bhi.n	4062c0 <_malloc_r+0x534>
  406272:	0b1a      	lsrs	r2, r3, #12
  406274:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406278:	0049      	lsls	r1, r1, #1
  40627a:	326e      	adds	r2, #110	; 0x6e
  40627c:	e748      	b.n	406110 <_malloc_r+0x384>
  40627e:	68bc      	ldr	r4, [r7, #8]
  406280:	6862      	ldr	r2, [r4, #4]
  406282:	f022 0203 	bic.w	r2, r2, #3
  406286:	e705      	b.n	406094 <_malloc_r+0x308>
  406288:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40628c:	2800      	cmp	r0, #0
  40628e:	f47f aea8 	bne.w	405fe2 <_malloc_r+0x256>
  406292:	4442      	add	r2, r8
  406294:	68bb      	ldr	r3, [r7, #8]
  406296:	f042 0201 	orr.w	r2, r2, #1
  40629a:	605a      	str	r2, [r3, #4]
  40629c:	e6ec      	b.n	406078 <_malloc_r+0x2ec>
  40629e:	23fe      	movs	r3, #254	; 0xfe
  4062a0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4062a4:	207e      	movs	r0, #126	; 0x7e
  4062a6:	e593      	b.n	405dd0 <_malloc_r+0x44>
  4062a8:	2201      	movs	r2, #1
  4062aa:	f04f 0900 	mov.w	r9, #0
  4062ae:	e6c1      	b.n	406034 <_malloc_r+0x2a8>
  4062b0:	f104 0108 	add.w	r1, r4, #8
  4062b4:	4630      	mov	r0, r6
  4062b6:	f7ff fc7d 	bl	405bb4 <_free_r>
  4062ba:	f8d9 1000 	ldr.w	r1, [r9]
  4062be:	e6db      	b.n	406078 <_malloc_r+0x2ec>
  4062c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4062c4:	d805      	bhi.n	4062d2 <_malloc_r+0x546>
  4062c6:	0bda      	lsrs	r2, r3, #15
  4062c8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4062cc:	0049      	lsls	r1, r1, #1
  4062ce:	3277      	adds	r2, #119	; 0x77
  4062d0:	e71e      	b.n	406110 <_malloc_r+0x384>
  4062d2:	f240 5154 	movw	r1, #1364	; 0x554
  4062d6:	428a      	cmp	r2, r1
  4062d8:	d805      	bhi.n	4062e6 <_malloc_r+0x55a>
  4062da:	0c9a      	lsrs	r2, r3, #18
  4062dc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4062e0:	0049      	lsls	r1, r1, #1
  4062e2:	327c      	adds	r2, #124	; 0x7c
  4062e4:	e714      	b.n	406110 <_malloc_r+0x384>
  4062e6:	21fe      	movs	r1, #254	; 0xfe
  4062e8:	227e      	movs	r2, #126	; 0x7e
  4062ea:	e711      	b.n	406110 <_malloc_r+0x384>
  4062ec:	687b      	ldr	r3, [r7, #4]
  4062ee:	e784      	b.n	4061fa <_malloc_r+0x46e>
  4062f0:	08e8      	lsrs	r0, r5, #3
  4062f2:	1c43      	adds	r3, r0, #1
  4062f4:	005b      	lsls	r3, r3, #1
  4062f6:	e5f8      	b.n	405eea <_malloc_r+0x15e>
  4062f8:	20000474 	.word	0x20000474
  4062fc:	00000000 	.word	0x00000000

00406300 <memchr>:
  406300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406304:	2a10      	cmp	r2, #16
  406306:	db2b      	blt.n	406360 <memchr+0x60>
  406308:	f010 0f07 	tst.w	r0, #7
  40630c:	d008      	beq.n	406320 <memchr+0x20>
  40630e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406312:	3a01      	subs	r2, #1
  406314:	428b      	cmp	r3, r1
  406316:	d02d      	beq.n	406374 <memchr+0x74>
  406318:	f010 0f07 	tst.w	r0, #7
  40631c:	b342      	cbz	r2, 406370 <memchr+0x70>
  40631e:	d1f6      	bne.n	40630e <memchr+0xe>
  406320:	b4f0      	push	{r4, r5, r6, r7}
  406322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40632a:	f022 0407 	bic.w	r4, r2, #7
  40632e:	f07f 0700 	mvns.w	r7, #0
  406332:	2300      	movs	r3, #0
  406334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406338:	3c08      	subs	r4, #8
  40633a:	ea85 0501 	eor.w	r5, r5, r1
  40633e:	ea86 0601 	eor.w	r6, r6, r1
  406342:	fa85 f547 	uadd8	r5, r5, r7
  406346:	faa3 f587 	sel	r5, r3, r7
  40634a:	fa86 f647 	uadd8	r6, r6, r7
  40634e:	faa5 f687 	sel	r6, r5, r7
  406352:	b98e      	cbnz	r6, 406378 <memchr+0x78>
  406354:	d1ee      	bne.n	406334 <memchr+0x34>
  406356:	bcf0      	pop	{r4, r5, r6, r7}
  406358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40635c:	f002 0207 	and.w	r2, r2, #7
  406360:	b132      	cbz	r2, 406370 <memchr+0x70>
  406362:	f810 3b01 	ldrb.w	r3, [r0], #1
  406366:	3a01      	subs	r2, #1
  406368:	ea83 0301 	eor.w	r3, r3, r1
  40636c:	b113      	cbz	r3, 406374 <memchr+0x74>
  40636e:	d1f8      	bne.n	406362 <memchr+0x62>
  406370:	2000      	movs	r0, #0
  406372:	4770      	bx	lr
  406374:	3801      	subs	r0, #1
  406376:	4770      	bx	lr
  406378:	2d00      	cmp	r5, #0
  40637a:	bf06      	itte	eq
  40637c:	4635      	moveq	r5, r6
  40637e:	3803      	subeq	r0, #3
  406380:	3807      	subne	r0, #7
  406382:	f015 0f01 	tst.w	r5, #1
  406386:	d107      	bne.n	406398 <memchr+0x98>
  406388:	3001      	adds	r0, #1
  40638a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40638e:	bf02      	ittt	eq
  406390:	3001      	addeq	r0, #1
  406392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406396:	3001      	addeq	r0, #1
  406398:	bcf0      	pop	{r4, r5, r6, r7}
  40639a:	3801      	subs	r0, #1
  40639c:	4770      	bx	lr
  40639e:	bf00      	nop

004063a0 <memcmp>:
  4063a0:	2a03      	cmp	r2, #3
  4063a2:	b470      	push	{r4, r5, r6}
  4063a4:	d926      	bls.n	4063f4 <memcmp+0x54>
  4063a6:	ea40 0301 	orr.w	r3, r0, r1
  4063aa:	079b      	lsls	r3, r3, #30
  4063ac:	d011      	beq.n	4063d2 <memcmp+0x32>
  4063ae:	7804      	ldrb	r4, [r0, #0]
  4063b0:	780d      	ldrb	r5, [r1, #0]
  4063b2:	42ac      	cmp	r4, r5
  4063b4:	d122      	bne.n	4063fc <memcmp+0x5c>
  4063b6:	4402      	add	r2, r0
  4063b8:	1c43      	adds	r3, r0, #1
  4063ba:	e005      	b.n	4063c8 <memcmp+0x28>
  4063bc:	f813 4b01 	ldrb.w	r4, [r3], #1
  4063c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4063c4:	42ac      	cmp	r4, r5
  4063c6:	d119      	bne.n	4063fc <memcmp+0x5c>
  4063c8:	4293      	cmp	r3, r2
  4063ca:	d1f7      	bne.n	4063bc <memcmp+0x1c>
  4063cc:	2000      	movs	r0, #0
  4063ce:	bc70      	pop	{r4, r5, r6}
  4063d0:	4770      	bx	lr
  4063d2:	460c      	mov	r4, r1
  4063d4:	4603      	mov	r3, r0
  4063d6:	681e      	ldr	r6, [r3, #0]
  4063d8:	6825      	ldr	r5, [r4, #0]
  4063da:	42ae      	cmp	r6, r5
  4063dc:	4618      	mov	r0, r3
  4063de:	4621      	mov	r1, r4
  4063e0:	f103 0304 	add.w	r3, r3, #4
  4063e4:	f104 0404 	add.w	r4, r4, #4
  4063e8:	d1e1      	bne.n	4063ae <memcmp+0xe>
  4063ea:	3a04      	subs	r2, #4
  4063ec:	2a03      	cmp	r2, #3
  4063ee:	4618      	mov	r0, r3
  4063f0:	4621      	mov	r1, r4
  4063f2:	d8f0      	bhi.n	4063d6 <memcmp+0x36>
  4063f4:	2a00      	cmp	r2, #0
  4063f6:	d1da      	bne.n	4063ae <memcmp+0xe>
  4063f8:	4610      	mov	r0, r2
  4063fa:	e7e8      	b.n	4063ce <memcmp+0x2e>
  4063fc:	1b60      	subs	r0, r4, r5
  4063fe:	bc70      	pop	{r4, r5, r6}
  406400:	4770      	bx	lr
  406402:	bf00      	nop

00406404 <memcpy>:
  406404:	4684      	mov	ip, r0
  406406:	ea41 0300 	orr.w	r3, r1, r0
  40640a:	f013 0303 	ands.w	r3, r3, #3
  40640e:	d16d      	bne.n	4064ec <memcpy+0xe8>
  406410:	3a40      	subs	r2, #64	; 0x40
  406412:	d341      	bcc.n	406498 <memcpy+0x94>
  406414:	f851 3b04 	ldr.w	r3, [r1], #4
  406418:	f840 3b04 	str.w	r3, [r0], #4
  40641c:	f851 3b04 	ldr.w	r3, [r1], #4
  406420:	f840 3b04 	str.w	r3, [r0], #4
  406424:	f851 3b04 	ldr.w	r3, [r1], #4
  406428:	f840 3b04 	str.w	r3, [r0], #4
  40642c:	f851 3b04 	ldr.w	r3, [r1], #4
  406430:	f840 3b04 	str.w	r3, [r0], #4
  406434:	f851 3b04 	ldr.w	r3, [r1], #4
  406438:	f840 3b04 	str.w	r3, [r0], #4
  40643c:	f851 3b04 	ldr.w	r3, [r1], #4
  406440:	f840 3b04 	str.w	r3, [r0], #4
  406444:	f851 3b04 	ldr.w	r3, [r1], #4
  406448:	f840 3b04 	str.w	r3, [r0], #4
  40644c:	f851 3b04 	ldr.w	r3, [r1], #4
  406450:	f840 3b04 	str.w	r3, [r0], #4
  406454:	f851 3b04 	ldr.w	r3, [r1], #4
  406458:	f840 3b04 	str.w	r3, [r0], #4
  40645c:	f851 3b04 	ldr.w	r3, [r1], #4
  406460:	f840 3b04 	str.w	r3, [r0], #4
  406464:	f851 3b04 	ldr.w	r3, [r1], #4
  406468:	f840 3b04 	str.w	r3, [r0], #4
  40646c:	f851 3b04 	ldr.w	r3, [r1], #4
  406470:	f840 3b04 	str.w	r3, [r0], #4
  406474:	f851 3b04 	ldr.w	r3, [r1], #4
  406478:	f840 3b04 	str.w	r3, [r0], #4
  40647c:	f851 3b04 	ldr.w	r3, [r1], #4
  406480:	f840 3b04 	str.w	r3, [r0], #4
  406484:	f851 3b04 	ldr.w	r3, [r1], #4
  406488:	f840 3b04 	str.w	r3, [r0], #4
  40648c:	f851 3b04 	ldr.w	r3, [r1], #4
  406490:	f840 3b04 	str.w	r3, [r0], #4
  406494:	3a40      	subs	r2, #64	; 0x40
  406496:	d2bd      	bcs.n	406414 <memcpy+0x10>
  406498:	3230      	adds	r2, #48	; 0x30
  40649a:	d311      	bcc.n	4064c0 <memcpy+0xbc>
  40649c:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a0:	f840 3b04 	str.w	r3, [r0], #4
  4064a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a8:	f840 3b04 	str.w	r3, [r0], #4
  4064ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4064b0:	f840 3b04 	str.w	r3, [r0], #4
  4064b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064b8:	f840 3b04 	str.w	r3, [r0], #4
  4064bc:	3a10      	subs	r2, #16
  4064be:	d2ed      	bcs.n	40649c <memcpy+0x98>
  4064c0:	320c      	adds	r2, #12
  4064c2:	d305      	bcc.n	4064d0 <memcpy+0xcc>
  4064c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064c8:	f840 3b04 	str.w	r3, [r0], #4
  4064cc:	3a04      	subs	r2, #4
  4064ce:	d2f9      	bcs.n	4064c4 <memcpy+0xc0>
  4064d0:	3204      	adds	r2, #4
  4064d2:	d008      	beq.n	4064e6 <memcpy+0xe2>
  4064d4:	07d2      	lsls	r2, r2, #31
  4064d6:	bf1c      	itt	ne
  4064d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064dc:	f800 3b01 	strbne.w	r3, [r0], #1
  4064e0:	d301      	bcc.n	4064e6 <memcpy+0xe2>
  4064e2:	880b      	ldrh	r3, [r1, #0]
  4064e4:	8003      	strh	r3, [r0, #0]
  4064e6:	4660      	mov	r0, ip
  4064e8:	4770      	bx	lr
  4064ea:	bf00      	nop
  4064ec:	2a08      	cmp	r2, #8
  4064ee:	d313      	bcc.n	406518 <memcpy+0x114>
  4064f0:	078b      	lsls	r3, r1, #30
  4064f2:	d08d      	beq.n	406410 <memcpy+0xc>
  4064f4:	f010 0303 	ands.w	r3, r0, #3
  4064f8:	d08a      	beq.n	406410 <memcpy+0xc>
  4064fa:	f1c3 0304 	rsb	r3, r3, #4
  4064fe:	1ad2      	subs	r2, r2, r3
  406500:	07db      	lsls	r3, r3, #31
  406502:	bf1c      	itt	ne
  406504:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406508:	f800 3b01 	strbne.w	r3, [r0], #1
  40650c:	d380      	bcc.n	406410 <memcpy+0xc>
  40650e:	f831 3b02 	ldrh.w	r3, [r1], #2
  406512:	f820 3b02 	strh.w	r3, [r0], #2
  406516:	e77b      	b.n	406410 <memcpy+0xc>
  406518:	3a04      	subs	r2, #4
  40651a:	d3d9      	bcc.n	4064d0 <memcpy+0xcc>
  40651c:	3a01      	subs	r2, #1
  40651e:	f811 3b01 	ldrb.w	r3, [r1], #1
  406522:	f800 3b01 	strb.w	r3, [r0], #1
  406526:	d2f9      	bcs.n	40651c <memcpy+0x118>
  406528:	780b      	ldrb	r3, [r1, #0]
  40652a:	7003      	strb	r3, [r0, #0]
  40652c:	784b      	ldrb	r3, [r1, #1]
  40652e:	7043      	strb	r3, [r0, #1]
  406530:	788b      	ldrb	r3, [r1, #2]
  406532:	7083      	strb	r3, [r0, #2]
  406534:	4660      	mov	r0, ip
  406536:	4770      	bx	lr

00406538 <memmove>:
  406538:	4288      	cmp	r0, r1
  40653a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40653c:	d90d      	bls.n	40655a <memmove+0x22>
  40653e:	188b      	adds	r3, r1, r2
  406540:	4298      	cmp	r0, r3
  406542:	d20a      	bcs.n	40655a <memmove+0x22>
  406544:	1881      	adds	r1, r0, r2
  406546:	2a00      	cmp	r2, #0
  406548:	d051      	beq.n	4065ee <memmove+0xb6>
  40654a:	1a9a      	subs	r2, r3, r2
  40654c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406550:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406554:	4293      	cmp	r3, r2
  406556:	d1f9      	bne.n	40654c <memmove+0x14>
  406558:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40655a:	2a0f      	cmp	r2, #15
  40655c:	d948      	bls.n	4065f0 <memmove+0xb8>
  40655e:	ea41 0300 	orr.w	r3, r1, r0
  406562:	079b      	lsls	r3, r3, #30
  406564:	d146      	bne.n	4065f4 <memmove+0xbc>
  406566:	f100 0410 	add.w	r4, r0, #16
  40656a:	f101 0310 	add.w	r3, r1, #16
  40656e:	4615      	mov	r5, r2
  406570:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406574:	f844 6c10 	str.w	r6, [r4, #-16]
  406578:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40657c:	f844 6c0c 	str.w	r6, [r4, #-12]
  406580:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406584:	f844 6c08 	str.w	r6, [r4, #-8]
  406588:	3d10      	subs	r5, #16
  40658a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40658e:	f844 6c04 	str.w	r6, [r4, #-4]
  406592:	2d0f      	cmp	r5, #15
  406594:	f103 0310 	add.w	r3, r3, #16
  406598:	f104 0410 	add.w	r4, r4, #16
  40659c:	d8e8      	bhi.n	406570 <memmove+0x38>
  40659e:	f1a2 0310 	sub.w	r3, r2, #16
  4065a2:	f023 030f 	bic.w	r3, r3, #15
  4065a6:	f002 0e0f 	and.w	lr, r2, #15
  4065aa:	3310      	adds	r3, #16
  4065ac:	f1be 0f03 	cmp.w	lr, #3
  4065b0:	4419      	add	r1, r3
  4065b2:	4403      	add	r3, r0
  4065b4:	d921      	bls.n	4065fa <memmove+0xc2>
  4065b6:	1f1e      	subs	r6, r3, #4
  4065b8:	460d      	mov	r5, r1
  4065ba:	4674      	mov	r4, lr
  4065bc:	3c04      	subs	r4, #4
  4065be:	f855 7b04 	ldr.w	r7, [r5], #4
  4065c2:	f846 7f04 	str.w	r7, [r6, #4]!
  4065c6:	2c03      	cmp	r4, #3
  4065c8:	d8f8      	bhi.n	4065bc <memmove+0x84>
  4065ca:	f1ae 0404 	sub.w	r4, lr, #4
  4065ce:	f024 0403 	bic.w	r4, r4, #3
  4065d2:	3404      	adds	r4, #4
  4065d4:	4423      	add	r3, r4
  4065d6:	4421      	add	r1, r4
  4065d8:	f002 0203 	and.w	r2, r2, #3
  4065dc:	b162      	cbz	r2, 4065f8 <memmove+0xc0>
  4065de:	3b01      	subs	r3, #1
  4065e0:	440a      	add	r2, r1
  4065e2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4065e6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4065ea:	428a      	cmp	r2, r1
  4065ec:	d1f9      	bne.n	4065e2 <memmove+0xaa>
  4065ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065f0:	4603      	mov	r3, r0
  4065f2:	e7f3      	b.n	4065dc <memmove+0xa4>
  4065f4:	4603      	mov	r3, r0
  4065f6:	e7f2      	b.n	4065de <memmove+0xa6>
  4065f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065fa:	4672      	mov	r2, lr
  4065fc:	e7ee      	b.n	4065dc <memmove+0xa4>
  4065fe:	bf00      	nop

00406600 <__malloc_lock>:
  406600:	4770      	bx	lr
  406602:	bf00      	nop

00406604 <__malloc_unlock>:
  406604:	4770      	bx	lr
  406606:	bf00      	nop

00406608 <_Balloc>:
  406608:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40660a:	b570      	push	{r4, r5, r6, lr}
  40660c:	4605      	mov	r5, r0
  40660e:	460c      	mov	r4, r1
  406610:	b14b      	cbz	r3, 406626 <_Balloc+0x1e>
  406612:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406616:	b180      	cbz	r0, 40663a <_Balloc+0x32>
  406618:	6802      	ldr	r2, [r0, #0]
  40661a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40661e:	2300      	movs	r3, #0
  406620:	6103      	str	r3, [r0, #16]
  406622:	60c3      	str	r3, [r0, #12]
  406624:	bd70      	pop	{r4, r5, r6, pc}
  406626:	2221      	movs	r2, #33	; 0x21
  406628:	2104      	movs	r1, #4
  40662a:	f000 fe37 	bl	40729c <_calloc_r>
  40662e:	64e8      	str	r0, [r5, #76]	; 0x4c
  406630:	4603      	mov	r3, r0
  406632:	2800      	cmp	r0, #0
  406634:	d1ed      	bne.n	406612 <_Balloc+0xa>
  406636:	2000      	movs	r0, #0
  406638:	bd70      	pop	{r4, r5, r6, pc}
  40663a:	2101      	movs	r1, #1
  40663c:	fa01 f604 	lsl.w	r6, r1, r4
  406640:	1d72      	adds	r2, r6, #5
  406642:	4628      	mov	r0, r5
  406644:	0092      	lsls	r2, r2, #2
  406646:	f000 fe29 	bl	40729c <_calloc_r>
  40664a:	2800      	cmp	r0, #0
  40664c:	d0f3      	beq.n	406636 <_Balloc+0x2e>
  40664e:	6044      	str	r4, [r0, #4]
  406650:	6086      	str	r6, [r0, #8]
  406652:	e7e4      	b.n	40661e <_Balloc+0x16>

00406654 <_Bfree>:
  406654:	b131      	cbz	r1, 406664 <_Bfree+0x10>
  406656:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406658:	684a      	ldr	r2, [r1, #4]
  40665a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40665e:	6008      	str	r0, [r1, #0]
  406660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406664:	4770      	bx	lr
  406666:	bf00      	nop

00406668 <__multadd>:
  406668:	b5f0      	push	{r4, r5, r6, r7, lr}
  40666a:	690c      	ldr	r4, [r1, #16]
  40666c:	b083      	sub	sp, #12
  40666e:	460d      	mov	r5, r1
  406670:	4606      	mov	r6, r0
  406672:	f101 0e14 	add.w	lr, r1, #20
  406676:	2700      	movs	r7, #0
  406678:	f8de 0000 	ldr.w	r0, [lr]
  40667c:	b281      	uxth	r1, r0
  40667e:	fb02 3101 	mla	r1, r2, r1, r3
  406682:	0c0b      	lsrs	r3, r1, #16
  406684:	0c00      	lsrs	r0, r0, #16
  406686:	fb02 3300 	mla	r3, r2, r0, r3
  40668a:	b289      	uxth	r1, r1
  40668c:	3701      	adds	r7, #1
  40668e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  406692:	42bc      	cmp	r4, r7
  406694:	f84e 1b04 	str.w	r1, [lr], #4
  406698:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40669c:	dcec      	bgt.n	406678 <__multadd+0x10>
  40669e:	b13b      	cbz	r3, 4066b0 <__multadd+0x48>
  4066a0:	68aa      	ldr	r2, [r5, #8]
  4066a2:	4294      	cmp	r4, r2
  4066a4:	da07      	bge.n	4066b6 <__multadd+0x4e>
  4066a6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4066aa:	3401      	adds	r4, #1
  4066ac:	6153      	str	r3, [r2, #20]
  4066ae:	612c      	str	r4, [r5, #16]
  4066b0:	4628      	mov	r0, r5
  4066b2:	b003      	add	sp, #12
  4066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4066b6:	6869      	ldr	r1, [r5, #4]
  4066b8:	9301      	str	r3, [sp, #4]
  4066ba:	3101      	adds	r1, #1
  4066bc:	4630      	mov	r0, r6
  4066be:	f7ff ffa3 	bl	406608 <_Balloc>
  4066c2:	692a      	ldr	r2, [r5, #16]
  4066c4:	3202      	adds	r2, #2
  4066c6:	f105 010c 	add.w	r1, r5, #12
  4066ca:	4607      	mov	r7, r0
  4066cc:	0092      	lsls	r2, r2, #2
  4066ce:	300c      	adds	r0, #12
  4066d0:	f7ff fe98 	bl	406404 <memcpy>
  4066d4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4066d6:	6869      	ldr	r1, [r5, #4]
  4066d8:	9b01      	ldr	r3, [sp, #4]
  4066da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4066de:	6028      	str	r0, [r5, #0]
  4066e0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4066e4:	463d      	mov	r5, r7
  4066e6:	e7de      	b.n	4066a6 <__multadd+0x3e>

004066e8 <__hi0bits>:
  4066e8:	0c03      	lsrs	r3, r0, #16
  4066ea:	041b      	lsls	r3, r3, #16
  4066ec:	b9b3      	cbnz	r3, 40671c <__hi0bits+0x34>
  4066ee:	0400      	lsls	r0, r0, #16
  4066f0:	2310      	movs	r3, #16
  4066f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4066f6:	bf04      	itt	eq
  4066f8:	0200      	lsleq	r0, r0, #8
  4066fa:	3308      	addeq	r3, #8
  4066fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406700:	bf04      	itt	eq
  406702:	0100      	lsleq	r0, r0, #4
  406704:	3304      	addeq	r3, #4
  406706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40670a:	bf04      	itt	eq
  40670c:	0080      	lsleq	r0, r0, #2
  40670e:	3302      	addeq	r3, #2
  406710:	2800      	cmp	r0, #0
  406712:	db07      	blt.n	406724 <__hi0bits+0x3c>
  406714:	0042      	lsls	r2, r0, #1
  406716:	d403      	bmi.n	406720 <__hi0bits+0x38>
  406718:	2020      	movs	r0, #32
  40671a:	4770      	bx	lr
  40671c:	2300      	movs	r3, #0
  40671e:	e7e8      	b.n	4066f2 <__hi0bits+0xa>
  406720:	1c58      	adds	r0, r3, #1
  406722:	4770      	bx	lr
  406724:	4618      	mov	r0, r3
  406726:	4770      	bx	lr

00406728 <__lo0bits>:
  406728:	6803      	ldr	r3, [r0, #0]
  40672a:	f013 0207 	ands.w	r2, r3, #7
  40672e:	d007      	beq.n	406740 <__lo0bits+0x18>
  406730:	07d9      	lsls	r1, r3, #31
  406732:	d420      	bmi.n	406776 <__lo0bits+0x4e>
  406734:	079a      	lsls	r2, r3, #30
  406736:	d420      	bmi.n	40677a <__lo0bits+0x52>
  406738:	089b      	lsrs	r3, r3, #2
  40673a:	6003      	str	r3, [r0, #0]
  40673c:	2002      	movs	r0, #2
  40673e:	4770      	bx	lr
  406740:	b299      	uxth	r1, r3
  406742:	b909      	cbnz	r1, 406748 <__lo0bits+0x20>
  406744:	0c1b      	lsrs	r3, r3, #16
  406746:	2210      	movs	r2, #16
  406748:	f013 0fff 	tst.w	r3, #255	; 0xff
  40674c:	bf04      	itt	eq
  40674e:	0a1b      	lsreq	r3, r3, #8
  406750:	3208      	addeq	r2, #8
  406752:	0719      	lsls	r1, r3, #28
  406754:	bf04      	itt	eq
  406756:	091b      	lsreq	r3, r3, #4
  406758:	3204      	addeq	r2, #4
  40675a:	0799      	lsls	r1, r3, #30
  40675c:	bf04      	itt	eq
  40675e:	089b      	lsreq	r3, r3, #2
  406760:	3202      	addeq	r2, #2
  406762:	07d9      	lsls	r1, r3, #31
  406764:	d404      	bmi.n	406770 <__lo0bits+0x48>
  406766:	085b      	lsrs	r3, r3, #1
  406768:	d101      	bne.n	40676e <__lo0bits+0x46>
  40676a:	2020      	movs	r0, #32
  40676c:	4770      	bx	lr
  40676e:	3201      	adds	r2, #1
  406770:	6003      	str	r3, [r0, #0]
  406772:	4610      	mov	r0, r2
  406774:	4770      	bx	lr
  406776:	2000      	movs	r0, #0
  406778:	4770      	bx	lr
  40677a:	085b      	lsrs	r3, r3, #1
  40677c:	6003      	str	r3, [r0, #0]
  40677e:	2001      	movs	r0, #1
  406780:	4770      	bx	lr
  406782:	bf00      	nop

00406784 <__i2b>:
  406784:	b510      	push	{r4, lr}
  406786:	460c      	mov	r4, r1
  406788:	2101      	movs	r1, #1
  40678a:	f7ff ff3d 	bl	406608 <_Balloc>
  40678e:	2201      	movs	r2, #1
  406790:	6144      	str	r4, [r0, #20]
  406792:	6102      	str	r2, [r0, #16]
  406794:	bd10      	pop	{r4, pc}
  406796:	bf00      	nop

00406798 <__multiply>:
  406798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40679c:	690d      	ldr	r5, [r1, #16]
  40679e:	6917      	ldr	r7, [r2, #16]
  4067a0:	42bd      	cmp	r5, r7
  4067a2:	b083      	sub	sp, #12
  4067a4:	460c      	mov	r4, r1
  4067a6:	4616      	mov	r6, r2
  4067a8:	da04      	bge.n	4067b4 <__multiply+0x1c>
  4067aa:	462a      	mov	r2, r5
  4067ac:	4634      	mov	r4, r6
  4067ae:	463d      	mov	r5, r7
  4067b0:	460e      	mov	r6, r1
  4067b2:	4617      	mov	r7, r2
  4067b4:	68a3      	ldr	r3, [r4, #8]
  4067b6:	6861      	ldr	r1, [r4, #4]
  4067b8:	eb05 0807 	add.w	r8, r5, r7
  4067bc:	4598      	cmp	r8, r3
  4067be:	bfc8      	it	gt
  4067c0:	3101      	addgt	r1, #1
  4067c2:	f7ff ff21 	bl	406608 <_Balloc>
  4067c6:	f100 0c14 	add.w	ip, r0, #20
  4067ca:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  4067ce:	45cc      	cmp	ip, r9
  4067d0:	9000      	str	r0, [sp, #0]
  4067d2:	d205      	bcs.n	4067e0 <__multiply+0x48>
  4067d4:	4663      	mov	r3, ip
  4067d6:	2100      	movs	r1, #0
  4067d8:	f843 1b04 	str.w	r1, [r3], #4
  4067dc:	4599      	cmp	r9, r3
  4067de:	d8fb      	bhi.n	4067d8 <__multiply+0x40>
  4067e0:	f106 0214 	add.w	r2, r6, #20
  4067e4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  4067e8:	f104 0314 	add.w	r3, r4, #20
  4067ec:	4552      	cmp	r2, sl
  4067ee:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  4067f2:	d254      	bcs.n	40689e <__multiply+0x106>
  4067f4:	f8cd 9004 	str.w	r9, [sp, #4]
  4067f8:	4699      	mov	r9, r3
  4067fa:	f852 3b04 	ldr.w	r3, [r2], #4
  4067fe:	fa1f fb83 	uxth.w	fp, r3
  406802:	f1bb 0f00 	cmp.w	fp, #0
  406806:	d020      	beq.n	40684a <__multiply+0xb2>
  406808:	2000      	movs	r0, #0
  40680a:	464f      	mov	r7, r9
  40680c:	4666      	mov	r6, ip
  40680e:	4605      	mov	r5, r0
  406810:	e000      	b.n	406814 <__multiply+0x7c>
  406812:	461e      	mov	r6, r3
  406814:	f857 4b04 	ldr.w	r4, [r7], #4
  406818:	6830      	ldr	r0, [r6, #0]
  40681a:	b2a1      	uxth	r1, r4
  40681c:	b283      	uxth	r3, r0
  40681e:	fb0b 3101 	mla	r1, fp, r1, r3
  406822:	0c24      	lsrs	r4, r4, #16
  406824:	0c00      	lsrs	r0, r0, #16
  406826:	194b      	adds	r3, r1, r5
  406828:	fb0b 0004 	mla	r0, fp, r4, r0
  40682c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  406830:	b299      	uxth	r1, r3
  406832:	4633      	mov	r3, r6
  406834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  406838:	45be      	cmp	lr, r7
  40683a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40683e:	f843 1b04 	str.w	r1, [r3], #4
  406842:	d8e6      	bhi.n	406812 <__multiply+0x7a>
  406844:	6075      	str	r5, [r6, #4]
  406846:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40684a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40684e:	d020      	beq.n	406892 <__multiply+0xfa>
  406850:	f8dc 3000 	ldr.w	r3, [ip]
  406854:	4667      	mov	r7, ip
  406856:	4618      	mov	r0, r3
  406858:	464d      	mov	r5, r9
  40685a:	2100      	movs	r1, #0
  40685c:	e000      	b.n	406860 <__multiply+0xc8>
  40685e:	4637      	mov	r7, r6
  406860:	882c      	ldrh	r4, [r5, #0]
  406862:	0c00      	lsrs	r0, r0, #16
  406864:	fb0b 0004 	mla	r0, fp, r4, r0
  406868:	4401      	add	r1, r0
  40686a:	b29c      	uxth	r4, r3
  40686c:	463e      	mov	r6, r7
  40686e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  406872:	f846 3b04 	str.w	r3, [r6], #4
  406876:	6878      	ldr	r0, [r7, #4]
  406878:	f855 4b04 	ldr.w	r4, [r5], #4
  40687c:	b283      	uxth	r3, r0
  40687e:	0c24      	lsrs	r4, r4, #16
  406880:	fb0b 3404 	mla	r4, fp, r4, r3
  406884:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  406888:	45ae      	cmp	lr, r5
  40688a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40688e:	d8e6      	bhi.n	40685e <__multiply+0xc6>
  406890:	607b      	str	r3, [r7, #4]
  406892:	4592      	cmp	sl, r2
  406894:	f10c 0c04 	add.w	ip, ip, #4
  406898:	d8af      	bhi.n	4067fa <__multiply+0x62>
  40689a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40689e:	f1b8 0f00 	cmp.w	r8, #0
  4068a2:	dd0b      	ble.n	4068bc <__multiply+0x124>
  4068a4:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4068a8:	f1a9 0904 	sub.w	r9, r9, #4
  4068ac:	b11b      	cbz	r3, 4068b6 <__multiply+0x11e>
  4068ae:	e005      	b.n	4068bc <__multiply+0x124>
  4068b0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4068b4:	b913      	cbnz	r3, 4068bc <__multiply+0x124>
  4068b6:	f1b8 0801 	subs.w	r8, r8, #1
  4068ba:	d1f9      	bne.n	4068b0 <__multiply+0x118>
  4068bc:	9800      	ldr	r0, [sp, #0]
  4068be:	f8c0 8010 	str.w	r8, [r0, #16]
  4068c2:	b003      	add	sp, #12
  4068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004068c8 <__pow5mult>:
  4068c8:	f012 0303 	ands.w	r3, r2, #3
  4068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068d0:	4614      	mov	r4, r2
  4068d2:	4607      	mov	r7, r0
  4068d4:	d12e      	bne.n	406934 <__pow5mult+0x6c>
  4068d6:	460e      	mov	r6, r1
  4068d8:	10a4      	asrs	r4, r4, #2
  4068da:	d01c      	beq.n	406916 <__pow5mult+0x4e>
  4068dc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4068de:	b395      	cbz	r5, 406946 <__pow5mult+0x7e>
  4068e0:	07e3      	lsls	r3, r4, #31
  4068e2:	f04f 0800 	mov.w	r8, #0
  4068e6:	d406      	bmi.n	4068f6 <__pow5mult+0x2e>
  4068e8:	1064      	asrs	r4, r4, #1
  4068ea:	d014      	beq.n	406916 <__pow5mult+0x4e>
  4068ec:	6828      	ldr	r0, [r5, #0]
  4068ee:	b1a8      	cbz	r0, 40691c <__pow5mult+0x54>
  4068f0:	4605      	mov	r5, r0
  4068f2:	07e3      	lsls	r3, r4, #31
  4068f4:	d5f8      	bpl.n	4068e8 <__pow5mult+0x20>
  4068f6:	462a      	mov	r2, r5
  4068f8:	4631      	mov	r1, r6
  4068fa:	4638      	mov	r0, r7
  4068fc:	f7ff ff4c 	bl	406798 <__multiply>
  406900:	b1b6      	cbz	r6, 406930 <__pow5mult+0x68>
  406902:	6872      	ldr	r2, [r6, #4]
  406904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406906:	1064      	asrs	r4, r4, #1
  406908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40690c:	6031      	str	r1, [r6, #0]
  40690e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406912:	4606      	mov	r6, r0
  406914:	d1ea      	bne.n	4068ec <__pow5mult+0x24>
  406916:	4630      	mov	r0, r6
  406918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40691c:	462a      	mov	r2, r5
  40691e:	4629      	mov	r1, r5
  406920:	4638      	mov	r0, r7
  406922:	f7ff ff39 	bl	406798 <__multiply>
  406926:	6028      	str	r0, [r5, #0]
  406928:	f8c0 8000 	str.w	r8, [r0]
  40692c:	4605      	mov	r5, r0
  40692e:	e7e0      	b.n	4068f2 <__pow5mult+0x2a>
  406930:	4606      	mov	r6, r0
  406932:	e7d9      	b.n	4068e8 <__pow5mult+0x20>
  406934:	1e5a      	subs	r2, r3, #1
  406936:	4d0b      	ldr	r5, [pc, #44]	; (406964 <__pow5mult+0x9c>)
  406938:	2300      	movs	r3, #0
  40693a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40693e:	f7ff fe93 	bl	406668 <__multadd>
  406942:	4606      	mov	r6, r0
  406944:	e7c8      	b.n	4068d8 <__pow5mult+0x10>
  406946:	2101      	movs	r1, #1
  406948:	4638      	mov	r0, r7
  40694a:	f7ff fe5d 	bl	406608 <_Balloc>
  40694e:	f240 2171 	movw	r1, #625	; 0x271
  406952:	2201      	movs	r2, #1
  406954:	2300      	movs	r3, #0
  406956:	6141      	str	r1, [r0, #20]
  406958:	6102      	str	r2, [r0, #16]
  40695a:	4605      	mov	r5, r0
  40695c:	64b8      	str	r0, [r7, #72]	; 0x48
  40695e:	6003      	str	r3, [r0, #0]
  406960:	e7be      	b.n	4068e0 <__pow5mult+0x18>
  406962:	bf00      	nop
  406964:	00408028 	.word	0x00408028

00406968 <__lshift>:
  406968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40696c:	4691      	mov	r9, r2
  40696e:	690a      	ldr	r2, [r1, #16]
  406970:	688b      	ldr	r3, [r1, #8]
  406972:	ea4f 1469 	mov.w	r4, r9, asr #5
  406976:	eb04 0802 	add.w	r8, r4, r2
  40697a:	f108 0501 	add.w	r5, r8, #1
  40697e:	429d      	cmp	r5, r3
  406980:	460e      	mov	r6, r1
  406982:	4682      	mov	sl, r0
  406984:	6849      	ldr	r1, [r1, #4]
  406986:	dd04      	ble.n	406992 <__lshift+0x2a>
  406988:	005b      	lsls	r3, r3, #1
  40698a:	429d      	cmp	r5, r3
  40698c:	f101 0101 	add.w	r1, r1, #1
  406990:	dcfa      	bgt.n	406988 <__lshift+0x20>
  406992:	4650      	mov	r0, sl
  406994:	f7ff fe38 	bl	406608 <_Balloc>
  406998:	2c00      	cmp	r4, #0
  40699a:	f100 0214 	add.w	r2, r0, #20
  40699e:	dd38      	ble.n	406a12 <__lshift+0xaa>
  4069a0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4069a4:	2100      	movs	r1, #0
  4069a6:	f842 1b04 	str.w	r1, [r2], #4
  4069aa:	4293      	cmp	r3, r2
  4069ac:	d1fb      	bne.n	4069a6 <__lshift+0x3e>
  4069ae:	6934      	ldr	r4, [r6, #16]
  4069b0:	f106 0114 	add.w	r1, r6, #20
  4069b4:	f019 091f 	ands.w	r9, r9, #31
  4069b8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4069bc:	d021      	beq.n	406a02 <__lshift+0x9a>
  4069be:	f1c9 0220 	rsb	r2, r9, #32
  4069c2:	2400      	movs	r4, #0
  4069c4:	680f      	ldr	r7, [r1, #0]
  4069c6:	fa07 fc09 	lsl.w	ip, r7, r9
  4069ca:	ea4c 0404 	orr.w	r4, ip, r4
  4069ce:	469c      	mov	ip, r3
  4069d0:	f843 4b04 	str.w	r4, [r3], #4
  4069d4:	f851 4b04 	ldr.w	r4, [r1], #4
  4069d8:	458e      	cmp	lr, r1
  4069da:	fa24 f402 	lsr.w	r4, r4, r2
  4069de:	d8f1      	bhi.n	4069c4 <__lshift+0x5c>
  4069e0:	f8cc 4004 	str.w	r4, [ip, #4]
  4069e4:	b10c      	cbz	r4, 4069ea <__lshift+0x82>
  4069e6:	f108 0502 	add.w	r5, r8, #2
  4069ea:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4069ee:	6872      	ldr	r2, [r6, #4]
  4069f0:	3d01      	subs	r5, #1
  4069f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4069f6:	6105      	str	r5, [r0, #16]
  4069f8:	6031      	str	r1, [r6, #0]
  4069fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a02:	3b04      	subs	r3, #4
  406a04:	f851 2b04 	ldr.w	r2, [r1], #4
  406a08:	f843 2f04 	str.w	r2, [r3, #4]!
  406a0c:	458e      	cmp	lr, r1
  406a0e:	d8f9      	bhi.n	406a04 <__lshift+0x9c>
  406a10:	e7eb      	b.n	4069ea <__lshift+0x82>
  406a12:	4613      	mov	r3, r2
  406a14:	e7cb      	b.n	4069ae <__lshift+0x46>
  406a16:	bf00      	nop

00406a18 <__mcmp>:
  406a18:	6902      	ldr	r2, [r0, #16]
  406a1a:	690b      	ldr	r3, [r1, #16]
  406a1c:	1ad2      	subs	r2, r2, r3
  406a1e:	d112      	bne.n	406a46 <__mcmp+0x2e>
  406a20:	009b      	lsls	r3, r3, #2
  406a22:	3014      	adds	r0, #20
  406a24:	3114      	adds	r1, #20
  406a26:	4419      	add	r1, r3
  406a28:	b410      	push	{r4}
  406a2a:	4403      	add	r3, r0
  406a2c:	e001      	b.n	406a32 <__mcmp+0x1a>
  406a2e:	4298      	cmp	r0, r3
  406a30:	d20b      	bcs.n	406a4a <__mcmp+0x32>
  406a32:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406a36:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406a3a:	4294      	cmp	r4, r2
  406a3c:	d0f7      	beq.n	406a2e <__mcmp+0x16>
  406a3e:	d307      	bcc.n	406a50 <__mcmp+0x38>
  406a40:	2001      	movs	r0, #1
  406a42:	bc10      	pop	{r4}
  406a44:	4770      	bx	lr
  406a46:	4610      	mov	r0, r2
  406a48:	4770      	bx	lr
  406a4a:	2000      	movs	r0, #0
  406a4c:	bc10      	pop	{r4}
  406a4e:	4770      	bx	lr
  406a50:	f04f 30ff 	mov.w	r0, #4294967295
  406a54:	e7f5      	b.n	406a42 <__mcmp+0x2a>
  406a56:	bf00      	nop

00406a58 <__mdiff>:
  406a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406a5c:	690b      	ldr	r3, [r1, #16]
  406a5e:	460f      	mov	r7, r1
  406a60:	6911      	ldr	r1, [r2, #16]
  406a62:	1a5b      	subs	r3, r3, r1
  406a64:	2b00      	cmp	r3, #0
  406a66:	4690      	mov	r8, r2
  406a68:	d117      	bne.n	406a9a <__mdiff+0x42>
  406a6a:	0089      	lsls	r1, r1, #2
  406a6c:	f107 0214 	add.w	r2, r7, #20
  406a70:	f108 0514 	add.w	r5, r8, #20
  406a74:	1853      	adds	r3, r2, r1
  406a76:	4429      	add	r1, r5
  406a78:	e001      	b.n	406a7e <__mdiff+0x26>
  406a7a:	429a      	cmp	r2, r3
  406a7c:	d25e      	bcs.n	406b3c <__mdiff+0xe4>
  406a7e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  406a82:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406a86:	42a6      	cmp	r6, r4
  406a88:	d0f7      	beq.n	406a7a <__mdiff+0x22>
  406a8a:	d260      	bcs.n	406b4e <__mdiff+0xf6>
  406a8c:	463b      	mov	r3, r7
  406a8e:	4614      	mov	r4, r2
  406a90:	4647      	mov	r7, r8
  406a92:	f04f 0901 	mov.w	r9, #1
  406a96:	4698      	mov	r8, r3
  406a98:	e006      	b.n	406aa8 <__mdiff+0x50>
  406a9a:	db5d      	blt.n	406b58 <__mdiff+0x100>
  406a9c:	f107 0514 	add.w	r5, r7, #20
  406aa0:	f102 0414 	add.w	r4, r2, #20
  406aa4:	f04f 0900 	mov.w	r9, #0
  406aa8:	6879      	ldr	r1, [r7, #4]
  406aaa:	f7ff fdad 	bl	406608 <_Balloc>
  406aae:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406ab2:	693e      	ldr	r6, [r7, #16]
  406ab4:	f8c0 900c 	str.w	r9, [r0, #12]
  406ab8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406abc:	46a6      	mov	lr, r4
  406abe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406ac2:	f100 0414 	add.w	r4, r0, #20
  406ac6:	2300      	movs	r3, #0
  406ac8:	f85e 1b04 	ldr.w	r1, [lr], #4
  406acc:	f855 8b04 	ldr.w	r8, [r5], #4
  406ad0:	b28a      	uxth	r2, r1
  406ad2:	fa13 f388 	uxtah	r3, r3, r8
  406ad6:	0c09      	lsrs	r1, r1, #16
  406ad8:	1a9a      	subs	r2, r3, r2
  406ada:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406ade:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406ae2:	b292      	uxth	r2, r2
  406ae4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406ae8:	45f4      	cmp	ip, lr
  406aea:	f844 2b04 	str.w	r2, [r4], #4
  406aee:	ea4f 4323 	mov.w	r3, r3, asr #16
  406af2:	d8e9      	bhi.n	406ac8 <__mdiff+0x70>
  406af4:	42af      	cmp	r7, r5
  406af6:	d917      	bls.n	406b28 <__mdiff+0xd0>
  406af8:	46a4      	mov	ip, r4
  406afa:	4629      	mov	r1, r5
  406afc:	f851 eb04 	ldr.w	lr, [r1], #4
  406b00:	fa13 f28e 	uxtah	r2, r3, lr
  406b04:	1413      	asrs	r3, r2, #16
  406b06:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  406b0a:	b292      	uxth	r2, r2
  406b0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406b10:	428f      	cmp	r7, r1
  406b12:	f84c 2b04 	str.w	r2, [ip], #4
  406b16:	ea4f 4323 	mov.w	r3, r3, asr #16
  406b1a:	d8ef      	bhi.n	406afc <__mdiff+0xa4>
  406b1c:	43ed      	mvns	r5, r5
  406b1e:	443d      	add	r5, r7
  406b20:	f025 0503 	bic.w	r5, r5, #3
  406b24:	3504      	adds	r5, #4
  406b26:	442c      	add	r4, r5
  406b28:	3c04      	subs	r4, #4
  406b2a:	b922      	cbnz	r2, 406b36 <__mdiff+0xde>
  406b2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406b30:	3e01      	subs	r6, #1
  406b32:	2b00      	cmp	r3, #0
  406b34:	d0fa      	beq.n	406b2c <__mdiff+0xd4>
  406b36:	6106      	str	r6, [r0, #16]
  406b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b3c:	2100      	movs	r1, #0
  406b3e:	f7ff fd63 	bl	406608 <_Balloc>
  406b42:	2201      	movs	r2, #1
  406b44:	2300      	movs	r3, #0
  406b46:	6102      	str	r2, [r0, #16]
  406b48:	6143      	str	r3, [r0, #20]
  406b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b4e:	462c      	mov	r4, r5
  406b50:	f04f 0900 	mov.w	r9, #0
  406b54:	4615      	mov	r5, r2
  406b56:	e7a7      	b.n	406aa8 <__mdiff+0x50>
  406b58:	463b      	mov	r3, r7
  406b5a:	f107 0414 	add.w	r4, r7, #20
  406b5e:	f108 0514 	add.w	r5, r8, #20
  406b62:	4647      	mov	r7, r8
  406b64:	f04f 0901 	mov.w	r9, #1
  406b68:	4698      	mov	r8, r3
  406b6a:	e79d      	b.n	406aa8 <__mdiff+0x50>

00406b6c <__d2b>:
  406b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b70:	b082      	sub	sp, #8
  406b72:	2101      	movs	r1, #1
  406b74:	461c      	mov	r4, r3
  406b76:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406b7a:	4615      	mov	r5, r2
  406b7c:	9e08      	ldr	r6, [sp, #32]
  406b7e:	f7ff fd43 	bl	406608 <_Balloc>
  406b82:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406b86:	4680      	mov	r8, r0
  406b88:	b10f      	cbz	r7, 406b8e <__d2b+0x22>
  406b8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406b8e:	9401      	str	r4, [sp, #4]
  406b90:	b31d      	cbz	r5, 406bda <__d2b+0x6e>
  406b92:	a802      	add	r0, sp, #8
  406b94:	f840 5d08 	str.w	r5, [r0, #-8]!
  406b98:	f7ff fdc6 	bl	406728 <__lo0bits>
  406b9c:	2800      	cmp	r0, #0
  406b9e:	d134      	bne.n	406c0a <__d2b+0x9e>
  406ba0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406ba4:	f8c8 2014 	str.w	r2, [r8, #20]
  406ba8:	2b00      	cmp	r3, #0
  406baa:	bf0c      	ite	eq
  406bac:	2101      	moveq	r1, #1
  406bae:	2102      	movne	r1, #2
  406bb0:	f8c8 3018 	str.w	r3, [r8, #24]
  406bb4:	f8c8 1010 	str.w	r1, [r8, #16]
  406bb8:	b9df      	cbnz	r7, 406bf2 <__d2b+0x86>
  406bba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406bbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406bc2:	6030      	str	r0, [r6, #0]
  406bc4:	6918      	ldr	r0, [r3, #16]
  406bc6:	f7ff fd8f 	bl	4066e8 <__hi0bits>
  406bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406bcc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406bd0:	6018      	str	r0, [r3, #0]
  406bd2:	4640      	mov	r0, r8
  406bd4:	b002      	add	sp, #8
  406bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406bda:	a801      	add	r0, sp, #4
  406bdc:	f7ff fda4 	bl	406728 <__lo0bits>
  406be0:	9b01      	ldr	r3, [sp, #4]
  406be2:	f8c8 3014 	str.w	r3, [r8, #20]
  406be6:	2101      	movs	r1, #1
  406be8:	3020      	adds	r0, #32
  406bea:	f8c8 1010 	str.w	r1, [r8, #16]
  406bee:	2f00      	cmp	r7, #0
  406bf0:	d0e3      	beq.n	406bba <__d2b+0x4e>
  406bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406bf4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406bf8:	4407      	add	r7, r0
  406bfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406bfe:	6037      	str	r7, [r6, #0]
  406c00:	6018      	str	r0, [r3, #0]
  406c02:	4640      	mov	r0, r8
  406c04:	b002      	add	sp, #8
  406c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406c0e:	f1c0 0120 	rsb	r1, r0, #32
  406c12:	fa03 f101 	lsl.w	r1, r3, r1
  406c16:	430a      	orrs	r2, r1
  406c18:	40c3      	lsrs	r3, r0
  406c1a:	9301      	str	r3, [sp, #4]
  406c1c:	f8c8 2014 	str.w	r2, [r8, #20]
  406c20:	e7c2      	b.n	406ba8 <__d2b+0x3c>
  406c22:	bf00      	nop

00406c24 <_realloc_r>:
  406c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c28:	4617      	mov	r7, r2
  406c2a:	b083      	sub	sp, #12
  406c2c:	2900      	cmp	r1, #0
  406c2e:	f000 80c1 	beq.w	406db4 <_realloc_r+0x190>
  406c32:	460e      	mov	r6, r1
  406c34:	4681      	mov	r9, r0
  406c36:	f107 050b 	add.w	r5, r7, #11
  406c3a:	f7ff fce1 	bl	406600 <__malloc_lock>
  406c3e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  406c42:	2d16      	cmp	r5, #22
  406c44:	f02e 0403 	bic.w	r4, lr, #3
  406c48:	f1a6 0808 	sub.w	r8, r6, #8
  406c4c:	d840      	bhi.n	406cd0 <_realloc_r+0xac>
  406c4e:	2210      	movs	r2, #16
  406c50:	4615      	mov	r5, r2
  406c52:	42af      	cmp	r7, r5
  406c54:	d841      	bhi.n	406cda <_realloc_r+0xb6>
  406c56:	4294      	cmp	r4, r2
  406c58:	da75      	bge.n	406d46 <_realloc_r+0x122>
  406c5a:	4bc9      	ldr	r3, [pc, #804]	; (406f80 <_realloc_r+0x35c>)
  406c5c:	6899      	ldr	r1, [r3, #8]
  406c5e:	eb08 0004 	add.w	r0, r8, r4
  406c62:	4288      	cmp	r0, r1
  406c64:	6841      	ldr	r1, [r0, #4]
  406c66:	f000 80d9 	beq.w	406e1c <_realloc_r+0x1f8>
  406c6a:	f021 0301 	bic.w	r3, r1, #1
  406c6e:	4403      	add	r3, r0
  406c70:	685b      	ldr	r3, [r3, #4]
  406c72:	07db      	lsls	r3, r3, #31
  406c74:	d57d      	bpl.n	406d72 <_realloc_r+0x14e>
  406c76:	f01e 0f01 	tst.w	lr, #1
  406c7a:	d035      	beq.n	406ce8 <_realloc_r+0xc4>
  406c7c:	4639      	mov	r1, r7
  406c7e:	4648      	mov	r0, r9
  406c80:	f7ff f884 	bl	405d8c <_malloc_r>
  406c84:	4607      	mov	r7, r0
  406c86:	b1e0      	cbz	r0, 406cc2 <_realloc_r+0x9e>
  406c88:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406c8c:	f023 0301 	bic.w	r3, r3, #1
  406c90:	4443      	add	r3, r8
  406c92:	f1a0 0208 	sub.w	r2, r0, #8
  406c96:	429a      	cmp	r2, r3
  406c98:	f000 8144 	beq.w	406f24 <_realloc_r+0x300>
  406c9c:	1f22      	subs	r2, r4, #4
  406c9e:	2a24      	cmp	r2, #36	; 0x24
  406ca0:	f200 8131 	bhi.w	406f06 <_realloc_r+0x2e2>
  406ca4:	2a13      	cmp	r2, #19
  406ca6:	f200 8104 	bhi.w	406eb2 <_realloc_r+0x28e>
  406caa:	4603      	mov	r3, r0
  406cac:	4632      	mov	r2, r6
  406cae:	6811      	ldr	r1, [r2, #0]
  406cb0:	6019      	str	r1, [r3, #0]
  406cb2:	6851      	ldr	r1, [r2, #4]
  406cb4:	6059      	str	r1, [r3, #4]
  406cb6:	6892      	ldr	r2, [r2, #8]
  406cb8:	609a      	str	r2, [r3, #8]
  406cba:	4631      	mov	r1, r6
  406cbc:	4648      	mov	r0, r9
  406cbe:	f7fe ff79 	bl	405bb4 <_free_r>
  406cc2:	4648      	mov	r0, r9
  406cc4:	f7ff fc9e 	bl	406604 <__malloc_unlock>
  406cc8:	4638      	mov	r0, r7
  406cca:	b003      	add	sp, #12
  406ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cd0:	f025 0507 	bic.w	r5, r5, #7
  406cd4:	2d00      	cmp	r5, #0
  406cd6:	462a      	mov	r2, r5
  406cd8:	dabb      	bge.n	406c52 <_realloc_r+0x2e>
  406cda:	230c      	movs	r3, #12
  406cdc:	2000      	movs	r0, #0
  406cde:	f8c9 3000 	str.w	r3, [r9]
  406ce2:	b003      	add	sp, #12
  406ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ce8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406cec:	ebc3 0a08 	rsb	sl, r3, r8
  406cf0:	f8da 3004 	ldr.w	r3, [sl, #4]
  406cf4:	f023 0c03 	bic.w	ip, r3, #3
  406cf8:	eb04 030c 	add.w	r3, r4, ip
  406cfc:	4293      	cmp	r3, r2
  406cfe:	dbbd      	blt.n	406c7c <_realloc_r+0x58>
  406d00:	4657      	mov	r7, sl
  406d02:	f8da 100c 	ldr.w	r1, [sl, #12]
  406d06:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406d0a:	1f22      	subs	r2, r4, #4
  406d0c:	2a24      	cmp	r2, #36	; 0x24
  406d0e:	60c1      	str	r1, [r0, #12]
  406d10:	6088      	str	r0, [r1, #8]
  406d12:	f200 8117 	bhi.w	406f44 <_realloc_r+0x320>
  406d16:	2a13      	cmp	r2, #19
  406d18:	f240 8112 	bls.w	406f40 <_realloc_r+0x31c>
  406d1c:	6831      	ldr	r1, [r6, #0]
  406d1e:	f8ca 1008 	str.w	r1, [sl, #8]
  406d22:	6871      	ldr	r1, [r6, #4]
  406d24:	f8ca 100c 	str.w	r1, [sl, #12]
  406d28:	2a1b      	cmp	r2, #27
  406d2a:	f200 812b 	bhi.w	406f84 <_realloc_r+0x360>
  406d2e:	3608      	adds	r6, #8
  406d30:	f10a 0210 	add.w	r2, sl, #16
  406d34:	6831      	ldr	r1, [r6, #0]
  406d36:	6011      	str	r1, [r2, #0]
  406d38:	6871      	ldr	r1, [r6, #4]
  406d3a:	6051      	str	r1, [r2, #4]
  406d3c:	68b1      	ldr	r1, [r6, #8]
  406d3e:	6091      	str	r1, [r2, #8]
  406d40:	463e      	mov	r6, r7
  406d42:	461c      	mov	r4, r3
  406d44:	46d0      	mov	r8, sl
  406d46:	1b63      	subs	r3, r4, r5
  406d48:	2b0f      	cmp	r3, #15
  406d4a:	d81d      	bhi.n	406d88 <_realloc_r+0x164>
  406d4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406d50:	f003 0301 	and.w	r3, r3, #1
  406d54:	4323      	orrs	r3, r4
  406d56:	4444      	add	r4, r8
  406d58:	f8c8 3004 	str.w	r3, [r8, #4]
  406d5c:	6863      	ldr	r3, [r4, #4]
  406d5e:	f043 0301 	orr.w	r3, r3, #1
  406d62:	6063      	str	r3, [r4, #4]
  406d64:	4648      	mov	r0, r9
  406d66:	f7ff fc4d 	bl	406604 <__malloc_unlock>
  406d6a:	4630      	mov	r0, r6
  406d6c:	b003      	add	sp, #12
  406d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d72:	f021 0103 	bic.w	r1, r1, #3
  406d76:	4421      	add	r1, r4
  406d78:	4291      	cmp	r1, r2
  406d7a:	db21      	blt.n	406dc0 <_realloc_r+0x19c>
  406d7c:	68c3      	ldr	r3, [r0, #12]
  406d7e:	6882      	ldr	r2, [r0, #8]
  406d80:	460c      	mov	r4, r1
  406d82:	60d3      	str	r3, [r2, #12]
  406d84:	609a      	str	r2, [r3, #8]
  406d86:	e7de      	b.n	406d46 <_realloc_r+0x122>
  406d88:	f8d8 2004 	ldr.w	r2, [r8, #4]
  406d8c:	eb08 0105 	add.w	r1, r8, r5
  406d90:	f002 0201 	and.w	r2, r2, #1
  406d94:	4315      	orrs	r5, r2
  406d96:	f043 0201 	orr.w	r2, r3, #1
  406d9a:	440b      	add	r3, r1
  406d9c:	f8c8 5004 	str.w	r5, [r8, #4]
  406da0:	604a      	str	r2, [r1, #4]
  406da2:	685a      	ldr	r2, [r3, #4]
  406da4:	f042 0201 	orr.w	r2, r2, #1
  406da8:	3108      	adds	r1, #8
  406daa:	605a      	str	r2, [r3, #4]
  406dac:	4648      	mov	r0, r9
  406dae:	f7fe ff01 	bl	405bb4 <_free_r>
  406db2:	e7d7      	b.n	406d64 <_realloc_r+0x140>
  406db4:	4611      	mov	r1, r2
  406db6:	b003      	add	sp, #12
  406db8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dbc:	f7fe bfe6 	b.w	405d8c <_malloc_r>
  406dc0:	f01e 0f01 	tst.w	lr, #1
  406dc4:	f47f af5a 	bne.w	406c7c <_realloc_r+0x58>
  406dc8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  406dcc:	ebc3 0a08 	rsb	sl, r3, r8
  406dd0:	f8da 3004 	ldr.w	r3, [sl, #4]
  406dd4:	f023 0c03 	bic.w	ip, r3, #3
  406dd8:	eb01 0e0c 	add.w	lr, r1, ip
  406ddc:	4596      	cmp	lr, r2
  406dde:	db8b      	blt.n	406cf8 <_realloc_r+0xd4>
  406de0:	68c3      	ldr	r3, [r0, #12]
  406de2:	6882      	ldr	r2, [r0, #8]
  406de4:	4657      	mov	r7, sl
  406de6:	60d3      	str	r3, [r2, #12]
  406de8:	609a      	str	r2, [r3, #8]
  406dea:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406dee:	f8da 300c 	ldr.w	r3, [sl, #12]
  406df2:	60cb      	str	r3, [r1, #12]
  406df4:	1f22      	subs	r2, r4, #4
  406df6:	2a24      	cmp	r2, #36	; 0x24
  406df8:	6099      	str	r1, [r3, #8]
  406dfa:	f200 8099 	bhi.w	406f30 <_realloc_r+0x30c>
  406dfe:	2a13      	cmp	r2, #19
  406e00:	d962      	bls.n	406ec8 <_realloc_r+0x2a4>
  406e02:	6833      	ldr	r3, [r6, #0]
  406e04:	f8ca 3008 	str.w	r3, [sl, #8]
  406e08:	6873      	ldr	r3, [r6, #4]
  406e0a:	f8ca 300c 	str.w	r3, [sl, #12]
  406e0e:	2a1b      	cmp	r2, #27
  406e10:	f200 80a0 	bhi.w	406f54 <_realloc_r+0x330>
  406e14:	3608      	adds	r6, #8
  406e16:	f10a 0310 	add.w	r3, sl, #16
  406e1a:	e056      	b.n	406eca <_realloc_r+0x2a6>
  406e1c:	f021 0b03 	bic.w	fp, r1, #3
  406e20:	44a3      	add	fp, r4
  406e22:	f105 0010 	add.w	r0, r5, #16
  406e26:	4583      	cmp	fp, r0
  406e28:	da59      	bge.n	406ede <_realloc_r+0x2ba>
  406e2a:	f01e 0f01 	tst.w	lr, #1
  406e2e:	f47f af25 	bne.w	406c7c <_realloc_r+0x58>
  406e32:	f856 1c08 	ldr.w	r1, [r6, #-8]
  406e36:	ebc1 0a08 	rsb	sl, r1, r8
  406e3a:	f8da 1004 	ldr.w	r1, [sl, #4]
  406e3e:	f021 0c03 	bic.w	ip, r1, #3
  406e42:	44e3      	add	fp, ip
  406e44:	4558      	cmp	r0, fp
  406e46:	f73f af57 	bgt.w	406cf8 <_realloc_r+0xd4>
  406e4a:	4657      	mov	r7, sl
  406e4c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406e50:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406e54:	1f22      	subs	r2, r4, #4
  406e56:	2a24      	cmp	r2, #36	; 0x24
  406e58:	60c1      	str	r1, [r0, #12]
  406e5a:	6088      	str	r0, [r1, #8]
  406e5c:	f200 80b4 	bhi.w	406fc8 <_realloc_r+0x3a4>
  406e60:	2a13      	cmp	r2, #19
  406e62:	f240 80a5 	bls.w	406fb0 <_realloc_r+0x38c>
  406e66:	6831      	ldr	r1, [r6, #0]
  406e68:	f8ca 1008 	str.w	r1, [sl, #8]
  406e6c:	6871      	ldr	r1, [r6, #4]
  406e6e:	f8ca 100c 	str.w	r1, [sl, #12]
  406e72:	2a1b      	cmp	r2, #27
  406e74:	f200 80af 	bhi.w	406fd6 <_realloc_r+0x3b2>
  406e78:	3608      	adds	r6, #8
  406e7a:	f10a 0210 	add.w	r2, sl, #16
  406e7e:	6831      	ldr	r1, [r6, #0]
  406e80:	6011      	str	r1, [r2, #0]
  406e82:	6871      	ldr	r1, [r6, #4]
  406e84:	6051      	str	r1, [r2, #4]
  406e86:	68b1      	ldr	r1, [r6, #8]
  406e88:	6091      	str	r1, [r2, #8]
  406e8a:	eb0a 0105 	add.w	r1, sl, r5
  406e8e:	ebc5 020b 	rsb	r2, r5, fp
  406e92:	f042 0201 	orr.w	r2, r2, #1
  406e96:	6099      	str	r1, [r3, #8]
  406e98:	604a      	str	r2, [r1, #4]
  406e9a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406e9e:	f003 0301 	and.w	r3, r3, #1
  406ea2:	431d      	orrs	r5, r3
  406ea4:	4648      	mov	r0, r9
  406ea6:	f8ca 5004 	str.w	r5, [sl, #4]
  406eaa:	f7ff fbab 	bl	406604 <__malloc_unlock>
  406eae:	4638      	mov	r0, r7
  406eb0:	e75c      	b.n	406d6c <_realloc_r+0x148>
  406eb2:	6833      	ldr	r3, [r6, #0]
  406eb4:	6003      	str	r3, [r0, #0]
  406eb6:	6873      	ldr	r3, [r6, #4]
  406eb8:	6043      	str	r3, [r0, #4]
  406eba:	2a1b      	cmp	r2, #27
  406ebc:	d827      	bhi.n	406f0e <_realloc_r+0x2ea>
  406ebe:	f100 0308 	add.w	r3, r0, #8
  406ec2:	f106 0208 	add.w	r2, r6, #8
  406ec6:	e6f2      	b.n	406cae <_realloc_r+0x8a>
  406ec8:	463b      	mov	r3, r7
  406eca:	6832      	ldr	r2, [r6, #0]
  406ecc:	601a      	str	r2, [r3, #0]
  406ece:	6872      	ldr	r2, [r6, #4]
  406ed0:	605a      	str	r2, [r3, #4]
  406ed2:	68b2      	ldr	r2, [r6, #8]
  406ed4:	609a      	str	r2, [r3, #8]
  406ed6:	463e      	mov	r6, r7
  406ed8:	4674      	mov	r4, lr
  406eda:	46d0      	mov	r8, sl
  406edc:	e733      	b.n	406d46 <_realloc_r+0x122>
  406ede:	eb08 0105 	add.w	r1, r8, r5
  406ee2:	ebc5 0b0b 	rsb	fp, r5, fp
  406ee6:	f04b 0201 	orr.w	r2, fp, #1
  406eea:	6099      	str	r1, [r3, #8]
  406eec:	604a      	str	r2, [r1, #4]
  406eee:	f856 3c04 	ldr.w	r3, [r6, #-4]
  406ef2:	f003 0301 	and.w	r3, r3, #1
  406ef6:	431d      	orrs	r5, r3
  406ef8:	4648      	mov	r0, r9
  406efa:	f846 5c04 	str.w	r5, [r6, #-4]
  406efe:	f7ff fb81 	bl	406604 <__malloc_unlock>
  406f02:	4630      	mov	r0, r6
  406f04:	e732      	b.n	406d6c <_realloc_r+0x148>
  406f06:	4631      	mov	r1, r6
  406f08:	f7ff fb16 	bl	406538 <memmove>
  406f0c:	e6d5      	b.n	406cba <_realloc_r+0x96>
  406f0e:	68b3      	ldr	r3, [r6, #8]
  406f10:	6083      	str	r3, [r0, #8]
  406f12:	68f3      	ldr	r3, [r6, #12]
  406f14:	60c3      	str	r3, [r0, #12]
  406f16:	2a24      	cmp	r2, #36	; 0x24
  406f18:	d028      	beq.n	406f6c <_realloc_r+0x348>
  406f1a:	f100 0310 	add.w	r3, r0, #16
  406f1e:	f106 0210 	add.w	r2, r6, #16
  406f22:	e6c4      	b.n	406cae <_realloc_r+0x8a>
  406f24:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406f28:	f023 0303 	bic.w	r3, r3, #3
  406f2c:	441c      	add	r4, r3
  406f2e:	e70a      	b.n	406d46 <_realloc_r+0x122>
  406f30:	4631      	mov	r1, r6
  406f32:	4638      	mov	r0, r7
  406f34:	4674      	mov	r4, lr
  406f36:	46d0      	mov	r8, sl
  406f38:	f7ff fafe 	bl	406538 <memmove>
  406f3c:	463e      	mov	r6, r7
  406f3e:	e702      	b.n	406d46 <_realloc_r+0x122>
  406f40:	463a      	mov	r2, r7
  406f42:	e6f7      	b.n	406d34 <_realloc_r+0x110>
  406f44:	4631      	mov	r1, r6
  406f46:	4638      	mov	r0, r7
  406f48:	461c      	mov	r4, r3
  406f4a:	46d0      	mov	r8, sl
  406f4c:	f7ff faf4 	bl	406538 <memmove>
  406f50:	463e      	mov	r6, r7
  406f52:	e6f8      	b.n	406d46 <_realloc_r+0x122>
  406f54:	68b3      	ldr	r3, [r6, #8]
  406f56:	f8ca 3010 	str.w	r3, [sl, #16]
  406f5a:	68f3      	ldr	r3, [r6, #12]
  406f5c:	f8ca 3014 	str.w	r3, [sl, #20]
  406f60:	2a24      	cmp	r2, #36	; 0x24
  406f62:	d01b      	beq.n	406f9c <_realloc_r+0x378>
  406f64:	3610      	adds	r6, #16
  406f66:	f10a 0318 	add.w	r3, sl, #24
  406f6a:	e7ae      	b.n	406eca <_realloc_r+0x2a6>
  406f6c:	6933      	ldr	r3, [r6, #16]
  406f6e:	6103      	str	r3, [r0, #16]
  406f70:	6973      	ldr	r3, [r6, #20]
  406f72:	6143      	str	r3, [r0, #20]
  406f74:	f106 0218 	add.w	r2, r6, #24
  406f78:	f100 0318 	add.w	r3, r0, #24
  406f7c:	e697      	b.n	406cae <_realloc_r+0x8a>
  406f7e:	bf00      	nop
  406f80:	20000474 	.word	0x20000474
  406f84:	68b1      	ldr	r1, [r6, #8]
  406f86:	f8ca 1010 	str.w	r1, [sl, #16]
  406f8a:	68f1      	ldr	r1, [r6, #12]
  406f8c:	f8ca 1014 	str.w	r1, [sl, #20]
  406f90:	2a24      	cmp	r2, #36	; 0x24
  406f92:	d00f      	beq.n	406fb4 <_realloc_r+0x390>
  406f94:	3610      	adds	r6, #16
  406f96:	f10a 0218 	add.w	r2, sl, #24
  406f9a:	e6cb      	b.n	406d34 <_realloc_r+0x110>
  406f9c:	6933      	ldr	r3, [r6, #16]
  406f9e:	f8ca 3018 	str.w	r3, [sl, #24]
  406fa2:	6973      	ldr	r3, [r6, #20]
  406fa4:	f8ca 301c 	str.w	r3, [sl, #28]
  406fa8:	3618      	adds	r6, #24
  406faa:	f10a 0320 	add.w	r3, sl, #32
  406fae:	e78c      	b.n	406eca <_realloc_r+0x2a6>
  406fb0:	463a      	mov	r2, r7
  406fb2:	e764      	b.n	406e7e <_realloc_r+0x25a>
  406fb4:	6932      	ldr	r2, [r6, #16]
  406fb6:	f8ca 2018 	str.w	r2, [sl, #24]
  406fba:	6972      	ldr	r2, [r6, #20]
  406fbc:	f8ca 201c 	str.w	r2, [sl, #28]
  406fc0:	3618      	adds	r6, #24
  406fc2:	f10a 0220 	add.w	r2, sl, #32
  406fc6:	e6b5      	b.n	406d34 <_realloc_r+0x110>
  406fc8:	4631      	mov	r1, r6
  406fca:	4638      	mov	r0, r7
  406fcc:	9301      	str	r3, [sp, #4]
  406fce:	f7ff fab3 	bl	406538 <memmove>
  406fd2:	9b01      	ldr	r3, [sp, #4]
  406fd4:	e759      	b.n	406e8a <_realloc_r+0x266>
  406fd6:	68b1      	ldr	r1, [r6, #8]
  406fd8:	f8ca 1010 	str.w	r1, [sl, #16]
  406fdc:	68f1      	ldr	r1, [r6, #12]
  406fde:	f8ca 1014 	str.w	r1, [sl, #20]
  406fe2:	2a24      	cmp	r2, #36	; 0x24
  406fe4:	d003      	beq.n	406fee <_realloc_r+0x3ca>
  406fe6:	3610      	adds	r6, #16
  406fe8:	f10a 0218 	add.w	r2, sl, #24
  406fec:	e747      	b.n	406e7e <_realloc_r+0x25a>
  406fee:	6932      	ldr	r2, [r6, #16]
  406ff0:	f8ca 2018 	str.w	r2, [sl, #24]
  406ff4:	6972      	ldr	r2, [r6, #20]
  406ff6:	f8ca 201c 	str.w	r2, [sl, #28]
  406ffa:	3618      	adds	r6, #24
  406ffc:	f10a 0220 	add.w	r2, sl, #32
  407000:	e73d      	b.n	406e7e <_realloc_r+0x25a>
  407002:	bf00      	nop

00407004 <_sbrk_r>:
  407004:	b538      	push	{r3, r4, r5, lr}
  407006:	4c07      	ldr	r4, [pc, #28]	; (407024 <_sbrk_r+0x20>)
  407008:	2300      	movs	r3, #0
  40700a:	4605      	mov	r5, r0
  40700c:	4608      	mov	r0, r1
  40700e:	6023      	str	r3, [r4, #0]
  407010:	f7fb fbdc 	bl	4027cc <_sbrk>
  407014:	1c43      	adds	r3, r0, #1
  407016:	d000      	beq.n	40701a <_sbrk_r+0x16>
  407018:	bd38      	pop	{r3, r4, r5, pc}
  40701a:	6823      	ldr	r3, [r4, #0]
  40701c:	2b00      	cmp	r3, #0
  40701e:	d0fb      	beq.n	407018 <_sbrk_r+0x14>
  407020:	602b      	str	r3, [r5, #0]
  407022:	bd38      	pop	{r3, r4, r5, pc}
  407024:	20008870 	.word	0x20008870

00407028 <strchr>:
  407028:	b470      	push	{r4, r5, r6}
  40702a:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  40702e:	d034      	beq.n	40709a <strchr+0x72>
  407030:	0785      	lsls	r5, r0, #30
  407032:	d00f      	beq.n	407054 <strchr+0x2c>
  407034:	7803      	ldrb	r3, [r0, #0]
  407036:	2b00      	cmp	r3, #0
  407038:	d05a      	beq.n	4070f0 <strchr+0xc8>
  40703a:	429c      	cmp	r4, r3
  40703c:	d02b      	beq.n	407096 <strchr+0x6e>
  40703e:	1c43      	adds	r3, r0, #1
  407040:	e005      	b.n	40704e <strchr+0x26>
  407042:	f813 2b01 	ldrb.w	r2, [r3], #1
  407046:	2a00      	cmp	r2, #0
  407048:	d04f      	beq.n	4070ea <strchr+0xc2>
  40704a:	4294      	cmp	r4, r2
  40704c:	d023      	beq.n	407096 <strchr+0x6e>
  40704e:	079a      	lsls	r2, r3, #30
  407050:	4618      	mov	r0, r3
  407052:	d1f6      	bne.n	407042 <strchr+0x1a>
  407054:	020e      	lsls	r6, r1, #8
  407056:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  40705a:	4326      	orrs	r6, r4
  40705c:	6803      	ldr	r3, [r0, #0]
  40705e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407062:	e001      	b.n	407068 <strchr+0x40>
  407064:	f850 3f04 	ldr.w	r3, [r0, #4]!
  407068:	ea86 0503 	eor.w	r5, r6, r3
  40706c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407070:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  407074:	ea22 0205 	bic.w	r2, r2, r5
  407078:	ea21 0303 	bic.w	r3, r1, r3
  40707c:	4313      	orrs	r3, r2
  40707e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407082:	d0ef      	beq.n	407064 <strchr+0x3c>
  407084:	7803      	ldrb	r3, [r0, #0]
  407086:	b923      	cbnz	r3, 407092 <strchr+0x6a>
  407088:	e032      	b.n	4070f0 <strchr+0xc8>
  40708a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40708e:	2b00      	cmp	r3, #0
  407090:	d02e      	beq.n	4070f0 <strchr+0xc8>
  407092:	429c      	cmp	r4, r3
  407094:	d1f9      	bne.n	40708a <strchr+0x62>
  407096:	bc70      	pop	{r4, r5, r6}
  407098:	4770      	bx	lr
  40709a:	0784      	lsls	r4, r0, #30
  40709c:	d00b      	beq.n	4070b6 <strchr+0x8e>
  40709e:	7803      	ldrb	r3, [r0, #0]
  4070a0:	2b00      	cmp	r3, #0
  4070a2:	d0f8      	beq.n	407096 <strchr+0x6e>
  4070a4:	1c43      	adds	r3, r0, #1
  4070a6:	e003      	b.n	4070b0 <strchr+0x88>
  4070a8:	7802      	ldrb	r2, [r0, #0]
  4070aa:	3301      	adds	r3, #1
  4070ac:	2a00      	cmp	r2, #0
  4070ae:	d0f2      	beq.n	407096 <strchr+0x6e>
  4070b0:	0799      	lsls	r1, r3, #30
  4070b2:	4618      	mov	r0, r3
  4070b4:	d1f8      	bne.n	4070a8 <strchr+0x80>
  4070b6:	6802      	ldr	r2, [r0, #0]
  4070b8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4070bc:	ea23 0302 	bic.w	r3, r3, r2
  4070c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4070c4:	d108      	bne.n	4070d8 <strchr+0xb0>
  4070c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4070ca:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4070ce:	ea23 0302 	bic.w	r3, r3, r2
  4070d2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4070d6:	d0f6      	beq.n	4070c6 <strchr+0x9e>
  4070d8:	7803      	ldrb	r3, [r0, #0]
  4070da:	2b00      	cmp	r3, #0
  4070dc:	d0db      	beq.n	407096 <strchr+0x6e>
  4070de:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4070e2:	2b00      	cmp	r3, #0
  4070e4:	d1fb      	bne.n	4070de <strchr+0xb6>
  4070e6:	bc70      	pop	{r4, r5, r6}
  4070e8:	4770      	bx	lr
  4070ea:	4610      	mov	r0, r2
  4070ec:	bc70      	pop	{r4, r5, r6}
  4070ee:	4770      	bx	lr
  4070f0:	4618      	mov	r0, r3
  4070f2:	bc70      	pop	{r4, r5, r6}
  4070f4:	4770      	bx	lr
  4070f6:	bf00      	nop

004070f8 <__ssprint_r>:
  4070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070fc:	6893      	ldr	r3, [r2, #8]
  4070fe:	b083      	sub	sp, #12
  407100:	4690      	mov	r8, r2
  407102:	2b00      	cmp	r3, #0
  407104:	d072      	beq.n	4071ec <__ssprint_r+0xf4>
  407106:	4683      	mov	fp, r0
  407108:	f04f 0900 	mov.w	r9, #0
  40710c:	6816      	ldr	r6, [r2, #0]
  40710e:	6808      	ldr	r0, [r1, #0]
  407110:	688b      	ldr	r3, [r1, #8]
  407112:	460d      	mov	r5, r1
  407114:	464c      	mov	r4, r9
  407116:	2c00      	cmp	r4, #0
  407118:	d045      	beq.n	4071a6 <__ssprint_r+0xae>
  40711a:	429c      	cmp	r4, r3
  40711c:	461f      	mov	r7, r3
  40711e:	469a      	mov	sl, r3
  407120:	d346      	bcc.n	4071b0 <__ssprint_r+0xb8>
  407122:	89ab      	ldrh	r3, [r5, #12]
  407124:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407128:	d02d      	beq.n	407186 <__ssprint_r+0x8e>
  40712a:	696f      	ldr	r7, [r5, #20]
  40712c:	6929      	ldr	r1, [r5, #16]
  40712e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  407132:	ebc1 0a00 	rsb	sl, r1, r0
  407136:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40713a:	1c60      	adds	r0, r4, #1
  40713c:	107f      	asrs	r7, r7, #1
  40713e:	4450      	add	r0, sl
  407140:	42b8      	cmp	r0, r7
  407142:	463a      	mov	r2, r7
  407144:	bf84      	itt	hi
  407146:	4607      	movhi	r7, r0
  407148:	463a      	movhi	r2, r7
  40714a:	055b      	lsls	r3, r3, #21
  40714c:	d533      	bpl.n	4071b6 <__ssprint_r+0xbe>
  40714e:	4611      	mov	r1, r2
  407150:	4658      	mov	r0, fp
  407152:	f7fe fe1b 	bl	405d8c <_malloc_r>
  407156:	2800      	cmp	r0, #0
  407158:	d037      	beq.n	4071ca <__ssprint_r+0xd2>
  40715a:	4652      	mov	r2, sl
  40715c:	6929      	ldr	r1, [r5, #16]
  40715e:	9001      	str	r0, [sp, #4]
  407160:	f7ff f950 	bl	406404 <memcpy>
  407164:	89aa      	ldrh	r2, [r5, #12]
  407166:	9b01      	ldr	r3, [sp, #4]
  407168:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40716c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407170:	81aa      	strh	r2, [r5, #12]
  407172:	ebca 0207 	rsb	r2, sl, r7
  407176:	eb03 000a 	add.w	r0, r3, sl
  40717a:	616f      	str	r7, [r5, #20]
  40717c:	612b      	str	r3, [r5, #16]
  40717e:	6028      	str	r0, [r5, #0]
  407180:	60aa      	str	r2, [r5, #8]
  407182:	4627      	mov	r7, r4
  407184:	46a2      	mov	sl, r4
  407186:	4652      	mov	r2, sl
  407188:	4649      	mov	r1, r9
  40718a:	f7ff f9d5 	bl	406538 <memmove>
  40718e:	f8d8 2008 	ldr.w	r2, [r8, #8]
  407192:	68ab      	ldr	r3, [r5, #8]
  407194:	6828      	ldr	r0, [r5, #0]
  407196:	1bdb      	subs	r3, r3, r7
  407198:	4450      	add	r0, sl
  40719a:	1b14      	subs	r4, r2, r4
  40719c:	60ab      	str	r3, [r5, #8]
  40719e:	6028      	str	r0, [r5, #0]
  4071a0:	f8c8 4008 	str.w	r4, [r8, #8]
  4071a4:	b314      	cbz	r4, 4071ec <__ssprint_r+0xf4>
  4071a6:	f8d6 9000 	ldr.w	r9, [r6]
  4071aa:	6874      	ldr	r4, [r6, #4]
  4071ac:	3608      	adds	r6, #8
  4071ae:	e7b2      	b.n	407116 <__ssprint_r+0x1e>
  4071b0:	4627      	mov	r7, r4
  4071b2:	46a2      	mov	sl, r4
  4071b4:	e7e7      	b.n	407186 <__ssprint_r+0x8e>
  4071b6:	4658      	mov	r0, fp
  4071b8:	f7ff fd34 	bl	406c24 <_realloc_r>
  4071bc:	4603      	mov	r3, r0
  4071be:	2800      	cmp	r0, #0
  4071c0:	d1d7      	bne.n	407172 <__ssprint_r+0x7a>
  4071c2:	6929      	ldr	r1, [r5, #16]
  4071c4:	4658      	mov	r0, fp
  4071c6:	f7fe fcf5 	bl	405bb4 <_free_r>
  4071ca:	230c      	movs	r3, #12
  4071cc:	f8cb 3000 	str.w	r3, [fp]
  4071d0:	89ab      	ldrh	r3, [r5, #12]
  4071d2:	2200      	movs	r2, #0
  4071d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4071d8:	f04f 30ff 	mov.w	r0, #4294967295
  4071dc:	81ab      	strh	r3, [r5, #12]
  4071de:	f8c8 2008 	str.w	r2, [r8, #8]
  4071e2:	f8c8 2004 	str.w	r2, [r8, #4]
  4071e6:	b003      	add	sp, #12
  4071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071ec:	2000      	movs	r0, #0
  4071ee:	f8c8 0004 	str.w	r0, [r8, #4]
  4071f2:	b003      	add	sp, #12
  4071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004071f8 <__register_exitproc>:
  4071f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4071fc:	4c25      	ldr	r4, [pc, #148]	; (407294 <__register_exitproc+0x9c>)
  4071fe:	6825      	ldr	r5, [r4, #0]
  407200:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407204:	4606      	mov	r6, r0
  407206:	4688      	mov	r8, r1
  407208:	4692      	mov	sl, r2
  40720a:	4699      	mov	r9, r3
  40720c:	b3c4      	cbz	r4, 407280 <__register_exitproc+0x88>
  40720e:	6860      	ldr	r0, [r4, #4]
  407210:	281f      	cmp	r0, #31
  407212:	dc17      	bgt.n	407244 <__register_exitproc+0x4c>
  407214:	1c43      	adds	r3, r0, #1
  407216:	b176      	cbz	r6, 407236 <__register_exitproc+0x3e>
  407218:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40721c:	2201      	movs	r2, #1
  40721e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407222:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407226:	4082      	lsls	r2, r0
  407228:	4311      	orrs	r1, r2
  40722a:	2e02      	cmp	r6, #2
  40722c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407230:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407234:	d01e      	beq.n	407274 <__register_exitproc+0x7c>
  407236:	3002      	adds	r0, #2
  407238:	6063      	str	r3, [r4, #4]
  40723a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40723e:	2000      	movs	r0, #0
  407240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407244:	4b14      	ldr	r3, [pc, #80]	; (407298 <__register_exitproc+0xa0>)
  407246:	b303      	cbz	r3, 40728a <__register_exitproc+0x92>
  407248:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40724c:	f3af 8000 	nop.w
  407250:	4604      	mov	r4, r0
  407252:	b1d0      	cbz	r0, 40728a <__register_exitproc+0x92>
  407254:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407258:	2700      	movs	r7, #0
  40725a:	e880 0088 	stmia.w	r0, {r3, r7}
  40725e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407262:	4638      	mov	r0, r7
  407264:	2301      	movs	r3, #1
  407266:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40726a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40726e:	2e00      	cmp	r6, #0
  407270:	d0e1      	beq.n	407236 <__register_exitproc+0x3e>
  407272:	e7d1      	b.n	407218 <__register_exitproc+0x20>
  407274:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407278:	430a      	orrs	r2, r1
  40727a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40727e:	e7da      	b.n	407236 <__register_exitproc+0x3e>
  407280:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407284:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407288:	e7c1      	b.n	40720e <__register_exitproc+0x16>
  40728a:	f04f 30ff 	mov.w	r0, #4294967295
  40728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407292:	bf00      	nop
  407294:	00407eb0 	.word	0x00407eb0
  407298:	00000000 	.word	0x00000000

0040729c <_calloc_r>:
  40729c:	b510      	push	{r4, lr}
  40729e:	fb02 f101 	mul.w	r1, r2, r1
  4072a2:	f7fe fd73 	bl	405d8c <_malloc_r>
  4072a6:	4604      	mov	r4, r0
  4072a8:	b1d8      	cbz	r0, 4072e2 <_calloc_r+0x46>
  4072aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4072ae:	f022 0203 	bic.w	r2, r2, #3
  4072b2:	3a04      	subs	r2, #4
  4072b4:	2a24      	cmp	r2, #36	; 0x24
  4072b6:	d818      	bhi.n	4072ea <_calloc_r+0x4e>
  4072b8:	2a13      	cmp	r2, #19
  4072ba:	d914      	bls.n	4072e6 <_calloc_r+0x4a>
  4072bc:	2300      	movs	r3, #0
  4072be:	2a1b      	cmp	r2, #27
  4072c0:	6003      	str	r3, [r0, #0]
  4072c2:	6043      	str	r3, [r0, #4]
  4072c4:	d916      	bls.n	4072f4 <_calloc_r+0x58>
  4072c6:	2a24      	cmp	r2, #36	; 0x24
  4072c8:	6083      	str	r3, [r0, #8]
  4072ca:	60c3      	str	r3, [r0, #12]
  4072cc:	bf11      	iteee	ne
  4072ce:	f100 0210 	addne.w	r2, r0, #16
  4072d2:	6103      	streq	r3, [r0, #16]
  4072d4:	6143      	streq	r3, [r0, #20]
  4072d6:	f100 0218 	addeq.w	r2, r0, #24
  4072da:	2300      	movs	r3, #0
  4072dc:	6013      	str	r3, [r2, #0]
  4072de:	6053      	str	r3, [r2, #4]
  4072e0:	6093      	str	r3, [r2, #8]
  4072e2:	4620      	mov	r0, r4
  4072e4:	bd10      	pop	{r4, pc}
  4072e6:	4602      	mov	r2, r0
  4072e8:	e7f7      	b.n	4072da <_calloc_r+0x3e>
  4072ea:	2100      	movs	r1, #0
  4072ec:	f7fb fd80 	bl	402df0 <memset>
  4072f0:	4620      	mov	r0, r4
  4072f2:	bd10      	pop	{r4, pc}
  4072f4:	f100 0208 	add.w	r2, r0, #8
  4072f8:	e7ef      	b.n	4072da <_calloc_r+0x3e>
  4072fa:	bf00      	nop

004072fc <__aeabi_drsub>:
  4072fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407300:	e002      	b.n	407308 <__adddf3>
  407302:	bf00      	nop

00407304 <__aeabi_dsub>:
  407304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407308 <__adddf3>:
  407308:	b530      	push	{r4, r5, lr}
  40730a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40730e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407312:	ea94 0f05 	teq	r4, r5
  407316:	bf08      	it	eq
  407318:	ea90 0f02 	teqeq	r0, r2
  40731c:	bf1f      	itttt	ne
  40731e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407322:	ea55 0c02 	orrsne.w	ip, r5, r2
  407326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40732a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40732e:	f000 80e2 	beq.w	4074f6 <__adddf3+0x1ee>
  407332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40733a:	bfb8      	it	lt
  40733c:	426d      	neglt	r5, r5
  40733e:	dd0c      	ble.n	40735a <__adddf3+0x52>
  407340:	442c      	add	r4, r5
  407342:	ea80 0202 	eor.w	r2, r0, r2
  407346:	ea81 0303 	eor.w	r3, r1, r3
  40734a:	ea82 0000 	eor.w	r0, r2, r0
  40734e:	ea83 0101 	eor.w	r1, r3, r1
  407352:	ea80 0202 	eor.w	r2, r0, r2
  407356:	ea81 0303 	eor.w	r3, r1, r3
  40735a:	2d36      	cmp	r5, #54	; 0x36
  40735c:	bf88      	it	hi
  40735e:	bd30      	pophi	{r4, r5, pc}
  407360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40736c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407370:	d002      	beq.n	407378 <__adddf3+0x70>
  407372:	4240      	negs	r0, r0
  407374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40737c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407384:	d002      	beq.n	40738c <__adddf3+0x84>
  407386:	4252      	negs	r2, r2
  407388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40738c:	ea94 0f05 	teq	r4, r5
  407390:	f000 80a7 	beq.w	4074e2 <__adddf3+0x1da>
  407394:	f1a4 0401 	sub.w	r4, r4, #1
  407398:	f1d5 0e20 	rsbs	lr, r5, #32
  40739c:	db0d      	blt.n	4073ba <__adddf3+0xb2>
  40739e:	fa02 fc0e 	lsl.w	ip, r2, lr
  4073a2:	fa22 f205 	lsr.w	r2, r2, r5
  4073a6:	1880      	adds	r0, r0, r2
  4073a8:	f141 0100 	adc.w	r1, r1, #0
  4073ac:	fa03 f20e 	lsl.w	r2, r3, lr
  4073b0:	1880      	adds	r0, r0, r2
  4073b2:	fa43 f305 	asr.w	r3, r3, r5
  4073b6:	4159      	adcs	r1, r3
  4073b8:	e00e      	b.n	4073d8 <__adddf3+0xd0>
  4073ba:	f1a5 0520 	sub.w	r5, r5, #32
  4073be:	f10e 0e20 	add.w	lr, lr, #32
  4073c2:	2a01      	cmp	r2, #1
  4073c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4073c8:	bf28      	it	cs
  4073ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  4073ce:	fa43 f305 	asr.w	r3, r3, r5
  4073d2:	18c0      	adds	r0, r0, r3
  4073d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4073d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4073dc:	d507      	bpl.n	4073ee <__adddf3+0xe6>
  4073de:	f04f 0e00 	mov.w	lr, #0
  4073e2:	f1dc 0c00 	rsbs	ip, ip, #0
  4073e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4073ea:	eb6e 0101 	sbc.w	r1, lr, r1
  4073ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4073f2:	d31b      	bcc.n	40742c <__adddf3+0x124>
  4073f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4073f8:	d30c      	bcc.n	407414 <__adddf3+0x10c>
  4073fa:	0849      	lsrs	r1, r1, #1
  4073fc:	ea5f 0030 	movs.w	r0, r0, rrx
  407400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407404:	f104 0401 	add.w	r4, r4, #1
  407408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40740c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407410:	f080 809a 	bcs.w	407548 <__adddf3+0x240>
  407414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407418:	bf08      	it	eq
  40741a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40741e:	f150 0000 	adcs.w	r0, r0, #0
  407422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407426:	ea41 0105 	orr.w	r1, r1, r5
  40742a:	bd30      	pop	{r4, r5, pc}
  40742c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407430:	4140      	adcs	r0, r0
  407432:	eb41 0101 	adc.w	r1, r1, r1
  407436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40743a:	f1a4 0401 	sub.w	r4, r4, #1
  40743e:	d1e9      	bne.n	407414 <__adddf3+0x10c>
  407440:	f091 0f00 	teq	r1, #0
  407444:	bf04      	itt	eq
  407446:	4601      	moveq	r1, r0
  407448:	2000      	moveq	r0, #0
  40744a:	fab1 f381 	clz	r3, r1
  40744e:	bf08      	it	eq
  407450:	3320      	addeq	r3, #32
  407452:	f1a3 030b 	sub.w	r3, r3, #11
  407456:	f1b3 0220 	subs.w	r2, r3, #32
  40745a:	da0c      	bge.n	407476 <__adddf3+0x16e>
  40745c:	320c      	adds	r2, #12
  40745e:	dd08      	ble.n	407472 <__adddf3+0x16a>
  407460:	f102 0c14 	add.w	ip, r2, #20
  407464:	f1c2 020c 	rsb	r2, r2, #12
  407468:	fa01 f00c 	lsl.w	r0, r1, ip
  40746c:	fa21 f102 	lsr.w	r1, r1, r2
  407470:	e00c      	b.n	40748c <__adddf3+0x184>
  407472:	f102 0214 	add.w	r2, r2, #20
  407476:	bfd8      	it	le
  407478:	f1c2 0c20 	rsble	ip, r2, #32
  40747c:	fa01 f102 	lsl.w	r1, r1, r2
  407480:	fa20 fc0c 	lsr.w	ip, r0, ip
  407484:	bfdc      	itt	le
  407486:	ea41 010c 	orrle.w	r1, r1, ip
  40748a:	4090      	lslle	r0, r2
  40748c:	1ae4      	subs	r4, r4, r3
  40748e:	bfa2      	ittt	ge
  407490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407494:	4329      	orrge	r1, r5
  407496:	bd30      	popge	{r4, r5, pc}
  407498:	ea6f 0404 	mvn.w	r4, r4
  40749c:	3c1f      	subs	r4, #31
  40749e:	da1c      	bge.n	4074da <__adddf3+0x1d2>
  4074a0:	340c      	adds	r4, #12
  4074a2:	dc0e      	bgt.n	4074c2 <__adddf3+0x1ba>
  4074a4:	f104 0414 	add.w	r4, r4, #20
  4074a8:	f1c4 0220 	rsb	r2, r4, #32
  4074ac:	fa20 f004 	lsr.w	r0, r0, r4
  4074b0:	fa01 f302 	lsl.w	r3, r1, r2
  4074b4:	ea40 0003 	orr.w	r0, r0, r3
  4074b8:	fa21 f304 	lsr.w	r3, r1, r4
  4074bc:	ea45 0103 	orr.w	r1, r5, r3
  4074c0:	bd30      	pop	{r4, r5, pc}
  4074c2:	f1c4 040c 	rsb	r4, r4, #12
  4074c6:	f1c4 0220 	rsb	r2, r4, #32
  4074ca:	fa20 f002 	lsr.w	r0, r0, r2
  4074ce:	fa01 f304 	lsl.w	r3, r1, r4
  4074d2:	ea40 0003 	orr.w	r0, r0, r3
  4074d6:	4629      	mov	r1, r5
  4074d8:	bd30      	pop	{r4, r5, pc}
  4074da:	fa21 f004 	lsr.w	r0, r1, r4
  4074de:	4629      	mov	r1, r5
  4074e0:	bd30      	pop	{r4, r5, pc}
  4074e2:	f094 0f00 	teq	r4, #0
  4074e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4074ea:	bf06      	itte	eq
  4074ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4074f0:	3401      	addeq	r4, #1
  4074f2:	3d01      	subne	r5, #1
  4074f4:	e74e      	b.n	407394 <__adddf3+0x8c>
  4074f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4074fa:	bf18      	it	ne
  4074fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407500:	d029      	beq.n	407556 <__adddf3+0x24e>
  407502:	ea94 0f05 	teq	r4, r5
  407506:	bf08      	it	eq
  407508:	ea90 0f02 	teqeq	r0, r2
  40750c:	d005      	beq.n	40751a <__adddf3+0x212>
  40750e:	ea54 0c00 	orrs.w	ip, r4, r0
  407512:	bf04      	itt	eq
  407514:	4619      	moveq	r1, r3
  407516:	4610      	moveq	r0, r2
  407518:	bd30      	pop	{r4, r5, pc}
  40751a:	ea91 0f03 	teq	r1, r3
  40751e:	bf1e      	ittt	ne
  407520:	2100      	movne	r1, #0
  407522:	2000      	movne	r0, #0
  407524:	bd30      	popne	{r4, r5, pc}
  407526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40752a:	d105      	bne.n	407538 <__adddf3+0x230>
  40752c:	0040      	lsls	r0, r0, #1
  40752e:	4149      	adcs	r1, r1
  407530:	bf28      	it	cs
  407532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407536:	bd30      	pop	{r4, r5, pc}
  407538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40753c:	bf3c      	itt	cc
  40753e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407542:	bd30      	popcc	{r4, r5, pc}
  407544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40754c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407550:	f04f 0000 	mov.w	r0, #0
  407554:	bd30      	pop	{r4, r5, pc}
  407556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40755a:	bf1a      	itte	ne
  40755c:	4619      	movne	r1, r3
  40755e:	4610      	movne	r0, r2
  407560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407564:	bf1c      	itt	ne
  407566:	460b      	movne	r3, r1
  407568:	4602      	movne	r2, r0
  40756a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40756e:	bf06      	itte	eq
  407570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407574:	ea91 0f03 	teqeq	r1, r3
  407578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40757c:	bd30      	pop	{r4, r5, pc}
  40757e:	bf00      	nop

00407580 <__aeabi_ui2d>:
  407580:	f090 0f00 	teq	r0, #0
  407584:	bf04      	itt	eq
  407586:	2100      	moveq	r1, #0
  407588:	4770      	bxeq	lr
  40758a:	b530      	push	{r4, r5, lr}
  40758c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407594:	f04f 0500 	mov.w	r5, #0
  407598:	f04f 0100 	mov.w	r1, #0
  40759c:	e750      	b.n	407440 <__adddf3+0x138>
  40759e:	bf00      	nop

004075a0 <__aeabi_i2d>:
  4075a0:	f090 0f00 	teq	r0, #0
  4075a4:	bf04      	itt	eq
  4075a6:	2100      	moveq	r1, #0
  4075a8:	4770      	bxeq	lr
  4075aa:	b530      	push	{r4, r5, lr}
  4075ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4075b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4075b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4075b8:	bf48      	it	mi
  4075ba:	4240      	negmi	r0, r0
  4075bc:	f04f 0100 	mov.w	r1, #0
  4075c0:	e73e      	b.n	407440 <__adddf3+0x138>
  4075c2:	bf00      	nop

004075c4 <__aeabi_f2d>:
  4075c4:	0042      	lsls	r2, r0, #1
  4075c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4075ca:	ea4f 0131 	mov.w	r1, r1, rrx
  4075ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4075d2:	bf1f      	itttt	ne
  4075d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4075d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4075dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4075e0:	4770      	bxne	lr
  4075e2:	f092 0f00 	teq	r2, #0
  4075e6:	bf14      	ite	ne
  4075e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4075ec:	4770      	bxeq	lr
  4075ee:	b530      	push	{r4, r5, lr}
  4075f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4075f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4075f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4075fc:	e720      	b.n	407440 <__adddf3+0x138>
  4075fe:	bf00      	nop

00407600 <__aeabi_ul2d>:
  407600:	ea50 0201 	orrs.w	r2, r0, r1
  407604:	bf08      	it	eq
  407606:	4770      	bxeq	lr
  407608:	b530      	push	{r4, r5, lr}
  40760a:	f04f 0500 	mov.w	r5, #0
  40760e:	e00a      	b.n	407626 <__aeabi_l2d+0x16>

00407610 <__aeabi_l2d>:
  407610:	ea50 0201 	orrs.w	r2, r0, r1
  407614:	bf08      	it	eq
  407616:	4770      	bxeq	lr
  407618:	b530      	push	{r4, r5, lr}
  40761a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40761e:	d502      	bpl.n	407626 <__aeabi_l2d+0x16>
  407620:	4240      	negs	r0, r0
  407622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40762a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40762e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407632:	f43f aedc 	beq.w	4073ee <__adddf3+0xe6>
  407636:	f04f 0203 	mov.w	r2, #3
  40763a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40763e:	bf18      	it	ne
  407640:	3203      	addne	r2, #3
  407642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407646:	bf18      	it	ne
  407648:	3203      	addne	r2, #3
  40764a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40764e:	f1c2 0320 	rsb	r3, r2, #32
  407652:	fa00 fc03 	lsl.w	ip, r0, r3
  407656:	fa20 f002 	lsr.w	r0, r0, r2
  40765a:	fa01 fe03 	lsl.w	lr, r1, r3
  40765e:	ea40 000e 	orr.w	r0, r0, lr
  407662:	fa21 f102 	lsr.w	r1, r1, r2
  407666:	4414      	add	r4, r2
  407668:	e6c1      	b.n	4073ee <__adddf3+0xe6>
  40766a:	bf00      	nop

0040766c <__aeabi_dmul>:
  40766c:	b570      	push	{r4, r5, r6, lr}
  40766e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40767a:	bf1d      	ittte	ne
  40767c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407680:	ea94 0f0c 	teqne	r4, ip
  407684:	ea95 0f0c 	teqne	r5, ip
  407688:	f000 f8de 	bleq	407848 <__aeabi_dmul+0x1dc>
  40768c:	442c      	add	r4, r5
  40768e:	ea81 0603 	eor.w	r6, r1, r3
  407692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40769a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40769e:	bf18      	it	ne
  4076a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4076a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4076a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4076ac:	d038      	beq.n	407720 <__aeabi_dmul+0xb4>
  4076ae:	fba0 ce02 	umull	ip, lr, r0, r2
  4076b2:	f04f 0500 	mov.w	r5, #0
  4076b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4076ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4076be:	fbe0 e503 	umlal	lr, r5, r0, r3
  4076c2:	f04f 0600 	mov.w	r6, #0
  4076c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4076ca:	f09c 0f00 	teq	ip, #0
  4076ce:	bf18      	it	ne
  4076d0:	f04e 0e01 	orrne.w	lr, lr, #1
  4076d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4076d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4076dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4076e0:	d204      	bcs.n	4076ec <__aeabi_dmul+0x80>
  4076e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4076e6:	416d      	adcs	r5, r5
  4076e8:	eb46 0606 	adc.w	r6, r6, r6
  4076ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4076f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4076f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4076f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4076fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407704:	bf88      	it	hi
  407706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40770a:	d81e      	bhi.n	40774a <__aeabi_dmul+0xde>
  40770c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407710:	bf08      	it	eq
  407712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407716:	f150 0000 	adcs.w	r0, r0, #0
  40771a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40771e:	bd70      	pop	{r4, r5, r6, pc}
  407720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407724:	ea46 0101 	orr.w	r1, r6, r1
  407728:	ea40 0002 	orr.w	r0, r0, r2
  40772c:	ea81 0103 	eor.w	r1, r1, r3
  407730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407734:	bfc2      	ittt	gt
  407736:	ebd4 050c 	rsbsgt	r5, r4, ip
  40773a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40773e:	bd70      	popgt	{r4, r5, r6, pc}
  407740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407744:	f04f 0e00 	mov.w	lr, #0
  407748:	3c01      	subs	r4, #1
  40774a:	f300 80ab 	bgt.w	4078a4 <__aeabi_dmul+0x238>
  40774e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407752:	bfde      	ittt	le
  407754:	2000      	movle	r0, #0
  407756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40775a:	bd70      	pople	{r4, r5, r6, pc}
  40775c:	f1c4 0400 	rsb	r4, r4, #0
  407760:	3c20      	subs	r4, #32
  407762:	da35      	bge.n	4077d0 <__aeabi_dmul+0x164>
  407764:	340c      	adds	r4, #12
  407766:	dc1b      	bgt.n	4077a0 <__aeabi_dmul+0x134>
  407768:	f104 0414 	add.w	r4, r4, #20
  40776c:	f1c4 0520 	rsb	r5, r4, #32
  407770:	fa00 f305 	lsl.w	r3, r0, r5
  407774:	fa20 f004 	lsr.w	r0, r0, r4
  407778:	fa01 f205 	lsl.w	r2, r1, r5
  40777c:	ea40 0002 	orr.w	r0, r0, r2
  407780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40778c:	fa21 f604 	lsr.w	r6, r1, r4
  407790:	eb42 0106 	adc.w	r1, r2, r6
  407794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407798:	bf08      	it	eq
  40779a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40779e:	bd70      	pop	{r4, r5, r6, pc}
  4077a0:	f1c4 040c 	rsb	r4, r4, #12
  4077a4:	f1c4 0520 	rsb	r5, r4, #32
  4077a8:	fa00 f304 	lsl.w	r3, r0, r4
  4077ac:	fa20 f005 	lsr.w	r0, r0, r5
  4077b0:	fa01 f204 	lsl.w	r2, r1, r4
  4077b4:	ea40 0002 	orr.w	r0, r0, r2
  4077b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4077bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4077c0:	f141 0100 	adc.w	r1, r1, #0
  4077c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4077c8:	bf08      	it	eq
  4077ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4077ce:	bd70      	pop	{r4, r5, r6, pc}
  4077d0:	f1c4 0520 	rsb	r5, r4, #32
  4077d4:	fa00 f205 	lsl.w	r2, r0, r5
  4077d8:	ea4e 0e02 	orr.w	lr, lr, r2
  4077dc:	fa20 f304 	lsr.w	r3, r0, r4
  4077e0:	fa01 f205 	lsl.w	r2, r1, r5
  4077e4:	ea43 0302 	orr.w	r3, r3, r2
  4077e8:	fa21 f004 	lsr.w	r0, r1, r4
  4077ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4077f0:	fa21 f204 	lsr.w	r2, r1, r4
  4077f4:	ea20 0002 	bic.w	r0, r0, r2
  4077f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4077fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407800:	bf08      	it	eq
  407802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407806:	bd70      	pop	{r4, r5, r6, pc}
  407808:	f094 0f00 	teq	r4, #0
  40780c:	d10f      	bne.n	40782e <__aeabi_dmul+0x1c2>
  40780e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407812:	0040      	lsls	r0, r0, #1
  407814:	eb41 0101 	adc.w	r1, r1, r1
  407818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40781c:	bf08      	it	eq
  40781e:	3c01      	subeq	r4, #1
  407820:	d0f7      	beq.n	407812 <__aeabi_dmul+0x1a6>
  407822:	ea41 0106 	orr.w	r1, r1, r6
  407826:	f095 0f00 	teq	r5, #0
  40782a:	bf18      	it	ne
  40782c:	4770      	bxne	lr
  40782e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407832:	0052      	lsls	r2, r2, #1
  407834:	eb43 0303 	adc.w	r3, r3, r3
  407838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40783c:	bf08      	it	eq
  40783e:	3d01      	subeq	r5, #1
  407840:	d0f7      	beq.n	407832 <__aeabi_dmul+0x1c6>
  407842:	ea43 0306 	orr.w	r3, r3, r6
  407846:	4770      	bx	lr
  407848:	ea94 0f0c 	teq	r4, ip
  40784c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407850:	bf18      	it	ne
  407852:	ea95 0f0c 	teqne	r5, ip
  407856:	d00c      	beq.n	407872 <__aeabi_dmul+0x206>
  407858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40785c:	bf18      	it	ne
  40785e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407862:	d1d1      	bne.n	407808 <__aeabi_dmul+0x19c>
  407864:	ea81 0103 	eor.w	r1, r1, r3
  407868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40786c:	f04f 0000 	mov.w	r0, #0
  407870:	bd70      	pop	{r4, r5, r6, pc}
  407872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407876:	bf06      	itte	eq
  407878:	4610      	moveq	r0, r2
  40787a:	4619      	moveq	r1, r3
  40787c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407880:	d019      	beq.n	4078b6 <__aeabi_dmul+0x24a>
  407882:	ea94 0f0c 	teq	r4, ip
  407886:	d102      	bne.n	40788e <__aeabi_dmul+0x222>
  407888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40788c:	d113      	bne.n	4078b6 <__aeabi_dmul+0x24a>
  40788e:	ea95 0f0c 	teq	r5, ip
  407892:	d105      	bne.n	4078a0 <__aeabi_dmul+0x234>
  407894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407898:	bf1c      	itt	ne
  40789a:	4610      	movne	r0, r2
  40789c:	4619      	movne	r1, r3
  40789e:	d10a      	bne.n	4078b6 <__aeabi_dmul+0x24a>
  4078a0:	ea81 0103 	eor.w	r1, r1, r3
  4078a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4078a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4078ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4078b0:	f04f 0000 	mov.w	r0, #0
  4078b4:	bd70      	pop	{r4, r5, r6, pc}
  4078b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4078ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4078be:	bd70      	pop	{r4, r5, r6, pc}

004078c0 <__aeabi_ddiv>:
  4078c0:	b570      	push	{r4, r5, r6, lr}
  4078c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4078c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4078ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4078ce:	bf1d      	ittte	ne
  4078d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4078d4:	ea94 0f0c 	teqne	r4, ip
  4078d8:	ea95 0f0c 	teqne	r5, ip
  4078dc:	f000 f8a7 	bleq	407a2e <__aeabi_ddiv+0x16e>
  4078e0:	eba4 0405 	sub.w	r4, r4, r5
  4078e4:	ea81 0e03 	eor.w	lr, r1, r3
  4078e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4078ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4078f0:	f000 8088 	beq.w	407a04 <__aeabi_ddiv+0x144>
  4078f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4078f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4078fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40790c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407918:	429d      	cmp	r5, r3
  40791a:	bf08      	it	eq
  40791c:	4296      	cmpeq	r6, r2
  40791e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407926:	d202      	bcs.n	40792e <__aeabi_ddiv+0x6e>
  407928:	085b      	lsrs	r3, r3, #1
  40792a:	ea4f 0232 	mov.w	r2, r2, rrx
  40792e:	1ab6      	subs	r6, r6, r2
  407930:	eb65 0503 	sbc.w	r5, r5, r3
  407934:	085b      	lsrs	r3, r3, #1
  407936:	ea4f 0232 	mov.w	r2, r2, rrx
  40793a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40793e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407942:	ebb6 0e02 	subs.w	lr, r6, r2
  407946:	eb75 0e03 	sbcs.w	lr, r5, r3
  40794a:	bf22      	ittt	cs
  40794c:	1ab6      	subcs	r6, r6, r2
  40794e:	4675      	movcs	r5, lr
  407950:	ea40 000c 	orrcs.w	r0, r0, ip
  407954:	085b      	lsrs	r3, r3, #1
  407956:	ea4f 0232 	mov.w	r2, r2, rrx
  40795a:	ebb6 0e02 	subs.w	lr, r6, r2
  40795e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407962:	bf22      	ittt	cs
  407964:	1ab6      	subcs	r6, r6, r2
  407966:	4675      	movcs	r5, lr
  407968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40796c:	085b      	lsrs	r3, r3, #1
  40796e:	ea4f 0232 	mov.w	r2, r2, rrx
  407972:	ebb6 0e02 	subs.w	lr, r6, r2
  407976:	eb75 0e03 	sbcs.w	lr, r5, r3
  40797a:	bf22      	ittt	cs
  40797c:	1ab6      	subcs	r6, r6, r2
  40797e:	4675      	movcs	r5, lr
  407980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407984:	085b      	lsrs	r3, r3, #1
  407986:	ea4f 0232 	mov.w	r2, r2, rrx
  40798a:	ebb6 0e02 	subs.w	lr, r6, r2
  40798e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407992:	bf22      	ittt	cs
  407994:	1ab6      	subcs	r6, r6, r2
  407996:	4675      	movcs	r5, lr
  407998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40799c:	ea55 0e06 	orrs.w	lr, r5, r6
  4079a0:	d018      	beq.n	4079d4 <__aeabi_ddiv+0x114>
  4079a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4079a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4079aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4079ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4079b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4079b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4079ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4079be:	d1c0      	bne.n	407942 <__aeabi_ddiv+0x82>
  4079c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4079c4:	d10b      	bne.n	4079de <__aeabi_ddiv+0x11e>
  4079c6:	ea41 0100 	orr.w	r1, r1, r0
  4079ca:	f04f 0000 	mov.w	r0, #0
  4079ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4079d2:	e7b6      	b.n	407942 <__aeabi_ddiv+0x82>
  4079d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4079d8:	bf04      	itt	eq
  4079da:	4301      	orreq	r1, r0
  4079dc:	2000      	moveq	r0, #0
  4079de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4079e2:	bf88      	it	hi
  4079e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4079e8:	f63f aeaf 	bhi.w	40774a <__aeabi_dmul+0xde>
  4079ec:	ebb5 0c03 	subs.w	ip, r5, r3
  4079f0:	bf04      	itt	eq
  4079f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4079f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4079fa:	f150 0000 	adcs.w	r0, r0, #0
  4079fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407a02:	bd70      	pop	{r4, r5, r6, pc}
  407a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407a10:	bfc2      	ittt	gt
  407a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  407a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407a1a:	bd70      	popgt	{r4, r5, r6, pc}
  407a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407a20:	f04f 0e00 	mov.w	lr, #0
  407a24:	3c01      	subs	r4, #1
  407a26:	e690      	b.n	40774a <__aeabi_dmul+0xde>
  407a28:	ea45 0e06 	orr.w	lr, r5, r6
  407a2c:	e68d      	b.n	40774a <__aeabi_dmul+0xde>
  407a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407a32:	ea94 0f0c 	teq	r4, ip
  407a36:	bf08      	it	eq
  407a38:	ea95 0f0c 	teqeq	r5, ip
  407a3c:	f43f af3b 	beq.w	4078b6 <__aeabi_dmul+0x24a>
  407a40:	ea94 0f0c 	teq	r4, ip
  407a44:	d10a      	bne.n	407a5c <__aeabi_ddiv+0x19c>
  407a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407a4a:	f47f af34 	bne.w	4078b6 <__aeabi_dmul+0x24a>
  407a4e:	ea95 0f0c 	teq	r5, ip
  407a52:	f47f af25 	bne.w	4078a0 <__aeabi_dmul+0x234>
  407a56:	4610      	mov	r0, r2
  407a58:	4619      	mov	r1, r3
  407a5a:	e72c      	b.n	4078b6 <__aeabi_dmul+0x24a>
  407a5c:	ea95 0f0c 	teq	r5, ip
  407a60:	d106      	bne.n	407a70 <__aeabi_ddiv+0x1b0>
  407a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407a66:	f43f aefd 	beq.w	407864 <__aeabi_dmul+0x1f8>
  407a6a:	4610      	mov	r0, r2
  407a6c:	4619      	mov	r1, r3
  407a6e:	e722      	b.n	4078b6 <__aeabi_dmul+0x24a>
  407a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407a74:	bf18      	it	ne
  407a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407a7a:	f47f aec5 	bne.w	407808 <__aeabi_dmul+0x19c>
  407a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407a82:	f47f af0d 	bne.w	4078a0 <__aeabi_dmul+0x234>
  407a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407a8a:	f47f aeeb 	bne.w	407864 <__aeabi_dmul+0x1f8>
  407a8e:	e712      	b.n	4078b6 <__aeabi_dmul+0x24a>

00407a90 <__gedf2>:
  407a90:	f04f 3cff 	mov.w	ip, #4294967295
  407a94:	e006      	b.n	407aa4 <__cmpdf2+0x4>
  407a96:	bf00      	nop

00407a98 <__ledf2>:
  407a98:	f04f 0c01 	mov.w	ip, #1
  407a9c:	e002      	b.n	407aa4 <__cmpdf2+0x4>
  407a9e:	bf00      	nop

00407aa0 <__cmpdf2>:
  407aa0:	f04f 0c01 	mov.w	ip, #1
  407aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
  407aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407ab4:	bf18      	it	ne
  407ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407aba:	d01b      	beq.n	407af4 <__cmpdf2+0x54>
  407abc:	b001      	add	sp, #4
  407abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407ac2:	bf0c      	ite	eq
  407ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407ac8:	ea91 0f03 	teqne	r1, r3
  407acc:	bf02      	ittt	eq
  407ace:	ea90 0f02 	teqeq	r0, r2
  407ad2:	2000      	moveq	r0, #0
  407ad4:	4770      	bxeq	lr
  407ad6:	f110 0f00 	cmn.w	r0, #0
  407ada:	ea91 0f03 	teq	r1, r3
  407ade:	bf58      	it	pl
  407ae0:	4299      	cmppl	r1, r3
  407ae2:	bf08      	it	eq
  407ae4:	4290      	cmpeq	r0, r2
  407ae6:	bf2c      	ite	cs
  407ae8:	17d8      	asrcs	r0, r3, #31
  407aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407aee:	f040 0001 	orr.w	r0, r0, #1
  407af2:	4770      	bx	lr
  407af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407afc:	d102      	bne.n	407b04 <__cmpdf2+0x64>
  407afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407b02:	d107      	bne.n	407b14 <__cmpdf2+0x74>
  407b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407b0c:	d1d6      	bne.n	407abc <__cmpdf2+0x1c>
  407b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407b12:	d0d3      	beq.n	407abc <__cmpdf2+0x1c>
  407b14:	f85d 0b04 	ldr.w	r0, [sp], #4
  407b18:	4770      	bx	lr
  407b1a:	bf00      	nop

00407b1c <__aeabi_cdrcmple>:
  407b1c:	4684      	mov	ip, r0
  407b1e:	4610      	mov	r0, r2
  407b20:	4662      	mov	r2, ip
  407b22:	468c      	mov	ip, r1
  407b24:	4619      	mov	r1, r3
  407b26:	4663      	mov	r3, ip
  407b28:	e000      	b.n	407b2c <__aeabi_cdcmpeq>
  407b2a:	bf00      	nop

00407b2c <__aeabi_cdcmpeq>:
  407b2c:	b501      	push	{r0, lr}
  407b2e:	f7ff ffb7 	bl	407aa0 <__cmpdf2>
  407b32:	2800      	cmp	r0, #0
  407b34:	bf48      	it	mi
  407b36:	f110 0f00 	cmnmi.w	r0, #0
  407b3a:	bd01      	pop	{r0, pc}

00407b3c <__aeabi_dcmpeq>:
  407b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b40:	f7ff fff4 	bl	407b2c <__aeabi_cdcmpeq>
  407b44:	bf0c      	ite	eq
  407b46:	2001      	moveq	r0, #1
  407b48:	2000      	movne	r0, #0
  407b4a:	f85d fb08 	ldr.w	pc, [sp], #8
  407b4e:	bf00      	nop

00407b50 <__aeabi_dcmplt>:
  407b50:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b54:	f7ff ffea 	bl	407b2c <__aeabi_cdcmpeq>
  407b58:	bf34      	ite	cc
  407b5a:	2001      	movcc	r0, #1
  407b5c:	2000      	movcs	r0, #0
  407b5e:	f85d fb08 	ldr.w	pc, [sp], #8
  407b62:	bf00      	nop

00407b64 <__aeabi_dcmple>:
  407b64:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b68:	f7ff ffe0 	bl	407b2c <__aeabi_cdcmpeq>
  407b6c:	bf94      	ite	ls
  407b6e:	2001      	movls	r0, #1
  407b70:	2000      	movhi	r0, #0
  407b72:	f85d fb08 	ldr.w	pc, [sp], #8
  407b76:	bf00      	nop

00407b78 <__aeabi_dcmpge>:
  407b78:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b7c:	f7ff ffce 	bl	407b1c <__aeabi_cdrcmple>
  407b80:	bf94      	ite	ls
  407b82:	2001      	movls	r0, #1
  407b84:	2000      	movhi	r0, #0
  407b86:	f85d fb08 	ldr.w	pc, [sp], #8
  407b8a:	bf00      	nop

00407b8c <__aeabi_dcmpgt>:
  407b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407b90:	f7ff ffc4 	bl	407b1c <__aeabi_cdrcmple>
  407b94:	bf34      	ite	cc
  407b96:	2001      	movcc	r0, #1
  407b98:	2000      	movcs	r0, #0
  407b9a:	f85d fb08 	ldr.w	pc, [sp], #8
  407b9e:	bf00      	nop

00407ba0 <__aeabi_dcmpun>:
  407ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ba8:	d102      	bne.n	407bb0 <__aeabi_dcmpun+0x10>
  407baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407bae:	d10a      	bne.n	407bc6 <__aeabi_dcmpun+0x26>
  407bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407bb8:	d102      	bne.n	407bc0 <__aeabi_dcmpun+0x20>
  407bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407bbe:	d102      	bne.n	407bc6 <__aeabi_dcmpun+0x26>
  407bc0:	f04f 0000 	mov.w	r0, #0
  407bc4:	4770      	bx	lr
  407bc6:	f04f 0001 	mov.w	r0, #1
  407bca:	4770      	bx	lr

00407bcc <__aeabi_d2iz>:
  407bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407bd4:	d215      	bcs.n	407c02 <__aeabi_d2iz+0x36>
  407bd6:	d511      	bpl.n	407bfc <__aeabi_d2iz+0x30>
  407bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407be0:	d912      	bls.n	407c08 <__aeabi_d2iz+0x3c>
  407be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407bf2:	fa23 f002 	lsr.w	r0, r3, r2
  407bf6:	bf18      	it	ne
  407bf8:	4240      	negne	r0, r0
  407bfa:	4770      	bx	lr
  407bfc:	f04f 0000 	mov.w	r0, #0
  407c00:	4770      	bx	lr
  407c02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407c06:	d105      	bne.n	407c14 <__aeabi_d2iz+0x48>
  407c08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407c0c:	bf08      	it	eq
  407c0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407c12:	4770      	bx	lr
  407c14:	f04f 0000 	mov.w	r0, #0
  407c18:	4770      	bx	lr
  407c1a:	bf00      	nop
  407c1c:	000e1000 	.word	0x000e1000
  407c20:	000000c0 	.word	0x000000c0
  407c24:	00000800 	.word	0x00000800
	...
  407c34:	6f6c435b 	.word	0x6f6c435b
  407c38:	3a646573 	.word	0x3a646573
  407c3c:	00000020 	.word	0x00000020
  407c40:	00000a0d 	.word	0x00000a0d
  407c44:	74697277 	.word	0x74697277
  407c48:	64252065 	.word	0x64252065
  407c4c:	0d642520 	.word	0x0d642520
  407c50:	0000000a 	.word	0x0000000a
  407c54:	6d6d6f43 	.word	0x6d6d6f43
  407c58:	20646e61 	.word	0x20646e61
  407c5c:	6c696166 	.word	0x6c696166
  407c60:	00006465 	.word	0x00006465
  407c64:	736f6c63 	.word	0x736f6c63
  407c68:	6c612065 	.word	0x6c612065
  407c6c:	000a0d6c 	.word	0x000a0d6c
  407c70:	70747468 	.word	0x70747468
  407c74:	736f705f 	.word	0x736f705f
  407c78:	6f2d2074 	.word	0x6f2d2074
  407c7c:	74746820 	.word	0x74746820
  407c80:	2f3a7370 	.word	0x2f3a7370
  407c84:	6769622f 	.word	0x6769622f
  407c88:	746f7262 	.word	0x746f7262
  407c8c:	73726568 	.word	0x73726568
  407c90:	2e736565 	.word	0x2e736565
  407c94:	702f656d 	.word	0x702f656d
  407c98:	5f74736f 	.word	0x5f74736f
  407c9c:	67616d69 	.word	0x67616d69
  407ca0:	70612065 	.word	0x70612065
  407ca4:	63696c70 	.word	0x63696c70
  407ca8:	6f697461 	.word	0x6f697461
  407cac:	736a2f6e 	.word	0x736a2f6e
  407cb0:	0a0d6e6f 	.word	0x0a0d6e6f
  407cb4:	00000000 	.word	0x00000000
  407cb8:	70747468 	.word	0x70747468
  407cbc:	6464615f 	.word	0x6464615f
  407cc0:	6165685f 	.word	0x6165685f
  407cc4:	20726564 	.word	0x20726564
  407cc8:	656d2030 	.word	0x656d2030
  407ccc:	67617373 	.word	0x67617373
  407cd0:	79742d65 	.word	0x79742d65
  407cd4:	69206570 	.word	0x69206570
  407cd8:	6567616d 	.word	0x6567616d
  407cdc:	6e69622d 	.word	0x6e69622d
  407ce0:	00000a0d 	.word	0x00000a0d
  407ce4:	74697277 	.word	0x74697277
  407ce8:	20302065 	.word	0x20302065
  407cec:	0a0d6425 	.word	0x0a0d6425
  407cf0:	00000000 	.word	0x00000000
  407cf4:	70747468 	.word	0x70747468
  407cf8:	6165725f 	.word	0x6165725f
  407cfc:	74735f64 	.word	0x74735f64
  407d00:	73757461 	.word	0x73757461
  407d04:	0a0d3020 	.word	0x0a0d3020
  407d08:	00000000 	.word	0x00000000
  407d0c:	6e65704f 	.word	0x6e65704f
  407d10:	00006465 	.word	0x00006465
  407d14:	65704f5b 	.word	0x65704f5b
  407d18:	3a64656e 	.word	0x3a64656e
  407d1c:	00000020 	.word	0x00000020
  407d20:	73626577 	.word	0x73626577
  407d24:	656b636f 	.word	0x656b636f
  407d28:	6c635f74 	.word	0x6c635f74
  407d2c:	746e6569 	.word	0x746e6569
  407d30:	20662d20 	.word	0x20662d20
  407d34:	206e6962 	.word	0x206e6962
  407d38:	3a737377 	.word	0x3a737377
  407d3c:	69622f2f 	.word	0x69622f2f
  407d40:	6f726267 	.word	0x6f726267
  407d44:	72656874 	.word	0x72656874
  407d48:	73656573 	.word	0x73656573
  407d4c:	2f656d2e 	.word	0x2f656d2e
  407d50:	72756f73 	.word	0x72756f73
  407d54:	615f6563 	.word	0x615f6563
  407d58:	6f696475 	.word	0x6f696475
  407d5c:	636f735f 	.word	0x636f735f
  407d60:	0d74656b 	.word	0x0d74656b
  407d64:	0000000a 	.word	0x0000000a
  407d68:	63637553 	.word	0x63637553
  407d6c:	00737365 	.word	0x00737365
  407d70:	20656466 	.word	0x20656466
  407d74:	6d746162 	.word	0x6d746162
  407d78:	742e6e61 	.word	0x742e6e61
  407d7c:	0a0d7478 	.word	0x0a0d7478
  407d80:	00000000 	.word	0x00000000
  407d84:	20726366 	.word	0x20726366
  407d88:	6d746162 	.word	0x6d746162
  407d8c:	742e6e61 	.word	0x742e6e61
  407d90:	25207478 	.word	0x25207478
  407d94:	000a0d64 	.word	0x000a0d64
  407d98:	57206425 	.word	0x57206425
  407d9c:	00434245 	.word	0x00434245
  407da0:	7473696c 	.word	0x7473696c
  407da4:	00000a0d 	.word	0x00000a0d
  407da8:	75746573 	.word	0x75746573
  407dac:	65772070 	.word	0x65772070
  407db0:	000a0d62 	.word	0x000a0d62
  407db4:	7373415b 	.word	0x7373415b
  407db8:	6169636f 	.word	0x6169636f
  407dbc:	5d646574 	.word	0x5d646574
  407dc0:	00000a0d 	.word	0x00000a0d
  407dc4:	20746567 	.word	0x20746567
  407dc8:	74737973 	.word	0x74737973
  407dcc:	732e6d65 	.word	0x732e6d65
  407dd0:	6d656661 	.word	0x6d656661
  407dd4:	2e65646f 	.word	0x2e65646f
  407dd8:	74617473 	.word	0x74617473
  407ddc:	0a0d7375 	.word	0x0a0d7375
  407de0:	00000000 	.word	0x00000000
  407de4:	6c756166 	.word	0x6c756166
  407de8:	705f7374 	.word	0x705f7374
  407dec:	746e6972 	.word	0x746e6972
  407df0:	00000a0d 	.word	0x00000a0d
  407df4:	6c756166 	.word	0x6c756166
  407df8:	725f7374 	.word	0x725f7374
  407dfc:	74657365 	.word	0x74657365
  407e00:	00000a0d 	.word	0x00000a0d
  407e04:	6f626572 	.word	0x6f626572
  407e08:	0a0d746f 	.word	0x0a0d746f
  407e0c:	00000000 	.word	0x00000000
  407e10:	20746573 	.word	0x20746573
  407e14:	63207973 	.word	0x63207973
  407e18:	6f207020 	.word	0x6f207020
  407e1c:	0a0d6666 	.word	0x0a0d6666
  407e20:	00000000 	.word	0x00000000
  407e24:	7473696c 	.word	0x7473696c
  407e28:	00000a0d 	.word	0x00000a0d
  407e2c:	00000023 	.word	0x00000023
  407e30:	53424557 	.word	0x53424557
  407e34:	00000000 	.word	0x00000000
  407e38:	74697277 	.word	0x74697277
  407e3c:	63252065 	.word	0x63252065
  407e40:	0a0d3120 	.word	0x0a0d3120
  407e44:	00000000 	.word	0x00000000
  407e48:	00000030 	.word	0x00000030
  407e4c:	7373415b 	.word	0x7373415b
  407e50:	6169636f 	.word	0x6169636f
  407e54:	5d646574 	.word	0x5d646574
  407e58:	00000000 	.word	0x00000000
  407e5c:	6f626572 	.word	0x6f626572
  407e60:	0a0d746f 	.word	0x0a0d746f
  407e64:	00000000 	.word	0x00000000
  407e68:	20746553 	.word	0x20746553
  407e6c:	00004b4f 	.word	0x00004b4f
  407e70:	20746573 	.word	0x20746573
  407e74:	63207973 	.word	0x63207973
  407e78:	6f207020 	.word	0x6f207020
  407e7c:	0a0d6666 	.word	0x0a0d6666
  407e80:	00000000 	.word	0x00000000
  407e84:	20746573 	.word	0x20746573
  407e88:	63207973 	.word	0x63207973
  407e8c:	6f206520 	.word	0x6f206520
  407e90:	0a0d6666 	.word	0x0a0d6666
  407e94:	00000000 	.word	0x00000000
  407e98:	63637553 	.word	0x63637553
  407e9c:	00737365 	.word	0x00737365
  407ea0:	736f6c63 	.word	0x736f6c63
  407ea4:	6c612065 	.word	0x6c612065
  407ea8:	000a0d6c 	.word	0x000a0d6c
  407eac:	00000043 	.word	0x00000043

00407eb0 <_global_impure_ptr>:
  407eb0:	20000010                                ... 

00407eb4 <zeroes.7035>:
  407eb4:	30303030 30303030 30303030 30303030     0000000000000000
  407ec4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  407ed4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407ee4:	00000000 33323130 37363534 62613938     ....0123456789ab
  407ef4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  407f04:	00000030                                0...

00407f08 <blanks.7034>:
  407f08:	20202020 20202020 20202020 20202020                     
  407f18:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407f28:	49534f50 00000058 0000002e 00000000     POSIX...........

00407f38 <__mprec_tens>:
  407f38:	00000000 3ff00000 00000000 40240000     .......?......$@
  407f48:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407f58:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407f68:	00000000 412e8480 00000000 416312d0     .......A......cA
  407f78:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407f88:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407f98:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407fa8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407fb8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407fc8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407fd8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407fe8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407ff8:	79d99db4 44ea7843                       ...yCx.D

00408000 <__mprec_bigtens>:
  408000:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408010:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408020:	7f73bf3c 75154fdd                       <.s..O.u

00408028 <p05.5373>:
  408028:	00000005 00000019 0000007d              ........}...

00408034 <_init>:
  408034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408036:	bf00      	nop
  408038:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40803a:	bc08      	pop	{r3}
  40803c:	469e      	mov	lr, r3
  40803e:	4770      	bx	lr

00408040 <__init_array_start>:
  408040:	00404b51 	.word	0x00404b51

00408044 <__frame_dummy_init_array_entry>:
  408044:	004000f1                                ..@.

00408048 <_fini>:
  408048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40804a:	bf00      	nop
  40804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40804e:	bc08      	pop	{r3}
  408050:	469e      	mov	lr, r3
  408052:	4770      	bx	lr

00408054 <__fini_array_start>:
  408054:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	7eac 0040 0000 0000 0000 0000 0000 0000     .~@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <lconv>:
2000043c:	7f30 0040 7ee4 0040 7ee4 0040 7ee4 0040     0.@..~@..~@..~@.
2000044c:	7ee4 0040 7ee4 0040 7ee4 0040 7ee4 0040     .~@..~@..~@..~@.
2000045c:	7ee4 0040 7ee4 0040 ffff ffff ffff ffff     .~@..~@.........
2000046c:	ffff ffff ffff 0000                         ........

20000474 <__malloc_av_>:
	...
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 

2000087c <__malloc_trim_threshold>:
2000087c:	0000 0002                                   ....

20000880 <__malloc_sbrk_base>:
20000880:	ffff ffff                                   ....
