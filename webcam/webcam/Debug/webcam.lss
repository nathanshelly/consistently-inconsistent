
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e74  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402e74  00402e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  00402e7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000125c  20000438  004032b4  00020438  2**2
                  ALLOC
  4 .stack        00003004  20001694  00404510  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   000141cf  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002930  00000000  00000000  0003468a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007146  00000000  00000000  00036fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c30  00000000  00000000  0003e100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b90  00000000  00000000  0003ed30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000137f8  00000000  00000000  0003f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d764  00000000  00000000  000530b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f9f4  00000000  00000000  0006081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003700  00000000  00000000  000b0210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 46 00 20 75 1d 40 00 3d 1e 40 00 3d 1e 40 00     .F. u.@.=.@.=.@.
  400010:	3d 1e 40 00 3d 1e 40 00 3d 1e 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 1e 40 00 3d 1e 40 00 00 00 00 00 3d 1e 40 00     =.@.=.@.....=.@.
  40003c:	3d 1e 40 00 3d 1e 40 00 3d 1e 40 00 3d 1e 40 00     =.@.=.@.=.@.=.@.
  40004c:	3d 1e 40 00 3d 1e 40 00 3d 1e 40 00 3d 1e 40 00     =.@.=.@.=.@.=.@.
  40005c:	00 00 00 00 3d 1e 40 00 3d 1e 40 00 00 00 00 00     ....=.@.=.@.....
  40006c:	ed 07 40 00 05 08 40 00 00 00 00 00 99 0b 40 00     ..@...@.......@.
  40007c:	3d 1e 40 00 00 00 00 00 00 00 00 00 3d 1e 40 00     =.@.........=.@.
  40008c:	3d 1e 40 00 3d 1e 40 00 3d 1e 40 00 3d 1e 40 00     =.@.=.@.=.@.=.@.
  40009c:	cd 09 40 00 3d 1e 40 00 3d 1e 40 00 00 00 00 00     ..@.=.@.=.@.....
	...
  4000b4:	31 06 40 00 3d 1e 40 00 3d 1e 40 00 3d 1e 40 00     1.@.=.@.=.@.=.@.
  4000c4:	3d 1e 40 00 3d 1e 40 00                             =.@.=.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402e7c 	.word	0x00402e7c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402e7c 	.word	0x00402e7c
  40012c:	2000043c 	.word	0x2000043c
  400130:	00402e7c 	.word	0x00402e7c
  400134:	00000000 	.word	0x00000000

00400138 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400138:	b480      	push	{r7}
  40013a:	b087      	sub	sp, #28
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
  400144:	603b      	str	r3, [r7, #0]
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400146:	68fb      	ldr	r3, [r7, #12]
  400148:	2201      	movs	r2, #1
  40014a:	601a      	str	r2, [r3, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  40014c:	68fb      	ldr	r3, [r7, #12]
  40014e:	2200      	movs	r2, #0
  400150:	605a      	str	r2, [r3, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	f240 2202 	movw	r2, #514	; 0x202
  400158:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  40015c:	68fb      	ldr	r3, [r7, #12]
  40015e:	2200      	movs	r2, #0
  400160:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400164:	68fb      	ldr	r3, [r7, #12]
  400166:	2200      	movs	r2, #0
  400168:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  40016c:	687b      	ldr	r3, [r7, #4]
  40016e:	005b      	lsls	r3, r3, #1
  400170:	68ba      	ldr	r2, [r7, #8]
  400172:	fbb2 f3f3 	udiv	r3, r2, r3
  400176:	3b01      	subs	r3, #1
  400178:	617b      	str	r3, [r7, #20]
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  40017a:	68fb      	ldr	r3, [r7, #12]
  40017c:	685a      	ldr	r2, [r3, #4]
  40017e:	697b      	ldr	r3, [r7, #20]
  400180:	021b      	lsls	r3, r3, #8
  400182:	b299      	uxth	r1, r3
  400184:	683b      	ldr	r3, [r7, #0]
  400186:	430b      	orrs	r3, r1
  400188:	431a      	orrs	r2, r3
  40018a:	68fb      	ldr	r3, [r7, #12]
  40018c:	605a      	str	r2, [r3, #4]
	return 0;
  40018e:	2300      	movs	r3, #0
}
  400190:	4618      	mov	r0, r3
  400192:	371c      	adds	r7, #28
  400194:	46bd      	mov	sp, r7
  400196:	bc80      	pop	{r7}
  400198:	4770      	bx	lr

0040019a <adc_configure_trigger>:
 * ADC_MR_FREERUN_OFF disables freerun mode.
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
  40019a:	b480      	push	{r7}
  40019c:	b083      	sub	sp, #12
  40019e:	af00      	add	r7, sp, #0
  4001a0:	6078      	str	r0, [r7, #4]
  4001a2:	460b      	mov	r3, r1
  4001a4:	70fb      	strb	r3, [r7, #3]
  4001a6:	4613      	mov	r3, r2
  4001a8:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  4001aa:	687b      	ldr	r3, [r7, #4]
  4001ac:	685a      	ldr	r2, [r3, #4]
  4001ae:	78f9      	ldrb	r1, [r7, #3]
  4001b0:	78bb      	ldrb	r3, [r7, #2]
  4001b2:	01db      	lsls	r3, r3, #7
  4001b4:	b2db      	uxtb	r3, r3
  4001b6:	430b      	orrs	r3, r1
  4001b8:	431a      	orrs	r2, r3
  4001ba:	687b      	ldr	r3, [r7, #4]
  4001bc:	605a      	str	r2, [r3, #4]
}
  4001be:	bf00      	nop
  4001c0:	370c      	adds	r7, #12
  4001c2:	46bd      	mov	sp, r7
  4001c4:	bc80      	pop	{r7}
  4001c6:	4770      	bx	lr

004001c8 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  4001c8:	b480      	push	{r7}
  4001ca:	b085      	sub	sp, #20
  4001cc:	af00      	add	r7, sp, #0
  4001ce:	60f8      	str	r0, [r7, #12]
  4001d0:	607a      	str	r2, [r7, #4]
  4001d2:	461a      	mov	r2, r3
  4001d4:	460b      	mov	r3, r1
  4001d6:	72fb      	strb	r3, [r7, #11]
  4001d8:	4613      	mov	r3, r2
  4001da:	72bb      	strb	r3, [r7, #10]
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  4001dc:	68fb      	ldr	r3, [r7, #12]
  4001de:	685a      	ldr	r2, [r3, #4]
  4001e0:	7abb      	ldrb	r3, [r7, #10]
  4001e2:	071b      	lsls	r3, r3, #28
  4001e4:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  4001e8:	687b      	ldr	r3, [r7, #4]
  4001ea:	4319      	orrs	r1, r3
  4001ec:	7afb      	ldrb	r3, [r7, #11]
  4001ee:	061b      	lsls	r3, r3, #24
  4001f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  4001f4:	430b      	orrs	r3, r1
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  4001f6:	431a      	orrs	r2, r3
  4001f8:	68fb      	ldr	r3, [r7, #12]
  4001fa:	605a      	str	r2, [r3, #4]
}
  4001fc:	bf00      	nop
  4001fe:	3714      	adds	r7, #20
  400200:	46bd      	mov	sp, r7
  400202:	bc80      	pop	{r7}
  400204:	4770      	bx	lr

00400206 <adc_start>:
 *
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
  400206:	b480      	push	{r7}
  400208:	b083      	sub	sp, #12
  40020a:	af00      	add	r7, sp, #0
  40020c:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR = ADC_CR_START;
  40020e:	687b      	ldr	r3, [r7, #4]
  400210:	2202      	movs	r2, #2
  400212:	601a      	str	r2, [r3, #0]
}
  400214:	bf00      	nop
  400216:	370c      	adds	r7, #12
  400218:	46bd      	mov	sp, r7
  40021a:	bc80      	pop	{r7}
  40021c:	4770      	bx	lr

0040021e <adc_enable_channel>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
  40021e:	b480      	push	{r7}
  400220:	b083      	sub	sp, #12
  400222:	af00      	add	r7, sp, #0
  400224:	6078      	str	r0, [r7, #4]
  400226:	460b      	mov	r3, r1
  400228:	70fb      	strb	r3, [r7, #3]
	p_adc->ADC_CHER = 1 << adc_ch;
  40022a:	78fb      	ldrb	r3, [r7, #3]
  40022c:	2201      	movs	r2, #1
  40022e:	fa02 f303 	lsl.w	r3, r2, r3
  400232:	461a      	mov	r2, r3
  400234:	687b      	ldr	r3, [r7, #4]
  400236:	611a      	str	r2, [r3, #16]
}
  400238:	bf00      	nop
  40023a:	370c      	adds	r7, #12
  40023c:	46bd      	mov	sp, r7
  40023e:	bc80      	pop	{r7}
  400240:	4770      	bx	lr

00400242 <adc_enable_interrupt>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
  400242:	b480      	push	{r7}
  400244:	b083      	sub	sp, #12
  400246:	af00      	add	r7, sp, #0
  400248:	6078      	str	r0, [r7, #4]
  40024a:	6039      	str	r1, [r7, #0]
	p_adc->ADC_IER = ul_source;
  40024c:	687b      	ldr	r3, [r7, #4]
  40024e:	683a      	ldr	r2, [r7, #0]
  400250:	625a      	str	r2, [r3, #36]	; 0x24
}
  400252:	bf00      	nop
  400254:	370c      	adds	r7, #12
  400256:	46bd      	mov	sp, r7
  400258:	bc80      	pop	{r7}
  40025a:	4770      	bx	lr

0040025c <adc_disable_interrupt>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
  40025c:	b480      	push	{r7}
  40025e:	b083      	sub	sp, #12
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
  400264:	6039      	str	r1, [r7, #0]
	p_adc->ADC_IDR = ul_source;
  400266:	687b      	ldr	r3, [r7, #4]
  400268:	683a      	ldr	r2, [r7, #0]
  40026a:	629a      	str	r2, [r3, #40]	; 0x28
}
  40026c:	bf00      	nop
  40026e:	370c      	adds	r7, #12
  400270:	46bd      	mov	sp, r7
  400272:	bc80      	pop	{r7}
  400274:	4770      	bx	lr

00400276 <adc_get_status>:
 * \param p_adc Pointer to an ADC instance.
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
  400276:	b480      	push	{r7}
  400278:	b083      	sub	sp, #12
  40027a:	af00      	add	r7, sp, #0
  40027c:	6078      	str	r0, [r7, #4]
	return p_adc->ADC_ISR;
  40027e:	687b      	ldr	r3, [r7, #4]
  400280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400282:	4618      	mov	r0, r3
  400284:	370c      	adds	r7, #12
  400286:	46bd      	mov	sp, r7
  400288:	bc80      	pop	{r7}
  40028a:	4770      	bx	lr

0040028c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40028c:	b480      	push	{r7}
  40028e:	b087      	sub	sp, #28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	60b9      	str	r1, [r7, #8]
  400296:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400298:	68fa      	ldr	r2, [r7, #12]
  40029a:	68bb      	ldr	r3, [r7, #8]
  40029c:	019b      	lsls	r3, r3, #6
  40029e:	4413      	add	r3, r2
  4002a0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4002a2:	697b      	ldr	r3, [r7, #20]
  4002a4:	2202      	movs	r2, #2
  4002a6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4002a8:	697b      	ldr	r3, [r7, #20]
  4002aa:	f04f 32ff 	mov.w	r2, #4294967295
  4002ae:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4002b0:	697b      	ldr	r3, [r7, #20]
  4002b2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4002b4:	697b      	ldr	r3, [r7, #20]
  4002b6:	687a      	ldr	r2, [r7, #4]
  4002b8:	605a      	str	r2, [r3, #4]
}
  4002ba:	bf00      	nop
  4002bc:	371c      	adds	r7, #28
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b083      	sub	sp, #12
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	6078      	str	r0, [r7, #4]
  4002cc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4002ce:	687a      	ldr	r2, [r7, #4]
  4002d0:	683b      	ldr	r3, [r7, #0]
  4002d2:	019b      	lsls	r3, r3, #6
  4002d4:	4413      	add	r3, r2
  4002d6:	2205      	movs	r2, #5
  4002d8:	601a      	str	r2, [r3, #0]
}
  4002da:	bf00      	nop
  4002dc:	370c      	adds	r7, #12
  4002de:	46bd      	mov	sp, r7
  4002e0:	bc80      	pop	{r7}
  4002e2:	4770      	bx	lr

004002e4 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4002e4:	b480      	push	{r7}
  4002e6:	b085      	sub	sp, #20
  4002e8:	af00      	add	r7, sp, #0
  4002ea:	60f8      	str	r0, [r7, #12]
  4002ec:	60b9      	str	r1, [r7, #8]
  4002ee:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4002f0:	68fa      	ldr	r2, [r7, #12]
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	019b      	lsls	r3, r3, #6
  4002f6:	4413      	add	r3, r2
  4002f8:	331c      	adds	r3, #28
  4002fa:	687a      	ldr	r2, [r7, #4]
  4002fc:	601a      	str	r2, [r3, #0]
}
  4002fe:	bf00      	nop
  400300:	3714      	adds	r7, #20
  400302:	46bd      	mov	sp, r7
  400304:	bc80      	pop	{r7}
  400306:	4770      	bx	lr

00400308 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400308:	b480      	push	{r7}
  40030a:	b087      	sub	sp, #28
  40030c:	af00      	add	r7, sp, #0
  40030e:	60f8      	str	r0, [r7, #12]
  400310:	60b9      	str	r1, [r7, #8]
  400312:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400314:	68fa      	ldr	r2, [r7, #12]
  400316:	68bb      	ldr	r3, [r7, #8]
  400318:	019b      	lsls	r3, r3, #6
  40031a:	4413      	add	r3, r2
  40031c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  40031e:	697b      	ldr	r3, [r7, #20]
  400320:	687a      	ldr	r2, [r7, #4]
  400322:	625a      	str	r2, [r3, #36]	; 0x24
}
  400324:	bf00      	nop
  400326:	371c      	adds	r7, #28
  400328:	46bd      	mov	sp, r7
  40032a:	bc80      	pop	{r7}
  40032c:	4770      	bx	lr

0040032e <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40032e:	b480      	push	{r7}
  400330:	b085      	sub	sp, #20
  400332:	af00      	add	r7, sp, #0
  400334:	6078      	str	r0, [r7, #4]
  400336:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400338:	687a      	ldr	r2, [r7, #4]
  40033a:	683b      	ldr	r3, [r7, #0]
  40033c:	019b      	lsls	r3, r3, #6
  40033e:	4413      	add	r3, r2
  400340:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400342:	68fb      	ldr	r3, [r7, #12]
  400344:	6a1b      	ldr	r3, [r3, #32]
}
  400346:	4618      	mov	r0, r3
  400348:	3714      	adds	r7, #20
  40034a:	46bd      	mov	sp, r7
  40034c:	bc80      	pop	{r7}
  40034e:	4770      	bx	lr

00400350 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400350:	b480      	push	{r7}
  400352:	b08d      	sub	sp, #52	; 0x34
  400354:	af00      	add	r7, sp, #0
  400356:	60f8      	str	r0, [r7, #12]
  400358:	60b9      	str	r1, [r7, #8]
  40035a:	607a      	str	r2, [r7, #4]
  40035c:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40035e:	2302      	movs	r3, #2
  400360:	613b      	str	r3, [r7, #16]
  400362:	2308      	movs	r3, #8
  400364:	617b      	str	r3, [r7, #20]
  400366:	2320      	movs	r3, #32
  400368:	61bb      	str	r3, [r7, #24]
  40036a:	2380      	movs	r3, #128	; 0x80
  40036c:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40036e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400370:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400372:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400374:	2300      	movs	r3, #0
  400376:	62fb      	str	r3, [r7, #44]	; 0x2c
  400378:	e01a      	b.n	4003b0 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40037c:	009b      	lsls	r3, r3, #2
  40037e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400382:	4413      	add	r3, r2
  400384:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400388:	68ba      	ldr	r2, [r7, #8]
  40038a:	fbb2 f3f3 	udiv	r3, r2, r3
  40038e:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400390:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400392:	0c1b      	lsrs	r3, r3, #16
  400394:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400396:	68fa      	ldr	r2, [r7, #12]
  400398:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40039a:	429a      	cmp	r2, r3
  40039c:	d901      	bls.n	4003a2 <tc_find_mck_divisor+0x52>
			return 0;
  40039e:	2300      	movs	r3, #0
  4003a0:	e023      	b.n	4003ea <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4003a2:	68fa      	ldr	r2, [r7, #12]
  4003a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4003a6:	429a      	cmp	r2, r3
  4003a8:	d206      	bcs.n	4003b8 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4003aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003ac:	3301      	adds	r3, #1
  4003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4003b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003b2:	2b04      	cmp	r3, #4
  4003b4:	d9e1      	bls.n	40037a <tc_find_mck_divisor+0x2a>
  4003b6:	e000      	b.n	4003ba <tc_find_mck_divisor+0x6a>
			break;
  4003b8:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4003ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003bc:	2b04      	cmp	r3, #4
  4003be:	d901      	bls.n	4003c4 <tc_find_mck_divisor+0x74>
		return 0;
  4003c0:	2300      	movs	r3, #0
  4003c2:	e012      	b.n	4003ea <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	2b00      	cmp	r3, #0
  4003c8:	d008      	beq.n	4003dc <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4003ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003cc:	009b      	lsls	r3, r3, #2
  4003ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4003d2:	4413      	add	r3, r2
  4003d4:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4003d8:	687b      	ldr	r3, [r7, #4]
  4003da:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4003dc:	683b      	ldr	r3, [r7, #0]
  4003de:	2b00      	cmp	r3, #0
  4003e0:	d002      	beq.n	4003e8 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4003e6:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4003e8:	2301      	movs	r3, #1
}
  4003ea:	4618      	mov	r0, r3
  4003ec:	3734      	adds	r7, #52	; 0x34
  4003ee:	46bd      	mov	sp, r7
  4003f0:	bc80      	pop	{r7}
  4003f2:	4770      	bx	lr

004003f4 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4003f4:	b480      	push	{r7}
  4003f6:	b083      	sub	sp, #12
  4003f8:	af00      	add	r7, sp, #0
  4003fa:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400402:	605a      	str	r2, [r3, #4]

}
  400404:	bf00      	nop
  400406:	370c      	adds	r7, #12
  400408:	46bd      	mov	sp, r7
  40040a:	bc80      	pop	{r7}
  40040c:	4770      	bx	lr
	...

00400410 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400410:	b480      	push	{r7}
  400412:	b083      	sub	sp, #12
  400414:	af00      	add	r7, sp, #0
  400416:	4603      	mov	r3, r0
  400418:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40041a:	4908      	ldr	r1, [pc, #32]	; (40043c <NVIC_EnableIRQ+0x2c>)
  40041c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400420:	095b      	lsrs	r3, r3, #5
  400422:	79fa      	ldrb	r2, [r7, #7]
  400424:	f002 021f 	and.w	r2, r2, #31
  400428:	2001      	movs	r0, #1
  40042a:	fa00 f202 	lsl.w	r2, r0, r2
  40042e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400432:	bf00      	nop
  400434:	370c      	adds	r7, #12
  400436:	46bd      	mov	sp, r7
  400438:	bc80      	pop	{r7}
  40043a:	4770      	bx	lr
  40043c:	e000e100 	.word	0xe000e100

00400440 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400440:	b480      	push	{r7}
  400442:	b083      	sub	sp, #12
  400444:	af00      	add	r7, sp, #0
  400446:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400448:	687b      	ldr	r3, [r7, #4]
  40044a:	2b07      	cmp	r3, #7
  40044c:	d825      	bhi.n	40049a <osc_get_rate+0x5a>
  40044e:	a201      	add	r2, pc, #4	; (adr r2, 400454 <osc_get_rate+0x14>)
  400450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400454:	00400475 	.word	0x00400475
  400458:	0040047b 	.word	0x0040047b
  40045c:	00400481 	.word	0x00400481
  400460:	00400487 	.word	0x00400487
  400464:	0040048b 	.word	0x0040048b
  400468:	0040048f 	.word	0x0040048f
  40046c:	00400493 	.word	0x00400493
  400470:	00400497 	.word	0x00400497
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400474:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400478:	e010      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40047a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40047e:	e00d      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400484:	e00a      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400486:	4b08      	ldr	r3, [pc, #32]	; (4004a8 <osc_get_rate+0x68>)
  400488:	e008      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40048a:	4b08      	ldr	r3, [pc, #32]	; (4004ac <osc_get_rate+0x6c>)
  40048c:	e006      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40048e:	4b08      	ldr	r3, [pc, #32]	; (4004b0 <osc_get_rate+0x70>)
  400490:	e004      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400492:	4b07      	ldr	r3, [pc, #28]	; (4004b0 <osc_get_rate+0x70>)
  400494:	e002      	b.n	40049c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400496:	4b06      	ldr	r3, [pc, #24]	; (4004b0 <osc_get_rate+0x70>)
  400498:	e000      	b.n	40049c <osc_get_rate+0x5c>
	}

	return 0;
  40049a:	2300      	movs	r3, #0
}
  40049c:	4618      	mov	r0, r3
  40049e:	370c      	adds	r7, #12
  4004a0:	46bd      	mov	sp, r7
  4004a2:	bc80      	pop	{r7}
  4004a4:	4770      	bx	lr
  4004a6:	bf00      	nop
  4004a8:	003d0900 	.word	0x003d0900
  4004ac:	007a1200 	.word	0x007a1200
  4004b0:	00b71b00 	.word	0x00b71b00

004004b4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004b4:	b580      	push	{r7, lr}
  4004b6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b04      	ldr	r3, [pc, #16]	; (4004cc <sysclk_get_main_hz+0x18>)
  4004bc:	4798      	blx	r3
  4004be:	4602      	mov	r2, r0
  4004c0:	4613      	mov	r3, r2
  4004c2:	009b      	lsls	r3, r3, #2
  4004c4:	4413      	add	r3, r2
  4004c6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004c8:	4618      	mov	r0, r3
  4004ca:	bd80      	pop	{r7, pc}
  4004cc:	00400441 	.word	0x00400441

004004d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004d0:	b580      	push	{r7, lr}
  4004d2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004d4:	4b02      	ldr	r3, [pc, #8]	; (4004e0 <sysclk_get_cpu_hz+0x10>)
  4004d6:	4798      	blx	r3
  4004d8:	4603      	mov	r3, r0
  4004da:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004dc:	4618      	mov	r0, r3
  4004de:	bd80      	pop	{r7, pc}
  4004e0:	004004b5 	.word	0x004004b5

004004e4 <ADC_setup>:

/** Receive index. */
volatile uint32_t buf_index = 0;


void ADC_setup(void){
  4004e4:	b590      	push	{r4, r7, lr}
  4004e6:	b083      	sub	sp, #12
  4004e8:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_ADC);
  4004ea:	201d      	movs	r0, #29
  4004ec:	4b15      	ldr	r3, [pc, #84]	; (400544 <ADC_setup+0x60>)
  4004ee:	4798      	blx	r3
	
	uint32_t ADC_clk = 6000000;
  4004f0:	4b15      	ldr	r3, [pc, #84]	; (400548 <ADC_setup+0x64>)
  4004f2:	607b      	str	r3, [r7, #4]
	
	// ADC clk = 6Mhz, prescaler = 9 because MCK = 120MHz
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_clk, ADC_STARTUP_TIME_4);
  4004f4:	4b15      	ldr	r3, [pc, #84]	; (40054c <ADC_setup+0x68>)
  4004f6:	4798      	blx	r3
  4004f8:	4601      	mov	r1, r0
  4004fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4004fe:	687a      	ldr	r2, [r7, #4]
  400500:	4813      	ldr	r0, [pc, #76]	; (400550 <ADC_setup+0x6c>)
  400502:	4c14      	ldr	r4, [pc, #80]	; (400554 <ADC_setup+0x70>)
  400504:	47a0      	blx	r4
	
	adc_configure_timing(ADC, TRACKING_TIME, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  400506:	2302      	movs	r3, #2
  400508:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  40050c:	2101      	movs	r1, #1
  40050e:	4810      	ldr	r0, [pc, #64]	; (400550 <ADC_setup+0x6c>)
  400510:	4c11      	ldr	r4, [pc, #68]	; (400558 <ADC_setup+0x74>)
  400512:	47a0      	blx	r4
	
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
  400514:	2200      	movs	r2, #0
  400516:	2100      	movs	r1, #0
  400518:	480d      	ldr	r0, [pc, #52]	; (400550 <ADC_setup+0x6c>)
  40051a:	4b10      	ldr	r3, [pc, #64]	; (40055c <ADC_setup+0x78>)
  40051c:	4798      	blx	r3

	//adc_check(ADC, sysclk_get_cpu_hz());

	/* Enable channel for potentiometer. */
	adc_enable_channel(ADC, ADC_CHANNEL_8);
  40051e:	2108      	movs	r1, #8
  400520:	480b      	ldr	r0, [pc, #44]	; (400550 <ADC_setup+0x6c>)
  400522:	4b0f      	ldr	r3, [pc, #60]	; (400560 <ADC_setup+0x7c>)
  400524:	4798      	blx	r3

	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
  400526:	201d      	movs	r0, #29
  400528:	4b0e      	ldr	r3, [pc, #56]	; (400564 <ADC_setup+0x80>)
  40052a:	4798      	blx	r3
	
	adc_start(ADC);
  40052c:	4808      	ldr	r0, [pc, #32]	; (400550 <ADC_setup+0x6c>)
  40052e:	4b0e      	ldr	r3, [pc, #56]	; (400568 <ADC_setup+0x84>)
  400530:	4798      	blx	r3
	
	adc_read_buffer(ADC, multisample_buf, MULTISAMPLE_SIZE);
  400532:	220a      	movs	r2, #10
  400534:	490d      	ldr	r1, [pc, #52]	; (40056c <ADC_setup+0x88>)
  400536:	4806      	ldr	r0, [pc, #24]	; (400550 <ADC_setup+0x6c>)
  400538:	4b0d      	ldr	r3, [pc, #52]	; (400570 <ADC_setup+0x8c>)
  40053a:	4798      	blx	r3
	
}
  40053c:	bf00      	nop
  40053e:	370c      	adds	r7, #12
  400540:	46bd      	mov	sp, r7
  400542:	bd90      	pop	{r4, r7, pc}
  400544:	00401979 	.word	0x00401979
  400548:	005b8d80 	.word	0x005b8d80
  40054c:	004004d1 	.word	0x004004d1
  400550:	40038000 	.word	0x40038000
  400554:	00400139 	.word	0x00400139
  400558:	004001c9 	.word	0x004001c9
  40055c:	0040019b 	.word	0x0040019b
  400560:	0040021f 	.word	0x0040021f
  400564:	00400411 	.word	0x00400411
  400568:	00400207 	.word	0x00400207
  40056c:	20000454 	.word	0x20000454
  400570:	004005c9 	.word	0x004005c9

00400574 <audio_capture>:

void audio_capture(void){
  400574:	b580      	push	{r7, lr}
  400576:	af00      	add	r7, sp, #0
	rec_done = 0;
  400578:	4b0d      	ldr	r3, [pc, #52]	; (4005b0 <audio_capture+0x3c>)
  40057a:	2200      	movs	r2, #0
  40057c:	701a      	strb	r2, [r3, #0]
	buf_index = 0;
  40057e:	4b0d      	ldr	r3, [pc, #52]	; (4005b4 <audio_capture+0x40>)
  400580:	2200      	movs	r2, #0
  400582:	601a      	str	r2, [r3, #0]
	
	adc_enable_interrupt(ADC, ADC_ISR_RXBUFF);
  400584:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400588:	480b      	ldr	r0, [pc, #44]	; (4005b8 <audio_capture+0x44>)
  40058a:	4b0c      	ldr	r3, [pc, #48]	; (4005bc <audio_capture+0x48>)
  40058c:	4798      	blx	r3
	
	while (!rec_done){
  40058e:	e002      	b.n	400596 <audio_capture+0x22>
		blink_LED(200);
  400590:	20c8      	movs	r0, #200	; 0xc8
  400592:	4b0b      	ldr	r3, [pc, #44]	; (4005c0 <audio_capture+0x4c>)
  400594:	4798      	blx	r3
	while (!rec_done){
  400596:	4b06      	ldr	r3, [pc, #24]	; (4005b0 <audio_capture+0x3c>)
  400598:	781b      	ldrb	r3, [r3, #0]
  40059a:	b2db      	uxtb	r3, r3
  40059c:	2b00      	cmp	r3, #0
  40059e:	d0f7      	beq.n	400590 <audio_capture+0x1c>
	}
	
	adc_disable_interrupt(ADC,ADC_ISR_RXBUFF);
  4005a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005a4:	4804      	ldr	r0, [pc, #16]	; (4005b8 <audio_capture+0x44>)
  4005a6:	4b07      	ldr	r3, [pc, #28]	; (4005c4 <audio_capture+0x50>)
  4005a8:	4798      	blx	r3
}
  4005aa:	bf00      	nop
  4005ac:	bd80      	pop	{r7, pc}
  4005ae:	bf00      	nop
  4005b0:	20001408 	.word	0x20001408
  4005b4:	2000140c 	.word	0x2000140c
  4005b8:	40038000 	.word	0x40038000
  4005bc:	00400243 	.word	0x00400243
  4005c0:	00400cf1 	.word	0x00400cf1
  4005c4:	0040025d 	.word	0x0040025d

004005c8 <adc_read_buffer>:

static uint32_t adc_read_buffer(Adc * pADC, int16_t * multisample_buffer, uint32_t multisample_buffer_size)
{
  4005c8:	b480      	push	{r7}
  4005ca:	b085      	sub	sp, #20
  4005cc:	af00      	add	r7, sp, #0
  4005ce:	60f8      	str	r0, [r7, #12]
  4005d0:	60b9      	str	r1, [r7, #8]
  4005d2:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free. */
	if ((pADC->ADC_RCR == 0) && (pADC->ADC_RNCR == 0)) {
  4005d4:	68fb      	ldr	r3, [r7, #12]
  4005d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  4005da:	2b00      	cmp	r3, #0
  4005dc:	d112      	bne.n	400604 <adc_read_buffer+0x3c>
  4005de:	68fb      	ldr	r3, [r7, #12]
  4005e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4005e4:	2b00      	cmp	r3, #0
  4005e6:	d10d      	bne.n	400604 <adc_read_buffer+0x3c>
		pADC->ADC_RPR = (uint32_t) multisample_buffer;
  4005e8:	68ba      	ldr	r2, [r7, #8]
  4005ea:	68fb      	ldr	r3, [r7, #12]
  4005ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		pADC->ADC_RCR = multisample_buffer_size;
  4005f0:	68fb      	ldr	r3, [r7, #12]
  4005f2:	687a      	ldr	r2, [r7, #4]
  4005f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		pADC->ADC_PTCR = ADC_PTCR_RXTEN;
  4005f8:	68fb      	ldr	r3, [r7, #12]
  4005fa:	2201      	movs	r2, #1
  4005fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

		return 1;
  400600:	2301      	movs	r3, #1
  400602:	e00f      	b.n	400624 <adc_read_buffer+0x5c>
		} else {	/* Check if the second PDC bank is free. */
		if (pADC->ADC_RNCR == 0) {
  400604:	68fb      	ldr	r3, [r7, #12]
  400606:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40060a:	2b00      	cmp	r3, #0
  40060c:	d109      	bne.n	400622 <adc_read_buffer+0x5a>
			pADC->ADC_RNPR = (uint32_t) multisample_buffer;
  40060e:	68ba      	ldr	r2, [r7, #8]
  400610:	68fb      	ldr	r3, [r7, #12]
  400612:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			pADC->ADC_RNCR = multisample_buffer_size;
  400616:	68fb      	ldr	r3, [r7, #12]
  400618:	687a      	ldr	r2, [r7, #4]
  40061a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			return 1;
  40061e:	2301      	movs	r3, #1
  400620:	e000      	b.n	400624 <adc_read_buffer+0x5c>
			} else {
			return 0;
  400622:	2300      	movs	r3, #0
		}
	}
}
  400624:	4618      	mov	r0, r3
  400626:	3714      	adds	r7, #20
  400628:	46bd      	mov	sp, r7
  40062a:	bc80      	pop	{r7}
  40062c:	4770      	bx	lr
	...

00400630 <ADC_Handler>:

/**
 * \brief ADC interrupt handler.
 */
void ADC_Handler(void)
{
  400630:	b580      	push	{r7, lr}
  400632:	b084      	sub	sp, #16
  400634:	af00      	add	r7, sp, #0

	adc_disable_interrupt(ADC, ADC_ISR_RXBUFF);
  400636:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40063a:	482b      	ldr	r0, [pc, #172]	; (4006e8 <ADC_Handler+0xb8>)
  40063c:	4b2b      	ldr	r3, [pc, #172]	; (4006ec <ADC_Handler+0xbc>)
  40063e:	4798      	blx	r3
	
	uint32_t multisample_sum = 0;
  400640:	2300      	movs	r3, #0
  400642:	60fb      	str	r3, [r7, #12]
	uint32_t sample_millivolts;

	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
  400644:	4828      	ldr	r0, [pc, #160]	; (4006e8 <ADC_Handler+0xb8>)
  400646:	4b2a      	ldr	r3, [pc, #168]	; (4006f0 <ADC_Handler+0xc0>)
  400648:	4798      	blx	r3
  40064a:	4603      	mov	r3, r0
  40064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  400650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400654:	d140      	bne.n	4006d8 <ADC_Handler+0xa8>

		/* Multisample */
		for (int i = 0; i < MULTISAMPLE_SIZE; i++) {
  400656:	2300      	movs	r3, #0
  400658:	60bb      	str	r3, [r7, #8]
  40065a:	e00b      	b.n	400674 <ADC_Handler+0x44>
			multisample_sum += multisample_buf[i];
  40065c:	4a25      	ldr	r2, [pc, #148]	; (4006f4 <ADC_Handler+0xc4>)
  40065e:	68bb      	ldr	r3, [r7, #8]
  400660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  400664:	b29b      	uxth	r3, r3
  400666:	461a      	mov	r2, r3
  400668:	68fb      	ldr	r3, [r7, #12]
  40066a:	4413      	add	r3, r2
  40066c:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < MULTISAMPLE_SIZE; i++) {
  40066e:	68bb      	ldr	r3, [r7, #8]
  400670:	3301      	adds	r3, #1
  400672:	60bb      	str	r3, [r7, #8]
  400674:	68bb      	ldr	r3, [r7, #8]
  400676:	2b09      	cmp	r3, #9
  400678:	ddf0      	ble.n	40065c <ADC_Handler+0x2c>
		}
		/* Averaging */
		uint32_t sample_val = multisample_sum / MULTISAMPLE_SIZE;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	4a1e      	ldr	r2, [pc, #120]	; (4006f8 <ADC_Handler+0xc8>)
  40067e:	fba2 2303 	umull	r2, r3, r2, r3
  400682:	08db      	lsrs	r3, r3, #3
  400684:	607b      	str	r3, [r7, #4]

		sample_millivolts = sample_val * VOLT_REF / MAX_DIGITAL;
  400686:	687b      	ldr	r3, [r7, #4]
  400688:	f640 42e4 	movw	r2, #3300	; 0xce4
  40068c:	fb02 f203 	mul.w	r2, r2, r3
  400690:	4b1a      	ldr	r3, [pc, #104]	; (4006fc <ADC_Handler+0xcc>)
  400692:	fba3 1302 	umull	r1, r3, r3, r2
  400696:	1ad2      	subs	r2, r2, r3
  400698:	0852      	lsrs	r2, r2, #1
  40069a:	4413      	add	r3, r2
  40069c:	0adb      	lsrs	r3, r3, #11
  40069e:	603b      	str	r3, [r7, #0]

		rec_buff[buf_index++] = sample_millivolts;
  4006a0:	4b17      	ldr	r3, [pc, #92]	; (400700 <ADC_Handler+0xd0>)
  4006a2:	681b      	ldr	r3, [r3, #0]
  4006a4:	1c5a      	adds	r2, r3, #1
  4006a6:	4916      	ldr	r1, [pc, #88]	; (400700 <ADC_Handler+0xd0>)
  4006a8:	600a      	str	r2, [r1, #0]
  4006aa:	4916      	ldr	r1, [pc, #88]	; (400704 <ADC_Handler+0xd4>)
  4006ac:	683a      	ldr	r2, [r7, #0]
  4006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		
		if(buf_index >= BUFFER_SIZE){
  4006b2:	4b13      	ldr	r3, [pc, #76]	; (400700 <ADC_Handler+0xd0>)
  4006b4:	681b      	ldr	r3, [r3, #0]
  4006b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4006ba:	d303      	bcc.n	4006c4 <ADC_Handler+0x94>
			rec_done = 1;
  4006bc:	4b12      	ldr	r3, [pc, #72]	; (400708 <ADC_Handler+0xd8>)
  4006be:	2201      	movs	r2, #1
  4006c0:	701a      	strb	r2, [r3, #0]
			return;
  4006c2:	e00e      	b.n	4006e2 <ADC_Handler+0xb2>
		}
		//f_temp = (float)(l_vol - 800) * 0.37736 + 27.0;

		/* Clear the buffer. */
		memset(multisample_buf, 0x0, MULTISAMPLE_SIZE);
  4006c4:	220a      	movs	r2, #10
  4006c6:	2100      	movs	r1, #0
  4006c8:	480a      	ldr	r0, [pc, #40]	; (4006f4 <ADC_Handler+0xc4>)
  4006ca:	4b10      	ldr	r3, [pc, #64]	; (40070c <ADC_Handler+0xdc>)
  4006cc:	4798      	blx	r3
		/* Start new pdc transfer. */
		adc_read_buffer(ADC, multisample_buf, MULTISAMPLE_SIZE);
  4006ce:	220a      	movs	r2, #10
  4006d0:	4908      	ldr	r1, [pc, #32]	; (4006f4 <ADC_Handler+0xc4>)
  4006d2:	4805      	ldr	r0, [pc, #20]	; (4006e8 <ADC_Handler+0xb8>)
  4006d4:	4b0e      	ldr	r3, [pc, #56]	; (400710 <ADC_Handler+0xe0>)
  4006d6:	4798      	blx	r3
	}
	adc_enable_interrupt(ADC, ADC_ISR_RXBUFF);
  4006d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006dc:	4802      	ldr	r0, [pc, #8]	; (4006e8 <ADC_Handler+0xb8>)
  4006de:	4b0d      	ldr	r3, [pc, #52]	; (400714 <ADC_Handler+0xe4>)
  4006e0:	4798      	blx	r3
}
  4006e2:	3710      	adds	r7, #16
  4006e4:	46bd      	mov	sp, r7
  4006e6:	bd80      	pop	{r7, pc}
  4006e8:	40038000 	.word	0x40038000
  4006ec:	0040025d 	.word	0x0040025d
  4006f0:	00400277 	.word	0x00400277
  4006f4:	20000454 	.word	0x20000454
  4006f8:	cccccccd 	.word	0xcccccccd
  4006fc:	00100101 	.word	0x00100101
  400700:	2000140c 	.word	0x2000140c
  400704:	20000468 	.word	0x20000468
  400708:	20001408 	.word	0x20001408
  40070c:	0040242d 	.word	0x0040242d
  400710:	004005c9 	.word	0x004005c9
  400714:	00400243 	.word	0x00400243

00400718 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400718:	b580      	push	{r7, lr}
  40071a:	b084      	sub	sp, #16
  40071c:	af00      	add	r7, sp, #0
  40071e:	6078      	str	r0, [r7, #4]
  400720:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400722:	6878      	ldr	r0, [r7, #4]
  400724:	4b2c      	ldr	r3, [pc, #176]	; (4007d8 <pio_handler_process+0xc0>)
  400726:	4798      	blx	r3
  400728:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40072a:	6878      	ldr	r0, [r7, #4]
  40072c:	4b2b      	ldr	r3, [pc, #172]	; (4007dc <pio_handler_process+0xc4>)
  40072e:	4798      	blx	r3
  400730:	4602      	mov	r2, r0
  400732:	68fb      	ldr	r3, [r7, #12]
  400734:	4013      	ands	r3, r2
  400736:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400738:	68fb      	ldr	r3, [r7, #12]
  40073a:	2b00      	cmp	r3, #0
  40073c:	d03c      	beq.n	4007b8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40073e:	2300      	movs	r3, #0
  400740:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400742:	e034      	b.n	4007ae <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400744:	4a26      	ldr	r2, [pc, #152]	; (4007e0 <pio_handler_process+0xc8>)
  400746:	68bb      	ldr	r3, [r7, #8]
  400748:	011b      	lsls	r3, r3, #4
  40074a:	4413      	add	r3, r2
  40074c:	681a      	ldr	r2, [r3, #0]
  40074e:	683b      	ldr	r3, [r7, #0]
  400750:	429a      	cmp	r2, r3
  400752:	d126      	bne.n	4007a2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400754:	4a22      	ldr	r2, [pc, #136]	; (4007e0 <pio_handler_process+0xc8>)
  400756:	68bb      	ldr	r3, [r7, #8]
  400758:	011b      	lsls	r3, r3, #4
  40075a:	4413      	add	r3, r2
  40075c:	3304      	adds	r3, #4
  40075e:	681a      	ldr	r2, [r3, #0]
  400760:	68fb      	ldr	r3, [r7, #12]
  400762:	4013      	ands	r3, r2
  400764:	2b00      	cmp	r3, #0
  400766:	d01c      	beq.n	4007a2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400768:	4a1d      	ldr	r2, [pc, #116]	; (4007e0 <pio_handler_process+0xc8>)
  40076a:	68bb      	ldr	r3, [r7, #8]
  40076c:	011b      	lsls	r3, r3, #4
  40076e:	4413      	add	r3, r2
  400770:	330c      	adds	r3, #12
  400772:	681b      	ldr	r3, [r3, #0]
  400774:	491a      	ldr	r1, [pc, #104]	; (4007e0 <pio_handler_process+0xc8>)
  400776:	68ba      	ldr	r2, [r7, #8]
  400778:	0112      	lsls	r2, r2, #4
  40077a:	440a      	add	r2, r1
  40077c:	6810      	ldr	r0, [r2, #0]
  40077e:	4918      	ldr	r1, [pc, #96]	; (4007e0 <pio_handler_process+0xc8>)
  400780:	68ba      	ldr	r2, [r7, #8]
  400782:	0112      	lsls	r2, r2, #4
  400784:	440a      	add	r2, r1
  400786:	3204      	adds	r2, #4
  400788:	6812      	ldr	r2, [r2, #0]
  40078a:	4611      	mov	r1, r2
  40078c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40078e:	4a14      	ldr	r2, [pc, #80]	; (4007e0 <pio_handler_process+0xc8>)
  400790:	68bb      	ldr	r3, [r7, #8]
  400792:	011b      	lsls	r3, r3, #4
  400794:	4413      	add	r3, r2
  400796:	3304      	adds	r3, #4
  400798:	681b      	ldr	r3, [r3, #0]
  40079a:	43db      	mvns	r3, r3
  40079c:	68fa      	ldr	r2, [r7, #12]
  40079e:	4013      	ands	r3, r2
  4007a0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4007a2:	68bb      	ldr	r3, [r7, #8]
  4007a4:	3301      	adds	r3, #1
  4007a6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007a8:	68bb      	ldr	r3, [r7, #8]
  4007aa:	2b06      	cmp	r3, #6
  4007ac:	d803      	bhi.n	4007b6 <pio_handler_process+0x9e>
		while (status != 0) {
  4007ae:	68fb      	ldr	r3, [r7, #12]
  4007b0:	2b00      	cmp	r3, #0
  4007b2:	d1c7      	bne.n	400744 <pio_handler_process+0x2c>
  4007b4:	e000      	b.n	4007b8 <pio_handler_process+0xa0>
				break;
  4007b6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4007b8:	4b0a      	ldr	r3, [pc, #40]	; (4007e4 <pio_handler_process+0xcc>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	2b00      	cmp	r3, #0
  4007be:	d007      	beq.n	4007d0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4007c0:	4b09      	ldr	r3, [pc, #36]	; (4007e8 <pio_handler_process+0xd0>)
  4007c2:	681b      	ldr	r3, [r3, #0]
  4007c4:	2b00      	cmp	r3, #0
  4007c6:	d003      	beq.n	4007d0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4007c8:	4b07      	ldr	r3, [pc, #28]	; (4007e8 <pio_handler_process+0xd0>)
  4007ca:	681b      	ldr	r3, [r3, #0]
  4007cc:	6878      	ldr	r0, [r7, #4]
  4007ce:	4798      	blx	r3
		}
	}
#endif
}
  4007d0:	bf00      	nop
  4007d2:	3710      	adds	r7, #16
  4007d4:	46bd      	mov	sp, r7
  4007d6:	bd80      	pop	{r7, pc}
  4007d8:	0040152b 	.word	0x0040152b
  4007dc:	00401541 	.word	0x00401541
  4007e0:	20001410 	.word	0x20001410
  4007e4:	20001690 	.word	0x20001690
  4007e8:	20001480 	.word	0x20001480

004007ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007ec:	b580      	push	{r7, lr}
  4007ee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4007f0:	210b      	movs	r1, #11
  4007f2:	4802      	ldr	r0, [pc, #8]	; (4007fc <PIOA_Handler+0x10>)
  4007f4:	4b02      	ldr	r3, [pc, #8]	; (400800 <PIOA_Handler+0x14>)
  4007f6:	4798      	blx	r3
}
  4007f8:	bf00      	nop
  4007fa:	bd80      	pop	{r7, pc}
  4007fc:	400e0e00 	.word	0x400e0e00
  400800:	00400719 	.word	0x00400719

00400804 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400804:	b580      	push	{r7, lr}
  400806:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400808:	210c      	movs	r1, #12
  40080a:	4802      	ldr	r0, [pc, #8]	; (400814 <PIOB_Handler+0x10>)
  40080c:	4b02      	ldr	r3, [pc, #8]	; (400818 <PIOB_Handler+0x14>)
  40080e:	4798      	blx	r3
}
  400810:	bf00      	nop
  400812:	bd80      	pop	{r7, pc}
  400814:	400e1000 	.word	0x400e1000
  400818:	00400719 	.word	0x00400719

0040081c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40081c:	b480      	push	{r7}
  40081e:	b083      	sub	sp, #12
  400820:	af00      	add	r7, sp, #0
  400822:	6078      	str	r0, [r7, #4]
  400824:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400826:	687b      	ldr	r3, [r7, #4]
  400828:	683a      	ldr	r2, [r7, #0]
  40082a:	609a      	str	r2, [r3, #8]
}
  40082c:	bf00      	nop
  40082e:	370c      	adds	r7, #12
  400830:	46bd      	mov	sp, r7
  400832:	bc80      	pop	{r7}
  400834:	4770      	bx	lr

00400836 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400836:	b480      	push	{r7}
  400838:	b083      	sub	sp, #12
  40083a:	af00      	add	r7, sp, #0
  40083c:	6078      	str	r0, [r7, #4]
  40083e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400840:	687b      	ldr	r3, [r7, #4]
  400842:	683a      	ldr	r2, [r7, #0]
  400844:	60da      	str	r2, [r3, #12]
}
  400846:	bf00      	nop
  400848:	370c      	adds	r7, #12
  40084a:	46bd      	mov	sp, r7
  40084c:	bc80      	pop	{r7}
  40084e:	4770      	bx	lr

00400850 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400850:	b480      	push	{r7}
  400852:	b083      	sub	sp, #12
  400854:	af00      	add	r7, sp, #0
  400856:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400858:	687b      	ldr	r3, [r7, #4]
  40085a:	695b      	ldr	r3, [r3, #20]
}
  40085c:	4618      	mov	r0, r3
  40085e:	370c      	adds	r7, #12
  400860:	46bd      	mov	sp, r7
  400862:	bc80      	pop	{r7}
  400864:	4770      	bx	lr

00400866 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400866:	b480      	push	{r7}
  400868:	b083      	sub	sp, #12
  40086a:	af00      	add	r7, sp, #0
  40086c:	6078      	str	r0, [r7, #4]
  40086e:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400870:	bf00      	nop
  400872:	687b      	ldr	r3, [r7, #4]
  400874:	695b      	ldr	r3, [r3, #20]
  400876:	f003 0302 	and.w	r3, r3, #2
  40087a:	2b00      	cmp	r3, #0
  40087c:	d0f9      	beq.n	400872 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40087e:	683b      	ldr	r3, [r7, #0]
  400880:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400884:	687b      	ldr	r3, [r7, #4]
  400886:	61da      	str	r2, [r3, #28]

	return 0;
  400888:	2300      	movs	r3, #0
}
  40088a:	4618      	mov	r0, r3
  40088c:	370c      	adds	r7, #12
  40088e:	46bd      	mov	sp, r7
  400890:	bc80      	pop	{r7}
  400892:	4770      	bx	lr

00400894 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400894:	b580      	push	{r7, lr}
  400896:	b082      	sub	sp, #8
  400898:	af00      	add	r7, sp, #0
  40089a:	6078      	str	r0, [r7, #4]
  40089c:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  40089e:	e007      	b.n	4008b0 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4008a0:	683b      	ldr	r3, [r7, #0]
  4008a2:	1c5a      	adds	r2, r3, #1
  4008a4:	603a      	str	r2, [r7, #0]
  4008a6:	781b      	ldrb	r3, [r3, #0]
  4008a8:	4619      	mov	r1, r3
  4008aa:	6878      	ldr	r0, [r7, #4]
  4008ac:	4b04      	ldr	r3, [pc, #16]	; (4008c0 <usart_write_line+0x2c>)
  4008ae:	4798      	blx	r3
	while (*string != '\0') {
  4008b0:	683b      	ldr	r3, [r7, #0]
  4008b2:	781b      	ldrb	r3, [r3, #0]
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d1f3      	bne.n	4008a0 <usart_write_line+0xc>
	}
}
  4008b8:	bf00      	nop
  4008ba:	3708      	adds	r7, #8
  4008bc:	46bd      	mov	sp, r7
  4008be:	bd80      	pop	{r7, pc}
  4008c0:	00400867 	.word	0x00400867

004008c4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4008c4:	b480      	push	{r7}
  4008c6:	b083      	sub	sp, #12
  4008c8:	af00      	add	r7, sp, #0
  4008ca:	6078      	str	r0, [r7, #4]
  4008cc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4008ce:	687b      	ldr	r3, [r7, #4]
  4008d0:	695b      	ldr	r3, [r3, #20]
  4008d2:	f003 0301 	and.w	r3, r3, #1
  4008d6:	2b00      	cmp	r3, #0
  4008d8:	d101      	bne.n	4008de <usart_read+0x1a>
		return 1;
  4008da:	2301      	movs	r3, #1
  4008dc:	e006      	b.n	4008ec <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4008de:	687b      	ldr	r3, [r7, #4]
  4008e0:	699b      	ldr	r3, [r3, #24]
  4008e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4008e6:	683b      	ldr	r3, [r7, #0]
  4008e8:	601a      	str	r2, [r3, #0]

	return 0;
  4008ea:	2300      	movs	r3, #0
}
  4008ec:	4618      	mov	r0, r3
  4008ee:	370c      	adds	r7, #12
  4008f0:	46bd      	mov	sp, r7
  4008f2:	bc80      	pop	{r7}
  4008f4:	4770      	bx	lr
	...

004008f8 <NVIC_EnableIRQ>:
{
  4008f8:	b480      	push	{r7}
  4008fa:	b083      	sub	sp, #12
  4008fc:	af00      	add	r7, sp, #0
  4008fe:	4603      	mov	r3, r0
  400900:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400902:	4908      	ldr	r1, [pc, #32]	; (400924 <NVIC_EnableIRQ+0x2c>)
  400904:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400908:	095b      	lsrs	r3, r3, #5
  40090a:	79fa      	ldrb	r2, [r7, #7]
  40090c:	f002 021f 	and.w	r2, r2, #31
  400910:	2001      	movs	r0, #1
  400912:	fa00 f202 	lsl.w	r2, r0, r2
  400916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40091a:	bf00      	nop
  40091c:	370c      	adds	r7, #12
  40091e:	46bd      	mov	sp, r7
  400920:	bc80      	pop	{r7}
  400922:	4770      	bx	lr
  400924:	e000e100 	.word	0xe000e100

00400928 <osc_get_rate>:
{
  400928:	b480      	push	{r7}
  40092a:	b083      	sub	sp, #12
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	2b07      	cmp	r3, #7
  400934:	d825      	bhi.n	400982 <osc_get_rate+0x5a>
  400936:	a201      	add	r2, pc, #4	; (adr r2, 40093c <osc_get_rate+0x14>)
  400938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40093c:	0040095d 	.word	0x0040095d
  400940:	00400963 	.word	0x00400963
  400944:	00400969 	.word	0x00400969
  400948:	0040096f 	.word	0x0040096f
  40094c:	00400973 	.word	0x00400973
  400950:	00400977 	.word	0x00400977
  400954:	0040097b 	.word	0x0040097b
  400958:	0040097f 	.word	0x0040097f
		return OSC_SLCK_32K_RC_HZ;
  40095c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400960:	e010      	b.n	400984 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400966:	e00d      	b.n	400984 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40096c:	e00a      	b.n	400984 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40096e:	4b08      	ldr	r3, [pc, #32]	; (400990 <osc_get_rate+0x68>)
  400970:	e008      	b.n	400984 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400972:	4b08      	ldr	r3, [pc, #32]	; (400994 <osc_get_rate+0x6c>)
  400974:	e006      	b.n	400984 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400976:	4b08      	ldr	r3, [pc, #32]	; (400998 <osc_get_rate+0x70>)
  400978:	e004      	b.n	400984 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40097a:	4b07      	ldr	r3, [pc, #28]	; (400998 <osc_get_rate+0x70>)
  40097c:	e002      	b.n	400984 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40097e:	4b06      	ldr	r3, [pc, #24]	; (400998 <osc_get_rate+0x70>)
  400980:	e000      	b.n	400984 <osc_get_rate+0x5c>
	return 0;
  400982:	2300      	movs	r3, #0
}
  400984:	4618      	mov	r0, r3
  400986:	370c      	adds	r7, #12
  400988:	46bd      	mov	sp, r7
  40098a:	bc80      	pop	{r7}
  40098c:	4770      	bx	lr
  40098e:	bf00      	nop
  400990:	003d0900 	.word	0x003d0900
  400994:	007a1200 	.word	0x007a1200
  400998:	00b71b00 	.word	0x00b71b00

0040099c <sysclk_get_main_hz>:
{
  40099c:	b580      	push	{r7, lr}
  40099e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4009a0:	2006      	movs	r0, #6
  4009a2:	4b04      	ldr	r3, [pc, #16]	; (4009b4 <sysclk_get_main_hz+0x18>)
  4009a4:	4798      	blx	r3
  4009a6:	4602      	mov	r2, r0
  4009a8:	4613      	mov	r3, r2
  4009aa:	009b      	lsls	r3, r3, #2
  4009ac:	4413      	add	r3, r2
  4009ae:	009b      	lsls	r3, r3, #2
}
  4009b0:	4618      	mov	r0, r3
  4009b2:	bd80      	pop	{r7, pc}
  4009b4:	00400929 	.word	0x00400929

004009b8 <sysclk_get_cpu_hz>:
{
  4009b8:	b580      	push	{r7, lr}
  4009ba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4009bc:	4b02      	ldr	r3, [pc, #8]	; (4009c8 <sysclk_get_cpu_hz+0x10>)
  4009be:	4798      	blx	r3
  4009c0:	4603      	mov	r3, r0
  4009c2:	085b      	lsrs	r3, r3, #1
}
  4009c4:	4618      	mov	r0, r3
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	0040099d 	.word	0x0040099d

004009cc <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  4009cc:	b580      	push	{r7, lr}
  4009ce:	b082      	sub	sp, #8
  4009d0:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  4009d2:	2100      	movs	r1, #0
  4009d4:	4809      	ldr	r0, [pc, #36]	; (4009fc <TC0_Handler+0x30>)
  4009d6:	4b0a      	ldr	r3, [pc, #40]	; (400a00 <TC0_Handler+0x34>)
  4009d8:	4798      	blx	r3
  4009da:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4009dc:	687b      	ldr	r3, [r7, #4]
  4009de:	f003 0310 	and.w	r3, r3, #16
  4009e2:	2b00      	cmp	r3, #0
  4009e4:	d006      	beq.n	4009f4 <TC0_Handler+0x28>
		counts++;
  4009e6:	4b07      	ldr	r3, [pc, #28]	; (400a04 <TC0_Handler+0x38>)
  4009e8:	781b      	ldrb	r3, [r3, #0]
  4009ea:	b2db      	uxtb	r3, r3
  4009ec:	3301      	adds	r3, #1
  4009ee:	b2da      	uxtb	r2, r3
  4009f0:	4b04      	ldr	r3, [pc, #16]	; (400a04 <TC0_Handler+0x38>)
  4009f2:	701a      	strb	r2, [r3, #0]
	}
}
  4009f4:	bf00      	nop
  4009f6:	3708      	adds	r7, #8
  4009f8:	46bd      	mov	sp, r7
  4009fa:	bd80      	pop	{r7, pc}
  4009fc:	40010000 	.word	0x40010000
  400a00:	0040032f 	.word	0x0040032f
  400a04:	2000168c 	.word	0x2000168c

00400a08 <configure_tc>:

void configure_tc(void)
{
  400a08:	b590      	push	{r4, r7, lr}
  400a0a:	b087      	sub	sp, #28
  400a0c:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400a0e:	4b16      	ldr	r3, [pc, #88]	; (400a68 <configure_tc+0x60>)
  400a10:	4798      	blx	r3
  400a12:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400a14:	2017      	movs	r0, #23
  400a16:	4b15      	ldr	r3, [pc, #84]	; (400a6c <configure_tc+0x64>)
  400a18:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400a1a:	1d39      	adds	r1, r7, #4
  400a1c:	f107 0208 	add.w	r2, r7, #8
  400a20:	68fb      	ldr	r3, [r7, #12]
  400a22:	9300      	str	r3, [sp, #0]
  400a24:	460b      	mov	r3, r1
  400a26:	68f9      	ldr	r1, [r7, #12]
  400a28:	2001      	movs	r0, #1
  400a2a:	4c11      	ldr	r4, [pc, #68]	; (400a70 <configure_tc+0x68>)
  400a2c:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400a2e:	687b      	ldr	r3, [r7, #4]
  400a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400a34:	461a      	mov	r2, r3
  400a36:	2100      	movs	r1, #0
  400a38:	480e      	ldr	r0, [pc, #56]	; (400a74 <configure_tc+0x6c>)
  400a3a:	4b0f      	ldr	r3, [pc, #60]	; (400a78 <configure_tc+0x70>)
  400a3c:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400a3e:	68bb      	ldr	r3, [r7, #8]
  400a40:	68fa      	ldr	r2, [r7, #12]
  400a42:	fbb2 f3f3 	udiv	r3, r2, r3
  400a46:	461a      	mov	r2, r3
  400a48:	2100      	movs	r1, #0
  400a4a:	480a      	ldr	r0, [pc, #40]	; (400a74 <configure_tc+0x6c>)
  400a4c:	4b0b      	ldr	r3, [pc, #44]	; (400a7c <configure_tc+0x74>)
  400a4e:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400a50:	2017      	movs	r0, #23
  400a52:	4b0b      	ldr	r3, [pc, #44]	; (400a80 <configure_tc+0x78>)
  400a54:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400a56:	2210      	movs	r2, #16
  400a58:	2100      	movs	r1, #0
  400a5a:	4806      	ldr	r0, [pc, #24]	; (400a74 <configure_tc+0x6c>)
  400a5c:	4b09      	ldr	r3, [pc, #36]	; (400a84 <configure_tc+0x7c>)
  400a5e:	4798      	blx	r3
  400a60:	bf00      	nop
  400a62:	3714      	adds	r7, #20
  400a64:	46bd      	mov	sp, r7
  400a66:	bd90      	pop	{r4, r7, pc}
  400a68:	004009b9 	.word	0x004009b9
  400a6c:	00401979 	.word	0x00401979
  400a70:	00400351 	.word	0x00400351
  400a74:	40010000 	.word	0x40010000
  400a78:	0040028d 	.word	0x0040028d
  400a7c:	004002e5 	.word	0x004002e5
  400a80:	004008f9 	.word	0x004008f9
  400a84:	00400309 	.word	0x00400309

00400a88 <osc_get_rate>:
{
  400a88:	b480      	push	{r7}
  400a8a:	b083      	sub	sp, #12
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a90:	687b      	ldr	r3, [r7, #4]
  400a92:	2b07      	cmp	r3, #7
  400a94:	d825      	bhi.n	400ae2 <osc_get_rate+0x5a>
  400a96:	a201      	add	r2, pc, #4	; (adr r2, 400a9c <osc_get_rate+0x14>)
  400a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a9c:	00400abd 	.word	0x00400abd
  400aa0:	00400ac3 	.word	0x00400ac3
  400aa4:	00400ac9 	.word	0x00400ac9
  400aa8:	00400acf 	.word	0x00400acf
  400aac:	00400ad3 	.word	0x00400ad3
  400ab0:	00400ad7 	.word	0x00400ad7
  400ab4:	00400adb 	.word	0x00400adb
  400ab8:	00400adf 	.word	0x00400adf
		return OSC_SLCK_32K_RC_HZ;
  400abc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ac0:	e010      	b.n	400ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ac6:	e00d      	b.n	400ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400acc:	e00a      	b.n	400ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400ace:	4b08      	ldr	r3, [pc, #32]	; (400af0 <osc_get_rate+0x68>)
  400ad0:	e008      	b.n	400ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400ad2:	4b08      	ldr	r3, [pc, #32]	; (400af4 <osc_get_rate+0x6c>)
  400ad4:	e006      	b.n	400ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400ad6:	4b08      	ldr	r3, [pc, #32]	; (400af8 <osc_get_rate+0x70>)
  400ad8:	e004      	b.n	400ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400ada:	4b07      	ldr	r3, [pc, #28]	; (400af8 <osc_get_rate+0x70>)
  400adc:	e002      	b.n	400ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400ade:	4b06      	ldr	r3, [pc, #24]	; (400af8 <osc_get_rate+0x70>)
  400ae0:	e000      	b.n	400ae4 <osc_get_rate+0x5c>
	return 0;
  400ae2:	2300      	movs	r3, #0
}
  400ae4:	4618      	mov	r0, r3
  400ae6:	370c      	adds	r7, #12
  400ae8:	46bd      	mov	sp, r7
  400aea:	bc80      	pop	{r7}
  400aec:	4770      	bx	lr
  400aee:	bf00      	nop
  400af0:	003d0900 	.word	0x003d0900
  400af4:	007a1200 	.word	0x007a1200
  400af8:	00b71b00 	.word	0x00b71b00

00400afc <sysclk_get_main_hz>:
{
  400afc:	b580      	push	{r7, lr}
  400afe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400b00:	2006      	movs	r0, #6
  400b02:	4b04      	ldr	r3, [pc, #16]	; (400b14 <sysclk_get_main_hz+0x18>)
  400b04:	4798      	blx	r3
  400b06:	4602      	mov	r2, r0
  400b08:	4613      	mov	r3, r2
  400b0a:	009b      	lsls	r3, r3, #2
  400b0c:	4413      	add	r3, r2
  400b0e:	009b      	lsls	r3, r3, #2
}
  400b10:	4618      	mov	r0, r3
  400b12:	bd80      	pop	{r7, pc}
  400b14:	00400a89 	.word	0x00400a89

00400b18 <sysclk_get_cpu_hz>:
{
  400b18:	b580      	push	{r7, lr}
  400b1a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400b1c:	4b02      	ldr	r3, [pc, #8]	; (400b28 <sysclk_get_cpu_hz+0x10>)
  400b1e:	4798      	blx	r3
  400b20:	4603      	mov	r3, r0
  400b22:	085b      	lsrs	r3, r3, #1
}
  400b24:	4618      	mov	r0, r3
  400b26:	bd80      	pop	{r7, pc}
  400b28:	00400afd 	.word	0x00400afd

00400b2c <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400b2c:	b480      	push	{r7}
  400b2e:	b08b      	sub	sp, #44	; 0x2c
  400b30:	af00      	add	r7, sp, #0
  400b32:	6078      	str	r0, [r7, #4]
  400b34:	687b      	ldr	r3, [r7, #4]
  400b36:	627b      	str	r3, [r7, #36]	; 0x24
  400b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b3a:	623b      	str	r3, [r7, #32]
  400b3c:	6a3b      	ldr	r3, [r7, #32]
  400b3e:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400b40:	69fb      	ldr	r3, [r7, #28]
  400b42:	095b      	lsrs	r3, r3, #5
  400b44:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400b46:	69bb      	ldr	r3, [r7, #24]
  400b48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b50:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  400b52:	617b      	str	r3, [r7, #20]
  400b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b56:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400b58:	693b      	ldr	r3, [r7, #16]
  400b5a:	f003 031f 	and.w	r3, r3, #31
  400b5e:	2201      	movs	r2, #1
  400b60:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  400b64:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400b66:	697b      	ldr	r3, [r7, #20]
  400b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400b6c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400b6e:	68bb      	ldr	r3, [r7, #8]
  400b70:	f003 031f 	and.w	r3, r3, #31
  400b74:	2101      	movs	r1, #1
  400b76:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400b7a:	4013      	ands	r3, r2
  400b7c:	2b00      	cmp	r3, #0
  400b7e:	d003      	beq.n	400b88 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  400b80:	697b      	ldr	r3, [r7, #20]
  400b82:	68fa      	ldr	r2, [r7, #12]
  400b84:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  400b86:	e002      	b.n	400b8e <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  400b88:	697b      	ldr	r3, [r7, #20]
  400b8a:	68fa      	ldr	r2, [r7, #12]
  400b8c:	631a      	str	r2, [r3, #48]	; 0x30
  400b8e:	bf00      	nop
  400b90:	372c      	adds	r7, #44	; 0x2c
  400b92:	46bd      	mov	sp, r7
  400b94:	bc80      	pop	{r7}
  400b96:	4770      	bx	lr

00400b98 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  400b98:	b580      	push	{r7, lr}
  400b9a:	b082      	sub	sp, #8
  400b9c:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  400b9e:	2300      	movs	r3, #0
  400ba0:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  400ba2:	2101      	movs	r1, #1
  400ba4:	4815      	ldr	r0, [pc, #84]	; (400bfc <USART0_Handler+0x64>)
  400ba6:	4b16      	ldr	r3, [pc, #88]	; (400c00 <USART0_Handler+0x68>)
  400ba8:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  400baa:	4814      	ldr	r0, [pc, #80]	; (400bfc <USART0_Handler+0x64>)
  400bac:	4b15      	ldr	r3, [pc, #84]	; (400c04 <USART0_Handler+0x6c>)
  400bae:	4798      	blx	r3
  400bb0:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400bb2:	4915      	ldr	r1, [pc, #84]	; (400c08 <USART0_Handler+0x70>)
  400bb4:	4811      	ldr	r0, [pc, #68]	; (400bfc <USART0_Handler+0x64>)
  400bb6:	4b15      	ldr	r3, [pc, #84]	; (400c0c <USART0_Handler+0x74>)
  400bb8:	4798      	blx	r3
  400bba:	4603      	mov	r3, r0
  400bbc:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  400bbe:	683b      	ldr	r3, [r7, #0]
  400bc0:	f003 0301 	and.w	r3, r3, #1
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d011      	beq.n	400bec <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400bc8:	490f      	ldr	r1, [pc, #60]	; (400c08 <USART0_Handler+0x70>)
  400bca:	480c      	ldr	r0, [pc, #48]	; (400bfc <USART0_Handler+0x64>)
  400bcc:	4b0f      	ldr	r3, [pc, #60]	; (400c0c <USART0_Handler+0x74>)
  400bce:	4798      	blx	r3
  400bd0:	4603      	mov	r3, r0
  400bd2:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  400bd4:	4b0e      	ldr	r3, [pc, #56]	; (400c10 <USART0_Handler+0x78>)
  400bd6:	681b      	ldr	r3, [r3, #0]
  400bd8:	4a0b      	ldr	r2, [pc, #44]	; (400c08 <USART0_Handler+0x70>)
  400bda:	6812      	ldr	r2, [r2, #0]
  400bdc:	b2d1      	uxtb	r1, r2
  400bde:	4a0d      	ldr	r2, [pc, #52]	; (400c14 <USART0_Handler+0x7c>)
  400be0:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  400be2:	4b0b      	ldr	r3, [pc, #44]	; (400c10 <USART0_Handler+0x78>)
  400be4:	681b      	ldr	r3, [r3, #0]
  400be6:	3301      	adds	r3, #1
  400be8:	4a09      	ldr	r2, [pc, #36]	; (400c10 <USART0_Handler+0x78>)
  400bea:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400bec:	2101      	movs	r1, #1
  400bee:	4803      	ldr	r0, [pc, #12]	; (400bfc <USART0_Handler+0x64>)
  400bf0:	4b09      	ldr	r3, [pc, #36]	; (400c18 <USART0_Handler+0x80>)
  400bf2:	4798      	blx	r3
}
  400bf4:	bf00      	nop
  400bf6:	3708      	adds	r7, #8
  400bf8:	46bd      	mov	sp, r7
  400bfa:	bd80      	pop	{r7, pc}
  400bfc:	40024000 	.word	0x40024000
  400c00:	00400837 	.word	0x00400837
  400c04:	00400851 	.word	0x00400851
  400c08:	20001688 	.word	0x20001688
  400c0c:	004008c5 	.word	0x004008c5
  400c10:	20001678 	.word	0x20001678
  400c14:	20001484 	.word	0x20001484
  400c18:	0040081d 	.word	0x0040081d

00400c1c <write_wifi_command>:
}

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  400c1c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400c20:	b082      	sub	sp, #8
  400c22:	af00      	add	r7, sp, #0
  400c24:	6078      	str	r0, [r7, #4]
  400c26:	460b      	mov	r3, r1
  400c28:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  400c2a:	4b29      	ldr	r3, [pc, #164]	; (400cd0 <write_wifi_command+0xb4>)
  400c2c:	2200      	movs	r2, #0
  400c2e:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  400c30:	6879      	ldr	r1, [r7, #4]
  400c32:	4828      	ldr	r0, [pc, #160]	; (400cd4 <write_wifi_command+0xb8>)
  400c34:	4b28      	ldr	r3, [pc, #160]	; (400cd8 <write_wifi_command+0xbc>)
  400c36:	4798      	blx	r3
	
	timeout_counter = 0;
  400c38:	4b28      	ldr	r3, [pc, #160]	; (400cdc <write_wifi_command+0xc0>)
  400c3a:	2200      	movs	r2, #0
  400c3c:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  400c3e:	78fb      	ldrb	r3, [r7, #3]
  400c40:	461a      	mov	r2, r3
  400c42:	0092      	lsls	r2, r2, #2
  400c44:	4413      	add	r3, r2
  400c46:	009b      	lsls	r3, r3, #2
  400c48:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  400c4a:	e031      	b.n	400cb0 <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  400c4c:	4b24      	ldr	r3, [pc, #144]	; (400ce0 <write_wifi_command+0xc4>)
  400c4e:	4798      	blx	r3
  400c50:	4603      	mov	r3, r0
  400c52:	4619      	mov	r1, r3
  400c54:	f04f 0200 	mov.w	r2, #0
  400c58:	460b      	mov	r3, r1
  400c5a:	4614      	mov	r4, r2
  400c5c:	00a6      	lsls	r6, r4, #2
  400c5e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400c62:	009d      	lsls	r5, r3, #2
  400c64:	462b      	mov	r3, r5
  400c66:	4634      	mov	r4, r6
  400c68:	185b      	adds	r3, r3, r1
  400c6a:	eb44 0402 	adc.w	r4, r4, r2
  400c6e:	18db      	adds	r3, r3, r3
  400c70:	eb44 0404 	adc.w	r4, r4, r4
  400c74:	4619      	mov	r1, r3
  400c76:	4622      	mov	r2, r4
  400c78:	f243 63af 	movw	r3, #13999	; 0x36af
  400c7c:	f04f 0400 	mov.w	r4, #0
  400c80:	eb11 0b03 	adds.w	fp, r1, r3
  400c84:	eb42 0c04 	adc.w	ip, r2, r4
  400c88:	4658      	mov	r0, fp
  400c8a:	4661      	mov	r1, ip
  400c8c:	4c15      	ldr	r4, [pc, #84]	; (400ce4 <write_wifi_command+0xc8>)
  400c8e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400c92:	f04f 0300 	mov.w	r3, #0
  400c96:	47a0      	blx	r4
  400c98:	4603      	mov	r3, r0
  400c9a:	460c      	mov	r4, r1
  400c9c:	4618      	mov	r0, r3
  400c9e:	4b12      	ldr	r3, [pc, #72]	; (400ce8 <write_wifi_command+0xcc>)
  400ca0:	4798      	blx	r3
		timeout_counter++;
  400ca2:	4b0e      	ldr	r3, [pc, #56]	; (400cdc <write_wifi_command+0xc0>)
  400ca4:	781b      	ldrb	r3, [r3, #0]
  400ca6:	b2db      	uxtb	r3, r3
  400ca8:	3301      	adds	r3, #1
  400caa:	b2da      	uxtb	r2, r3
  400cac:	4b0b      	ldr	r3, [pc, #44]	; (400cdc <write_wifi_command+0xc0>)
  400cae:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  400cb0:	4b0a      	ldr	r3, [pc, #40]	; (400cdc <write_wifi_command+0xc0>)
  400cb2:	781b      	ldrb	r3, [r3, #0]
  400cb4:	b2db      	uxtb	r3, r3
  400cb6:	78fa      	ldrb	r2, [r7, #3]
  400cb8:	429a      	cmp	r2, r3
  400cba:	d903      	bls.n	400cc4 <write_wifi_command+0xa8>
  400cbc:	4b04      	ldr	r3, [pc, #16]	; (400cd0 <write_wifi_command+0xb4>)
  400cbe:	681b      	ldr	r3, [r3, #0]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d0c3      	beq.n	400c4c <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  400cc4:	bf00      	nop
  400cc6:	3708      	adds	r7, #8
  400cc8:	46bd      	mov	sp, r7
  400cca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400cce:	bf00      	nop
  400cd0:	20001680 	.word	0x20001680
  400cd4:	40024000 	.word	0x40024000
  400cd8:	00400895 	.word	0x00400895
  400cdc:	2000167c 	.word	0x2000167c
  400ce0:	00400b19 	.word	0x00400b19
  400ce4:	004020cd 	.word	0x004020cd
  400ce8:	20000001 	.word	0x20000001
  400cec:	00000000 	.word	0x00000000

00400cf0 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  400cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400cf2:	b083      	sub	sp, #12
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  400cf8:	687b      	ldr	r3, [r7, #4]
  400cfa:	2b00      	cmp	r3, #0
  400cfc:	d026      	beq.n	400d4c <blink_LED+0x5c>
  400cfe:	687b      	ldr	r3, [r7, #4]
  400d00:	461d      	mov	r5, r3
  400d02:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400d06:	4b66      	ldr	r3, [pc, #408]	; (400ea0 <blink_LED+0x1b0>)
  400d08:	4798      	blx	r3
  400d0a:	4603      	mov	r3, r0
  400d0c:	f04f 0400 	mov.w	r4, #0
  400d10:	fb03 f106 	mul.w	r1, r3, r6
  400d14:	fb05 f204 	mul.w	r2, r5, r4
  400d18:	440a      	add	r2, r1
  400d1a:	fba5 3403 	umull	r3, r4, r5, r3
  400d1e:	4422      	add	r2, r4
  400d20:	4614      	mov	r4, r2
  400d22:	f243 61af 	movw	r1, #13999	; 0x36af
  400d26:	f04f 0200 	mov.w	r2, #0
  400d2a:	185d      	adds	r5, r3, r1
  400d2c:	eb44 0602 	adc.w	r6, r4, r2
  400d30:	4628      	mov	r0, r5
  400d32:	4631      	mov	r1, r6
  400d34:	4c5b      	ldr	r4, [pc, #364]	; (400ea4 <blink_LED+0x1b4>)
  400d36:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400d3a:	f04f 0300 	mov.w	r3, #0
  400d3e:	47a0      	blx	r4
  400d40:	4603      	mov	r3, r0
  400d42:	460c      	mov	r4, r1
  400d44:	4618      	mov	r0, r3
  400d46:	4b58      	ldr	r3, [pc, #352]	; (400ea8 <blink_LED+0x1b8>)
  400d48:	4798      	blx	r3
  400d4a:	e016      	b.n	400d7a <blink_LED+0x8a>
  400d4c:	4b54      	ldr	r3, [pc, #336]	; (400ea0 <blink_LED+0x1b0>)
  400d4e:	4798      	blx	r3
  400d50:	4603      	mov	r3, r0
  400d52:	f04f 0400 	mov.w	r4, #0
  400d56:	a250      	add	r2, pc, #320	; (adr r2, 400e98 <blink_LED+0x1a8>)
  400d58:	e9d2 1200 	ldrd	r1, r2, [r2]
  400d5c:	185d      	adds	r5, r3, r1
  400d5e:	eb44 0602 	adc.w	r6, r4, r2
  400d62:	4628      	mov	r0, r5
  400d64:	4631      	mov	r1, r6
  400d66:	4c4f      	ldr	r4, [pc, #316]	; (400ea4 <blink_LED+0x1b4>)
  400d68:	4a50      	ldr	r2, [pc, #320]	; (400eac <blink_LED+0x1bc>)
  400d6a:	f04f 0300 	mov.w	r3, #0
  400d6e:	47a0      	blx	r4
  400d70:	4603      	mov	r3, r0
  400d72:	460c      	mov	r4, r1
  400d74:	4618      	mov	r0, r3
  400d76:	4b4c      	ldr	r3, [pc, #304]	; (400ea8 <blink_LED+0x1b8>)
  400d78:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400d7a:	2009      	movs	r0, #9
  400d7c:	4b4c      	ldr	r3, [pc, #304]	; (400eb0 <blink_LED+0x1c0>)
  400d7e:	4798      	blx	r3
	delay_ms(ms_blink);
  400d80:	687b      	ldr	r3, [r7, #4]
  400d82:	2b00      	cmp	r3, #0
  400d84:	d026      	beq.n	400dd4 <blink_LED+0xe4>
  400d86:	687b      	ldr	r3, [r7, #4]
  400d88:	461d      	mov	r5, r3
  400d8a:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400d8e:	4b44      	ldr	r3, [pc, #272]	; (400ea0 <blink_LED+0x1b0>)
  400d90:	4798      	blx	r3
  400d92:	4603      	mov	r3, r0
  400d94:	f04f 0400 	mov.w	r4, #0
  400d98:	fb03 f106 	mul.w	r1, r3, r6
  400d9c:	fb05 f204 	mul.w	r2, r5, r4
  400da0:	440a      	add	r2, r1
  400da2:	fba5 3403 	umull	r3, r4, r5, r3
  400da6:	4422      	add	r2, r4
  400da8:	4614      	mov	r4, r2
  400daa:	f243 61af 	movw	r1, #13999	; 0x36af
  400dae:	f04f 0200 	mov.w	r2, #0
  400db2:	185d      	adds	r5, r3, r1
  400db4:	eb44 0602 	adc.w	r6, r4, r2
  400db8:	4628      	mov	r0, r5
  400dba:	4631      	mov	r1, r6
  400dbc:	4c39      	ldr	r4, [pc, #228]	; (400ea4 <blink_LED+0x1b4>)
  400dbe:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400dc2:	f04f 0300 	mov.w	r3, #0
  400dc6:	47a0      	blx	r4
  400dc8:	4603      	mov	r3, r0
  400dca:	460c      	mov	r4, r1
  400dcc:	4618      	mov	r0, r3
  400dce:	4b36      	ldr	r3, [pc, #216]	; (400ea8 <blink_LED+0x1b8>)
  400dd0:	4798      	blx	r3
  400dd2:	e016      	b.n	400e02 <blink_LED+0x112>
  400dd4:	4b32      	ldr	r3, [pc, #200]	; (400ea0 <blink_LED+0x1b0>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
  400dda:	f04f 0400 	mov.w	r4, #0
  400dde:	a22e      	add	r2, pc, #184	; (adr r2, 400e98 <blink_LED+0x1a8>)
  400de0:	e9d2 1200 	ldrd	r1, r2, [r2]
  400de4:	185d      	adds	r5, r3, r1
  400de6:	eb44 0602 	adc.w	r6, r4, r2
  400dea:	4628      	mov	r0, r5
  400dec:	4631      	mov	r1, r6
  400dee:	4c2d      	ldr	r4, [pc, #180]	; (400ea4 <blink_LED+0x1b4>)
  400df0:	4a2e      	ldr	r2, [pc, #184]	; (400eac <blink_LED+0x1bc>)
  400df2:	f04f 0300 	mov.w	r3, #0
  400df6:	47a0      	blx	r4
  400df8:	4603      	mov	r3, r0
  400dfa:	460c      	mov	r4, r1
  400dfc:	4618      	mov	r0, r3
  400dfe:	4b2a      	ldr	r3, [pc, #168]	; (400ea8 <blink_LED+0x1b8>)
  400e00:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400e02:	2009      	movs	r0, #9
  400e04:	4b2a      	ldr	r3, [pc, #168]	; (400eb0 <blink_LED+0x1c0>)
  400e06:	4798      	blx	r3
	delay_ms(ms_blink);
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d026      	beq.n	400e5c <blink_LED+0x16c>
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	461d      	mov	r5, r3
  400e12:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400e16:	4b22      	ldr	r3, [pc, #136]	; (400ea0 <blink_LED+0x1b0>)
  400e18:	4798      	blx	r3
  400e1a:	4603      	mov	r3, r0
  400e1c:	f04f 0400 	mov.w	r4, #0
  400e20:	fb03 f106 	mul.w	r1, r3, r6
  400e24:	fb05 f204 	mul.w	r2, r5, r4
  400e28:	440a      	add	r2, r1
  400e2a:	fba5 3403 	umull	r3, r4, r5, r3
  400e2e:	4422      	add	r2, r4
  400e30:	4614      	mov	r4, r2
  400e32:	f243 61af 	movw	r1, #13999	; 0x36af
  400e36:	f04f 0200 	mov.w	r2, #0
  400e3a:	185d      	adds	r5, r3, r1
  400e3c:	eb44 0602 	adc.w	r6, r4, r2
  400e40:	4628      	mov	r0, r5
  400e42:	4631      	mov	r1, r6
  400e44:	4c17      	ldr	r4, [pc, #92]	; (400ea4 <blink_LED+0x1b4>)
  400e46:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e4a:	f04f 0300 	mov.w	r3, #0
  400e4e:	47a0      	blx	r4
  400e50:	4603      	mov	r3, r0
  400e52:	460c      	mov	r4, r1
  400e54:	4618      	mov	r0, r3
  400e56:	4b14      	ldr	r3, [pc, #80]	; (400ea8 <blink_LED+0x1b8>)
  400e58:	4798      	blx	r3
}
  400e5a:	e016      	b.n	400e8a <blink_LED+0x19a>
	delay_ms(ms_blink);
  400e5c:	4b10      	ldr	r3, [pc, #64]	; (400ea0 <blink_LED+0x1b0>)
  400e5e:	4798      	blx	r3
  400e60:	4603      	mov	r3, r0
  400e62:	f04f 0400 	mov.w	r4, #0
  400e66:	a20c      	add	r2, pc, #48	; (adr r2, 400e98 <blink_LED+0x1a8>)
  400e68:	e9d2 1200 	ldrd	r1, r2, [r2]
  400e6c:	185d      	adds	r5, r3, r1
  400e6e:	eb44 0602 	adc.w	r6, r4, r2
  400e72:	4628      	mov	r0, r5
  400e74:	4631      	mov	r1, r6
  400e76:	4c0b      	ldr	r4, [pc, #44]	; (400ea4 <blink_LED+0x1b4>)
  400e78:	4a0c      	ldr	r2, [pc, #48]	; (400eac <blink_LED+0x1bc>)
  400e7a:	f04f 0300 	mov.w	r3, #0
  400e7e:	47a0      	blx	r4
  400e80:	4603      	mov	r3, r0
  400e82:	460c      	mov	r4, r1
  400e84:	4618      	mov	r0, r3
  400e86:	4b08      	ldr	r3, [pc, #32]	; (400ea8 <blink_LED+0x1b8>)
  400e88:	4798      	blx	r3
}
  400e8a:	bf00      	nop
  400e8c:	370c      	adds	r7, #12
  400e8e:	46bd      	mov	sp, r7
  400e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e92:	bf00      	nop
  400e94:	f3af 8000 	nop.w
  400e98:	00d59f7f 	.word	0x00d59f7f
  400e9c:	00000000 	.word	0x00000000
  400ea0:	00400b19 	.word	0x00400b19
  400ea4:	004020cd 	.word	0x004020cd
  400ea8:	20000001 	.word	0x20000001
  400eac:	00d59f80 	.word	0x00d59f80
  400eb0:	00400b2d 	.word	0x00400b2d

00400eb4 <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  400eb4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  400eb8:	b082      	sub	sp, #8
  400eba:	af00      	add	r7, sp, #0
	
	int connected = 0;
  400ebc:	2300      	movs	r3, #0
  400ebe:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  400ec0:	2300      	movs	r3, #0
  400ec2:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  400ec4:	21d0      	movs	r1, #208	; 0xd0
  400ec6:	482b      	ldr	r0, [pc, #172]	; (400f74 <setup_wifi+0xc0>)
  400ec8:	4b2b      	ldr	r3, [pc, #172]	; (400f78 <setup_wifi+0xc4>)
  400eca:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  400ecc:	e046      	b.n	400f5c <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  400ece:	492b      	ldr	r1, [pc, #172]	; (400f7c <setup_wifi+0xc8>)
  400ed0:	482b      	ldr	r0, [pc, #172]	; (400f80 <setup_wifi+0xcc>)
  400ed2:	4b2c      	ldr	r3, [pc, #176]	; (400f84 <setup_wifi+0xd0>)
  400ed4:	4798      	blx	r3
  400ed6:	4603      	mov	r3, r0
  400ed8:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  400eda:	683b      	ldr	r3, [r7, #0]
  400edc:	f240 52dc 	movw	r2, #1500	; 0x5dc
  400ee0:	4293      	cmp	r3, r2
  400ee2:	dd02      	ble.n	400eea <setup_wifi+0x36>
			blink_LED(50);
  400ee4:	2032      	movs	r0, #50	; 0x32
  400ee6:	4b28      	ldr	r3, [pc, #160]	; (400f88 <setup_wifi+0xd4>)
  400ee8:	4798      	blx	r3
		}
		delay_ms(200);
  400eea:	4b28      	ldr	r3, [pc, #160]	; (400f8c <setup_wifi+0xd8>)
  400eec:	4798      	blx	r3
  400eee:	4603      	mov	r3, r0
  400ef0:	4619      	mov	r1, r3
  400ef2:	f04f 0200 	mov.w	r2, #0
  400ef6:	460b      	mov	r3, r1
  400ef8:	4614      	mov	r4, r2
  400efa:	18db      	adds	r3, r3, r3
  400efc:	eb44 0404 	adc.w	r4, r4, r4
  400f00:	185b      	adds	r3, r3, r1
  400f02:	eb44 0402 	adc.w	r4, r4, r2
  400f06:	00e6      	lsls	r6, r4, #3
  400f08:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  400f0c:	00dd      	lsls	r5, r3, #3
  400f0e:	462b      	mov	r3, r5
  400f10:	4634      	mov	r4, r6
  400f12:	185b      	adds	r3, r3, r1
  400f14:	eb44 0402 	adc.w	r4, r4, r2
  400f18:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  400f1c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  400f20:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  400f24:	4643      	mov	r3, r8
  400f26:	464c      	mov	r4, r9
  400f28:	4619      	mov	r1, r3
  400f2a:	4622      	mov	r2, r4
  400f2c:	f243 63af 	movw	r3, #13999	; 0x36af
  400f30:	f04f 0400 	mov.w	r4, #0
  400f34:	eb11 0b03 	adds.w	fp, r1, r3
  400f38:	eb42 0c04 	adc.w	ip, r2, r4
  400f3c:	4658      	mov	r0, fp
  400f3e:	4661      	mov	r1, ip
  400f40:	4c13      	ldr	r4, [pc, #76]	; (400f90 <setup_wifi+0xdc>)
  400f42:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400f46:	f04f 0300 	mov.w	r3, #0
  400f4a:	47a0      	blx	r4
  400f4c:	4603      	mov	r3, r0
  400f4e:	460c      	mov	r4, r1
  400f50:	4618      	mov	r0, r3
  400f52:	4b10      	ldr	r3, [pc, #64]	; (400f94 <setup_wifi+0xe0>)
  400f54:	4798      	blx	r3
		seconds++;
  400f56:	683b      	ldr	r3, [r7, #0]
  400f58:	3301      	adds	r3, #1
  400f5a:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d0b5      	beq.n	400ece <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  400f62:	4b0d      	ldr	r3, [pc, #52]	; (400f98 <setup_wifi+0xe4>)
  400f64:	2200      	movs	r2, #0
  400f66:	601a      	str	r2, [r3, #0]
}
  400f68:	bf00      	nop
  400f6a:	3708      	adds	r7, #8
  400f6c:	46bd      	mov	sp, r7
  400f6e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  400f72:	bf00      	nop
  400f74:	00402dbc 	.word	0x00402dbc
  400f78:	00400c1d 	.word	0x00400c1d
  400f7c:	00402dc8 	.word	0x00402dc8
  400f80:	20001484 	.word	0x20001484
  400f84:	00402779 	.word	0x00402779
  400f88:	00400cf1 	.word	0x00400cf1
  400f8c:	00400b19 	.word	0x00400b19
  400f90:	004020cd 	.word	0x004020cd
  400f94:	20000001 	.word	0x20000001
  400f98:	20001684 	.word	0x20001684

00400f9c <osc_enable>:
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	b082      	sub	sp, #8
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	2b07      	cmp	r3, #7
  400fa8:	d831      	bhi.n	40100e <osc_enable+0x72>
  400faa:	a201      	add	r2, pc, #4	; (adr r2, 400fb0 <osc_enable+0x14>)
  400fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400fb0:	0040100d 	.word	0x0040100d
  400fb4:	00400fd1 	.word	0x00400fd1
  400fb8:	00400fd9 	.word	0x00400fd9
  400fbc:	00400fe1 	.word	0x00400fe1
  400fc0:	00400fe9 	.word	0x00400fe9
  400fc4:	00400ff1 	.word	0x00400ff1
  400fc8:	00400ff9 	.word	0x00400ff9
  400fcc:	00401003 	.word	0x00401003
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400fd0:	2000      	movs	r0, #0
  400fd2:	4b11      	ldr	r3, [pc, #68]	; (401018 <osc_enable+0x7c>)
  400fd4:	4798      	blx	r3
		break;
  400fd6:	e01a      	b.n	40100e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400fd8:	2001      	movs	r0, #1
  400fda:	4b0f      	ldr	r3, [pc, #60]	; (401018 <osc_enable+0x7c>)
  400fdc:	4798      	blx	r3
		break;
  400fde:	e016      	b.n	40100e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400fe0:	2000      	movs	r0, #0
  400fe2:	4b0e      	ldr	r3, [pc, #56]	; (40101c <osc_enable+0x80>)
  400fe4:	4798      	blx	r3
		break;
  400fe6:	e012      	b.n	40100e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400fe8:	2010      	movs	r0, #16
  400fea:	4b0c      	ldr	r3, [pc, #48]	; (40101c <osc_enable+0x80>)
  400fec:	4798      	blx	r3
		break;
  400fee:	e00e      	b.n	40100e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400ff0:	2020      	movs	r0, #32
  400ff2:	4b0a      	ldr	r3, [pc, #40]	; (40101c <osc_enable+0x80>)
  400ff4:	4798      	blx	r3
		break;
  400ff6:	e00a      	b.n	40100e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ff8:	213e      	movs	r1, #62	; 0x3e
  400ffa:	2000      	movs	r0, #0
  400ffc:	4b08      	ldr	r3, [pc, #32]	; (401020 <osc_enable+0x84>)
  400ffe:	4798      	blx	r3
		break;
  401000:	e005      	b.n	40100e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401002:	213e      	movs	r1, #62	; 0x3e
  401004:	2001      	movs	r0, #1
  401006:	4b06      	ldr	r3, [pc, #24]	; (401020 <osc_enable+0x84>)
  401008:	4798      	blx	r3
		break;
  40100a:	e000      	b.n	40100e <osc_enable+0x72>
		break;
  40100c:	bf00      	nop
}
  40100e:	bf00      	nop
  401010:	3708      	adds	r7, #8
  401012:	46bd      	mov	sp, r7
  401014:	bd80      	pop	{r7, pc}
  401016:	bf00      	nop
  401018:	004017ad 	.word	0x004017ad
  40101c:	00401819 	.word	0x00401819
  401020:	00401889 	.word	0x00401889

00401024 <osc_is_ready>:
{
  401024:	b580      	push	{r7, lr}
  401026:	b082      	sub	sp, #8
  401028:	af00      	add	r7, sp, #0
  40102a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40102c:	687b      	ldr	r3, [r7, #4]
  40102e:	2b07      	cmp	r3, #7
  401030:	d826      	bhi.n	401080 <osc_is_ready+0x5c>
  401032:	a201      	add	r2, pc, #4	; (adr r2, 401038 <osc_is_ready+0x14>)
  401034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401038:	00401059 	.word	0x00401059
  40103c:	0040105d 	.word	0x0040105d
  401040:	0040105d 	.word	0x0040105d
  401044:	0040106f 	.word	0x0040106f
  401048:	0040106f 	.word	0x0040106f
  40104c:	0040106f 	.word	0x0040106f
  401050:	0040106f 	.word	0x0040106f
  401054:	0040106f 	.word	0x0040106f
		return 1;
  401058:	2301      	movs	r3, #1
  40105a:	e012      	b.n	401082 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  40105c:	4b0b      	ldr	r3, [pc, #44]	; (40108c <osc_is_ready+0x68>)
  40105e:	4798      	blx	r3
  401060:	4603      	mov	r3, r0
  401062:	2b00      	cmp	r3, #0
  401064:	bf14      	ite	ne
  401066:	2301      	movne	r3, #1
  401068:	2300      	moveq	r3, #0
  40106a:	b2db      	uxtb	r3, r3
  40106c:	e009      	b.n	401082 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40106e:	4b08      	ldr	r3, [pc, #32]	; (401090 <osc_is_ready+0x6c>)
  401070:	4798      	blx	r3
  401072:	4603      	mov	r3, r0
  401074:	2b00      	cmp	r3, #0
  401076:	bf14      	ite	ne
  401078:	2301      	movne	r3, #1
  40107a:	2300      	moveq	r3, #0
  40107c:	b2db      	uxtb	r3, r3
  40107e:	e000      	b.n	401082 <osc_is_ready+0x5e>
	return 0;
  401080:	2300      	movs	r3, #0
}
  401082:	4618      	mov	r0, r3
  401084:	3708      	adds	r7, #8
  401086:	46bd      	mov	sp, r7
  401088:	bd80      	pop	{r7, pc}
  40108a:	bf00      	nop
  40108c:	004017e5 	.word	0x004017e5
  401090:	00401901 	.word	0x00401901

00401094 <osc_get_rate>:
{
  401094:	b480      	push	{r7}
  401096:	b083      	sub	sp, #12
  401098:	af00      	add	r7, sp, #0
  40109a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	2b07      	cmp	r3, #7
  4010a0:	d825      	bhi.n	4010ee <osc_get_rate+0x5a>
  4010a2:	a201      	add	r2, pc, #4	; (adr r2, 4010a8 <osc_get_rate+0x14>)
  4010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010a8:	004010c9 	.word	0x004010c9
  4010ac:	004010cf 	.word	0x004010cf
  4010b0:	004010d5 	.word	0x004010d5
  4010b4:	004010db 	.word	0x004010db
  4010b8:	004010df 	.word	0x004010df
  4010bc:	004010e3 	.word	0x004010e3
  4010c0:	004010e7 	.word	0x004010e7
  4010c4:	004010eb 	.word	0x004010eb
		return OSC_SLCK_32K_RC_HZ;
  4010c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4010cc:	e010      	b.n	4010f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4010ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4010d2:	e00d      	b.n	4010f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4010d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4010d8:	e00a      	b.n	4010f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4010da:	4b08      	ldr	r3, [pc, #32]	; (4010fc <osc_get_rate+0x68>)
  4010dc:	e008      	b.n	4010f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4010de:	4b08      	ldr	r3, [pc, #32]	; (401100 <osc_get_rate+0x6c>)
  4010e0:	e006      	b.n	4010f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4010e2:	4b08      	ldr	r3, [pc, #32]	; (401104 <osc_get_rate+0x70>)
  4010e4:	e004      	b.n	4010f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4010e6:	4b07      	ldr	r3, [pc, #28]	; (401104 <osc_get_rate+0x70>)
  4010e8:	e002      	b.n	4010f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4010ea:	4b06      	ldr	r3, [pc, #24]	; (401104 <osc_get_rate+0x70>)
  4010ec:	e000      	b.n	4010f0 <osc_get_rate+0x5c>
	return 0;
  4010ee:	2300      	movs	r3, #0
}
  4010f0:	4618      	mov	r0, r3
  4010f2:	370c      	adds	r7, #12
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bc80      	pop	{r7}
  4010f8:	4770      	bx	lr
  4010fa:	bf00      	nop
  4010fc:	003d0900 	.word	0x003d0900
  401100:	007a1200 	.word	0x007a1200
  401104:	00b71b00 	.word	0x00b71b00

00401108 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401108:	b580      	push	{r7, lr}
  40110a:	b082      	sub	sp, #8
  40110c:	af00      	add	r7, sp, #0
  40110e:	4603      	mov	r3, r0
  401110:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401112:	bf00      	nop
  401114:	79fb      	ldrb	r3, [r7, #7]
  401116:	4618      	mov	r0, r3
  401118:	4b05      	ldr	r3, [pc, #20]	; (401130 <osc_wait_ready+0x28>)
  40111a:	4798      	blx	r3
  40111c:	4603      	mov	r3, r0
  40111e:	f083 0301 	eor.w	r3, r3, #1
  401122:	b2db      	uxtb	r3, r3
  401124:	2b00      	cmp	r3, #0
  401126:	d1f5      	bne.n	401114 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401128:	bf00      	nop
  40112a:	3708      	adds	r7, #8
  40112c:	46bd      	mov	sp, r7
  40112e:	bd80      	pop	{r7, pc}
  401130:	00401025 	.word	0x00401025

00401134 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401134:	b580      	push	{r7, lr}
  401136:	b086      	sub	sp, #24
  401138:	af00      	add	r7, sp, #0
  40113a:	60f8      	str	r0, [r7, #12]
  40113c:	607a      	str	r2, [r7, #4]
  40113e:	603b      	str	r3, [r7, #0]
  401140:	460b      	mov	r3, r1
  401142:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401144:	7afb      	ldrb	r3, [r7, #11]
  401146:	4618      	mov	r0, r3
  401148:	4b0d      	ldr	r3, [pc, #52]	; (401180 <pll_config_init+0x4c>)
  40114a:	4798      	blx	r3
  40114c:	4602      	mov	r2, r0
  40114e:	687b      	ldr	r3, [r7, #4]
  401150:	fbb2 f3f3 	udiv	r3, r2, r3
  401154:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401156:	697b      	ldr	r3, [r7, #20]
  401158:	683a      	ldr	r2, [r7, #0]
  40115a:	fb02 f303 	mul.w	r3, r2, r3
  40115e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401160:	683b      	ldr	r3, [r7, #0]
  401162:	3b01      	subs	r3, #1
  401164:	041a      	lsls	r2, r3, #16
  401166:	4b07      	ldr	r3, [pc, #28]	; (401184 <pll_config_init+0x50>)
  401168:	4013      	ands	r3, r2
  40116a:	687a      	ldr	r2, [r7, #4]
  40116c:	b2d2      	uxtb	r2, r2
  40116e:	4313      	orrs	r3, r2
  401170:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401174:	68fb      	ldr	r3, [r7, #12]
  401176:	601a      	str	r2, [r3, #0]
}
  401178:	bf00      	nop
  40117a:	3718      	adds	r7, #24
  40117c:	46bd      	mov	sp, r7
  40117e:	bd80      	pop	{r7, pc}
  401180:	00401095 	.word	0x00401095
  401184:	07ff0000 	.word	0x07ff0000

00401188 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401188:	b580      	push	{r7, lr}
  40118a:	b082      	sub	sp, #8
  40118c:	af00      	add	r7, sp, #0
  40118e:	6078      	str	r0, [r7, #4]
  401190:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401192:	683b      	ldr	r3, [r7, #0]
  401194:	2b00      	cmp	r3, #0
  401196:	d108      	bne.n	4011aa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401198:	4b09      	ldr	r3, [pc, #36]	; (4011c0 <pll_enable+0x38>)
  40119a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40119c:	4a09      	ldr	r2, [pc, #36]	; (4011c4 <pll_enable+0x3c>)
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	681b      	ldr	r3, [r3, #0]
  4011a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4011a6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4011a8:	e005      	b.n	4011b6 <pll_enable+0x2e>
		pmc_disable_pllbck();
  4011aa:	4b07      	ldr	r3, [pc, #28]	; (4011c8 <pll_enable+0x40>)
  4011ac:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4011ae:	4a05      	ldr	r2, [pc, #20]	; (4011c4 <pll_enable+0x3c>)
  4011b0:	687b      	ldr	r3, [r7, #4]
  4011b2:	681b      	ldr	r3, [r3, #0]
  4011b4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4011b6:	bf00      	nop
  4011b8:	3708      	adds	r7, #8
  4011ba:	46bd      	mov	sp, r7
  4011bc:	bd80      	pop	{r7, pc}
  4011be:	bf00      	nop
  4011c0:	00401919 	.word	0x00401919
  4011c4:	400e0400 	.word	0x400e0400
  4011c8:	00401949 	.word	0x00401949

004011cc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4011cc:	b580      	push	{r7, lr}
  4011ce:	b082      	sub	sp, #8
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4011d4:	687b      	ldr	r3, [r7, #4]
  4011d6:	2b00      	cmp	r3, #0
  4011d8:	d103      	bne.n	4011e2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4011da:	4b05      	ldr	r3, [pc, #20]	; (4011f0 <pll_is_locked+0x24>)
  4011dc:	4798      	blx	r3
  4011de:	4603      	mov	r3, r0
  4011e0:	e002      	b.n	4011e8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4011e2:	4b04      	ldr	r3, [pc, #16]	; (4011f4 <pll_is_locked+0x28>)
  4011e4:	4798      	blx	r3
  4011e6:	4603      	mov	r3, r0
	}
}
  4011e8:	4618      	mov	r0, r3
  4011ea:	3708      	adds	r7, #8
  4011ec:	46bd      	mov	sp, r7
  4011ee:	bd80      	pop	{r7, pc}
  4011f0:	00401931 	.word	0x00401931
  4011f4:	00401961 	.word	0x00401961

004011f8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4011f8:	b580      	push	{r7, lr}
  4011fa:	b082      	sub	sp, #8
  4011fc:	af00      	add	r7, sp, #0
  4011fe:	4603      	mov	r3, r0
  401200:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401202:	79fb      	ldrb	r3, [r7, #7]
  401204:	3b03      	subs	r3, #3
  401206:	2b04      	cmp	r3, #4
  401208:	d808      	bhi.n	40121c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40120a:	79fb      	ldrb	r3, [r7, #7]
  40120c:	4618      	mov	r0, r3
  40120e:	4b06      	ldr	r3, [pc, #24]	; (401228 <pll_enable_source+0x30>)
  401210:	4798      	blx	r3
		osc_wait_ready(e_src);
  401212:	79fb      	ldrb	r3, [r7, #7]
  401214:	4618      	mov	r0, r3
  401216:	4b05      	ldr	r3, [pc, #20]	; (40122c <pll_enable_source+0x34>)
  401218:	4798      	blx	r3
		break;
  40121a:	e000      	b.n	40121e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40121c:	bf00      	nop
	}
}
  40121e:	bf00      	nop
  401220:	3708      	adds	r7, #8
  401222:	46bd      	mov	sp, r7
  401224:	bd80      	pop	{r7, pc}
  401226:	bf00      	nop
  401228:	00400f9d 	.word	0x00400f9d
  40122c:	00401109 	.word	0x00401109

00401230 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401230:	b580      	push	{r7, lr}
  401232:	b082      	sub	sp, #8
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401238:	bf00      	nop
  40123a:	6878      	ldr	r0, [r7, #4]
  40123c:	4b04      	ldr	r3, [pc, #16]	; (401250 <pll_wait_for_lock+0x20>)
  40123e:	4798      	blx	r3
  401240:	4603      	mov	r3, r0
  401242:	2b00      	cmp	r3, #0
  401244:	d0f9      	beq.n	40123a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401246:	2300      	movs	r3, #0
}
  401248:	4618      	mov	r0, r3
  40124a:	3708      	adds	r7, #8
  40124c:	46bd      	mov	sp, r7
  40124e:	bd80      	pop	{r7, pc}
  401250:	004011cd 	.word	0x004011cd

00401254 <sysclk_get_main_hz>:
{
  401254:	b580      	push	{r7, lr}
  401256:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401258:	2006      	movs	r0, #6
  40125a:	4b04      	ldr	r3, [pc, #16]	; (40126c <sysclk_get_main_hz+0x18>)
  40125c:	4798      	blx	r3
  40125e:	4602      	mov	r2, r0
  401260:	4613      	mov	r3, r2
  401262:	009b      	lsls	r3, r3, #2
  401264:	4413      	add	r3, r2
  401266:	009b      	lsls	r3, r3, #2
}
  401268:	4618      	mov	r0, r3
  40126a:	bd80      	pop	{r7, pc}
  40126c:	00401095 	.word	0x00401095

00401270 <sysclk_get_cpu_hz>:
{
  401270:	b580      	push	{r7, lr}
  401272:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401274:	4b02      	ldr	r3, [pc, #8]	; (401280 <sysclk_get_cpu_hz+0x10>)
  401276:	4798      	blx	r3
  401278:	4603      	mov	r3, r0
  40127a:	085b      	lsrs	r3, r3, #1
}
  40127c:	4618      	mov	r0, r3
  40127e:	bd80      	pop	{r7, pc}
  401280:	00401255 	.word	0x00401255

00401284 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401284:	b590      	push	{r4, r7, lr}
  401286:	b083      	sub	sp, #12
  401288:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40128a:	4811      	ldr	r0, [pc, #68]	; (4012d0 <sysclk_init+0x4c>)
  40128c:	4b11      	ldr	r3, [pc, #68]	; (4012d4 <sysclk_init+0x50>)
  40128e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401290:	2006      	movs	r0, #6
  401292:	4b11      	ldr	r3, [pc, #68]	; (4012d8 <sysclk_init+0x54>)
  401294:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401296:	1d38      	adds	r0, r7, #4
  401298:	2314      	movs	r3, #20
  40129a:	2201      	movs	r2, #1
  40129c:	2106      	movs	r1, #6
  40129e:	4c0f      	ldr	r4, [pc, #60]	; (4012dc <sysclk_init+0x58>)
  4012a0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4012a2:	1d3b      	adds	r3, r7, #4
  4012a4:	2100      	movs	r1, #0
  4012a6:	4618      	mov	r0, r3
  4012a8:	4b0d      	ldr	r3, [pc, #52]	; (4012e0 <sysclk_init+0x5c>)
  4012aa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4012ac:	2000      	movs	r0, #0
  4012ae:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <sysclk_init+0x60>)
  4012b0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4012b2:	2010      	movs	r0, #16
  4012b4:	4b0c      	ldr	r3, [pc, #48]	; (4012e8 <sysclk_init+0x64>)
  4012b6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4012b8:	4b0c      	ldr	r3, [pc, #48]	; (4012ec <sysclk_init+0x68>)
  4012ba:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4012bc:	4b0c      	ldr	r3, [pc, #48]	; (4012f0 <sysclk_init+0x6c>)
  4012be:	4798      	blx	r3
  4012c0:	4603      	mov	r3, r0
  4012c2:	4618      	mov	r0, r3
  4012c4:	4b03      	ldr	r3, [pc, #12]	; (4012d4 <sysclk_init+0x50>)
  4012c6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4012c8:	bf00      	nop
  4012ca:	370c      	adds	r7, #12
  4012cc:	46bd      	mov	sp, r7
  4012ce:	bd90      	pop	{r4, r7, pc}
  4012d0:	07270e00 	.word	0x07270e00
  4012d4:	00401fdd 	.word	0x00401fdd
  4012d8:	004011f9 	.word	0x004011f9
  4012dc:	00401135 	.word	0x00401135
  4012e0:	00401189 	.word	0x00401189
  4012e4:	00401231 	.word	0x00401231
  4012e8:	0040172d 	.word	0x0040172d
  4012ec:	00401e45 	.word	0x00401e45
  4012f0:	00401271 	.word	0x00401271

004012f4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4012f4:	b480      	push	{r7}
  4012f6:	b085      	sub	sp, #20
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	60f8      	str	r0, [r7, #12]
  4012fc:	60b9      	str	r1, [r7, #8]
  4012fe:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	2b00      	cmp	r3, #0
  401304:	d003      	beq.n	40130e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401306:	68fb      	ldr	r3, [r7, #12]
  401308:	68ba      	ldr	r2, [r7, #8]
  40130a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  40130c:	e002      	b.n	401314 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40130e:	68fb      	ldr	r3, [r7, #12]
  401310:	68ba      	ldr	r2, [r7, #8]
  401312:	661a      	str	r2, [r3, #96]	; 0x60
}
  401314:	bf00      	nop
  401316:	3714      	adds	r7, #20
  401318:	46bd      	mov	sp, r7
  40131a:	bc80      	pop	{r7}
  40131c:	4770      	bx	lr

0040131e <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40131e:	b480      	push	{r7}
  401320:	b087      	sub	sp, #28
  401322:	af00      	add	r7, sp, #0
  401324:	60f8      	str	r0, [r7, #12]
  401326:	60b9      	str	r1, [r7, #8]
  401328:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40132a:	68fb      	ldr	r3, [r7, #12]
  40132c:	687a      	ldr	r2, [r7, #4]
  40132e:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401330:	68bb      	ldr	r3, [r7, #8]
  401332:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401336:	d04a      	beq.n	4013ce <pio_set_peripheral+0xb0>
  401338:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40133c:	d808      	bhi.n	401350 <pio_set_peripheral+0x32>
  40133e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401342:	d016      	beq.n	401372 <pio_set_peripheral+0x54>
  401344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401348:	d02c      	beq.n	4013a4 <pio_set_peripheral+0x86>
  40134a:	2b00      	cmp	r3, #0
  40134c:	d069      	beq.n	401422 <pio_set_peripheral+0x104>
  40134e:	e064      	b.n	40141a <pio_set_peripheral+0xfc>
  401350:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401354:	d065      	beq.n	401422 <pio_set_peripheral+0x104>
  401356:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40135a:	d803      	bhi.n	401364 <pio_set_peripheral+0x46>
  40135c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401360:	d04a      	beq.n	4013f8 <pio_set_peripheral+0xda>
  401362:	e05a      	b.n	40141a <pio_set_peripheral+0xfc>
  401364:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401368:	d05b      	beq.n	401422 <pio_set_peripheral+0x104>
  40136a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40136e:	d058      	beq.n	401422 <pio_set_peripheral+0x104>
  401370:	e053      	b.n	40141a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401372:	68fb      	ldr	r3, [r7, #12]
  401374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401376:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401378:	68fb      	ldr	r3, [r7, #12]
  40137a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40137c:	687b      	ldr	r3, [r7, #4]
  40137e:	43d9      	mvns	r1, r3
  401380:	697b      	ldr	r3, [r7, #20]
  401382:	400b      	ands	r3, r1
  401384:	401a      	ands	r2, r3
  401386:	68fb      	ldr	r3, [r7, #12]
  401388:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40138a:	68fb      	ldr	r3, [r7, #12]
  40138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40138e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401390:	68fb      	ldr	r3, [r7, #12]
  401392:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	43d9      	mvns	r1, r3
  401398:	697b      	ldr	r3, [r7, #20]
  40139a:	400b      	ands	r3, r1
  40139c:	401a      	ands	r2, r3
  40139e:	68fb      	ldr	r3, [r7, #12]
  4013a0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013a2:	e03a      	b.n	40141a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013a4:	68fb      	ldr	r3, [r7, #12]
  4013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013a8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4013aa:	687a      	ldr	r2, [r7, #4]
  4013ac:	697b      	ldr	r3, [r7, #20]
  4013ae:	431a      	orrs	r2, r3
  4013b0:	68fb      	ldr	r3, [r7, #12]
  4013b2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013b4:	68fb      	ldr	r3, [r7, #12]
  4013b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013b8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013ba:	68fb      	ldr	r3, [r7, #12]
  4013bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4013be:	687b      	ldr	r3, [r7, #4]
  4013c0:	43d9      	mvns	r1, r3
  4013c2:	697b      	ldr	r3, [r7, #20]
  4013c4:	400b      	ands	r3, r1
  4013c6:	401a      	ands	r2, r3
  4013c8:	68fb      	ldr	r3, [r7, #12]
  4013ca:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013cc:	e025      	b.n	40141a <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013ce:	68fb      	ldr	r3, [r7, #12]
  4013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013d2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013d4:	68fb      	ldr	r3, [r7, #12]
  4013d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013d8:	687b      	ldr	r3, [r7, #4]
  4013da:	43d9      	mvns	r1, r3
  4013dc:	697b      	ldr	r3, [r7, #20]
  4013de:	400b      	ands	r3, r1
  4013e0:	401a      	ands	r2, r3
  4013e2:	68fb      	ldr	r3, [r7, #12]
  4013e4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013e6:	68fb      	ldr	r3, [r7, #12]
  4013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013ea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013ec:	687a      	ldr	r2, [r7, #4]
  4013ee:	697b      	ldr	r3, [r7, #20]
  4013f0:	431a      	orrs	r2, r3
  4013f2:	68fb      	ldr	r3, [r7, #12]
  4013f4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013f6:	e010      	b.n	40141a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013f8:	68fb      	ldr	r3, [r7, #12]
  4013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4013fe:	687a      	ldr	r2, [r7, #4]
  401400:	697b      	ldr	r3, [r7, #20]
  401402:	431a      	orrs	r2, r3
  401404:	68fb      	ldr	r3, [r7, #12]
  401406:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401408:	68fb      	ldr	r3, [r7, #12]
  40140a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40140c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40140e:	687a      	ldr	r2, [r7, #4]
  401410:	697b      	ldr	r3, [r7, #20]
  401412:	431a      	orrs	r2, r3
  401414:	68fb      	ldr	r3, [r7, #12]
  401416:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401418:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40141a:	68fb      	ldr	r3, [r7, #12]
  40141c:	687a      	ldr	r2, [r7, #4]
  40141e:	605a      	str	r2, [r3, #4]
  401420:	e000      	b.n	401424 <pio_set_peripheral+0x106>
		return;
  401422:	bf00      	nop
}
  401424:	371c      	adds	r7, #28
  401426:	46bd      	mov	sp, r7
  401428:	bc80      	pop	{r7}
  40142a:	4770      	bx	lr

0040142c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40142c:	b580      	push	{r7, lr}
  40142e:	b084      	sub	sp, #16
  401430:	af00      	add	r7, sp, #0
  401432:	60f8      	str	r0, [r7, #12]
  401434:	60b9      	str	r1, [r7, #8]
  401436:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401438:	68b9      	ldr	r1, [r7, #8]
  40143a:	68f8      	ldr	r0, [r7, #12]
  40143c:	4b19      	ldr	r3, [pc, #100]	; (4014a4 <pio_set_input+0x78>)
  40143e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	f003 0301 	and.w	r3, r3, #1
  401446:	461a      	mov	r2, r3
  401448:	68b9      	ldr	r1, [r7, #8]
  40144a:	68f8      	ldr	r0, [r7, #12]
  40144c:	4b16      	ldr	r3, [pc, #88]	; (4014a8 <pio_set_input+0x7c>)
  40144e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401450:	687b      	ldr	r3, [r7, #4]
  401452:	f003 030a 	and.w	r3, r3, #10
  401456:	2b00      	cmp	r3, #0
  401458:	d003      	beq.n	401462 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40145a:	68fb      	ldr	r3, [r7, #12]
  40145c:	68ba      	ldr	r2, [r7, #8]
  40145e:	621a      	str	r2, [r3, #32]
  401460:	e002      	b.n	401468 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401462:	68fb      	ldr	r3, [r7, #12]
  401464:	68ba      	ldr	r2, [r7, #8]
  401466:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	f003 0302 	and.w	r3, r3, #2
  40146e:	2b00      	cmp	r3, #0
  401470:	d004      	beq.n	40147c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401472:	68fb      	ldr	r3, [r7, #12]
  401474:	68ba      	ldr	r2, [r7, #8]
  401476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40147a:	e008      	b.n	40148e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	f003 0308 	and.w	r3, r3, #8
  401482:	2b00      	cmp	r3, #0
  401484:	d003      	beq.n	40148e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401486:	68fb      	ldr	r3, [r7, #12]
  401488:	68ba      	ldr	r2, [r7, #8]
  40148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40148e:	68fb      	ldr	r3, [r7, #12]
  401490:	68ba      	ldr	r2, [r7, #8]
  401492:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401494:	68fb      	ldr	r3, [r7, #12]
  401496:	68ba      	ldr	r2, [r7, #8]
  401498:	601a      	str	r2, [r3, #0]
}
  40149a:	bf00      	nop
  40149c:	3710      	adds	r7, #16
  40149e:	46bd      	mov	sp, r7
  4014a0:	bd80      	pop	{r7, pc}
  4014a2:	bf00      	nop
  4014a4:	00401511 	.word	0x00401511
  4014a8:	004012f5 	.word	0x004012f5

004014ac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4014ac:	b580      	push	{r7, lr}
  4014ae:	b084      	sub	sp, #16
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	60f8      	str	r0, [r7, #12]
  4014b4:	60b9      	str	r1, [r7, #8]
  4014b6:	607a      	str	r2, [r7, #4]
  4014b8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4014ba:	68b9      	ldr	r1, [r7, #8]
  4014bc:	68f8      	ldr	r0, [r7, #12]
  4014be:	4b12      	ldr	r3, [pc, #72]	; (401508 <pio_set_output+0x5c>)
  4014c0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4014c2:	69ba      	ldr	r2, [r7, #24]
  4014c4:	68b9      	ldr	r1, [r7, #8]
  4014c6:	68f8      	ldr	r0, [r7, #12]
  4014c8:	4b10      	ldr	r3, [pc, #64]	; (40150c <pio_set_output+0x60>)
  4014ca:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4014cc:	683b      	ldr	r3, [r7, #0]
  4014ce:	2b00      	cmp	r3, #0
  4014d0:	d003      	beq.n	4014da <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4014d2:	68fb      	ldr	r3, [r7, #12]
  4014d4:	68ba      	ldr	r2, [r7, #8]
  4014d6:	651a      	str	r2, [r3, #80]	; 0x50
  4014d8:	e002      	b.n	4014e0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4014da:	68fb      	ldr	r3, [r7, #12]
  4014dc:	68ba      	ldr	r2, [r7, #8]
  4014de:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4014e0:	687b      	ldr	r3, [r7, #4]
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d003      	beq.n	4014ee <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4014e6:	68fb      	ldr	r3, [r7, #12]
  4014e8:	68ba      	ldr	r2, [r7, #8]
  4014ea:	631a      	str	r2, [r3, #48]	; 0x30
  4014ec:	e002      	b.n	4014f4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4014ee:	68fb      	ldr	r3, [r7, #12]
  4014f0:	68ba      	ldr	r2, [r7, #8]
  4014f2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4014f4:	68fb      	ldr	r3, [r7, #12]
  4014f6:	68ba      	ldr	r2, [r7, #8]
  4014f8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4014fa:	68fb      	ldr	r3, [r7, #12]
  4014fc:	68ba      	ldr	r2, [r7, #8]
  4014fe:	601a      	str	r2, [r3, #0]
}
  401500:	bf00      	nop
  401502:	3710      	adds	r7, #16
  401504:	46bd      	mov	sp, r7
  401506:	bd80      	pop	{r7, pc}
  401508:	00401511 	.word	0x00401511
  40150c:	004012f5 	.word	0x004012f5

00401510 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401510:	b480      	push	{r7}
  401512:	b083      	sub	sp, #12
  401514:	af00      	add	r7, sp, #0
  401516:	6078      	str	r0, [r7, #4]
  401518:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40151a:	687b      	ldr	r3, [r7, #4]
  40151c:	683a      	ldr	r2, [r7, #0]
  40151e:	645a      	str	r2, [r3, #68]	; 0x44
}
  401520:	bf00      	nop
  401522:	370c      	adds	r7, #12
  401524:	46bd      	mov	sp, r7
  401526:	bc80      	pop	{r7}
  401528:	4770      	bx	lr

0040152a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40152a:	b480      	push	{r7}
  40152c:	b083      	sub	sp, #12
  40152e:	af00      	add	r7, sp, #0
  401530:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401532:	687b      	ldr	r3, [r7, #4]
  401534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401536:	4618      	mov	r0, r3
  401538:	370c      	adds	r7, #12
  40153a:	46bd      	mov	sp, r7
  40153c:	bc80      	pop	{r7}
  40153e:	4770      	bx	lr

00401540 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401540:	b480      	push	{r7}
  401542:	b083      	sub	sp, #12
  401544:	af00      	add	r7, sp, #0
  401546:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401548:	687b      	ldr	r3, [r7, #4]
  40154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40154c:	4618      	mov	r0, r3
  40154e:	370c      	adds	r7, #12
  401550:	46bd      	mov	sp, r7
  401552:	bc80      	pop	{r7}
  401554:	4770      	bx	lr
	...

00401558 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401558:	b590      	push	{r4, r7, lr}
  40155a:	b087      	sub	sp, #28
  40155c:	af02      	add	r7, sp, #8
  40155e:	6078      	str	r0, [r7, #4]
  401560:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401562:	6878      	ldr	r0, [r7, #4]
  401564:	4b63      	ldr	r3, [pc, #396]	; (4016f4 <pio_configure_pin+0x19c>)
  401566:	4798      	blx	r3
  401568:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40156a:	683b      	ldr	r3, [r7, #0]
  40156c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401574:	d067      	beq.n	401646 <pio_configure_pin+0xee>
  401576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40157a:	d809      	bhi.n	401590 <pio_configure_pin+0x38>
  40157c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401580:	d02b      	beq.n	4015da <pio_configure_pin+0x82>
  401582:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401586:	d043      	beq.n	401610 <pio_configure_pin+0xb8>
  401588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40158c:	d00a      	beq.n	4015a4 <pio_configure_pin+0x4c>
  40158e:	e0a9      	b.n	4016e4 <pio_configure_pin+0x18c>
  401590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401594:	d07e      	beq.n	401694 <pio_configure_pin+0x13c>
  401596:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40159a:	d07b      	beq.n	401694 <pio_configure_pin+0x13c>
  40159c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015a0:	d06c      	beq.n	40167c <pio_configure_pin+0x124>
  4015a2:	e09f      	b.n	4016e4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	f003 031f 	and.w	r3, r3, #31
  4015aa:	2201      	movs	r2, #1
  4015ac:	fa02 f303 	lsl.w	r3, r2, r3
  4015b0:	461a      	mov	r2, r3
  4015b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015b6:	68f8      	ldr	r0, [r7, #12]
  4015b8:	4b4f      	ldr	r3, [pc, #316]	; (4016f8 <pio_configure_pin+0x1a0>)
  4015ba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4015bc:	687b      	ldr	r3, [r7, #4]
  4015be:	f003 031f 	and.w	r3, r3, #31
  4015c2:	2201      	movs	r2, #1
  4015c4:	fa02 f303 	lsl.w	r3, r2, r3
  4015c8:	4619      	mov	r1, r3
  4015ca:	683b      	ldr	r3, [r7, #0]
  4015cc:	f003 0301 	and.w	r3, r3, #1
  4015d0:	461a      	mov	r2, r3
  4015d2:	68f8      	ldr	r0, [r7, #12]
  4015d4:	4b49      	ldr	r3, [pc, #292]	; (4016fc <pio_configure_pin+0x1a4>)
  4015d6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4015d8:	e086      	b.n	4016e8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4015da:	687b      	ldr	r3, [r7, #4]
  4015dc:	f003 031f 	and.w	r3, r3, #31
  4015e0:	2201      	movs	r2, #1
  4015e2:	fa02 f303 	lsl.w	r3, r2, r3
  4015e6:	461a      	mov	r2, r3
  4015e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015ec:	68f8      	ldr	r0, [r7, #12]
  4015ee:	4b42      	ldr	r3, [pc, #264]	; (4016f8 <pio_configure_pin+0x1a0>)
  4015f0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4015f2:	687b      	ldr	r3, [r7, #4]
  4015f4:	f003 031f 	and.w	r3, r3, #31
  4015f8:	2201      	movs	r2, #1
  4015fa:	fa02 f303 	lsl.w	r3, r2, r3
  4015fe:	4619      	mov	r1, r3
  401600:	683b      	ldr	r3, [r7, #0]
  401602:	f003 0301 	and.w	r3, r3, #1
  401606:	461a      	mov	r2, r3
  401608:	68f8      	ldr	r0, [r7, #12]
  40160a:	4b3c      	ldr	r3, [pc, #240]	; (4016fc <pio_configure_pin+0x1a4>)
  40160c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40160e:	e06b      	b.n	4016e8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	f003 031f 	and.w	r3, r3, #31
  401616:	2201      	movs	r2, #1
  401618:	fa02 f303 	lsl.w	r3, r2, r3
  40161c:	461a      	mov	r2, r3
  40161e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401622:	68f8      	ldr	r0, [r7, #12]
  401624:	4b34      	ldr	r3, [pc, #208]	; (4016f8 <pio_configure_pin+0x1a0>)
  401626:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401628:	687b      	ldr	r3, [r7, #4]
  40162a:	f003 031f 	and.w	r3, r3, #31
  40162e:	2201      	movs	r2, #1
  401630:	fa02 f303 	lsl.w	r3, r2, r3
  401634:	4619      	mov	r1, r3
  401636:	683b      	ldr	r3, [r7, #0]
  401638:	f003 0301 	and.w	r3, r3, #1
  40163c:	461a      	mov	r2, r3
  40163e:	68f8      	ldr	r0, [r7, #12]
  401640:	4b2e      	ldr	r3, [pc, #184]	; (4016fc <pio_configure_pin+0x1a4>)
  401642:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401644:	e050      	b.n	4016e8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401646:	687b      	ldr	r3, [r7, #4]
  401648:	f003 031f 	and.w	r3, r3, #31
  40164c:	2201      	movs	r2, #1
  40164e:	fa02 f303 	lsl.w	r3, r2, r3
  401652:	461a      	mov	r2, r3
  401654:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401658:	68f8      	ldr	r0, [r7, #12]
  40165a:	4b27      	ldr	r3, [pc, #156]	; (4016f8 <pio_configure_pin+0x1a0>)
  40165c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40165e:	687b      	ldr	r3, [r7, #4]
  401660:	f003 031f 	and.w	r3, r3, #31
  401664:	2201      	movs	r2, #1
  401666:	fa02 f303 	lsl.w	r3, r2, r3
  40166a:	4619      	mov	r1, r3
  40166c:	683b      	ldr	r3, [r7, #0]
  40166e:	f003 0301 	and.w	r3, r3, #1
  401672:	461a      	mov	r2, r3
  401674:	68f8      	ldr	r0, [r7, #12]
  401676:	4b21      	ldr	r3, [pc, #132]	; (4016fc <pio_configure_pin+0x1a4>)
  401678:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40167a:	e035      	b.n	4016e8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40167c:	687b      	ldr	r3, [r7, #4]
  40167e:	f003 031f 	and.w	r3, r3, #31
  401682:	2201      	movs	r2, #1
  401684:	fa02 f303 	lsl.w	r3, r2, r3
  401688:	683a      	ldr	r2, [r7, #0]
  40168a:	4619      	mov	r1, r3
  40168c:	68f8      	ldr	r0, [r7, #12]
  40168e:	4b1c      	ldr	r3, [pc, #112]	; (401700 <pio_configure_pin+0x1a8>)
  401690:	4798      	blx	r3
		break;
  401692:	e029      	b.n	4016e8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	f003 031f 	and.w	r3, r3, #31
  40169a:	2201      	movs	r2, #1
  40169c:	fa02 f303 	lsl.w	r3, r2, r3
  4016a0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4016a2:	683b      	ldr	r3, [r7, #0]
  4016a4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016ac:	bf0c      	ite	eq
  4016ae:	2301      	moveq	r3, #1
  4016b0:	2300      	movne	r3, #0
  4016b2:	b2db      	uxtb	r3, r3
  4016b4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4016b6:	683b      	ldr	r3, [r7, #0]
  4016b8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016bc:	2b00      	cmp	r3, #0
  4016be:	bf14      	ite	ne
  4016c0:	2301      	movne	r3, #1
  4016c2:	2300      	moveq	r3, #0
  4016c4:	b2db      	uxtb	r3, r3
  4016c6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4016c8:	683b      	ldr	r3, [r7, #0]
  4016ca:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016ce:	2b00      	cmp	r3, #0
  4016d0:	bf14      	ite	ne
  4016d2:	2301      	movne	r3, #1
  4016d4:	2300      	moveq	r3, #0
  4016d6:	b2db      	uxtb	r3, r3
  4016d8:	9300      	str	r3, [sp, #0]
  4016da:	4603      	mov	r3, r0
  4016dc:	68f8      	ldr	r0, [r7, #12]
  4016de:	4c09      	ldr	r4, [pc, #36]	; (401704 <pio_configure_pin+0x1ac>)
  4016e0:	47a0      	blx	r4
		break;
  4016e2:	e001      	b.n	4016e8 <pio_configure_pin+0x190>

	default:
		return 0;
  4016e4:	2300      	movs	r3, #0
  4016e6:	e000      	b.n	4016ea <pio_configure_pin+0x192>
	}

	return 1;
  4016e8:	2301      	movs	r3, #1
}
  4016ea:	4618      	mov	r0, r3
  4016ec:	3714      	adds	r7, #20
  4016ee:	46bd      	mov	sp, r7
  4016f0:	bd90      	pop	{r4, r7, pc}
  4016f2:	bf00      	nop
  4016f4:	00401709 	.word	0x00401709
  4016f8:	0040131f 	.word	0x0040131f
  4016fc:	004012f5 	.word	0x004012f5
  401700:	0040142d 	.word	0x0040142d
  401704:	004014ad 	.word	0x004014ad

00401708 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401708:	b480      	push	{r7}
  40170a:	b085      	sub	sp, #20
  40170c:	af00      	add	r7, sp, #0
  40170e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	095b      	lsrs	r3, r3, #5
  401714:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401718:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40171c:	025b      	lsls	r3, r3, #9
  40171e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401720:	68fb      	ldr	r3, [r7, #12]
}
  401722:	4618      	mov	r0, r3
  401724:	3714      	adds	r7, #20
  401726:	46bd      	mov	sp, r7
  401728:	bc80      	pop	{r7}
  40172a:	4770      	bx	lr

0040172c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40172c:	b480      	push	{r7}
  40172e:	b085      	sub	sp, #20
  401730:	af00      	add	r7, sp, #0
  401732:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401734:	491c      	ldr	r1, [pc, #112]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  401736:	4b1c      	ldr	r3, [pc, #112]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  401738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40173a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40173e:	687b      	ldr	r3, [r7, #4]
  401740:	4313      	orrs	r3, r2
  401742:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401744:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401748:	60fb      	str	r3, [r7, #12]
  40174a:	e007      	b.n	40175c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40174c:	68fb      	ldr	r3, [r7, #12]
  40174e:	2b00      	cmp	r3, #0
  401750:	d101      	bne.n	401756 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401752:	2301      	movs	r3, #1
  401754:	e023      	b.n	40179e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401756:	68fb      	ldr	r3, [r7, #12]
  401758:	3b01      	subs	r3, #1
  40175a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40175c:	4b12      	ldr	r3, [pc, #72]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  40175e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401760:	f003 0308 	and.w	r3, r3, #8
  401764:	2b00      	cmp	r3, #0
  401766:	d0f1      	beq.n	40174c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401768:	4a0f      	ldr	r2, [pc, #60]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  40176a:	4b0f      	ldr	r3, [pc, #60]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  40176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40176e:	f023 0303 	bic.w	r3, r3, #3
  401772:	f043 0302 	orr.w	r3, r3, #2
  401776:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401778:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40177c:	60fb      	str	r3, [r7, #12]
  40177e:	e007      	b.n	401790 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401780:	68fb      	ldr	r3, [r7, #12]
  401782:	2b00      	cmp	r3, #0
  401784:	d101      	bne.n	40178a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401786:	2301      	movs	r3, #1
  401788:	e009      	b.n	40179e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40178a:	68fb      	ldr	r3, [r7, #12]
  40178c:	3b01      	subs	r3, #1
  40178e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401790:	4b05      	ldr	r3, [pc, #20]	; (4017a8 <pmc_switch_mck_to_pllack+0x7c>)
  401792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401794:	f003 0308 	and.w	r3, r3, #8
  401798:	2b00      	cmp	r3, #0
  40179a:	d0f1      	beq.n	401780 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40179c:	2300      	movs	r3, #0
}
  40179e:	4618      	mov	r0, r3
  4017a0:	3714      	adds	r7, #20
  4017a2:	46bd      	mov	sp, r7
  4017a4:	bc80      	pop	{r7}
  4017a6:	4770      	bx	lr
  4017a8:	400e0400 	.word	0x400e0400

004017ac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4017ac:	b480      	push	{r7}
  4017ae:	b083      	sub	sp, #12
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4017b4:	687b      	ldr	r3, [r7, #4]
  4017b6:	2b01      	cmp	r3, #1
  4017b8:	d107      	bne.n	4017ca <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4017ba:	4a08      	ldr	r2, [pc, #32]	; (4017dc <pmc_switch_sclk_to_32kxtal+0x30>)
  4017bc:	4b07      	ldr	r3, [pc, #28]	; (4017dc <pmc_switch_sclk_to_32kxtal+0x30>)
  4017be:	689b      	ldr	r3, [r3, #8]
  4017c0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4017c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4017c8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4017ca:	4b04      	ldr	r3, [pc, #16]	; (4017dc <pmc_switch_sclk_to_32kxtal+0x30>)
  4017cc:	4a04      	ldr	r2, [pc, #16]	; (4017e0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4017ce:	601a      	str	r2, [r3, #0]
}
  4017d0:	bf00      	nop
  4017d2:	370c      	adds	r7, #12
  4017d4:	46bd      	mov	sp, r7
  4017d6:	bc80      	pop	{r7}
  4017d8:	4770      	bx	lr
  4017da:	bf00      	nop
  4017dc:	400e1410 	.word	0x400e1410
  4017e0:	a5000008 	.word	0xa5000008

004017e4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4017e4:	b480      	push	{r7}
  4017e6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4017e8:	4b09      	ldr	r3, [pc, #36]	; (401810 <pmc_osc_is_ready_32kxtal+0x2c>)
  4017ea:	695b      	ldr	r3, [r3, #20]
  4017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d007      	beq.n	401804 <pmc_osc_is_ready_32kxtal+0x20>
  4017f4:	4b07      	ldr	r3, [pc, #28]	; (401814 <pmc_osc_is_ready_32kxtal+0x30>)
  4017f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d001      	beq.n	401804 <pmc_osc_is_ready_32kxtal+0x20>
  401800:	2301      	movs	r3, #1
  401802:	e000      	b.n	401806 <pmc_osc_is_ready_32kxtal+0x22>
  401804:	2300      	movs	r3, #0
}
  401806:	4618      	mov	r0, r3
  401808:	46bd      	mov	sp, r7
  40180a:	bc80      	pop	{r7}
  40180c:	4770      	bx	lr
  40180e:	bf00      	nop
  401810:	400e1410 	.word	0x400e1410
  401814:	400e0400 	.word	0x400e0400

00401818 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401818:	b480      	push	{r7}
  40181a:	b083      	sub	sp, #12
  40181c:	af00      	add	r7, sp, #0
  40181e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401820:	4a18      	ldr	r2, [pc, #96]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401822:	4b18      	ldr	r3, [pc, #96]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401824:	6a1b      	ldr	r3, [r3, #32]
  401826:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40182a:	f043 0308 	orr.w	r3, r3, #8
  40182e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401830:	bf00      	nop
  401832:	4b14      	ldr	r3, [pc, #80]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40183a:	2b00      	cmp	r3, #0
  40183c:	d0f9      	beq.n	401832 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40183e:	4911      	ldr	r1, [pc, #68]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401840:	4b10      	ldr	r3, [pc, #64]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401842:	6a1b      	ldr	r3, [r3, #32]
  401844:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40184c:	687a      	ldr	r2, [r7, #4]
  40184e:	4313      	orrs	r3, r2
  401850:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401854:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401856:	bf00      	nop
  401858:	4b0a      	ldr	r3, [pc, #40]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  40185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401860:	2b00      	cmp	r3, #0
  401862:	d0f9      	beq.n	401858 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401864:	4a07      	ldr	r2, [pc, #28]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <pmc_switch_mainck_to_fastrc+0x6c>)
  401868:	6a1b      	ldr	r3, [r3, #32]
  40186a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401872:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401876:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401878:	bf00      	nop
  40187a:	370c      	adds	r7, #12
  40187c:	46bd      	mov	sp, r7
  40187e:	bc80      	pop	{r7}
  401880:	4770      	bx	lr
  401882:	bf00      	nop
  401884:	400e0400 	.word	0x400e0400

00401888 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401888:	b480      	push	{r7}
  40188a:	b083      	sub	sp, #12
  40188c:	af00      	add	r7, sp, #0
  40188e:	6078      	str	r0, [r7, #4]
  401890:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401892:	687b      	ldr	r3, [r7, #4]
  401894:	2b00      	cmp	r3, #0
  401896:	d008      	beq.n	4018aa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401898:	4916      	ldr	r1, [pc, #88]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40189a:	4b16      	ldr	r3, [pc, #88]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40189c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40189e:	4a16      	ldr	r2, [pc, #88]	; (4018f8 <pmc_switch_mainck_to_xtal+0x70>)
  4018a0:	401a      	ands	r2, r3
  4018a2:	4b16      	ldr	r3, [pc, #88]	; (4018fc <pmc_switch_mainck_to_xtal+0x74>)
  4018a4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018a6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4018a8:	e01e      	b.n	4018e8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018aa:	4912      	ldr	r1, [pc, #72]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4018ac:	4b11      	ldr	r3, [pc, #68]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4018ae:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4018b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4018b4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4018b8:	683a      	ldr	r2, [r7, #0]
  4018ba:	0212      	lsls	r2, r2, #8
  4018bc:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4018be:	4313      	orrs	r3, r2
  4018c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018c4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018c8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4018ca:	bf00      	nop
  4018cc:	4b09      	ldr	r3, [pc, #36]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4018ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018d0:	f003 0301 	and.w	r3, r3, #1
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d0f9      	beq.n	4018cc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4018d8:	4a06      	ldr	r2, [pc, #24]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4018da:	4b06      	ldr	r3, [pc, #24]	; (4018f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4018dc:	6a1b      	ldr	r3, [r3, #32]
  4018de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018e6:	6213      	str	r3, [r2, #32]
}
  4018e8:	bf00      	nop
  4018ea:	370c      	adds	r7, #12
  4018ec:	46bd      	mov	sp, r7
  4018ee:	bc80      	pop	{r7}
  4018f0:	4770      	bx	lr
  4018f2:	bf00      	nop
  4018f4:	400e0400 	.word	0x400e0400
  4018f8:	fec8fffc 	.word	0xfec8fffc
  4018fc:	01370002 	.word	0x01370002

00401900 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401900:	b480      	push	{r7}
  401902:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401904:	4b03      	ldr	r3, [pc, #12]	; (401914 <pmc_osc_is_ready_mainck+0x14>)
  401906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40190c:	4618      	mov	r0, r3
  40190e:	46bd      	mov	sp, r7
  401910:	bc80      	pop	{r7}
  401912:	4770      	bx	lr
  401914:	400e0400 	.word	0x400e0400

00401918 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401918:	b480      	push	{r7}
  40191a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40191c:	4b03      	ldr	r3, [pc, #12]	; (40192c <pmc_disable_pllack+0x14>)
  40191e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401922:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401924:	bf00      	nop
  401926:	46bd      	mov	sp, r7
  401928:	bc80      	pop	{r7}
  40192a:	4770      	bx	lr
  40192c:	400e0400 	.word	0x400e0400

00401930 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401930:	b480      	push	{r7}
  401932:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401934:	4b03      	ldr	r3, [pc, #12]	; (401944 <pmc_is_locked_pllack+0x14>)
  401936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401938:	f003 0302 	and.w	r3, r3, #2
}
  40193c:	4618      	mov	r0, r3
  40193e:	46bd      	mov	sp, r7
  401940:	bc80      	pop	{r7}
  401942:	4770      	bx	lr
  401944:	400e0400 	.word	0x400e0400

00401948 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401948:	b480      	push	{r7}
  40194a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40194c:	4b03      	ldr	r3, [pc, #12]	; (40195c <pmc_disable_pllbck+0x14>)
  40194e:	2200      	movs	r2, #0
  401950:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401952:	bf00      	nop
  401954:	46bd      	mov	sp, r7
  401956:	bc80      	pop	{r7}
  401958:	4770      	bx	lr
  40195a:	bf00      	nop
  40195c:	400e0400 	.word	0x400e0400

00401960 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401960:	b480      	push	{r7}
  401962:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401964:	4b03      	ldr	r3, [pc, #12]	; (401974 <pmc_is_locked_pllbck+0x14>)
  401966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401968:	f003 0304 	and.w	r3, r3, #4
}
  40196c:	4618      	mov	r0, r3
  40196e:	46bd      	mov	sp, r7
  401970:	bc80      	pop	{r7}
  401972:	4770      	bx	lr
  401974:	400e0400 	.word	0x400e0400

00401978 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401978:	b480      	push	{r7}
  40197a:	b083      	sub	sp, #12
  40197c:	af00      	add	r7, sp, #0
  40197e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401980:	687b      	ldr	r3, [r7, #4]
  401982:	2b22      	cmp	r3, #34	; 0x22
  401984:	d901      	bls.n	40198a <pmc_enable_periph_clk+0x12>
		return 1;
  401986:	2301      	movs	r3, #1
  401988:	e02f      	b.n	4019ea <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40198a:	687b      	ldr	r3, [r7, #4]
  40198c:	2b1f      	cmp	r3, #31
  40198e:	d813      	bhi.n	4019b8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401990:	4b18      	ldr	r3, [pc, #96]	; (4019f4 <pmc_enable_periph_clk+0x7c>)
  401992:	699a      	ldr	r2, [r3, #24]
  401994:	2101      	movs	r1, #1
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	fa01 f303 	lsl.w	r3, r1, r3
  40199c:	401a      	ands	r2, r3
  40199e:	2101      	movs	r1, #1
  4019a0:	687b      	ldr	r3, [r7, #4]
  4019a2:	fa01 f303 	lsl.w	r3, r1, r3
  4019a6:	429a      	cmp	r2, r3
  4019a8:	d01e      	beq.n	4019e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4019aa:	4a12      	ldr	r2, [pc, #72]	; (4019f4 <pmc_enable_periph_clk+0x7c>)
  4019ac:	2101      	movs	r1, #1
  4019ae:	687b      	ldr	r3, [r7, #4]
  4019b0:	fa01 f303 	lsl.w	r3, r1, r3
  4019b4:	6113      	str	r3, [r2, #16]
  4019b6:	e017      	b.n	4019e8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4019b8:	687b      	ldr	r3, [r7, #4]
  4019ba:	3b20      	subs	r3, #32
  4019bc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4019be:	4b0d      	ldr	r3, [pc, #52]	; (4019f4 <pmc_enable_periph_clk+0x7c>)
  4019c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4019c4:	2101      	movs	r1, #1
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	fa01 f303 	lsl.w	r3, r1, r3
  4019cc:	401a      	ands	r2, r3
  4019ce:	2101      	movs	r1, #1
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	fa01 f303 	lsl.w	r3, r1, r3
  4019d6:	429a      	cmp	r2, r3
  4019d8:	d006      	beq.n	4019e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4019da:	4a06      	ldr	r2, [pc, #24]	; (4019f4 <pmc_enable_periph_clk+0x7c>)
  4019dc:	2101      	movs	r1, #1
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	fa01 f303 	lsl.w	r3, r1, r3
  4019e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4019e8:	2300      	movs	r3, #0
}
  4019ea:	4618      	mov	r0, r3
  4019ec:	370c      	adds	r7, #12
  4019ee:	46bd      	mov	sp, r7
  4019f0:	bc80      	pop	{r7}
  4019f2:	4770      	bx	lr
  4019f4:	400e0400 	.word	0x400e0400

004019f8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4019f8:	b580      	push	{r7, lr}
  4019fa:	b082      	sub	sp, #8
  4019fc:	af00      	add	r7, sp, #0
  4019fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a00:	6878      	ldr	r0, [r7, #4]
  401a02:	4b03      	ldr	r3, [pc, #12]	; (401a10 <sysclk_enable_peripheral_clock+0x18>)
  401a04:	4798      	blx	r3
}
  401a06:	bf00      	nop
  401a08:	3708      	adds	r7, #8
  401a0a:	46bd      	mov	sp, r7
  401a0c:	bd80      	pop	{r7, pc}
  401a0e:	bf00      	nop
  401a10:	00401979 	.word	0x00401979

00401a14 <ioport_init>:
{
  401a14:	b580      	push	{r7, lr}
  401a16:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401a18:	200b      	movs	r0, #11
  401a1a:	4b03      	ldr	r3, [pc, #12]	; (401a28 <ioport_init+0x14>)
  401a1c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401a1e:	200c      	movs	r0, #12
  401a20:	4b01      	ldr	r3, [pc, #4]	; (401a28 <ioport_init+0x14>)
  401a22:	4798      	blx	r3
}
  401a24:	bf00      	nop
  401a26:	bd80      	pop	{r7, pc}
  401a28:	004019f9 	.word	0x004019f9

00401a2c <ioport_set_pin_mode>:
{
  401a2c:	b480      	push	{r7}
  401a2e:	b08d      	sub	sp, #52	; 0x34
  401a30:	af00      	add	r7, sp, #0
  401a32:	6078      	str	r0, [r7, #4]
  401a34:	6039      	str	r1, [r7, #0]
  401a36:	687b      	ldr	r3, [r7, #4]
  401a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a3a:	683b      	ldr	r3, [r7, #0]
  401a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  401a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a40:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a44:	095a      	lsrs	r2, r3, #5
  401a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a48:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401a4a:	6a3b      	ldr	r3, [r7, #32]
  401a4c:	f003 031f 	and.w	r3, r3, #31
  401a50:	2101      	movs	r1, #1
  401a52:	fa01 f303 	lsl.w	r3, r1, r3
  401a56:	61fa      	str	r2, [r7, #28]
  401a58:	61bb      	str	r3, [r7, #24]
  401a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401a5c:	617b      	str	r3, [r7, #20]
  401a5e:	69fb      	ldr	r3, [r7, #28]
  401a60:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a62:	693b      	ldr	r3, [r7, #16]
  401a64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401a68:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401a6c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401a6e:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401a70:	697b      	ldr	r3, [r7, #20]
  401a72:	f003 0308 	and.w	r3, r3, #8
  401a76:	2b00      	cmp	r3, #0
  401a78:	d003      	beq.n	401a82 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401a7a:	68fb      	ldr	r3, [r7, #12]
  401a7c:	69ba      	ldr	r2, [r7, #24]
  401a7e:	665a      	str	r2, [r3, #100]	; 0x64
  401a80:	e002      	b.n	401a88 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  401a82:	68fb      	ldr	r3, [r7, #12]
  401a84:	69ba      	ldr	r2, [r7, #24]
  401a86:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401a88:	697b      	ldr	r3, [r7, #20]
  401a8a:	f003 0310 	and.w	r3, r3, #16
  401a8e:	2b00      	cmp	r3, #0
  401a90:	d004      	beq.n	401a9c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401a92:	68fb      	ldr	r3, [r7, #12]
  401a94:	69ba      	ldr	r2, [r7, #24]
  401a96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401a9a:	e003      	b.n	401aa4 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  401a9c:	68fb      	ldr	r3, [r7, #12]
  401a9e:	69ba      	ldr	r2, [r7, #24]
  401aa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401aa4:	697b      	ldr	r3, [r7, #20]
  401aa6:	f003 0320 	and.w	r3, r3, #32
  401aaa:	2b00      	cmp	r3, #0
  401aac:	d003      	beq.n	401ab6 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401aae:	68fb      	ldr	r3, [r7, #12]
  401ab0:	69ba      	ldr	r2, [r7, #24]
  401ab2:	651a      	str	r2, [r3, #80]	; 0x50
  401ab4:	e002      	b.n	401abc <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  401ab6:	68fb      	ldr	r3, [r7, #12]
  401ab8:	69ba      	ldr	r2, [r7, #24]
  401aba:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401abc:	697b      	ldr	r3, [r7, #20]
  401abe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401ac2:	2b00      	cmp	r3, #0
  401ac4:	d003      	beq.n	401ace <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  401ac6:	68fb      	ldr	r3, [r7, #12]
  401ac8:	69ba      	ldr	r2, [r7, #24]
  401aca:	621a      	str	r2, [r3, #32]
  401acc:	e002      	b.n	401ad4 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  401ace:	68fb      	ldr	r3, [r7, #12]
  401ad0:	69ba      	ldr	r2, [r7, #24]
  401ad2:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401ad4:	697b      	ldr	r3, [r7, #20]
  401ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401ada:	2b00      	cmp	r3, #0
  401adc:	d004      	beq.n	401ae8 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  401ade:	68fb      	ldr	r3, [r7, #12]
  401ae0:	69ba      	ldr	r2, [r7, #24]
  401ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401ae6:	e003      	b.n	401af0 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  401ae8:	68fb      	ldr	r3, [r7, #12]
  401aea:	69ba      	ldr	r2, [r7, #24]
  401aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401af0:	697b      	ldr	r3, [r7, #20]
  401af2:	f003 0301 	and.w	r3, r3, #1
  401af6:	2b00      	cmp	r3, #0
  401af8:	d006      	beq.n	401b08 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401afa:	68fb      	ldr	r3, [r7, #12]
  401afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401afe:	69bb      	ldr	r3, [r7, #24]
  401b00:	431a      	orrs	r2, r3
  401b02:	68fb      	ldr	r3, [r7, #12]
  401b04:	671a      	str	r2, [r3, #112]	; 0x70
  401b06:	e006      	b.n	401b16 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  401b08:	68fb      	ldr	r3, [r7, #12]
  401b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b0c:	69bb      	ldr	r3, [r7, #24]
  401b0e:	43db      	mvns	r3, r3
  401b10:	401a      	ands	r2, r3
  401b12:	68fb      	ldr	r3, [r7, #12]
  401b14:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401b16:	697b      	ldr	r3, [r7, #20]
  401b18:	f003 0302 	and.w	r3, r3, #2
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	d006      	beq.n	401b2e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401b20:	68fb      	ldr	r3, [r7, #12]
  401b22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b24:	69bb      	ldr	r3, [r7, #24]
  401b26:	431a      	orrs	r2, r3
  401b28:	68fb      	ldr	r3, [r7, #12]
  401b2a:	675a      	str	r2, [r3, #116]	; 0x74
}
  401b2c:	e006      	b.n	401b3c <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  401b2e:	68fb      	ldr	r3, [r7, #12]
  401b30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401b32:	69bb      	ldr	r3, [r7, #24]
  401b34:	43db      	mvns	r3, r3
  401b36:	401a      	ands	r2, r3
  401b38:	68fb      	ldr	r3, [r7, #12]
  401b3a:	675a      	str	r2, [r3, #116]	; 0x74
  401b3c:	bf00      	nop
  401b3e:	3734      	adds	r7, #52	; 0x34
  401b40:	46bd      	mov	sp, r7
  401b42:	bc80      	pop	{r7}
  401b44:	4770      	bx	lr

00401b46 <ioport_set_pin_dir>:
{
  401b46:	b480      	push	{r7}
  401b48:	b08d      	sub	sp, #52	; 0x34
  401b4a:	af00      	add	r7, sp, #0
  401b4c:	6078      	str	r0, [r7, #4]
  401b4e:	460b      	mov	r3, r1
  401b50:	70fb      	strb	r3, [r7, #3]
  401b52:	687b      	ldr	r3, [r7, #4]
  401b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b56:	78fb      	ldrb	r3, [r7, #3]
  401b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b5e:	627b      	str	r3, [r7, #36]	; 0x24
  401b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b62:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401b64:	6a3b      	ldr	r3, [r7, #32]
  401b66:	095b      	lsrs	r3, r3, #5
  401b68:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b6a:	69fb      	ldr	r3, [r7, #28]
  401b6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b70:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b74:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401b76:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b7c:	2b01      	cmp	r3, #1
  401b7e:	d109      	bne.n	401b94 <ioport_set_pin_dir+0x4e>
  401b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b82:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401b84:	697b      	ldr	r3, [r7, #20]
  401b86:	f003 031f 	and.w	r3, r3, #31
  401b8a:	2201      	movs	r2, #1
  401b8c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b8e:	69bb      	ldr	r3, [r7, #24]
  401b90:	611a      	str	r2, [r3, #16]
  401b92:	e00c      	b.n	401bae <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b98:	2b00      	cmp	r3, #0
  401b9a:	d108      	bne.n	401bae <ioport_set_pin_dir+0x68>
  401b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b9e:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401ba0:	693b      	ldr	r3, [r7, #16]
  401ba2:	f003 031f 	and.w	r3, r3, #31
  401ba6:	2201      	movs	r2, #1
  401ba8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401baa:	69bb      	ldr	r3, [r7, #24]
  401bac:	615a      	str	r2, [r3, #20]
  401bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401bb0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401bb2:	68fb      	ldr	r3, [r7, #12]
  401bb4:	f003 031f 	and.w	r3, r3, #31
  401bb8:	2201      	movs	r2, #1
  401bba:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401bbc:	69bb      	ldr	r3, [r7, #24]
  401bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401bc2:	bf00      	nop
  401bc4:	3734      	adds	r7, #52	; 0x34
  401bc6:	46bd      	mov	sp, r7
  401bc8:	bc80      	pop	{r7}
  401bca:	4770      	bx	lr

00401bcc <ioport_set_pin_level>:
{
  401bcc:	b480      	push	{r7}
  401bce:	b08b      	sub	sp, #44	; 0x2c
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	6078      	str	r0, [r7, #4]
  401bd4:	460b      	mov	r3, r1
  401bd6:	70fb      	strb	r3, [r7, #3]
  401bd8:	687b      	ldr	r3, [r7, #4]
  401bda:	627b      	str	r3, [r7, #36]	; 0x24
  401bdc:	78fb      	ldrb	r3, [r7, #3]
  401bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401be4:	61fb      	str	r3, [r7, #28]
  401be6:	69fb      	ldr	r3, [r7, #28]
  401be8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401bea:	69bb      	ldr	r3, [r7, #24]
  401bec:	095b      	lsrs	r3, r3, #5
  401bee:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bf0:	697b      	ldr	r3, [r7, #20]
  401bf2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401bf6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401bfa:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401bfc:	613b      	str	r3, [r7, #16]
	if (level) {
  401bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401c02:	2b00      	cmp	r3, #0
  401c04:	d009      	beq.n	401c1a <ioport_set_pin_level+0x4e>
  401c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c08:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	f003 031f 	and.w	r3, r3, #31
  401c10:	2201      	movs	r2, #1
  401c12:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c14:	693b      	ldr	r3, [r7, #16]
  401c16:	631a      	str	r2, [r3, #48]	; 0x30
}
  401c18:	e008      	b.n	401c2c <ioport_set_pin_level+0x60>
  401c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c1c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401c1e:	68bb      	ldr	r3, [r7, #8]
  401c20:	f003 031f 	and.w	r3, r3, #31
  401c24:	2201      	movs	r2, #1
  401c26:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401c28:	693b      	ldr	r3, [r7, #16]
  401c2a:	635a      	str	r2, [r3, #52]	; 0x34
  401c2c:	bf00      	nop
  401c2e:	372c      	adds	r7, #44	; 0x2c
  401c30:	46bd      	mov	sp, r7
  401c32:	bc80      	pop	{r7}
  401c34:	4770      	bx	lr
	...

00401c38 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "camera.h"

void board_init(void)
{
  401c38:	b580      	push	{r7, lr}
  401c3a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  401c3c:	4844      	ldr	r0, [pc, #272]	; (401d50 <board_init+0x118>)
  401c3e:	4b45      	ldr	r3, [pc, #276]	; (401d54 <board_init+0x11c>)
  401c40:	4798      	blx	r3
	
	ioport_init();
  401c42:	4b45      	ldr	r3, [pc, #276]	; (401d58 <board_init+0x120>)
  401c44:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  401c46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401c4a:	2009      	movs	r0, #9
  401c4c:	4b43      	ldr	r3, [pc, #268]	; (401d5c <board_init+0x124>)
  401c4e:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401c50:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401c54:	2009      	movs	r0, #9
  401c56:	4b41      	ldr	r3, [pc, #260]	; (401d5c <board_init+0x124>)
  401c58:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  401c5a:	2101      	movs	r1, #1
  401c5c:	2009      	movs	r0, #9
  401c5e:	4b40      	ldr	r3, [pc, #256]	; (401d60 <board_init+0x128>)
  401c60:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  401c62:	2100      	movs	r1, #0
  401c64:	2009      	movs	r0, #9
  401c66:	4b3f      	ldr	r3, [pc, #252]	; (401d64 <board_init+0x12c>)
  401c68:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  401c6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401c6e:	2007      	movs	r0, #7
  401c70:	4b3a      	ldr	r3, [pc, #232]	; (401d5c <board_init+0x124>)
  401c72:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  401c74:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401c78:	2007      	movs	r0, #7
  401c7a:	4b38      	ldr	r3, [pc, #224]	; (401d5c <board_init+0x124>)
  401c7c:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  401c7e:	2101      	movs	r1, #1
  401c80:	2007      	movs	r0, #7
  401c82:	4b37      	ldr	r3, [pc, #220]	; (401d60 <board_init+0x128>)
  401c84:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  401c86:	2100      	movs	r1, #0
  401c88:	2007      	movs	r0, #7
  401c8a:	4b36      	ldr	r3, [pc, #216]	; (401d64 <board_init+0x12c>)
  401c8c:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  401c8e:	4936      	ldr	r1, [pc, #216]	; (401d68 <board_init+0x130>)
  401c90:	2021      	movs	r0, #33	; 0x21
  401c92:	4b32      	ldr	r3, [pc, #200]	; (401d5c <board_init+0x124>)
  401c94:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  401c96:	2100      	movs	r1, #0
  401c98:	2021      	movs	r0, #33	; 0x21
  401c9a:	4b31      	ldr	r3, [pc, #196]	; (401d60 <board_init+0x128>)
  401c9c:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  401c9e:	2108      	movs	r1, #8
  401ca0:	2021      	movs	r0, #33	; 0x21
  401ca2:	4b32      	ldr	r3, [pc, #200]	; (401d6c <board_init+0x134>)
  401ca4:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401ca6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401caa:	2005      	movs	r0, #5
  401cac:	4b2b      	ldr	r3, [pc, #172]	; (401d5c <board_init+0x124>)
  401cae:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401cb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401cb4:	2006      	movs	r0, #6
  401cb6:	4b29      	ldr	r3, [pc, #164]	; (401d5c <board_init+0x124>)
  401cb8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401cba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401cbe:	2008      	movs	r0, #8
  401cc0:	4b26      	ldr	r3, [pc, #152]	; (401d5c <board_init+0x124>)
  401cc2:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401cc4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401cc8:	2011      	movs	r0, #17
  401cca:	4b24      	ldr	r3, [pc, #144]	; (401d5c <board_init+0x124>)
  401ccc:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401cce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401cd2:	2003      	movs	r0, #3
  401cd4:	4b21      	ldr	r3, [pc, #132]	; (401d5c <board_init+0x124>)
  401cd6:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401cd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401cdc:	2004      	movs	r0, #4
  401cde:	4b1f      	ldr	r3, [pc, #124]	; (401d5c <board_init+0x124>)
  401ce0:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  401ce2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ce6:	2014      	movs	r0, #20
  401ce8:	4b1c      	ldr	r3, [pc, #112]	; (401d5c <board_init+0x124>)
  401cea:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  401cec:	2101      	movs	r1, #1
  401cee:	2014      	movs	r0, #20
  401cf0:	4b1b      	ldr	r3, [pc, #108]	; (401d60 <board_init+0x128>)
  401cf2:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  401cf4:	2100      	movs	r1, #0
  401cf6:	2014      	movs	r0, #20
  401cf8:	4b1a      	ldr	r3, [pc, #104]	; (401d64 <board_init+0x12c>)
  401cfa:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401cfc:	2171      	movs	r1, #113	; 0x71
  401cfe:	2010      	movs	r0, #16
  401d00:	4b16      	ldr	r3, [pc, #88]	; (401d5c <board_init+0x124>)
  401d02:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401d04:	2171      	movs	r1, #113	; 0x71
  401d06:	200f      	movs	r0, #15
  401d08:	4b14      	ldr	r3, [pc, #80]	; (401d5c <board_init+0x124>)
  401d0a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401d0c:	4918      	ldr	r1, [pc, #96]	; (401d70 <board_init+0x138>)
  401d0e:	2018      	movs	r0, #24
  401d10:	4b12      	ldr	r3, [pc, #72]	; (401d5c <board_init+0x124>)
  401d12:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401d14:	4916      	ldr	r1, [pc, #88]	; (401d70 <board_init+0x138>)
  401d16:	2019      	movs	r0, #25
  401d18:	4b10      	ldr	r3, [pc, #64]	; (401d5c <board_init+0x124>)
  401d1a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401d1c:	4914      	ldr	r1, [pc, #80]	; (401d70 <board_init+0x138>)
  401d1e:	201a      	movs	r0, #26
  401d20:	4b0e      	ldr	r3, [pc, #56]	; (401d5c <board_init+0x124>)
  401d22:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401d24:	4912      	ldr	r1, [pc, #72]	; (401d70 <board_init+0x138>)
  401d26:	201b      	movs	r0, #27
  401d28:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <board_init+0x124>)
  401d2a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401d2c:	4910      	ldr	r1, [pc, #64]	; (401d70 <board_init+0x138>)
  401d2e:	201c      	movs	r0, #28
  401d30:	4b0a      	ldr	r3, [pc, #40]	; (401d5c <board_init+0x124>)
  401d32:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401d34:	490e      	ldr	r1, [pc, #56]	; (401d70 <board_init+0x138>)
  401d36:	201d      	movs	r0, #29
  401d38:	4b08      	ldr	r3, [pc, #32]	; (401d5c <board_init+0x124>)
  401d3a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  401d3c:	490c      	ldr	r1, [pc, #48]	; (401d70 <board_init+0x138>)
  401d3e:	201e      	movs	r0, #30
  401d40:	4b06      	ldr	r3, [pc, #24]	; (401d5c <board_init+0x124>)
  401d42:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  401d44:	490a      	ldr	r1, [pc, #40]	; (401d70 <board_init+0x138>)
  401d46:	201f      	movs	r0, #31
  401d48:	4b04      	ldr	r3, [pc, #16]	; (401d5c <board_init+0x124>)
  401d4a:	4798      	blx	r3
}
  401d4c:	bf00      	nop
  401d4e:	bd80      	pop	{r7, pc}
  401d50:	400e1450 	.word	0x400e1450
  401d54:	004003f5 	.word	0x004003f5
  401d58:	00401a15 	.word	0x00401a15
  401d5c:	00401559 	.word	0x00401559
  401d60:	00401b47 	.word	0x00401b47
  401d64:	00401bcd 	.word	0x00401bcd
  401d68:	28000079 	.word	0x28000079
  401d6c:	00401a2d 	.word	0x00401a2d
  401d70:	28000001 	.word	0x28000001

00401d74 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401d74:	b580      	push	{r7, lr}
  401d76:	b084      	sub	sp, #16
  401d78:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401d7a:	4b27      	ldr	r3, [pc, #156]	; (401e18 <Reset_Handler+0xa4>)
  401d7c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401d7e:	4b27      	ldr	r3, [pc, #156]	; (401e1c <Reset_Handler+0xa8>)
  401d80:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401d82:	68fa      	ldr	r2, [r7, #12]
  401d84:	68bb      	ldr	r3, [r7, #8]
  401d86:	429a      	cmp	r2, r3
  401d88:	d90d      	bls.n	401da6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401d8a:	e007      	b.n	401d9c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401d8c:	68bb      	ldr	r3, [r7, #8]
  401d8e:	1d1a      	adds	r2, r3, #4
  401d90:	60ba      	str	r2, [r7, #8]
  401d92:	68fa      	ldr	r2, [r7, #12]
  401d94:	1d11      	adds	r1, r2, #4
  401d96:	60f9      	str	r1, [r7, #12]
  401d98:	6812      	ldr	r2, [r2, #0]
  401d9a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401d9c:	68bb      	ldr	r3, [r7, #8]
  401d9e:	4a20      	ldr	r2, [pc, #128]	; (401e20 <Reset_Handler+0xac>)
  401da0:	4293      	cmp	r3, r2
  401da2:	d3f3      	bcc.n	401d8c <Reset_Handler+0x18>
  401da4:	e020      	b.n	401de8 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401da6:	68fa      	ldr	r2, [r7, #12]
  401da8:	68bb      	ldr	r3, [r7, #8]
  401daa:	429a      	cmp	r2, r3
  401dac:	d21c      	bcs.n	401de8 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401dae:	4a1c      	ldr	r2, [pc, #112]	; (401e20 <Reset_Handler+0xac>)
  401db0:	4b1a      	ldr	r3, [pc, #104]	; (401e1c <Reset_Handler+0xa8>)
  401db2:	1ad3      	subs	r3, r2, r3
  401db4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401db6:	68fa      	ldr	r2, [r7, #12]
  401db8:	687b      	ldr	r3, [r7, #4]
  401dba:	4413      	add	r3, r2
  401dbc:	3b04      	subs	r3, #4
  401dbe:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401dc0:	68ba      	ldr	r2, [r7, #8]
  401dc2:	687b      	ldr	r3, [r7, #4]
  401dc4:	4413      	add	r3, r2
  401dc6:	3b04      	subs	r3, #4
  401dc8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401dca:	e00a      	b.n	401de2 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401dcc:	68bb      	ldr	r3, [r7, #8]
  401dce:	1f1a      	subs	r2, r3, #4
  401dd0:	60ba      	str	r2, [r7, #8]
  401dd2:	68fa      	ldr	r2, [r7, #12]
  401dd4:	1f11      	subs	r1, r2, #4
  401dd6:	60f9      	str	r1, [r7, #12]
  401dd8:	6812      	ldr	r2, [r2, #0]
  401dda:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401ddc:	687b      	ldr	r3, [r7, #4]
  401dde:	3b04      	subs	r3, #4
  401de0:	607b      	str	r3, [r7, #4]
  401de2:	687b      	ldr	r3, [r7, #4]
  401de4:	2b00      	cmp	r3, #0
  401de6:	d1f1      	bne.n	401dcc <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401de8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401dea:	4b0e      	ldr	r3, [pc, #56]	; (401e24 <Reset_Handler+0xb0>)
  401dec:	60bb      	str	r3, [r7, #8]
  401dee:	e004      	b.n	401dfa <Reset_Handler+0x86>
		*pDest++ = 0;
  401df0:	68bb      	ldr	r3, [r7, #8]
  401df2:	1d1a      	adds	r2, r3, #4
  401df4:	60ba      	str	r2, [r7, #8]
  401df6:	2200      	movs	r2, #0
  401df8:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401dfa:	68bb      	ldr	r3, [r7, #8]
  401dfc:	4a0a      	ldr	r2, [pc, #40]	; (401e28 <Reset_Handler+0xb4>)
  401dfe:	4293      	cmp	r3, r2
  401e00:	d3f6      	bcc.n	401df0 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401e02:	4b0a      	ldr	r3, [pc, #40]	; (401e2c <Reset_Handler+0xb8>)
  401e04:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401e06:	4a0a      	ldr	r2, [pc, #40]	; (401e30 <Reset_Handler+0xbc>)
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401e0c:	4b09      	ldr	r3, [pc, #36]	; (401e34 <Reset_Handler+0xc0>)
  401e0e:	4798      	blx	r3

	/* Branch to main function */
	main();
  401e10:	4b09      	ldr	r3, [pc, #36]	; (401e38 <Reset_Handler+0xc4>)
  401e12:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401e14:	e7fe      	b.n	401e14 <Reset_Handler+0xa0>
  401e16:	bf00      	nop
  401e18:	00402e7c 	.word	0x00402e7c
  401e1c:	20000000 	.word	0x20000000
  401e20:	20000438 	.word	0x20000438
  401e24:	20000438 	.word	0x20000438
  401e28:	20001694 	.word	0x20001694
  401e2c:	00400000 	.word	0x00400000
  401e30:	e000ed00 	.word	0xe000ed00
  401e34:	004023dd 	.word	0x004023dd
  401e38:	00402071 	.word	0x00402071

00401e3c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401e3c:	b480      	push	{r7}
  401e3e:	af00      	add	r7, sp, #0
	while (1) {
  401e40:	e7fe      	b.n	401e40 <Dummy_Handler+0x4>
	...

00401e44 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401e44:	b480      	push	{r7}
  401e46:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401e48:	4b5d      	ldr	r3, [pc, #372]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e4c:	f003 0303 	and.w	r3, r3, #3
  401e50:	2b03      	cmp	r3, #3
  401e52:	f200 8096 	bhi.w	401f82 <SystemCoreClockUpdate+0x13e>
  401e56:	a201      	add	r2, pc, #4	; (adr r2, 401e5c <SystemCoreClockUpdate+0x18>)
  401e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401e5c:	00401e6d 	.word	0x00401e6d
  401e60:	00401e8d 	.word	0x00401e8d
  401e64:	00401ed7 	.word	0x00401ed7
  401e68:	00401ed7 	.word	0x00401ed7
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401e6c:	4b55      	ldr	r3, [pc, #340]	; (401fc4 <SystemCoreClockUpdate+0x180>)
  401e6e:	695b      	ldr	r3, [r3, #20]
  401e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e74:	2b00      	cmp	r3, #0
  401e76:	d004      	beq.n	401e82 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401e78:	4b53      	ldr	r3, [pc, #332]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401e7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e7e:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401e80:	e080      	b.n	401f84 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401e82:	4b51      	ldr	r3, [pc, #324]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401e84:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401e88:	601a      	str	r2, [r3, #0]
		break;
  401e8a:	e07b      	b.n	401f84 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401e8c:	4b4c      	ldr	r3, [pc, #304]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401e8e:	6a1b      	ldr	r3, [r3, #32]
  401e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401e94:	2b00      	cmp	r3, #0
  401e96:	d003      	beq.n	401ea0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401e98:	4b4b      	ldr	r3, [pc, #300]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401e9a:	4a4c      	ldr	r2, [pc, #304]	; (401fcc <SystemCoreClockUpdate+0x188>)
  401e9c:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401e9e:	e071      	b.n	401f84 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ea0:	4b49      	ldr	r3, [pc, #292]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401ea2:	4a4b      	ldr	r2, [pc, #300]	; (401fd0 <SystemCoreClockUpdate+0x18c>)
  401ea4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401ea6:	4b46      	ldr	r3, [pc, #280]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401ea8:	6a1b      	ldr	r3, [r3, #32]
  401eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401eae:	2b10      	cmp	r3, #16
  401eb0:	d008      	beq.n	401ec4 <SystemCoreClockUpdate+0x80>
  401eb2:	2b20      	cmp	r3, #32
  401eb4:	d00a      	beq.n	401ecc <SystemCoreClockUpdate+0x88>
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d000      	beq.n	401ebc <SystemCoreClockUpdate+0x78>
			break;
  401eba:	e00b      	b.n	401ed4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ebc:	4b42      	ldr	r3, [pc, #264]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401ebe:	4a44      	ldr	r2, [pc, #272]	; (401fd0 <SystemCoreClockUpdate+0x18c>)
  401ec0:	601a      	str	r2, [r3, #0]
			break;
  401ec2:	e007      	b.n	401ed4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401ec4:	4b40      	ldr	r3, [pc, #256]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401ec6:	4a43      	ldr	r2, [pc, #268]	; (401fd4 <SystemCoreClockUpdate+0x190>)
  401ec8:	601a      	str	r2, [r3, #0]
			break;
  401eca:	e003      	b.n	401ed4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401ecc:	4b3e      	ldr	r3, [pc, #248]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401ece:	4a3f      	ldr	r2, [pc, #252]	; (401fcc <SystemCoreClockUpdate+0x188>)
  401ed0:	601a      	str	r2, [r3, #0]
			break;
  401ed2:	bf00      	nop
		break;
  401ed4:	e056      	b.n	401f84 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401ed6:	4b3a      	ldr	r3, [pc, #232]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401ed8:	6a1b      	ldr	r3, [r3, #32]
  401eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401ede:	2b00      	cmp	r3, #0
  401ee0:	d003      	beq.n	401eea <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401ee2:	4b39      	ldr	r3, [pc, #228]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401ee4:	4a39      	ldr	r2, [pc, #228]	; (401fcc <SystemCoreClockUpdate+0x188>)
  401ee6:	601a      	str	r2, [r3, #0]
  401ee8:	e019      	b.n	401f1e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401eea:	4b37      	ldr	r3, [pc, #220]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401eec:	4a38      	ldr	r2, [pc, #224]	; (401fd0 <SystemCoreClockUpdate+0x18c>)
  401eee:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401ef0:	4b33      	ldr	r3, [pc, #204]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401ef2:	6a1b      	ldr	r3, [r3, #32]
  401ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ef8:	2b10      	cmp	r3, #16
  401efa:	d008      	beq.n	401f0e <SystemCoreClockUpdate+0xca>
  401efc:	2b20      	cmp	r3, #32
  401efe:	d00a      	beq.n	401f16 <SystemCoreClockUpdate+0xd2>
  401f00:	2b00      	cmp	r3, #0
  401f02:	d000      	beq.n	401f06 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401f04:	e00b      	b.n	401f1e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f06:	4b30      	ldr	r3, [pc, #192]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f08:	4a31      	ldr	r2, [pc, #196]	; (401fd0 <SystemCoreClockUpdate+0x18c>)
  401f0a:	601a      	str	r2, [r3, #0]
					break;
  401f0c:	e007      	b.n	401f1e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401f0e:	4b2e      	ldr	r3, [pc, #184]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f10:	4a30      	ldr	r2, [pc, #192]	; (401fd4 <SystemCoreClockUpdate+0x190>)
  401f12:	601a      	str	r2, [r3, #0]
					break;
  401f14:	e003      	b.n	401f1e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401f16:	4b2c      	ldr	r3, [pc, #176]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f18:	4a2c      	ldr	r2, [pc, #176]	; (401fcc <SystemCoreClockUpdate+0x188>)
  401f1a:	601a      	str	r2, [r3, #0]
					break;
  401f1c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401f1e:	4b28      	ldr	r3, [pc, #160]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f22:	f003 0303 	and.w	r3, r3, #3
  401f26:	2b02      	cmp	r3, #2
  401f28:	d115      	bne.n	401f56 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401f2a:	4b25      	ldr	r3, [pc, #148]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401f2e:	0c1b      	lsrs	r3, r3, #16
  401f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401f34:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401f36:	4a24      	ldr	r2, [pc, #144]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f38:	6812      	ldr	r2, [r2, #0]
  401f3a:	fb02 f303 	mul.w	r3, r2, r3
  401f3e:	4a22      	ldr	r2, [pc, #136]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f40:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401f42:	4b1f      	ldr	r3, [pc, #124]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401f46:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401f48:	4a1f      	ldr	r2, [pc, #124]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f4a:	6812      	ldr	r2, [r2, #0]
  401f4c:	fbb2 f3f3 	udiv	r3, r2, r3
  401f50:	4a1d      	ldr	r2, [pc, #116]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f52:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401f54:	e016      	b.n	401f84 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401f56:	4b1a      	ldr	r3, [pc, #104]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401f5a:	0c1b      	lsrs	r3, r3, #16
  401f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401f60:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401f62:	4a19      	ldr	r2, [pc, #100]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f64:	6812      	ldr	r2, [r2, #0]
  401f66:	fb02 f303 	mul.w	r3, r2, r3
  401f6a:	4a17      	ldr	r2, [pc, #92]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f6c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401f6e:	4b14      	ldr	r3, [pc, #80]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401f72:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401f74:	4a14      	ldr	r2, [pc, #80]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f76:	6812      	ldr	r2, [r2, #0]
  401f78:	fbb2 f3f3 	udiv	r3, r2, r3
  401f7c:	4a12      	ldr	r2, [pc, #72]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f7e:	6013      	str	r3, [r2, #0]
		break;
  401f80:	e000      	b.n	401f84 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  401f82:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401f84:	4b0e      	ldr	r3, [pc, #56]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f8c:	2b70      	cmp	r3, #112	; 0x70
  401f8e:	d108      	bne.n	401fa2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  401f90:	4b0d      	ldr	r3, [pc, #52]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f92:	681b      	ldr	r3, [r3, #0]
  401f94:	4a10      	ldr	r2, [pc, #64]	; (401fd8 <SystemCoreClockUpdate+0x194>)
  401f96:	fba2 2303 	umull	r2, r3, r2, r3
  401f9a:	085b      	lsrs	r3, r3, #1
  401f9c:	4a0a      	ldr	r2, [pc, #40]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401f9e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  401fa0:	e00a      	b.n	401fb8 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401fa2:	4b07      	ldr	r3, [pc, #28]	; (401fc0 <SystemCoreClockUpdate+0x17c>)
  401fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fa6:	091b      	lsrs	r3, r3, #4
  401fa8:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  401fac:	4a06      	ldr	r2, [pc, #24]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401fae:	6812      	ldr	r2, [r2, #0]
  401fb0:	fa22 f303 	lsr.w	r3, r2, r3
  401fb4:	4a04      	ldr	r2, [pc, #16]	; (401fc8 <SystemCoreClockUpdate+0x184>)
  401fb6:	6013      	str	r3, [r2, #0]
}
  401fb8:	bf00      	nop
  401fba:	46bd      	mov	sp, r7
  401fbc:	bc80      	pop	{r7}
  401fbe:	4770      	bx	lr
  401fc0:	400e0400 	.word	0x400e0400
  401fc4:	400e1410 	.word	0x400e1410
  401fc8:	2000000c 	.word	0x2000000c
  401fcc:	00b71b00 	.word	0x00b71b00
  401fd0:	003d0900 	.word	0x003d0900
  401fd4:	007a1200 	.word	0x007a1200
  401fd8:	aaaaaaab 	.word	0xaaaaaaab

00401fdc <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401fdc:	b480      	push	{r7}
  401fde:	b083      	sub	sp, #12
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401fe4:	687b      	ldr	r3, [r7, #4]
  401fe6:	4a18      	ldr	r2, [pc, #96]	; (402048 <system_init_flash+0x6c>)
  401fe8:	4293      	cmp	r3, r2
  401fea:	d804      	bhi.n	401ff6 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401fec:	4b17      	ldr	r3, [pc, #92]	; (40204c <system_init_flash+0x70>)
  401fee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401ff2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  401ff4:	e023      	b.n	40203e <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401ff6:	687b      	ldr	r3, [r7, #4]
  401ff8:	4a15      	ldr	r2, [pc, #84]	; (402050 <system_init_flash+0x74>)
  401ffa:	4293      	cmp	r3, r2
  401ffc:	d803      	bhi.n	402006 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401ffe:	4b13      	ldr	r3, [pc, #76]	; (40204c <system_init_flash+0x70>)
  402000:	4a14      	ldr	r2, [pc, #80]	; (402054 <system_init_flash+0x78>)
  402002:	601a      	str	r2, [r3, #0]
}
  402004:	e01b      	b.n	40203e <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402006:	687b      	ldr	r3, [r7, #4]
  402008:	4a13      	ldr	r2, [pc, #76]	; (402058 <system_init_flash+0x7c>)
  40200a:	4293      	cmp	r3, r2
  40200c:	d803      	bhi.n	402016 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40200e:	4b0f      	ldr	r3, [pc, #60]	; (40204c <system_init_flash+0x70>)
  402010:	4a12      	ldr	r2, [pc, #72]	; (40205c <system_init_flash+0x80>)
  402012:	601a      	str	r2, [r3, #0]
}
  402014:	e013      	b.n	40203e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402016:	687b      	ldr	r3, [r7, #4]
  402018:	4a11      	ldr	r2, [pc, #68]	; (402060 <system_init_flash+0x84>)
  40201a:	4293      	cmp	r3, r2
  40201c:	d803      	bhi.n	402026 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40201e:	4b0b      	ldr	r3, [pc, #44]	; (40204c <system_init_flash+0x70>)
  402020:	4a10      	ldr	r2, [pc, #64]	; (402064 <system_init_flash+0x88>)
  402022:	601a      	str	r2, [r3, #0]
}
  402024:	e00b      	b.n	40203e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402026:	687b      	ldr	r3, [r7, #4]
  402028:	4a0f      	ldr	r2, [pc, #60]	; (402068 <system_init_flash+0x8c>)
  40202a:	4293      	cmp	r3, r2
  40202c:	d804      	bhi.n	402038 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40202e:	4b07      	ldr	r3, [pc, #28]	; (40204c <system_init_flash+0x70>)
  402030:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402034:	601a      	str	r2, [r3, #0]
}
  402036:	e002      	b.n	40203e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402038:	4b04      	ldr	r3, [pc, #16]	; (40204c <system_init_flash+0x70>)
  40203a:	4a0c      	ldr	r2, [pc, #48]	; (40206c <system_init_flash+0x90>)
  40203c:	601a      	str	r2, [r3, #0]
}
  40203e:	bf00      	nop
  402040:	370c      	adds	r7, #12
  402042:	46bd      	mov	sp, r7
  402044:	bc80      	pop	{r7}
  402046:	4770      	bx	lr
  402048:	01312cff 	.word	0x01312cff
  40204c:	400e0a00 	.word	0x400e0a00
  402050:	026259ff 	.word	0x026259ff
  402054:	04000100 	.word	0x04000100
  402058:	039386ff 	.word	0x039386ff
  40205c:	04000200 	.word	0x04000200
  402060:	04c4b3ff 	.word	0x04c4b3ff
  402064:	04000300 	.word	0x04000300
  402068:	05f5e0ff 	.word	0x05f5e0ff
  40206c:	04000500 	.word	0x04000500

00402070 <main>:
		}
	}
}

int main (void)
{
  402070:	b580      	push	{r7, lr}
  402072:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  402074:	4b0b      	ldr	r3, [pc, #44]	; (4020a4 <main+0x34>)
  402076:	4798      	blx	r3
	board_init();
  402078:	4b0b      	ldr	r3, [pc, #44]	; (4020a8 <main+0x38>)
  40207a:	4798      	blx	r3
	configure_tc();
  40207c:	4b0b      	ldr	r3, [pc, #44]	; (4020ac <main+0x3c>)
  40207e:	4798      	blx	r3
	tc_start(TC0, 0);
  402080:	2100      	movs	r1, #0
  402082:	480b      	ldr	r0, [pc, #44]	; (4020b0 <main+0x40>)
  402084:	4b0b      	ldr	r3, [pc, #44]	; (4020b4 <main+0x44>)
  402086:	4798      	blx	r3
	
	ADC_setup();
  402088:	4b0b      	ldr	r3, [pc, #44]	; (4020b8 <main+0x48>)
  40208a:	4798      	blx	r3

	//configure_i2s();

	//uint16_t *samples_data = generate_spoof(440);
	while(1) {
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  40208c:	4b0b      	ldr	r3, [pc, #44]	; (4020bc <main+0x4c>)
  40208e:	681b      	ldr	r3, [r3, #0]
  402090:	2b00      	cmp	r3, #0
  402092:	d001      	beq.n	402098 <main+0x28>
			setup_wifi();		// the wifi chip tries to reassociate to a new network
  402094:	4b0a      	ldr	r3, [pc, #40]	; (4020c0 <main+0x50>)
  402096:	4798      	blx	r3
		}
		
		blink_LED(100);
  402098:	2064      	movs	r0, #100	; 0x64
  40209a:	4b0a      	ldr	r3, [pc, #40]	; (4020c4 <main+0x54>)
  40209c:	4798      	blx	r3

		audio_capture();
  40209e:	4b0a      	ldr	r3, [pc, #40]	; (4020c8 <main+0x58>)
  4020a0:	4798      	blx	r3
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  4020a2:	e7f3      	b.n	40208c <main+0x1c>
  4020a4:	00401285 	.word	0x00401285
  4020a8:	00401c39 	.word	0x00401c39
  4020ac:	00400a09 	.word	0x00400a09
  4020b0:	40010000 	.word	0x40010000
  4020b4:	004002c5 	.word	0x004002c5
  4020b8:	004004e5 	.word	0x004004e5
  4020bc:	20001684 	.word	0x20001684
  4020c0:	00400eb5 	.word	0x00400eb5
  4020c4:	00400cf1 	.word	0x00400cf1
  4020c8:	00400575 	.word	0x00400575

004020cc <__aeabi_uldivmod>:
  4020cc:	b953      	cbnz	r3, 4020e4 <__aeabi_uldivmod+0x18>
  4020ce:	b94a      	cbnz	r2, 4020e4 <__aeabi_uldivmod+0x18>
  4020d0:	2900      	cmp	r1, #0
  4020d2:	bf08      	it	eq
  4020d4:	2800      	cmpeq	r0, #0
  4020d6:	bf1c      	itt	ne
  4020d8:	f04f 31ff 	movne.w	r1, #4294967295
  4020dc:	f04f 30ff 	movne.w	r0, #4294967295
  4020e0:	f000 b97a 	b.w	4023d8 <__aeabi_idiv0>
  4020e4:	f1ad 0c08 	sub.w	ip, sp, #8
  4020e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4020ec:	f000 f806 	bl	4020fc <__udivmoddi4>
  4020f0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4020f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4020f8:	b004      	add	sp, #16
  4020fa:	4770      	bx	lr

004020fc <__udivmoddi4>:
  4020fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402100:	468c      	mov	ip, r1
  402102:	460d      	mov	r5, r1
  402104:	4604      	mov	r4, r0
  402106:	9e08      	ldr	r6, [sp, #32]
  402108:	2b00      	cmp	r3, #0
  40210a:	d151      	bne.n	4021b0 <__udivmoddi4+0xb4>
  40210c:	428a      	cmp	r2, r1
  40210e:	4617      	mov	r7, r2
  402110:	d96d      	bls.n	4021ee <__udivmoddi4+0xf2>
  402112:	fab2 fe82 	clz	lr, r2
  402116:	f1be 0f00 	cmp.w	lr, #0
  40211a:	d00b      	beq.n	402134 <__udivmoddi4+0x38>
  40211c:	f1ce 0c20 	rsb	ip, lr, #32
  402120:	fa01 f50e 	lsl.w	r5, r1, lr
  402124:	fa20 fc0c 	lsr.w	ip, r0, ip
  402128:	fa02 f70e 	lsl.w	r7, r2, lr
  40212c:	ea4c 0c05 	orr.w	ip, ip, r5
  402130:	fa00 f40e 	lsl.w	r4, r0, lr
  402134:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402138:	0c25      	lsrs	r5, r4, #16
  40213a:	fbbc f8fa 	udiv	r8, ip, sl
  40213e:	fa1f f987 	uxth.w	r9, r7
  402142:	fb0a cc18 	mls	ip, sl, r8, ip
  402146:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40214a:	fb08 f309 	mul.w	r3, r8, r9
  40214e:	42ab      	cmp	r3, r5
  402150:	d90a      	bls.n	402168 <__udivmoddi4+0x6c>
  402152:	19ed      	adds	r5, r5, r7
  402154:	f108 32ff 	add.w	r2, r8, #4294967295
  402158:	f080 8123 	bcs.w	4023a2 <__udivmoddi4+0x2a6>
  40215c:	42ab      	cmp	r3, r5
  40215e:	f240 8120 	bls.w	4023a2 <__udivmoddi4+0x2a6>
  402162:	f1a8 0802 	sub.w	r8, r8, #2
  402166:	443d      	add	r5, r7
  402168:	1aed      	subs	r5, r5, r3
  40216a:	b2a4      	uxth	r4, r4
  40216c:	fbb5 f0fa 	udiv	r0, r5, sl
  402170:	fb0a 5510 	mls	r5, sl, r0, r5
  402174:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402178:	fb00 f909 	mul.w	r9, r0, r9
  40217c:	45a1      	cmp	r9, r4
  40217e:	d909      	bls.n	402194 <__udivmoddi4+0x98>
  402180:	19e4      	adds	r4, r4, r7
  402182:	f100 33ff 	add.w	r3, r0, #4294967295
  402186:	f080 810a 	bcs.w	40239e <__udivmoddi4+0x2a2>
  40218a:	45a1      	cmp	r9, r4
  40218c:	f240 8107 	bls.w	40239e <__udivmoddi4+0x2a2>
  402190:	3802      	subs	r0, #2
  402192:	443c      	add	r4, r7
  402194:	eba4 0409 	sub.w	r4, r4, r9
  402198:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40219c:	2100      	movs	r1, #0
  40219e:	2e00      	cmp	r6, #0
  4021a0:	d061      	beq.n	402266 <__udivmoddi4+0x16a>
  4021a2:	fa24 f40e 	lsr.w	r4, r4, lr
  4021a6:	2300      	movs	r3, #0
  4021a8:	6034      	str	r4, [r6, #0]
  4021aa:	6073      	str	r3, [r6, #4]
  4021ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021b0:	428b      	cmp	r3, r1
  4021b2:	d907      	bls.n	4021c4 <__udivmoddi4+0xc8>
  4021b4:	2e00      	cmp	r6, #0
  4021b6:	d054      	beq.n	402262 <__udivmoddi4+0x166>
  4021b8:	2100      	movs	r1, #0
  4021ba:	e886 0021 	stmia.w	r6, {r0, r5}
  4021be:	4608      	mov	r0, r1
  4021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021c4:	fab3 f183 	clz	r1, r3
  4021c8:	2900      	cmp	r1, #0
  4021ca:	f040 808e 	bne.w	4022ea <__udivmoddi4+0x1ee>
  4021ce:	42ab      	cmp	r3, r5
  4021d0:	d302      	bcc.n	4021d8 <__udivmoddi4+0xdc>
  4021d2:	4282      	cmp	r2, r0
  4021d4:	f200 80fa 	bhi.w	4023cc <__udivmoddi4+0x2d0>
  4021d8:	1a84      	subs	r4, r0, r2
  4021da:	eb65 0503 	sbc.w	r5, r5, r3
  4021de:	2001      	movs	r0, #1
  4021e0:	46ac      	mov	ip, r5
  4021e2:	2e00      	cmp	r6, #0
  4021e4:	d03f      	beq.n	402266 <__udivmoddi4+0x16a>
  4021e6:	e886 1010 	stmia.w	r6, {r4, ip}
  4021ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021ee:	b912      	cbnz	r2, 4021f6 <__udivmoddi4+0xfa>
  4021f0:	2701      	movs	r7, #1
  4021f2:	fbb7 f7f2 	udiv	r7, r7, r2
  4021f6:	fab7 fe87 	clz	lr, r7
  4021fa:	f1be 0f00 	cmp.w	lr, #0
  4021fe:	d134      	bne.n	40226a <__udivmoddi4+0x16e>
  402200:	1beb      	subs	r3, r5, r7
  402202:	0c3a      	lsrs	r2, r7, #16
  402204:	fa1f fc87 	uxth.w	ip, r7
  402208:	2101      	movs	r1, #1
  40220a:	fbb3 f8f2 	udiv	r8, r3, r2
  40220e:	0c25      	lsrs	r5, r4, #16
  402210:	fb02 3318 	mls	r3, r2, r8, r3
  402214:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402218:	fb0c f308 	mul.w	r3, ip, r8
  40221c:	42ab      	cmp	r3, r5
  40221e:	d907      	bls.n	402230 <__udivmoddi4+0x134>
  402220:	19ed      	adds	r5, r5, r7
  402222:	f108 30ff 	add.w	r0, r8, #4294967295
  402226:	d202      	bcs.n	40222e <__udivmoddi4+0x132>
  402228:	42ab      	cmp	r3, r5
  40222a:	f200 80d1 	bhi.w	4023d0 <__udivmoddi4+0x2d4>
  40222e:	4680      	mov	r8, r0
  402230:	1aed      	subs	r5, r5, r3
  402232:	b2a3      	uxth	r3, r4
  402234:	fbb5 f0f2 	udiv	r0, r5, r2
  402238:	fb02 5510 	mls	r5, r2, r0, r5
  40223c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402240:	fb0c fc00 	mul.w	ip, ip, r0
  402244:	45a4      	cmp	ip, r4
  402246:	d907      	bls.n	402258 <__udivmoddi4+0x15c>
  402248:	19e4      	adds	r4, r4, r7
  40224a:	f100 33ff 	add.w	r3, r0, #4294967295
  40224e:	d202      	bcs.n	402256 <__udivmoddi4+0x15a>
  402250:	45a4      	cmp	ip, r4
  402252:	f200 80b8 	bhi.w	4023c6 <__udivmoddi4+0x2ca>
  402256:	4618      	mov	r0, r3
  402258:	eba4 040c 	sub.w	r4, r4, ip
  40225c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402260:	e79d      	b.n	40219e <__udivmoddi4+0xa2>
  402262:	4631      	mov	r1, r6
  402264:	4630      	mov	r0, r6
  402266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40226a:	f1ce 0420 	rsb	r4, lr, #32
  40226e:	fa05 f30e 	lsl.w	r3, r5, lr
  402272:	fa07 f70e 	lsl.w	r7, r7, lr
  402276:	fa20 f804 	lsr.w	r8, r0, r4
  40227a:	0c3a      	lsrs	r2, r7, #16
  40227c:	fa25 f404 	lsr.w	r4, r5, r4
  402280:	ea48 0803 	orr.w	r8, r8, r3
  402284:	fbb4 f1f2 	udiv	r1, r4, r2
  402288:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40228c:	fb02 4411 	mls	r4, r2, r1, r4
  402290:	fa1f fc87 	uxth.w	ip, r7
  402294:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402298:	fb01 f30c 	mul.w	r3, r1, ip
  40229c:	42ab      	cmp	r3, r5
  40229e:	fa00 f40e 	lsl.w	r4, r0, lr
  4022a2:	d909      	bls.n	4022b8 <__udivmoddi4+0x1bc>
  4022a4:	19ed      	adds	r5, r5, r7
  4022a6:	f101 30ff 	add.w	r0, r1, #4294967295
  4022aa:	f080 808a 	bcs.w	4023c2 <__udivmoddi4+0x2c6>
  4022ae:	42ab      	cmp	r3, r5
  4022b0:	f240 8087 	bls.w	4023c2 <__udivmoddi4+0x2c6>
  4022b4:	3902      	subs	r1, #2
  4022b6:	443d      	add	r5, r7
  4022b8:	1aeb      	subs	r3, r5, r3
  4022ba:	fa1f f588 	uxth.w	r5, r8
  4022be:	fbb3 f0f2 	udiv	r0, r3, r2
  4022c2:	fb02 3310 	mls	r3, r2, r0, r3
  4022c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4022ca:	fb00 f30c 	mul.w	r3, r0, ip
  4022ce:	42ab      	cmp	r3, r5
  4022d0:	d907      	bls.n	4022e2 <__udivmoddi4+0x1e6>
  4022d2:	19ed      	adds	r5, r5, r7
  4022d4:	f100 38ff 	add.w	r8, r0, #4294967295
  4022d8:	d26f      	bcs.n	4023ba <__udivmoddi4+0x2be>
  4022da:	42ab      	cmp	r3, r5
  4022dc:	d96d      	bls.n	4023ba <__udivmoddi4+0x2be>
  4022de:	3802      	subs	r0, #2
  4022e0:	443d      	add	r5, r7
  4022e2:	1aeb      	subs	r3, r5, r3
  4022e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4022e8:	e78f      	b.n	40220a <__udivmoddi4+0x10e>
  4022ea:	f1c1 0720 	rsb	r7, r1, #32
  4022ee:	fa22 f807 	lsr.w	r8, r2, r7
  4022f2:	408b      	lsls	r3, r1
  4022f4:	fa05 f401 	lsl.w	r4, r5, r1
  4022f8:	ea48 0303 	orr.w	r3, r8, r3
  4022fc:	fa20 fe07 	lsr.w	lr, r0, r7
  402300:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402304:	40fd      	lsrs	r5, r7
  402306:	ea4e 0e04 	orr.w	lr, lr, r4
  40230a:	fbb5 f9fc 	udiv	r9, r5, ip
  40230e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402312:	fb0c 5519 	mls	r5, ip, r9, r5
  402316:	fa1f f883 	uxth.w	r8, r3
  40231a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40231e:	fb09 f408 	mul.w	r4, r9, r8
  402322:	42ac      	cmp	r4, r5
  402324:	fa02 f201 	lsl.w	r2, r2, r1
  402328:	fa00 fa01 	lsl.w	sl, r0, r1
  40232c:	d908      	bls.n	402340 <__udivmoddi4+0x244>
  40232e:	18ed      	adds	r5, r5, r3
  402330:	f109 30ff 	add.w	r0, r9, #4294967295
  402334:	d243      	bcs.n	4023be <__udivmoddi4+0x2c2>
  402336:	42ac      	cmp	r4, r5
  402338:	d941      	bls.n	4023be <__udivmoddi4+0x2c2>
  40233a:	f1a9 0902 	sub.w	r9, r9, #2
  40233e:	441d      	add	r5, r3
  402340:	1b2d      	subs	r5, r5, r4
  402342:	fa1f fe8e 	uxth.w	lr, lr
  402346:	fbb5 f0fc 	udiv	r0, r5, ip
  40234a:	fb0c 5510 	mls	r5, ip, r0, r5
  40234e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402352:	fb00 f808 	mul.w	r8, r0, r8
  402356:	45a0      	cmp	r8, r4
  402358:	d907      	bls.n	40236a <__udivmoddi4+0x26e>
  40235a:	18e4      	adds	r4, r4, r3
  40235c:	f100 35ff 	add.w	r5, r0, #4294967295
  402360:	d229      	bcs.n	4023b6 <__udivmoddi4+0x2ba>
  402362:	45a0      	cmp	r8, r4
  402364:	d927      	bls.n	4023b6 <__udivmoddi4+0x2ba>
  402366:	3802      	subs	r0, #2
  402368:	441c      	add	r4, r3
  40236a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40236e:	eba4 0408 	sub.w	r4, r4, r8
  402372:	fba0 8902 	umull	r8, r9, r0, r2
  402376:	454c      	cmp	r4, r9
  402378:	46c6      	mov	lr, r8
  40237a:	464d      	mov	r5, r9
  40237c:	d315      	bcc.n	4023aa <__udivmoddi4+0x2ae>
  40237e:	d012      	beq.n	4023a6 <__udivmoddi4+0x2aa>
  402380:	b156      	cbz	r6, 402398 <__udivmoddi4+0x29c>
  402382:	ebba 030e 	subs.w	r3, sl, lr
  402386:	eb64 0405 	sbc.w	r4, r4, r5
  40238a:	fa04 f707 	lsl.w	r7, r4, r7
  40238e:	40cb      	lsrs	r3, r1
  402390:	431f      	orrs	r7, r3
  402392:	40cc      	lsrs	r4, r1
  402394:	6037      	str	r7, [r6, #0]
  402396:	6074      	str	r4, [r6, #4]
  402398:	2100      	movs	r1, #0
  40239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40239e:	4618      	mov	r0, r3
  4023a0:	e6f8      	b.n	402194 <__udivmoddi4+0x98>
  4023a2:	4690      	mov	r8, r2
  4023a4:	e6e0      	b.n	402168 <__udivmoddi4+0x6c>
  4023a6:	45c2      	cmp	sl, r8
  4023a8:	d2ea      	bcs.n	402380 <__udivmoddi4+0x284>
  4023aa:	ebb8 0e02 	subs.w	lr, r8, r2
  4023ae:	eb69 0503 	sbc.w	r5, r9, r3
  4023b2:	3801      	subs	r0, #1
  4023b4:	e7e4      	b.n	402380 <__udivmoddi4+0x284>
  4023b6:	4628      	mov	r0, r5
  4023b8:	e7d7      	b.n	40236a <__udivmoddi4+0x26e>
  4023ba:	4640      	mov	r0, r8
  4023bc:	e791      	b.n	4022e2 <__udivmoddi4+0x1e6>
  4023be:	4681      	mov	r9, r0
  4023c0:	e7be      	b.n	402340 <__udivmoddi4+0x244>
  4023c2:	4601      	mov	r1, r0
  4023c4:	e778      	b.n	4022b8 <__udivmoddi4+0x1bc>
  4023c6:	3802      	subs	r0, #2
  4023c8:	443c      	add	r4, r7
  4023ca:	e745      	b.n	402258 <__udivmoddi4+0x15c>
  4023cc:	4608      	mov	r0, r1
  4023ce:	e708      	b.n	4021e2 <__udivmoddi4+0xe6>
  4023d0:	f1a8 0802 	sub.w	r8, r8, #2
  4023d4:	443d      	add	r5, r7
  4023d6:	e72b      	b.n	402230 <__udivmoddi4+0x134>

004023d8 <__aeabi_idiv0>:
  4023d8:	4770      	bx	lr
  4023da:	bf00      	nop

004023dc <__libc_init_array>:
  4023dc:	b570      	push	{r4, r5, r6, lr}
  4023de:	4e0f      	ldr	r6, [pc, #60]	; (40241c <__libc_init_array+0x40>)
  4023e0:	4d0f      	ldr	r5, [pc, #60]	; (402420 <__libc_init_array+0x44>)
  4023e2:	1b76      	subs	r6, r6, r5
  4023e4:	10b6      	asrs	r6, r6, #2
  4023e6:	bf18      	it	ne
  4023e8:	2400      	movne	r4, #0
  4023ea:	d005      	beq.n	4023f8 <__libc_init_array+0x1c>
  4023ec:	3401      	adds	r4, #1
  4023ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4023f2:	4798      	blx	r3
  4023f4:	42a6      	cmp	r6, r4
  4023f6:	d1f9      	bne.n	4023ec <__libc_init_array+0x10>
  4023f8:	4e0a      	ldr	r6, [pc, #40]	; (402424 <__libc_init_array+0x48>)
  4023fa:	4d0b      	ldr	r5, [pc, #44]	; (402428 <__libc_init_array+0x4c>)
  4023fc:	1b76      	subs	r6, r6, r5
  4023fe:	f000 fd27 	bl	402e50 <_init>
  402402:	10b6      	asrs	r6, r6, #2
  402404:	bf18      	it	ne
  402406:	2400      	movne	r4, #0
  402408:	d006      	beq.n	402418 <__libc_init_array+0x3c>
  40240a:	3401      	adds	r4, #1
  40240c:	f855 3b04 	ldr.w	r3, [r5], #4
  402410:	4798      	blx	r3
  402412:	42a6      	cmp	r6, r4
  402414:	d1f9      	bne.n	40240a <__libc_init_array+0x2e>
  402416:	bd70      	pop	{r4, r5, r6, pc}
  402418:	bd70      	pop	{r4, r5, r6, pc}
  40241a:	bf00      	nop
  40241c:	00402e5c 	.word	0x00402e5c
  402420:	00402e5c 	.word	0x00402e5c
  402424:	00402e64 	.word	0x00402e64
  402428:	00402e5c 	.word	0x00402e5c

0040242c <memset>:
  40242c:	b470      	push	{r4, r5, r6}
  40242e:	0786      	lsls	r6, r0, #30
  402430:	d046      	beq.n	4024c0 <memset+0x94>
  402432:	1e54      	subs	r4, r2, #1
  402434:	2a00      	cmp	r2, #0
  402436:	d041      	beq.n	4024bc <memset+0x90>
  402438:	b2ca      	uxtb	r2, r1
  40243a:	4603      	mov	r3, r0
  40243c:	e002      	b.n	402444 <memset+0x18>
  40243e:	f114 34ff 	adds.w	r4, r4, #4294967295
  402442:	d33b      	bcc.n	4024bc <memset+0x90>
  402444:	f803 2b01 	strb.w	r2, [r3], #1
  402448:	079d      	lsls	r5, r3, #30
  40244a:	d1f8      	bne.n	40243e <memset+0x12>
  40244c:	2c03      	cmp	r4, #3
  40244e:	d92e      	bls.n	4024ae <memset+0x82>
  402450:	b2cd      	uxtb	r5, r1
  402452:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402456:	2c0f      	cmp	r4, #15
  402458:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40245c:	d919      	bls.n	402492 <memset+0x66>
  40245e:	f103 0210 	add.w	r2, r3, #16
  402462:	4626      	mov	r6, r4
  402464:	3e10      	subs	r6, #16
  402466:	2e0f      	cmp	r6, #15
  402468:	f842 5c10 	str.w	r5, [r2, #-16]
  40246c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402470:	f842 5c08 	str.w	r5, [r2, #-8]
  402474:	f842 5c04 	str.w	r5, [r2, #-4]
  402478:	f102 0210 	add.w	r2, r2, #16
  40247c:	d8f2      	bhi.n	402464 <memset+0x38>
  40247e:	f1a4 0210 	sub.w	r2, r4, #16
  402482:	f022 020f 	bic.w	r2, r2, #15
  402486:	f004 040f 	and.w	r4, r4, #15
  40248a:	3210      	adds	r2, #16
  40248c:	2c03      	cmp	r4, #3
  40248e:	4413      	add	r3, r2
  402490:	d90d      	bls.n	4024ae <memset+0x82>
  402492:	461e      	mov	r6, r3
  402494:	4622      	mov	r2, r4
  402496:	3a04      	subs	r2, #4
  402498:	2a03      	cmp	r2, #3
  40249a:	f846 5b04 	str.w	r5, [r6], #4
  40249e:	d8fa      	bhi.n	402496 <memset+0x6a>
  4024a0:	1f22      	subs	r2, r4, #4
  4024a2:	f022 0203 	bic.w	r2, r2, #3
  4024a6:	3204      	adds	r2, #4
  4024a8:	4413      	add	r3, r2
  4024aa:	f004 0403 	and.w	r4, r4, #3
  4024ae:	b12c      	cbz	r4, 4024bc <memset+0x90>
  4024b0:	b2c9      	uxtb	r1, r1
  4024b2:	441c      	add	r4, r3
  4024b4:	f803 1b01 	strb.w	r1, [r3], #1
  4024b8:	429c      	cmp	r4, r3
  4024ba:	d1fb      	bne.n	4024b4 <memset+0x88>
  4024bc:	bc70      	pop	{r4, r5, r6}
  4024be:	4770      	bx	lr
  4024c0:	4614      	mov	r4, r2
  4024c2:	4603      	mov	r3, r0
  4024c4:	e7c2      	b.n	40244c <memset+0x20>
  4024c6:	bf00      	nop

004024c8 <critical_factorization>:
  4024c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024cc:	f04f 0e01 	mov.w	lr, #1
  4024d0:	4674      	mov	r4, lr
  4024d2:	2500      	movs	r5, #0
  4024d4:	f04f 36ff 	mov.w	r6, #4294967295
  4024d8:	192b      	adds	r3, r5, r4
  4024da:	428b      	cmp	r3, r1
  4024dc:	eb00 0706 	add.w	r7, r0, r6
  4024e0:	d20d      	bcs.n	4024fe <critical_factorization+0x36>
  4024e2:	5d3f      	ldrb	r7, [r7, r4]
  4024e4:	f810 c003 	ldrb.w	ip, [r0, r3]
  4024e8:	45bc      	cmp	ip, r7
  4024ea:	d22d      	bcs.n	402548 <critical_factorization+0x80>
  4024ec:	461d      	mov	r5, r3
  4024ee:	2401      	movs	r4, #1
  4024f0:	eba3 0e06 	sub.w	lr, r3, r6
  4024f4:	192b      	adds	r3, r5, r4
  4024f6:	428b      	cmp	r3, r1
  4024f8:	eb00 0706 	add.w	r7, r0, r6
  4024fc:	d3f1      	bcc.n	4024e2 <critical_factorization+0x1a>
  4024fe:	f04f 0801 	mov.w	r8, #1
  402502:	f8c2 e000 	str.w	lr, [r2]
  402506:	4644      	mov	r4, r8
  402508:	2500      	movs	r5, #0
  40250a:	f04f 37ff 	mov.w	r7, #4294967295
  40250e:	192b      	adds	r3, r5, r4
  402510:	4299      	cmp	r1, r3
  402512:	eb00 0e07 	add.w	lr, r0, r7
  402516:	d90e      	bls.n	402536 <critical_factorization+0x6e>
  402518:	f81e e004 	ldrb.w	lr, [lr, r4]
  40251c:	f810 c003 	ldrb.w	ip, [r0, r3]
  402520:	45f4      	cmp	ip, lr
  402522:	d918      	bls.n	402556 <critical_factorization+0x8e>
  402524:	461d      	mov	r5, r3
  402526:	2401      	movs	r4, #1
  402528:	eba3 0807 	sub.w	r8, r3, r7
  40252c:	192b      	adds	r3, r5, r4
  40252e:	4299      	cmp	r1, r3
  402530:	eb00 0e07 	add.w	lr, r0, r7
  402534:	d8f0      	bhi.n	402518 <critical_factorization+0x50>
  402536:	3701      	adds	r7, #1
  402538:	1c70      	adds	r0, r6, #1
  40253a:	4287      	cmp	r7, r0
  40253c:	bf24      	itt	cs
  40253e:	f8c2 8000 	strcs.w	r8, [r2]
  402542:	4638      	movcs	r0, r7
  402544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402548:	d00c      	beq.n	402564 <critical_factorization+0x9c>
  40254a:	f04f 0e01 	mov.w	lr, #1
  40254e:	462e      	mov	r6, r5
  402550:	4674      	mov	r4, lr
  402552:	4475      	add	r5, lr
  402554:	e7c0      	b.n	4024d8 <critical_factorization+0x10>
  402556:	d00b      	beq.n	402570 <critical_factorization+0xa8>
  402558:	f04f 0801 	mov.w	r8, #1
  40255c:	462f      	mov	r7, r5
  40255e:	4644      	mov	r4, r8
  402560:	4445      	add	r5, r8
  402562:	e7d4      	b.n	40250e <critical_factorization+0x46>
  402564:	4574      	cmp	r4, lr
  402566:	bf12      	itee	ne
  402568:	3401      	addne	r4, #1
  40256a:	461d      	moveq	r5, r3
  40256c:	2401      	moveq	r4, #1
  40256e:	e7b3      	b.n	4024d8 <critical_factorization+0x10>
  402570:	4544      	cmp	r4, r8
  402572:	bf12      	itee	ne
  402574:	3401      	addne	r4, #1
  402576:	461d      	moveq	r5, r3
  402578:	2401      	moveq	r4, #1
  40257a:	e7c8      	b.n	40250e <critical_factorization+0x46>

0040257c <two_way_long_needle>:
  40257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402580:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402584:	4616      	mov	r6, r2
  402586:	4605      	mov	r5, r0
  402588:	468b      	mov	fp, r1
  40258a:	4610      	mov	r0, r2
  40258c:	4619      	mov	r1, r3
  40258e:	aa03      	add	r2, sp, #12
  402590:	461c      	mov	r4, r3
  402592:	f7ff ff99 	bl	4024c8 <critical_factorization>
  402596:	ab03      	add	r3, sp, #12
  402598:	4681      	mov	r9, r0
  40259a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  40259e:	f843 4f04 	str.w	r4, [r3, #4]!
  4025a2:	4293      	cmp	r3, r2
  4025a4:	d1fb      	bne.n	40259e <two_way_long_needle+0x22>
  4025a6:	b14c      	cbz	r4, 4025bc <two_way_long_needle+0x40>
  4025a8:	1e63      	subs	r3, r4, #1
  4025aa:	1e72      	subs	r2, r6, #1
  4025ac:	a804      	add	r0, sp, #16
  4025ae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4025b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4025b6:	f113 33ff 	adds.w	r3, r3, #4294967295
  4025ba:	d2f8      	bcs.n	4025ae <two_way_long_needle+0x32>
  4025bc:	9903      	ldr	r1, [sp, #12]
  4025be:	464a      	mov	r2, r9
  4025c0:	4431      	add	r1, r6
  4025c2:	4630      	mov	r0, r6
  4025c4:	f000 fa64 	bl	402a90 <memcmp>
  4025c8:	2800      	cmp	r0, #0
  4025ca:	d16f      	bne.n	4026ac <two_way_long_needle+0x130>
  4025cc:	f109 33ff 	add.w	r3, r9, #4294967295
  4025d0:	9300      	str	r3, [sp, #0]
  4025d2:	18f3      	adds	r3, r6, r3
  4025d4:	4682      	mov	sl, r0
  4025d6:	9301      	str	r3, [sp, #4]
  4025d8:	4623      	mov	r3, r4
  4025da:	4680      	mov	r8, r0
  4025dc:	4654      	mov	r4, sl
  4025de:	4658      	mov	r0, fp
  4025e0:	469a      	mov	sl, r3
  4025e2:	eb08 070a 	add.w	r7, r8, sl
  4025e6:	1a3a      	subs	r2, r7, r0
  4025e8:	2100      	movs	r1, #0
  4025ea:	4428      	add	r0, r5
  4025ec:	f000 fa00 	bl	4029f0 <memchr>
  4025f0:	2800      	cmp	r0, #0
  4025f2:	d156      	bne.n	4026a2 <two_way_long_needle+0x126>
  4025f4:	2f00      	cmp	r7, #0
  4025f6:	d054      	beq.n	4026a2 <two_way_long_needle+0x126>
  4025f8:	19eb      	adds	r3, r5, r7
  4025fa:	aa04      	add	r2, sp, #16
  4025fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402604:	b14b      	cbz	r3, 40261a <two_way_long_needle+0x9e>
  402606:	b124      	cbz	r4, 402612 <two_way_long_needle+0x96>
  402608:	9a03      	ldr	r2, [sp, #12]
  40260a:	4293      	cmp	r3, r2
  40260c:	d201      	bcs.n	402612 <two_way_long_needle+0x96>
  40260e:	ebaa 0302 	sub.w	r3, sl, r2
  402612:	4498      	add	r8, r3
  402614:	2400      	movs	r4, #0
  402616:	4638      	mov	r0, r7
  402618:	e7e3      	b.n	4025e2 <two_way_long_needle+0x66>
  40261a:	454c      	cmp	r4, r9
  40261c:	4623      	mov	r3, r4
  40261e:	f10a 3eff 	add.w	lr, sl, #4294967295
  402622:	bf38      	it	cc
  402624:	464b      	movcc	r3, r9
  402626:	4573      	cmp	r3, lr
  402628:	d213      	bcs.n	402652 <two_way_long_needle+0xd6>
  40262a:	eb08 0203 	add.w	r2, r8, r3
  40262e:	f816 c003 	ldrb.w	ip, [r6, r3]
  402632:	5ca8      	ldrb	r0, [r5, r2]
  402634:	4584      	cmp	ip, r0
  402636:	442a      	add	r2, r5
  402638:	eb06 0103 	add.w	r1, r6, r3
  40263c:	d006      	beq.n	40264c <two_way_long_needle+0xd0>
  40263e:	e02c      	b.n	40269a <two_way_long_needle+0x11e>
  402640:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402644:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402648:	4584      	cmp	ip, r0
  40264a:	d126      	bne.n	40269a <two_way_long_needle+0x11e>
  40264c:	3301      	adds	r3, #1
  40264e:	4573      	cmp	r3, lr
  402650:	d3f6      	bcc.n	402640 <two_way_long_needle+0xc4>
  402652:	454c      	cmp	r4, r9
  402654:	9900      	ldr	r1, [sp, #0]
  402656:	f080 8089 	bcs.w	40276c <two_way_long_needle+0x1f0>
  40265a:	9b00      	ldr	r3, [sp, #0]
  40265c:	eb08 0203 	add.w	r2, r8, r3
  402660:	9b01      	ldr	r3, [sp, #4]
  402662:	5ca8      	ldrb	r0, [r5, r2]
  402664:	781b      	ldrb	r3, [r3, #0]
  402666:	4298      	cmp	r0, r3
  402668:	442a      	add	r2, r5
  40266a:	d17f      	bne.n	40276c <two_way_long_needle+0x1f0>
  40266c:	9801      	ldr	r0, [sp, #4]
  40266e:	f104 3bff 	add.w	fp, r4, #4294967295
  402672:	e006      	b.n	402682 <two_way_long_needle+0x106>
  402674:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402678:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40267c:	45f4      	cmp	ip, lr
  40267e:	d103      	bne.n	402688 <two_way_long_needle+0x10c>
  402680:	4619      	mov	r1, r3
  402682:	1e4b      	subs	r3, r1, #1
  402684:	459b      	cmp	fp, r3
  402686:	d1f5      	bne.n	402674 <two_way_long_needle+0xf8>
  402688:	3401      	adds	r4, #1
  40268a:	428c      	cmp	r4, r1
  40268c:	d870      	bhi.n	402770 <two_way_long_needle+0x1f4>
  40268e:	9c03      	ldr	r4, [sp, #12]
  402690:	4638      	mov	r0, r7
  402692:	44a0      	add	r8, r4
  402694:	ebaa 0404 	sub.w	r4, sl, r4
  402698:	e7a3      	b.n	4025e2 <two_way_long_needle+0x66>
  40269a:	f1c9 0201 	rsb	r2, r9, #1
  40269e:	4490      	add	r8, r2
  4026a0:	e7b7      	b.n	402612 <two_way_long_needle+0x96>
  4026a2:	2000      	movs	r0, #0
  4026a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4026a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026ac:	eba4 0309 	sub.w	r3, r4, r9
  4026b0:	454b      	cmp	r3, r9
  4026b2:	bf38      	it	cc
  4026b4:	464b      	movcc	r3, r9
  4026b6:	3301      	adds	r3, #1
  4026b8:	f109 38ff 	add.w	r8, r9, #4294967295
  4026bc:	9303      	str	r3, [sp, #12]
  4026be:	eb06 0308 	add.w	r3, r6, r8
  4026c2:	4658      	mov	r0, fp
  4026c4:	f04f 0a00 	mov.w	sl, #0
  4026c8:	46cb      	mov	fp, r9
  4026ca:	4699      	mov	r9, r3
  4026cc:	eb0a 0704 	add.w	r7, sl, r4
  4026d0:	1a3a      	subs	r2, r7, r0
  4026d2:	2100      	movs	r1, #0
  4026d4:	4428      	add	r0, r5
  4026d6:	f000 f98b 	bl	4029f0 <memchr>
  4026da:	2800      	cmp	r0, #0
  4026dc:	d1e1      	bne.n	4026a2 <two_way_long_needle+0x126>
  4026de:	2f00      	cmp	r7, #0
  4026e0:	d0df      	beq.n	4026a2 <two_way_long_needle+0x126>
  4026e2:	19eb      	adds	r3, r5, r7
  4026e4:	aa04      	add	r2, sp, #16
  4026e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4026ee:	bba3      	cbnz	r3, 40275a <two_way_long_needle+0x1de>
  4026f0:	1e61      	subs	r1, r4, #1
  4026f2:	458b      	cmp	fp, r1
  4026f4:	d215      	bcs.n	402722 <two_way_long_needle+0x1a6>
  4026f6:	eb0a 020b 	add.w	r2, sl, fp
  4026fa:	f816 300b 	ldrb.w	r3, [r6, fp]
  4026fe:	f815 e002 	ldrb.w	lr, [r5, r2]
  402702:	459e      	cmp	lr, r3
  402704:	442a      	add	r2, r5
  402706:	eb06 000b 	add.w	r0, r6, fp
  40270a:	465b      	mov	r3, fp
  40270c:	d006      	beq.n	40271c <two_way_long_needle+0x1a0>
  40270e:	e027      	b.n	402760 <two_way_long_needle+0x1e4>
  402710:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  402714:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402718:	45f4      	cmp	ip, lr
  40271a:	d121      	bne.n	402760 <two_way_long_needle+0x1e4>
  40271c:	3301      	adds	r3, #1
  40271e:	428b      	cmp	r3, r1
  402720:	d3f6      	bcc.n	402710 <two_way_long_needle+0x194>
  402722:	f1b8 3fff 	cmp.w	r8, #4294967295
  402726:	d011      	beq.n	40274c <two_way_long_needle+0x1d0>
  402728:	eb0a 0208 	add.w	r2, sl, r8
  40272c:	f899 1000 	ldrb.w	r1, [r9]
  402730:	5cab      	ldrb	r3, [r5, r2]
  402732:	4299      	cmp	r1, r3
  402734:	442a      	add	r2, r5
  402736:	d10f      	bne.n	402758 <two_way_long_needle+0x1dc>
  402738:	464b      	mov	r3, r9
  40273a:	e005      	b.n	402748 <two_way_long_needle+0x1cc>
  40273c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402740:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402744:	4288      	cmp	r0, r1
  402746:	d107      	bne.n	402758 <two_way_long_needle+0x1dc>
  402748:	42b3      	cmp	r3, r6
  40274a:	d1f7      	bne.n	40273c <two_way_long_needle+0x1c0>
  40274c:	eb05 000a 	add.w	r0, r5, sl
  402750:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402758:	9b03      	ldr	r3, [sp, #12]
  40275a:	449a      	add	sl, r3
  40275c:	4638      	mov	r0, r7
  40275e:	e7b5      	b.n	4026cc <two_way_long_needle+0x150>
  402760:	f1cb 0201 	rsb	r2, fp, #1
  402764:	4492      	add	sl, r2
  402766:	449a      	add	sl, r3
  402768:	4638      	mov	r0, r7
  40276a:	e7af      	b.n	4026cc <two_way_long_needle+0x150>
  40276c:	4649      	mov	r1, r9
  40276e:	e78b      	b.n	402688 <two_way_long_needle+0x10c>
  402770:	eb05 0008 	add.w	r0, r5, r8
  402774:	e796      	b.n	4026a4 <two_way_long_needle+0x128>
  402776:	bf00      	nop

00402778 <strstr>:
  402778:	7802      	ldrb	r2, [r0, #0]
  40277a:	2a00      	cmp	r2, #0
  40277c:	f000 8101 	beq.w	402982 <strstr+0x20a>
  402780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402784:	f891 8000 	ldrb.w	r8, [r1]
  402788:	b085      	sub	sp, #20
  40278a:	4644      	mov	r4, r8
  40278c:	f1b8 0f00 	cmp.w	r8, #0
  402790:	d016      	beq.n	4027c0 <strstr+0x48>
  402792:	4686      	mov	lr, r0
  402794:	f101 0c01 	add.w	ip, r1, #1
  402798:	2701      	movs	r7, #1
  40279a:	e003      	b.n	4027a4 <strstr+0x2c>
  40279c:	f813 4b01 	ldrb.w	r4, [r3], #1
  4027a0:	b16c      	cbz	r4, 4027be <strstr+0x46>
  4027a2:	469c      	mov	ip, r3
  4027a4:	42a2      	cmp	r2, r4
  4027a6:	bf14      	ite	ne
  4027a8:	2700      	movne	r7, #0
  4027aa:	f007 0701 	andeq.w	r7, r7, #1
  4027ae:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4027b2:	4663      	mov	r3, ip
  4027b4:	2a00      	cmp	r2, #0
  4027b6:	d1f1      	bne.n	40279c <strstr+0x24>
  4027b8:	f89c 3000 	ldrb.w	r3, [ip]
  4027bc:	b9fb      	cbnz	r3, 4027fe <strstr+0x86>
  4027be:	b117      	cbz	r7, 4027c6 <strstr+0x4e>
  4027c0:	b005      	add	sp, #20
  4027c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027c6:	460e      	mov	r6, r1
  4027c8:	4605      	mov	r5, r0
  4027ca:	4641      	mov	r1, r8
  4027cc:	3001      	adds	r0, #1
  4027ce:	ebac 0406 	sub.w	r4, ip, r6
  4027d2:	f000 f98d 	bl	402af0 <strchr>
  4027d6:	4607      	mov	r7, r0
  4027d8:	b188      	cbz	r0, 4027fe <strstr+0x86>
  4027da:	2c01      	cmp	r4, #1
  4027dc:	d0f0      	beq.n	4027c0 <strstr+0x48>
  4027de:	1928      	adds	r0, r5, r4
  4027e0:	4287      	cmp	r7, r0
  4027e2:	bf94      	ite	ls
  4027e4:	1bc1      	subls	r1, r0, r7
  4027e6:	2101      	movhi	r1, #1
  4027e8:	2c1f      	cmp	r4, #31
  4027ea:	468b      	mov	fp, r1
  4027ec:	d90b      	bls.n	402806 <strstr+0x8e>
  4027ee:	4623      	mov	r3, r4
  4027f0:	4632      	mov	r2, r6
  4027f2:	4638      	mov	r0, r7
  4027f4:	f7ff fec2 	bl	40257c <two_way_long_needle>
  4027f8:	b005      	add	sp, #20
  4027fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027fe:	2000      	movs	r0, #0
  402800:	b005      	add	sp, #20
  402802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402806:	aa03      	add	r2, sp, #12
  402808:	4621      	mov	r1, r4
  40280a:	4630      	mov	r0, r6
  40280c:	f7ff fe5c 	bl	4024c8 <critical_factorization>
  402810:	9903      	ldr	r1, [sp, #12]
  402812:	4680      	mov	r8, r0
  402814:	4602      	mov	r2, r0
  402816:	4431      	add	r1, r6
  402818:	4630      	mov	r0, r6
  40281a:	f000 f939 	bl	402a90 <memcmp>
  40281e:	2800      	cmp	r0, #0
  402820:	d157      	bne.n	4028d2 <strstr+0x15a>
  402822:	f108 33ff 	add.w	r3, r8, #4294967295
  402826:	9300      	str	r3, [sp, #0]
  402828:	18f3      	adds	r3, r6, r3
  40282a:	4681      	mov	r9, r0
  40282c:	4605      	mov	r5, r0
  40282e:	9301      	str	r3, [sp, #4]
  402830:	4658      	mov	r0, fp
  402832:	46b2      	mov	sl, r6
  402834:	1966      	adds	r6, r4, r5
  402836:	1a32      	subs	r2, r6, r0
  402838:	2100      	movs	r1, #0
  40283a:	4438      	add	r0, r7
  40283c:	f000 f8d8 	bl	4029f0 <memchr>
  402840:	2800      	cmp	r0, #0
  402842:	d1dc      	bne.n	4027fe <strstr+0x86>
  402844:	2e00      	cmp	r6, #0
  402846:	d0da      	beq.n	4027fe <strstr+0x86>
  402848:	45c8      	cmp	r8, r9
  40284a:	4643      	mov	r3, r8
  40284c:	bf38      	it	cc
  40284e:	464b      	movcc	r3, r9
  402850:	429c      	cmp	r4, r3
  402852:	d912      	bls.n	40287a <strstr+0x102>
  402854:	195a      	adds	r2, r3, r5
  402856:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40285a:	5cb8      	ldrb	r0, [r7, r2]
  40285c:	4281      	cmp	r1, r0
  40285e:	443a      	add	r2, r7
  402860:	eb0a 0e03 	add.w	lr, sl, r3
  402864:	d006      	beq.n	402874 <strstr+0xfc>
  402866:	e02c      	b.n	4028c2 <strstr+0x14a>
  402868:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40286c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402870:	4288      	cmp	r0, r1
  402872:	d126      	bne.n	4028c2 <strstr+0x14a>
  402874:	3301      	adds	r3, #1
  402876:	429c      	cmp	r4, r3
  402878:	d1f6      	bne.n	402868 <strstr+0xf0>
  40287a:	45c8      	cmp	r8, r9
  40287c:	9900      	ldr	r1, [sp, #0]
  40287e:	f240 8083 	bls.w	402988 <strstr+0x210>
  402882:	9b00      	ldr	r3, [sp, #0]
  402884:	18ea      	adds	r2, r5, r3
  402886:	9b01      	ldr	r3, [sp, #4]
  402888:	5cb8      	ldrb	r0, [r7, r2]
  40288a:	781b      	ldrb	r3, [r3, #0]
  40288c:	4298      	cmp	r0, r3
  40288e:	443a      	add	r2, r7
  402890:	d17a      	bne.n	402988 <strstr+0x210>
  402892:	9801      	ldr	r0, [sp, #4]
  402894:	f109 3bff 	add.w	fp, r9, #4294967295
  402898:	e006      	b.n	4028a8 <strstr+0x130>
  40289a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40289e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4028a2:	45f4      	cmp	ip, lr
  4028a4:	d103      	bne.n	4028ae <strstr+0x136>
  4028a6:	4619      	mov	r1, r3
  4028a8:	1e4b      	subs	r3, r1, #1
  4028aa:	455b      	cmp	r3, fp
  4028ac:	d1f5      	bne.n	40289a <strstr+0x122>
  4028ae:	f109 0901 	add.w	r9, r9, #1
  4028b2:	4589      	cmp	r9, r1
  4028b4:	d857      	bhi.n	402966 <strstr+0x1ee>
  4028b6:	9b03      	ldr	r3, [sp, #12]
  4028b8:	4630      	mov	r0, r6
  4028ba:	441d      	add	r5, r3
  4028bc:	eba4 0903 	sub.w	r9, r4, r3
  4028c0:	e7b8      	b.n	402834 <strstr+0xbc>
  4028c2:	f1c8 0201 	rsb	r2, r8, #1
  4028c6:	4415      	add	r5, r2
  4028c8:	441d      	add	r5, r3
  4028ca:	f04f 0900 	mov.w	r9, #0
  4028ce:	4630      	mov	r0, r6
  4028d0:	e7b0      	b.n	402834 <strstr+0xbc>
  4028d2:	eba4 0308 	sub.w	r3, r4, r8
  4028d6:	4543      	cmp	r3, r8
  4028d8:	bf38      	it	cc
  4028da:	4643      	movcc	r3, r8
  4028dc:	3301      	adds	r3, #1
  4028de:	f108 39ff 	add.w	r9, r8, #4294967295
  4028e2:	9303      	str	r3, [sp, #12]
  4028e4:	eb06 0309 	add.w	r3, r6, r9
  4028e8:	4658      	mov	r0, fp
  4028ea:	2500      	movs	r5, #0
  4028ec:	46bb      	mov	fp, r7
  4028ee:	469a      	mov	sl, r3
  4028f0:	1967      	adds	r7, r4, r5
  4028f2:	1a3a      	subs	r2, r7, r0
  4028f4:	2100      	movs	r1, #0
  4028f6:	4458      	add	r0, fp
  4028f8:	f000 f87a 	bl	4029f0 <memchr>
  4028fc:	2800      	cmp	r0, #0
  4028fe:	f47f af7e 	bne.w	4027fe <strstr+0x86>
  402902:	2f00      	cmp	r7, #0
  402904:	f43f af7b 	beq.w	4027fe <strstr+0x86>
  402908:	4544      	cmp	r4, r8
  40290a:	d915      	bls.n	402938 <strstr+0x1c0>
  40290c:	eb08 0205 	add.w	r2, r8, r5
  402910:	f816 3008 	ldrb.w	r3, [r6, r8]
  402914:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402918:	4298      	cmp	r0, r3
  40291a:	445a      	add	r2, fp
  40291c:	eb06 0108 	add.w	r1, r6, r8
  402920:	4643      	mov	r3, r8
  402922:	d006      	beq.n	402932 <strstr+0x1ba>
  402924:	e023      	b.n	40296e <strstr+0x1f6>
  402926:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40292a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40292e:	4586      	cmp	lr, r0
  402930:	d11d      	bne.n	40296e <strstr+0x1f6>
  402932:	3301      	adds	r3, #1
  402934:	429c      	cmp	r4, r3
  402936:	d1f6      	bne.n	402926 <strstr+0x1ae>
  402938:	f1b9 3fff 	cmp.w	r9, #4294967295
  40293c:	d012      	beq.n	402964 <strstr+0x1ec>
  40293e:	eb05 0209 	add.w	r2, r5, r9
  402942:	f89a 3000 	ldrb.w	r3, [sl]
  402946:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40294a:	4299      	cmp	r1, r3
  40294c:	445a      	add	r2, fp
  40294e:	d114      	bne.n	40297a <strstr+0x202>
  402950:	4653      	mov	r3, sl
  402952:	e005      	b.n	402960 <strstr+0x1e8>
  402954:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402958:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40295c:	4288      	cmp	r0, r1
  40295e:	d10c      	bne.n	40297a <strstr+0x202>
  402960:	42b3      	cmp	r3, r6
  402962:	d1f7      	bne.n	402954 <strstr+0x1dc>
  402964:	465f      	mov	r7, fp
  402966:	1978      	adds	r0, r7, r5
  402968:	b005      	add	sp, #20
  40296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40296e:	f1c8 0201 	rsb	r2, r8, #1
  402972:	4415      	add	r5, r2
  402974:	441d      	add	r5, r3
  402976:	4638      	mov	r0, r7
  402978:	e7ba      	b.n	4028f0 <strstr+0x178>
  40297a:	9b03      	ldr	r3, [sp, #12]
  40297c:	4638      	mov	r0, r7
  40297e:	441d      	add	r5, r3
  402980:	e7b6      	b.n	4028f0 <strstr+0x178>
  402982:	780b      	ldrb	r3, [r1, #0]
  402984:	b913      	cbnz	r3, 40298c <strstr+0x214>
  402986:	4770      	bx	lr
  402988:	4641      	mov	r1, r8
  40298a:	e790      	b.n	4028ae <strstr+0x136>
  40298c:	2000      	movs	r0, #0
  40298e:	4770      	bx	lr

00402990 <register_fini>:
  402990:	4b02      	ldr	r3, [pc, #8]	; (40299c <register_fini+0xc>)
  402992:	b113      	cbz	r3, 40299a <register_fini+0xa>
  402994:	4802      	ldr	r0, [pc, #8]	; (4029a0 <register_fini+0x10>)
  402996:	f000 b805 	b.w	4029a4 <atexit>
  40299a:	4770      	bx	lr
  40299c:	00000000 	.word	0x00000000
  4029a0:	004029b1 	.word	0x004029b1

004029a4 <atexit>:
  4029a4:	2300      	movs	r3, #0
  4029a6:	4601      	mov	r1, r0
  4029a8:	461a      	mov	r2, r3
  4029aa:	4618      	mov	r0, r3
  4029ac:	f000 b914 	b.w	402bd8 <__register_exitproc>

004029b0 <__libc_fini_array>:
  4029b0:	b538      	push	{r3, r4, r5, lr}
  4029b2:	4c0a      	ldr	r4, [pc, #40]	; (4029dc <__libc_fini_array+0x2c>)
  4029b4:	4d0a      	ldr	r5, [pc, #40]	; (4029e0 <__libc_fini_array+0x30>)
  4029b6:	1b64      	subs	r4, r4, r5
  4029b8:	10a4      	asrs	r4, r4, #2
  4029ba:	d00a      	beq.n	4029d2 <__libc_fini_array+0x22>
  4029bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4029c0:	3b01      	subs	r3, #1
  4029c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4029c6:	3c01      	subs	r4, #1
  4029c8:	f855 3904 	ldr.w	r3, [r5], #-4
  4029cc:	4798      	blx	r3
  4029ce:	2c00      	cmp	r4, #0
  4029d0:	d1f9      	bne.n	4029c6 <__libc_fini_array+0x16>
  4029d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4029d6:	f000 ba45 	b.w	402e64 <_fini>
  4029da:	bf00      	nop
  4029dc:	00402e74 	.word	0x00402e74
  4029e0:	00402e70 	.word	0x00402e70
	...

004029f0 <memchr>:
  4029f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4029f4:	2a10      	cmp	r2, #16
  4029f6:	db2b      	blt.n	402a50 <memchr+0x60>
  4029f8:	f010 0f07 	tst.w	r0, #7
  4029fc:	d008      	beq.n	402a10 <memchr+0x20>
  4029fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  402a02:	3a01      	subs	r2, #1
  402a04:	428b      	cmp	r3, r1
  402a06:	d02d      	beq.n	402a64 <memchr+0x74>
  402a08:	f010 0f07 	tst.w	r0, #7
  402a0c:	b342      	cbz	r2, 402a60 <memchr+0x70>
  402a0e:	d1f6      	bne.n	4029fe <memchr+0xe>
  402a10:	b4f0      	push	{r4, r5, r6, r7}
  402a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402a1a:	f022 0407 	bic.w	r4, r2, #7
  402a1e:	f07f 0700 	mvns.w	r7, #0
  402a22:	2300      	movs	r3, #0
  402a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402a28:	3c08      	subs	r4, #8
  402a2a:	ea85 0501 	eor.w	r5, r5, r1
  402a2e:	ea86 0601 	eor.w	r6, r6, r1
  402a32:	fa85 f547 	uadd8	r5, r5, r7
  402a36:	faa3 f587 	sel	r5, r3, r7
  402a3a:	fa86 f647 	uadd8	r6, r6, r7
  402a3e:	faa5 f687 	sel	r6, r5, r7
  402a42:	b98e      	cbnz	r6, 402a68 <memchr+0x78>
  402a44:	d1ee      	bne.n	402a24 <memchr+0x34>
  402a46:	bcf0      	pop	{r4, r5, r6, r7}
  402a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402a4c:	f002 0207 	and.w	r2, r2, #7
  402a50:	b132      	cbz	r2, 402a60 <memchr+0x70>
  402a52:	f810 3b01 	ldrb.w	r3, [r0], #1
  402a56:	3a01      	subs	r2, #1
  402a58:	ea83 0301 	eor.w	r3, r3, r1
  402a5c:	b113      	cbz	r3, 402a64 <memchr+0x74>
  402a5e:	d1f8      	bne.n	402a52 <memchr+0x62>
  402a60:	2000      	movs	r0, #0
  402a62:	4770      	bx	lr
  402a64:	3801      	subs	r0, #1
  402a66:	4770      	bx	lr
  402a68:	2d00      	cmp	r5, #0
  402a6a:	bf06      	itte	eq
  402a6c:	4635      	moveq	r5, r6
  402a6e:	3803      	subeq	r0, #3
  402a70:	3807      	subne	r0, #7
  402a72:	f015 0f01 	tst.w	r5, #1
  402a76:	d107      	bne.n	402a88 <memchr+0x98>
  402a78:	3001      	adds	r0, #1
  402a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402a7e:	bf02      	ittt	eq
  402a80:	3001      	addeq	r0, #1
  402a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402a86:	3001      	addeq	r0, #1
  402a88:	bcf0      	pop	{r4, r5, r6, r7}
  402a8a:	3801      	subs	r0, #1
  402a8c:	4770      	bx	lr
  402a8e:	bf00      	nop

00402a90 <memcmp>:
  402a90:	2a03      	cmp	r2, #3
  402a92:	b470      	push	{r4, r5, r6}
  402a94:	d922      	bls.n	402adc <memcmp+0x4c>
  402a96:	ea40 0301 	orr.w	r3, r0, r1
  402a9a:	079b      	lsls	r3, r3, #30
  402a9c:	d011      	beq.n	402ac2 <memcmp+0x32>
  402a9e:	7803      	ldrb	r3, [r0, #0]
  402aa0:	780c      	ldrb	r4, [r1, #0]
  402aa2:	42a3      	cmp	r3, r4
  402aa4:	d11d      	bne.n	402ae2 <memcmp+0x52>
  402aa6:	440a      	add	r2, r1
  402aa8:	3101      	adds	r1, #1
  402aaa:	e005      	b.n	402ab8 <memcmp+0x28>
  402aac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
  402ab4:	42a3      	cmp	r3, r4
  402ab6:	d114      	bne.n	402ae2 <memcmp+0x52>
  402ab8:	4291      	cmp	r1, r2
  402aba:	d1f7      	bne.n	402aac <memcmp+0x1c>
  402abc:	2000      	movs	r0, #0
  402abe:	bc70      	pop	{r4, r5, r6}
  402ac0:	4770      	bx	lr
  402ac2:	680d      	ldr	r5, [r1, #0]
  402ac4:	6806      	ldr	r6, [r0, #0]
  402ac6:	42ae      	cmp	r6, r5
  402ac8:	460c      	mov	r4, r1
  402aca:	4603      	mov	r3, r0
  402acc:	f101 0104 	add.w	r1, r1, #4
  402ad0:	f100 0004 	add.w	r0, r0, #4
  402ad4:	d108      	bne.n	402ae8 <memcmp+0x58>
  402ad6:	3a04      	subs	r2, #4
  402ad8:	2a03      	cmp	r2, #3
  402ada:	d8f2      	bhi.n	402ac2 <memcmp+0x32>
  402adc:	2a00      	cmp	r2, #0
  402ade:	d1de      	bne.n	402a9e <memcmp+0xe>
  402ae0:	e7ec      	b.n	402abc <memcmp+0x2c>
  402ae2:	1b18      	subs	r0, r3, r4
  402ae4:	bc70      	pop	{r4, r5, r6}
  402ae6:	4770      	bx	lr
  402ae8:	4621      	mov	r1, r4
  402aea:	4618      	mov	r0, r3
  402aec:	e7d7      	b.n	402a9e <memcmp+0xe>
  402aee:	bf00      	nop

00402af0 <strchr>:
  402af0:	b2c9      	uxtb	r1, r1
  402af2:	2900      	cmp	r1, #0
  402af4:	d041      	beq.n	402b7a <strchr+0x8a>
  402af6:	0782      	lsls	r2, r0, #30
  402af8:	b4f0      	push	{r4, r5, r6, r7}
  402afa:	d067      	beq.n	402bcc <strchr+0xdc>
  402afc:	7803      	ldrb	r3, [r0, #0]
  402afe:	2b00      	cmp	r3, #0
  402b00:	d068      	beq.n	402bd4 <strchr+0xe4>
  402b02:	4299      	cmp	r1, r3
  402b04:	d037      	beq.n	402b76 <strchr+0x86>
  402b06:	1c43      	adds	r3, r0, #1
  402b08:	e004      	b.n	402b14 <strchr+0x24>
  402b0a:	f813 0b01 	ldrb.w	r0, [r3], #1
  402b0e:	b390      	cbz	r0, 402b76 <strchr+0x86>
  402b10:	4281      	cmp	r1, r0
  402b12:	d02f      	beq.n	402b74 <strchr+0x84>
  402b14:	079a      	lsls	r2, r3, #30
  402b16:	461c      	mov	r4, r3
  402b18:	d1f7      	bne.n	402b0a <strchr+0x1a>
  402b1a:	6825      	ldr	r5, [r4, #0]
  402b1c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402b20:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402b24:	ea83 0605 	eor.w	r6, r3, r5
  402b28:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  402b2c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402b30:	ea20 0006 	bic.w	r0, r0, r6
  402b34:	ea22 0205 	bic.w	r2, r2, r5
  402b38:	4302      	orrs	r2, r0
  402b3a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b3e:	d111      	bne.n	402b64 <strchr+0x74>
  402b40:	4620      	mov	r0, r4
  402b42:	f850 6f04 	ldr.w	r6, [r0, #4]!
  402b46:	ea83 0706 	eor.w	r7, r3, r6
  402b4a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  402b4e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  402b52:	ea25 0507 	bic.w	r5, r5, r7
  402b56:	ea22 0206 	bic.w	r2, r2, r6
  402b5a:	432a      	orrs	r2, r5
  402b5c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b60:	d0ef      	beq.n	402b42 <strchr+0x52>
  402b62:	4604      	mov	r4, r0
  402b64:	7820      	ldrb	r0, [r4, #0]
  402b66:	b918      	cbnz	r0, 402b70 <strchr+0x80>
  402b68:	e005      	b.n	402b76 <strchr+0x86>
  402b6a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  402b6e:	b110      	cbz	r0, 402b76 <strchr+0x86>
  402b70:	4281      	cmp	r1, r0
  402b72:	d1fa      	bne.n	402b6a <strchr+0x7a>
  402b74:	4620      	mov	r0, r4
  402b76:	bcf0      	pop	{r4, r5, r6, r7}
  402b78:	4770      	bx	lr
  402b7a:	0783      	lsls	r3, r0, #30
  402b7c:	d024      	beq.n	402bc8 <strchr+0xd8>
  402b7e:	7803      	ldrb	r3, [r0, #0]
  402b80:	2b00      	cmp	r3, #0
  402b82:	d0f9      	beq.n	402b78 <strchr+0x88>
  402b84:	1c43      	adds	r3, r0, #1
  402b86:	e003      	b.n	402b90 <strchr+0xa0>
  402b88:	7802      	ldrb	r2, [r0, #0]
  402b8a:	3301      	adds	r3, #1
  402b8c:	2a00      	cmp	r2, #0
  402b8e:	d0f3      	beq.n	402b78 <strchr+0x88>
  402b90:	0799      	lsls	r1, r3, #30
  402b92:	4618      	mov	r0, r3
  402b94:	d1f8      	bne.n	402b88 <strchr+0x98>
  402b96:	6819      	ldr	r1, [r3, #0]
  402b98:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402b9c:	ea22 0201 	bic.w	r2, r2, r1
  402ba0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402ba4:	d108      	bne.n	402bb8 <strchr+0xc8>
  402ba6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402baa:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402bae:	ea22 0201 	bic.w	r2, r2, r1
  402bb2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402bb6:	d0f6      	beq.n	402ba6 <strchr+0xb6>
  402bb8:	781a      	ldrb	r2, [r3, #0]
  402bba:	4618      	mov	r0, r3
  402bbc:	b142      	cbz	r2, 402bd0 <strchr+0xe0>
  402bbe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402bc2:	2b00      	cmp	r3, #0
  402bc4:	d1fb      	bne.n	402bbe <strchr+0xce>
  402bc6:	4770      	bx	lr
  402bc8:	4603      	mov	r3, r0
  402bca:	e7e4      	b.n	402b96 <strchr+0xa6>
  402bcc:	4604      	mov	r4, r0
  402bce:	e7a4      	b.n	402b1a <strchr+0x2a>
  402bd0:	4618      	mov	r0, r3
  402bd2:	4770      	bx	lr
  402bd4:	4618      	mov	r0, r3
  402bd6:	e7ce      	b.n	402b76 <strchr+0x86>

00402bd8 <__register_exitproc>:
  402bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bdc:	4c25      	ldr	r4, [pc, #148]	; (402c74 <__register_exitproc+0x9c>)
  402bde:	6825      	ldr	r5, [r4, #0]
  402be0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402be4:	4606      	mov	r6, r0
  402be6:	4688      	mov	r8, r1
  402be8:	4692      	mov	sl, r2
  402bea:	4699      	mov	r9, r3
  402bec:	b3c4      	cbz	r4, 402c60 <__register_exitproc+0x88>
  402bee:	6860      	ldr	r0, [r4, #4]
  402bf0:	281f      	cmp	r0, #31
  402bf2:	dc17      	bgt.n	402c24 <__register_exitproc+0x4c>
  402bf4:	1c43      	adds	r3, r0, #1
  402bf6:	b176      	cbz	r6, 402c16 <__register_exitproc+0x3e>
  402bf8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402bfc:	2201      	movs	r2, #1
  402bfe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402c02:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402c06:	4082      	lsls	r2, r0
  402c08:	4311      	orrs	r1, r2
  402c0a:	2e02      	cmp	r6, #2
  402c0c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402c10:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402c14:	d01e      	beq.n	402c54 <__register_exitproc+0x7c>
  402c16:	3002      	adds	r0, #2
  402c18:	6063      	str	r3, [r4, #4]
  402c1a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402c1e:	2000      	movs	r0, #0
  402c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c24:	4b14      	ldr	r3, [pc, #80]	; (402c78 <__register_exitproc+0xa0>)
  402c26:	b303      	cbz	r3, 402c6a <__register_exitproc+0x92>
  402c28:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c2c:	f3af 8000 	nop.w
  402c30:	4604      	mov	r4, r0
  402c32:	b1d0      	cbz	r0, 402c6a <__register_exitproc+0x92>
  402c34:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402c38:	2700      	movs	r7, #0
  402c3a:	e880 0088 	stmia.w	r0, {r3, r7}
  402c3e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402c42:	4638      	mov	r0, r7
  402c44:	2301      	movs	r3, #1
  402c46:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402c4a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402c4e:	2e00      	cmp	r6, #0
  402c50:	d0e1      	beq.n	402c16 <__register_exitproc+0x3e>
  402c52:	e7d1      	b.n	402bf8 <__register_exitproc+0x20>
  402c54:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402c58:	430a      	orrs	r2, r1
  402c5a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402c5e:	e7da      	b.n	402c16 <__register_exitproc+0x3e>
  402c60:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402c64:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402c68:	e7c1      	b.n	402bee <__register_exitproc+0x16>
  402c6a:	f04f 30ff 	mov.w	r0, #4294967295
  402c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c72:	bf00      	nop
  402c74:	00402e4c 	.word	0x00402e4c
  402c78:	00000000 	.word	0x00000000
  402c7c:	000e1000 	.word	0x000e1000
  402c80:	000000c0 	.word	0x000000c0
  402c84:	00000800 	.word	0x00000800
	...
  402c94:	20656466 	.word	0x20656466
  402c98:	67616d69 	.word	0x67616d69
  402c9c:	706a2e65 	.word	0x706a2e65
  402ca0:	000a0d67 	.word	0x000a0d67
  402ca4:	20726366 	.word	0x20726366
  402ca8:	67616d69 	.word	0x67616d69
  402cac:	706a2e65 	.word	0x706a2e65
  402cb0:	64252067 	.word	0x64252067
  402cb4:	00000a0d 	.word	0x00000a0d
  402cb8:	736f6c63 	.word	0x736f6c63
  402cbc:	6c612065 	.word	0x6c612065
  402cc0:	000a0d6c 	.word	0x000a0d6c
  402cc4:	70747468 	.word	0x70747468
  402cc8:	736f705f 	.word	0x736f705f
  402ccc:	6f2d2074 	.word	0x6f2d2074
  402cd0:	74746820 	.word	0x74746820
  402cd4:	2f3a7370 	.word	0x2f3a7370
  402cd8:	6769622f 	.word	0x6769622f
  402cdc:	746f7262 	.word	0x746f7262
  402ce0:	73726568 	.word	0x73726568
  402ce4:	2e736565 	.word	0x2e736565
  402ce8:	702f656d 	.word	0x702f656d
  402cec:	5f74736f 	.word	0x5f74736f
  402cf0:	67616d69 	.word	0x67616d69
  402cf4:	70612065 	.word	0x70612065
  402cf8:	63696c70 	.word	0x63696c70
  402cfc:	6f697461 	.word	0x6f697461
  402d00:	736a2f6e 	.word	0x736a2f6e
  402d04:	0a0d6e6f 	.word	0x0a0d6e6f
  402d08:	00000000 	.word	0x00000000
  402d0c:	70747468 	.word	0x70747468
  402d10:	6464615f 	.word	0x6464615f
  402d14:	6165685f 	.word	0x6165685f
  402d18:	20726564 	.word	0x20726564
  402d1c:	656d2030 	.word	0x656d2030
  402d20:	67617373 	.word	0x67617373
  402d24:	79742d65 	.word	0x79742d65
  402d28:	69206570 	.word	0x69206570
  402d2c:	6567616d 	.word	0x6567616d
  402d30:	6e69622d 	.word	0x6e69622d
  402d34:	00000a0d 	.word	0x00000a0d
  402d38:	74697277 	.word	0x74697277
  402d3c:	20302065 	.word	0x20302065
  402d40:	0a0d6425 	.word	0x0a0d6425
  402d44:	00000000 	.word	0x00000000
  402d48:	70747468 	.word	0x70747468
  402d4c:	6165725f 	.word	0x6165725f
  402d50:	74735f64 	.word	0x74735f64
  402d54:	73757461 	.word	0x73757461
  402d58:	0a0d3020 	.word	0x0a0d3020
  402d5c:	00000000 	.word	0x00000000
  402d60:	6e65704f 	.word	0x6e65704f
  402d64:	00006465 	.word	0x00006465
  402d68:	70747468 	.word	0x70747468
  402d6c:	6464615f 	.word	0x6464615f
  402d70:	6165685f 	.word	0x6165685f
  402d74:	20726564 	.word	0x20726564
  402d78:	656d2030 	.word	0x656d2030
  402d7c:	67617373 	.word	0x67617373
  402d80:	79742d65 	.word	0x79742d65
  402d84:	61206570 	.word	0x61206570
  402d88:	6f696475 	.word	0x6f696475
  402d8c:	6e69622d 	.word	0x6e69622d
  402d90:	00000a0d 	.word	0x00000a0d
  402d94:	20656466 	.word	0x20656466
  402d98:	6d746162 	.word	0x6d746162
  402d9c:	742e6e61 	.word	0x742e6e61
  402da0:	0a0d7478 	.word	0x0a0d7478
  402da4:	00000000 	.word	0x00000000
  402da8:	20726366 	.word	0x20726366
  402dac:	6d746162 	.word	0x6d746162
  402db0:	742e6e61 	.word	0x742e6e61
  402db4:	25207478 	.word	0x25207478
  402db8:	000a0d64 	.word	0x000a0d64
  402dbc:	75746573 	.word	0x75746573
  402dc0:	65772070 	.word	0x65772070
  402dc4:	000a0d62 	.word	0x000a0d62
  402dc8:	7373415b 	.word	0x7373415b
  402dcc:	6169636f 	.word	0x6169636f
  402dd0:	5d646574 	.word	0x5d646574
  402dd4:	00000a0d 	.word	0x00000a0d
  402dd8:	20746567 	.word	0x20746567
  402ddc:	74737973 	.word	0x74737973
  402de0:	732e6d65 	.word	0x732e6d65
  402de4:	6d656661 	.word	0x6d656661
  402de8:	2e65646f 	.word	0x2e65646f
  402dec:	74617473 	.word	0x74617473
  402df0:	0a0d7375 	.word	0x0a0d7375
  402df4:	00000000 	.word	0x00000000
  402df8:	6c756166 	.word	0x6c756166
  402dfc:	705f7374 	.word	0x705f7374
  402e00:	746e6972 	.word	0x746e6972
  402e04:	00000a0d 	.word	0x00000a0d
  402e08:	6c756166 	.word	0x6c756166
  402e0c:	725f7374 	.word	0x725f7374
  402e10:	74657365 	.word	0x74657365
  402e14:	00000a0d 	.word	0x00000a0d
  402e18:	6f626572 	.word	0x6f626572
  402e1c:	0a0d746f 	.word	0x0a0d746f
  402e20:	00000000 	.word	0x00000000
  402e24:	20746573 	.word	0x20746573
  402e28:	63207973 	.word	0x63207973
  402e2c:	6f206520 	.word	0x6f206520
  402e30:	0a0d6666 	.word	0x0a0d6666
  402e34:	00000000 	.word	0x00000000
  402e38:	20746573 	.word	0x20746573
  402e3c:	63207973 	.word	0x63207973
  402e40:	6f207020 	.word	0x6f207020
  402e44:	0a0d6666 	.word	0x0a0d6666
  402e48:	00000000 	.word	0x00000000

00402e4c <_global_impure_ptr>:
  402e4c:	20000010                                ... 

00402e50 <_init>:
  402e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e52:	bf00      	nop
  402e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e56:	bc08      	pop	{r3}
  402e58:	469e      	mov	lr, r3
  402e5a:	4770      	bx	lr

00402e5c <__init_array_start>:
  402e5c:	00402991 	.word	0x00402991

00402e60 <__frame_dummy_init_array_entry>:
  402e60:	004000f1                                ..@.

00402e64 <_fini>:
  402e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e66:	bf00      	nop
  402e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e6a:	bc08      	pop	{r3}
  402e6c:	469e      	mov	lr, r3
  402e6e:	4770      	bx	lr

00402e70 <__fini_array_start>:
  402e70:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
