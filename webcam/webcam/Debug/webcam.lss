
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007eec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407eec  00407eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  00407ef4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00007ff0  200009bc  004088b0  000209bc  2**2
                  ALLOC
  4 .stack        00003004  200089ac  004108a0  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014502  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ab0  00000000  00000000  00034f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000070a8  00000000  00000000  000379f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c30  00000000  00000000  0003ea99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  0003f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000069f5  00000000  00000000  00040249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000da4c  00000000  00000000  00046c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004fe08  00000000  00000000  0005468a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004048  00000000  00000000  000a4494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 b9 00 20 b5 27 40 00 7d 28 40 00 7d 28 40 00     ... .'@.}(@.}(@.
  400010:	7d 28 40 00 7d 28 40 00 7d 28 40 00 00 00 00 00     }(@.}(@.}(@.....
	...
  40002c:	7d 28 40 00 7d 28 40 00 00 00 00 00 7d 28 40 00     }(@.}(@.....}(@.
  40003c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  40004c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  40005c:	00 00 00 00 7d 28 40 00 7d 28 40 00 00 00 00 00     ....}(@.}(@.....
  40006c:	dd 09 40 00 f5 09 40 00 00 00 00 00 65 10 40 00     ..@...@.....e.@.
  40007c:	7d 28 40 00 00 00 00 00 00 00 00 00 7d 28 40 00     }(@.........}(@.
  40008c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 49 07 40 00     }(@.}(@.}(@.I.@.
  40009c:	39 0e 40 00 7d 28 40 00 7d 28 40 00 00 00 00 00     9.@.}(@.}(@.....
	...
  4000b4:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  4000c4:	7d 28 40 00 7d 28 40 00                             }(@.}(@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407ef4 	.word	0x00407ef4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00407ef4 	.word	0x00407ef4
  40012c:	200009c0 	.word	0x200009c0
  400130:	00407ef4 	.word	0x00407ef4
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
	...

00400178 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400178:	b580      	push	{r7, lr}
  40017a:	b092      	sub	sp, #72	; 0x48
  40017c:	af00      	add	r7, sp, #0
  40017e:	60f8      	str	r0, [r7, #12]
  400180:	60b9      	str	r1, [r7, #8]
  400182:	607a      	str	r2, [r7, #4]
  400184:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40018a:	221c      	movs	r2, #28
  40018c:	2100      	movs	r1, #0
  40018e:	4618      	mov	r0, r3
  400190:	4b36      	ldr	r3, [pc, #216]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  400192:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400194:	f107 0310 	add.w	r3, r7, #16
  400198:	221c      	movs	r2, #28
  40019a:	2100      	movs	r1, #0
  40019c:	4618      	mov	r0, r3
  40019e:	4b33      	ldr	r3, [pc, #204]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  4001a0:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  4001a2:	683b      	ldr	r3, [r7, #0]
  4001a4:	2b02      	cmp	r3, #2
  4001a6:	d004      	beq.n	4001b2 <ssc_i2s_set_receiver+0x3a>
  4001a8:	2b03      	cmp	r3, #3
  4001aa:	d00a      	beq.n	4001c2 <ssc_i2s_set_receiver+0x4a>
  4001ac:	2b01      	cmp	r3, #1
  4001ae:	d004      	beq.n	4001ba <ssc_i2s_set_receiver+0x42>
  4001b0:	e00b      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	e007      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c0:	e003      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001c6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ca:	68bb      	ldr	r3, [r7, #8]
  4001cc:	f003 0302 	and.w	r3, r3, #2
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d022      	beq.n	40021a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	2b03      	cmp	r3, #3
  4001d8:	d102      	bne.n	4001e0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001da:	2301      	movs	r3, #1
  4001dc:	61bb      	str	r3, [r7, #24]
  4001de:	e001      	b.n	4001e4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001e4:	2300      	movs	r3, #0
  4001e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001e8:	2304      	movs	r3, #4
  4001ea:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001f0:	2300      	movs	r3, #0
  4001f2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400200:	3b01      	subs	r3, #1
  400202:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400204:	2380      	movs	r3, #128	; 0x80
  400206:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  400208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40020a:	3b01      	subs	r3, #1
  40020c:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  40020e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400212:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400214:	2300      	movs	r3, #0
  400216:	62bb      	str	r3, [r7, #40]	; 0x28
  400218:	e01b      	b.n	400252 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40021a:	68bb      	ldr	r3, [r7, #8]
  40021c:	f003 0308 	and.w	r3, r3, #8
  400220:	2b00      	cmp	r3, #0
  400222:	d016      	beq.n	400252 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400228:	2300      	movs	r3, #0
  40022a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40022c:	2300      	movs	r3, #0
  40022e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400230:	2300      	movs	r3, #0
  400232:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400234:	2301      	movs	r3, #1
  400236:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400238:	2300      	movs	r3, #0
  40023a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40023c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40023e:	3b01      	subs	r3, #1
  400240:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400242:	2380      	movs	r3, #128	; 0x80
  400244:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400246:	2300      	movs	r3, #0
  400248:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40024a:	2300      	movs	r3, #0
  40024c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40024e:	2300      	movs	r3, #0
  400250:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400252:	f107 0210 	add.w	r2, r7, #16
  400256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40025a:	4619      	mov	r1, r3
  40025c:	68f8      	ldr	r0, [r7, #12]
  40025e:	4b04      	ldr	r3, [pc, #16]	; (400270 <ssc_i2s_set_receiver+0xf8>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3748      	adds	r7, #72	; 0x48
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	00402edd 	.word	0x00402edd
  400270:	004002c5 	.word	0x004002c5

00400274 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400274:	b480      	push	{r7}
  400276:	b083      	sub	sp, #12
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400282:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	2200      	movs	r2, #0
  400288:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40028a:	687b      	ldr	r3, [r7, #4]
  40028c:	2200      	movs	r2, #0
  40028e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	2200      	movs	r2, #0
  400294:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	2200      	movs	r2, #0
  40029a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2200      	movs	r2, #0
  4002a0:	61da      	str	r2, [r3, #28]
}
  4002a2:	bf00      	nop
  4002a4:	370c      	adds	r7, #12
  4002a6:	46bd      	mov	sp, r7
  4002a8:	bc80      	pop	{r7}
  4002aa:	4770      	bx	lr

004002ac <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2201      	movs	r2, #1
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b085      	sub	sp, #20
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	60f8      	str	r0, [r7, #12]
  4002cc:	60b9      	str	r1, [r7, #8]
  4002ce:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002d0:	68bb      	ldr	r3, [r7, #8]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d103      	bne.n	4002de <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	2200      	movs	r2, #0
  4002da:	611a      	str	r2, [r3, #16]
  4002dc:	e01c      	b.n	400318 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	691a      	ldr	r2, [r3, #16]
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ea:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002ec:	68bb      	ldr	r3, [r7, #8]
  4002ee:	689b      	ldr	r3, [r3, #8]
  4002f0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002f6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4002f8:	68bb      	ldr	r3, [r7, #8]
  4002fa:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4002fc:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	691b      	ldr	r3, [r3, #16]
  400302:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400304:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400306:	68bb      	ldr	r3, [r7, #8]
  400308:	695b      	ldr	r3, [r3, #20]
  40030a:	041b      	lsls	r3, r3, #16
  40030c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400310:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400312:	431a      	orrs	r2, r3
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2b00      	cmp	r3, #0
  40031c:	d103      	bne.n	400326 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	2200      	movs	r2, #0
  400322:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400324:	e021      	b.n	40036a <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	695a      	ldr	r2, [r3, #20]
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400336:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	689b      	ldr	r3, [r3, #8]
  40033c:	021b      	lsls	r3, r3, #8
  40033e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400342:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	041b      	lsls	r3, r3, #16
  40034a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40034e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	691b      	ldr	r3, [r3, #16]
  400354:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400356:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40035c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400362:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400364:	431a      	orrs	r2, r3
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	615a      	str	r2, [r3, #20]
}
  40036a:	bf00      	nop
  40036c:	3714      	adds	r7, #20
  40036e:	46bd      	mov	sp, r7
  400370:	bc80      	pop	{r7}
  400372:	4770      	bx	lr

00400374 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400374:	b480      	push	{r7}
  400376:	b083      	sub	sp, #12
  400378:	af00      	add	r7, sp, #0
  40037a:	6078      	str	r0, [r7, #4]
  40037c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	683a      	ldr	r2, [r7, #0]
  400382:	645a      	str	r2, [r3, #68]	; 0x44
}
  400384:	bf00      	nop
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <ssc_disable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
  400396:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IDR = ul_sources;
  400398:	687b      	ldr	r3, [r7, #4]
  40039a:	683a      	ldr	r2, [r7, #0]
  40039c:	649a      	str	r2, [r3, #72]	; 0x48
}
  40039e:	bf00      	nop
  4003a0:	370c      	adds	r7, #12
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bc80      	pop	{r7}
  4003a6:	4770      	bx	lr

004003a8 <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  4003a8:	b480      	push	{r7}
  4003aa:	b083      	sub	sp, #12
  4003ac:	af00      	add	r7, sp, #0
  4003ae:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  4003b0:	687b      	ldr	r3, [r7, #4]
  4003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  4003b4:	4618      	mov	r0, r3
  4003b6:	370c      	adds	r7, #12
  4003b8:	46bd      	mov	sp, r7
  4003ba:	bc80      	pop	{r7}
  4003bc:	4770      	bx	lr

004003be <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4003be:	b480      	push	{r7}
  4003c0:	b085      	sub	sp, #20
  4003c2:	af00      	add	r7, sp, #0
  4003c4:	6078      	str	r0, [r7, #4]
  4003c6:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003c8:	f242 7310 	movw	r3, #10000	; 0x2710
  4003cc:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003ce:	e006      	b.n	4003de <ssc_read+0x20>
		if (!ul_timeout--) {
  4003d0:	68fb      	ldr	r3, [r7, #12]
  4003d2:	1e5a      	subs	r2, r3, #1
  4003d4:	60fa      	str	r2, [r7, #12]
  4003d6:	2b00      	cmp	r3, #0
  4003d8:	d101      	bne.n	4003de <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003da:	2301      	movs	r3, #1
  4003dc:	e00a      	b.n	4003f4 <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003e2:	f003 0310 	and.w	r3, r3, #16
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d0f2      	beq.n	4003d0 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003ea:	687b      	ldr	r3, [r7, #4]
  4003ec:	6a1a      	ldr	r2, [r3, #32]
  4003ee:	683b      	ldr	r3, [r7, #0]
  4003f0:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003f2:	2300      	movs	r3, #0
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3714      	adds	r7, #20
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bc80      	pop	{r7}
  4003fc:	4770      	bx	lr

004003fe <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003fe:	b480      	push	{r7}
  400400:	b087      	sub	sp, #28
  400402:	af00      	add	r7, sp, #0
  400404:	60f8      	str	r0, [r7, #12]
  400406:	60b9      	str	r1, [r7, #8]
  400408:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40040a:	68fa      	ldr	r2, [r7, #12]
  40040c:	68bb      	ldr	r3, [r7, #8]
  40040e:	019b      	lsls	r3, r3, #6
  400410:	4413      	add	r3, r2
  400412:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400414:	697b      	ldr	r3, [r7, #20]
  400416:	2202      	movs	r2, #2
  400418:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40041a:	697b      	ldr	r3, [r7, #20]
  40041c:	f04f 32ff 	mov.w	r2, #4294967295
  400420:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400422:	697b      	ldr	r3, [r7, #20]
  400424:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400426:	697b      	ldr	r3, [r7, #20]
  400428:	687a      	ldr	r2, [r7, #4]
  40042a:	605a      	str	r2, [r3, #4]
}
  40042c:	bf00      	nop
  40042e:	371c      	adds	r7, #28
  400430:	46bd      	mov	sp, r7
  400432:	bc80      	pop	{r7}
  400434:	4770      	bx	lr

00400436 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400436:	b480      	push	{r7}
  400438:	b083      	sub	sp, #12
  40043a:	af00      	add	r7, sp, #0
  40043c:	6078      	str	r0, [r7, #4]
  40043e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400440:	687a      	ldr	r2, [r7, #4]
  400442:	683b      	ldr	r3, [r7, #0]
  400444:	019b      	lsls	r3, r3, #6
  400446:	4413      	add	r3, r2
  400448:	2205      	movs	r2, #5
  40044a:	601a      	str	r2, [r3, #0]
}
  40044c:	bf00      	nop
  40044e:	370c      	adds	r7, #12
  400450:	46bd      	mov	sp, r7
  400452:	bc80      	pop	{r7}
  400454:	4770      	bx	lr

00400456 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400456:	b480      	push	{r7}
  400458:	b085      	sub	sp, #20
  40045a:	af00      	add	r7, sp, #0
  40045c:	60f8      	str	r0, [r7, #12]
  40045e:	60b9      	str	r1, [r7, #8]
  400460:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400462:	68fa      	ldr	r2, [r7, #12]
  400464:	68bb      	ldr	r3, [r7, #8]
  400466:	019b      	lsls	r3, r3, #6
  400468:	4413      	add	r3, r2
  40046a:	331c      	adds	r3, #28
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	601a      	str	r2, [r3, #0]
}
  400470:	bf00      	nop
  400472:	3714      	adds	r7, #20
  400474:	46bd      	mov	sp, r7
  400476:	bc80      	pop	{r7}
  400478:	4770      	bx	lr

0040047a <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40047a:	b480      	push	{r7}
  40047c:	b087      	sub	sp, #28
  40047e:	af00      	add	r7, sp, #0
  400480:	60f8      	str	r0, [r7, #12]
  400482:	60b9      	str	r1, [r7, #8]
  400484:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400486:	68fa      	ldr	r2, [r7, #12]
  400488:	68bb      	ldr	r3, [r7, #8]
  40048a:	019b      	lsls	r3, r3, #6
  40048c:	4413      	add	r3, r2
  40048e:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400490:	697b      	ldr	r3, [r7, #20]
  400492:	687a      	ldr	r2, [r7, #4]
  400494:	625a      	str	r2, [r3, #36]	; 0x24
}
  400496:	bf00      	nop
  400498:	371c      	adds	r7, #28
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b085      	sub	sp, #20
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
  4004a8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004aa:	687a      	ldr	r2, [r7, #4]
  4004ac:	683b      	ldr	r3, [r7, #0]
  4004ae:	019b      	lsls	r3, r3, #6
  4004b0:	4413      	add	r3, r2
  4004b2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	6a1b      	ldr	r3, [r3, #32]
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	3714      	adds	r7, #20
  4004bc:	46bd      	mov	sp, r7
  4004be:	bc80      	pop	{r7}
  4004c0:	4770      	bx	lr

004004c2 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004c2:	b480      	push	{r7}
  4004c4:	b08d      	sub	sp, #52	; 0x34
  4004c6:	af00      	add	r7, sp, #0
  4004c8:	60f8      	str	r0, [r7, #12]
  4004ca:	60b9      	str	r1, [r7, #8]
  4004cc:	607a      	str	r2, [r7, #4]
  4004ce:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004d0:	2302      	movs	r3, #2
  4004d2:	613b      	str	r3, [r7, #16]
  4004d4:	2308      	movs	r3, #8
  4004d6:	617b      	str	r3, [r7, #20]
  4004d8:	2320      	movs	r3, #32
  4004da:	61bb      	str	r3, [r7, #24]
  4004dc:	2380      	movs	r3, #128	; 0x80
  4004de:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004e2:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004e4:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004e6:	2300      	movs	r3, #0
  4004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004ea:	e01a      	b.n	400522 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004ee:	009b      	lsls	r3, r3, #2
  4004f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004f4:	4413      	add	r3, r2
  4004f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004fa:	68ba      	ldr	r2, [r7, #8]
  4004fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400500:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400502:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400504:	0c1b      	lsrs	r3, r3, #16
  400506:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400508:	68fa      	ldr	r2, [r7, #12]
  40050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40050c:	429a      	cmp	r2, r3
  40050e:	d901      	bls.n	400514 <tc_find_mck_divisor+0x52>
			return 0;
  400510:	2300      	movs	r3, #0
  400512:	e023      	b.n	40055c <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400514:	68fa      	ldr	r2, [r7, #12]
  400516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400518:	429a      	cmp	r2, r3
  40051a:	d206      	bcs.n	40052a <tc_find_mck_divisor+0x68>
			ul_index++) {
  40051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40051e:	3301      	adds	r3, #1
  400520:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400524:	2b04      	cmp	r3, #4
  400526:	d9e1      	bls.n	4004ec <tc_find_mck_divisor+0x2a>
  400528:	e000      	b.n	40052c <tc_find_mck_divisor+0x6a>
			break;
  40052a:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40052e:	2b04      	cmp	r3, #4
  400530:	d901      	bls.n	400536 <tc_find_mck_divisor+0x74>
		return 0;
  400532:	2300      	movs	r3, #0
  400534:	e012      	b.n	40055c <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400536:	687b      	ldr	r3, [r7, #4]
  400538:	2b00      	cmp	r3, #0
  40053a:	d008      	beq.n	40054e <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40053e:	009b      	lsls	r3, r3, #2
  400540:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400544:	4413      	add	r3, r2
  400546:	f853 2c20 	ldr.w	r2, [r3, #-32]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40054e:	683b      	ldr	r3, [r7, #0]
  400550:	2b00      	cmp	r3, #0
  400552:	d002      	beq.n	40055a <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400554:	683b      	ldr	r3, [r7, #0]
  400556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400558:	601a      	str	r2, [r3, #0]
	}

	return 1;
  40055a:	2301      	movs	r3, #1
}
  40055c:	4618      	mov	r0, r3
  40055e:	3734      	adds	r7, #52	; 0x34
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400574:	605a      	str	r2, [r3, #4]

}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	4603      	mov	r3, r0
  400588:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40058a:	4908      	ldr	r1, [pc, #32]	; (4005ac <NVIC_EnableIRQ+0x2c>)
  40058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400590:	095b      	lsrs	r3, r3, #5
  400592:	79fa      	ldrb	r2, [r7, #7]
  400594:	f002 021f 	and.w	r2, r2, #31
  400598:	2001      	movs	r0, #1
  40059a:	fa00 f202 	lsl.w	r2, r0, r2
  40059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005a2:	bf00      	nop
  4005a4:	370c      	adds	r7, #12
  4005a6:	46bd      	mov	sp, r7
  4005a8:	bc80      	pop	{r7}
  4005aa:	4770      	bx	lr
  4005ac:	e000e100 	.word	0xe000e100

004005b0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4005b0:	b480      	push	{r7}
  4005b2:	b083      	sub	sp, #12
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	4603      	mov	r3, r0
  4005b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005ba:	4909      	ldr	r1, [pc, #36]	; (4005e0 <NVIC_DisableIRQ+0x30>)
  4005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005c0:	095b      	lsrs	r3, r3, #5
  4005c2:	79fa      	ldrb	r2, [r7, #7]
  4005c4:	f002 021f 	and.w	r2, r2, #31
  4005c8:	2001      	movs	r0, #1
  4005ca:	fa00 f202 	lsl.w	r2, r0, r2
  4005ce:	3320      	adds	r3, #32
  4005d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005d4:	bf00      	nop
  4005d6:	370c      	adds	r7, #12
  4005d8:	46bd      	mov	sp, r7
  4005da:	bc80      	pop	{r7}
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	e000e100 	.word	0xe000e100

004005e4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b083      	sub	sp, #12
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	4603      	mov	r3, r0
  4005ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005ee:	4909      	ldr	r1, [pc, #36]	; (400614 <NVIC_ClearPendingIRQ+0x30>)
  4005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005f4:	095b      	lsrs	r3, r3, #5
  4005f6:	79fa      	ldrb	r2, [r7, #7]
  4005f8:	f002 021f 	and.w	r2, r2, #31
  4005fc:	2001      	movs	r0, #1
  4005fe:	fa00 f202 	lsl.w	r2, r0, r2
  400602:	3360      	adds	r3, #96	; 0x60
  400604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400608:	bf00      	nop
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	e000e100 	.word	0xe000e100

00400618 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	4603      	mov	r3, r0
  400620:	6039      	str	r1, [r7, #0]
  400622:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400624:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400628:	2b00      	cmp	r3, #0
  40062a:	da0b      	bge.n	400644 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40062c:	490d      	ldr	r1, [pc, #52]	; (400664 <NVIC_SetPriority+0x4c>)
  40062e:	79fb      	ldrb	r3, [r7, #7]
  400630:	f003 030f 	and.w	r3, r3, #15
  400634:	3b04      	subs	r3, #4
  400636:	683a      	ldr	r2, [r7, #0]
  400638:	b2d2      	uxtb	r2, r2
  40063a:	0112      	lsls	r2, r2, #4
  40063c:	b2d2      	uxtb	r2, r2
  40063e:	440b      	add	r3, r1
  400640:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400642:	e009      	b.n	400658 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400644:	4908      	ldr	r1, [pc, #32]	; (400668 <NVIC_SetPriority+0x50>)
  400646:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40064a:	683a      	ldr	r2, [r7, #0]
  40064c:	b2d2      	uxtb	r2, r2
  40064e:	0112      	lsls	r2, r2, #4
  400650:	b2d2      	uxtb	r2, r2
  400652:	440b      	add	r3, r1
  400654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400658:	bf00      	nop
  40065a:	370c      	adds	r7, #12
  40065c:	46bd      	mov	sp, r7
  40065e:	bc80      	pop	{r7}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	e000ed00 	.word	0xe000ed00
  400668:	e000e100 	.word	0xe000e100

0040066c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40066c:	b480      	push	{r7}
  40066e:	b083      	sub	sp, #12
  400670:	af00      	add	r7, sp, #0
  400672:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400674:	687b      	ldr	r3, [r7, #4]
  400676:	2b07      	cmp	r3, #7
  400678:	d825      	bhi.n	4006c6 <osc_get_rate+0x5a>
  40067a:	a201      	add	r2, pc, #4	; (adr r2, 400680 <osc_get_rate+0x14>)
  40067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400680:	004006a1 	.word	0x004006a1
  400684:	004006a7 	.word	0x004006a7
  400688:	004006ad 	.word	0x004006ad
  40068c:	004006b3 	.word	0x004006b3
  400690:	004006b7 	.word	0x004006b7
  400694:	004006bb 	.word	0x004006bb
  400698:	004006bf 	.word	0x004006bf
  40069c:	004006c3 	.word	0x004006c3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006a4:	e010      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4006a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006aa:	e00d      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4006ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006b0:	e00a      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4006b2:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <osc_get_rate+0x68>)
  4006b4:	e008      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4006b6:	4b08      	ldr	r3, [pc, #32]	; (4006d8 <osc_get_rate+0x6c>)
  4006b8:	e006      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006ba:	4b08      	ldr	r3, [pc, #32]	; (4006dc <osc_get_rate+0x70>)
  4006bc:	e004      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006be:	4b07      	ldr	r3, [pc, #28]	; (4006dc <osc_get_rate+0x70>)
  4006c0:	e002      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006c2:	4b06      	ldr	r3, [pc, #24]	; (4006dc <osc_get_rate+0x70>)
  4006c4:	e000      	b.n	4006c8 <osc_get_rate+0x5c>
	}

	return 0;
  4006c6:	2300      	movs	r3, #0
}
  4006c8:	4618      	mov	r0, r3
  4006ca:	370c      	adds	r7, #12
  4006cc:	46bd      	mov	sp, r7
  4006ce:	bc80      	pop	{r7}
  4006d0:	4770      	bx	lr
  4006d2:	bf00      	nop
  4006d4:	003d0900 	.word	0x003d0900
  4006d8:	007a1200 	.word	0x007a1200
  4006dc:	00b71b00 	.word	0x00b71b00

004006e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006e4:	2006      	movs	r0, #6
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <sysclk_get_main_hz+0x18>)
  4006e8:	4798      	blx	r3
  4006ea:	4602      	mov	r2, r0
  4006ec:	4613      	mov	r3, r2
  4006ee:	009b      	lsls	r3, r3, #2
  4006f0:	4413      	add	r3, r2
  4006f2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006f4:	4618      	mov	r0, r3
  4006f6:	bd80      	pop	{r7, pc}
  4006f8:	0040066d 	.word	0x0040066d

004006fc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <sysclk_get_cpu_hz+0x10>)
  400702:	4798      	blx	r3
  400704:	4603      	mov	r3, r0
  400706:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400708:	4618      	mov	r0, r3
  40070a:	bd80      	pop	{r7, pc}
  40070c:	004006e1 	.word	0x004006e1

00400710 <i2s_capture>:
volatile uint8_t i2s_rec_done = 0;

/** Receive index. */
volatile uint32_t i2s_buf_index = 0;

void i2s_capture(void){
  400710:	b580      	push	{r7, lr}
  400712:	af00      	add	r7, sp, #0
	i2s_rec_done = 0;
  400714:	4b09      	ldr	r3, [pc, #36]	; (40073c <i2s_capture+0x2c>)
  400716:	2200      	movs	r2, #0
  400718:	701a      	strb	r2, [r3, #0]
	i2s_buf_index = 0;
  40071a:	4b09      	ldr	r3, [pc, #36]	; (400740 <i2s_capture+0x30>)
  40071c:	2200      	movs	r2, #0
  40071e:	601a      	str	r2, [r3, #0]

	ssc_enable_interrupt(SSC, SSC_IDR_RXRDY);	
  400720:	2110      	movs	r1, #16
  400722:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400726:	4b07      	ldr	r3, [pc, #28]	; (400744 <i2s_capture+0x34>)
  400728:	4798      	blx	r3
	while (!i2s_rec_done) {}
  40072a:	bf00      	nop
  40072c:	4b03      	ldr	r3, [pc, #12]	; (40073c <i2s_capture+0x2c>)
  40072e:	781b      	ldrb	r3, [r3, #0]
  400730:	b2db      	uxtb	r3, r3
  400732:	2b00      	cmp	r3, #0
  400734:	d0fa      	beq.n	40072c <i2s_capture+0x1c>
}
  400736:	bf00      	nop
  400738:	bd80      	pop	{r7, pc}
  40073a:	bf00      	nop
  40073c:	200086d8 	.word	0x200086d8
  400740:	200086dc 	.word	0x200086dc
  400744:	00400375 	.word	0x00400375

00400748 <SSC_Handler>:
/**
 * \brief Synchronous Serial Controller Handler.
 *
 */
void SSC_Handler(void)
{
  400748:	b590      	push	{r4, r7, lr}
  40074a:	b083      	sub	sp, #12
  40074c:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40074e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400752:	4b13      	ldr	r3, [pc, #76]	; (4007a0 <SSC_Handler+0x58>)
  400754:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  400756:	1d3b      	adds	r3, r7, #4
  400758:	4619      	mov	r1, r3
  40075a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40075e:	4b11      	ldr	r3, [pc, #68]	; (4007a4 <SSC_Handler+0x5c>)
  400760:	4798      	blx	r3
	
	i2s_rec_buf[i2s_buf_index++] = modify_data(ul_data);
  400762:	4b11      	ldr	r3, [pc, #68]	; (4007a8 <SSC_Handler+0x60>)
  400764:	681c      	ldr	r4, [r3, #0]
  400766:	1c63      	adds	r3, r4, #1
  400768:	4a0f      	ldr	r2, [pc, #60]	; (4007a8 <SSC_Handler+0x60>)
  40076a:	6013      	str	r3, [r2, #0]
  40076c:	687b      	ldr	r3, [r7, #4]
  40076e:	4618      	mov	r0, r3
  400770:	4b0e      	ldr	r3, [pc, #56]	; (4007ac <SSC_Handler+0x64>)
  400772:	4798      	blx	r3
  400774:	4603      	mov	r3, r0
  400776:	461a      	mov	r2, r3
  400778:	4b0d      	ldr	r3, [pc, #52]	; (4007b0 <SSC_Handler+0x68>)
  40077a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (AUDIO_BUFFER_SIZE == i2s_buf_index) {
  40077e:	4b0a      	ldr	r3, [pc, #40]	; (4007a8 <SSC_Handler+0x60>)
  400780:	681b      	ldr	r3, [r3, #0]
  400782:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400786:	d107      	bne.n	400798 <SSC_Handler+0x50>
		i2s_rec_done = 1;
  400788:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <SSC_Handler+0x6c>)
  40078a:	2201      	movs	r2, #1
  40078c:	701a      	strb	r2, [r3, #0]
		ssc_disable_interrupt(SSC, SSC_IDR_RXRDY);
  40078e:	2110      	movs	r1, #16
  400790:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400794:	4b08      	ldr	r3, [pc, #32]	; (4007b8 <SSC_Handler+0x70>)
  400796:	4798      	blx	r3
	}
}
  400798:	bf00      	nop
  40079a:	370c      	adds	r7, #12
  40079c:	46bd      	mov	sp, r7
  40079e:	bd90      	pop	{r4, r7, pc}
  4007a0:	004003a9 	.word	0x004003a9
  4007a4:	004003bf 	.word	0x004003bf
  4007a8:	200086dc 	.word	0x200086dc
  4007ac:	004007bd 	.word	0x004007bd
  4007b0:	200009d8 	.word	0x200009d8
  4007b4:	200086d8 	.word	0x200086d8
  4007b8:	0040038f 	.word	0x0040038f

004007bc <modify_data>:

uint16_t modify_data(uint32_t data_to_modify) {
  4007bc:	b480      	push	{r7}
  4007be:	b083      	sub	sp, #12
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	6078      	str	r0, [r7, #4]
	// get rid of zero padding and tristated signal
	return (uint16_t) (data_to_modify >> 16);
  4007c4:	687b      	ldr	r3, [r7, #4]
  4007c6:	0c1b      	lsrs	r3, r3, #16
  4007c8:	b29b      	uxth	r3, r3
}
  4007ca:	4618      	mov	r0, r3
  4007cc:	370c      	adds	r7, #12
  4007ce:	46bd      	mov	sp, r7
  4007d0:	bc80      	pop	{r7}
  4007d2:	4770      	bx	lr

004007d4 <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void){
  4007d4:	b590      	push	{r4, r7, lr}
  4007d6:	b085      	sub	sp, #20
  4007d8:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007da:	2016      	movs	r0, #22
  4007dc:	4b18      	ldr	r3, [pc, #96]	; (400840 <configure_i2s+0x6c>)
  4007de:	4798      	blx	r3
	ssc_reset(SSC);
  4007e0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007e4:	4b17      	ldr	r3, [pc, #92]	; (400844 <configure_i2s+0x70>)
  4007e6:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007e8:	4b17      	ldr	r3, [pc, #92]	; (400848 <configure_i2s+0x74>)
  4007ea:	4798      	blx	r3
  4007ec:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007ee:	687a      	ldr	r2, [r7, #4]
  4007f0:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007f4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007f8:	4b14      	ldr	r3, [pc, #80]	; (40084c <configure_i2s+0x78>)
  4007fa:	4798      	blx	r3
  4007fc:	4603      	mov	r3, r0
  4007fe:	2b00      	cmp	r3, #0
  400800:	d11a      	bne.n	400838 <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  400802:	2320      	movs	r3, #32
  400804:	9300      	str	r3, [sp, #0]
  400806:	2301      	movs	r3, #1
  400808:	2202      	movs	r2, #2
  40080a:	2102      	movs	r1, #2
  40080c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400810:	4c0f      	ldr	r4, [pc, #60]	; (400850 <configure_i2s+0x7c>)
  400812:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  400814:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400818:	4b0e      	ldr	r3, [pc, #56]	; (400854 <configure_i2s+0x80>)
  40081a:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  40081c:	2016      	movs	r0, #22
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <configure_i2s+0x84>)
  400820:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  400822:	2016      	movs	r0, #22
  400824:	4b0d      	ldr	r3, [pc, #52]	; (40085c <configure_i2s+0x88>)
  400826:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  400828:	2104      	movs	r1, #4
  40082a:	2016      	movs	r0, #22
  40082c:	4b0c      	ldr	r3, [pc, #48]	; (400860 <configure_i2s+0x8c>)
  40082e:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400830:	2016      	movs	r0, #22
  400832:	4b0c      	ldr	r3, [pc, #48]	; (400864 <configure_i2s+0x90>)
  400834:	4798      	blx	r3
  400836:	e000      	b.n	40083a <configure_i2s+0x66>
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  400838:	bf00      	nop
  40083a:	370c      	adds	r7, #12
  40083c:	46bd      	mov	sp, r7
  40083e:	bd90      	pop	{r4, r7, pc}
  400840:	0040239d 	.word	0x0040239d
  400844:	00400275 	.word	0x00400275
  400848:	004006fd 	.word	0x004006fd
  40084c:	00400139 	.word	0x00400139
  400850:	00400179 	.word	0x00400179
  400854:	004002ad 	.word	0x004002ad
  400858:	004005b1 	.word	0x004005b1
  40085c:	004005e5 	.word	0x004005e5
  400860:	00400619 	.word	0x00400619
  400864:	00400581 	.word	0x00400581

00400868 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400868:	b580      	push	{r7, lr}
  40086a:	b084      	sub	sp, #16
  40086c:	af00      	add	r7, sp, #0
  40086e:	6078      	str	r0, [r7, #4]
  400870:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400872:	6878      	ldr	r0, [r7, #4]
  400874:	4b2c      	ldr	r3, [pc, #176]	; (400928 <pio_handler_process+0xc0>)
  400876:	4798      	blx	r3
  400878:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b2b      	ldr	r3, [pc, #172]	; (40092c <pio_handler_process+0xc4>)
  40087e:	4798      	blx	r3
  400880:	4602      	mov	r2, r0
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	4013      	ands	r3, r2
  400886:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	2b00      	cmp	r3, #0
  40088c:	d03c      	beq.n	400908 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40088e:	2300      	movs	r3, #0
  400890:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400892:	e034      	b.n	4008fe <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400894:	4a26      	ldr	r2, [pc, #152]	; (400930 <pio_handler_process+0xc8>)
  400896:	68bb      	ldr	r3, [r7, #8]
  400898:	011b      	lsls	r3, r3, #4
  40089a:	4413      	add	r3, r2
  40089c:	681a      	ldr	r2, [r3, #0]
  40089e:	683b      	ldr	r3, [r7, #0]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d126      	bne.n	4008f2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008a4:	4a22      	ldr	r2, [pc, #136]	; (400930 <pio_handler_process+0xc8>)
  4008a6:	68bb      	ldr	r3, [r7, #8]
  4008a8:	011b      	lsls	r3, r3, #4
  4008aa:	4413      	add	r3, r2
  4008ac:	3304      	adds	r3, #4
  4008ae:	681a      	ldr	r2, [r3, #0]
  4008b0:	68fb      	ldr	r3, [r7, #12]
  4008b2:	4013      	ands	r3, r2
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d01c      	beq.n	4008f2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008b8:	4a1d      	ldr	r2, [pc, #116]	; (400930 <pio_handler_process+0xc8>)
  4008ba:	68bb      	ldr	r3, [r7, #8]
  4008bc:	011b      	lsls	r3, r3, #4
  4008be:	4413      	add	r3, r2
  4008c0:	330c      	adds	r3, #12
  4008c2:	681b      	ldr	r3, [r3, #0]
  4008c4:	491a      	ldr	r1, [pc, #104]	; (400930 <pio_handler_process+0xc8>)
  4008c6:	68ba      	ldr	r2, [r7, #8]
  4008c8:	0112      	lsls	r2, r2, #4
  4008ca:	440a      	add	r2, r1
  4008cc:	6810      	ldr	r0, [r2, #0]
  4008ce:	4918      	ldr	r1, [pc, #96]	; (400930 <pio_handler_process+0xc8>)
  4008d0:	68ba      	ldr	r2, [r7, #8]
  4008d2:	0112      	lsls	r2, r2, #4
  4008d4:	440a      	add	r2, r1
  4008d6:	3204      	adds	r2, #4
  4008d8:	6812      	ldr	r2, [r2, #0]
  4008da:	4611      	mov	r1, r2
  4008dc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008de:	4a14      	ldr	r2, [pc, #80]	; (400930 <pio_handler_process+0xc8>)
  4008e0:	68bb      	ldr	r3, [r7, #8]
  4008e2:	011b      	lsls	r3, r3, #4
  4008e4:	4413      	add	r3, r2
  4008e6:	3304      	adds	r3, #4
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	43db      	mvns	r3, r3
  4008ec:	68fa      	ldr	r2, [r7, #12]
  4008ee:	4013      	ands	r3, r2
  4008f0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008f2:	68bb      	ldr	r3, [r7, #8]
  4008f4:	3301      	adds	r3, #1
  4008f6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008f8:	68bb      	ldr	r3, [r7, #8]
  4008fa:	2b06      	cmp	r3, #6
  4008fc:	d803      	bhi.n	400906 <pio_handler_process+0x9e>
		while (status != 0) {
  4008fe:	68fb      	ldr	r3, [r7, #12]
  400900:	2b00      	cmp	r3, #0
  400902:	d1c7      	bne.n	400894 <pio_handler_process+0x2c>
  400904:	e000      	b.n	400908 <pio_handler_process+0xa0>
				break;
  400906:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400908:	4b0a      	ldr	r3, [pc, #40]	; (400934 <pio_handler_process+0xcc>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	2b00      	cmp	r3, #0
  40090e:	d007      	beq.n	400920 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400910:	4b09      	ldr	r3, [pc, #36]	; (400938 <pio_handler_process+0xd0>)
  400912:	681b      	ldr	r3, [r3, #0]
  400914:	2b00      	cmp	r3, #0
  400916:	d003      	beq.n	400920 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400918:	4b07      	ldr	r3, [pc, #28]	; (400938 <pio_handler_process+0xd0>)
  40091a:	681b      	ldr	r3, [r3, #0]
  40091c:	6878      	ldr	r0, [r7, #4]
  40091e:	4798      	blx	r3
		}
	}
#endif
}
  400920:	bf00      	nop
  400922:	3710      	adds	r7, #16
  400924:	46bd      	mov	sp, r7
  400926:	bd80      	pop	{r7, pc}
  400928:	00401f4f 	.word	0x00401f4f
  40092c:	00401f65 	.word	0x00401f65
  400930:	200086e0 	.word	0x200086e0
  400934:	200089a4 	.word	0x200089a4
  400938:	20008754 	.word	0x20008754

0040093c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40093c:	b580      	push	{r7, lr}
  40093e:	b086      	sub	sp, #24
  400940:	af00      	add	r7, sp, #0
  400942:	60f8      	str	r0, [r7, #12]
  400944:	60b9      	str	r1, [r7, #8]
  400946:	607a      	str	r2, [r7, #4]
  400948:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40094a:	4b21      	ldr	r3, [pc, #132]	; (4009d0 <pio_handler_set+0x94>)
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	2b06      	cmp	r3, #6
  400950:	d901      	bls.n	400956 <pio_handler_set+0x1a>
		return 1;
  400952:	2301      	movs	r3, #1
  400954:	e038      	b.n	4009c8 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400956:	2300      	movs	r3, #0
  400958:	75fb      	strb	r3, [r7, #23]
  40095a:	e011      	b.n	400980 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40095c:	7dfb      	ldrb	r3, [r7, #23]
  40095e:	011b      	lsls	r3, r3, #4
  400960:	4a1c      	ldr	r2, [pc, #112]	; (4009d4 <pio_handler_set+0x98>)
  400962:	4413      	add	r3, r2
  400964:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400966:	693b      	ldr	r3, [r7, #16]
  400968:	681a      	ldr	r2, [r3, #0]
  40096a:	68bb      	ldr	r3, [r7, #8]
  40096c:	429a      	cmp	r2, r3
  40096e:	d104      	bne.n	40097a <pio_handler_set+0x3e>
  400970:	693b      	ldr	r3, [r7, #16]
  400972:	685a      	ldr	r2, [r3, #4]
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	429a      	cmp	r2, r3
  400978:	d008      	beq.n	40098c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40097a:	7dfb      	ldrb	r3, [r7, #23]
  40097c:	3301      	adds	r3, #1
  40097e:	75fb      	strb	r3, [r7, #23]
  400980:	7dfa      	ldrb	r2, [r7, #23]
  400982:	4b13      	ldr	r3, [pc, #76]	; (4009d0 <pio_handler_set+0x94>)
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	429a      	cmp	r2, r3
  400988:	d9e8      	bls.n	40095c <pio_handler_set+0x20>
  40098a:	e000      	b.n	40098e <pio_handler_set+0x52>
			break;
  40098c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40098e:	693b      	ldr	r3, [r7, #16]
  400990:	68ba      	ldr	r2, [r7, #8]
  400992:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400994:	693b      	ldr	r3, [r7, #16]
  400996:	687a      	ldr	r2, [r7, #4]
  400998:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40099a:	693b      	ldr	r3, [r7, #16]
  40099c:	683a      	ldr	r2, [r7, #0]
  40099e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4009a0:	693b      	ldr	r3, [r7, #16]
  4009a2:	6a3a      	ldr	r2, [r7, #32]
  4009a4:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4009a6:	7dfa      	ldrb	r2, [r7, #23]
  4009a8:	4b09      	ldr	r3, [pc, #36]	; (4009d0 <pio_handler_set+0x94>)
  4009aa:	681b      	ldr	r3, [r3, #0]
  4009ac:	3301      	adds	r3, #1
  4009ae:	429a      	cmp	r2, r3
  4009b0:	d104      	bne.n	4009bc <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4009b2:	4b07      	ldr	r3, [pc, #28]	; (4009d0 <pio_handler_set+0x94>)
  4009b4:	681b      	ldr	r3, [r3, #0]
  4009b6:	3301      	adds	r3, #1
  4009b8:	4a05      	ldr	r2, [pc, #20]	; (4009d0 <pio_handler_set+0x94>)
  4009ba:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009bc:	683a      	ldr	r2, [r7, #0]
  4009be:	6879      	ldr	r1, [r7, #4]
  4009c0:	68f8      	ldr	r0, [r7, #12]
  4009c2:	4b05      	ldr	r3, [pc, #20]	; (4009d8 <pio_handler_set+0x9c>)
  4009c4:	4798      	blx	r3

	return 0;
  4009c6:	2300      	movs	r3, #0
}
  4009c8:	4618      	mov	r0, r3
  4009ca:	3718      	adds	r7, #24
  4009cc:	46bd      	mov	sp, r7
  4009ce:	bd80      	pop	{r7, pc}
  4009d0:	20008750 	.word	0x20008750
  4009d4:	200086e0 	.word	0x200086e0
  4009d8:	00401eb1 	.word	0x00401eb1

004009dc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009e0:	210b      	movs	r1, #11
  4009e2:	4802      	ldr	r0, [pc, #8]	; (4009ec <PIOA_Handler+0x10>)
  4009e4:	4b02      	ldr	r3, [pc, #8]	; (4009f0 <PIOA_Handler+0x14>)
  4009e6:	4798      	blx	r3
}
  4009e8:	bf00      	nop
  4009ea:	bd80      	pop	{r7, pc}
  4009ec:	400e0e00 	.word	0x400e0e00
  4009f0:	00400869 	.word	0x00400869

004009f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009f4:	b580      	push	{r7, lr}
  4009f6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009f8:	210c      	movs	r1, #12
  4009fa:	4802      	ldr	r0, [pc, #8]	; (400a04 <PIOB_Handler+0x10>)
  4009fc:	4b02      	ldr	r3, [pc, #8]	; (400a08 <PIOB_Handler+0x14>)
  4009fe:	4798      	blx	r3
}
  400a00:	bf00      	nop
  400a02:	bd80      	pop	{r7, pc}
  400a04:	400e1000 	.word	0x400e1000
  400a08:	00400869 	.word	0x00400869

00400a0c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a0c:	b480      	push	{r7}
  400a0e:	b089      	sub	sp, #36	; 0x24
  400a10:	af00      	add	r7, sp, #0
  400a12:	60f8      	str	r0, [r7, #12]
  400a14:	60b9      	str	r1, [r7, #8]
  400a16:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a18:	68bb      	ldr	r3, [r7, #8]
  400a1a:	011a      	lsls	r2, r3, #4
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	429a      	cmp	r2, r3
  400a20:	d802      	bhi.n	400a28 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400a22:	2310      	movs	r3, #16
  400a24:	61fb      	str	r3, [r7, #28]
  400a26:	e001      	b.n	400a2c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400a28:	2308      	movs	r3, #8
  400a2a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a2c:	687b      	ldr	r3, [r7, #4]
  400a2e:	00da      	lsls	r2, r3, #3
  400a30:	69fb      	ldr	r3, [r7, #28]
  400a32:	68b9      	ldr	r1, [r7, #8]
  400a34:	fb01 f303 	mul.w	r3, r1, r3
  400a38:	085b      	lsrs	r3, r3, #1
  400a3a:	441a      	add	r2, r3
  400a3c:	69fb      	ldr	r3, [r7, #28]
  400a3e:	68b9      	ldr	r1, [r7, #8]
  400a40:	fb01 f303 	mul.w	r3, r1, r3
  400a44:	fbb2 f3f3 	udiv	r3, r2, r3
  400a48:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	08db      	lsrs	r3, r3, #3
  400a4e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400a50:	69bb      	ldr	r3, [r7, #24]
  400a52:	f003 0307 	and.w	r3, r3, #7
  400a56:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a58:	697b      	ldr	r3, [r7, #20]
  400a5a:	2b00      	cmp	r3, #0
  400a5c:	d003      	beq.n	400a66 <usart_set_async_baudrate+0x5a>
  400a5e:	697b      	ldr	r3, [r7, #20]
  400a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400a64:	d301      	bcc.n	400a6a <usart_set_async_baudrate+0x5e>
		return 1;
  400a66:	2301      	movs	r3, #1
  400a68:	e00f      	b.n	400a8a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400a6a:	69fb      	ldr	r3, [r7, #28]
  400a6c:	2b08      	cmp	r3, #8
  400a6e:	d105      	bne.n	400a7c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400a70:	68fb      	ldr	r3, [r7, #12]
  400a72:	685b      	ldr	r3, [r3, #4]
  400a74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400a78:	68fb      	ldr	r3, [r7, #12]
  400a7a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a7c:	693b      	ldr	r3, [r7, #16]
  400a7e:	041a      	lsls	r2, r3, #16
  400a80:	697b      	ldr	r3, [r7, #20]
  400a82:	431a      	orrs	r2, r3
  400a84:	68fb      	ldr	r3, [r7, #12]
  400a86:	621a      	str	r2, [r3, #32]

	return 0;
  400a88:	2300      	movs	r3, #0
}
  400a8a:	4618      	mov	r0, r3
  400a8c:	3724      	adds	r7, #36	; 0x24
  400a8e:	46bd      	mov	sp, r7
  400a90:	bc80      	pop	{r7}
  400a92:	4770      	bx	lr

00400a94 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400a94:	b580      	push	{r7, lr}
  400a96:	b082      	sub	sp, #8
  400a98:	af00      	add	r7, sp, #0
  400a9a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400a9c:	6878      	ldr	r0, [r7, #4]
  400a9e:	4b0f      	ldr	r3, [pc, #60]	; (400adc <usart_reset+0x48>)
  400aa0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	2200      	movs	r2, #0
  400aa6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400aa8:	687b      	ldr	r3, [r7, #4]
  400aaa:	2200      	movs	r2, #0
  400aac:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400aae:	687b      	ldr	r3, [r7, #4]
  400ab0:	2200      	movs	r2, #0
  400ab2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400ab4:	6878      	ldr	r0, [r7, #4]
  400ab6:	4b0a      	ldr	r3, [pc, #40]	; (400ae0 <usart_reset+0x4c>)
  400ab8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400aba:	6878      	ldr	r0, [r7, #4]
  400abc:	4b09      	ldr	r3, [pc, #36]	; (400ae4 <usart_reset+0x50>)
  400abe:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400ac0:	6878      	ldr	r0, [r7, #4]
  400ac2:	4b09      	ldr	r3, [pc, #36]	; (400ae8 <usart_reset+0x54>)
  400ac4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400ac6:	6878      	ldr	r0, [r7, #4]
  400ac8:	4b08      	ldr	r3, [pc, #32]	; (400aec <usart_reset+0x58>)
  400aca:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400acc:	6878      	ldr	r0, [r7, #4]
  400ace:	4b08      	ldr	r3, [pc, #32]	; (400af0 <usart_reset+0x5c>)
  400ad0:	4798      	blx	r3
#endif
}
  400ad2:	bf00      	nop
  400ad4:	3708      	adds	r7, #8
  400ad6:	46bd      	mov	sp, r7
  400ad8:	bd80      	pop	{r7, pc}
  400ada:	bf00      	nop
  400adc:	00400d45 	.word	0x00400d45
  400ae0:	00400bd1 	.word	0x00400bd1
  400ae4:	00400c01 	.word	0x00400c01
  400ae8:	00400c63 	.word	0x00400c63
  400aec:	00400c97 	.word	0x00400c97
  400af0:	00400c7d 	.word	0x00400c7d

00400af4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400af4:	b580      	push	{r7, lr}
  400af6:	b084      	sub	sp, #16
  400af8:	af00      	add	r7, sp, #0
  400afa:	60f8      	str	r0, [r7, #12]
  400afc:	60b9      	str	r1, [r7, #8]
  400afe:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400b00:	68f8      	ldr	r0, [r7, #12]
  400b02:	4b1a      	ldr	r3, [pc, #104]	; (400b6c <usart_init_rs232+0x78>)
  400b04:	4798      	blx	r3

	ul_reg_val = 0;
  400b06:	4b1a      	ldr	r3, [pc, #104]	; (400b70 <usart_init_rs232+0x7c>)
  400b08:	2200      	movs	r2, #0
  400b0a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400b0c:	68bb      	ldr	r3, [r7, #8]
  400b0e:	2b00      	cmp	r3, #0
  400b10:	d009      	beq.n	400b26 <usart_init_rs232+0x32>
  400b12:	68bb      	ldr	r3, [r7, #8]
  400b14:	681b      	ldr	r3, [r3, #0]
  400b16:	687a      	ldr	r2, [r7, #4]
  400b18:	4619      	mov	r1, r3
  400b1a:	68f8      	ldr	r0, [r7, #12]
  400b1c:	4b15      	ldr	r3, [pc, #84]	; (400b74 <usart_init_rs232+0x80>)
  400b1e:	4798      	blx	r3
  400b20:	4603      	mov	r3, r0
  400b22:	2b00      	cmp	r3, #0
  400b24:	d001      	beq.n	400b2a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400b26:	2301      	movs	r3, #1
  400b28:	e01b      	b.n	400b62 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b2a:	68bb      	ldr	r3, [r7, #8]
  400b2c:	685a      	ldr	r2, [r3, #4]
  400b2e:	68bb      	ldr	r3, [r7, #8]
  400b30:	689b      	ldr	r3, [r3, #8]
  400b32:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b34:	68bb      	ldr	r3, [r7, #8]
  400b36:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b38:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b3a:	68bb      	ldr	r3, [r7, #8]
  400b3c:	68db      	ldr	r3, [r3, #12]
  400b3e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b40:	4b0b      	ldr	r3, [pc, #44]	; (400b70 <usart_init_rs232+0x7c>)
  400b42:	681b      	ldr	r3, [r3, #0]
  400b44:	4313      	orrs	r3, r2
  400b46:	4a0a      	ldr	r2, [pc, #40]	; (400b70 <usart_init_rs232+0x7c>)
  400b48:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400b4a:	4b09      	ldr	r3, [pc, #36]	; (400b70 <usart_init_rs232+0x7c>)
  400b4c:	681b      	ldr	r3, [r3, #0]
  400b4e:	4a08      	ldr	r2, [pc, #32]	; (400b70 <usart_init_rs232+0x7c>)
  400b50:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400b52:	68fb      	ldr	r3, [r7, #12]
  400b54:	685a      	ldr	r2, [r3, #4]
  400b56:	4b06      	ldr	r3, [pc, #24]	; (400b70 <usart_init_rs232+0x7c>)
  400b58:	681b      	ldr	r3, [r3, #0]
  400b5a:	431a      	orrs	r2, r3
  400b5c:	68fb      	ldr	r3, [r7, #12]
  400b5e:	605a      	str	r2, [r3, #4]

	return 0;
  400b60:	2300      	movs	r3, #0
}
  400b62:	4618      	mov	r0, r3
  400b64:	3710      	adds	r7, #16
  400b66:	46bd      	mov	sp, r7
  400b68:	bd80      	pop	{r7, pc}
  400b6a:	bf00      	nop
  400b6c:	00400a95 	.word	0x00400a95
  400b70:	20008758 	.word	0x20008758
  400b74:	00400a0d 	.word	0x00400a0d

00400b78 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400b78:	b580      	push	{r7, lr}
  400b7a:	b084      	sub	sp, #16
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	60f8      	str	r0, [r7, #12]
  400b80:	60b9      	str	r1, [r7, #8]
  400b82:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400b84:	687a      	ldr	r2, [r7, #4]
  400b86:	68b9      	ldr	r1, [r7, #8]
  400b88:	68f8      	ldr	r0, [r7, #12]
  400b8a:	4b0a      	ldr	r3, [pc, #40]	; (400bb4 <usart_init_hw_handshaking+0x3c>)
  400b8c:	4798      	blx	r3
  400b8e:	4603      	mov	r3, r0
  400b90:	2b00      	cmp	r3, #0
  400b92:	d001      	beq.n	400b98 <usart_init_hw_handshaking+0x20>
		return 1;
  400b94:	2301      	movs	r3, #1
  400b96:	e008      	b.n	400baa <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400b98:	68fb      	ldr	r3, [r7, #12]
  400b9a:	685b      	ldr	r3, [r3, #4]
  400b9c:	f023 030f 	bic.w	r3, r3, #15
  400ba0:	f043 0202 	orr.w	r2, r3, #2
  400ba4:	68fb      	ldr	r3, [r7, #12]
  400ba6:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400ba8:	2300      	movs	r3, #0
}
  400baa:	4618      	mov	r0, r3
  400bac:	3710      	adds	r7, #16
  400bae:	46bd      	mov	sp, r7
  400bb0:	bd80      	pop	{r7, pc}
  400bb2:	bf00      	nop
  400bb4:	00400af5 	.word	0x00400af5

00400bb8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400bb8:	b480      	push	{r7}
  400bba:	b083      	sub	sp, #12
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	2240      	movs	r2, #64	; 0x40
  400bc4:	601a      	str	r2, [r3, #0]
}
  400bc6:	bf00      	nop
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	bc80      	pop	{r7}
  400bce:	4770      	bx	lr

00400bd0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400bd0:	b480      	push	{r7}
  400bd2:	b083      	sub	sp, #12
  400bd4:	af00      	add	r7, sp, #0
  400bd6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bd8:	687b      	ldr	r3, [r7, #4]
  400bda:	2288      	movs	r2, #136	; 0x88
  400bdc:	601a      	str	r2, [r3, #0]
}
  400bde:	bf00      	nop
  400be0:	370c      	adds	r7, #12
  400be2:	46bd      	mov	sp, r7
  400be4:	bc80      	pop	{r7}
  400be6:	4770      	bx	lr

00400be8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	2210      	movs	r2, #16
  400bf4:	601a      	str	r2, [r3, #0]
}
  400bf6:	bf00      	nop
  400bf8:	370c      	adds	r7, #12
  400bfa:	46bd      	mov	sp, r7
  400bfc:	bc80      	pop	{r7}
  400bfe:	4770      	bx	lr

00400c00 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	2224      	movs	r2, #36	; 0x24
  400c0c:	601a      	str	r2, [r3, #0]
}
  400c0e:	bf00      	nop
  400c10:	370c      	adds	r7, #12
  400c12:	46bd      	mov	sp, r7
  400c14:	bc80      	pop	{r7}
  400c16:	4770      	bx	lr

00400c18 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c18:	b480      	push	{r7}
  400c1a:	b083      	sub	sp, #12
  400c1c:	af00      	add	r7, sp, #0
  400c1e:	6078      	str	r0, [r7, #4]
  400c20:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400c22:	687b      	ldr	r3, [r7, #4]
  400c24:	683a      	ldr	r2, [r7, #0]
  400c26:	609a      	str	r2, [r3, #8]
}
  400c28:	bf00      	nop
  400c2a:	370c      	adds	r7, #12
  400c2c:	46bd      	mov	sp, r7
  400c2e:	bc80      	pop	{r7}
  400c30:	4770      	bx	lr

00400c32 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c32:	b480      	push	{r7}
  400c34:	b083      	sub	sp, #12
  400c36:	af00      	add	r7, sp, #0
  400c38:	6078      	str	r0, [r7, #4]
  400c3a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	683a      	ldr	r2, [r7, #0]
  400c40:	60da      	str	r2, [r3, #12]
}
  400c42:	bf00      	nop
  400c44:	370c      	adds	r7, #12
  400c46:	46bd      	mov	sp, r7
  400c48:	bc80      	pop	{r7}
  400c4a:	4770      	bx	lr

00400c4c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400c4c:	b480      	push	{r7}
  400c4e:	b083      	sub	sp, #12
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	695b      	ldr	r3, [r3, #20]
}
  400c58:	4618      	mov	r0, r3
  400c5a:	370c      	adds	r7, #12
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr

00400c62 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400c62:	b480      	push	{r7}
  400c64:	b083      	sub	sp, #12
  400c66:	af00      	add	r7, sp, #0
  400c68:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c70:	601a      	str	r2, [r3, #0]
}
  400c72:	bf00      	nop
  400c74:	370c      	adds	r7, #12
  400c76:	46bd      	mov	sp, r7
  400c78:	bc80      	pop	{r7}
  400c7a:	4770      	bx	lr

00400c7c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400c8a:	601a      	str	r2, [r3, #0]
}
  400c8c:	bf00      	nop
  400c8e:	370c      	adds	r7, #12
  400c90:	46bd      	mov	sp, r7
  400c92:	bc80      	pop	{r7}
  400c94:	4770      	bx	lr

00400c96 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400c96:	b480      	push	{r7}
  400c98:	b083      	sub	sp, #12
  400c9a:	af00      	add	r7, sp, #0
  400c9c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400c9e:	687b      	ldr	r3, [r7, #4]
  400ca0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ca4:	601a      	str	r2, [r3, #0]
}
  400ca6:	bf00      	nop
  400ca8:	370c      	adds	r7, #12
  400caa:	46bd      	mov	sp, r7
  400cac:	bc80      	pop	{r7}
  400cae:	4770      	bx	lr

00400cb0 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400cb0:	b480      	push	{r7}
  400cb2:	b083      	sub	sp, #12
  400cb4:	af00      	add	r7, sp, #0
  400cb6:	6078      	str	r0, [r7, #4]
  400cb8:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400cba:	bf00      	nop
  400cbc:	687b      	ldr	r3, [r7, #4]
  400cbe:	695b      	ldr	r3, [r3, #20]
  400cc0:	f003 0302 	and.w	r3, r3, #2
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d0f9      	beq.n	400cbc <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400cc8:	683b      	ldr	r3, [r7, #0]
  400cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cce:	687b      	ldr	r3, [r7, #4]
  400cd0:	61da      	str	r2, [r3, #28]

	return 0;
  400cd2:	2300      	movs	r3, #0
}
  400cd4:	4618      	mov	r0, r3
  400cd6:	370c      	adds	r7, #12
  400cd8:	46bd      	mov	sp, r7
  400cda:	bc80      	pop	{r7}
  400cdc:	4770      	bx	lr
	...

00400ce0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400ce0:	b580      	push	{r7, lr}
  400ce2:	b082      	sub	sp, #8
  400ce4:	af00      	add	r7, sp, #0
  400ce6:	6078      	str	r0, [r7, #4]
  400ce8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400cea:	e007      	b.n	400cfc <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400cec:	683b      	ldr	r3, [r7, #0]
  400cee:	1c5a      	adds	r2, r3, #1
  400cf0:	603a      	str	r2, [r7, #0]
  400cf2:	781b      	ldrb	r3, [r3, #0]
  400cf4:	4619      	mov	r1, r3
  400cf6:	6878      	ldr	r0, [r7, #4]
  400cf8:	4b04      	ldr	r3, [pc, #16]	; (400d0c <usart_write_line+0x2c>)
  400cfa:	4798      	blx	r3
	while (*string != '\0') {
  400cfc:	683b      	ldr	r3, [r7, #0]
  400cfe:	781b      	ldrb	r3, [r3, #0]
  400d00:	2b00      	cmp	r3, #0
  400d02:	d1f3      	bne.n	400cec <usart_write_line+0xc>
	}
}
  400d04:	bf00      	nop
  400d06:	3708      	adds	r7, #8
  400d08:	46bd      	mov	sp, r7
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cb1 	.word	0x00400cb1

00400d10 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400d10:	b480      	push	{r7}
  400d12:	b083      	sub	sp, #12
  400d14:	af00      	add	r7, sp, #0
  400d16:	6078      	str	r0, [r7, #4]
  400d18:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d1a:	687b      	ldr	r3, [r7, #4]
  400d1c:	695b      	ldr	r3, [r3, #20]
  400d1e:	f003 0301 	and.w	r3, r3, #1
  400d22:	2b00      	cmp	r3, #0
  400d24:	d101      	bne.n	400d2a <usart_read+0x1a>
		return 1;
  400d26:	2301      	movs	r3, #1
  400d28:	e006      	b.n	400d38 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d2a:	687b      	ldr	r3, [r7, #4]
  400d2c:	699b      	ldr	r3, [r3, #24]
  400d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400d32:	683b      	ldr	r3, [r7, #0]
  400d34:	601a      	str	r2, [r3, #0]

	return 0;
  400d36:	2300      	movs	r3, #0
}
  400d38:	4618      	mov	r0, r3
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
	...

00400d44 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400d44:	b480      	push	{r7}
  400d46:	b083      	sub	sp, #12
  400d48:	af00      	add	r7, sp, #0
  400d4a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	4a04      	ldr	r2, [pc, #16]	; (400d60 <usart_disable_writeprotect+0x1c>)
  400d50:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400d54:	bf00      	nop
  400d56:	370c      	adds	r7, #12
  400d58:	46bd      	mov	sp, r7
  400d5a:	bc80      	pop	{r7}
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop
  400d60:	55534100 	.word	0x55534100

00400d64 <NVIC_EnableIRQ>:
{
  400d64:	b480      	push	{r7}
  400d66:	b083      	sub	sp, #12
  400d68:	af00      	add	r7, sp, #0
  400d6a:	4603      	mov	r3, r0
  400d6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d6e:	4908      	ldr	r1, [pc, #32]	; (400d90 <NVIC_EnableIRQ+0x2c>)
  400d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d74:	095b      	lsrs	r3, r3, #5
  400d76:	79fa      	ldrb	r2, [r7, #7]
  400d78:	f002 021f 	and.w	r2, r2, #31
  400d7c:	2001      	movs	r0, #1
  400d7e:	fa00 f202 	lsl.w	r2, r0, r2
  400d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400d86:	bf00      	nop
  400d88:	370c      	adds	r7, #12
  400d8a:	46bd      	mov	sp, r7
  400d8c:	bc80      	pop	{r7}
  400d8e:	4770      	bx	lr
  400d90:	e000e100 	.word	0xe000e100

00400d94 <osc_get_rate>:
{
  400d94:	b480      	push	{r7}
  400d96:	b083      	sub	sp, #12
  400d98:	af00      	add	r7, sp, #0
  400d9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d9c:	687b      	ldr	r3, [r7, #4]
  400d9e:	2b07      	cmp	r3, #7
  400da0:	d825      	bhi.n	400dee <osc_get_rate+0x5a>
  400da2:	a201      	add	r2, pc, #4	; (adr r2, 400da8 <osc_get_rate+0x14>)
  400da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400da8:	00400dc9 	.word	0x00400dc9
  400dac:	00400dcf 	.word	0x00400dcf
  400db0:	00400dd5 	.word	0x00400dd5
  400db4:	00400ddb 	.word	0x00400ddb
  400db8:	00400ddf 	.word	0x00400ddf
  400dbc:	00400de3 	.word	0x00400de3
  400dc0:	00400de7 	.word	0x00400de7
  400dc4:	00400deb 	.word	0x00400deb
		return OSC_SLCK_32K_RC_HZ;
  400dc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400dcc:	e010      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dd2:	e00d      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dd8:	e00a      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400dda:	4b08      	ldr	r3, [pc, #32]	; (400dfc <osc_get_rate+0x68>)
  400ddc:	e008      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400dde:	4b08      	ldr	r3, [pc, #32]	; (400e00 <osc_get_rate+0x6c>)
  400de0:	e006      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400de2:	4b08      	ldr	r3, [pc, #32]	; (400e04 <osc_get_rate+0x70>)
  400de4:	e004      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400de6:	4b07      	ldr	r3, [pc, #28]	; (400e04 <osc_get_rate+0x70>)
  400de8:	e002      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400dea:	4b06      	ldr	r3, [pc, #24]	; (400e04 <osc_get_rate+0x70>)
  400dec:	e000      	b.n	400df0 <osc_get_rate+0x5c>
	return 0;
  400dee:	2300      	movs	r3, #0
}
  400df0:	4618      	mov	r0, r3
  400df2:	370c      	adds	r7, #12
  400df4:	46bd      	mov	sp, r7
  400df6:	bc80      	pop	{r7}
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	003d0900 	.word	0x003d0900
  400e00:	007a1200 	.word	0x007a1200
  400e04:	00b71b00 	.word	0x00b71b00

00400e08 <sysclk_get_main_hz>:
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400e0c:	2006      	movs	r0, #6
  400e0e:	4b04      	ldr	r3, [pc, #16]	; (400e20 <sysclk_get_main_hz+0x18>)
  400e10:	4798      	blx	r3
  400e12:	4602      	mov	r2, r0
  400e14:	4613      	mov	r3, r2
  400e16:	009b      	lsls	r3, r3, #2
  400e18:	4413      	add	r3, r2
  400e1a:	009b      	lsls	r3, r3, #2
}
  400e1c:	4618      	mov	r0, r3
  400e1e:	bd80      	pop	{r7, pc}
  400e20:	00400d95 	.word	0x00400d95

00400e24 <sysclk_get_cpu_hz>:
{
  400e24:	b580      	push	{r7, lr}
  400e26:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400e28:	4b02      	ldr	r3, [pc, #8]	; (400e34 <sysclk_get_cpu_hz+0x10>)
  400e2a:	4798      	blx	r3
  400e2c:	4603      	mov	r3, r0
  400e2e:	085b      	lsrs	r3, r3, #1
}
  400e30:	4618      	mov	r0, r3
  400e32:	bd80      	pop	{r7, pc}
  400e34:	00400e09 	.word	0x00400e09

00400e38 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400e38:	b580      	push	{r7, lr}
  400e3a:	b082      	sub	sp, #8
  400e3c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400e3e:	2100      	movs	r1, #0
  400e40:	4809      	ldr	r0, [pc, #36]	; (400e68 <TC0_Handler+0x30>)
  400e42:	4b0a      	ldr	r3, [pc, #40]	; (400e6c <TC0_Handler+0x34>)
  400e44:	4798      	blx	r3
  400e46:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	f003 0310 	and.w	r3, r3, #16
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d006      	beq.n	400e60 <TC0_Handler+0x28>
		counts++;
  400e52:	4b07      	ldr	r3, [pc, #28]	; (400e70 <TC0_Handler+0x38>)
  400e54:	781b      	ldrb	r3, [r3, #0]
  400e56:	b2db      	uxtb	r3, r3
  400e58:	3301      	adds	r3, #1
  400e5a:	b2da      	uxtb	r2, r3
  400e5c:	4b04      	ldr	r3, [pc, #16]	; (400e70 <TC0_Handler+0x38>)
  400e5e:	701a      	strb	r2, [r3, #0]
	}
}
  400e60:	bf00      	nop
  400e62:	3708      	adds	r7, #8
  400e64:	46bd      	mov	sp, r7
  400e66:	bd80      	pop	{r7, pc}
  400e68:	40010000 	.word	0x40010000
  400e6c:	004004a1 	.word	0x004004a1
  400e70:	200089a0 	.word	0x200089a0

00400e74 <configure_tc>:

void configure_tc(void)
{
  400e74:	b590      	push	{r4, r7, lr}
  400e76:	b087      	sub	sp, #28
  400e78:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400e7a:	4b16      	ldr	r3, [pc, #88]	; (400ed4 <configure_tc+0x60>)
  400e7c:	4798      	blx	r3
  400e7e:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400e80:	2017      	movs	r0, #23
  400e82:	4b15      	ldr	r3, [pc, #84]	; (400ed8 <configure_tc+0x64>)
  400e84:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400e86:	1d39      	adds	r1, r7, #4
  400e88:	f107 0208 	add.w	r2, r7, #8
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	9300      	str	r3, [sp, #0]
  400e90:	460b      	mov	r3, r1
  400e92:	68f9      	ldr	r1, [r7, #12]
  400e94:	2001      	movs	r0, #1
  400e96:	4c11      	ldr	r4, [pc, #68]	; (400edc <configure_tc+0x68>)
  400e98:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400e9a:	687b      	ldr	r3, [r7, #4]
  400e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400ea0:	461a      	mov	r2, r3
  400ea2:	2100      	movs	r1, #0
  400ea4:	480e      	ldr	r0, [pc, #56]	; (400ee0 <configure_tc+0x6c>)
  400ea6:	4b0f      	ldr	r3, [pc, #60]	; (400ee4 <configure_tc+0x70>)
  400ea8:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	fbb2 f3f3 	udiv	r3, r2, r3
  400eb2:	461a      	mov	r2, r3
  400eb4:	2100      	movs	r1, #0
  400eb6:	480a      	ldr	r0, [pc, #40]	; (400ee0 <configure_tc+0x6c>)
  400eb8:	4b0b      	ldr	r3, [pc, #44]	; (400ee8 <configure_tc+0x74>)
  400eba:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400ebc:	2017      	movs	r0, #23
  400ebe:	4b0b      	ldr	r3, [pc, #44]	; (400eec <configure_tc+0x78>)
  400ec0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400ec2:	2210      	movs	r2, #16
  400ec4:	2100      	movs	r1, #0
  400ec6:	4806      	ldr	r0, [pc, #24]	; (400ee0 <configure_tc+0x6c>)
  400ec8:	4b09      	ldr	r3, [pc, #36]	; (400ef0 <configure_tc+0x7c>)
  400eca:	4798      	blx	r3
  400ecc:	bf00      	nop
  400ece:	3714      	adds	r7, #20
  400ed0:	46bd      	mov	sp, r7
  400ed2:	bd90      	pop	{r4, r7, pc}
  400ed4:	00400e25 	.word	0x00400e25
  400ed8:	0040239d 	.word	0x0040239d
  400edc:	004004c3 	.word	0x004004c3
  400ee0:	40010000 	.word	0x40010000
  400ee4:	004003ff 	.word	0x004003ff
  400ee8:	00400457 	.word	0x00400457
  400eec:	00400d65 	.word	0x00400d65
  400ef0:	0040047b 	.word	0x0040047b

00400ef4 <NVIC_EnableIRQ>:
{
  400ef4:	b480      	push	{r7}
  400ef6:	b083      	sub	sp, #12
  400ef8:	af00      	add	r7, sp, #0
  400efa:	4603      	mov	r3, r0
  400efc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400efe:	4908      	ldr	r1, [pc, #32]	; (400f20 <NVIC_EnableIRQ+0x2c>)
  400f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400f04:	095b      	lsrs	r3, r3, #5
  400f06:	79fa      	ldrb	r2, [r7, #7]
  400f08:	f002 021f 	and.w	r2, r2, #31
  400f0c:	2001      	movs	r0, #1
  400f0e:	fa00 f202 	lsl.w	r2, r0, r2
  400f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400f16:	bf00      	nop
  400f18:	370c      	adds	r7, #12
  400f1a:	46bd      	mov	sp, r7
  400f1c:	bc80      	pop	{r7}
  400f1e:	4770      	bx	lr
  400f20:	e000e100 	.word	0xe000e100

00400f24 <osc_get_rate>:
{
  400f24:	b480      	push	{r7}
  400f26:	b083      	sub	sp, #12
  400f28:	af00      	add	r7, sp, #0
  400f2a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	2b07      	cmp	r3, #7
  400f30:	d825      	bhi.n	400f7e <osc_get_rate+0x5a>
  400f32:	a201      	add	r2, pc, #4	; (adr r2, 400f38 <osc_get_rate+0x14>)
  400f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f38:	00400f59 	.word	0x00400f59
  400f3c:	00400f5f 	.word	0x00400f5f
  400f40:	00400f65 	.word	0x00400f65
  400f44:	00400f6b 	.word	0x00400f6b
  400f48:	00400f6f 	.word	0x00400f6f
  400f4c:	00400f73 	.word	0x00400f73
  400f50:	00400f77 	.word	0x00400f77
  400f54:	00400f7b 	.word	0x00400f7b
		return OSC_SLCK_32K_RC_HZ;
  400f58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f5c:	e010      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f62:	e00d      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f68:	e00a      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400f6a:	4b08      	ldr	r3, [pc, #32]	; (400f8c <osc_get_rate+0x68>)
  400f6c:	e008      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400f6e:	4b08      	ldr	r3, [pc, #32]	; (400f90 <osc_get_rate+0x6c>)
  400f70:	e006      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400f72:	4b08      	ldr	r3, [pc, #32]	; (400f94 <osc_get_rate+0x70>)
  400f74:	e004      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400f76:	4b07      	ldr	r3, [pc, #28]	; (400f94 <osc_get_rate+0x70>)
  400f78:	e002      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400f7a:	4b06      	ldr	r3, [pc, #24]	; (400f94 <osc_get_rate+0x70>)
  400f7c:	e000      	b.n	400f80 <osc_get_rate+0x5c>
	return 0;
  400f7e:	2300      	movs	r3, #0
}
  400f80:	4618      	mov	r0, r3
  400f82:	370c      	adds	r7, #12
  400f84:	46bd      	mov	sp, r7
  400f86:	bc80      	pop	{r7}
  400f88:	4770      	bx	lr
  400f8a:	bf00      	nop
  400f8c:	003d0900 	.word	0x003d0900
  400f90:	007a1200 	.word	0x007a1200
  400f94:	00b71b00 	.word	0x00b71b00

00400f98 <sysclk_get_main_hz>:
{
  400f98:	b580      	push	{r7, lr}
  400f9a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f9c:	2006      	movs	r0, #6
  400f9e:	4b04      	ldr	r3, [pc, #16]	; (400fb0 <sysclk_get_main_hz+0x18>)
  400fa0:	4798      	blx	r3
  400fa2:	4602      	mov	r2, r0
  400fa4:	4613      	mov	r3, r2
  400fa6:	009b      	lsls	r3, r3, #2
  400fa8:	4413      	add	r3, r2
  400faa:	009b      	lsls	r3, r3, #2
}
  400fac:	4618      	mov	r0, r3
  400fae:	bd80      	pop	{r7, pc}
  400fb0:	00400f25 	.word	0x00400f25

00400fb4 <sysclk_get_cpu_hz>:
{
  400fb4:	b580      	push	{r7, lr}
  400fb6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fb8:	4b02      	ldr	r3, [pc, #8]	; (400fc4 <sysclk_get_cpu_hz+0x10>)
  400fba:	4798      	blx	r3
  400fbc:	4603      	mov	r3, r0
  400fbe:	085b      	lsrs	r3, r3, #1
}
  400fc0:	4618      	mov	r0, r3
  400fc2:	bd80      	pop	{r7, pc}
  400fc4:	00400f99 	.word	0x00400f99

00400fc8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400fc8:	b580      	push	{r7, lr}
  400fca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fcc:	4b02      	ldr	r3, [pc, #8]	; (400fd8 <sysclk_get_peripheral_hz+0x10>)
  400fce:	4798      	blx	r3
  400fd0:	4603      	mov	r3, r0
  400fd2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fd4:	4618      	mov	r0, r3
  400fd6:	bd80      	pop	{r7, pc}
  400fd8:	00400f99 	.word	0x00400f99

00400fdc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400fdc:	b580      	push	{r7, lr}
  400fde:	b082      	sub	sp, #8
  400fe0:	af00      	add	r7, sp, #0
  400fe2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400fe4:	6878      	ldr	r0, [r7, #4]
  400fe6:	4b03      	ldr	r3, [pc, #12]	; (400ff4 <sysclk_enable_peripheral_clock+0x18>)
  400fe8:	4798      	blx	r3
}
  400fea:	bf00      	nop
  400fec:	3708      	adds	r7, #8
  400fee:	46bd      	mov	sp, r7
  400ff0:	bd80      	pop	{r7, pc}
  400ff2:	bf00      	nop
  400ff4:	0040239d 	.word	0x0040239d

00400ff8 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400ff8:	b480      	push	{r7}
  400ffa:	b08b      	sub	sp, #44	; 0x2c
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	6078      	str	r0, [r7, #4]
  401000:	687b      	ldr	r3, [r7, #4]
  401002:	627b      	str	r3, [r7, #36]	; 0x24
  401004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401006:	623b      	str	r3, [r7, #32]
  401008:	6a3b      	ldr	r3, [r7, #32]
  40100a:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40100c:	69fb      	ldr	r3, [r7, #28]
  40100e:	095b      	lsrs	r3, r3, #5
  401010:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401012:	69bb      	ldr	r3, [r7, #24]
  401014:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401018:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40101c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  40101e:	617b      	str	r3, [r7, #20]
  401020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401022:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401024:	693b      	ldr	r3, [r7, #16]
  401026:	f003 031f 	and.w	r3, r3, #31
  40102a:	2201      	movs	r2, #1
  40102c:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401030:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401032:	697b      	ldr	r3, [r7, #20]
  401034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401038:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40103a:	68bb      	ldr	r3, [r7, #8]
  40103c:	f003 031f 	and.w	r3, r3, #31
  401040:	2101      	movs	r1, #1
  401042:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401046:	4013      	ands	r3, r2
  401048:	2b00      	cmp	r3, #0
  40104a:	d003      	beq.n	401054 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  40104c:	697b      	ldr	r3, [r7, #20]
  40104e:	68fa      	ldr	r2, [r7, #12]
  401050:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  401052:	e002      	b.n	40105a <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  401054:	697b      	ldr	r3, [r7, #20]
  401056:	68fa      	ldr	r2, [r7, #12]
  401058:	631a      	str	r2, [r3, #48]	; 0x30
  40105a:	bf00      	nop
  40105c:	372c      	adds	r7, #44	; 0x2c
  40105e:	46bd      	mov	sp, r7
  401060:	bc80      	pop	{r7}
  401062:	4770      	bx	lr

00401064 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  401064:	b580      	push	{r7, lr}
  401066:	b082      	sub	sp, #8
  401068:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  40106a:	2300      	movs	r3, #0
  40106c:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  40106e:	2101      	movs	r1, #1
  401070:	4815      	ldr	r0, [pc, #84]	; (4010c8 <USART0_Handler+0x64>)
  401072:	4b16      	ldr	r3, [pc, #88]	; (4010cc <USART0_Handler+0x68>)
  401074:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401076:	4814      	ldr	r0, [pc, #80]	; (4010c8 <USART0_Handler+0x64>)
  401078:	4b15      	ldr	r3, [pc, #84]	; (4010d0 <USART0_Handler+0x6c>)
  40107a:	4798      	blx	r3
  40107c:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  40107e:	4915      	ldr	r1, [pc, #84]	; (4010d4 <USART0_Handler+0x70>)
  401080:	4811      	ldr	r0, [pc, #68]	; (4010c8 <USART0_Handler+0x64>)
  401082:	4b15      	ldr	r3, [pc, #84]	; (4010d8 <USART0_Handler+0x74>)
  401084:	4798      	blx	r3
  401086:	4603      	mov	r3, r0
  401088:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  40108a:	683b      	ldr	r3, [r7, #0]
  40108c:	f003 0301 	and.w	r3, r3, #1
  401090:	2b00      	cmp	r3, #0
  401092:	d011      	beq.n	4010b8 <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401094:	490f      	ldr	r1, [pc, #60]	; (4010d4 <USART0_Handler+0x70>)
  401096:	480c      	ldr	r0, [pc, #48]	; (4010c8 <USART0_Handler+0x64>)
  401098:	4b0f      	ldr	r3, [pc, #60]	; (4010d8 <USART0_Handler+0x74>)
  40109a:	4798      	blx	r3
  40109c:	4603      	mov	r3, r0
  40109e:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  4010a0:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <USART0_Handler+0x78>)
  4010a2:	681b      	ldr	r3, [r3, #0]
  4010a4:	4a0b      	ldr	r2, [pc, #44]	; (4010d4 <USART0_Handler+0x70>)
  4010a6:	6812      	ldr	r2, [r2, #0]
  4010a8:	b2d1      	uxtb	r1, r2
  4010aa:	4a0d      	ldr	r2, [pc, #52]	; (4010e0 <USART0_Handler+0x7c>)
  4010ac:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  4010ae:	4b0b      	ldr	r3, [pc, #44]	; (4010dc <USART0_Handler+0x78>)
  4010b0:	681b      	ldr	r3, [r3, #0]
  4010b2:	3301      	adds	r3, #1
  4010b4:	4a09      	ldr	r2, [pc, #36]	; (4010dc <USART0_Handler+0x78>)
  4010b6:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4010b8:	2101      	movs	r1, #1
  4010ba:	4803      	ldr	r0, [pc, #12]	; (4010c8 <USART0_Handler+0x64>)
  4010bc:	4b09      	ldr	r3, [pc, #36]	; (4010e4 <USART0_Handler+0x80>)
  4010be:	4798      	blx	r3
}
  4010c0:	bf00      	nop
  4010c2:	3708      	adds	r7, #8
  4010c4:	46bd      	mov	sp, r7
  4010c6:	bd80      	pop	{r7, pc}
  4010c8:	40024000 	.word	0x40024000
  4010cc:	00400c33 	.word	0x00400c33
  4010d0:	00400c4d 	.word	0x00400c4d
  4010d4:	20008960 	.word	0x20008960
  4010d8:	00400d11 	.word	0x00400d11
  4010dc:	20008950 	.word	0x20008950
  4010e0:	2000875c 	.word	0x2000875c
  4010e4:	00400c19 	.word	0x00400c19

004010e8 <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart(void)
{
  4010e8:	b5b0      	push	{r4, r5, r7, lr}
  4010ea:	b086      	sub	sp, #24
  4010ec:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  4010ee:	4b15      	ldr	r3, [pc, #84]	; (401144 <configure_usart+0x5c>)
  4010f0:	463c      	mov	r4, r7
  4010f2:	461d      	mov	r5, r3
  4010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010f8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4010fc:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401100:	4b11      	ldr	r3, [pc, #68]	; (401148 <configure_usart+0x60>)
  401102:	4798      	blx	r3
  401104:	4602      	mov	r2, r0
  401106:	4b11      	ldr	r3, [pc, #68]	; (40114c <configure_usart+0x64>)
  401108:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  40110a:	200e      	movs	r0, #14
  40110c:	4b10      	ldr	r3, [pc, #64]	; (401150 <configure_usart+0x68>)
  40110e:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401110:	4b0e      	ldr	r3, [pc, #56]	; (40114c <configure_usart+0x64>)
  401112:	681a      	ldr	r2, [r3, #0]
  401114:	463b      	mov	r3, r7
  401116:	4619      	mov	r1, r3
  401118:	480e      	ldr	r0, [pc, #56]	; (401154 <configure_usart+0x6c>)
  40111a:	4b0f      	ldr	r3, [pc, #60]	; (401158 <configure_usart+0x70>)
  40111c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40111e:	f04f 31ff 	mov.w	r1, #4294967295
  401122:	480c      	ldr	r0, [pc, #48]	; (401154 <configure_usart+0x6c>)
  401124:	4b0d      	ldr	r3, [pc, #52]	; (40115c <configure_usart+0x74>)
  401126:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401128:	480a      	ldr	r0, [pc, #40]	; (401154 <configure_usart+0x6c>)
  40112a:	4b0d      	ldr	r3, [pc, #52]	; (401160 <configure_usart+0x78>)
  40112c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  40112e:	4809      	ldr	r0, [pc, #36]	; (401154 <configure_usart+0x6c>)
  401130:	4b0c      	ldr	r3, [pc, #48]	; (401164 <configure_usart+0x7c>)
  401132:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401134:	200e      	movs	r0, #14
  401136:	4b0c      	ldr	r3, [pc, #48]	; (401168 <configure_usart+0x80>)
  401138:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  40113a:	bf00      	nop
  40113c:	3718      	adds	r7, #24
  40113e:	46bd      	mov	sp, r7
  401140:	bdb0      	pop	{r4, r5, r7, pc}
  401142:	bf00      	nop
  401144:	00407a6c 	.word	0x00407a6c
  401148:	00400fc9 	.word	0x00400fc9
  40114c:	20008964 	.word	0x20008964
  401150:	00400fdd 	.word	0x00400fdd
  401154:	40024000 	.word	0x40024000
  401158:	00400b79 	.word	0x00400b79
  40115c:	00400c33 	.word	0x00400c33
  401160:	00400bb9 	.word	0x00400bb9
  401164:	00400be9 	.word	0x00400be9
  401168:	00400ef5 	.word	0x00400ef5

0040116c <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  40116c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40116e:	b083      	sub	sp, #12
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
  401174:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	//ioport_toggle_pin_level(LED_PIN);
	
	delay_ms(50);
  401176:	4b1f      	ldr	r3, [pc, #124]	; (4011f4 <handler_command_complete+0x88>)
  401178:	4798      	blx	r3
  40117a:	4603      	mov	r3, r0
  40117c:	4619      	mov	r1, r3
  40117e:	f04f 0200 	mov.w	r2, #0
  401182:	460b      	mov	r3, r1
  401184:	4614      	mov	r4, r2
  401186:	18db      	adds	r3, r3, r3
  401188:	eb44 0404 	adc.w	r4, r4, r4
  40118c:	185b      	adds	r3, r3, r1
  40118e:	eb44 0402 	adc.w	r4, r4, r2
  401192:	00e6      	lsls	r6, r4, #3
  401194:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401198:	00dd      	lsls	r5, r3, #3
  40119a:	462b      	mov	r3, r5
  40119c:	4634      	mov	r4, r6
  40119e:	185b      	adds	r3, r3, r1
  4011a0:	eb44 0402 	adc.w	r4, r4, r2
  4011a4:	18db      	adds	r3, r3, r3
  4011a6:	eb44 0404 	adc.w	r4, r4, r4
  4011aa:	4619      	mov	r1, r3
  4011ac:	4622      	mov	r2, r4
  4011ae:	f243 63af 	movw	r3, #13999	; 0x36af
  4011b2:	f04f 0400 	mov.w	r4, #0
  4011b6:	18cd      	adds	r5, r1, r3
  4011b8:	eb42 0604 	adc.w	r6, r2, r4
  4011bc:	4628      	mov	r0, r5
  4011be:	4631      	mov	r1, r6
  4011c0:	4c0d      	ldr	r4, [pc, #52]	; (4011f8 <handler_command_complete+0x8c>)
  4011c2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4011c6:	f04f 0300 	mov.w	r3, #0
  4011ca:	47a0      	blx	r4
  4011cc:	4603      	mov	r3, r0
  4011ce:	460c      	mov	r4, r1
  4011d0:	4618      	mov	r0, r3
  4011d2:	4b0a      	ldr	r3, [pc, #40]	; (4011fc <handler_command_complete+0x90>)
  4011d4:	4798      	blx	r3
	
	input_buffer[buffer_index] = 0;
  4011d6:	4b0a      	ldr	r3, [pc, #40]	; (401200 <handler_command_complete+0x94>)
  4011d8:	681b      	ldr	r3, [r3, #0]
  4011da:	4a0a      	ldr	r2, [pc, #40]	; (401204 <handler_command_complete+0x98>)
  4011dc:	2100      	movs	r1, #0
  4011de:	54d1      	strb	r1, [r2, r3]
	data_recieved = 1;
  4011e0:	4b09      	ldr	r3, [pc, #36]	; (401208 <handler_command_complete+0x9c>)
  4011e2:	2201      	movs	r2, #1
  4011e4:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
  4011e6:	4b06      	ldr	r3, [pc, #24]	; (401200 <handler_command_complete+0x94>)
  4011e8:	2200      	movs	r2, #0
  4011ea:	601a      	str	r2, [r3, #0]
}
  4011ec:	bf00      	nop
  4011ee:	370c      	adds	r7, #12
  4011f0:	46bd      	mov	sp, r7
  4011f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011f4:	00400fb5 	.word	0x00400fb5
  4011f8:	00402b7d 	.word	0x00402b7d
  4011fc:	20000001 	.word	0x20000001
  401200:	20008950 	.word	0x20008950
  401204:	2000875c 	.word	0x2000875c
  401208:	20008958 	.word	0x20008958

0040120c <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(void){
  40120c:	b590      	push	{r4, r7, lr}
  40120e:	b083      	sub	sp, #12
  401210:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  401212:	200c      	movs	r0, #12
  401214:	4b0e      	ldr	r3, [pc, #56]	; (401250 <configure_command_complete+0x44>)
  401216:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401218:	220a      	movs	r2, #10
  40121a:	2101      	movs	r1, #1
  40121c:	480d      	ldr	r0, [pc, #52]	; (401254 <configure_command_complete+0x48>)
  40121e:	4b0e      	ldr	r3, [pc, #56]	; (401258 <configure_command_complete+0x4c>)
  401220:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  401222:	4b0e      	ldr	r3, [pc, #56]	; (40125c <configure_command_complete+0x50>)
  401224:	9300      	str	r3, [sp, #0]
  401226:	2370      	movs	r3, #112	; 0x70
  401228:	2201      	movs	r2, #1
  40122a:	210c      	movs	r1, #12
  40122c:	4809      	ldr	r0, [pc, #36]	; (401254 <configure_command_complete+0x48>)
  40122e:	4c0c      	ldr	r4, [pc, #48]	; (401260 <configure_command_complete+0x54>)
  401230:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401232:	200c      	movs	r0, #12
  401234:	4b0b      	ldr	r3, [pc, #44]	; (401264 <configure_command_complete+0x58>)
  401236:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401238:	2101      	movs	r1, #1
  40123a:	4806      	ldr	r0, [pc, #24]	; (401254 <configure_command_complete+0x48>)
  40123c:	4b0a      	ldr	r3, [pc, #40]	; (401268 <configure_command_complete+0x5c>)
  40123e:	4798      	blx	r3
	data_recieved = 0;
  401240:	4b0a      	ldr	r3, [pc, #40]	; (40126c <configure_command_complete+0x60>)
  401242:	2200      	movs	r2, #0
  401244:	601a      	str	r2, [r3, #0]
}
  401246:	bf00      	nop
  401248:	3704      	adds	r7, #4
  40124a:	46bd      	mov	sp, r7
  40124c:	bd90      	pop	{r4, r7, pc}
  40124e:	bf00      	nop
  401250:	0040239d 	.word	0x0040239d
  401254:	400e1000 	.word	0x400e1000
  401258:	00401c87 	.word	0x00401c87
  40125c:	0040116d 	.word	0x0040116d
  401260:	0040093d 	.word	0x0040093d
  401264:	00400ef5 	.word	0x00400ef5
  401268:	00401f1b 	.word	0x00401f1b
  40126c:	20008958 	.word	0x20008958

00401270 <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401270:	b480      	push	{r7}
  401272:	b083      	sub	sp, #12
  401274:	af00      	add	r7, sp, #0
  401276:	6078      	str	r0, [r7, #4]
  401278:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  40127a:	4b04      	ldr	r3, [pc, #16]	; (40128c <handler_web_setup+0x1c>)
  40127c:	2201      	movs	r2, #1
  40127e:	601a      	str	r2, [r3, #0]
}
  401280:	bf00      	nop
  401282:	370c      	adds	r7, #12
  401284:	46bd      	mov	sp, r7
  401286:	bc80      	pop	{r7}
  401288:	4770      	bx	lr
  40128a:	bf00      	nop
  40128c:	2000895c 	.word	0x2000895c

00401290 <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(void){
  401290:	b590      	push	{r4, r7, lr}
  401292:	b083      	sub	sp, #12
  401294:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  401296:	200c      	movs	r0, #12
  401298:	4b0e      	ldr	r3, [pc, #56]	; (4012d4 <configure_web_setup+0x44>)
  40129a:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  40129c:	220a      	movs	r2, #10
  40129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4012a2:	480d      	ldr	r0, [pc, #52]	; (4012d8 <configure_web_setup+0x48>)
  4012a4:	4b0d      	ldr	r3, [pc, #52]	; (4012dc <configure_web_setup+0x4c>)
  4012a6:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  4012a8:	4b0d      	ldr	r3, [pc, #52]	; (4012e0 <configure_web_setup+0x50>)
  4012aa:	9300      	str	r3, [sp, #0]
  4012ac:	2379      	movs	r3, #121	; 0x79
  4012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4012b2:	210c      	movs	r1, #12
  4012b4:	4808      	ldr	r0, [pc, #32]	; (4012d8 <configure_web_setup+0x48>)
  4012b6:	4c0b      	ldr	r4, [pc, #44]	; (4012e4 <configure_web_setup+0x54>)
  4012b8:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  4012ba:	200c      	movs	r0, #12
  4012bc:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <configure_web_setup+0x58>)
  4012be:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  4012c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4012c4:	4804      	ldr	r0, [pc, #16]	; (4012d8 <configure_web_setup+0x48>)
  4012c6:	4b09      	ldr	r3, [pc, #36]	; (4012ec <configure_web_setup+0x5c>)
  4012c8:	4798      	blx	r3
}
  4012ca:	bf00      	nop
  4012cc:	3704      	adds	r7, #4
  4012ce:	46bd      	mov	sp, r7
  4012d0:	bd90      	pop	{r4, r7, pc}
  4012d2:	bf00      	nop
  4012d4:	0040239d 	.word	0x0040239d
  4012d8:	400e1000 	.word	0x400e1000
  4012dc:	00401c87 	.word	0x00401c87
  4012e0:	00401271 	.word	0x00401271
  4012e4:	0040093d 	.word	0x0040093d
  4012e8:	00400ef5 	.word	0x00400ef5
  4012ec:	00401f1b 	.word	0x00401f1b

004012f0 <write_wifi_command>:

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  4012f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4012f4:	b082      	sub	sp, #8
  4012f6:	af00      	add	r7, sp, #0
  4012f8:	6078      	str	r0, [r7, #4]
  4012fa:	460b      	mov	r3, r1
  4012fc:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  4012fe:	4b29      	ldr	r3, [pc, #164]	; (4013a4 <write_wifi_command+0xb4>)
  401300:	2200      	movs	r2, #0
  401302:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  401304:	6879      	ldr	r1, [r7, #4]
  401306:	4828      	ldr	r0, [pc, #160]	; (4013a8 <write_wifi_command+0xb8>)
  401308:	4b28      	ldr	r3, [pc, #160]	; (4013ac <write_wifi_command+0xbc>)
  40130a:	4798      	blx	r3
	
	timeout_counter = 0;
  40130c:	4b28      	ldr	r3, [pc, #160]	; (4013b0 <write_wifi_command+0xc0>)
  40130e:	2200      	movs	r2, #0
  401310:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  401312:	78fb      	ldrb	r3, [r7, #3]
  401314:	461a      	mov	r2, r3
  401316:	0092      	lsls	r2, r2, #2
  401318:	4413      	add	r3, r2
  40131a:	009b      	lsls	r3, r3, #2
  40131c:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  40131e:	e031      	b.n	401384 <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  401320:	4b24      	ldr	r3, [pc, #144]	; (4013b4 <write_wifi_command+0xc4>)
  401322:	4798      	blx	r3
  401324:	4603      	mov	r3, r0
  401326:	4619      	mov	r1, r3
  401328:	f04f 0200 	mov.w	r2, #0
  40132c:	460b      	mov	r3, r1
  40132e:	4614      	mov	r4, r2
  401330:	00a6      	lsls	r6, r4, #2
  401332:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401336:	009d      	lsls	r5, r3, #2
  401338:	462b      	mov	r3, r5
  40133a:	4634      	mov	r4, r6
  40133c:	185b      	adds	r3, r3, r1
  40133e:	eb44 0402 	adc.w	r4, r4, r2
  401342:	18db      	adds	r3, r3, r3
  401344:	eb44 0404 	adc.w	r4, r4, r4
  401348:	4619      	mov	r1, r3
  40134a:	4622      	mov	r2, r4
  40134c:	f243 63af 	movw	r3, #13999	; 0x36af
  401350:	f04f 0400 	mov.w	r4, #0
  401354:	eb11 0b03 	adds.w	fp, r1, r3
  401358:	eb42 0c04 	adc.w	ip, r2, r4
  40135c:	4658      	mov	r0, fp
  40135e:	4661      	mov	r1, ip
  401360:	4c15      	ldr	r4, [pc, #84]	; (4013b8 <write_wifi_command+0xc8>)
  401362:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401366:	f04f 0300 	mov.w	r3, #0
  40136a:	47a0      	blx	r4
  40136c:	4603      	mov	r3, r0
  40136e:	460c      	mov	r4, r1
  401370:	4618      	mov	r0, r3
  401372:	4b12      	ldr	r3, [pc, #72]	; (4013bc <write_wifi_command+0xcc>)
  401374:	4798      	blx	r3
		timeout_counter++;
  401376:	4b0e      	ldr	r3, [pc, #56]	; (4013b0 <write_wifi_command+0xc0>)
  401378:	781b      	ldrb	r3, [r3, #0]
  40137a:	b2db      	uxtb	r3, r3
  40137c:	3301      	adds	r3, #1
  40137e:	b2da      	uxtb	r2, r3
  401380:	4b0b      	ldr	r3, [pc, #44]	; (4013b0 <write_wifi_command+0xc0>)
  401382:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  401384:	4b0a      	ldr	r3, [pc, #40]	; (4013b0 <write_wifi_command+0xc0>)
  401386:	781b      	ldrb	r3, [r3, #0]
  401388:	b2db      	uxtb	r3, r3
  40138a:	78fa      	ldrb	r2, [r7, #3]
  40138c:	429a      	cmp	r2, r3
  40138e:	d903      	bls.n	401398 <write_wifi_command+0xa8>
  401390:	4b04      	ldr	r3, [pc, #16]	; (4013a4 <write_wifi_command+0xb4>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	2b00      	cmp	r3, #0
  401396:	d0c3      	beq.n	401320 <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  401398:	bf00      	nop
  40139a:	3708      	adds	r7, #8
  40139c:	46bd      	mov	sp, r7
  40139e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  4013a2:	bf00      	nop
  4013a4:	20008958 	.word	0x20008958
  4013a8:	40024000 	.word	0x40024000
  4013ac:	00400ce1 	.word	0x00400ce1
  4013b0:	20008954 	.word	0x20008954
  4013b4:	00400fb5 	.word	0x00400fb5
  4013b8:	00402b7d 	.word	0x00402b7d
  4013bc:	20000001 	.word	0x20000001

004013c0 <open_websocket>:
		return -1;
	}
	
}

uint8_t open_websocket(void) {
  4013c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4013c4:	b084      	sub	sp, #16
  4013c6:	af00      	add	r7, sp, #0
	// figure out handle
	write_wifi_command("close all\r\n", 2);
  4013c8:	2102      	movs	r1, #2
  4013ca:	482e      	ldr	r0, [pc, #184]	; (401484 <open_websocket+0xc4>)
  4013cc:	4b2e      	ldr	r3, [pc, #184]	; (401488 <open_websocket+0xc8>)
  4013ce:	4798      	blx	r3
	write_wifi_command("websocket_client -f bin wss://bigbrothersees.me/source_audio_socket\r\n", 2);
  4013d0:	2102      	movs	r1, #2
  4013d2:	482e      	ldr	r0, [pc, #184]	; (40148c <open_websocket+0xcc>)
  4013d4:	4b2c      	ldr	r3, [pc, #176]	; (401488 <open_websocket+0xc8>)
  4013d6:	4798      	blx	r3

	int opened = 0;
  4013d8:	2300      	movs	r3, #0
  4013da:	60fb      	str	r3, [r7, #12]
	int handle = 0;
  4013dc:	2300      	movs	r3, #0
  4013de:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  4013e0:	2300      	movs	r3, #0
  4013e2:	60bb      	str	r3, [r7, #8]
			
	while(!opened) {			// waits for association
  4013e4:	e044      	b.n	401470 <open_websocket+0xb0>
		opened = strstr(input_buffer, "[Opened: ");
  4013e6:	492a      	ldr	r1, [pc, #168]	; (401490 <open_websocket+0xd0>)
  4013e8:	482a      	ldr	r0, [pc, #168]	; (401494 <open_websocket+0xd4>)
  4013ea:	4b2b      	ldr	r3, [pc, #172]	; (401498 <open_websocket+0xd8>)
  4013ec:	4798      	blx	r3
  4013ee:	4603      	mov	r3, r0
  4013f0:	60fb      	str	r3, [r7, #12]
		if (seconds > 100){
  4013f2:	68bb      	ldr	r3, [r7, #8]
  4013f4:	2b64      	cmp	r3, #100	; 0x64
  4013f6:	dd02      	ble.n	4013fe <open_websocket+0x3e>
			blink_LED(50);
  4013f8:	2032      	movs	r0, #50	; 0x32
  4013fa:	4b28      	ldr	r3, [pc, #160]	; (40149c <open_websocket+0xdc>)
  4013fc:	4798      	blx	r3
		}
		delay_ms(200);
  4013fe:	4b28      	ldr	r3, [pc, #160]	; (4014a0 <open_websocket+0xe0>)
  401400:	4798      	blx	r3
  401402:	4603      	mov	r3, r0
  401404:	4619      	mov	r1, r3
  401406:	f04f 0200 	mov.w	r2, #0
  40140a:	460b      	mov	r3, r1
  40140c:	4614      	mov	r4, r2
  40140e:	18db      	adds	r3, r3, r3
  401410:	eb44 0404 	adc.w	r4, r4, r4
  401414:	185b      	adds	r3, r3, r1
  401416:	eb44 0402 	adc.w	r4, r4, r2
  40141a:	00e6      	lsls	r6, r4, #3
  40141c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401420:	00dd      	lsls	r5, r3, #3
  401422:	462b      	mov	r3, r5
  401424:	4634      	mov	r4, r6
  401426:	185b      	adds	r3, r3, r1
  401428:	eb44 0402 	adc.w	r4, r4, r2
  40142c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401430:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401434:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401438:	4643      	mov	r3, r8
  40143a:	464c      	mov	r4, r9
  40143c:	4619      	mov	r1, r3
  40143e:	4622      	mov	r2, r4
  401440:	f243 63af 	movw	r3, #13999	; 0x36af
  401444:	f04f 0400 	mov.w	r4, #0
  401448:	eb11 0b03 	adds.w	fp, r1, r3
  40144c:	eb42 0c04 	adc.w	ip, r2, r4
  401450:	4658      	mov	r0, fp
  401452:	4661      	mov	r1, ip
  401454:	4c13      	ldr	r4, [pc, #76]	; (4014a4 <open_websocket+0xe4>)
  401456:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40145a:	f04f 0300 	mov.w	r3, #0
  40145e:	47a0      	blx	r4
  401460:	4603      	mov	r3, r0
  401462:	460c      	mov	r4, r1
  401464:	4618      	mov	r0, r3
  401466:	4b10      	ldr	r3, [pc, #64]	; (4014a8 <open_websocket+0xe8>)
  401468:	4798      	blx	r3
		seconds++;
  40146a:	68bb      	ldr	r3, [r7, #8]
  40146c:	3301      	adds	r3, #1
  40146e:	60bb      	str	r3, [r7, #8]
	while(!opened) {			// waits for association
  401470:	68fb      	ldr	r3, [r7, #12]
  401472:	2b00      	cmp	r3, #0
  401474:	d0b7      	beq.n	4013e6 <open_websocket+0x26>
	}
	
	// should check last thing in input buffer for handle
	return handle;
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	b2db      	uxtb	r3, r3
}
  40147a:	4618      	mov	r0, r3
  40147c:	3710      	adds	r7, #16
  40147e:	46bd      	mov	sp, r7
  401480:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  401484:	00407a84 	.word	0x00407a84
  401488:	004012f1 	.word	0x004012f1
  40148c:	00407b34 	.word	0x00407b34
  401490:	00407b7c 	.word	0x00407b7c
  401494:	2000875c 	.word	0x2000875c
  401498:	0040338d 	.word	0x0040338d
  40149c:	00401521 	.word	0x00401521
  4014a0:	00400fb5 	.word	0x00400fb5
  4014a4:	00402b7d 	.word	0x00402b7d
  4014a8:	20000001 	.word	0x20000001

004014ac <send_data_ws>:

void send_data_ws(uint16_t* samples_data, uint32_t num_samples, uint8_t handle) {
  4014ac:	b590      	push	{r4, r7, lr}
  4014ae:	b09b      	sub	sp, #108	; 0x6c
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	60f8      	str	r0, [r7, #12]
  4014b4:	60b9      	str	r1, [r7, #8]
  4014b6:	4613      	mov	r3, r2
  4014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t curr_data_point;
	
	char* templated_command[20];
	sprintf(templated_command, "write %d %d\r\n", handle, num_samples);
  4014ba:	79fa      	ldrb	r2, [r7, #7]
  4014bc:	f107 0010 	add.w	r0, r7, #16
  4014c0:	68bb      	ldr	r3, [r7, #8]
  4014c2:	4911      	ldr	r1, [pc, #68]	; (401508 <send_data_ws+0x5c>)
  4014c4:	4c11      	ldr	r4, [pc, #68]	; (40150c <send_data_ws+0x60>)
  4014c6:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  4014c8:	f107 0310 	add.w	r3, r7, #16
  4014cc:	4619      	mov	r1, r3
  4014ce:	4810      	ldr	r0, [pc, #64]	; (401510 <send_data_ws+0x64>)
  4014d0:	4b10      	ldr	r3, [pc, #64]	; (401514 <send_data_ws+0x68>)
  4014d2:	4798      	blx	r3
		
	for (int i = 0; i < num_samples; i++)
  4014d4:	2300      	movs	r3, #0
  4014d6:	667b      	str	r3, [r7, #100]	; 0x64
  4014d8:	e00e      	b.n	4014f8 <send_data_ws+0x4c>
	{
		curr_data_point = ((uint8_t*) samples_data)[i];
  4014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4014dc:	68fa      	ldr	r2, [r7, #12]
  4014de:	4413      	add	r3, r2
  4014e0:	781b      	ldrb	r3, [r3, #0]
  4014e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		
		usart_putchar(BOARD_USART, curr_data_point);
  4014e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
  4014ea:	4619      	mov	r1, r3
  4014ec:	4808      	ldr	r0, [pc, #32]	; (401510 <send_data_ws+0x64>)
  4014ee:	4b0a      	ldr	r3, [pc, #40]	; (401518 <send_data_ws+0x6c>)
  4014f0:	4798      	blx	r3
	for (int i = 0; i < num_samples; i++)
  4014f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4014f4:	3301      	adds	r3, #1
  4014f6:	667b      	str	r3, [r7, #100]	; 0x64
  4014f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  4014fa:	68bb      	ldr	r3, [r7, #8]
  4014fc:	429a      	cmp	r2, r3
  4014fe:	d3ec      	bcc.n	4014da <send_data_ws+0x2e>
	}
}
  401500:	bf00      	nop
  401502:	376c      	adds	r7, #108	; 0x6c
  401504:	46bd      	mov	sp, r7
  401506:	bd90      	pop	{r4, r7, pc}
  401508:	00407b88 	.word	0x00407b88
  40150c:	00402f79 	.word	0x00402f79
  401510:	40024000 	.word	0x40024000
  401514:	00400ce1 	.word	0x00400ce1
  401518:	00400cb1 	.word	0x00400cb1
  40151c:	00000000 	.word	0x00000000

00401520 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  401520:	b5f0      	push	{r4, r5, r6, r7, lr}
  401522:	b083      	sub	sp, #12
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	2b00      	cmp	r3, #0
  40152c:	d026      	beq.n	40157c <blink_LED+0x5c>
  40152e:	687b      	ldr	r3, [r7, #4]
  401530:	461d      	mov	r5, r3
  401532:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401536:	4b66      	ldr	r3, [pc, #408]	; (4016d0 <blink_LED+0x1b0>)
  401538:	4798      	blx	r3
  40153a:	4603      	mov	r3, r0
  40153c:	f04f 0400 	mov.w	r4, #0
  401540:	fb03 f106 	mul.w	r1, r3, r6
  401544:	fb05 f204 	mul.w	r2, r5, r4
  401548:	440a      	add	r2, r1
  40154a:	fba5 3403 	umull	r3, r4, r5, r3
  40154e:	4422      	add	r2, r4
  401550:	4614      	mov	r4, r2
  401552:	f243 61af 	movw	r1, #13999	; 0x36af
  401556:	f04f 0200 	mov.w	r2, #0
  40155a:	185d      	adds	r5, r3, r1
  40155c:	eb44 0602 	adc.w	r6, r4, r2
  401560:	4628      	mov	r0, r5
  401562:	4631      	mov	r1, r6
  401564:	4c5b      	ldr	r4, [pc, #364]	; (4016d4 <blink_LED+0x1b4>)
  401566:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40156a:	f04f 0300 	mov.w	r3, #0
  40156e:	47a0      	blx	r4
  401570:	4603      	mov	r3, r0
  401572:	460c      	mov	r4, r1
  401574:	4618      	mov	r0, r3
  401576:	4b58      	ldr	r3, [pc, #352]	; (4016d8 <blink_LED+0x1b8>)
  401578:	4798      	blx	r3
  40157a:	e016      	b.n	4015aa <blink_LED+0x8a>
  40157c:	4b54      	ldr	r3, [pc, #336]	; (4016d0 <blink_LED+0x1b0>)
  40157e:	4798      	blx	r3
  401580:	4603      	mov	r3, r0
  401582:	f04f 0400 	mov.w	r4, #0
  401586:	a250      	add	r2, pc, #320	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401588:	e9d2 1200 	ldrd	r1, r2, [r2]
  40158c:	185d      	adds	r5, r3, r1
  40158e:	eb44 0602 	adc.w	r6, r4, r2
  401592:	4628      	mov	r0, r5
  401594:	4631      	mov	r1, r6
  401596:	4c4f      	ldr	r4, [pc, #316]	; (4016d4 <blink_LED+0x1b4>)
  401598:	4a50      	ldr	r2, [pc, #320]	; (4016dc <blink_LED+0x1bc>)
  40159a:	f04f 0300 	mov.w	r3, #0
  40159e:	47a0      	blx	r4
  4015a0:	4603      	mov	r3, r0
  4015a2:	460c      	mov	r4, r1
  4015a4:	4618      	mov	r0, r3
  4015a6:	4b4c      	ldr	r3, [pc, #304]	; (4016d8 <blink_LED+0x1b8>)
  4015a8:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  4015aa:	2009      	movs	r0, #9
  4015ac:	4b4c      	ldr	r3, [pc, #304]	; (4016e0 <blink_LED+0x1c0>)
  4015ae:	4798      	blx	r3
	delay_ms(ms_blink);
  4015b0:	687b      	ldr	r3, [r7, #4]
  4015b2:	2b00      	cmp	r3, #0
  4015b4:	d026      	beq.n	401604 <blink_LED+0xe4>
  4015b6:	687b      	ldr	r3, [r7, #4]
  4015b8:	461d      	mov	r5, r3
  4015ba:	ea4f 76e5 	mov.w	r6, r5, asr #31
  4015be:	4b44      	ldr	r3, [pc, #272]	; (4016d0 <blink_LED+0x1b0>)
  4015c0:	4798      	blx	r3
  4015c2:	4603      	mov	r3, r0
  4015c4:	f04f 0400 	mov.w	r4, #0
  4015c8:	fb03 f106 	mul.w	r1, r3, r6
  4015cc:	fb05 f204 	mul.w	r2, r5, r4
  4015d0:	440a      	add	r2, r1
  4015d2:	fba5 3403 	umull	r3, r4, r5, r3
  4015d6:	4422      	add	r2, r4
  4015d8:	4614      	mov	r4, r2
  4015da:	f243 61af 	movw	r1, #13999	; 0x36af
  4015de:	f04f 0200 	mov.w	r2, #0
  4015e2:	185d      	adds	r5, r3, r1
  4015e4:	eb44 0602 	adc.w	r6, r4, r2
  4015e8:	4628      	mov	r0, r5
  4015ea:	4631      	mov	r1, r6
  4015ec:	4c39      	ldr	r4, [pc, #228]	; (4016d4 <blink_LED+0x1b4>)
  4015ee:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4015f2:	f04f 0300 	mov.w	r3, #0
  4015f6:	47a0      	blx	r4
  4015f8:	4603      	mov	r3, r0
  4015fa:	460c      	mov	r4, r1
  4015fc:	4618      	mov	r0, r3
  4015fe:	4b36      	ldr	r3, [pc, #216]	; (4016d8 <blink_LED+0x1b8>)
  401600:	4798      	blx	r3
  401602:	e016      	b.n	401632 <blink_LED+0x112>
  401604:	4b32      	ldr	r3, [pc, #200]	; (4016d0 <blink_LED+0x1b0>)
  401606:	4798      	blx	r3
  401608:	4603      	mov	r3, r0
  40160a:	f04f 0400 	mov.w	r4, #0
  40160e:	a22e      	add	r2, pc, #184	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401610:	e9d2 1200 	ldrd	r1, r2, [r2]
  401614:	185d      	adds	r5, r3, r1
  401616:	eb44 0602 	adc.w	r6, r4, r2
  40161a:	4628      	mov	r0, r5
  40161c:	4631      	mov	r1, r6
  40161e:	4c2d      	ldr	r4, [pc, #180]	; (4016d4 <blink_LED+0x1b4>)
  401620:	4a2e      	ldr	r2, [pc, #184]	; (4016dc <blink_LED+0x1bc>)
  401622:	f04f 0300 	mov.w	r3, #0
  401626:	47a0      	blx	r4
  401628:	4603      	mov	r3, r0
  40162a:	460c      	mov	r4, r1
  40162c:	4618      	mov	r0, r3
  40162e:	4b2a      	ldr	r3, [pc, #168]	; (4016d8 <blink_LED+0x1b8>)
  401630:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  401632:	2009      	movs	r0, #9
  401634:	4b2a      	ldr	r3, [pc, #168]	; (4016e0 <blink_LED+0x1c0>)
  401636:	4798      	blx	r3
	delay_ms(ms_blink);
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	2b00      	cmp	r3, #0
  40163c:	d026      	beq.n	40168c <blink_LED+0x16c>
  40163e:	687b      	ldr	r3, [r7, #4]
  401640:	461d      	mov	r5, r3
  401642:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401646:	4b22      	ldr	r3, [pc, #136]	; (4016d0 <blink_LED+0x1b0>)
  401648:	4798      	blx	r3
  40164a:	4603      	mov	r3, r0
  40164c:	f04f 0400 	mov.w	r4, #0
  401650:	fb03 f106 	mul.w	r1, r3, r6
  401654:	fb05 f204 	mul.w	r2, r5, r4
  401658:	440a      	add	r2, r1
  40165a:	fba5 3403 	umull	r3, r4, r5, r3
  40165e:	4422      	add	r2, r4
  401660:	4614      	mov	r4, r2
  401662:	f243 61af 	movw	r1, #13999	; 0x36af
  401666:	f04f 0200 	mov.w	r2, #0
  40166a:	185d      	adds	r5, r3, r1
  40166c:	eb44 0602 	adc.w	r6, r4, r2
  401670:	4628      	mov	r0, r5
  401672:	4631      	mov	r1, r6
  401674:	4c17      	ldr	r4, [pc, #92]	; (4016d4 <blink_LED+0x1b4>)
  401676:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40167a:	f04f 0300 	mov.w	r3, #0
  40167e:	47a0      	blx	r4
  401680:	4603      	mov	r3, r0
  401682:	460c      	mov	r4, r1
  401684:	4618      	mov	r0, r3
  401686:	4b14      	ldr	r3, [pc, #80]	; (4016d8 <blink_LED+0x1b8>)
  401688:	4798      	blx	r3
}
  40168a:	e016      	b.n	4016ba <blink_LED+0x19a>
	delay_ms(ms_blink);
  40168c:	4b10      	ldr	r3, [pc, #64]	; (4016d0 <blink_LED+0x1b0>)
  40168e:	4798      	blx	r3
  401690:	4603      	mov	r3, r0
  401692:	f04f 0400 	mov.w	r4, #0
  401696:	a20c      	add	r2, pc, #48	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401698:	e9d2 1200 	ldrd	r1, r2, [r2]
  40169c:	185d      	adds	r5, r3, r1
  40169e:	eb44 0602 	adc.w	r6, r4, r2
  4016a2:	4628      	mov	r0, r5
  4016a4:	4631      	mov	r1, r6
  4016a6:	4c0b      	ldr	r4, [pc, #44]	; (4016d4 <blink_LED+0x1b4>)
  4016a8:	4a0c      	ldr	r2, [pc, #48]	; (4016dc <blink_LED+0x1bc>)
  4016aa:	f04f 0300 	mov.w	r3, #0
  4016ae:	47a0      	blx	r4
  4016b0:	4603      	mov	r3, r0
  4016b2:	460c      	mov	r4, r1
  4016b4:	4618      	mov	r0, r3
  4016b6:	4b08      	ldr	r3, [pc, #32]	; (4016d8 <blink_LED+0x1b8>)
  4016b8:	4798      	blx	r3
}
  4016ba:	bf00      	nop
  4016bc:	370c      	adds	r7, #12
  4016be:	46bd      	mov	sp, r7
  4016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016c2:	bf00      	nop
  4016c4:	f3af 8000 	nop.w
  4016c8:	00d59f7f 	.word	0x00d59f7f
  4016cc:	00000000 	.word	0x00000000
  4016d0:	00400fb5 	.word	0x00400fb5
  4016d4:	00402b7d 	.word	0x00402b7d
  4016d8:	20000001 	.word	0x20000001
  4016dc:	00d59f80 	.word	0x00d59f80
  4016e0:	00400ff9 	.word	0x00400ff9

004016e4 <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  4016e4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4016e8:	b082      	sub	sp, #8
  4016ea:	af00      	add	r7, sp, #0
	
	int connected = 0;
  4016ec:	2300      	movs	r3, #0
  4016ee:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  4016f0:	2300      	movs	r3, #0
  4016f2:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  4016f4:	21d0      	movs	r1, #208	; 0xd0
  4016f6:	482b      	ldr	r0, [pc, #172]	; (4017a4 <setup_wifi+0xc0>)
  4016f8:	4b2b      	ldr	r3, [pc, #172]	; (4017a8 <setup_wifi+0xc4>)
  4016fa:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  4016fc:	e046      	b.n	40178c <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  4016fe:	492b      	ldr	r1, [pc, #172]	; (4017ac <setup_wifi+0xc8>)
  401700:	482b      	ldr	r0, [pc, #172]	; (4017b0 <setup_wifi+0xcc>)
  401702:	4b2c      	ldr	r3, [pc, #176]	; (4017b4 <setup_wifi+0xd0>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
  401708:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  40170a:	683b      	ldr	r3, [r7, #0]
  40170c:	f240 52dc 	movw	r2, #1500	; 0x5dc
  401710:	4293      	cmp	r3, r2
  401712:	dd02      	ble.n	40171a <setup_wifi+0x36>
			blink_LED(50);
  401714:	2032      	movs	r0, #50	; 0x32
  401716:	4b28      	ldr	r3, [pc, #160]	; (4017b8 <setup_wifi+0xd4>)
  401718:	4798      	blx	r3
		}
		delay_ms(200);
  40171a:	4b28      	ldr	r3, [pc, #160]	; (4017bc <setup_wifi+0xd8>)
  40171c:	4798      	blx	r3
  40171e:	4603      	mov	r3, r0
  401720:	4619      	mov	r1, r3
  401722:	f04f 0200 	mov.w	r2, #0
  401726:	460b      	mov	r3, r1
  401728:	4614      	mov	r4, r2
  40172a:	18db      	adds	r3, r3, r3
  40172c:	eb44 0404 	adc.w	r4, r4, r4
  401730:	185b      	adds	r3, r3, r1
  401732:	eb44 0402 	adc.w	r4, r4, r2
  401736:	00e6      	lsls	r6, r4, #3
  401738:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  40173c:	00dd      	lsls	r5, r3, #3
  40173e:	462b      	mov	r3, r5
  401740:	4634      	mov	r4, r6
  401742:	185b      	adds	r3, r3, r1
  401744:	eb44 0402 	adc.w	r4, r4, r2
  401748:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  40174c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401750:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401754:	4643      	mov	r3, r8
  401756:	464c      	mov	r4, r9
  401758:	4619      	mov	r1, r3
  40175a:	4622      	mov	r2, r4
  40175c:	f243 63af 	movw	r3, #13999	; 0x36af
  401760:	f04f 0400 	mov.w	r4, #0
  401764:	eb11 0b03 	adds.w	fp, r1, r3
  401768:	eb42 0c04 	adc.w	ip, r2, r4
  40176c:	4658      	mov	r0, fp
  40176e:	4661      	mov	r1, ip
  401770:	4c13      	ldr	r4, [pc, #76]	; (4017c0 <setup_wifi+0xdc>)
  401772:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401776:	f04f 0300 	mov.w	r3, #0
  40177a:	47a0      	blx	r4
  40177c:	4603      	mov	r3, r0
  40177e:	460c      	mov	r4, r1
  401780:	4618      	mov	r0, r3
  401782:	4b10      	ldr	r3, [pc, #64]	; (4017c4 <setup_wifi+0xe0>)
  401784:	4798      	blx	r3
		seconds++;
  401786:	683b      	ldr	r3, [r7, #0]
  401788:	3301      	adds	r3, #1
  40178a:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  40178c:	687b      	ldr	r3, [r7, #4]
  40178e:	2b00      	cmp	r3, #0
  401790:	d0b5      	beq.n	4016fe <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  401792:	4b0d      	ldr	r3, [pc, #52]	; (4017c8 <setup_wifi+0xe4>)
  401794:	2200      	movs	r2, #0
  401796:	601a      	str	r2, [r3, #0]
}
  401798:	bf00      	nop
  40179a:	3708      	adds	r7, #8
  40179c:	46bd      	mov	sp, r7
  40179e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4017a2:	bf00      	nop
  4017a4:	00407bc0 	.word	0x00407bc0
  4017a8:	004012f1 	.word	0x004012f1
  4017ac:	00407bcc 	.word	0x00407bcc
  4017b0:	2000875c 	.word	0x2000875c
  4017b4:	0040338d 	.word	0x0040338d
  4017b8:	00401521 	.word	0x00401521
  4017bc:	00400fb5 	.word	0x00400fb5
  4017c0:	00402b7d 	.word	0x00402b7d
  4017c4:	20000001 	.word	0x20000001
  4017c8:	2000895c 	.word	0x2000895c

004017cc <configure_wifi>:

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  4017cc:	b580      	push	{r7, lr}
  4017ce:	af00      	add	r7, sp, #0
	configure_usart();
  4017d0:	4b05      	ldr	r3, [pc, #20]	; (4017e8 <configure_wifi+0x1c>)
  4017d2:	4798      	blx	r3
	configure_command_complete();
  4017d4:	4b05      	ldr	r3, [pc, #20]	; (4017ec <configure_wifi+0x20>)
  4017d6:	4798      	blx	r3
	configure_web_setup();	
  4017d8:	4b05      	ldr	r3, [pc, #20]	; (4017f0 <configure_wifi+0x24>)
  4017da:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4017dc:	2101      	movs	r1, #1
  4017de:	4805      	ldr	r0, [pc, #20]	; (4017f4 <configure_wifi+0x28>)
  4017e0:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <configure_wifi+0x2c>)
  4017e2:	4798      	blx	r3
}
  4017e4:	bf00      	nop
  4017e6:	bd80      	pop	{r7, pc}
  4017e8:	004010e9 	.word	0x004010e9
  4017ec:	0040120d 	.word	0x0040120d
  4017f0:	00401291 	.word	0x00401291
  4017f4:	40024000 	.word	0x40024000
  4017f8:	00400c19 	.word	0x00400c19

004017fc <reboot_wifi>:
}

/**
 *  \brief Reboots the wifi chip.
 */
void reboot_wifi() {
  4017fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401800:	b082      	sub	sp, #8
  401802:	af00      	add	r7, sp, #0
	write_wifi_command("reboot\r\n", 10);	// commands wifi chip to reboot
  401804:	210a      	movs	r1, #10
  401806:	4832      	ldr	r0, [pc, #200]	; (4018d0 <reboot_wifi+0xd4>)
  401808:	4b32      	ldr	r3, [pc, #200]	; (4018d4 <reboot_wifi+0xd8>)
  40180a:	4798      	blx	r3
	
	int associated = 0;
  40180c:	2300      	movs	r3, #0
  40180e:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  401810:	2300      	movs	r3, #0
  401812:	603b      	str	r3, [r7, #0]
	
	wifi_setup_flag = false;		// resets the wifi setup flag
  401814:	4b30      	ldr	r3, [pc, #192]	; (4018d8 <reboot_wifi+0xdc>)
  401816:	2200      	movs	r2, #0
  401818:	601a      	str	r2, [r3, #0]
		
	while(!associated) {			// waits for association
  40181a:	e04a      	b.n	4018b2 <reboot_wifi+0xb6>
		if(wifi_setup_flag) {		// listens for wifi setup flag (should be pressed shortly after power)
  40181c:	4b2e      	ldr	r3, [pc, #184]	; (4018d8 <reboot_wifi+0xdc>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	2b00      	cmp	r3, #0
  401822:	d001      	beq.n	401828 <reboot_wifi+0x2c>
			setup_wifi();			// sets up wifi on new network
  401824:	4b2d      	ldr	r3, [pc, #180]	; (4018dc <reboot_wifi+0xe0>)
  401826:	4798      	blx	r3
		}
		associated = strstr(input_buffer, "[Associated]\r\n");
  401828:	492d      	ldr	r1, [pc, #180]	; (4018e0 <reboot_wifi+0xe4>)
  40182a:	482e      	ldr	r0, [pc, #184]	; (4018e4 <reboot_wifi+0xe8>)
  40182c:	4b2e      	ldr	r3, [pc, #184]	; (4018e8 <reboot_wifi+0xec>)
  40182e:	4798      	blx	r3
  401830:	4603      	mov	r3, r0
  401832:	607b      	str	r3, [r7, #4]
		if (seconds > 100){
  401834:	683b      	ldr	r3, [r7, #0]
  401836:	2b64      	cmp	r3, #100	; 0x64
  401838:	dd02      	ble.n	401840 <reboot_wifi+0x44>
			blink_LED(50);
  40183a:	2032      	movs	r0, #50	; 0x32
  40183c:	4b2b      	ldr	r3, [pc, #172]	; (4018ec <reboot_wifi+0xf0>)
  40183e:	4798      	blx	r3
		}
		delay_ms(200);
  401840:	4b2b      	ldr	r3, [pc, #172]	; (4018f0 <reboot_wifi+0xf4>)
  401842:	4798      	blx	r3
  401844:	4603      	mov	r3, r0
  401846:	4619      	mov	r1, r3
  401848:	f04f 0200 	mov.w	r2, #0
  40184c:	460b      	mov	r3, r1
  40184e:	4614      	mov	r4, r2
  401850:	18db      	adds	r3, r3, r3
  401852:	eb44 0404 	adc.w	r4, r4, r4
  401856:	185b      	adds	r3, r3, r1
  401858:	eb44 0402 	adc.w	r4, r4, r2
  40185c:	00e6      	lsls	r6, r4, #3
  40185e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401862:	00dd      	lsls	r5, r3, #3
  401864:	462b      	mov	r3, r5
  401866:	4634      	mov	r4, r6
  401868:	185b      	adds	r3, r3, r1
  40186a:	eb44 0402 	adc.w	r4, r4, r2
  40186e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401872:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401876:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40187a:	4643      	mov	r3, r8
  40187c:	464c      	mov	r4, r9
  40187e:	4619      	mov	r1, r3
  401880:	4622      	mov	r2, r4
  401882:	f243 63af 	movw	r3, #13999	; 0x36af
  401886:	f04f 0400 	mov.w	r4, #0
  40188a:	eb11 0b03 	adds.w	fp, r1, r3
  40188e:	eb42 0c04 	adc.w	ip, r2, r4
  401892:	4658      	mov	r0, fp
  401894:	4661      	mov	r1, ip
  401896:	4c17      	ldr	r4, [pc, #92]	; (4018f4 <reboot_wifi+0xf8>)
  401898:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40189c:	f04f 0300 	mov.w	r3, #0
  4018a0:	47a0      	blx	r4
  4018a2:	4603      	mov	r3, r0
  4018a4:	460c      	mov	r4, r1
  4018a6:	4618      	mov	r0, r3
  4018a8:	4b13      	ldr	r3, [pc, #76]	; (4018f8 <reboot_wifi+0xfc>)
  4018aa:	4798      	blx	r3
		seconds++;
  4018ac:	683b      	ldr	r3, [r7, #0]
  4018ae:	3301      	adds	r3, #1
  4018b0:	603b      	str	r3, [r7, #0]
	while(!associated) {			// waits for association
  4018b2:	687b      	ldr	r3, [r7, #4]
  4018b4:	2b00      	cmp	r3, #0
  4018b6:	d0b1      	beq.n	40181c <reboot_wifi+0x20>
	}
	
	buffer_index = 0;
  4018b8:	4b10      	ldr	r3, [pc, #64]	; (4018fc <reboot_wifi+0x100>)
  4018ba:	2200      	movs	r2, #0
  4018bc:	601a      	str	r2, [r3, #0]
	
	//write_wifi_command("set sy c e off\r\n", 5);	// resets a couple of system parameters in case they were changed
	write_wifi_command("set sy c p off\r\n", 5);
  4018be:	2105      	movs	r1, #5
  4018c0:	480f      	ldr	r0, [pc, #60]	; (401900 <reboot_wifi+0x104>)
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <reboot_wifi+0xd8>)
  4018c4:	4798      	blx	r3
	
  4018c6:	bf00      	nop
  4018c8:	3708      	adds	r7, #8
  4018ca:	46bd      	mov	sp, r7
  4018cc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4018d0:	00407c1c 	.word	0x00407c1c
  4018d4:	004012f1 	.word	0x004012f1
  4018d8:	2000895c 	.word	0x2000895c
  4018dc:	004016e5 	.word	0x004016e5
  4018e0:	00407bcc 	.word	0x00407bcc
  4018e4:	2000875c 	.word	0x2000875c
  4018e8:	0040338d 	.word	0x0040338d
  4018ec:	00401521 	.word	0x00401521
  4018f0:	00400fb5 	.word	0x00400fb5
  4018f4:	00402b7d 	.word	0x00402b7d
  4018f8:	20000001 	.word	0x20000001
  4018fc:	20008950 	.word	0x20008950
  401900:	00407c28 	.word	0x00407c28

00401904 <osc_enable>:
{
  401904:	b580      	push	{r7, lr}
  401906:	b082      	sub	sp, #8
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	2b07      	cmp	r3, #7
  401910:	d831      	bhi.n	401976 <osc_enable+0x72>
  401912:	a201      	add	r2, pc, #4	; (adr r2, 401918 <osc_enable+0x14>)
  401914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401918:	00401975 	.word	0x00401975
  40191c:	00401939 	.word	0x00401939
  401920:	00401941 	.word	0x00401941
  401924:	00401949 	.word	0x00401949
  401928:	00401951 	.word	0x00401951
  40192c:	00401959 	.word	0x00401959
  401930:	00401961 	.word	0x00401961
  401934:	0040196b 	.word	0x0040196b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401938:	2000      	movs	r0, #0
  40193a:	4b11      	ldr	r3, [pc, #68]	; (401980 <osc_enable+0x7c>)
  40193c:	4798      	blx	r3
		break;
  40193e:	e01a      	b.n	401976 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401940:	2001      	movs	r0, #1
  401942:	4b0f      	ldr	r3, [pc, #60]	; (401980 <osc_enable+0x7c>)
  401944:	4798      	blx	r3
		break;
  401946:	e016      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401948:	2000      	movs	r0, #0
  40194a:	4b0e      	ldr	r3, [pc, #56]	; (401984 <osc_enable+0x80>)
  40194c:	4798      	blx	r3
		break;
  40194e:	e012      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401950:	2010      	movs	r0, #16
  401952:	4b0c      	ldr	r3, [pc, #48]	; (401984 <osc_enable+0x80>)
  401954:	4798      	blx	r3
		break;
  401956:	e00e      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401958:	2020      	movs	r0, #32
  40195a:	4b0a      	ldr	r3, [pc, #40]	; (401984 <osc_enable+0x80>)
  40195c:	4798      	blx	r3
		break;
  40195e:	e00a      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401960:	213e      	movs	r1, #62	; 0x3e
  401962:	2000      	movs	r0, #0
  401964:	4b08      	ldr	r3, [pc, #32]	; (401988 <osc_enable+0x84>)
  401966:	4798      	blx	r3
		break;
  401968:	e005      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40196a:	213e      	movs	r1, #62	; 0x3e
  40196c:	2001      	movs	r0, #1
  40196e:	4b06      	ldr	r3, [pc, #24]	; (401988 <osc_enable+0x84>)
  401970:	4798      	blx	r3
		break;
  401972:	e000      	b.n	401976 <osc_enable+0x72>
		break;
  401974:	bf00      	nop
}
  401976:	bf00      	nop
  401978:	3708      	adds	r7, #8
  40197a:	46bd      	mov	sp, r7
  40197c:	bd80      	pop	{r7, pc}
  40197e:	bf00      	nop
  401980:	004021d1 	.word	0x004021d1
  401984:	0040223d 	.word	0x0040223d
  401988:	004022ad 	.word	0x004022ad

0040198c <osc_is_ready>:
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b082      	sub	sp, #8
  401990:	af00      	add	r7, sp, #0
  401992:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401994:	687b      	ldr	r3, [r7, #4]
  401996:	2b07      	cmp	r3, #7
  401998:	d826      	bhi.n	4019e8 <osc_is_ready+0x5c>
  40199a:	a201      	add	r2, pc, #4	; (adr r2, 4019a0 <osc_is_ready+0x14>)
  40199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019a0:	004019c1 	.word	0x004019c1
  4019a4:	004019c5 	.word	0x004019c5
  4019a8:	004019c5 	.word	0x004019c5
  4019ac:	004019d7 	.word	0x004019d7
  4019b0:	004019d7 	.word	0x004019d7
  4019b4:	004019d7 	.word	0x004019d7
  4019b8:	004019d7 	.word	0x004019d7
  4019bc:	004019d7 	.word	0x004019d7
		return 1;
  4019c0:	2301      	movs	r3, #1
  4019c2:	e012      	b.n	4019ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4019c4:	4b0b      	ldr	r3, [pc, #44]	; (4019f4 <osc_is_ready+0x68>)
  4019c6:	4798      	blx	r3
  4019c8:	4603      	mov	r3, r0
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	bf14      	ite	ne
  4019ce:	2301      	movne	r3, #1
  4019d0:	2300      	moveq	r3, #0
  4019d2:	b2db      	uxtb	r3, r3
  4019d4:	e009      	b.n	4019ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4019d6:	4b08      	ldr	r3, [pc, #32]	; (4019f8 <osc_is_ready+0x6c>)
  4019d8:	4798      	blx	r3
  4019da:	4603      	mov	r3, r0
  4019dc:	2b00      	cmp	r3, #0
  4019de:	bf14      	ite	ne
  4019e0:	2301      	movne	r3, #1
  4019e2:	2300      	moveq	r3, #0
  4019e4:	b2db      	uxtb	r3, r3
  4019e6:	e000      	b.n	4019ea <osc_is_ready+0x5e>
	return 0;
  4019e8:	2300      	movs	r3, #0
}
  4019ea:	4618      	mov	r0, r3
  4019ec:	3708      	adds	r7, #8
  4019ee:	46bd      	mov	sp, r7
  4019f0:	bd80      	pop	{r7, pc}
  4019f2:	bf00      	nop
  4019f4:	00402209 	.word	0x00402209
  4019f8:	00402325 	.word	0x00402325

004019fc <osc_get_rate>:
{
  4019fc:	b480      	push	{r7}
  4019fe:	b083      	sub	sp, #12
  401a00:	af00      	add	r7, sp, #0
  401a02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a04:	687b      	ldr	r3, [r7, #4]
  401a06:	2b07      	cmp	r3, #7
  401a08:	d825      	bhi.n	401a56 <osc_get_rate+0x5a>
  401a0a:	a201      	add	r2, pc, #4	; (adr r2, 401a10 <osc_get_rate+0x14>)
  401a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a10:	00401a31 	.word	0x00401a31
  401a14:	00401a37 	.word	0x00401a37
  401a18:	00401a3d 	.word	0x00401a3d
  401a1c:	00401a43 	.word	0x00401a43
  401a20:	00401a47 	.word	0x00401a47
  401a24:	00401a4b 	.word	0x00401a4b
  401a28:	00401a4f 	.word	0x00401a4f
  401a2c:	00401a53 	.word	0x00401a53
		return OSC_SLCK_32K_RC_HZ;
  401a30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a34:	e010      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a3a:	e00d      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a40:	e00a      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a42:	4b08      	ldr	r3, [pc, #32]	; (401a64 <osc_get_rate+0x68>)
  401a44:	e008      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a46:	4b08      	ldr	r3, [pc, #32]	; (401a68 <osc_get_rate+0x6c>)
  401a48:	e006      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a4a:	4b08      	ldr	r3, [pc, #32]	; (401a6c <osc_get_rate+0x70>)
  401a4c:	e004      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a4e:	4b07      	ldr	r3, [pc, #28]	; (401a6c <osc_get_rate+0x70>)
  401a50:	e002      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a52:	4b06      	ldr	r3, [pc, #24]	; (401a6c <osc_get_rate+0x70>)
  401a54:	e000      	b.n	401a58 <osc_get_rate+0x5c>
	return 0;
  401a56:	2300      	movs	r3, #0
}
  401a58:	4618      	mov	r0, r3
  401a5a:	370c      	adds	r7, #12
  401a5c:	46bd      	mov	sp, r7
  401a5e:	bc80      	pop	{r7}
  401a60:	4770      	bx	lr
  401a62:	bf00      	nop
  401a64:	003d0900 	.word	0x003d0900
  401a68:	007a1200 	.word	0x007a1200
  401a6c:	00b71b00 	.word	0x00b71b00

00401a70 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401a70:	b580      	push	{r7, lr}
  401a72:	b082      	sub	sp, #8
  401a74:	af00      	add	r7, sp, #0
  401a76:	4603      	mov	r3, r0
  401a78:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401a7a:	bf00      	nop
  401a7c:	79fb      	ldrb	r3, [r7, #7]
  401a7e:	4618      	mov	r0, r3
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <osc_wait_ready+0x28>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	f083 0301 	eor.w	r3, r3, #1
  401a8a:	b2db      	uxtb	r3, r3
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	d1f5      	bne.n	401a7c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401a90:	bf00      	nop
  401a92:	3708      	adds	r7, #8
  401a94:	46bd      	mov	sp, r7
  401a96:	bd80      	pop	{r7, pc}
  401a98:	0040198d 	.word	0x0040198d

00401a9c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	b086      	sub	sp, #24
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	60f8      	str	r0, [r7, #12]
  401aa4:	607a      	str	r2, [r7, #4]
  401aa6:	603b      	str	r3, [r7, #0]
  401aa8:	460b      	mov	r3, r1
  401aaa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401aac:	7afb      	ldrb	r3, [r7, #11]
  401aae:	4618      	mov	r0, r3
  401ab0:	4b0d      	ldr	r3, [pc, #52]	; (401ae8 <pll_config_init+0x4c>)
  401ab2:	4798      	blx	r3
  401ab4:	4602      	mov	r2, r0
  401ab6:	687b      	ldr	r3, [r7, #4]
  401ab8:	fbb2 f3f3 	udiv	r3, r2, r3
  401abc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401abe:	697b      	ldr	r3, [r7, #20]
  401ac0:	683a      	ldr	r2, [r7, #0]
  401ac2:	fb02 f303 	mul.w	r3, r2, r3
  401ac6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	3b01      	subs	r3, #1
  401acc:	041a      	lsls	r2, r3, #16
  401ace:	4b07      	ldr	r3, [pc, #28]	; (401aec <pll_config_init+0x50>)
  401ad0:	4013      	ands	r3, r2
  401ad2:	687a      	ldr	r2, [r7, #4]
  401ad4:	b2d2      	uxtb	r2, r2
  401ad6:	4313      	orrs	r3, r2
  401ad8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401adc:	68fb      	ldr	r3, [r7, #12]
  401ade:	601a      	str	r2, [r3, #0]
}
  401ae0:	bf00      	nop
  401ae2:	3718      	adds	r7, #24
  401ae4:	46bd      	mov	sp, r7
  401ae6:	bd80      	pop	{r7, pc}
  401ae8:	004019fd 	.word	0x004019fd
  401aec:	07ff0000 	.word	0x07ff0000

00401af0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401af0:	b580      	push	{r7, lr}
  401af2:	b082      	sub	sp, #8
  401af4:	af00      	add	r7, sp, #0
  401af6:	6078      	str	r0, [r7, #4]
  401af8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401afa:	683b      	ldr	r3, [r7, #0]
  401afc:	2b00      	cmp	r3, #0
  401afe:	d108      	bne.n	401b12 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401b00:	4b09      	ldr	r3, [pc, #36]	; (401b28 <pll_enable+0x38>)
  401b02:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b04:	4a09      	ldr	r2, [pc, #36]	; (401b2c <pll_enable+0x3c>)
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	681b      	ldr	r3, [r3, #0]
  401b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401b0e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401b10:	e005      	b.n	401b1e <pll_enable+0x2e>
		pmc_disable_pllbck();
  401b12:	4b07      	ldr	r3, [pc, #28]	; (401b30 <pll_enable+0x40>)
  401b14:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401b16:	4a05      	ldr	r2, [pc, #20]	; (401b2c <pll_enable+0x3c>)
  401b18:	687b      	ldr	r3, [r7, #4]
  401b1a:	681b      	ldr	r3, [r3, #0]
  401b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  401b1e:	bf00      	nop
  401b20:	3708      	adds	r7, #8
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	0040233d 	.word	0x0040233d
  401b2c:	400e0400 	.word	0x400e0400
  401b30:	0040236d 	.word	0x0040236d

00401b34 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401b34:	b580      	push	{r7, lr}
  401b36:	b082      	sub	sp, #8
  401b38:	af00      	add	r7, sp, #0
  401b3a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401b3c:	687b      	ldr	r3, [r7, #4]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d103      	bne.n	401b4a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401b42:	4b05      	ldr	r3, [pc, #20]	; (401b58 <pll_is_locked+0x24>)
  401b44:	4798      	blx	r3
  401b46:	4603      	mov	r3, r0
  401b48:	e002      	b.n	401b50 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401b4a:	4b04      	ldr	r3, [pc, #16]	; (401b5c <pll_is_locked+0x28>)
  401b4c:	4798      	blx	r3
  401b4e:	4603      	mov	r3, r0
	}
}
  401b50:	4618      	mov	r0, r3
  401b52:	3708      	adds	r7, #8
  401b54:	46bd      	mov	sp, r7
  401b56:	bd80      	pop	{r7, pc}
  401b58:	00402355 	.word	0x00402355
  401b5c:	00402385 	.word	0x00402385

00401b60 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401b60:	b580      	push	{r7, lr}
  401b62:	b082      	sub	sp, #8
  401b64:	af00      	add	r7, sp, #0
  401b66:	4603      	mov	r3, r0
  401b68:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401b6a:	79fb      	ldrb	r3, [r7, #7]
  401b6c:	3b03      	subs	r3, #3
  401b6e:	2b04      	cmp	r3, #4
  401b70:	d808      	bhi.n	401b84 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401b72:	79fb      	ldrb	r3, [r7, #7]
  401b74:	4618      	mov	r0, r3
  401b76:	4b06      	ldr	r3, [pc, #24]	; (401b90 <pll_enable_source+0x30>)
  401b78:	4798      	blx	r3
		osc_wait_ready(e_src);
  401b7a:	79fb      	ldrb	r3, [r7, #7]
  401b7c:	4618      	mov	r0, r3
  401b7e:	4b05      	ldr	r3, [pc, #20]	; (401b94 <pll_enable_source+0x34>)
  401b80:	4798      	blx	r3
		break;
  401b82:	e000      	b.n	401b86 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401b84:	bf00      	nop
	}
}
  401b86:	bf00      	nop
  401b88:	3708      	adds	r7, #8
  401b8a:	46bd      	mov	sp, r7
  401b8c:	bd80      	pop	{r7, pc}
  401b8e:	bf00      	nop
  401b90:	00401905 	.word	0x00401905
  401b94:	00401a71 	.word	0x00401a71

00401b98 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401b98:	b580      	push	{r7, lr}
  401b9a:	b082      	sub	sp, #8
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401ba0:	bf00      	nop
  401ba2:	6878      	ldr	r0, [r7, #4]
  401ba4:	4b04      	ldr	r3, [pc, #16]	; (401bb8 <pll_wait_for_lock+0x20>)
  401ba6:	4798      	blx	r3
  401ba8:	4603      	mov	r3, r0
  401baa:	2b00      	cmp	r3, #0
  401bac:	d0f9      	beq.n	401ba2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401bae:	2300      	movs	r3, #0
}
  401bb0:	4618      	mov	r0, r3
  401bb2:	3708      	adds	r7, #8
  401bb4:	46bd      	mov	sp, r7
  401bb6:	bd80      	pop	{r7, pc}
  401bb8:	00401b35 	.word	0x00401b35

00401bbc <sysclk_get_main_hz>:
{
  401bbc:	b580      	push	{r7, lr}
  401bbe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401bc0:	2006      	movs	r0, #6
  401bc2:	4b04      	ldr	r3, [pc, #16]	; (401bd4 <sysclk_get_main_hz+0x18>)
  401bc4:	4798      	blx	r3
  401bc6:	4602      	mov	r2, r0
  401bc8:	4613      	mov	r3, r2
  401bca:	009b      	lsls	r3, r3, #2
  401bcc:	4413      	add	r3, r2
  401bce:	009b      	lsls	r3, r3, #2
}
  401bd0:	4618      	mov	r0, r3
  401bd2:	bd80      	pop	{r7, pc}
  401bd4:	004019fd 	.word	0x004019fd

00401bd8 <sysclk_get_cpu_hz>:
{
  401bd8:	b580      	push	{r7, lr}
  401bda:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401bdc:	4b02      	ldr	r3, [pc, #8]	; (401be8 <sysclk_get_cpu_hz+0x10>)
  401bde:	4798      	blx	r3
  401be0:	4603      	mov	r3, r0
  401be2:	085b      	lsrs	r3, r3, #1
}
  401be4:	4618      	mov	r0, r3
  401be6:	bd80      	pop	{r7, pc}
  401be8:	00401bbd 	.word	0x00401bbd

00401bec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401bec:	b590      	push	{r4, r7, lr}
  401bee:	b083      	sub	sp, #12
  401bf0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401bf2:	4811      	ldr	r0, [pc, #68]	; (401c38 <sysclk_init+0x4c>)
  401bf4:	4b11      	ldr	r3, [pc, #68]	; (401c3c <sysclk_init+0x50>)
  401bf6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401bf8:	2006      	movs	r0, #6
  401bfa:	4b11      	ldr	r3, [pc, #68]	; (401c40 <sysclk_init+0x54>)
  401bfc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401bfe:	1d38      	adds	r0, r7, #4
  401c00:	2314      	movs	r3, #20
  401c02:	2201      	movs	r2, #1
  401c04:	2106      	movs	r1, #6
  401c06:	4c0f      	ldr	r4, [pc, #60]	; (401c44 <sysclk_init+0x58>)
  401c08:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401c0a:	1d3b      	adds	r3, r7, #4
  401c0c:	2100      	movs	r1, #0
  401c0e:	4618      	mov	r0, r3
  401c10:	4b0d      	ldr	r3, [pc, #52]	; (401c48 <sysclk_init+0x5c>)
  401c12:	4798      	blx	r3
		pll_wait_for_lock(0);
  401c14:	2000      	movs	r0, #0
  401c16:	4b0d      	ldr	r3, [pc, #52]	; (401c4c <sysclk_init+0x60>)
  401c18:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c1a:	2010      	movs	r0, #16
  401c1c:	4b0c      	ldr	r3, [pc, #48]	; (401c50 <sysclk_init+0x64>)
  401c1e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c20:	4b0c      	ldr	r3, [pc, #48]	; (401c54 <sysclk_init+0x68>)
  401c22:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401c24:	4b0c      	ldr	r3, [pc, #48]	; (401c58 <sysclk_init+0x6c>)
  401c26:	4798      	blx	r3
  401c28:	4603      	mov	r3, r0
  401c2a:	4618      	mov	r0, r3
  401c2c:	4b03      	ldr	r3, [pc, #12]	; (401c3c <sysclk_init+0x50>)
  401c2e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401c30:	bf00      	nop
  401c32:	370c      	adds	r7, #12
  401c34:	46bd      	mov	sp, r7
  401c36:	bd90      	pop	{r4, r7, pc}
  401c38:	07270e00 	.word	0x07270e00
  401c3c:	00402a1d 	.word	0x00402a1d
  401c40:	00401b61 	.word	0x00401b61
  401c44:	00401a9d 	.word	0x00401a9d
  401c48:	00401af1 	.word	0x00401af1
  401c4c:	00401b99 	.word	0x00401b99
  401c50:	00402151 	.word	0x00402151
  401c54:	00402885 	.word	0x00402885
  401c58:	00401bd9 	.word	0x00401bd9

00401c5c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401c5c:	b480      	push	{r7}
  401c5e:	b085      	sub	sp, #20
  401c60:	af00      	add	r7, sp, #0
  401c62:	60f8      	str	r0, [r7, #12]
  401c64:	60b9      	str	r1, [r7, #8]
  401c66:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c68:	687b      	ldr	r3, [r7, #4]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d003      	beq.n	401c76 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401c6e:	68fb      	ldr	r3, [r7, #12]
  401c70:	68ba      	ldr	r2, [r7, #8]
  401c72:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401c74:	e002      	b.n	401c7c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401c76:	68fb      	ldr	r3, [r7, #12]
  401c78:	68ba      	ldr	r2, [r7, #8]
  401c7a:	661a      	str	r2, [r3, #96]	; 0x60
}
  401c7c:	bf00      	nop
  401c7e:	3714      	adds	r7, #20
  401c80:	46bd      	mov	sp, r7
  401c82:	bc80      	pop	{r7}
  401c84:	4770      	bx	lr

00401c86 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401c86:	b480      	push	{r7}
  401c88:	b085      	sub	sp, #20
  401c8a:	af00      	add	r7, sp, #0
  401c8c:	60f8      	str	r0, [r7, #12]
  401c8e:	60b9      	str	r1, [r7, #8]
  401c90:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401c92:	68fb      	ldr	r3, [r7, #12]
  401c94:	68ba      	ldr	r2, [r7, #8]
  401c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401c9a:	687b      	ldr	r3, [r7, #4]
  401c9c:	005b      	lsls	r3, r3, #1
  401c9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ca2:	fbb2 f3f3 	udiv	r3, r2, r3
  401ca6:	3b01      	subs	r3, #1
  401ca8:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401cb2:	bf00      	nop
  401cb4:	3714      	adds	r7, #20
  401cb6:	46bd      	mov	sp, r7
  401cb8:	bc80      	pop	{r7}
  401cba:	4770      	bx	lr

00401cbc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401cc8:	68fb      	ldr	r3, [r7, #12]
  401cca:	687a      	ldr	r2, [r7, #4]
  401ccc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401cce:	68bb      	ldr	r3, [r7, #8]
  401cd0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cd4:	d04a      	beq.n	401d6c <pio_set_peripheral+0xb0>
  401cd6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cda:	d808      	bhi.n	401cee <pio_set_peripheral+0x32>
  401cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ce0:	d016      	beq.n	401d10 <pio_set_peripheral+0x54>
  401ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ce6:	d02c      	beq.n	401d42 <pio_set_peripheral+0x86>
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d069      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401cec:	e064      	b.n	401db8 <pio_set_peripheral+0xfc>
  401cee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cf2:	d065      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401cf4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cf8:	d803      	bhi.n	401d02 <pio_set_peripheral+0x46>
  401cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401cfe:	d04a      	beq.n	401d96 <pio_set_peripheral+0xda>
  401d00:	e05a      	b.n	401db8 <pio_set_peripheral+0xfc>
  401d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d06:	d05b      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401d08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d0c:	d058      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401d0e:	e053      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d10:	68fb      	ldr	r3, [r7, #12]
  401d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d14:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401d1a:	687b      	ldr	r3, [r7, #4]
  401d1c:	43d9      	mvns	r1, r3
  401d1e:	697b      	ldr	r3, [r7, #20]
  401d20:	400b      	ands	r3, r1
  401d22:	401a      	ands	r2, r3
  401d24:	68fb      	ldr	r3, [r7, #12]
  401d26:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d2c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d2e:	68fb      	ldr	r3, [r7, #12]
  401d30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401d32:	687b      	ldr	r3, [r7, #4]
  401d34:	43d9      	mvns	r1, r3
  401d36:	697b      	ldr	r3, [r7, #20]
  401d38:	400b      	ands	r3, r1
  401d3a:	401a      	ands	r2, r3
  401d3c:	68fb      	ldr	r3, [r7, #12]
  401d3e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d40:	e03a      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d42:	68fb      	ldr	r3, [r7, #12]
  401d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d48:	687a      	ldr	r2, [r7, #4]
  401d4a:	697b      	ldr	r3, [r7, #20]
  401d4c:	431a      	orrs	r2, r3
  401d4e:	68fb      	ldr	r3, [r7, #12]
  401d50:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d52:	68fb      	ldr	r3, [r7, #12]
  401d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d56:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401d5c:	687b      	ldr	r3, [r7, #4]
  401d5e:	43d9      	mvns	r1, r3
  401d60:	697b      	ldr	r3, [r7, #20]
  401d62:	400b      	ands	r3, r1
  401d64:	401a      	ands	r2, r3
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d6a:	e025      	b.n	401db8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d6c:	68fb      	ldr	r3, [r7, #12]
  401d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d70:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401d76:	687b      	ldr	r3, [r7, #4]
  401d78:	43d9      	mvns	r1, r3
  401d7a:	697b      	ldr	r3, [r7, #20]
  401d7c:	400b      	ands	r3, r1
  401d7e:	401a      	ands	r2, r3
  401d80:	68fb      	ldr	r3, [r7, #12]
  401d82:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d84:	68fb      	ldr	r3, [r7, #12]
  401d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d8a:	687a      	ldr	r2, [r7, #4]
  401d8c:	697b      	ldr	r3, [r7, #20]
  401d8e:	431a      	orrs	r2, r3
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d94:	e010      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d96:	68fb      	ldr	r3, [r7, #12]
  401d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d9a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d9c:	687a      	ldr	r2, [r7, #4]
  401d9e:	697b      	ldr	r3, [r7, #20]
  401da0:	431a      	orrs	r2, r3
  401da2:	68fb      	ldr	r3, [r7, #12]
  401da4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401da6:	68fb      	ldr	r3, [r7, #12]
  401da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401daa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dac:	687a      	ldr	r2, [r7, #4]
  401dae:	697b      	ldr	r3, [r7, #20]
  401db0:	431a      	orrs	r2, r3
  401db2:	68fb      	ldr	r3, [r7, #12]
  401db4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401db6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401db8:	68fb      	ldr	r3, [r7, #12]
  401dba:	687a      	ldr	r2, [r7, #4]
  401dbc:	605a      	str	r2, [r3, #4]
  401dbe:	e000      	b.n	401dc2 <pio_set_peripheral+0x106>
		return;
  401dc0:	bf00      	nop
}
  401dc2:	371c      	adds	r7, #28
  401dc4:	46bd      	mov	sp, r7
  401dc6:	bc80      	pop	{r7}
  401dc8:	4770      	bx	lr
	...

00401dcc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401dcc:	b580      	push	{r7, lr}
  401dce:	b084      	sub	sp, #16
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	60f8      	str	r0, [r7, #12]
  401dd4:	60b9      	str	r1, [r7, #8]
  401dd6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401dd8:	68b9      	ldr	r1, [r7, #8]
  401dda:	68f8      	ldr	r0, [r7, #12]
  401ddc:	4b19      	ldr	r3, [pc, #100]	; (401e44 <pio_set_input+0x78>)
  401dde:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401de0:	687b      	ldr	r3, [r7, #4]
  401de2:	f003 0301 	and.w	r3, r3, #1
  401de6:	461a      	mov	r2, r3
  401de8:	68b9      	ldr	r1, [r7, #8]
  401dea:	68f8      	ldr	r0, [r7, #12]
  401dec:	4b16      	ldr	r3, [pc, #88]	; (401e48 <pio_set_input+0x7c>)
  401dee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401df0:	687b      	ldr	r3, [r7, #4]
  401df2:	f003 030a 	and.w	r3, r3, #10
  401df6:	2b00      	cmp	r3, #0
  401df8:	d003      	beq.n	401e02 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401dfa:	68fb      	ldr	r3, [r7, #12]
  401dfc:	68ba      	ldr	r2, [r7, #8]
  401dfe:	621a      	str	r2, [r3, #32]
  401e00:	e002      	b.n	401e08 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401e02:	68fb      	ldr	r3, [r7, #12]
  401e04:	68ba      	ldr	r2, [r7, #8]
  401e06:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401e08:	687b      	ldr	r3, [r7, #4]
  401e0a:	f003 0302 	and.w	r3, r3, #2
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d004      	beq.n	401e1c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401e12:	68fb      	ldr	r3, [r7, #12]
  401e14:	68ba      	ldr	r2, [r7, #8]
  401e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401e1a:	e008      	b.n	401e2e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	f003 0308 	and.w	r3, r3, #8
  401e22:	2b00      	cmp	r3, #0
  401e24:	d003      	beq.n	401e2e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401e26:	68fb      	ldr	r3, [r7, #12]
  401e28:	68ba      	ldr	r2, [r7, #8]
  401e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	68ba      	ldr	r2, [r7, #8]
  401e32:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401e34:	68fb      	ldr	r3, [r7, #12]
  401e36:	68ba      	ldr	r2, [r7, #8]
  401e38:	601a      	str	r2, [r3, #0]
}
  401e3a:	bf00      	nop
  401e3c:	3710      	adds	r7, #16
  401e3e:	46bd      	mov	sp, r7
  401e40:	bd80      	pop	{r7, pc}
  401e42:	bf00      	nop
  401e44:	00401f35 	.word	0x00401f35
  401e48:	00401c5d 	.word	0x00401c5d

00401e4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401e4c:	b580      	push	{r7, lr}
  401e4e:	b084      	sub	sp, #16
  401e50:	af00      	add	r7, sp, #0
  401e52:	60f8      	str	r0, [r7, #12]
  401e54:	60b9      	str	r1, [r7, #8]
  401e56:	607a      	str	r2, [r7, #4]
  401e58:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401e5a:	68b9      	ldr	r1, [r7, #8]
  401e5c:	68f8      	ldr	r0, [r7, #12]
  401e5e:	4b12      	ldr	r3, [pc, #72]	; (401ea8 <pio_set_output+0x5c>)
  401e60:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401e62:	69ba      	ldr	r2, [r7, #24]
  401e64:	68b9      	ldr	r1, [r7, #8]
  401e66:	68f8      	ldr	r0, [r7, #12]
  401e68:	4b10      	ldr	r3, [pc, #64]	; (401eac <pio_set_output+0x60>)
  401e6a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401e6c:	683b      	ldr	r3, [r7, #0]
  401e6e:	2b00      	cmp	r3, #0
  401e70:	d003      	beq.n	401e7a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401e72:	68fb      	ldr	r3, [r7, #12]
  401e74:	68ba      	ldr	r2, [r7, #8]
  401e76:	651a      	str	r2, [r3, #80]	; 0x50
  401e78:	e002      	b.n	401e80 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401e7a:	68fb      	ldr	r3, [r7, #12]
  401e7c:	68ba      	ldr	r2, [r7, #8]
  401e7e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	2b00      	cmp	r3, #0
  401e84:	d003      	beq.n	401e8e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	68ba      	ldr	r2, [r7, #8]
  401e8a:	631a      	str	r2, [r3, #48]	; 0x30
  401e8c:	e002      	b.n	401e94 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	68ba      	ldr	r2, [r7, #8]
  401e92:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401e94:	68fb      	ldr	r3, [r7, #12]
  401e96:	68ba      	ldr	r2, [r7, #8]
  401e98:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	601a      	str	r2, [r3, #0]
}
  401ea0:	bf00      	nop
  401ea2:	3710      	adds	r7, #16
  401ea4:	46bd      	mov	sp, r7
  401ea6:	bd80      	pop	{r7, pc}
  401ea8:	00401f35 	.word	0x00401f35
  401eac:	00401c5d 	.word	0x00401c5d

00401eb0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401eb0:	b480      	push	{r7}
  401eb2:	b085      	sub	sp, #20
  401eb4:	af00      	add	r7, sp, #0
  401eb6:	60f8      	str	r0, [r7, #12]
  401eb8:	60b9      	str	r1, [r7, #8]
  401eba:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401ebc:	687b      	ldr	r3, [r7, #4]
  401ebe:	f003 0310 	and.w	r3, r3, #16
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d020      	beq.n	401f08 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401ec6:	68fb      	ldr	r3, [r7, #12]
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401ece:	687b      	ldr	r3, [r7, #4]
  401ed0:	f003 0320 	and.w	r3, r3, #32
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d004      	beq.n	401ee2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401ed8:	68fb      	ldr	r3, [r7, #12]
  401eda:	68ba      	ldr	r2, [r7, #8]
  401edc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ee0:	e003      	b.n	401eea <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401ee2:	68fb      	ldr	r3, [r7, #12]
  401ee4:	68ba      	ldr	r2, [r7, #8]
  401ee6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d004      	beq.n	401efe <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401ef4:	68fb      	ldr	r3, [r7, #12]
  401ef6:	68ba      	ldr	r2, [r7, #8]
  401ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401efc:	e008      	b.n	401f10 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	68ba      	ldr	r2, [r7, #8]
  401f02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401f06:	e003      	b.n	401f10 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401f08:	68fb      	ldr	r3, [r7, #12]
  401f0a:	68ba      	ldr	r2, [r7, #8]
  401f0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401f10:	bf00      	nop
  401f12:	3714      	adds	r7, #20
  401f14:	46bd      	mov	sp, r7
  401f16:	bc80      	pop	{r7}
  401f18:	4770      	bx	lr

00401f1a <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f1a:	b480      	push	{r7}
  401f1c:	b083      	sub	sp, #12
  401f1e:	af00      	add	r7, sp, #0
  401f20:	6078      	str	r0, [r7, #4]
  401f22:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	683a      	ldr	r2, [r7, #0]
  401f28:	641a      	str	r2, [r3, #64]	; 0x40
}
  401f2a:	bf00      	nop
  401f2c:	370c      	adds	r7, #12
  401f2e:	46bd      	mov	sp, r7
  401f30:	bc80      	pop	{r7}
  401f32:	4770      	bx	lr

00401f34 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f34:	b480      	push	{r7}
  401f36:	b083      	sub	sp, #12
  401f38:	af00      	add	r7, sp, #0
  401f3a:	6078      	str	r0, [r7, #4]
  401f3c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401f3e:	687b      	ldr	r3, [r7, #4]
  401f40:	683a      	ldr	r2, [r7, #0]
  401f42:	645a      	str	r2, [r3, #68]	; 0x44
}
  401f44:	bf00      	nop
  401f46:	370c      	adds	r7, #12
  401f48:	46bd      	mov	sp, r7
  401f4a:	bc80      	pop	{r7}
  401f4c:	4770      	bx	lr

00401f4e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401f4e:	b480      	push	{r7}
  401f50:	b083      	sub	sp, #12
  401f52:	af00      	add	r7, sp, #0
  401f54:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401f56:	687b      	ldr	r3, [r7, #4]
  401f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401f5a:	4618      	mov	r0, r3
  401f5c:	370c      	adds	r7, #12
  401f5e:	46bd      	mov	sp, r7
  401f60:	bc80      	pop	{r7}
  401f62:	4770      	bx	lr

00401f64 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401f64:	b480      	push	{r7}
  401f66:	b083      	sub	sp, #12
  401f68:	af00      	add	r7, sp, #0
  401f6a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401f6c:	687b      	ldr	r3, [r7, #4]
  401f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401f70:	4618      	mov	r0, r3
  401f72:	370c      	adds	r7, #12
  401f74:	46bd      	mov	sp, r7
  401f76:	bc80      	pop	{r7}
  401f78:	4770      	bx	lr
	...

00401f7c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401f7c:	b590      	push	{r4, r7, lr}
  401f7e:	b087      	sub	sp, #28
  401f80:	af02      	add	r7, sp, #8
  401f82:	6078      	str	r0, [r7, #4]
  401f84:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401f86:	6878      	ldr	r0, [r7, #4]
  401f88:	4b63      	ldr	r3, [pc, #396]	; (402118 <pio_configure_pin+0x19c>)
  401f8a:	4798      	blx	r3
  401f8c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401f8e:	683b      	ldr	r3, [r7, #0]
  401f90:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f98:	d067      	beq.n	40206a <pio_configure_pin+0xee>
  401f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f9e:	d809      	bhi.n	401fb4 <pio_configure_pin+0x38>
  401fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401fa4:	d02b      	beq.n	401ffe <pio_configure_pin+0x82>
  401fa6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401faa:	d043      	beq.n	402034 <pio_configure_pin+0xb8>
  401fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401fb0:	d00a      	beq.n	401fc8 <pio_configure_pin+0x4c>
  401fb2:	e0a9      	b.n	402108 <pio_configure_pin+0x18c>
  401fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401fb8:	d07e      	beq.n	4020b8 <pio_configure_pin+0x13c>
  401fba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401fbe:	d07b      	beq.n	4020b8 <pio_configure_pin+0x13c>
  401fc0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401fc4:	d06c      	beq.n	4020a0 <pio_configure_pin+0x124>
  401fc6:	e09f      	b.n	402108 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401fc8:	687b      	ldr	r3, [r7, #4]
  401fca:	f003 031f 	and.w	r3, r3, #31
  401fce:	2201      	movs	r2, #1
  401fd0:	fa02 f303 	lsl.w	r3, r2, r3
  401fd4:	461a      	mov	r2, r3
  401fd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401fda:	68f8      	ldr	r0, [r7, #12]
  401fdc:	4b4f      	ldr	r3, [pc, #316]	; (40211c <pio_configure_pin+0x1a0>)
  401fde:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401fe0:	687b      	ldr	r3, [r7, #4]
  401fe2:	f003 031f 	and.w	r3, r3, #31
  401fe6:	2201      	movs	r2, #1
  401fe8:	fa02 f303 	lsl.w	r3, r2, r3
  401fec:	4619      	mov	r1, r3
  401fee:	683b      	ldr	r3, [r7, #0]
  401ff0:	f003 0301 	and.w	r3, r3, #1
  401ff4:	461a      	mov	r2, r3
  401ff6:	68f8      	ldr	r0, [r7, #12]
  401ff8:	4b49      	ldr	r3, [pc, #292]	; (402120 <pio_configure_pin+0x1a4>)
  401ffa:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401ffc:	e086      	b.n	40210c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401ffe:	687b      	ldr	r3, [r7, #4]
  402000:	f003 031f 	and.w	r3, r3, #31
  402004:	2201      	movs	r2, #1
  402006:	fa02 f303 	lsl.w	r3, r2, r3
  40200a:	461a      	mov	r2, r3
  40200c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402010:	68f8      	ldr	r0, [r7, #12]
  402012:	4b42      	ldr	r3, [pc, #264]	; (40211c <pio_configure_pin+0x1a0>)
  402014:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402016:	687b      	ldr	r3, [r7, #4]
  402018:	f003 031f 	and.w	r3, r3, #31
  40201c:	2201      	movs	r2, #1
  40201e:	fa02 f303 	lsl.w	r3, r2, r3
  402022:	4619      	mov	r1, r3
  402024:	683b      	ldr	r3, [r7, #0]
  402026:	f003 0301 	and.w	r3, r3, #1
  40202a:	461a      	mov	r2, r3
  40202c:	68f8      	ldr	r0, [r7, #12]
  40202e:	4b3c      	ldr	r3, [pc, #240]	; (402120 <pio_configure_pin+0x1a4>)
  402030:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402032:	e06b      	b.n	40210c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	f003 031f 	and.w	r3, r3, #31
  40203a:	2201      	movs	r2, #1
  40203c:	fa02 f303 	lsl.w	r3, r2, r3
  402040:	461a      	mov	r2, r3
  402042:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402046:	68f8      	ldr	r0, [r7, #12]
  402048:	4b34      	ldr	r3, [pc, #208]	; (40211c <pio_configure_pin+0x1a0>)
  40204a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40204c:	687b      	ldr	r3, [r7, #4]
  40204e:	f003 031f 	and.w	r3, r3, #31
  402052:	2201      	movs	r2, #1
  402054:	fa02 f303 	lsl.w	r3, r2, r3
  402058:	4619      	mov	r1, r3
  40205a:	683b      	ldr	r3, [r7, #0]
  40205c:	f003 0301 	and.w	r3, r3, #1
  402060:	461a      	mov	r2, r3
  402062:	68f8      	ldr	r0, [r7, #12]
  402064:	4b2e      	ldr	r3, [pc, #184]	; (402120 <pio_configure_pin+0x1a4>)
  402066:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402068:	e050      	b.n	40210c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40206a:	687b      	ldr	r3, [r7, #4]
  40206c:	f003 031f 	and.w	r3, r3, #31
  402070:	2201      	movs	r2, #1
  402072:	fa02 f303 	lsl.w	r3, r2, r3
  402076:	461a      	mov	r2, r3
  402078:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40207c:	68f8      	ldr	r0, [r7, #12]
  40207e:	4b27      	ldr	r3, [pc, #156]	; (40211c <pio_configure_pin+0x1a0>)
  402080:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	f003 031f 	and.w	r3, r3, #31
  402088:	2201      	movs	r2, #1
  40208a:	fa02 f303 	lsl.w	r3, r2, r3
  40208e:	4619      	mov	r1, r3
  402090:	683b      	ldr	r3, [r7, #0]
  402092:	f003 0301 	and.w	r3, r3, #1
  402096:	461a      	mov	r2, r3
  402098:	68f8      	ldr	r0, [r7, #12]
  40209a:	4b21      	ldr	r3, [pc, #132]	; (402120 <pio_configure_pin+0x1a4>)
  40209c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40209e:	e035      	b.n	40210c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4020a0:	687b      	ldr	r3, [r7, #4]
  4020a2:	f003 031f 	and.w	r3, r3, #31
  4020a6:	2201      	movs	r2, #1
  4020a8:	fa02 f303 	lsl.w	r3, r2, r3
  4020ac:	683a      	ldr	r2, [r7, #0]
  4020ae:	4619      	mov	r1, r3
  4020b0:	68f8      	ldr	r0, [r7, #12]
  4020b2:	4b1c      	ldr	r3, [pc, #112]	; (402124 <pio_configure_pin+0x1a8>)
  4020b4:	4798      	blx	r3
		break;
  4020b6:	e029      	b.n	40210c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	f003 031f 	and.w	r3, r3, #31
  4020be:	2201      	movs	r2, #1
  4020c0:	fa02 f303 	lsl.w	r3, r2, r3
  4020c4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4020c6:	683b      	ldr	r3, [r7, #0]
  4020c8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020cc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4020d0:	bf0c      	ite	eq
  4020d2:	2301      	moveq	r3, #1
  4020d4:	2300      	movne	r3, #0
  4020d6:	b2db      	uxtb	r3, r3
  4020d8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4020da:	683b      	ldr	r3, [r7, #0]
  4020dc:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020e0:	2b00      	cmp	r3, #0
  4020e2:	bf14      	ite	ne
  4020e4:	2301      	movne	r3, #1
  4020e6:	2300      	moveq	r3, #0
  4020e8:	b2db      	uxtb	r3, r3
  4020ea:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4020ec:	683b      	ldr	r3, [r7, #0]
  4020ee:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020f2:	2b00      	cmp	r3, #0
  4020f4:	bf14      	ite	ne
  4020f6:	2301      	movne	r3, #1
  4020f8:	2300      	moveq	r3, #0
  4020fa:	b2db      	uxtb	r3, r3
  4020fc:	9300      	str	r3, [sp, #0]
  4020fe:	4603      	mov	r3, r0
  402100:	68f8      	ldr	r0, [r7, #12]
  402102:	4c09      	ldr	r4, [pc, #36]	; (402128 <pio_configure_pin+0x1ac>)
  402104:	47a0      	blx	r4
		break;
  402106:	e001      	b.n	40210c <pio_configure_pin+0x190>

	default:
		return 0;
  402108:	2300      	movs	r3, #0
  40210a:	e000      	b.n	40210e <pio_configure_pin+0x192>
	}

	return 1;
  40210c:	2301      	movs	r3, #1
}
  40210e:	4618      	mov	r0, r3
  402110:	3714      	adds	r7, #20
  402112:	46bd      	mov	sp, r7
  402114:	bd90      	pop	{r4, r7, pc}
  402116:	bf00      	nop
  402118:	0040212d 	.word	0x0040212d
  40211c:	00401cbd 	.word	0x00401cbd
  402120:	00401c5d 	.word	0x00401c5d
  402124:	00401dcd 	.word	0x00401dcd
  402128:	00401e4d 	.word	0x00401e4d

0040212c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40212c:	b480      	push	{r7}
  40212e:	b085      	sub	sp, #20
  402130:	af00      	add	r7, sp, #0
  402132:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402134:	687b      	ldr	r3, [r7, #4]
  402136:	095b      	lsrs	r3, r3, #5
  402138:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40213c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402140:	025b      	lsls	r3, r3, #9
  402142:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  402144:	68fb      	ldr	r3, [r7, #12]
}
  402146:	4618      	mov	r0, r3
  402148:	3714      	adds	r7, #20
  40214a:	46bd      	mov	sp, r7
  40214c:	bc80      	pop	{r7}
  40214e:	4770      	bx	lr

00402150 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402150:	b480      	push	{r7}
  402152:	b085      	sub	sp, #20
  402154:	af00      	add	r7, sp, #0
  402156:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402158:	491c      	ldr	r1, [pc, #112]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40215a:	4b1c      	ldr	r3, [pc, #112]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40215e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402162:	687b      	ldr	r3, [r7, #4]
  402164:	4313      	orrs	r3, r2
  402166:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402168:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40216c:	60fb      	str	r3, [r7, #12]
  40216e:	e007      	b.n	402180 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402170:	68fb      	ldr	r3, [r7, #12]
  402172:	2b00      	cmp	r3, #0
  402174:	d101      	bne.n	40217a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402176:	2301      	movs	r3, #1
  402178:	e023      	b.n	4021c2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40217a:	68fb      	ldr	r3, [r7, #12]
  40217c:	3b01      	subs	r3, #1
  40217e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402180:	4b12      	ldr	r3, [pc, #72]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  402182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402184:	f003 0308 	and.w	r3, r3, #8
  402188:	2b00      	cmp	r3, #0
  40218a:	d0f1      	beq.n	402170 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40218c:	4a0f      	ldr	r2, [pc, #60]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40218e:	4b0f      	ldr	r3, [pc, #60]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  402190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402192:	f023 0303 	bic.w	r3, r3, #3
  402196:	f043 0302 	orr.w	r3, r3, #2
  40219a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40219c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4021a0:	60fb      	str	r3, [r7, #12]
  4021a2:	e007      	b.n	4021b4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021a4:	68fb      	ldr	r3, [r7, #12]
  4021a6:	2b00      	cmp	r3, #0
  4021a8:	d101      	bne.n	4021ae <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4021aa:	2301      	movs	r3, #1
  4021ac:	e009      	b.n	4021c2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021ae:	68fb      	ldr	r3, [r7, #12]
  4021b0:	3b01      	subs	r3, #1
  4021b2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021b4:	4b05      	ldr	r3, [pc, #20]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  4021b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021b8:	f003 0308 	and.w	r3, r3, #8
  4021bc:	2b00      	cmp	r3, #0
  4021be:	d0f1      	beq.n	4021a4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4021c0:	2300      	movs	r3, #0
}
  4021c2:	4618      	mov	r0, r3
  4021c4:	3714      	adds	r7, #20
  4021c6:	46bd      	mov	sp, r7
  4021c8:	bc80      	pop	{r7}
  4021ca:	4770      	bx	lr
  4021cc:	400e0400 	.word	0x400e0400

004021d0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4021d0:	b480      	push	{r7}
  4021d2:	b083      	sub	sp, #12
  4021d4:	af00      	add	r7, sp, #0
  4021d6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4021d8:	687b      	ldr	r3, [r7, #4]
  4021da:	2b01      	cmp	r3, #1
  4021dc:	d107      	bne.n	4021ee <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4021de:	4a08      	ldr	r2, [pc, #32]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021e0:	4b07      	ldr	r3, [pc, #28]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021e2:	689b      	ldr	r3, [r3, #8]
  4021e4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4021e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4021ec:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4021ee:	4b04      	ldr	r3, [pc, #16]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021f0:	4a04      	ldr	r2, [pc, #16]	; (402204 <pmc_switch_sclk_to_32kxtal+0x34>)
  4021f2:	601a      	str	r2, [r3, #0]
}
  4021f4:	bf00      	nop
  4021f6:	370c      	adds	r7, #12
  4021f8:	46bd      	mov	sp, r7
  4021fa:	bc80      	pop	{r7}
  4021fc:	4770      	bx	lr
  4021fe:	bf00      	nop
  402200:	400e1410 	.word	0x400e1410
  402204:	a5000008 	.word	0xa5000008

00402208 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402208:	b480      	push	{r7}
  40220a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40220c:	4b09      	ldr	r3, [pc, #36]	; (402234 <pmc_osc_is_ready_32kxtal+0x2c>)
  40220e:	695b      	ldr	r3, [r3, #20]
  402210:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402214:	2b00      	cmp	r3, #0
  402216:	d007      	beq.n	402228 <pmc_osc_is_ready_32kxtal+0x20>
  402218:	4b07      	ldr	r3, [pc, #28]	; (402238 <pmc_osc_is_ready_32kxtal+0x30>)
  40221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402220:	2b00      	cmp	r3, #0
  402222:	d001      	beq.n	402228 <pmc_osc_is_ready_32kxtal+0x20>
  402224:	2301      	movs	r3, #1
  402226:	e000      	b.n	40222a <pmc_osc_is_ready_32kxtal+0x22>
  402228:	2300      	movs	r3, #0
}
  40222a:	4618      	mov	r0, r3
  40222c:	46bd      	mov	sp, r7
  40222e:	bc80      	pop	{r7}
  402230:	4770      	bx	lr
  402232:	bf00      	nop
  402234:	400e1410 	.word	0x400e1410
  402238:	400e0400 	.word	0x400e0400

0040223c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402244:	4a18      	ldr	r2, [pc, #96]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402246:	4b18      	ldr	r3, [pc, #96]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402248:	6a1b      	ldr	r3, [r3, #32]
  40224a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40224e:	f043 0308 	orr.w	r3, r3, #8
  402252:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402254:	bf00      	nop
  402256:	4b14      	ldr	r3, [pc, #80]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40225e:	2b00      	cmp	r3, #0
  402260:	d0f9      	beq.n	402256 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402262:	4911      	ldr	r1, [pc, #68]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402264:	4b10      	ldr	r3, [pc, #64]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402266:	6a1b      	ldr	r3, [r3, #32]
  402268:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40226c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402270:	687a      	ldr	r2, [r7, #4]
  402272:	4313      	orrs	r3, r2
  402274:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402278:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40227a:	bf00      	nop
  40227c:	4b0a      	ldr	r3, [pc, #40]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402284:	2b00      	cmp	r3, #0
  402286:	d0f9      	beq.n	40227c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402288:	4a07      	ldr	r2, [pc, #28]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40228a:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40228c:	6a1b      	ldr	r3, [r3, #32]
  40228e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402296:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40229a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40229c:	bf00      	nop
  40229e:	370c      	adds	r7, #12
  4022a0:	46bd      	mov	sp, r7
  4022a2:	bc80      	pop	{r7}
  4022a4:	4770      	bx	lr
  4022a6:	bf00      	nop
  4022a8:	400e0400 	.word	0x400e0400

004022ac <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4022ac:	b480      	push	{r7}
  4022ae:	b083      	sub	sp, #12
  4022b0:	af00      	add	r7, sp, #0
  4022b2:	6078      	str	r0, [r7, #4]
  4022b4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4022b6:	687b      	ldr	r3, [r7, #4]
  4022b8:	2b00      	cmp	r3, #0
  4022ba:	d008      	beq.n	4022ce <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022bc:	4916      	ldr	r1, [pc, #88]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022be:	4b16      	ldr	r3, [pc, #88]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022c0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4022c2:	4a16      	ldr	r2, [pc, #88]	; (40231c <pmc_switch_mainck_to_xtal+0x70>)
  4022c4:	401a      	ands	r2, r3
  4022c6:	4b16      	ldr	r3, [pc, #88]	; (402320 <pmc_switch_mainck_to_xtal+0x74>)
  4022c8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022ca:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4022cc:	e01e      	b.n	40230c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022ce:	4912      	ldr	r1, [pc, #72]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022d0:	4b11      	ldr	r3, [pc, #68]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022d2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4022d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4022d8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4022dc:	683a      	ldr	r2, [r7, #0]
  4022de:	0212      	lsls	r2, r2, #8
  4022e0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4022e2:	4313      	orrs	r3, r2
  4022e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022e8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022ec:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4022ee:	bf00      	nop
  4022f0:	4b09      	ldr	r3, [pc, #36]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022f4:	f003 0301 	and.w	r3, r3, #1
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d0f9      	beq.n	4022f0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4022fc:	4a06      	ldr	r2, [pc, #24]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022fe:	4b06      	ldr	r3, [pc, #24]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  402300:	6a1b      	ldr	r3, [r3, #32]
  402302:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40230a:	6213      	str	r3, [r2, #32]
}
  40230c:	bf00      	nop
  40230e:	370c      	adds	r7, #12
  402310:	46bd      	mov	sp, r7
  402312:	bc80      	pop	{r7}
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	400e0400 	.word	0x400e0400
  40231c:	fec8fffc 	.word	0xfec8fffc
  402320:	01370002 	.word	0x01370002

00402324 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402324:	b480      	push	{r7}
  402326:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402328:	4b03      	ldr	r3, [pc, #12]	; (402338 <pmc_osc_is_ready_mainck+0x14>)
  40232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402330:	4618      	mov	r0, r3
  402332:	46bd      	mov	sp, r7
  402334:	bc80      	pop	{r7}
  402336:	4770      	bx	lr
  402338:	400e0400 	.word	0x400e0400

0040233c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40233c:	b480      	push	{r7}
  40233e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402340:	4b03      	ldr	r3, [pc, #12]	; (402350 <pmc_disable_pllack+0x14>)
  402342:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402346:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402348:	bf00      	nop
  40234a:	46bd      	mov	sp, r7
  40234c:	bc80      	pop	{r7}
  40234e:	4770      	bx	lr
  402350:	400e0400 	.word	0x400e0400

00402354 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402354:	b480      	push	{r7}
  402356:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402358:	4b03      	ldr	r3, [pc, #12]	; (402368 <pmc_is_locked_pllack+0x14>)
  40235a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40235c:	f003 0302 	and.w	r3, r3, #2
}
  402360:	4618      	mov	r0, r3
  402362:	46bd      	mov	sp, r7
  402364:	bc80      	pop	{r7}
  402366:	4770      	bx	lr
  402368:	400e0400 	.word	0x400e0400

0040236c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40236c:	b480      	push	{r7}
  40236e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402370:	4b03      	ldr	r3, [pc, #12]	; (402380 <pmc_disable_pllbck+0x14>)
  402372:	2200      	movs	r2, #0
  402374:	62da      	str	r2, [r3, #44]	; 0x2c
}
  402376:	bf00      	nop
  402378:	46bd      	mov	sp, r7
  40237a:	bc80      	pop	{r7}
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop
  402380:	400e0400 	.word	0x400e0400

00402384 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402384:	b480      	push	{r7}
  402386:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402388:	4b03      	ldr	r3, [pc, #12]	; (402398 <pmc_is_locked_pllbck+0x14>)
  40238a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40238c:	f003 0304 	and.w	r3, r3, #4
}
  402390:	4618      	mov	r0, r3
  402392:	46bd      	mov	sp, r7
  402394:	bc80      	pop	{r7}
  402396:	4770      	bx	lr
  402398:	400e0400 	.word	0x400e0400

0040239c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40239c:	b480      	push	{r7}
  40239e:	b083      	sub	sp, #12
  4023a0:	af00      	add	r7, sp, #0
  4023a2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4023a4:	687b      	ldr	r3, [r7, #4]
  4023a6:	2b22      	cmp	r3, #34	; 0x22
  4023a8:	d901      	bls.n	4023ae <pmc_enable_periph_clk+0x12>
		return 1;
  4023aa:	2301      	movs	r3, #1
  4023ac:	e02f      	b.n	40240e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4023ae:	687b      	ldr	r3, [r7, #4]
  4023b0:	2b1f      	cmp	r3, #31
  4023b2:	d813      	bhi.n	4023dc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4023b4:	4b18      	ldr	r3, [pc, #96]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023b6:	699a      	ldr	r2, [r3, #24]
  4023b8:	2101      	movs	r1, #1
  4023ba:	687b      	ldr	r3, [r7, #4]
  4023bc:	fa01 f303 	lsl.w	r3, r1, r3
  4023c0:	401a      	ands	r2, r3
  4023c2:	2101      	movs	r1, #1
  4023c4:	687b      	ldr	r3, [r7, #4]
  4023c6:	fa01 f303 	lsl.w	r3, r1, r3
  4023ca:	429a      	cmp	r2, r3
  4023cc:	d01e      	beq.n	40240c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4023ce:	4a12      	ldr	r2, [pc, #72]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023d0:	2101      	movs	r1, #1
  4023d2:	687b      	ldr	r3, [r7, #4]
  4023d4:	fa01 f303 	lsl.w	r3, r1, r3
  4023d8:	6113      	str	r3, [r2, #16]
  4023da:	e017      	b.n	40240c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	3b20      	subs	r3, #32
  4023e0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4023e2:	4b0d      	ldr	r3, [pc, #52]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4023e8:	2101      	movs	r1, #1
  4023ea:	687b      	ldr	r3, [r7, #4]
  4023ec:	fa01 f303 	lsl.w	r3, r1, r3
  4023f0:	401a      	ands	r2, r3
  4023f2:	2101      	movs	r1, #1
  4023f4:	687b      	ldr	r3, [r7, #4]
  4023f6:	fa01 f303 	lsl.w	r3, r1, r3
  4023fa:	429a      	cmp	r2, r3
  4023fc:	d006      	beq.n	40240c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4023fe:	4a06      	ldr	r2, [pc, #24]	; (402418 <pmc_enable_periph_clk+0x7c>)
  402400:	2101      	movs	r1, #1
  402402:	687b      	ldr	r3, [r7, #4]
  402404:	fa01 f303 	lsl.w	r3, r1, r3
  402408:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40240c:	2300      	movs	r3, #0
}
  40240e:	4618      	mov	r0, r3
  402410:	370c      	adds	r7, #12
  402412:	46bd      	mov	sp, r7
  402414:	bc80      	pop	{r7}
  402416:	4770      	bx	lr
  402418:	400e0400 	.word	0x400e0400

0040241c <sysclk_enable_peripheral_clock>:
{
  40241c:	b580      	push	{r7, lr}
  40241e:	b082      	sub	sp, #8
  402420:	af00      	add	r7, sp, #0
  402422:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402424:	6878      	ldr	r0, [r7, #4]
  402426:	4b03      	ldr	r3, [pc, #12]	; (402434 <sysclk_enable_peripheral_clock+0x18>)
  402428:	4798      	blx	r3
}
  40242a:	bf00      	nop
  40242c:	3708      	adds	r7, #8
  40242e:	46bd      	mov	sp, r7
  402430:	bd80      	pop	{r7, pc}
  402432:	bf00      	nop
  402434:	0040239d 	.word	0x0040239d

00402438 <ioport_init>:
{
  402438:	b580      	push	{r7, lr}
  40243a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40243c:	200b      	movs	r0, #11
  40243e:	4b03      	ldr	r3, [pc, #12]	; (40244c <ioport_init+0x14>)
  402440:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  402442:	200c      	movs	r0, #12
  402444:	4b01      	ldr	r3, [pc, #4]	; (40244c <ioport_init+0x14>)
  402446:	4798      	blx	r3
}
  402448:	bf00      	nop
  40244a:	bd80      	pop	{r7, pc}
  40244c:	0040241d 	.word	0x0040241d

00402450 <ioport_set_pin_mode>:
{
  402450:	b480      	push	{r7}
  402452:	b08d      	sub	sp, #52	; 0x34
  402454:	af00      	add	r7, sp, #0
  402456:	6078      	str	r0, [r7, #4]
  402458:	6039      	str	r1, [r7, #0]
  40245a:	687b      	ldr	r3, [r7, #4]
  40245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40245e:	683b      	ldr	r3, [r7, #0]
  402460:	62bb      	str	r3, [r7, #40]	; 0x28
  402462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402464:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402468:	095a      	lsrs	r2, r3, #5
  40246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40246c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40246e:	6a3b      	ldr	r3, [r7, #32]
  402470:	f003 031f 	and.w	r3, r3, #31
  402474:	2101      	movs	r1, #1
  402476:	fa01 f303 	lsl.w	r3, r1, r3
  40247a:	61fa      	str	r2, [r7, #28]
  40247c:	61bb      	str	r3, [r7, #24]
  40247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402480:	617b      	str	r3, [r7, #20]
  402482:	69fb      	ldr	r3, [r7, #28]
  402484:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402486:	693b      	ldr	r3, [r7, #16]
  402488:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40248c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402490:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  402492:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  402494:	697b      	ldr	r3, [r7, #20]
  402496:	f003 0308 	and.w	r3, r3, #8
  40249a:	2b00      	cmp	r3, #0
  40249c:	d003      	beq.n	4024a6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40249e:	68fb      	ldr	r3, [r7, #12]
  4024a0:	69ba      	ldr	r2, [r7, #24]
  4024a2:	665a      	str	r2, [r3, #100]	; 0x64
  4024a4:	e002      	b.n	4024ac <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  4024a6:	68fb      	ldr	r3, [r7, #12]
  4024a8:	69ba      	ldr	r2, [r7, #24]
  4024aa:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4024ac:	697b      	ldr	r3, [r7, #20]
  4024ae:	f003 0310 	and.w	r3, r3, #16
  4024b2:	2b00      	cmp	r3, #0
  4024b4:	d004      	beq.n	4024c0 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4024b6:	68fb      	ldr	r3, [r7, #12]
  4024b8:	69ba      	ldr	r2, [r7, #24]
  4024ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4024be:	e003      	b.n	4024c8 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4024c0:	68fb      	ldr	r3, [r7, #12]
  4024c2:	69ba      	ldr	r2, [r7, #24]
  4024c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4024c8:	697b      	ldr	r3, [r7, #20]
  4024ca:	f003 0320 	and.w	r3, r3, #32
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d003      	beq.n	4024da <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4024d2:	68fb      	ldr	r3, [r7, #12]
  4024d4:	69ba      	ldr	r2, [r7, #24]
  4024d6:	651a      	str	r2, [r3, #80]	; 0x50
  4024d8:	e002      	b.n	4024e0 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4024da:	68fb      	ldr	r3, [r7, #12]
  4024dc:	69ba      	ldr	r2, [r7, #24]
  4024de:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4024e0:	697b      	ldr	r3, [r7, #20]
  4024e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d003      	beq.n	4024f2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4024ea:	68fb      	ldr	r3, [r7, #12]
  4024ec:	69ba      	ldr	r2, [r7, #24]
  4024ee:	621a      	str	r2, [r3, #32]
  4024f0:	e002      	b.n	4024f8 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4024f2:	68fb      	ldr	r3, [r7, #12]
  4024f4:	69ba      	ldr	r2, [r7, #24]
  4024f6:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4024f8:	697b      	ldr	r3, [r7, #20]
  4024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4024fe:	2b00      	cmp	r3, #0
  402500:	d004      	beq.n	40250c <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  402502:	68fb      	ldr	r3, [r7, #12]
  402504:	69ba      	ldr	r2, [r7, #24]
  402506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40250a:	e003      	b.n	402514 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  40250c:	68fb      	ldr	r3, [r7, #12]
  40250e:	69ba      	ldr	r2, [r7, #24]
  402510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402514:	697b      	ldr	r3, [r7, #20]
  402516:	f003 0301 	and.w	r3, r3, #1
  40251a:	2b00      	cmp	r3, #0
  40251c:	d006      	beq.n	40252c <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40251e:	68fb      	ldr	r3, [r7, #12]
  402520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402522:	69bb      	ldr	r3, [r7, #24]
  402524:	431a      	orrs	r2, r3
  402526:	68fb      	ldr	r3, [r7, #12]
  402528:	671a      	str	r2, [r3, #112]	; 0x70
  40252a:	e006      	b.n	40253a <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  40252c:	68fb      	ldr	r3, [r7, #12]
  40252e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402530:	69bb      	ldr	r3, [r7, #24]
  402532:	43db      	mvns	r3, r3
  402534:	401a      	ands	r2, r3
  402536:	68fb      	ldr	r3, [r7, #12]
  402538:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40253a:	697b      	ldr	r3, [r7, #20]
  40253c:	f003 0302 	and.w	r3, r3, #2
  402540:	2b00      	cmp	r3, #0
  402542:	d006      	beq.n	402552 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402548:	69bb      	ldr	r3, [r7, #24]
  40254a:	431a      	orrs	r2, r3
  40254c:	68fb      	ldr	r3, [r7, #12]
  40254e:	675a      	str	r2, [r3, #116]	; 0x74
}
  402550:	e006      	b.n	402560 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  402552:	68fb      	ldr	r3, [r7, #12]
  402554:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402556:	69bb      	ldr	r3, [r7, #24]
  402558:	43db      	mvns	r3, r3
  40255a:	401a      	ands	r2, r3
  40255c:	68fb      	ldr	r3, [r7, #12]
  40255e:	675a      	str	r2, [r3, #116]	; 0x74
  402560:	bf00      	nop
  402562:	3734      	adds	r7, #52	; 0x34
  402564:	46bd      	mov	sp, r7
  402566:	bc80      	pop	{r7}
  402568:	4770      	bx	lr

0040256a <ioport_set_pin_dir>:
{
  40256a:	b480      	push	{r7}
  40256c:	b08d      	sub	sp, #52	; 0x34
  40256e:	af00      	add	r7, sp, #0
  402570:	6078      	str	r0, [r7, #4]
  402572:	460b      	mov	r3, r1
  402574:	70fb      	strb	r3, [r7, #3]
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	62fb      	str	r3, [r7, #44]	; 0x2c
  40257a:	78fb      	ldrb	r3, [r7, #3]
  40257c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402582:	627b      	str	r3, [r7, #36]	; 0x24
  402584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402586:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402588:	6a3b      	ldr	r3, [r7, #32]
  40258a:	095b      	lsrs	r3, r3, #5
  40258c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40258e:	69fb      	ldr	r3, [r7, #28]
  402590:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402594:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402598:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40259a:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40259c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025a0:	2b01      	cmp	r3, #1
  4025a2:	d109      	bne.n	4025b8 <ioport_set_pin_dir+0x4e>
  4025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025a6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4025a8:	697b      	ldr	r3, [r7, #20]
  4025aa:	f003 031f 	and.w	r3, r3, #31
  4025ae:	2201      	movs	r2, #1
  4025b0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4025b2:	69bb      	ldr	r3, [r7, #24]
  4025b4:	611a      	str	r2, [r3, #16]
  4025b6:	e00c      	b.n	4025d2 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4025b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025bc:	2b00      	cmp	r3, #0
  4025be:	d108      	bne.n	4025d2 <ioport_set_pin_dir+0x68>
  4025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025c2:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4025c4:	693b      	ldr	r3, [r7, #16]
  4025c6:	f003 031f 	and.w	r3, r3, #31
  4025ca:	2201      	movs	r2, #1
  4025cc:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025ce:	69bb      	ldr	r3, [r7, #24]
  4025d0:	615a      	str	r2, [r3, #20]
  4025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025d4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4025d6:	68fb      	ldr	r3, [r7, #12]
  4025d8:	f003 031f 	and.w	r3, r3, #31
  4025dc:	2201      	movs	r2, #1
  4025de:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025e0:	69bb      	ldr	r3, [r7, #24]
  4025e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4025e6:	bf00      	nop
  4025e8:	3734      	adds	r7, #52	; 0x34
  4025ea:	46bd      	mov	sp, r7
  4025ec:	bc80      	pop	{r7}
  4025ee:	4770      	bx	lr

004025f0 <ioport_set_pin_level>:
{
  4025f0:	b480      	push	{r7}
  4025f2:	b08b      	sub	sp, #44	; 0x2c
  4025f4:	af00      	add	r7, sp, #0
  4025f6:	6078      	str	r0, [r7, #4]
  4025f8:	460b      	mov	r3, r1
  4025fa:	70fb      	strb	r3, [r7, #3]
  4025fc:	687b      	ldr	r3, [r7, #4]
  4025fe:	627b      	str	r3, [r7, #36]	; 0x24
  402600:	78fb      	ldrb	r3, [r7, #3]
  402602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402608:	61fb      	str	r3, [r7, #28]
  40260a:	69fb      	ldr	r3, [r7, #28]
  40260c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40260e:	69bb      	ldr	r3, [r7, #24]
  402610:	095b      	lsrs	r3, r3, #5
  402612:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402614:	697b      	ldr	r3, [r7, #20]
  402616:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40261a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40261e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402620:	613b      	str	r3, [r7, #16]
	if (level) {
  402622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402626:	2b00      	cmp	r3, #0
  402628:	d009      	beq.n	40263e <ioport_set_pin_level+0x4e>
  40262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40262c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40262e:	68fb      	ldr	r3, [r7, #12]
  402630:	f003 031f 	and.w	r3, r3, #31
  402634:	2201      	movs	r2, #1
  402636:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402638:	693b      	ldr	r3, [r7, #16]
  40263a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40263c:	e008      	b.n	402650 <ioport_set_pin_level+0x60>
  40263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402640:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402642:	68bb      	ldr	r3, [r7, #8]
  402644:	f003 031f 	and.w	r3, r3, #31
  402648:	2201      	movs	r2, #1
  40264a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40264c:	693b      	ldr	r3, [r7, #16]
  40264e:	635a      	str	r2, [r3, #52]	; 0x34
  402650:	bf00      	nop
  402652:	372c      	adds	r7, #44	; 0x2c
  402654:	46bd      	mov	sp, r7
  402656:	bc80      	pop	{r7}
  402658:	4770      	bx	lr
	...

0040265c <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  40265c:	b580      	push	{r7, lr}
  40265e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  402660:	484b      	ldr	r0, [pc, #300]	; (402790 <board_init+0x134>)
  402662:	4b4c      	ldr	r3, [pc, #304]	; (402794 <board_init+0x138>)
  402664:	4798      	blx	r3
	
	ioport_init();
  402666:	4b4c      	ldr	r3, [pc, #304]	; (402798 <board_init+0x13c>)
  402668:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  40266a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40266e:	2009      	movs	r0, #9
  402670:	4b4a      	ldr	r3, [pc, #296]	; (40279c <board_init+0x140>)
  402672:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  402674:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402678:	2009      	movs	r0, #9
  40267a:	4b48      	ldr	r3, [pc, #288]	; (40279c <board_init+0x140>)
  40267c:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  40267e:	2101      	movs	r1, #1
  402680:	2009      	movs	r0, #9
  402682:	4b47      	ldr	r3, [pc, #284]	; (4027a0 <board_init+0x144>)
  402684:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  402686:	2100      	movs	r1, #0
  402688:	2009      	movs	r0, #9
  40268a:	4b46      	ldr	r3, [pc, #280]	; (4027a4 <board_init+0x148>)
  40268c:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  40268e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402692:	2007      	movs	r0, #7
  402694:	4b41      	ldr	r3, [pc, #260]	; (40279c <board_init+0x140>)
  402696:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  402698:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40269c:	2007      	movs	r0, #7
  40269e:	4b3f      	ldr	r3, [pc, #252]	; (40279c <board_init+0x140>)
  4026a0:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  4026a2:	2101      	movs	r1, #1
  4026a4:	2007      	movs	r0, #7
  4026a6:	4b3e      	ldr	r3, [pc, #248]	; (4027a0 <board_init+0x144>)
  4026a8:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  4026aa:	2100      	movs	r1, #0
  4026ac:	2007      	movs	r0, #7
  4026ae:	4b3d      	ldr	r3, [pc, #244]	; (4027a4 <board_init+0x148>)
  4026b0:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  4026b2:	493d      	ldr	r1, [pc, #244]	; (4027a8 <board_init+0x14c>)
  4026b4:	2021      	movs	r0, #33	; 0x21
  4026b6:	4b39      	ldr	r3, [pc, #228]	; (40279c <board_init+0x140>)
  4026b8:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  4026ba:	2100      	movs	r1, #0
  4026bc:	2021      	movs	r0, #33	; 0x21
  4026be:	4b38      	ldr	r3, [pc, #224]	; (4027a0 <board_init+0x144>)
  4026c0:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  4026c2:	2108      	movs	r1, #8
  4026c4:	2021      	movs	r0, #33	; 0x21
  4026c6:	4b39      	ldr	r3, [pc, #228]	; (4027ac <board_init+0x150>)
  4026c8:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4026ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026ce:	2005      	movs	r0, #5
  4026d0:	4b32      	ldr	r3, [pc, #200]	; (40279c <board_init+0x140>)
  4026d2:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4026d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026d8:	2006      	movs	r0, #6
  4026da:	4b30      	ldr	r3, [pc, #192]	; (40279c <board_init+0x140>)
  4026dc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  4026de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026e2:	2008      	movs	r0, #8
  4026e4:	4b2d      	ldr	r3, [pc, #180]	; (40279c <board_init+0x140>)
  4026e6:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  4026e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4026ec:	2011      	movs	r0, #17
  4026ee:	4b2b      	ldr	r3, [pc, #172]	; (40279c <board_init+0x140>)
  4026f0:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4026f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026f6:	2003      	movs	r0, #3
  4026f8:	4b28      	ldr	r3, [pc, #160]	; (40279c <board_init+0x140>)
  4026fa:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4026fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402700:	2004      	movs	r0, #4
  402702:	4b26      	ldr	r3, [pc, #152]	; (40279c <board_init+0x140>)
  402704:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  402706:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40270a:	200a      	movs	r0, #10
  40270c:	4b23      	ldr	r3, [pc, #140]	; (40279c <board_init+0x140>)
  40270e:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402710:	2101      	movs	r1, #1
  402712:	200a      	movs	r0, #10
  402714:	4b22      	ldr	r3, [pc, #136]	; (4027a0 <board_init+0x144>)
  402716:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  402718:	2100      	movs	r1, #0
  40271a:	200a      	movs	r0, #10
  40271c:	4b21      	ldr	r3, [pc, #132]	; (4027a4 <board_init+0x148>)
  40271e:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  402720:	2171      	movs	r1, #113	; 0x71
  402722:	2010      	movs	r0, #16
  402724:	4b1d      	ldr	r3, [pc, #116]	; (40279c <board_init+0x140>)
  402726:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  402728:	2171      	movs	r1, #113	; 0x71
  40272a:	200f      	movs	r0, #15
  40272c:	4b1b      	ldr	r3, [pc, #108]	; (40279c <board_init+0x140>)
  40272e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  402730:	491f      	ldr	r1, [pc, #124]	; (4027b0 <board_init+0x154>)
  402732:	2018      	movs	r0, #24
  402734:	4b19      	ldr	r3, [pc, #100]	; (40279c <board_init+0x140>)
  402736:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  402738:	491d      	ldr	r1, [pc, #116]	; (4027b0 <board_init+0x154>)
  40273a:	2019      	movs	r0, #25
  40273c:	4b17      	ldr	r3, [pc, #92]	; (40279c <board_init+0x140>)
  40273e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  402740:	491b      	ldr	r1, [pc, #108]	; (4027b0 <board_init+0x154>)
  402742:	201a      	movs	r0, #26
  402744:	4b15      	ldr	r3, [pc, #84]	; (40279c <board_init+0x140>)
  402746:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  402748:	4919      	ldr	r1, [pc, #100]	; (4027b0 <board_init+0x154>)
  40274a:	201b      	movs	r0, #27
  40274c:	4b13      	ldr	r3, [pc, #76]	; (40279c <board_init+0x140>)
  40274e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  402750:	4917      	ldr	r1, [pc, #92]	; (4027b0 <board_init+0x154>)
  402752:	201c      	movs	r0, #28
  402754:	4b11      	ldr	r3, [pc, #68]	; (40279c <board_init+0x140>)
  402756:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  402758:	4915      	ldr	r1, [pc, #84]	; (4027b0 <board_init+0x154>)
  40275a:	201d      	movs	r0, #29
  40275c:	4b0f      	ldr	r3, [pc, #60]	; (40279c <board_init+0x140>)
  40275e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  402760:	4913      	ldr	r1, [pc, #76]	; (4027b0 <board_init+0x154>)
  402762:	201e      	movs	r0, #30
  402764:	4b0d      	ldr	r3, [pc, #52]	; (40279c <board_init+0x140>)
  402766:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  402768:	4911      	ldr	r1, [pc, #68]	; (4027b0 <board_init+0x154>)
  40276a:	201f      	movs	r0, #31
  40276c:	4b0b      	ldr	r3, [pc, #44]	; (40279c <board_init+0x140>)
  40276e:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  402770:	2171      	movs	r1, #113	; 0x71
  402772:	2012      	movs	r0, #18
  402774:	4b09      	ldr	r3, [pc, #36]	; (40279c <board_init+0x140>)
  402776:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  402778:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40277c:	2013      	movs	r0, #19
  40277e:	4b07      	ldr	r3, [pc, #28]	; (40279c <board_init+0x140>)
  402780:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  402782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402786:	2014      	movs	r0, #20
  402788:	4b04      	ldr	r3, [pc, #16]	; (40279c <board_init+0x140>)
  40278a:	4798      	blx	r3
}
  40278c:	bf00      	nop
  40278e:	bd80      	pop	{r7, pc}
  402790:	400e1450 	.word	0x400e1450
  402794:	00400567 	.word	0x00400567
  402798:	00402439 	.word	0x00402439
  40279c:	00401f7d 	.word	0x00401f7d
  4027a0:	0040256b 	.word	0x0040256b
  4027a4:	004025f1 	.word	0x004025f1
  4027a8:	28000079 	.word	0x28000079
  4027ac:	00402451 	.word	0x00402451
  4027b0:	28000001 	.word	0x28000001

004027b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4027b4:	b580      	push	{r7, lr}
  4027b6:	b084      	sub	sp, #16
  4027b8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4027ba:	4b27      	ldr	r3, [pc, #156]	; (402858 <Reset_Handler+0xa4>)
  4027bc:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4027be:	4b27      	ldr	r3, [pc, #156]	; (40285c <Reset_Handler+0xa8>)
  4027c0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4027c2:	68fa      	ldr	r2, [r7, #12]
  4027c4:	68bb      	ldr	r3, [r7, #8]
  4027c6:	429a      	cmp	r2, r3
  4027c8:	d90d      	bls.n	4027e6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4027ca:	e007      	b.n	4027dc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4027cc:	68bb      	ldr	r3, [r7, #8]
  4027ce:	1d1a      	adds	r2, r3, #4
  4027d0:	60ba      	str	r2, [r7, #8]
  4027d2:	68fa      	ldr	r2, [r7, #12]
  4027d4:	1d11      	adds	r1, r2, #4
  4027d6:	60f9      	str	r1, [r7, #12]
  4027d8:	6812      	ldr	r2, [r2, #0]
  4027da:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4027dc:	68bb      	ldr	r3, [r7, #8]
  4027de:	4a20      	ldr	r2, [pc, #128]	; (402860 <Reset_Handler+0xac>)
  4027e0:	4293      	cmp	r3, r2
  4027e2:	d3f3      	bcc.n	4027cc <Reset_Handler+0x18>
  4027e4:	e020      	b.n	402828 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4027e6:	68fa      	ldr	r2, [r7, #12]
  4027e8:	68bb      	ldr	r3, [r7, #8]
  4027ea:	429a      	cmp	r2, r3
  4027ec:	d21c      	bcs.n	402828 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4027ee:	4a1c      	ldr	r2, [pc, #112]	; (402860 <Reset_Handler+0xac>)
  4027f0:	4b1a      	ldr	r3, [pc, #104]	; (40285c <Reset_Handler+0xa8>)
  4027f2:	1ad3      	subs	r3, r2, r3
  4027f4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4027f6:	68fa      	ldr	r2, [r7, #12]
  4027f8:	687b      	ldr	r3, [r7, #4]
  4027fa:	4413      	add	r3, r2
  4027fc:	3b04      	subs	r3, #4
  4027fe:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402800:	68ba      	ldr	r2, [r7, #8]
  402802:	687b      	ldr	r3, [r7, #4]
  402804:	4413      	add	r3, r2
  402806:	3b04      	subs	r3, #4
  402808:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40280a:	e00a      	b.n	402822 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40280c:	68bb      	ldr	r3, [r7, #8]
  40280e:	1f1a      	subs	r2, r3, #4
  402810:	60ba      	str	r2, [r7, #8]
  402812:	68fa      	ldr	r2, [r7, #12]
  402814:	1f11      	subs	r1, r2, #4
  402816:	60f9      	str	r1, [r7, #12]
  402818:	6812      	ldr	r2, [r2, #0]
  40281a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40281c:	687b      	ldr	r3, [r7, #4]
  40281e:	3b04      	subs	r3, #4
  402820:	607b      	str	r3, [r7, #4]
  402822:	687b      	ldr	r3, [r7, #4]
  402824:	2b00      	cmp	r3, #0
  402826:	d1f1      	bne.n	40280c <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402828:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40282a:	4b0e      	ldr	r3, [pc, #56]	; (402864 <Reset_Handler+0xb0>)
  40282c:	60bb      	str	r3, [r7, #8]
  40282e:	e004      	b.n	40283a <Reset_Handler+0x86>
		*pDest++ = 0;
  402830:	68bb      	ldr	r3, [r7, #8]
  402832:	1d1a      	adds	r2, r3, #4
  402834:	60ba      	str	r2, [r7, #8]
  402836:	2200      	movs	r2, #0
  402838:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40283a:	68bb      	ldr	r3, [r7, #8]
  40283c:	4a0a      	ldr	r2, [pc, #40]	; (402868 <Reset_Handler+0xb4>)
  40283e:	4293      	cmp	r3, r2
  402840:	d3f6      	bcc.n	402830 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402842:	4b0a      	ldr	r3, [pc, #40]	; (40286c <Reset_Handler+0xb8>)
  402844:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402846:	4a0a      	ldr	r2, [pc, #40]	; (402870 <Reset_Handler+0xbc>)
  402848:	68fb      	ldr	r3, [r7, #12]
  40284a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40284c:	4b09      	ldr	r3, [pc, #36]	; (402874 <Reset_Handler+0xc0>)
  40284e:	4798      	blx	r3

	/* Branch to main function */
	main();
  402850:	4b09      	ldr	r3, [pc, #36]	; (402878 <Reset_Handler+0xc4>)
  402852:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402854:	e7fe      	b.n	402854 <Reset_Handler+0xa0>
  402856:	bf00      	nop
  402858:	00407ef4 	.word	0x00407ef4
  40285c:	20000000 	.word	0x20000000
  402860:	200009bc 	.word	0x200009bc
  402864:	200009bc 	.word	0x200009bc
  402868:	200089ac 	.word	0x200089ac
  40286c:	00400000 	.word	0x00400000
  402870:	e000ed00 	.word	0xe000ed00
  402874:	00402e8d 	.word	0x00402e8d
  402878:	00402b09 	.word	0x00402b09

0040287c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40287c:	b480      	push	{r7}
  40287e:	af00      	add	r7, sp, #0
	while (1) {
  402880:	e7fe      	b.n	402880 <Dummy_Handler+0x4>
	...

00402884 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402884:	b480      	push	{r7}
  402886:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402888:	4b5d      	ldr	r3, [pc, #372]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  40288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40288c:	f003 0303 	and.w	r3, r3, #3
  402890:	2b03      	cmp	r3, #3
  402892:	f200 8096 	bhi.w	4029c2 <SystemCoreClockUpdate+0x13e>
  402896:	a201      	add	r2, pc, #4	; (adr r2, 40289c <SystemCoreClockUpdate+0x18>)
  402898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40289c:	004028ad 	.word	0x004028ad
  4028a0:	004028cd 	.word	0x004028cd
  4028a4:	00402917 	.word	0x00402917
  4028a8:	00402917 	.word	0x00402917
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4028ac:	4b55      	ldr	r3, [pc, #340]	; (402a04 <SystemCoreClockUpdate+0x180>)
  4028ae:	695b      	ldr	r3, [r3, #20]
  4028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028b4:	2b00      	cmp	r3, #0
  4028b6:	d004      	beq.n	4028c2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028b8:	4b53      	ldr	r3, [pc, #332]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4028be:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4028c0:	e080      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028c2:	4b51      	ldr	r3, [pc, #324]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028c4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4028c8:	601a      	str	r2, [r3, #0]
		break;
  4028ca:	e07b      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028cc:	4b4c      	ldr	r3, [pc, #304]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4028ce:	6a1b      	ldr	r3, [r3, #32]
  4028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d003      	beq.n	4028e0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4028d8:	4b4b      	ldr	r3, [pc, #300]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028da:	4a4c      	ldr	r2, [pc, #304]	; (402a0c <SystemCoreClockUpdate+0x188>)
  4028dc:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4028de:	e071      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028e0:	4b49      	ldr	r3, [pc, #292]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028e2:	4a4b      	ldr	r2, [pc, #300]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  4028e4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028e6:	4b46      	ldr	r3, [pc, #280]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4028e8:	6a1b      	ldr	r3, [r3, #32]
  4028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028ee:	2b10      	cmp	r3, #16
  4028f0:	d008      	beq.n	402904 <SystemCoreClockUpdate+0x80>
  4028f2:	2b20      	cmp	r3, #32
  4028f4:	d00a      	beq.n	40290c <SystemCoreClockUpdate+0x88>
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d000      	beq.n	4028fc <SystemCoreClockUpdate+0x78>
			break;
  4028fa:	e00b      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028fc:	4b42      	ldr	r3, [pc, #264]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028fe:	4a44      	ldr	r2, [pc, #272]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  402900:	601a      	str	r2, [r3, #0]
			break;
  402902:	e007      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402904:	4b40      	ldr	r3, [pc, #256]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402906:	4a43      	ldr	r2, [pc, #268]	; (402a14 <SystemCoreClockUpdate+0x190>)
  402908:	601a      	str	r2, [r3, #0]
			break;
  40290a:	e003      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40290c:	4b3e      	ldr	r3, [pc, #248]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40290e:	4a3f      	ldr	r2, [pc, #252]	; (402a0c <SystemCoreClockUpdate+0x188>)
  402910:	601a      	str	r2, [r3, #0]
			break;
  402912:	bf00      	nop
		break;
  402914:	e056      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402916:	4b3a      	ldr	r3, [pc, #232]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402918:	6a1b      	ldr	r3, [r3, #32]
  40291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40291e:	2b00      	cmp	r3, #0
  402920:	d003      	beq.n	40292a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402922:	4b39      	ldr	r3, [pc, #228]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402924:	4a39      	ldr	r2, [pc, #228]	; (402a0c <SystemCoreClockUpdate+0x188>)
  402926:	601a      	str	r2, [r3, #0]
  402928:	e019      	b.n	40295e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40292a:	4b37      	ldr	r3, [pc, #220]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40292c:	4a38      	ldr	r2, [pc, #224]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  40292e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402930:	4b33      	ldr	r3, [pc, #204]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402932:	6a1b      	ldr	r3, [r3, #32]
  402934:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402938:	2b10      	cmp	r3, #16
  40293a:	d008      	beq.n	40294e <SystemCoreClockUpdate+0xca>
  40293c:	2b20      	cmp	r3, #32
  40293e:	d00a      	beq.n	402956 <SystemCoreClockUpdate+0xd2>
  402940:	2b00      	cmp	r3, #0
  402942:	d000      	beq.n	402946 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402944:	e00b      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402946:	4b30      	ldr	r3, [pc, #192]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402948:	4a31      	ldr	r2, [pc, #196]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  40294a:	601a      	str	r2, [r3, #0]
					break;
  40294c:	e007      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40294e:	4b2e      	ldr	r3, [pc, #184]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402950:	4a30      	ldr	r2, [pc, #192]	; (402a14 <SystemCoreClockUpdate+0x190>)
  402952:	601a      	str	r2, [r3, #0]
					break;
  402954:	e003      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402956:	4b2c      	ldr	r3, [pc, #176]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402958:	4a2c      	ldr	r2, [pc, #176]	; (402a0c <SystemCoreClockUpdate+0x188>)
  40295a:	601a      	str	r2, [r3, #0]
					break;
  40295c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40295e:	4b28      	ldr	r3, [pc, #160]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402962:	f003 0303 	and.w	r3, r3, #3
  402966:	2b02      	cmp	r3, #2
  402968:	d115      	bne.n	402996 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40296a:	4b25      	ldr	r3, [pc, #148]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  40296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40296e:	0c1b      	lsrs	r3, r3, #16
  402970:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402974:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402976:	4a24      	ldr	r2, [pc, #144]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402978:	6812      	ldr	r2, [r2, #0]
  40297a:	fb02 f303 	mul.w	r3, r2, r3
  40297e:	4a22      	ldr	r2, [pc, #136]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402980:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402982:	4b1f      	ldr	r3, [pc, #124]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402986:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402988:	4a1f      	ldr	r2, [pc, #124]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40298a:	6812      	ldr	r2, [r2, #0]
  40298c:	fbb2 f3f3 	udiv	r3, r2, r3
  402990:	4a1d      	ldr	r2, [pc, #116]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402992:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402994:	e016      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402996:	4b1a      	ldr	r3, [pc, #104]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40299a:	0c1b      	lsrs	r3, r3, #16
  40299c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4029a0:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4029a2:	4a19      	ldr	r2, [pc, #100]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029a4:	6812      	ldr	r2, [r2, #0]
  4029a6:	fb02 f303 	mul.w	r3, r2, r3
  4029aa:	4a17      	ldr	r2, [pc, #92]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029ac:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029ae:	4b14      	ldr	r3, [pc, #80]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4029b2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029b4:	4a14      	ldr	r2, [pc, #80]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029b6:	6812      	ldr	r2, [r2, #0]
  4029b8:	fbb2 f3f3 	udiv	r3, r2, r3
  4029bc:	4a12      	ldr	r2, [pc, #72]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029be:	6013      	str	r3, [r2, #0]
		break;
  4029c0:	e000      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4029c2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4029c4:	4b0e      	ldr	r3, [pc, #56]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029cc:	2b70      	cmp	r3, #112	; 0x70
  4029ce:	d108      	bne.n	4029e2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4029d0:	4b0d      	ldr	r3, [pc, #52]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029d2:	681b      	ldr	r3, [r3, #0]
  4029d4:	4a10      	ldr	r2, [pc, #64]	; (402a18 <SystemCoreClockUpdate+0x194>)
  4029d6:	fba2 2303 	umull	r2, r3, r2, r3
  4029da:	085b      	lsrs	r3, r3, #1
  4029dc:	4a0a      	ldr	r2, [pc, #40]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029de:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4029e0:	e00a      	b.n	4029f8 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4029e2:	4b07      	ldr	r3, [pc, #28]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029e6:	091b      	lsrs	r3, r3, #4
  4029e8:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4029ec:	4a06      	ldr	r2, [pc, #24]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029ee:	6812      	ldr	r2, [r2, #0]
  4029f0:	fa22 f303 	lsr.w	r3, r2, r3
  4029f4:	4a04      	ldr	r2, [pc, #16]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029f6:	6013      	str	r3, [r2, #0]
}
  4029f8:	bf00      	nop
  4029fa:	46bd      	mov	sp, r7
  4029fc:	bc80      	pop	{r7}
  4029fe:	4770      	bx	lr
  402a00:	400e0400 	.word	0x400e0400
  402a04:	400e1410 	.word	0x400e1410
  402a08:	2000000c 	.word	0x2000000c
  402a0c:	00b71b00 	.word	0x00b71b00
  402a10:	003d0900 	.word	0x003d0900
  402a14:	007a1200 	.word	0x007a1200
  402a18:	aaaaaaab 	.word	0xaaaaaaab

00402a1c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402a1c:	b480      	push	{r7}
  402a1e:	b083      	sub	sp, #12
  402a20:	af00      	add	r7, sp, #0
  402a22:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402a24:	687b      	ldr	r3, [r7, #4]
  402a26:	4a18      	ldr	r2, [pc, #96]	; (402a88 <system_init_flash+0x6c>)
  402a28:	4293      	cmp	r3, r2
  402a2a:	d804      	bhi.n	402a36 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a2c:	4b17      	ldr	r3, [pc, #92]	; (402a8c <system_init_flash+0x70>)
  402a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a32:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402a34:	e023      	b.n	402a7e <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402a36:	687b      	ldr	r3, [r7, #4]
  402a38:	4a15      	ldr	r2, [pc, #84]	; (402a90 <system_init_flash+0x74>)
  402a3a:	4293      	cmp	r3, r2
  402a3c:	d803      	bhi.n	402a46 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a3e:	4b13      	ldr	r3, [pc, #76]	; (402a8c <system_init_flash+0x70>)
  402a40:	4a14      	ldr	r2, [pc, #80]	; (402a94 <system_init_flash+0x78>)
  402a42:	601a      	str	r2, [r3, #0]
}
  402a44:	e01b      	b.n	402a7e <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402a46:	687b      	ldr	r3, [r7, #4]
  402a48:	4a13      	ldr	r2, [pc, #76]	; (402a98 <system_init_flash+0x7c>)
  402a4a:	4293      	cmp	r3, r2
  402a4c:	d803      	bhi.n	402a56 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a4e:	4b0f      	ldr	r3, [pc, #60]	; (402a8c <system_init_flash+0x70>)
  402a50:	4a12      	ldr	r2, [pc, #72]	; (402a9c <system_init_flash+0x80>)
  402a52:	601a      	str	r2, [r3, #0]
}
  402a54:	e013      	b.n	402a7e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402a56:	687b      	ldr	r3, [r7, #4]
  402a58:	4a11      	ldr	r2, [pc, #68]	; (402aa0 <system_init_flash+0x84>)
  402a5a:	4293      	cmp	r3, r2
  402a5c:	d803      	bhi.n	402a66 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a5e:	4b0b      	ldr	r3, [pc, #44]	; (402a8c <system_init_flash+0x70>)
  402a60:	4a10      	ldr	r2, [pc, #64]	; (402aa4 <system_init_flash+0x88>)
  402a62:	601a      	str	r2, [r3, #0]
}
  402a64:	e00b      	b.n	402a7e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	4a0f      	ldr	r2, [pc, #60]	; (402aa8 <system_init_flash+0x8c>)
  402a6a:	4293      	cmp	r3, r2
  402a6c:	d804      	bhi.n	402a78 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a6e:	4b07      	ldr	r3, [pc, #28]	; (402a8c <system_init_flash+0x70>)
  402a70:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402a74:	601a      	str	r2, [r3, #0]
}
  402a76:	e002      	b.n	402a7e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a78:	4b04      	ldr	r3, [pc, #16]	; (402a8c <system_init_flash+0x70>)
  402a7a:	4a0c      	ldr	r2, [pc, #48]	; (402aac <system_init_flash+0x90>)
  402a7c:	601a      	str	r2, [r3, #0]
}
  402a7e:	bf00      	nop
  402a80:	370c      	adds	r7, #12
  402a82:	46bd      	mov	sp, r7
  402a84:	bc80      	pop	{r7}
  402a86:	4770      	bx	lr
  402a88:	01312cff 	.word	0x01312cff
  402a8c:	400e0a00 	.word	0x400e0a00
  402a90:	026259ff 	.word	0x026259ff
  402a94:	04000100 	.word	0x04000100
  402a98:	039386ff 	.word	0x039386ff
  402a9c:	04000200 	.word	0x04000200
  402aa0:	04c4b3ff 	.word	0x04c4b3ff
  402aa4:	04000300 	.word	0x04000300
  402aa8:	05f5e0ff 	.word	0x05f5e0ff
  402aac:	04000500 	.word	0x04000500

00402ab0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402ab0:	b480      	push	{r7}
  402ab2:	b085      	sub	sp, #20
  402ab4:	af00      	add	r7, sp, #0
  402ab6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402ab8:	4b10      	ldr	r3, [pc, #64]	; (402afc <_sbrk+0x4c>)
  402aba:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402abc:	4b10      	ldr	r3, [pc, #64]	; (402b00 <_sbrk+0x50>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d102      	bne.n	402aca <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402ac4:	4b0e      	ldr	r3, [pc, #56]	; (402b00 <_sbrk+0x50>)
  402ac6:	4a0f      	ldr	r2, [pc, #60]	; (402b04 <_sbrk+0x54>)
  402ac8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402aca:	4b0d      	ldr	r3, [pc, #52]	; (402b00 <_sbrk+0x50>)
  402acc:	681b      	ldr	r3, [r3, #0]
  402ace:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402ad0:	68ba      	ldr	r2, [r7, #8]
  402ad2:	687b      	ldr	r3, [r7, #4]
  402ad4:	441a      	add	r2, r3
  402ad6:	68fb      	ldr	r3, [r7, #12]
  402ad8:	429a      	cmp	r2, r3
  402ada:	dd02      	ble.n	402ae2 <_sbrk+0x32>
		return (caddr_t) -1;	
  402adc:	f04f 33ff 	mov.w	r3, #4294967295
  402ae0:	e006      	b.n	402af0 <_sbrk+0x40>
	}

	heap += incr;
  402ae2:	4b07      	ldr	r3, [pc, #28]	; (402b00 <_sbrk+0x50>)
  402ae4:	681a      	ldr	r2, [r3, #0]
  402ae6:	687b      	ldr	r3, [r7, #4]
  402ae8:	4413      	add	r3, r2
  402aea:	4a05      	ldr	r2, [pc, #20]	; (402b00 <_sbrk+0x50>)
  402aec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402aee:	68bb      	ldr	r3, [r7, #8]
}
  402af0:	4618      	mov	r0, r3
  402af2:	3714      	adds	r7, #20
  402af4:	46bd      	mov	sp, r7
  402af6:	bc80      	pop	{r7}
  402af8:	4770      	bx	lr
  402afa:	bf00      	nop
  402afc:	2001fffc 	.word	0x2001fffc
  402b00:	20008968 	.word	0x20008968
  402b04:	2000b9b0 	.word	0x2000b9b0

00402b08 <main>:
		}
	}
}

int main (void)
{
  402b08:	b580      	push	{r7, lr}
  402b0a:	b082      	sub	sp, #8
  402b0c:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  402b0e:	4b0f      	ldr	r3, [pc, #60]	; (402b4c <main+0x44>)
  402b10:	4798      	blx	r3
	board_init();
  402b12:	4b0f      	ldr	r3, [pc, #60]	; (402b50 <main+0x48>)
  402b14:	4798      	blx	r3
	configure_tc();
  402b16:	4b0f      	ldr	r3, [pc, #60]	; (402b54 <main+0x4c>)
  402b18:	4798      	blx	r3
	tc_start(TC0, 0);
  402b1a:	2100      	movs	r1, #0
  402b1c:	480e      	ldr	r0, [pc, #56]	; (402b58 <main+0x50>)
  402b1e:	4b0f      	ldr	r3, [pc, #60]	; (402b5c <main+0x54>)
  402b20:	4798      	blx	r3
	
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi module
  402b22:	4b0f      	ldr	r3, [pc, #60]	; (402b60 <main+0x58>)
  402b24:	4798      	blx	r3
	//configure_camera();		// configures and initializes camera module
	reboot_wifi();			// reboots the wifi chip (takes several seconds)
  402b26:	4b0f      	ldr	r3, [pc, #60]	; (402b64 <main+0x5c>)
  402b28:	4798      	blx	r3
	
	configure_i2s(); // microphone configuration
  402b2a:	4b0f      	ldr	r3, [pc, #60]	; (402b68 <main+0x60>)
  402b2c:	4798      	blx	r3
	
	uint8_t handle = open_websocket();
  402b2e:	4b0f      	ldr	r3, [pc, #60]	; (402b6c <main+0x64>)
  402b30:	4798      	blx	r3
  402b32:	4603      	mov	r3, r0
  402b34:	71fb      	strb	r3, [r7, #7]
	while(1) {
		//if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
		//	setup_wifi();		// the wifi chip tries to reassociate to a new network
		//}
		
		i2s_capture();
  402b36:	4b0e      	ldr	r3, [pc, #56]	; (402b70 <main+0x68>)
  402b38:	4798      	blx	r3
		//post_audio_usart((uint8_t *) i2s_rec_buf, 2000);
		send_data_ws(i2s_rec_buf, AUDIO_BUFFER_SIZE * 2, handle);
  402b3a:	79fb      	ldrb	r3, [r7, #7]
  402b3c:	461a      	mov	r2, r3
  402b3e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  402b42:	480c      	ldr	r0, [pc, #48]	; (402b74 <main+0x6c>)
  402b44:	4b0c      	ldr	r3, [pc, #48]	; (402b78 <main+0x70>)
  402b46:	4798      	blx	r3
		i2s_capture();
  402b48:	e7f5      	b.n	402b36 <main+0x2e>
  402b4a:	bf00      	nop
  402b4c:	00401bed 	.word	0x00401bed
  402b50:	0040265d 	.word	0x0040265d
  402b54:	00400e75 	.word	0x00400e75
  402b58:	40010000 	.word	0x40010000
  402b5c:	00400437 	.word	0x00400437
  402b60:	004017cd 	.word	0x004017cd
  402b64:	004017fd 	.word	0x004017fd
  402b68:	004007d5 	.word	0x004007d5
  402b6c:	004013c1 	.word	0x004013c1
  402b70:	00400711 	.word	0x00400711
  402b74:	200009d8 	.word	0x200009d8
  402b78:	004014ad 	.word	0x004014ad

00402b7c <__aeabi_uldivmod>:
  402b7c:	b953      	cbnz	r3, 402b94 <__aeabi_uldivmod+0x18>
  402b7e:	b94a      	cbnz	r2, 402b94 <__aeabi_uldivmod+0x18>
  402b80:	2900      	cmp	r1, #0
  402b82:	bf08      	it	eq
  402b84:	2800      	cmpeq	r0, #0
  402b86:	bf1c      	itt	ne
  402b88:	f04f 31ff 	movne.w	r1, #4294967295
  402b8c:	f04f 30ff 	movne.w	r0, #4294967295
  402b90:	f000 b97a 	b.w	402e88 <__aeabi_idiv0>
  402b94:	f1ad 0c08 	sub.w	ip, sp, #8
  402b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402b9c:	f000 f806 	bl	402bac <__udivmoddi4>
  402ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
  402ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402ba8:	b004      	add	sp, #16
  402baa:	4770      	bx	lr

00402bac <__udivmoddi4>:
  402bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bb0:	468c      	mov	ip, r1
  402bb2:	460d      	mov	r5, r1
  402bb4:	4604      	mov	r4, r0
  402bb6:	9e08      	ldr	r6, [sp, #32]
  402bb8:	2b00      	cmp	r3, #0
  402bba:	d151      	bne.n	402c60 <__udivmoddi4+0xb4>
  402bbc:	428a      	cmp	r2, r1
  402bbe:	4617      	mov	r7, r2
  402bc0:	d96d      	bls.n	402c9e <__udivmoddi4+0xf2>
  402bc2:	fab2 fe82 	clz	lr, r2
  402bc6:	f1be 0f00 	cmp.w	lr, #0
  402bca:	d00b      	beq.n	402be4 <__udivmoddi4+0x38>
  402bcc:	f1ce 0c20 	rsb	ip, lr, #32
  402bd0:	fa01 f50e 	lsl.w	r5, r1, lr
  402bd4:	fa20 fc0c 	lsr.w	ip, r0, ip
  402bd8:	fa02 f70e 	lsl.w	r7, r2, lr
  402bdc:	ea4c 0c05 	orr.w	ip, ip, r5
  402be0:	fa00 f40e 	lsl.w	r4, r0, lr
  402be4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402be8:	0c25      	lsrs	r5, r4, #16
  402bea:	fbbc f8fa 	udiv	r8, ip, sl
  402bee:	fa1f f987 	uxth.w	r9, r7
  402bf2:	fb0a cc18 	mls	ip, sl, r8, ip
  402bf6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402bfa:	fb08 f309 	mul.w	r3, r8, r9
  402bfe:	42ab      	cmp	r3, r5
  402c00:	d90a      	bls.n	402c18 <__udivmoddi4+0x6c>
  402c02:	19ed      	adds	r5, r5, r7
  402c04:	f108 32ff 	add.w	r2, r8, #4294967295
  402c08:	f080 8123 	bcs.w	402e52 <__udivmoddi4+0x2a6>
  402c0c:	42ab      	cmp	r3, r5
  402c0e:	f240 8120 	bls.w	402e52 <__udivmoddi4+0x2a6>
  402c12:	f1a8 0802 	sub.w	r8, r8, #2
  402c16:	443d      	add	r5, r7
  402c18:	1aed      	subs	r5, r5, r3
  402c1a:	b2a4      	uxth	r4, r4
  402c1c:	fbb5 f0fa 	udiv	r0, r5, sl
  402c20:	fb0a 5510 	mls	r5, sl, r0, r5
  402c24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402c28:	fb00 f909 	mul.w	r9, r0, r9
  402c2c:	45a1      	cmp	r9, r4
  402c2e:	d909      	bls.n	402c44 <__udivmoddi4+0x98>
  402c30:	19e4      	adds	r4, r4, r7
  402c32:	f100 33ff 	add.w	r3, r0, #4294967295
  402c36:	f080 810a 	bcs.w	402e4e <__udivmoddi4+0x2a2>
  402c3a:	45a1      	cmp	r9, r4
  402c3c:	f240 8107 	bls.w	402e4e <__udivmoddi4+0x2a2>
  402c40:	3802      	subs	r0, #2
  402c42:	443c      	add	r4, r7
  402c44:	eba4 0409 	sub.w	r4, r4, r9
  402c48:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402c4c:	2100      	movs	r1, #0
  402c4e:	2e00      	cmp	r6, #0
  402c50:	d061      	beq.n	402d16 <__udivmoddi4+0x16a>
  402c52:	fa24 f40e 	lsr.w	r4, r4, lr
  402c56:	2300      	movs	r3, #0
  402c58:	6034      	str	r4, [r6, #0]
  402c5a:	6073      	str	r3, [r6, #4]
  402c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c60:	428b      	cmp	r3, r1
  402c62:	d907      	bls.n	402c74 <__udivmoddi4+0xc8>
  402c64:	2e00      	cmp	r6, #0
  402c66:	d054      	beq.n	402d12 <__udivmoddi4+0x166>
  402c68:	2100      	movs	r1, #0
  402c6a:	e886 0021 	stmia.w	r6, {r0, r5}
  402c6e:	4608      	mov	r0, r1
  402c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c74:	fab3 f183 	clz	r1, r3
  402c78:	2900      	cmp	r1, #0
  402c7a:	f040 808e 	bne.w	402d9a <__udivmoddi4+0x1ee>
  402c7e:	42ab      	cmp	r3, r5
  402c80:	d302      	bcc.n	402c88 <__udivmoddi4+0xdc>
  402c82:	4282      	cmp	r2, r0
  402c84:	f200 80fa 	bhi.w	402e7c <__udivmoddi4+0x2d0>
  402c88:	1a84      	subs	r4, r0, r2
  402c8a:	eb65 0503 	sbc.w	r5, r5, r3
  402c8e:	2001      	movs	r0, #1
  402c90:	46ac      	mov	ip, r5
  402c92:	2e00      	cmp	r6, #0
  402c94:	d03f      	beq.n	402d16 <__udivmoddi4+0x16a>
  402c96:	e886 1010 	stmia.w	r6, {r4, ip}
  402c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c9e:	b912      	cbnz	r2, 402ca6 <__udivmoddi4+0xfa>
  402ca0:	2701      	movs	r7, #1
  402ca2:	fbb7 f7f2 	udiv	r7, r7, r2
  402ca6:	fab7 fe87 	clz	lr, r7
  402caa:	f1be 0f00 	cmp.w	lr, #0
  402cae:	d134      	bne.n	402d1a <__udivmoddi4+0x16e>
  402cb0:	1beb      	subs	r3, r5, r7
  402cb2:	0c3a      	lsrs	r2, r7, #16
  402cb4:	fa1f fc87 	uxth.w	ip, r7
  402cb8:	2101      	movs	r1, #1
  402cba:	fbb3 f8f2 	udiv	r8, r3, r2
  402cbe:	0c25      	lsrs	r5, r4, #16
  402cc0:	fb02 3318 	mls	r3, r2, r8, r3
  402cc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402cc8:	fb0c f308 	mul.w	r3, ip, r8
  402ccc:	42ab      	cmp	r3, r5
  402cce:	d907      	bls.n	402ce0 <__udivmoddi4+0x134>
  402cd0:	19ed      	adds	r5, r5, r7
  402cd2:	f108 30ff 	add.w	r0, r8, #4294967295
  402cd6:	d202      	bcs.n	402cde <__udivmoddi4+0x132>
  402cd8:	42ab      	cmp	r3, r5
  402cda:	f200 80d1 	bhi.w	402e80 <__udivmoddi4+0x2d4>
  402cde:	4680      	mov	r8, r0
  402ce0:	1aed      	subs	r5, r5, r3
  402ce2:	b2a3      	uxth	r3, r4
  402ce4:	fbb5 f0f2 	udiv	r0, r5, r2
  402ce8:	fb02 5510 	mls	r5, r2, r0, r5
  402cec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402cf0:	fb0c fc00 	mul.w	ip, ip, r0
  402cf4:	45a4      	cmp	ip, r4
  402cf6:	d907      	bls.n	402d08 <__udivmoddi4+0x15c>
  402cf8:	19e4      	adds	r4, r4, r7
  402cfa:	f100 33ff 	add.w	r3, r0, #4294967295
  402cfe:	d202      	bcs.n	402d06 <__udivmoddi4+0x15a>
  402d00:	45a4      	cmp	ip, r4
  402d02:	f200 80b8 	bhi.w	402e76 <__udivmoddi4+0x2ca>
  402d06:	4618      	mov	r0, r3
  402d08:	eba4 040c 	sub.w	r4, r4, ip
  402d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402d10:	e79d      	b.n	402c4e <__udivmoddi4+0xa2>
  402d12:	4631      	mov	r1, r6
  402d14:	4630      	mov	r0, r6
  402d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d1a:	f1ce 0420 	rsb	r4, lr, #32
  402d1e:	fa05 f30e 	lsl.w	r3, r5, lr
  402d22:	fa07 f70e 	lsl.w	r7, r7, lr
  402d26:	fa20 f804 	lsr.w	r8, r0, r4
  402d2a:	0c3a      	lsrs	r2, r7, #16
  402d2c:	fa25 f404 	lsr.w	r4, r5, r4
  402d30:	ea48 0803 	orr.w	r8, r8, r3
  402d34:	fbb4 f1f2 	udiv	r1, r4, r2
  402d38:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402d3c:	fb02 4411 	mls	r4, r2, r1, r4
  402d40:	fa1f fc87 	uxth.w	ip, r7
  402d44:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402d48:	fb01 f30c 	mul.w	r3, r1, ip
  402d4c:	42ab      	cmp	r3, r5
  402d4e:	fa00 f40e 	lsl.w	r4, r0, lr
  402d52:	d909      	bls.n	402d68 <__udivmoddi4+0x1bc>
  402d54:	19ed      	adds	r5, r5, r7
  402d56:	f101 30ff 	add.w	r0, r1, #4294967295
  402d5a:	f080 808a 	bcs.w	402e72 <__udivmoddi4+0x2c6>
  402d5e:	42ab      	cmp	r3, r5
  402d60:	f240 8087 	bls.w	402e72 <__udivmoddi4+0x2c6>
  402d64:	3902      	subs	r1, #2
  402d66:	443d      	add	r5, r7
  402d68:	1aeb      	subs	r3, r5, r3
  402d6a:	fa1f f588 	uxth.w	r5, r8
  402d6e:	fbb3 f0f2 	udiv	r0, r3, r2
  402d72:	fb02 3310 	mls	r3, r2, r0, r3
  402d76:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402d7a:	fb00 f30c 	mul.w	r3, r0, ip
  402d7e:	42ab      	cmp	r3, r5
  402d80:	d907      	bls.n	402d92 <__udivmoddi4+0x1e6>
  402d82:	19ed      	adds	r5, r5, r7
  402d84:	f100 38ff 	add.w	r8, r0, #4294967295
  402d88:	d26f      	bcs.n	402e6a <__udivmoddi4+0x2be>
  402d8a:	42ab      	cmp	r3, r5
  402d8c:	d96d      	bls.n	402e6a <__udivmoddi4+0x2be>
  402d8e:	3802      	subs	r0, #2
  402d90:	443d      	add	r5, r7
  402d92:	1aeb      	subs	r3, r5, r3
  402d94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402d98:	e78f      	b.n	402cba <__udivmoddi4+0x10e>
  402d9a:	f1c1 0720 	rsb	r7, r1, #32
  402d9e:	fa22 f807 	lsr.w	r8, r2, r7
  402da2:	408b      	lsls	r3, r1
  402da4:	fa05 f401 	lsl.w	r4, r5, r1
  402da8:	ea48 0303 	orr.w	r3, r8, r3
  402dac:	fa20 fe07 	lsr.w	lr, r0, r7
  402db0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402db4:	40fd      	lsrs	r5, r7
  402db6:	ea4e 0e04 	orr.w	lr, lr, r4
  402dba:	fbb5 f9fc 	udiv	r9, r5, ip
  402dbe:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402dc2:	fb0c 5519 	mls	r5, ip, r9, r5
  402dc6:	fa1f f883 	uxth.w	r8, r3
  402dca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402dce:	fb09 f408 	mul.w	r4, r9, r8
  402dd2:	42ac      	cmp	r4, r5
  402dd4:	fa02 f201 	lsl.w	r2, r2, r1
  402dd8:	fa00 fa01 	lsl.w	sl, r0, r1
  402ddc:	d908      	bls.n	402df0 <__udivmoddi4+0x244>
  402dde:	18ed      	adds	r5, r5, r3
  402de0:	f109 30ff 	add.w	r0, r9, #4294967295
  402de4:	d243      	bcs.n	402e6e <__udivmoddi4+0x2c2>
  402de6:	42ac      	cmp	r4, r5
  402de8:	d941      	bls.n	402e6e <__udivmoddi4+0x2c2>
  402dea:	f1a9 0902 	sub.w	r9, r9, #2
  402dee:	441d      	add	r5, r3
  402df0:	1b2d      	subs	r5, r5, r4
  402df2:	fa1f fe8e 	uxth.w	lr, lr
  402df6:	fbb5 f0fc 	udiv	r0, r5, ip
  402dfa:	fb0c 5510 	mls	r5, ip, r0, r5
  402dfe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402e02:	fb00 f808 	mul.w	r8, r0, r8
  402e06:	45a0      	cmp	r8, r4
  402e08:	d907      	bls.n	402e1a <__udivmoddi4+0x26e>
  402e0a:	18e4      	adds	r4, r4, r3
  402e0c:	f100 35ff 	add.w	r5, r0, #4294967295
  402e10:	d229      	bcs.n	402e66 <__udivmoddi4+0x2ba>
  402e12:	45a0      	cmp	r8, r4
  402e14:	d927      	bls.n	402e66 <__udivmoddi4+0x2ba>
  402e16:	3802      	subs	r0, #2
  402e18:	441c      	add	r4, r3
  402e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402e1e:	eba4 0408 	sub.w	r4, r4, r8
  402e22:	fba0 8902 	umull	r8, r9, r0, r2
  402e26:	454c      	cmp	r4, r9
  402e28:	46c6      	mov	lr, r8
  402e2a:	464d      	mov	r5, r9
  402e2c:	d315      	bcc.n	402e5a <__udivmoddi4+0x2ae>
  402e2e:	d012      	beq.n	402e56 <__udivmoddi4+0x2aa>
  402e30:	b156      	cbz	r6, 402e48 <__udivmoddi4+0x29c>
  402e32:	ebba 030e 	subs.w	r3, sl, lr
  402e36:	eb64 0405 	sbc.w	r4, r4, r5
  402e3a:	fa04 f707 	lsl.w	r7, r4, r7
  402e3e:	40cb      	lsrs	r3, r1
  402e40:	431f      	orrs	r7, r3
  402e42:	40cc      	lsrs	r4, r1
  402e44:	6037      	str	r7, [r6, #0]
  402e46:	6074      	str	r4, [r6, #4]
  402e48:	2100      	movs	r1, #0
  402e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e4e:	4618      	mov	r0, r3
  402e50:	e6f8      	b.n	402c44 <__udivmoddi4+0x98>
  402e52:	4690      	mov	r8, r2
  402e54:	e6e0      	b.n	402c18 <__udivmoddi4+0x6c>
  402e56:	45c2      	cmp	sl, r8
  402e58:	d2ea      	bcs.n	402e30 <__udivmoddi4+0x284>
  402e5a:	ebb8 0e02 	subs.w	lr, r8, r2
  402e5e:	eb69 0503 	sbc.w	r5, r9, r3
  402e62:	3801      	subs	r0, #1
  402e64:	e7e4      	b.n	402e30 <__udivmoddi4+0x284>
  402e66:	4628      	mov	r0, r5
  402e68:	e7d7      	b.n	402e1a <__udivmoddi4+0x26e>
  402e6a:	4640      	mov	r0, r8
  402e6c:	e791      	b.n	402d92 <__udivmoddi4+0x1e6>
  402e6e:	4681      	mov	r9, r0
  402e70:	e7be      	b.n	402df0 <__udivmoddi4+0x244>
  402e72:	4601      	mov	r1, r0
  402e74:	e778      	b.n	402d68 <__udivmoddi4+0x1bc>
  402e76:	3802      	subs	r0, #2
  402e78:	443c      	add	r4, r7
  402e7a:	e745      	b.n	402d08 <__udivmoddi4+0x15c>
  402e7c:	4608      	mov	r0, r1
  402e7e:	e708      	b.n	402c92 <__udivmoddi4+0xe6>
  402e80:	f1a8 0802 	sub.w	r8, r8, #2
  402e84:	443d      	add	r5, r7
  402e86:	e72b      	b.n	402ce0 <__udivmoddi4+0x134>

00402e88 <__aeabi_idiv0>:
  402e88:	4770      	bx	lr
  402e8a:	bf00      	nop

00402e8c <__libc_init_array>:
  402e8c:	b570      	push	{r4, r5, r6, lr}
  402e8e:	4e0f      	ldr	r6, [pc, #60]	; (402ecc <__libc_init_array+0x40>)
  402e90:	4d0f      	ldr	r5, [pc, #60]	; (402ed0 <__libc_init_array+0x44>)
  402e92:	1b76      	subs	r6, r6, r5
  402e94:	10b6      	asrs	r6, r6, #2
  402e96:	bf18      	it	ne
  402e98:	2400      	movne	r4, #0
  402e9a:	d005      	beq.n	402ea8 <__libc_init_array+0x1c>
  402e9c:	3401      	adds	r4, #1
  402e9e:	f855 3b04 	ldr.w	r3, [r5], #4
  402ea2:	4798      	blx	r3
  402ea4:	42a6      	cmp	r6, r4
  402ea6:	d1f9      	bne.n	402e9c <__libc_init_array+0x10>
  402ea8:	4e0a      	ldr	r6, [pc, #40]	; (402ed4 <__libc_init_array+0x48>)
  402eaa:	4d0b      	ldr	r5, [pc, #44]	; (402ed8 <__libc_init_array+0x4c>)
  402eac:	1b76      	subs	r6, r6, r5
  402eae:	f005 f80b 	bl	407ec8 <_init>
  402eb2:	10b6      	asrs	r6, r6, #2
  402eb4:	bf18      	it	ne
  402eb6:	2400      	movne	r4, #0
  402eb8:	d006      	beq.n	402ec8 <__libc_init_array+0x3c>
  402eba:	3401      	adds	r4, #1
  402ebc:	f855 3b04 	ldr.w	r3, [r5], #4
  402ec0:	4798      	blx	r3
  402ec2:	42a6      	cmp	r6, r4
  402ec4:	d1f9      	bne.n	402eba <__libc_init_array+0x2e>
  402ec6:	bd70      	pop	{r4, r5, r6, pc}
  402ec8:	bd70      	pop	{r4, r5, r6, pc}
  402eca:	bf00      	nop
  402ecc:	00407ed4 	.word	0x00407ed4
  402ed0:	00407ed4 	.word	0x00407ed4
  402ed4:	00407edc 	.word	0x00407edc
  402ed8:	00407ed4 	.word	0x00407ed4

00402edc <memset>:
  402edc:	b470      	push	{r4, r5, r6}
  402ede:	0786      	lsls	r6, r0, #30
  402ee0:	d046      	beq.n	402f70 <memset+0x94>
  402ee2:	1e54      	subs	r4, r2, #1
  402ee4:	2a00      	cmp	r2, #0
  402ee6:	d041      	beq.n	402f6c <memset+0x90>
  402ee8:	b2ca      	uxtb	r2, r1
  402eea:	4603      	mov	r3, r0
  402eec:	e002      	b.n	402ef4 <memset+0x18>
  402eee:	f114 34ff 	adds.w	r4, r4, #4294967295
  402ef2:	d33b      	bcc.n	402f6c <memset+0x90>
  402ef4:	f803 2b01 	strb.w	r2, [r3], #1
  402ef8:	079d      	lsls	r5, r3, #30
  402efa:	d1f8      	bne.n	402eee <memset+0x12>
  402efc:	2c03      	cmp	r4, #3
  402efe:	d92e      	bls.n	402f5e <memset+0x82>
  402f00:	b2cd      	uxtb	r5, r1
  402f02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402f06:	2c0f      	cmp	r4, #15
  402f08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402f0c:	d919      	bls.n	402f42 <memset+0x66>
  402f0e:	f103 0210 	add.w	r2, r3, #16
  402f12:	4626      	mov	r6, r4
  402f14:	3e10      	subs	r6, #16
  402f16:	2e0f      	cmp	r6, #15
  402f18:	f842 5c10 	str.w	r5, [r2, #-16]
  402f1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402f20:	f842 5c08 	str.w	r5, [r2, #-8]
  402f24:	f842 5c04 	str.w	r5, [r2, #-4]
  402f28:	f102 0210 	add.w	r2, r2, #16
  402f2c:	d8f2      	bhi.n	402f14 <memset+0x38>
  402f2e:	f1a4 0210 	sub.w	r2, r4, #16
  402f32:	f022 020f 	bic.w	r2, r2, #15
  402f36:	f004 040f 	and.w	r4, r4, #15
  402f3a:	3210      	adds	r2, #16
  402f3c:	2c03      	cmp	r4, #3
  402f3e:	4413      	add	r3, r2
  402f40:	d90d      	bls.n	402f5e <memset+0x82>
  402f42:	461e      	mov	r6, r3
  402f44:	4622      	mov	r2, r4
  402f46:	3a04      	subs	r2, #4
  402f48:	2a03      	cmp	r2, #3
  402f4a:	f846 5b04 	str.w	r5, [r6], #4
  402f4e:	d8fa      	bhi.n	402f46 <memset+0x6a>
  402f50:	1f22      	subs	r2, r4, #4
  402f52:	f022 0203 	bic.w	r2, r2, #3
  402f56:	3204      	adds	r2, #4
  402f58:	4413      	add	r3, r2
  402f5a:	f004 0403 	and.w	r4, r4, #3
  402f5e:	b12c      	cbz	r4, 402f6c <memset+0x90>
  402f60:	b2c9      	uxtb	r1, r1
  402f62:	441c      	add	r4, r3
  402f64:	f803 1b01 	strb.w	r1, [r3], #1
  402f68:	429c      	cmp	r4, r3
  402f6a:	d1fb      	bne.n	402f64 <memset+0x88>
  402f6c:	bc70      	pop	{r4, r5, r6}
  402f6e:	4770      	bx	lr
  402f70:	4614      	mov	r4, r2
  402f72:	4603      	mov	r3, r0
  402f74:	e7c2      	b.n	402efc <memset+0x20>
  402f76:	bf00      	nop

00402f78 <sprintf>:
  402f78:	b40e      	push	{r1, r2, r3}
  402f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f7c:	b09c      	sub	sp, #112	; 0x70
  402f7e:	ab21      	add	r3, sp, #132	; 0x84
  402f80:	490f      	ldr	r1, [pc, #60]	; (402fc0 <sprintf+0x48>)
  402f82:	f853 2b04 	ldr.w	r2, [r3], #4
  402f86:	9301      	str	r3, [sp, #4]
  402f88:	4605      	mov	r5, r0
  402f8a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402f8e:	6808      	ldr	r0, [r1, #0]
  402f90:	9502      	str	r5, [sp, #8]
  402f92:	f44f 7702 	mov.w	r7, #520	; 0x208
  402f96:	f64f 76ff 	movw	r6, #65535	; 0xffff
  402f9a:	a902      	add	r1, sp, #8
  402f9c:	9506      	str	r5, [sp, #24]
  402f9e:	f8ad 7014 	strh.w	r7, [sp, #20]
  402fa2:	9404      	str	r4, [sp, #16]
  402fa4:	9407      	str	r4, [sp, #28]
  402fa6:	f8ad 6016 	strh.w	r6, [sp, #22]
  402faa:	f000 fafb 	bl	4035a4 <_svfprintf_r>
  402fae:	9b02      	ldr	r3, [sp, #8]
  402fb0:	2200      	movs	r2, #0
  402fb2:	701a      	strb	r2, [r3, #0]
  402fb4:	b01c      	add	sp, #112	; 0x70
  402fb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  402fba:	b003      	add	sp, #12
  402fbc:	4770      	bx	lr
  402fbe:	bf00      	nop
  402fc0:	20000010 	.word	0x20000010
	...

00403000 <strlen>:
  403000:	f890 f000 	pld	[r0]
  403004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403008:	f020 0107 	bic.w	r1, r0, #7
  40300c:	f06f 0c00 	mvn.w	ip, #0
  403010:	f010 0407 	ands.w	r4, r0, #7
  403014:	f891 f020 	pld	[r1, #32]
  403018:	f040 8049 	bne.w	4030ae <strlen+0xae>
  40301c:	f04f 0400 	mov.w	r4, #0
  403020:	f06f 0007 	mvn.w	r0, #7
  403024:	e9d1 2300 	ldrd	r2, r3, [r1]
  403028:	f891 f040 	pld	[r1, #64]	; 0x40
  40302c:	f100 0008 	add.w	r0, r0, #8
  403030:	fa82 f24c 	uadd8	r2, r2, ip
  403034:	faa4 f28c 	sel	r2, r4, ip
  403038:	fa83 f34c 	uadd8	r3, r3, ip
  40303c:	faa2 f38c 	sel	r3, r2, ip
  403040:	bb4b      	cbnz	r3, 403096 <strlen+0x96>
  403042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403046:	fa82 f24c 	uadd8	r2, r2, ip
  40304a:	f100 0008 	add.w	r0, r0, #8
  40304e:	faa4 f28c 	sel	r2, r4, ip
  403052:	fa83 f34c 	uadd8	r3, r3, ip
  403056:	faa2 f38c 	sel	r3, r2, ip
  40305a:	b9e3      	cbnz	r3, 403096 <strlen+0x96>
  40305c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403060:	fa82 f24c 	uadd8	r2, r2, ip
  403064:	f100 0008 	add.w	r0, r0, #8
  403068:	faa4 f28c 	sel	r2, r4, ip
  40306c:	fa83 f34c 	uadd8	r3, r3, ip
  403070:	faa2 f38c 	sel	r3, r2, ip
  403074:	b97b      	cbnz	r3, 403096 <strlen+0x96>
  403076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40307a:	f101 0120 	add.w	r1, r1, #32
  40307e:	fa82 f24c 	uadd8	r2, r2, ip
  403082:	f100 0008 	add.w	r0, r0, #8
  403086:	faa4 f28c 	sel	r2, r4, ip
  40308a:	fa83 f34c 	uadd8	r3, r3, ip
  40308e:	faa2 f38c 	sel	r3, r2, ip
  403092:	2b00      	cmp	r3, #0
  403094:	d0c6      	beq.n	403024 <strlen+0x24>
  403096:	2a00      	cmp	r2, #0
  403098:	bf04      	itt	eq
  40309a:	3004      	addeq	r0, #4
  40309c:	461a      	moveq	r2, r3
  40309e:	ba12      	rev	r2, r2
  4030a0:	fab2 f282 	clz	r2, r2
  4030a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4030a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4030ac:	4770      	bx	lr
  4030ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4030b2:	f004 0503 	and.w	r5, r4, #3
  4030b6:	f1c4 0000 	rsb	r0, r4, #0
  4030ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4030be:	f014 0f04 	tst.w	r4, #4
  4030c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4030c6:	fa0c f505 	lsl.w	r5, ip, r5
  4030ca:	ea62 0205 	orn	r2, r2, r5
  4030ce:	bf1c      	itt	ne
  4030d0:	ea63 0305 	ornne	r3, r3, r5
  4030d4:	4662      	movne	r2, ip
  4030d6:	f04f 0400 	mov.w	r4, #0
  4030da:	e7a9      	b.n	403030 <strlen+0x30>

004030dc <critical_factorization>:
  4030dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030e0:	f04f 0e01 	mov.w	lr, #1
  4030e4:	4674      	mov	r4, lr
  4030e6:	2500      	movs	r5, #0
  4030e8:	f04f 36ff 	mov.w	r6, #4294967295
  4030ec:	192b      	adds	r3, r5, r4
  4030ee:	428b      	cmp	r3, r1
  4030f0:	eb00 0706 	add.w	r7, r0, r6
  4030f4:	d20d      	bcs.n	403112 <critical_factorization+0x36>
  4030f6:	5d3f      	ldrb	r7, [r7, r4]
  4030f8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4030fc:	45bc      	cmp	ip, r7
  4030fe:	d22d      	bcs.n	40315c <critical_factorization+0x80>
  403100:	461d      	mov	r5, r3
  403102:	2401      	movs	r4, #1
  403104:	eba3 0e06 	sub.w	lr, r3, r6
  403108:	192b      	adds	r3, r5, r4
  40310a:	428b      	cmp	r3, r1
  40310c:	eb00 0706 	add.w	r7, r0, r6
  403110:	d3f1      	bcc.n	4030f6 <critical_factorization+0x1a>
  403112:	f04f 0801 	mov.w	r8, #1
  403116:	f8c2 e000 	str.w	lr, [r2]
  40311a:	4644      	mov	r4, r8
  40311c:	2500      	movs	r5, #0
  40311e:	f04f 37ff 	mov.w	r7, #4294967295
  403122:	192b      	adds	r3, r5, r4
  403124:	4299      	cmp	r1, r3
  403126:	eb00 0e07 	add.w	lr, r0, r7
  40312a:	d90e      	bls.n	40314a <critical_factorization+0x6e>
  40312c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403130:	f810 c003 	ldrb.w	ip, [r0, r3]
  403134:	45f4      	cmp	ip, lr
  403136:	d918      	bls.n	40316a <critical_factorization+0x8e>
  403138:	461d      	mov	r5, r3
  40313a:	2401      	movs	r4, #1
  40313c:	eba3 0807 	sub.w	r8, r3, r7
  403140:	192b      	adds	r3, r5, r4
  403142:	4299      	cmp	r1, r3
  403144:	eb00 0e07 	add.w	lr, r0, r7
  403148:	d8f0      	bhi.n	40312c <critical_factorization+0x50>
  40314a:	3701      	adds	r7, #1
  40314c:	1c70      	adds	r0, r6, #1
  40314e:	4287      	cmp	r7, r0
  403150:	bf24      	itt	cs
  403152:	f8c2 8000 	strcs.w	r8, [r2]
  403156:	4638      	movcs	r0, r7
  403158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40315c:	d00c      	beq.n	403178 <critical_factorization+0x9c>
  40315e:	f04f 0e01 	mov.w	lr, #1
  403162:	462e      	mov	r6, r5
  403164:	4674      	mov	r4, lr
  403166:	4475      	add	r5, lr
  403168:	e7c0      	b.n	4030ec <critical_factorization+0x10>
  40316a:	d00b      	beq.n	403184 <critical_factorization+0xa8>
  40316c:	f04f 0801 	mov.w	r8, #1
  403170:	462f      	mov	r7, r5
  403172:	4644      	mov	r4, r8
  403174:	4445      	add	r5, r8
  403176:	e7d4      	b.n	403122 <critical_factorization+0x46>
  403178:	4574      	cmp	r4, lr
  40317a:	bf12      	itee	ne
  40317c:	3401      	addne	r4, #1
  40317e:	461d      	moveq	r5, r3
  403180:	2401      	moveq	r4, #1
  403182:	e7b3      	b.n	4030ec <critical_factorization+0x10>
  403184:	4544      	cmp	r4, r8
  403186:	bf12      	itee	ne
  403188:	3401      	addne	r4, #1
  40318a:	461d      	moveq	r5, r3
  40318c:	2401      	moveq	r4, #1
  40318e:	e7c8      	b.n	403122 <critical_factorization+0x46>

00403190 <two_way_long_needle>:
  403190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403194:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403198:	4616      	mov	r6, r2
  40319a:	4605      	mov	r5, r0
  40319c:	468b      	mov	fp, r1
  40319e:	4610      	mov	r0, r2
  4031a0:	4619      	mov	r1, r3
  4031a2:	aa03      	add	r2, sp, #12
  4031a4:	461c      	mov	r4, r3
  4031a6:	f7ff ff99 	bl	4030dc <critical_factorization>
  4031aa:	ab03      	add	r3, sp, #12
  4031ac:	4681      	mov	r9, r0
  4031ae:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4031b2:	f843 4f04 	str.w	r4, [r3, #4]!
  4031b6:	4293      	cmp	r3, r2
  4031b8:	d1fb      	bne.n	4031b2 <two_way_long_needle+0x22>
  4031ba:	b14c      	cbz	r4, 4031d0 <two_way_long_needle+0x40>
  4031bc:	1e63      	subs	r3, r4, #1
  4031be:	1e72      	subs	r2, r6, #1
  4031c0:	a804      	add	r0, sp, #16
  4031c2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4031c6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4031ca:	f113 33ff 	adds.w	r3, r3, #4294967295
  4031ce:	d2f8      	bcs.n	4031c2 <two_way_long_needle+0x32>
  4031d0:	9903      	ldr	r1, [sp, #12]
  4031d2:	464a      	mov	r2, r9
  4031d4:	4431      	add	r1, r6
  4031d6:	4630      	mov	r0, r6
  4031d8:	f003 f852 	bl	406280 <memcmp>
  4031dc:	2800      	cmp	r0, #0
  4031de:	d16f      	bne.n	4032c0 <two_way_long_needle+0x130>
  4031e0:	f109 33ff 	add.w	r3, r9, #4294967295
  4031e4:	9300      	str	r3, [sp, #0]
  4031e6:	18f3      	adds	r3, r6, r3
  4031e8:	4682      	mov	sl, r0
  4031ea:	9301      	str	r3, [sp, #4]
  4031ec:	4623      	mov	r3, r4
  4031ee:	4680      	mov	r8, r0
  4031f0:	4654      	mov	r4, sl
  4031f2:	4658      	mov	r0, fp
  4031f4:	469a      	mov	sl, r3
  4031f6:	eb08 070a 	add.w	r7, r8, sl
  4031fa:	1a3a      	subs	r2, r7, r0
  4031fc:	2100      	movs	r1, #0
  4031fe:	4428      	add	r0, r5
  403200:	f002 ffee 	bl	4061e0 <memchr>
  403204:	2800      	cmp	r0, #0
  403206:	d156      	bne.n	4032b6 <two_way_long_needle+0x126>
  403208:	2f00      	cmp	r7, #0
  40320a:	d054      	beq.n	4032b6 <two_way_long_needle+0x126>
  40320c:	19eb      	adds	r3, r5, r7
  40320e:	aa04      	add	r2, sp, #16
  403210:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403218:	b14b      	cbz	r3, 40322e <two_way_long_needle+0x9e>
  40321a:	b124      	cbz	r4, 403226 <two_way_long_needle+0x96>
  40321c:	9a03      	ldr	r2, [sp, #12]
  40321e:	4293      	cmp	r3, r2
  403220:	d201      	bcs.n	403226 <two_way_long_needle+0x96>
  403222:	ebaa 0302 	sub.w	r3, sl, r2
  403226:	4498      	add	r8, r3
  403228:	2400      	movs	r4, #0
  40322a:	4638      	mov	r0, r7
  40322c:	e7e3      	b.n	4031f6 <two_way_long_needle+0x66>
  40322e:	454c      	cmp	r4, r9
  403230:	4623      	mov	r3, r4
  403232:	f10a 3eff 	add.w	lr, sl, #4294967295
  403236:	bf38      	it	cc
  403238:	464b      	movcc	r3, r9
  40323a:	4573      	cmp	r3, lr
  40323c:	d213      	bcs.n	403266 <two_way_long_needle+0xd6>
  40323e:	eb08 0203 	add.w	r2, r8, r3
  403242:	f816 c003 	ldrb.w	ip, [r6, r3]
  403246:	5ca8      	ldrb	r0, [r5, r2]
  403248:	4584      	cmp	ip, r0
  40324a:	442a      	add	r2, r5
  40324c:	eb06 0103 	add.w	r1, r6, r3
  403250:	d006      	beq.n	403260 <two_way_long_needle+0xd0>
  403252:	e02c      	b.n	4032ae <two_way_long_needle+0x11e>
  403254:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403258:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40325c:	4584      	cmp	ip, r0
  40325e:	d126      	bne.n	4032ae <two_way_long_needle+0x11e>
  403260:	3301      	adds	r3, #1
  403262:	4573      	cmp	r3, lr
  403264:	d3f6      	bcc.n	403254 <two_way_long_needle+0xc4>
  403266:	454c      	cmp	r4, r9
  403268:	9900      	ldr	r1, [sp, #0]
  40326a:	f080 8089 	bcs.w	403380 <two_way_long_needle+0x1f0>
  40326e:	9b00      	ldr	r3, [sp, #0]
  403270:	eb08 0203 	add.w	r2, r8, r3
  403274:	9b01      	ldr	r3, [sp, #4]
  403276:	5ca8      	ldrb	r0, [r5, r2]
  403278:	781b      	ldrb	r3, [r3, #0]
  40327a:	4298      	cmp	r0, r3
  40327c:	442a      	add	r2, r5
  40327e:	d17f      	bne.n	403380 <two_way_long_needle+0x1f0>
  403280:	9801      	ldr	r0, [sp, #4]
  403282:	f104 3bff 	add.w	fp, r4, #4294967295
  403286:	e006      	b.n	403296 <two_way_long_needle+0x106>
  403288:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40328c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403290:	45f4      	cmp	ip, lr
  403292:	d103      	bne.n	40329c <two_way_long_needle+0x10c>
  403294:	4619      	mov	r1, r3
  403296:	1e4b      	subs	r3, r1, #1
  403298:	459b      	cmp	fp, r3
  40329a:	d1f5      	bne.n	403288 <two_way_long_needle+0xf8>
  40329c:	3401      	adds	r4, #1
  40329e:	428c      	cmp	r4, r1
  4032a0:	d870      	bhi.n	403384 <two_way_long_needle+0x1f4>
  4032a2:	9c03      	ldr	r4, [sp, #12]
  4032a4:	4638      	mov	r0, r7
  4032a6:	44a0      	add	r8, r4
  4032a8:	ebaa 0404 	sub.w	r4, sl, r4
  4032ac:	e7a3      	b.n	4031f6 <two_way_long_needle+0x66>
  4032ae:	f1c9 0201 	rsb	r2, r9, #1
  4032b2:	4490      	add	r8, r2
  4032b4:	e7b7      	b.n	403226 <two_way_long_needle+0x96>
  4032b6:	2000      	movs	r0, #0
  4032b8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4032bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032c0:	eba4 0309 	sub.w	r3, r4, r9
  4032c4:	454b      	cmp	r3, r9
  4032c6:	bf38      	it	cc
  4032c8:	464b      	movcc	r3, r9
  4032ca:	3301      	adds	r3, #1
  4032cc:	f109 38ff 	add.w	r8, r9, #4294967295
  4032d0:	9303      	str	r3, [sp, #12]
  4032d2:	eb06 0308 	add.w	r3, r6, r8
  4032d6:	4658      	mov	r0, fp
  4032d8:	f04f 0a00 	mov.w	sl, #0
  4032dc:	46cb      	mov	fp, r9
  4032de:	4699      	mov	r9, r3
  4032e0:	eb0a 0704 	add.w	r7, sl, r4
  4032e4:	1a3a      	subs	r2, r7, r0
  4032e6:	2100      	movs	r1, #0
  4032e8:	4428      	add	r0, r5
  4032ea:	f002 ff79 	bl	4061e0 <memchr>
  4032ee:	2800      	cmp	r0, #0
  4032f0:	d1e1      	bne.n	4032b6 <two_way_long_needle+0x126>
  4032f2:	2f00      	cmp	r7, #0
  4032f4:	d0df      	beq.n	4032b6 <two_way_long_needle+0x126>
  4032f6:	19eb      	adds	r3, r5, r7
  4032f8:	aa04      	add	r2, sp, #16
  4032fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403302:	bba3      	cbnz	r3, 40336e <two_way_long_needle+0x1de>
  403304:	1e61      	subs	r1, r4, #1
  403306:	458b      	cmp	fp, r1
  403308:	d215      	bcs.n	403336 <two_way_long_needle+0x1a6>
  40330a:	eb0a 020b 	add.w	r2, sl, fp
  40330e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403312:	f815 e002 	ldrb.w	lr, [r5, r2]
  403316:	459e      	cmp	lr, r3
  403318:	442a      	add	r2, r5
  40331a:	eb06 000b 	add.w	r0, r6, fp
  40331e:	465b      	mov	r3, fp
  403320:	d006      	beq.n	403330 <two_way_long_needle+0x1a0>
  403322:	e027      	b.n	403374 <two_way_long_needle+0x1e4>
  403324:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403328:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40332c:	45f4      	cmp	ip, lr
  40332e:	d121      	bne.n	403374 <two_way_long_needle+0x1e4>
  403330:	3301      	adds	r3, #1
  403332:	428b      	cmp	r3, r1
  403334:	d3f6      	bcc.n	403324 <two_way_long_needle+0x194>
  403336:	f1b8 3fff 	cmp.w	r8, #4294967295
  40333a:	d011      	beq.n	403360 <two_way_long_needle+0x1d0>
  40333c:	eb0a 0208 	add.w	r2, sl, r8
  403340:	f899 1000 	ldrb.w	r1, [r9]
  403344:	5cab      	ldrb	r3, [r5, r2]
  403346:	4299      	cmp	r1, r3
  403348:	442a      	add	r2, r5
  40334a:	d10f      	bne.n	40336c <two_way_long_needle+0x1dc>
  40334c:	464b      	mov	r3, r9
  40334e:	e005      	b.n	40335c <two_way_long_needle+0x1cc>
  403350:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403354:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403358:	4288      	cmp	r0, r1
  40335a:	d107      	bne.n	40336c <two_way_long_needle+0x1dc>
  40335c:	42b3      	cmp	r3, r6
  40335e:	d1f7      	bne.n	403350 <two_way_long_needle+0x1c0>
  403360:	eb05 000a 	add.w	r0, r5, sl
  403364:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40336c:	9b03      	ldr	r3, [sp, #12]
  40336e:	449a      	add	sl, r3
  403370:	4638      	mov	r0, r7
  403372:	e7b5      	b.n	4032e0 <two_way_long_needle+0x150>
  403374:	f1cb 0201 	rsb	r2, fp, #1
  403378:	4492      	add	sl, r2
  40337a:	449a      	add	sl, r3
  40337c:	4638      	mov	r0, r7
  40337e:	e7af      	b.n	4032e0 <two_way_long_needle+0x150>
  403380:	4649      	mov	r1, r9
  403382:	e78b      	b.n	40329c <two_way_long_needle+0x10c>
  403384:	eb05 0008 	add.w	r0, r5, r8
  403388:	e796      	b.n	4032b8 <two_way_long_needle+0x128>
  40338a:	bf00      	nop

0040338c <strstr>:
  40338c:	7802      	ldrb	r2, [r0, #0]
  40338e:	2a00      	cmp	r2, #0
  403390:	f000 8101 	beq.w	403596 <strstr+0x20a>
  403394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403398:	f891 8000 	ldrb.w	r8, [r1]
  40339c:	b085      	sub	sp, #20
  40339e:	4644      	mov	r4, r8
  4033a0:	f1b8 0f00 	cmp.w	r8, #0
  4033a4:	d016      	beq.n	4033d4 <strstr+0x48>
  4033a6:	4686      	mov	lr, r0
  4033a8:	f101 0c01 	add.w	ip, r1, #1
  4033ac:	2701      	movs	r7, #1
  4033ae:	e003      	b.n	4033b8 <strstr+0x2c>
  4033b0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4033b4:	b16c      	cbz	r4, 4033d2 <strstr+0x46>
  4033b6:	469c      	mov	ip, r3
  4033b8:	42a2      	cmp	r2, r4
  4033ba:	bf14      	ite	ne
  4033bc:	2700      	movne	r7, #0
  4033be:	f007 0701 	andeq.w	r7, r7, #1
  4033c2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4033c6:	4663      	mov	r3, ip
  4033c8:	2a00      	cmp	r2, #0
  4033ca:	d1f1      	bne.n	4033b0 <strstr+0x24>
  4033cc:	f89c 3000 	ldrb.w	r3, [ip]
  4033d0:	b9fb      	cbnz	r3, 403412 <strstr+0x86>
  4033d2:	b117      	cbz	r7, 4033da <strstr+0x4e>
  4033d4:	b005      	add	sp, #20
  4033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033da:	460e      	mov	r6, r1
  4033dc:	4605      	mov	r5, r0
  4033de:	4641      	mov	r1, r8
  4033e0:	3001      	adds	r0, #1
  4033e2:	ebac 0406 	sub.w	r4, ip, r6
  4033e6:	f003 fd2f 	bl	406e48 <strchr>
  4033ea:	4607      	mov	r7, r0
  4033ec:	b188      	cbz	r0, 403412 <strstr+0x86>
  4033ee:	2c01      	cmp	r4, #1
  4033f0:	d0f0      	beq.n	4033d4 <strstr+0x48>
  4033f2:	1928      	adds	r0, r5, r4
  4033f4:	4287      	cmp	r7, r0
  4033f6:	bf94      	ite	ls
  4033f8:	1bc1      	subls	r1, r0, r7
  4033fa:	2101      	movhi	r1, #1
  4033fc:	2c1f      	cmp	r4, #31
  4033fe:	468b      	mov	fp, r1
  403400:	d90b      	bls.n	40341a <strstr+0x8e>
  403402:	4623      	mov	r3, r4
  403404:	4632      	mov	r2, r6
  403406:	4638      	mov	r0, r7
  403408:	f7ff fec2 	bl	403190 <two_way_long_needle>
  40340c:	b005      	add	sp, #20
  40340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403412:	2000      	movs	r0, #0
  403414:	b005      	add	sp, #20
  403416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40341a:	aa03      	add	r2, sp, #12
  40341c:	4621      	mov	r1, r4
  40341e:	4630      	mov	r0, r6
  403420:	f7ff fe5c 	bl	4030dc <critical_factorization>
  403424:	9903      	ldr	r1, [sp, #12]
  403426:	4680      	mov	r8, r0
  403428:	4602      	mov	r2, r0
  40342a:	4431      	add	r1, r6
  40342c:	4630      	mov	r0, r6
  40342e:	f002 ff27 	bl	406280 <memcmp>
  403432:	2800      	cmp	r0, #0
  403434:	d157      	bne.n	4034e6 <strstr+0x15a>
  403436:	f108 33ff 	add.w	r3, r8, #4294967295
  40343a:	9300      	str	r3, [sp, #0]
  40343c:	18f3      	adds	r3, r6, r3
  40343e:	4681      	mov	r9, r0
  403440:	4605      	mov	r5, r0
  403442:	9301      	str	r3, [sp, #4]
  403444:	4658      	mov	r0, fp
  403446:	46b2      	mov	sl, r6
  403448:	1966      	adds	r6, r4, r5
  40344a:	1a32      	subs	r2, r6, r0
  40344c:	2100      	movs	r1, #0
  40344e:	4438      	add	r0, r7
  403450:	f002 fec6 	bl	4061e0 <memchr>
  403454:	2800      	cmp	r0, #0
  403456:	d1dc      	bne.n	403412 <strstr+0x86>
  403458:	2e00      	cmp	r6, #0
  40345a:	d0da      	beq.n	403412 <strstr+0x86>
  40345c:	45c8      	cmp	r8, r9
  40345e:	4643      	mov	r3, r8
  403460:	bf38      	it	cc
  403462:	464b      	movcc	r3, r9
  403464:	429c      	cmp	r4, r3
  403466:	d912      	bls.n	40348e <strstr+0x102>
  403468:	195a      	adds	r2, r3, r5
  40346a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40346e:	5cb8      	ldrb	r0, [r7, r2]
  403470:	4281      	cmp	r1, r0
  403472:	443a      	add	r2, r7
  403474:	eb0a 0e03 	add.w	lr, sl, r3
  403478:	d006      	beq.n	403488 <strstr+0xfc>
  40347a:	e02c      	b.n	4034d6 <strstr+0x14a>
  40347c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403480:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403484:	4288      	cmp	r0, r1
  403486:	d126      	bne.n	4034d6 <strstr+0x14a>
  403488:	3301      	adds	r3, #1
  40348a:	429c      	cmp	r4, r3
  40348c:	d1f6      	bne.n	40347c <strstr+0xf0>
  40348e:	45c8      	cmp	r8, r9
  403490:	9900      	ldr	r1, [sp, #0]
  403492:	f240 8083 	bls.w	40359c <strstr+0x210>
  403496:	9b00      	ldr	r3, [sp, #0]
  403498:	18ea      	adds	r2, r5, r3
  40349a:	9b01      	ldr	r3, [sp, #4]
  40349c:	5cb8      	ldrb	r0, [r7, r2]
  40349e:	781b      	ldrb	r3, [r3, #0]
  4034a0:	4298      	cmp	r0, r3
  4034a2:	443a      	add	r2, r7
  4034a4:	d17a      	bne.n	40359c <strstr+0x210>
  4034a6:	9801      	ldr	r0, [sp, #4]
  4034a8:	f109 3bff 	add.w	fp, r9, #4294967295
  4034ac:	e006      	b.n	4034bc <strstr+0x130>
  4034ae:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4034b2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4034b6:	45f4      	cmp	ip, lr
  4034b8:	d103      	bne.n	4034c2 <strstr+0x136>
  4034ba:	4619      	mov	r1, r3
  4034bc:	1e4b      	subs	r3, r1, #1
  4034be:	455b      	cmp	r3, fp
  4034c0:	d1f5      	bne.n	4034ae <strstr+0x122>
  4034c2:	f109 0901 	add.w	r9, r9, #1
  4034c6:	4589      	cmp	r9, r1
  4034c8:	d857      	bhi.n	40357a <strstr+0x1ee>
  4034ca:	9b03      	ldr	r3, [sp, #12]
  4034cc:	4630      	mov	r0, r6
  4034ce:	441d      	add	r5, r3
  4034d0:	eba4 0903 	sub.w	r9, r4, r3
  4034d4:	e7b8      	b.n	403448 <strstr+0xbc>
  4034d6:	f1c8 0201 	rsb	r2, r8, #1
  4034da:	4415      	add	r5, r2
  4034dc:	441d      	add	r5, r3
  4034de:	f04f 0900 	mov.w	r9, #0
  4034e2:	4630      	mov	r0, r6
  4034e4:	e7b0      	b.n	403448 <strstr+0xbc>
  4034e6:	eba4 0308 	sub.w	r3, r4, r8
  4034ea:	4543      	cmp	r3, r8
  4034ec:	bf38      	it	cc
  4034ee:	4643      	movcc	r3, r8
  4034f0:	3301      	adds	r3, #1
  4034f2:	f108 39ff 	add.w	r9, r8, #4294967295
  4034f6:	9303      	str	r3, [sp, #12]
  4034f8:	eb06 0309 	add.w	r3, r6, r9
  4034fc:	4658      	mov	r0, fp
  4034fe:	2500      	movs	r5, #0
  403500:	46bb      	mov	fp, r7
  403502:	469a      	mov	sl, r3
  403504:	1967      	adds	r7, r4, r5
  403506:	1a3a      	subs	r2, r7, r0
  403508:	2100      	movs	r1, #0
  40350a:	4458      	add	r0, fp
  40350c:	f002 fe68 	bl	4061e0 <memchr>
  403510:	2800      	cmp	r0, #0
  403512:	f47f af7e 	bne.w	403412 <strstr+0x86>
  403516:	2f00      	cmp	r7, #0
  403518:	f43f af7b 	beq.w	403412 <strstr+0x86>
  40351c:	4544      	cmp	r4, r8
  40351e:	d915      	bls.n	40354c <strstr+0x1c0>
  403520:	eb08 0205 	add.w	r2, r8, r5
  403524:	f816 3008 	ldrb.w	r3, [r6, r8]
  403528:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40352c:	4298      	cmp	r0, r3
  40352e:	445a      	add	r2, fp
  403530:	eb06 0108 	add.w	r1, r6, r8
  403534:	4643      	mov	r3, r8
  403536:	d006      	beq.n	403546 <strstr+0x1ba>
  403538:	e023      	b.n	403582 <strstr+0x1f6>
  40353a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40353e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403542:	4586      	cmp	lr, r0
  403544:	d11d      	bne.n	403582 <strstr+0x1f6>
  403546:	3301      	adds	r3, #1
  403548:	429c      	cmp	r4, r3
  40354a:	d1f6      	bne.n	40353a <strstr+0x1ae>
  40354c:	f1b9 3fff 	cmp.w	r9, #4294967295
  403550:	d012      	beq.n	403578 <strstr+0x1ec>
  403552:	eb05 0209 	add.w	r2, r5, r9
  403556:	f89a 3000 	ldrb.w	r3, [sl]
  40355a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40355e:	4299      	cmp	r1, r3
  403560:	445a      	add	r2, fp
  403562:	d114      	bne.n	40358e <strstr+0x202>
  403564:	4653      	mov	r3, sl
  403566:	e005      	b.n	403574 <strstr+0x1e8>
  403568:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40356c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403570:	4288      	cmp	r0, r1
  403572:	d10c      	bne.n	40358e <strstr+0x202>
  403574:	42b3      	cmp	r3, r6
  403576:	d1f7      	bne.n	403568 <strstr+0x1dc>
  403578:	465f      	mov	r7, fp
  40357a:	1978      	adds	r0, r7, r5
  40357c:	b005      	add	sp, #20
  40357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403582:	f1c8 0201 	rsb	r2, r8, #1
  403586:	4415      	add	r5, r2
  403588:	441d      	add	r5, r3
  40358a:	4638      	mov	r0, r7
  40358c:	e7ba      	b.n	403504 <strstr+0x178>
  40358e:	9b03      	ldr	r3, [sp, #12]
  403590:	4638      	mov	r0, r7
  403592:	441d      	add	r5, r3
  403594:	e7b6      	b.n	403504 <strstr+0x178>
  403596:	780b      	ldrb	r3, [r1, #0]
  403598:	b913      	cbnz	r3, 4035a0 <strstr+0x214>
  40359a:	4770      	bx	lr
  40359c:	4641      	mov	r1, r8
  40359e:	e790      	b.n	4034c2 <strstr+0x136>
  4035a0:	2000      	movs	r0, #0
  4035a2:	4770      	bx	lr

004035a4 <_svfprintf_r>:
  4035a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035a8:	b0c3      	sub	sp, #268	; 0x10c
  4035aa:	460c      	mov	r4, r1
  4035ac:	910b      	str	r1, [sp, #44]	; 0x2c
  4035ae:	4692      	mov	sl, r2
  4035b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4035b2:	900c      	str	r0, [sp, #48]	; 0x30
  4035b4:	f002 fb3a 	bl	405c2c <_localeconv_r>
  4035b8:	6803      	ldr	r3, [r0, #0]
  4035ba:	931a      	str	r3, [sp, #104]	; 0x68
  4035bc:	4618      	mov	r0, r3
  4035be:	f7ff fd1f 	bl	403000 <strlen>
  4035c2:	89a3      	ldrh	r3, [r4, #12]
  4035c4:	9019      	str	r0, [sp, #100]	; 0x64
  4035c6:	0619      	lsls	r1, r3, #24
  4035c8:	d503      	bpl.n	4035d2 <_svfprintf_r+0x2e>
  4035ca:	6923      	ldr	r3, [r4, #16]
  4035cc:	2b00      	cmp	r3, #0
  4035ce:	f001 8001 	beq.w	4045d4 <_svfprintf_r+0x1030>
  4035d2:	2300      	movs	r3, #0
  4035d4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4035d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4035da:	9314      	str	r3, [sp, #80]	; 0x50
  4035dc:	9315      	str	r3, [sp, #84]	; 0x54
  4035de:	9327      	str	r3, [sp, #156]	; 0x9c
  4035e0:	9326      	str	r3, [sp, #152]	; 0x98
  4035e2:	9318      	str	r3, [sp, #96]	; 0x60
  4035e4:	931b      	str	r3, [sp, #108]	; 0x6c
  4035e6:	9309      	str	r3, [sp, #36]	; 0x24
  4035e8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4035ec:	46c8      	mov	r8, r9
  4035ee:	9316      	str	r3, [sp, #88]	; 0x58
  4035f0:	9317      	str	r3, [sp, #92]	; 0x5c
  4035f2:	f89a 3000 	ldrb.w	r3, [sl]
  4035f6:	4654      	mov	r4, sl
  4035f8:	b1e3      	cbz	r3, 403634 <_svfprintf_r+0x90>
  4035fa:	2b25      	cmp	r3, #37	; 0x25
  4035fc:	d102      	bne.n	403604 <_svfprintf_r+0x60>
  4035fe:	e019      	b.n	403634 <_svfprintf_r+0x90>
  403600:	2b25      	cmp	r3, #37	; 0x25
  403602:	d003      	beq.n	40360c <_svfprintf_r+0x68>
  403604:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403608:	2b00      	cmp	r3, #0
  40360a:	d1f9      	bne.n	403600 <_svfprintf_r+0x5c>
  40360c:	eba4 050a 	sub.w	r5, r4, sl
  403610:	b185      	cbz	r5, 403634 <_svfprintf_r+0x90>
  403612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403614:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403616:	f8c8 a000 	str.w	sl, [r8]
  40361a:	3301      	adds	r3, #1
  40361c:	442a      	add	r2, r5
  40361e:	2b07      	cmp	r3, #7
  403620:	f8c8 5004 	str.w	r5, [r8, #4]
  403624:	9227      	str	r2, [sp, #156]	; 0x9c
  403626:	9326      	str	r3, [sp, #152]	; 0x98
  403628:	dc7f      	bgt.n	40372a <_svfprintf_r+0x186>
  40362a:	f108 0808 	add.w	r8, r8, #8
  40362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403630:	442b      	add	r3, r5
  403632:	9309      	str	r3, [sp, #36]	; 0x24
  403634:	7823      	ldrb	r3, [r4, #0]
  403636:	2b00      	cmp	r3, #0
  403638:	d07f      	beq.n	40373a <_svfprintf_r+0x196>
  40363a:	2300      	movs	r3, #0
  40363c:	461a      	mov	r2, r3
  40363e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403642:	4619      	mov	r1, r3
  403644:	930d      	str	r3, [sp, #52]	; 0x34
  403646:	469b      	mov	fp, r3
  403648:	f04f 30ff 	mov.w	r0, #4294967295
  40364c:	7863      	ldrb	r3, [r4, #1]
  40364e:	900a      	str	r0, [sp, #40]	; 0x28
  403650:	f104 0a01 	add.w	sl, r4, #1
  403654:	f10a 0a01 	add.w	sl, sl, #1
  403658:	f1a3 0020 	sub.w	r0, r3, #32
  40365c:	2858      	cmp	r0, #88	; 0x58
  40365e:	f200 83c0 	bhi.w	403de2 <_svfprintf_r+0x83e>
  403662:	e8df f010 	tbh	[pc, r0, lsl #1]
  403666:	0238      	.short	0x0238
  403668:	03be03be 	.word	0x03be03be
  40366c:	03be0240 	.word	0x03be0240
  403670:	03be03be 	.word	0x03be03be
  403674:	03be03be 	.word	0x03be03be
  403678:	024503be 	.word	0x024503be
  40367c:	03be0203 	.word	0x03be0203
  403680:	026b005d 	.word	0x026b005d
  403684:	028603be 	.word	0x028603be
  403688:	039c039c 	.word	0x039c039c
  40368c:	039c039c 	.word	0x039c039c
  403690:	039c039c 	.word	0x039c039c
  403694:	039c039c 	.word	0x039c039c
  403698:	03be039c 	.word	0x03be039c
  40369c:	03be03be 	.word	0x03be03be
  4036a0:	03be03be 	.word	0x03be03be
  4036a4:	03be03be 	.word	0x03be03be
  4036a8:	03be03be 	.word	0x03be03be
  4036ac:	033703be 	.word	0x033703be
  4036b0:	03be0357 	.word	0x03be0357
  4036b4:	03be0357 	.word	0x03be0357
  4036b8:	03be03be 	.word	0x03be03be
  4036bc:	039703be 	.word	0x039703be
  4036c0:	03be03be 	.word	0x03be03be
  4036c4:	03be03ac 	.word	0x03be03ac
  4036c8:	03be03be 	.word	0x03be03be
  4036cc:	03be03be 	.word	0x03be03be
  4036d0:	03be0259 	.word	0x03be0259
  4036d4:	031e03be 	.word	0x031e03be
  4036d8:	03be03be 	.word	0x03be03be
  4036dc:	03be03be 	.word	0x03be03be
  4036e0:	03be03be 	.word	0x03be03be
  4036e4:	03be03be 	.word	0x03be03be
  4036e8:	03be03be 	.word	0x03be03be
  4036ec:	02db02c6 	.word	0x02db02c6
  4036f0:	03570357 	.word	0x03570357
  4036f4:	028b0357 	.word	0x028b0357
  4036f8:	03be02db 	.word	0x03be02db
  4036fc:	029003be 	.word	0x029003be
  403700:	029d03be 	.word	0x029d03be
  403704:	02b401cc 	.word	0x02b401cc
  403708:	03be0208 	.word	0x03be0208
  40370c:	03be01e1 	.word	0x03be01e1
  403710:	03be007e 	.word	0x03be007e
  403714:	020d03be 	.word	0x020d03be
  403718:	980d      	ldr	r0, [sp, #52]	; 0x34
  40371a:	930f      	str	r3, [sp, #60]	; 0x3c
  40371c:	4240      	negs	r0, r0
  40371e:	900d      	str	r0, [sp, #52]	; 0x34
  403720:	f04b 0b04 	orr.w	fp, fp, #4
  403724:	f89a 3000 	ldrb.w	r3, [sl]
  403728:	e794      	b.n	403654 <_svfprintf_r+0xb0>
  40372a:	aa25      	add	r2, sp, #148	; 0x94
  40372c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40372e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403730:	f003 fbfe 	bl	406f30 <__ssprint_r>
  403734:	b940      	cbnz	r0, 403748 <_svfprintf_r+0x1a4>
  403736:	46c8      	mov	r8, r9
  403738:	e779      	b.n	40362e <_svfprintf_r+0x8a>
  40373a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40373c:	b123      	cbz	r3, 403748 <_svfprintf_r+0x1a4>
  40373e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403740:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403742:	aa25      	add	r2, sp, #148	; 0x94
  403744:	f003 fbf4 	bl	406f30 <__ssprint_r>
  403748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40374a:	899b      	ldrh	r3, [r3, #12]
  40374c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403750:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403752:	bf18      	it	ne
  403754:	f04f 33ff 	movne.w	r3, #4294967295
  403758:	9309      	str	r3, [sp, #36]	; 0x24
  40375a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40375c:	b043      	add	sp, #268	; 0x10c
  40375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403762:	f01b 0f20 	tst.w	fp, #32
  403766:	9311      	str	r3, [sp, #68]	; 0x44
  403768:	f040 81dd 	bne.w	403b26 <_svfprintf_r+0x582>
  40376c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40376e:	f01b 0f10 	tst.w	fp, #16
  403772:	4613      	mov	r3, r2
  403774:	f040 856c 	bne.w	404250 <_svfprintf_r+0xcac>
  403778:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40377c:	f000 8568 	beq.w	404250 <_svfprintf_r+0xcac>
  403780:	8814      	ldrh	r4, [r2, #0]
  403782:	3204      	adds	r2, #4
  403784:	2500      	movs	r5, #0
  403786:	2301      	movs	r3, #1
  403788:	920f      	str	r2, [sp, #60]	; 0x3c
  40378a:	2700      	movs	r7, #0
  40378c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403790:	990a      	ldr	r1, [sp, #40]	; 0x28
  403792:	1c4a      	adds	r2, r1, #1
  403794:	f000 8265 	beq.w	403c62 <_svfprintf_r+0x6be>
  403798:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40379c:	9207      	str	r2, [sp, #28]
  40379e:	ea54 0205 	orrs.w	r2, r4, r5
  4037a2:	f040 8264 	bne.w	403c6e <_svfprintf_r+0x6ca>
  4037a6:	2900      	cmp	r1, #0
  4037a8:	f040 8439 	bne.w	40401e <_svfprintf_r+0xa7a>
  4037ac:	2b00      	cmp	r3, #0
  4037ae:	f040 84d4 	bne.w	40415a <_svfprintf_r+0xbb6>
  4037b2:	f01b 0301 	ands.w	r3, fp, #1
  4037b6:	930e      	str	r3, [sp, #56]	; 0x38
  4037b8:	f000 8602 	beq.w	4043c0 <_svfprintf_r+0xe1c>
  4037bc:	ae42      	add	r6, sp, #264	; 0x108
  4037be:	2330      	movs	r3, #48	; 0x30
  4037c0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4037c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4037c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4037c8:	4293      	cmp	r3, r2
  4037ca:	bfb8      	it	lt
  4037cc:	4613      	movlt	r3, r2
  4037ce:	9308      	str	r3, [sp, #32]
  4037d0:	2300      	movs	r3, #0
  4037d2:	9312      	str	r3, [sp, #72]	; 0x48
  4037d4:	b117      	cbz	r7, 4037dc <_svfprintf_r+0x238>
  4037d6:	9b08      	ldr	r3, [sp, #32]
  4037d8:	3301      	adds	r3, #1
  4037da:	9308      	str	r3, [sp, #32]
  4037dc:	9b07      	ldr	r3, [sp, #28]
  4037de:	f013 0302 	ands.w	r3, r3, #2
  4037e2:	9310      	str	r3, [sp, #64]	; 0x40
  4037e4:	d002      	beq.n	4037ec <_svfprintf_r+0x248>
  4037e6:	9b08      	ldr	r3, [sp, #32]
  4037e8:	3302      	adds	r3, #2
  4037ea:	9308      	str	r3, [sp, #32]
  4037ec:	9b07      	ldr	r3, [sp, #28]
  4037ee:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4037f2:	f040 830d 	bne.w	403e10 <_svfprintf_r+0x86c>
  4037f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4037f8:	9a08      	ldr	r2, [sp, #32]
  4037fa:	eba3 0b02 	sub.w	fp, r3, r2
  4037fe:	f1bb 0f00 	cmp.w	fp, #0
  403802:	f340 8305 	ble.w	403e10 <_svfprintf_r+0x86c>
  403806:	f1bb 0f10 	cmp.w	fp, #16
  40380a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40380c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40380e:	dd29      	ble.n	403864 <_svfprintf_r+0x2c0>
  403810:	4643      	mov	r3, r8
  403812:	4621      	mov	r1, r4
  403814:	46a8      	mov	r8, r5
  403816:	2710      	movs	r7, #16
  403818:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40381a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40381c:	e006      	b.n	40382c <_svfprintf_r+0x288>
  40381e:	f1ab 0b10 	sub.w	fp, fp, #16
  403822:	f1bb 0f10 	cmp.w	fp, #16
  403826:	f103 0308 	add.w	r3, r3, #8
  40382a:	dd18      	ble.n	40385e <_svfprintf_r+0x2ba>
  40382c:	3201      	adds	r2, #1
  40382e:	48b7      	ldr	r0, [pc, #732]	; (403b0c <_svfprintf_r+0x568>)
  403830:	9226      	str	r2, [sp, #152]	; 0x98
  403832:	3110      	adds	r1, #16
  403834:	2a07      	cmp	r2, #7
  403836:	9127      	str	r1, [sp, #156]	; 0x9c
  403838:	e883 0081 	stmia.w	r3, {r0, r7}
  40383c:	ddef      	ble.n	40381e <_svfprintf_r+0x27a>
  40383e:	aa25      	add	r2, sp, #148	; 0x94
  403840:	4629      	mov	r1, r5
  403842:	4620      	mov	r0, r4
  403844:	f003 fb74 	bl	406f30 <__ssprint_r>
  403848:	2800      	cmp	r0, #0
  40384a:	f47f af7d 	bne.w	403748 <_svfprintf_r+0x1a4>
  40384e:	f1ab 0b10 	sub.w	fp, fp, #16
  403852:	f1bb 0f10 	cmp.w	fp, #16
  403856:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403858:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40385a:	464b      	mov	r3, r9
  40385c:	dce6      	bgt.n	40382c <_svfprintf_r+0x288>
  40385e:	4645      	mov	r5, r8
  403860:	460c      	mov	r4, r1
  403862:	4698      	mov	r8, r3
  403864:	3201      	adds	r2, #1
  403866:	4ba9      	ldr	r3, [pc, #676]	; (403b0c <_svfprintf_r+0x568>)
  403868:	9226      	str	r2, [sp, #152]	; 0x98
  40386a:	445c      	add	r4, fp
  40386c:	2a07      	cmp	r2, #7
  40386e:	9427      	str	r4, [sp, #156]	; 0x9c
  403870:	e888 0808 	stmia.w	r8, {r3, fp}
  403874:	f300 8495 	bgt.w	4041a2 <_svfprintf_r+0xbfe>
  403878:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40387c:	f108 0808 	add.w	r8, r8, #8
  403880:	b177      	cbz	r7, 4038a0 <_svfprintf_r+0x2fc>
  403882:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403884:	3301      	adds	r3, #1
  403886:	3401      	adds	r4, #1
  403888:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40388c:	2201      	movs	r2, #1
  40388e:	2b07      	cmp	r3, #7
  403890:	9427      	str	r4, [sp, #156]	; 0x9c
  403892:	9326      	str	r3, [sp, #152]	; 0x98
  403894:	e888 0006 	stmia.w	r8, {r1, r2}
  403898:	f300 83d8 	bgt.w	40404c <_svfprintf_r+0xaa8>
  40389c:	f108 0808 	add.w	r8, r8, #8
  4038a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4038a2:	b16b      	cbz	r3, 4038c0 <_svfprintf_r+0x31c>
  4038a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038a6:	3301      	adds	r3, #1
  4038a8:	3402      	adds	r4, #2
  4038aa:	a91e      	add	r1, sp, #120	; 0x78
  4038ac:	2202      	movs	r2, #2
  4038ae:	2b07      	cmp	r3, #7
  4038b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4038b2:	9326      	str	r3, [sp, #152]	; 0x98
  4038b4:	e888 0006 	stmia.w	r8, {r1, r2}
  4038b8:	f300 83d3 	bgt.w	404062 <_svfprintf_r+0xabe>
  4038bc:	f108 0808 	add.w	r8, r8, #8
  4038c0:	2d80      	cmp	r5, #128	; 0x80
  4038c2:	f000 8313 	beq.w	403eec <_svfprintf_r+0x948>
  4038c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038ca:	1a9f      	subs	r7, r3, r2
  4038cc:	2f00      	cmp	r7, #0
  4038ce:	dd36      	ble.n	40393e <_svfprintf_r+0x39a>
  4038d0:	2f10      	cmp	r7, #16
  4038d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038d4:	4d8e      	ldr	r5, [pc, #568]	; (403b10 <_svfprintf_r+0x56c>)
  4038d6:	dd27      	ble.n	403928 <_svfprintf_r+0x384>
  4038d8:	4642      	mov	r2, r8
  4038da:	4621      	mov	r1, r4
  4038dc:	46b0      	mov	r8, r6
  4038de:	f04f 0b10 	mov.w	fp, #16
  4038e2:	462e      	mov	r6, r5
  4038e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4038e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4038e8:	e004      	b.n	4038f4 <_svfprintf_r+0x350>
  4038ea:	3f10      	subs	r7, #16
  4038ec:	2f10      	cmp	r7, #16
  4038ee:	f102 0208 	add.w	r2, r2, #8
  4038f2:	dd15      	ble.n	403920 <_svfprintf_r+0x37c>
  4038f4:	3301      	adds	r3, #1
  4038f6:	3110      	adds	r1, #16
  4038f8:	2b07      	cmp	r3, #7
  4038fa:	9127      	str	r1, [sp, #156]	; 0x9c
  4038fc:	9326      	str	r3, [sp, #152]	; 0x98
  4038fe:	e882 0840 	stmia.w	r2, {r6, fp}
  403902:	ddf2      	ble.n	4038ea <_svfprintf_r+0x346>
  403904:	aa25      	add	r2, sp, #148	; 0x94
  403906:	4629      	mov	r1, r5
  403908:	4620      	mov	r0, r4
  40390a:	f003 fb11 	bl	406f30 <__ssprint_r>
  40390e:	2800      	cmp	r0, #0
  403910:	f47f af1a 	bne.w	403748 <_svfprintf_r+0x1a4>
  403914:	3f10      	subs	r7, #16
  403916:	2f10      	cmp	r7, #16
  403918:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40391a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40391c:	464a      	mov	r2, r9
  40391e:	dce9      	bgt.n	4038f4 <_svfprintf_r+0x350>
  403920:	4635      	mov	r5, r6
  403922:	460c      	mov	r4, r1
  403924:	4646      	mov	r6, r8
  403926:	4690      	mov	r8, r2
  403928:	3301      	adds	r3, #1
  40392a:	443c      	add	r4, r7
  40392c:	2b07      	cmp	r3, #7
  40392e:	9427      	str	r4, [sp, #156]	; 0x9c
  403930:	9326      	str	r3, [sp, #152]	; 0x98
  403932:	e888 00a0 	stmia.w	r8, {r5, r7}
  403936:	f300 837e 	bgt.w	404036 <_svfprintf_r+0xa92>
  40393a:	f108 0808 	add.w	r8, r8, #8
  40393e:	9b07      	ldr	r3, [sp, #28]
  403940:	05df      	lsls	r7, r3, #23
  403942:	f100 8267 	bmi.w	403e14 <_svfprintf_r+0x870>
  403946:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403948:	990e      	ldr	r1, [sp, #56]	; 0x38
  40394a:	f8c8 6000 	str.w	r6, [r8]
  40394e:	3301      	adds	r3, #1
  403950:	440c      	add	r4, r1
  403952:	2b07      	cmp	r3, #7
  403954:	9427      	str	r4, [sp, #156]	; 0x9c
  403956:	f8c8 1004 	str.w	r1, [r8, #4]
  40395a:	9326      	str	r3, [sp, #152]	; 0x98
  40395c:	f300 834a 	bgt.w	403ff4 <_svfprintf_r+0xa50>
  403960:	f108 0808 	add.w	r8, r8, #8
  403964:	9b07      	ldr	r3, [sp, #28]
  403966:	075b      	lsls	r3, r3, #29
  403968:	d53a      	bpl.n	4039e0 <_svfprintf_r+0x43c>
  40396a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40396c:	9a08      	ldr	r2, [sp, #32]
  40396e:	1a9d      	subs	r5, r3, r2
  403970:	2d00      	cmp	r5, #0
  403972:	dd35      	ble.n	4039e0 <_svfprintf_r+0x43c>
  403974:	2d10      	cmp	r5, #16
  403976:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403978:	dd20      	ble.n	4039bc <_svfprintf_r+0x418>
  40397a:	2610      	movs	r6, #16
  40397c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40397e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403982:	e004      	b.n	40398e <_svfprintf_r+0x3ea>
  403984:	3d10      	subs	r5, #16
  403986:	2d10      	cmp	r5, #16
  403988:	f108 0808 	add.w	r8, r8, #8
  40398c:	dd16      	ble.n	4039bc <_svfprintf_r+0x418>
  40398e:	3301      	adds	r3, #1
  403990:	4a5e      	ldr	r2, [pc, #376]	; (403b0c <_svfprintf_r+0x568>)
  403992:	9326      	str	r3, [sp, #152]	; 0x98
  403994:	3410      	adds	r4, #16
  403996:	2b07      	cmp	r3, #7
  403998:	9427      	str	r4, [sp, #156]	; 0x9c
  40399a:	e888 0044 	stmia.w	r8, {r2, r6}
  40399e:	ddf1      	ble.n	403984 <_svfprintf_r+0x3e0>
  4039a0:	aa25      	add	r2, sp, #148	; 0x94
  4039a2:	4659      	mov	r1, fp
  4039a4:	4638      	mov	r0, r7
  4039a6:	f003 fac3 	bl	406f30 <__ssprint_r>
  4039aa:	2800      	cmp	r0, #0
  4039ac:	f47f aecc 	bne.w	403748 <_svfprintf_r+0x1a4>
  4039b0:	3d10      	subs	r5, #16
  4039b2:	2d10      	cmp	r5, #16
  4039b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039b8:	46c8      	mov	r8, r9
  4039ba:	dce8      	bgt.n	40398e <_svfprintf_r+0x3ea>
  4039bc:	3301      	adds	r3, #1
  4039be:	4a53      	ldr	r2, [pc, #332]	; (403b0c <_svfprintf_r+0x568>)
  4039c0:	9326      	str	r3, [sp, #152]	; 0x98
  4039c2:	442c      	add	r4, r5
  4039c4:	2b07      	cmp	r3, #7
  4039c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4039c8:	e888 0024 	stmia.w	r8, {r2, r5}
  4039cc:	dd08      	ble.n	4039e0 <_svfprintf_r+0x43c>
  4039ce:	aa25      	add	r2, sp, #148	; 0x94
  4039d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4039d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039d4:	f003 faac 	bl	406f30 <__ssprint_r>
  4039d8:	2800      	cmp	r0, #0
  4039da:	f47f aeb5 	bne.w	403748 <_svfprintf_r+0x1a4>
  4039de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4039e4:	9908      	ldr	r1, [sp, #32]
  4039e6:	428a      	cmp	r2, r1
  4039e8:	bfac      	ite	ge
  4039ea:	189b      	addge	r3, r3, r2
  4039ec:	185b      	addlt	r3, r3, r1
  4039ee:	9309      	str	r3, [sp, #36]	; 0x24
  4039f0:	2c00      	cmp	r4, #0
  4039f2:	f040 830a 	bne.w	40400a <_svfprintf_r+0xa66>
  4039f6:	2300      	movs	r3, #0
  4039f8:	9326      	str	r3, [sp, #152]	; 0x98
  4039fa:	46c8      	mov	r8, r9
  4039fc:	e5f9      	b.n	4035f2 <_svfprintf_r+0x4e>
  4039fe:	9311      	str	r3, [sp, #68]	; 0x44
  403a00:	f01b 0320 	ands.w	r3, fp, #32
  403a04:	f040 81e2 	bne.w	403dcc <_svfprintf_r+0x828>
  403a08:	f01b 0210 	ands.w	r2, fp, #16
  403a0c:	f040 842c 	bne.w	404268 <_svfprintf_r+0xcc4>
  403a10:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403a14:	f000 8428 	beq.w	404268 <_svfprintf_r+0xcc4>
  403a18:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a1a:	4613      	mov	r3, r2
  403a1c:	460a      	mov	r2, r1
  403a1e:	3204      	adds	r2, #4
  403a20:	880c      	ldrh	r4, [r1, #0]
  403a22:	920f      	str	r2, [sp, #60]	; 0x3c
  403a24:	2500      	movs	r5, #0
  403a26:	e6b0      	b.n	40378a <_svfprintf_r+0x1e6>
  403a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a2a:	9311      	str	r3, [sp, #68]	; 0x44
  403a2c:	6816      	ldr	r6, [r2, #0]
  403a2e:	2400      	movs	r4, #0
  403a30:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403a34:	1d15      	adds	r5, r2, #4
  403a36:	2e00      	cmp	r6, #0
  403a38:	f000 86a5 	beq.w	404786 <_svfprintf_r+0x11e2>
  403a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403a3e:	1c53      	adds	r3, r2, #1
  403a40:	f000 8607 	beq.w	404652 <_svfprintf_r+0x10ae>
  403a44:	4621      	mov	r1, r4
  403a46:	4630      	mov	r0, r6
  403a48:	f002 fbca 	bl	4061e0 <memchr>
  403a4c:	2800      	cmp	r0, #0
  403a4e:	f000 86df 	beq.w	404810 <_svfprintf_r+0x126c>
  403a52:	1b83      	subs	r3, r0, r6
  403a54:	930e      	str	r3, [sp, #56]	; 0x38
  403a56:	940a      	str	r4, [sp, #40]	; 0x28
  403a58:	950f      	str	r5, [sp, #60]	; 0x3c
  403a5a:	f8cd b01c 	str.w	fp, [sp, #28]
  403a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403a62:	9308      	str	r3, [sp, #32]
  403a64:	9412      	str	r4, [sp, #72]	; 0x48
  403a66:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403a6a:	e6b3      	b.n	4037d4 <_svfprintf_r+0x230>
  403a6c:	f89a 3000 	ldrb.w	r3, [sl]
  403a70:	2201      	movs	r2, #1
  403a72:	212b      	movs	r1, #43	; 0x2b
  403a74:	e5ee      	b.n	403654 <_svfprintf_r+0xb0>
  403a76:	f04b 0b20 	orr.w	fp, fp, #32
  403a7a:	f89a 3000 	ldrb.w	r3, [sl]
  403a7e:	e5e9      	b.n	403654 <_svfprintf_r+0xb0>
  403a80:	9311      	str	r3, [sp, #68]	; 0x44
  403a82:	2a00      	cmp	r2, #0
  403a84:	f040 878d 	bne.w	4049a2 <_svfprintf_r+0x13fe>
  403a88:	4b22      	ldr	r3, [pc, #136]	; (403b14 <_svfprintf_r+0x570>)
  403a8a:	9318      	str	r3, [sp, #96]	; 0x60
  403a8c:	f01b 0f20 	tst.w	fp, #32
  403a90:	f040 8111 	bne.w	403cb6 <_svfprintf_r+0x712>
  403a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a96:	f01b 0f10 	tst.w	fp, #16
  403a9a:	4613      	mov	r3, r2
  403a9c:	f040 83df 	bne.w	40425e <_svfprintf_r+0xcba>
  403aa0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403aa4:	f000 83db 	beq.w	40425e <_svfprintf_r+0xcba>
  403aa8:	3304      	adds	r3, #4
  403aaa:	8814      	ldrh	r4, [r2, #0]
  403aac:	930f      	str	r3, [sp, #60]	; 0x3c
  403aae:	2500      	movs	r5, #0
  403ab0:	f01b 0f01 	tst.w	fp, #1
  403ab4:	f000 810c 	beq.w	403cd0 <_svfprintf_r+0x72c>
  403ab8:	ea54 0305 	orrs.w	r3, r4, r5
  403abc:	f000 8108 	beq.w	403cd0 <_svfprintf_r+0x72c>
  403ac0:	2330      	movs	r3, #48	; 0x30
  403ac2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403ac6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403aca:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403ace:	f04b 0b02 	orr.w	fp, fp, #2
  403ad2:	2302      	movs	r3, #2
  403ad4:	e659      	b.n	40378a <_svfprintf_r+0x1e6>
  403ad6:	f89a 3000 	ldrb.w	r3, [sl]
  403ada:	2900      	cmp	r1, #0
  403adc:	f47f adba 	bne.w	403654 <_svfprintf_r+0xb0>
  403ae0:	2201      	movs	r2, #1
  403ae2:	2120      	movs	r1, #32
  403ae4:	e5b6      	b.n	403654 <_svfprintf_r+0xb0>
  403ae6:	f04b 0b01 	orr.w	fp, fp, #1
  403aea:	f89a 3000 	ldrb.w	r3, [sl]
  403aee:	e5b1      	b.n	403654 <_svfprintf_r+0xb0>
  403af0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403af2:	6823      	ldr	r3, [r4, #0]
  403af4:	930d      	str	r3, [sp, #52]	; 0x34
  403af6:	4618      	mov	r0, r3
  403af8:	2800      	cmp	r0, #0
  403afa:	4623      	mov	r3, r4
  403afc:	f103 0304 	add.w	r3, r3, #4
  403b00:	f6ff ae0a 	blt.w	403718 <_svfprintf_r+0x174>
  403b04:	930f      	str	r3, [sp, #60]	; 0x3c
  403b06:	f89a 3000 	ldrb.w	r3, [sl]
  403b0a:	e5a3      	b.n	403654 <_svfprintf_r+0xb0>
  403b0c:	00407c84 	.word	0x00407c84
  403b10:	00407c94 	.word	0x00407c94
  403b14:	00407c64 	.word	0x00407c64
  403b18:	f04b 0b10 	orr.w	fp, fp, #16
  403b1c:	f01b 0f20 	tst.w	fp, #32
  403b20:	9311      	str	r3, [sp, #68]	; 0x44
  403b22:	f43f ae23 	beq.w	40376c <_svfprintf_r+0x1c8>
  403b26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b28:	3507      	adds	r5, #7
  403b2a:	f025 0307 	bic.w	r3, r5, #7
  403b2e:	f103 0208 	add.w	r2, r3, #8
  403b32:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b36:	920f      	str	r2, [sp, #60]	; 0x3c
  403b38:	2301      	movs	r3, #1
  403b3a:	e626      	b.n	40378a <_svfprintf_r+0x1e6>
  403b3c:	f89a 3000 	ldrb.w	r3, [sl]
  403b40:	2b2a      	cmp	r3, #42	; 0x2a
  403b42:	f10a 0401 	add.w	r4, sl, #1
  403b46:	f000 871f 	beq.w	404988 <_svfprintf_r+0x13e4>
  403b4a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b4e:	2809      	cmp	r0, #9
  403b50:	46a2      	mov	sl, r4
  403b52:	f200 86ab 	bhi.w	4048ac <_svfprintf_r+0x1308>
  403b56:	2300      	movs	r3, #0
  403b58:	461c      	mov	r4, r3
  403b5a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403b62:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403b66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b6a:	2809      	cmp	r0, #9
  403b6c:	d9f5      	bls.n	403b5a <_svfprintf_r+0x5b6>
  403b6e:	940a      	str	r4, [sp, #40]	; 0x28
  403b70:	e572      	b.n	403658 <_svfprintf_r+0xb4>
  403b72:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403b76:	f89a 3000 	ldrb.w	r3, [sl]
  403b7a:	e56b      	b.n	403654 <_svfprintf_r+0xb0>
  403b7c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403b80:	f89a 3000 	ldrb.w	r3, [sl]
  403b84:	e566      	b.n	403654 <_svfprintf_r+0xb0>
  403b86:	f89a 3000 	ldrb.w	r3, [sl]
  403b8a:	2b6c      	cmp	r3, #108	; 0x6c
  403b8c:	bf03      	ittte	eq
  403b8e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403b92:	f04b 0b20 	orreq.w	fp, fp, #32
  403b96:	f10a 0a01 	addeq.w	sl, sl, #1
  403b9a:	f04b 0b10 	orrne.w	fp, fp, #16
  403b9e:	e559      	b.n	403654 <_svfprintf_r+0xb0>
  403ba0:	2a00      	cmp	r2, #0
  403ba2:	f040 8709 	bne.w	4049b8 <_svfprintf_r+0x1414>
  403ba6:	f01b 0f20 	tst.w	fp, #32
  403baa:	f040 84f7 	bne.w	40459c <_svfprintf_r+0xff8>
  403bae:	f01b 0f10 	tst.w	fp, #16
  403bb2:	f040 84aa 	bne.w	40450a <_svfprintf_r+0xf66>
  403bb6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bba:	f000 84a6 	beq.w	40450a <_svfprintf_r+0xf66>
  403bbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bc0:	6813      	ldr	r3, [r2, #0]
  403bc2:	3204      	adds	r2, #4
  403bc4:	920f      	str	r2, [sp, #60]	; 0x3c
  403bc6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403bca:	801a      	strh	r2, [r3, #0]
  403bcc:	e511      	b.n	4035f2 <_svfprintf_r+0x4e>
  403bce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bd0:	4bb2      	ldr	r3, [pc, #712]	; (403e9c <_svfprintf_r+0x8f8>)
  403bd2:	680c      	ldr	r4, [r1, #0]
  403bd4:	9318      	str	r3, [sp, #96]	; 0x60
  403bd6:	2230      	movs	r2, #48	; 0x30
  403bd8:	2378      	movs	r3, #120	; 0x78
  403bda:	3104      	adds	r1, #4
  403bdc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403be0:	9311      	str	r3, [sp, #68]	; 0x44
  403be2:	f04b 0b02 	orr.w	fp, fp, #2
  403be6:	910f      	str	r1, [sp, #60]	; 0x3c
  403be8:	2500      	movs	r5, #0
  403bea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403bee:	2302      	movs	r3, #2
  403bf0:	e5cb      	b.n	40378a <_svfprintf_r+0x1e6>
  403bf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403bf4:	9311      	str	r3, [sp, #68]	; 0x44
  403bf6:	680a      	ldr	r2, [r1, #0]
  403bf8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403bfc:	2300      	movs	r3, #0
  403bfe:	460a      	mov	r2, r1
  403c00:	461f      	mov	r7, r3
  403c02:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c06:	3204      	adds	r2, #4
  403c08:	2301      	movs	r3, #1
  403c0a:	9308      	str	r3, [sp, #32]
  403c0c:	f8cd b01c 	str.w	fp, [sp, #28]
  403c10:	970a      	str	r7, [sp, #40]	; 0x28
  403c12:	9712      	str	r7, [sp, #72]	; 0x48
  403c14:	920f      	str	r2, [sp, #60]	; 0x3c
  403c16:	930e      	str	r3, [sp, #56]	; 0x38
  403c18:	ae28      	add	r6, sp, #160	; 0xa0
  403c1a:	e5df      	b.n	4037dc <_svfprintf_r+0x238>
  403c1c:	9311      	str	r3, [sp, #68]	; 0x44
  403c1e:	2a00      	cmp	r2, #0
  403c20:	f040 86e2 	bne.w	4049e8 <_svfprintf_r+0x1444>
  403c24:	f01b 0f20 	tst.w	fp, #32
  403c28:	d15d      	bne.n	403ce6 <_svfprintf_r+0x742>
  403c2a:	f01b 0f10 	tst.w	fp, #16
  403c2e:	f040 8306 	bne.w	40423e <_svfprintf_r+0xc9a>
  403c32:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c36:	f000 8302 	beq.w	40423e <_svfprintf_r+0xc9a>
  403c3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c3c:	f9b1 4000 	ldrsh.w	r4, [r1]
  403c40:	3104      	adds	r1, #4
  403c42:	17e5      	asrs	r5, r4, #31
  403c44:	4622      	mov	r2, r4
  403c46:	462b      	mov	r3, r5
  403c48:	910f      	str	r1, [sp, #60]	; 0x3c
  403c4a:	2a00      	cmp	r2, #0
  403c4c:	f173 0300 	sbcs.w	r3, r3, #0
  403c50:	db58      	blt.n	403d04 <_svfprintf_r+0x760>
  403c52:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c54:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c58:	1c4a      	adds	r2, r1, #1
  403c5a:	f04f 0301 	mov.w	r3, #1
  403c5e:	f47f ad9b 	bne.w	403798 <_svfprintf_r+0x1f4>
  403c62:	ea54 0205 	orrs.w	r2, r4, r5
  403c66:	f000 81dc 	beq.w	404022 <_svfprintf_r+0xa7e>
  403c6a:	f8cd b01c 	str.w	fp, [sp, #28]
  403c6e:	2b01      	cmp	r3, #1
  403c70:	f000 8278 	beq.w	404164 <_svfprintf_r+0xbc0>
  403c74:	2b02      	cmp	r3, #2
  403c76:	f040 8203 	bne.w	404080 <_svfprintf_r+0xadc>
  403c7a:	9818      	ldr	r0, [sp, #96]	; 0x60
  403c7c:	464e      	mov	r6, r9
  403c7e:	0923      	lsrs	r3, r4, #4
  403c80:	f004 010f 	and.w	r1, r4, #15
  403c84:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403c88:	092a      	lsrs	r2, r5, #4
  403c8a:	461c      	mov	r4, r3
  403c8c:	4615      	mov	r5, r2
  403c8e:	5c43      	ldrb	r3, [r0, r1]
  403c90:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403c94:	ea54 0305 	orrs.w	r3, r4, r5
  403c98:	d1f1      	bne.n	403c7e <_svfprintf_r+0x6da>
  403c9a:	eba9 0306 	sub.w	r3, r9, r6
  403c9e:	930e      	str	r3, [sp, #56]	; 0x38
  403ca0:	e590      	b.n	4037c4 <_svfprintf_r+0x220>
  403ca2:	9311      	str	r3, [sp, #68]	; 0x44
  403ca4:	2a00      	cmp	r2, #0
  403ca6:	f040 869b 	bne.w	4049e0 <_svfprintf_r+0x143c>
  403caa:	4b7d      	ldr	r3, [pc, #500]	; (403ea0 <_svfprintf_r+0x8fc>)
  403cac:	9318      	str	r3, [sp, #96]	; 0x60
  403cae:	f01b 0f20 	tst.w	fp, #32
  403cb2:	f43f aeef 	beq.w	403a94 <_svfprintf_r+0x4f0>
  403cb6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cb8:	3507      	adds	r5, #7
  403cba:	f025 0307 	bic.w	r3, r5, #7
  403cbe:	f103 0208 	add.w	r2, r3, #8
  403cc2:	f01b 0f01 	tst.w	fp, #1
  403cc6:	920f      	str	r2, [sp, #60]	; 0x3c
  403cc8:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ccc:	f47f aef4 	bne.w	403ab8 <_svfprintf_r+0x514>
  403cd0:	2302      	movs	r3, #2
  403cd2:	e55a      	b.n	40378a <_svfprintf_r+0x1e6>
  403cd4:	9311      	str	r3, [sp, #68]	; 0x44
  403cd6:	2a00      	cmp	r2, #0
  403cd8:	f040 867e 	bne.w	4049d8 <_svfprintf_r+0x1434>
  403cdc:	f04b 0b10 	orr.w	fp, fp, #16
  403ce0:	f01b 0f20 	tst.w	fp, #32
  403ce4:	d0a1      	beq.n	403c2a <_svfprintf_r+0x686>
  403ce6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ce8:	3507      	adds	r5, #7
  403cea:	f025 0507 	bic.w	r5, r5, #7
  403cee:	e9d5 2300 	ldrd	r2, r3, [r5]
  403cf2:	2a00      	cmp	r2, #0
  403cf4:	f105 0108 	add.w	r1, r5, #8
  403cf8:	461d      	mov	r5, r3
  403cfa:	f173 0300 	sbcs.w	r3, r3, #0
  403cfe:	910f      	str	r1, [sp, #60]	; 0x3c
  403d00:	4614      	mov	r4, r2
  403d02:	daa6      	bge.n	403c52 <_svfprintf_r+0x6ae>
  403d04:	272d      	movs	r7, #45	; 0x2d
  403d06:	4264      	negs	r4, r4
  403d08:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403d0c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d10:	2301      	movs	r3, #1
  403d12:	e53d      	b.n	403790 <_svfprintf_r+0x1ec>
  403d14:	9311      	str	r3, [sp, #68]	; 0x44
  403d16:	2a00      	cmp	r2, #0
  403d18:	f040 865a 	bne.w	4049d0 <_svfprintf_r+0x142c>
  403d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d1e:	3507      	adds	r5, #7
  403d20:	f025 0307 	bic.w	r3, r5, #7
  403d24:	f103 0208 	add.w	r2, r3, #8
  403d28:	920f      	str	r2, [sp, #60]	; 0x3c
  403d2a:	681a      	ldr	r2, [r3, #0]
  403d2c:	9214      	str	r2, [sp, #80]	; 0x50
  403d2e:	685b      	ldr	r3, [r3, #4]
  403d30:	9315      	str	r3, [sp, #84]	; 0x54
  403d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403d34:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403d36:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403d3a:	4628      	mov	r0, r5
  403d3c:	4621      	mov	r1, r4
  403d3e:	f04f 32ff 	mov.w	r2, #4294967295
  403d42:	4b58      	ldr	r3, [pc, #352]	; (403ea4 <_svfprintf_r+0x900>)
  403d44:	f003 fe54 	bl	4079f0 <__aeabi_dcmpun>
  403d48:	2800      	cmp	r0, #0
  403d4a:	f040 8348 	bne.w	4043de <_svfprintf_r+0xe3a>
  403d4e:	4628      	mov	r0, r5
  403d50:	4621      	mov	r1, r4
  403d52:	f04f 32ff 	mov.w	r2, #4294967295
  403d56:	4b53      	ldr	r3, [pc, #332]	; (403ea4 <_svfprintf_r+0x900>)
  403d58:	f003 fe2c 	bl	4079b4 <__aeabi_dcmple>
  403d5c:	2800      	cmp	r0, #0
  403d5e:	f040 833e 	bne.w	4043de <_svfprintf_r+0xe3a>
  403d62:	a814      	add	r0, sp, #80	; 0x50
  403d64:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403d66:	f003 fe1b 	bl	4079a0 <__aeabi_dcmplt>
  403d6a:	2800      	cmp	r0, #0
  403d6c:	f040 852f 	bne.w	4047ce <_svfprintf_r+0x122a>
  403d70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d74:	4e4c      	ldr	r6, [pc, #304]	; (403ea8 <_svfprintf_r+0x904>)
  403d76:	4b4d      	ldr	r3, [pc, #308]	; (403eac <_svfprintf_r+0x908>)
  403d78:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403d7c:	9007      	str	r0, [sp, #28]
  403d7e:	9811      	ldr	r0, [sp, #68]	; 0x44
  403d80:	2203      	movs	r2, #3
  403d82:	2100      	movs	r1, #0
  403d84:	9208      	str	r2, [sp, #32]
  403d86:	910a      	str	r1, [sp, #40]	; 0x28
  403d88:	2847      	cmp	r0, #71	; 0x47
  403d8a:	bfd8      	it	le
  403d8c:	461e      	movle	r6, r3
  403d8e:	920e      	str	r2, [sp, #56]	; 0x38
  403d90:	9112      	str	r1, [sp, #72]	; 0x48
  403d92:	e51f      	b.n	4037d4 <_svfprintf_r+0x230>
  403d94:	f04b 0b08 	orr.w	fp, fp, #8
  403d98:	f89a 3000 	ldrb.w	r3, [sl]
  403d9c:	e45a      	b.n	403654 <_svfprintf_r+0xb0>
  403d9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403da2:	2300      	movs	r3, #0
  403da4:	461c      	mov	r4, r3
  403da6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403daa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403dae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403db2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403db6:	2809      	cmp	r0, #9
  403db8:	d9f5      	bls.n	403da6 <_svfprintf_r+0x802>
  403dba:	940d      	str	r4, [sp, #52]	; 0x34
  403dbc:	e44c      	b.n	403658 <_svfprintf_r+0xb4>
  403dbe:	f04b 0b10 	orr.w	fp, fp, #16
  403dc2:	9311      	str	r3, [sp, #68]	; 0x44
  403dc4:	f01b 0320 	ands.w	r3, fp, #32
  403dc8:	f43f ae1e 	beq.w	403a08 <_svfprintf_r+0x464>
  403dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403dce:	3507      	adds	r5, #7
  403dd0:	f025 0307 	bic.w	r3, r5, #7
  403dd4:	f103 0208 	add.w	r2, r3, #8
  403dd8:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ddc:	920f      	str	r2, [sp, #60]	; 0x3c
  403dde:	2300      	movs	r3, #0
  403de0:	e4d3      	b.n	40378a <_svfprintf_r+0x1e6>
  403de2:	9311      	str	r3, [sp, #68]	; 0x44
  403de4:	2a00      	cmp	r2, #0
  403de6:	f040 85e0 	bne.w	4049aa <_svfprintf_r+0x1406>
  403dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403dec:	2a00      	cmp	r2, #0
  403dee:	f43f aca4 	beq.w	40373a <_svfprintf_r+0x196>
  403df2:	2300      	movs	r3, #0
  403df4:	2101      	movs	r1, #1
  403df6:	461f      	mov	r7, r3
  403df8:	9108      	str	r1, [sp, #32]
  403dfa:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403dfe:	f8cd b01c 	str.w	fp, [sp, #28]
  403e02:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e06:	930a      	str	r3, [sp, #40]	; 0x28
  403e08:	9312      	str	r3, [sp, #72]	; 0x48
  403e0a:	910e      	str	r1, [sp, #56]	; 0x38
  403e0c:	ae28      	add	r6, sp, #160	; 0xa0
  403e0e:	e4e5      	b.n	4037dc <_svfprintf_r+0x238>
  403e10:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e12:	e535      	b.n	403880 <_svfprintf_r+0x2dc>
  403e14:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e16:	2b65      	cmp	r3, #101	; 0x65
  403e18:	f340 80a6 	ble.w	403f68 <_svfprintf_r+0x9c4>
  403e1c:	a814      	add	r0, sp, #80	; 0x50
  403e1e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403e20:	f003 fdb4 	bl	40798c <__aeabi_dcmpeq>
  403e24:	2800      	cmp	r0, #0
  403e26:	f000 814f 	beq.w	4040c8 <_svfprintf_r+0xb24>
  403e2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e2c:	4a20      	ldr	r2, [pc, #128]	; (403eb0 <_svfprintf_r+0x90c>)
  403e2e:	f8c8 2000 	str.w	r2, [r8]
  403e32:	3301      	adds	r3, #1
  403e34:	3401      	adds	r4, #1
  403e36:	2201      	movs	r2, #1
  403e38:	2b07      	cmp	r3, #7
  403e3a:	9427      	str	r4, [sp, #156]	; 0x9c
  403e3c:	9326      	str	r3, [sp, #152]	; 0x98
  403e3e:	f8c8 2004 	str.w	r2, [r8, #4]
  403e42:	f300 836a 	bgt.w	40451a <_svfprintf_r+0xf76>
  403e46:	f108 0808 	add.w	r8, r8, #8
  403e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403e4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e50:	4293      	cmp	r3, r2
  403e52:	db03      	blt.n	403e5c <_svfprintf_r+0x8b8>
  403e54:	9b07      	ldr	r3, [sp, #28]
  403e56:	07dd      	lsls	r5, r3, #31
  403e58:	f57f ad84 	bpl.w	403964 <_svfprintf_r+0x3c0>
  403e5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e5e:	9919      	ldr	r1, [sp, #100]	; 0x64
  403e60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403e62:	f8c8 2000 	str.w	r2, [r8]
  403e66:	3301      	adds	r3, #1
  403e68:	440c      	add	r4, r1
  403e6a:	2b07      	cmp	r3, #7
  403e6c:	f8c8 1004 	str.w	r1, [r8, #4]
  403e70:	9427      	str	r4, [sp, #156]	; 0x9c
  403e72:	9326      	str	r3, [sp, #152]	; 0x98
  403e74:	f300 839e 	bgt.w	4045b4 <_svfprintf_r+0x1010>
  403e78:	f108 0808 	add.w	r8, r8, #8
  403e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e7e:	1e5e      	subs	r6, r3, #1
  403e80:	2e00      	cmp	r6, #0
  403e82:	f77f ad6f 	ble.w	403964 <_svfprintf_r+0x3c0>
  403e86:	2e10      	cmp	r6, #16
  403e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e8a:	4d0a      	ldr	r5, [pc, #40]	; (403eb4 <_svfprintf_r+0x910>)
  403e8c:	f340 81f5 	ble.w	40427a <_svfprintf_r+0xcd6>
  403e90:	4622      	mov	r2, r4
  403e92:	2710      	movs	r7, #16
  403e94:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403e98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403e9a:	e013      	b.n	403ec4 <_svfprintf_r+0x920>
  403e9c:	00407c64 	.word	0x00407c64
  403ea0:	00407c50 	.word	0x00407c50
  403ea4:	7fefffff 	.word	0x7fefffff
  403ea8:	00407c44 	.word	0x00407c44
  403eac:	00407c40 	.word	0x00407c40
  403eb0:	00407c80 	.word	0x00407c80
  403eb4:	00407c94 	.word	0x00407c94
  403eb8:	f108 0808 	add.w	r8, r8, #8
  403ebc:	3e10      	subs	r6, #16
  403ebe:	2e10      	cmp	r6, #16
  403ec0:	f340 81da 	ble.w	404278 <_svfprintf_r+0xcd4>
  403ec4:	3301      	adds	r3, #1
  403ec6:	3210      	adds	r2, #16
  403ec8:	2b07      	cmp	r3, #7
  403eca:	9227      	str	r2, [sp, #156]	; 0x9c
  403ecc:	9326      	str	r3, [sp, #152]	; 0x98
  403ece:	e888 00a0 	stmia.w	r8, {r5, r7}
  403ed2:	ddf1      	ble.n	403eb8 <_svfprintf_r+0x914>
  403ed4:	aa25      	add	r2, sp, #148	; 0x94
  403ed6:	4621      	mov	r1, r4
  403ed8:	4658      	mov	r0, fp
  403eda:	f003 f829 	bl	406f30 <__ssprint_r>
  403ede:	2800      	cmp	r0, #0
  403ee0:	f47f ac32 	bne.w	403748 <_svfprintf_r+0x1a4>
  403ee4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403ee6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ee8:	46c8      	mov	r8, r9
  403eea:	e7e7      	b.n	403ebc <_svfprintf_r+0x918>
  403eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403eee:	9a08      	ldr	r2, [sp, #32]
  403ef0:	1a9f      	subs	r7, r3, r2
  403ef2:	2f00      	cmp	r7, #0
  403ef4:	f77f ace7 	ble.w	4038c6 <_svfprintf_r+0x322>
  403ef8:	2f10      	cmp	r7, #16
  403efa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403efc:	4db6      	ldr	r5, [pc, #728]	; (4041d8 <_svfprintf_r+0xc34>)
  403efe:	dd27      	ble.n	403f50 <_svfprintf_r+0x9ac>
  403f00:	4642      	mov	r2, r8
  403f02:	4621      	mov	r1, r4
  403f04:	46b0      	mov	r8, r6
  403f06:	f04f 0b10 	mov.w	fp, #16
  403f0a:	462e      	mov	r6, r5
  403f0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f10:	e004      	b.n	403f1c <_svfprintf_r+0x978>
  403f12:	3f10      	subs	r7, #16
  403f14:	2f10      	cmp	r7, #16
  403f16:	f102 0208 	add.w	r2, r2, #8
  403f1a:	dd15      	ble.n	403f48 <_svfprintf_r+0x9a4>
  403f1c:	3301      	adds	r3, #1
  403f1e:	3110      	adds	r1, #16
  403f20:	2b07      	cmp	r3, #7
  403f22:	9127      	str	r1, [sp, #156]	; 0x9c
  403f24:	9326      	str	r3, [sp, #152]	; 0x98
  403f26:	e882 0840 	stmia.w	r2, {r6, fp}
  403f2a:	ddf2      	ble.n	403f12 <_svfprintf_r+0x96e>
  403f2c:	aa25      	add	r2, sp, #148	; 0x94
  403f2e:	4629      	mov	r1, r5
  403f30:	4620      	mov	r0, r4
  403f32:	f002 fffd 	bl	406f30 <__ssprint_r>
  403f36:	2800      	cmp	r0, #0
  403f38:	f47f ac06 	bne.w	403748 <_svfprintf_r+0x1a4>
  403f3c:	3f10      	subs	r7, #16
  403f3e:	2f10      	cmp	r7, #16
  403f40:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f44:	464a      	mov	r2, r9
  403f46:	dce9      	bgt.n	403f1c <_svfprintf_r+0x978>
  403f48:	4635      	mov	r5, r6
  403f4a:	460c      	mov	r4, r1
  403f4c:	4646      	mov	r6, r8
  403f4e:	4690      	mov	r8, r2
  403f50:	3301      	adds	r3, #1
  403f52:	443c      	add	r4, r7
  403f54:	2b07      	cmp	r3, #7
  403f56:	9427      	str	r4, [sp, #156]	; 0x9c
  403f58:	9326      	str	r3, [sp, #152]	; 0x98
  403f5a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f5e:	f300 8232 	bgt.w	4043c6 <_svfprintf_r+0xe22>
  403f62:	f108 0808 	add.w	r8, r8, #8
  403f66:	e4ae      	b.n	4038c6 <_svfprintf_r+0x322>
  403f68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f6a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403f6c:	2b01      	cmp	r3, #1
  403f6e:	f340 81fe 	ble.w	40436e <_svfprintf_r+0xdca>
  403f72:	3701      	adds	r7, #1
  403f74:	3401      	adds	r4, #1
  403f76:	2301      	movs	r3, #1
  403f78:	2f07      	cmp	r7, #7
  403f7a:	9427      	str	r4, [sp, #156]	; 0x9c
  403f7c:	9726      	str	r7, [sp, #152]	; 0x98
  403f7e:	f8c8 6000 	str.w	r6, [r8]
  403f82:	f8c8 3004 	str.w	r3, [r8, #4]
  403f86:	f300 8203 	bgt.w	404390 <_svfprintf_r+0xdec>
  403f8a:	f108 0808 	add.w	r8, r8, #8
  403f8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403f90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403f92:	f8c8 3000 	str.w	r3, [r8]
  403f96:	3701      	adds	r7, #1
  403f98:	4414      	add	r4, r2
  403f9a:	2f07      	cmp	r7, #7
  403f9c:	9427      	str	r4, [sp, #156]	; 0x9c
  403f9e:	9726      	str	r7, [sp, #152]	; 0x98
  403fa0:	f8c8 2004 	str.w	r2, [r8, #4]
  403fa4:	f300 8200 	bgt.w	4043a8 <_svfprintf_r+0xe04>
  403fa8:	f108 0808 	add.w	r8, r8, #8
  403fac:	a814      	add	r0, sp, #80	; 0x50
  403fae:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403fb0:	f003 fcec 	bl	40798c <__aeabi_dcmpeq>
  403fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403fb6:	2800      	cmp	r0, #0
  403fb8:	f040 8101 	bne.w	4041be <_svfprintf_r+0xc1a>
  403fbc:	3b01      	subs	r3, #1
  403fbe:	3701      	adds	r7, #1
  403fc0:	3601      	adds	r6, #1
  403fc2:	441c      	add	r4, r3
  403fc4:	2f07      	cmp	r7, #7
  403fc6:	9726      	str	r7, [sp, #152]	; 0x98
  403fc8:	9427      	str	r4, [sp, #156]	; 0x9c
  403fca:	f8c8 6000 	str.w	r6, [r8]
  403fce:	f8c8 3004 	str.w	r3, [r8, #4]
  403fd2:	f300 8128 	bgt.w	404226 <_svfprintf_r+0xc82>
  403fd6:	f108 0808 	add.w	r8, r8, #8
  403fda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403fdc:	f8c8 2004 	str.w	r2, [r8, #4]
  403fe0:	3701      	adds	r7, #1
  403fe2:	4414      	add	r4, r2
  403fe4:	ab21      	add	r3, sp, #132	; 0x84
  403fe6:	2f07      	cmp	r7, #7
  403fe8:	9427      	str	r4, [sp, #156]	; 0x9c
  403fea:	9726      	str	r7, [sp, #152]	; 0x98
  403fec:	f8c8 3000 	str.w	r3, [r8]
  403ff0:	f77f acb6 	ble.w	403960 <_svfprintf_r+0x3bc>
  403ff4:	aa25      	add	r2, sp, #148	; 0x94
  403ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ff8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ffa:	f002 ff99 	bl	406f30 <__ssprint_r>
  403ffe:	2800      	cmp	r0, #0
  404000:	f47f aba2 	bne.w	403748 <_svfprintf_r+0x1a4>
  404004:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404006:	46c8      	mov	r8, r9
  404008:	e4ac      	b.n	403964 <_svfprintf_r+0x3c0>
  40400a:	aa25      	add	r2, sp, #148	; 0x94
  40400c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40400e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404010:	f002 ff8e 	bl	406f30 <__ssprint_r>
  404014:	2800      	cmp	r0, #0
  404016:	f43f acee 	beq.w	4039f6 <_svfprintf_r+0x452>
  40401a:	f7ff bb95 	b.w	403748 <_svfprintf_r+0x1a4>
  40401e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404022:	2b01      	cmp	r3, #1
  404024:	f000 8135 	beq.w	404292 <_svfprintf_r+0xcee>
  404028:	2b02      	cmp	r3, #2
  40402a:	d125      	bne.n	404078 <_svfprintf_r+0xad4>
  40402c:	f8cd b01c 	str.w	fp, [sp, #28]
  404030:	2400      	movs	r4, #0
  404032:	2500      	movs	r5, #0
  404034:	e621      	b.n	403c7a <_svfprintf_r+0x6d6>
  404036:	aa25      	add	r2, sp, #148	; 0x94
  404038:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40403a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40403c:	f002 ff78 	bl	406f30 <__ssprint_r>
  404040:	2800      	cmp	r0, #0
  404042:	f47f ab81 	bne.w	403748 <_svfprintf_r+0x1a4>
  404046:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404048:	46c8      	mov	r8, r9
  40404a:	e478      	b.n	40393e <_svfprintf_r+0x39a>
  40404c:	aa25      	add	r2, sp, #148	; 0x94
  40404e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404050:	980c      	ldr	r0, [sp, #48]	; 0x30
  404052:	f002 ff6d 	bl	406f30 <__ssprint_r>
  404056:	2800      	cmp	r0, #0
  404058:	f47f ab76 	bne.w	403748 <_svfprintf_r+0x1a4>
  40405c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40405e:	46c8      	mov	r8, r9
  404060:	e41e      	b.n	4038a0 <_svfprintf_r+0x2fc>
  404062:	aa25      	add	r2, sp, #148	; 0x94
  404064:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404066:	980c      	ldr	r0, [sp, #48]	; 0x30
  404068:	f002 ff62 	bl	406f30 <__ssprint_r>
  40406c:	2800      	cmp	r0, #0
  40406e:	f47f ab6b 	bne.w	403748 <_svfprintf_r+0x1a4>
  404072:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404074:	46c8      	mov	r8, r9
  404076:	e423      	b.n	4038c0 <_svfprintf_r+0x31c>
  404078:	f8cd b01c 	str.w	fp, [sp, #28]
  40407c:	2400      	movs	r4, #0
  40407e:	2500      	movs	r5, #0
  404080:	4649      	mov	r1, r9
  404082:	e000      	b.n	404086 <_svfprintf_r+0xae2>
  404084:	4631      	mov	r1, r6
  404086:	08e2      	lsrs	r2, r4, #3
  404088:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40408c:	08e8      	lsrs	r0, r5, #3
  40408e:	f004 0307 	and.w	r3, r4, #7
  404092:	4605      	mov	r5, r0
  404094:	4614      	mov	r4, r2
  404096:	3330      	adds	r3, #48	; 0x30
  404098:	ea54 0205 	orrs.w	r2, r4, r5
  40409c:	f801 3c01 	strb.w	r3, [r1, #-1]
  4040a0:	f101 36ff 	add.w	r6, r1, #4294967295
  4040a4:	d1ee      	bne.n	404084 <_svfprintf_r+0xae0>
  4040a6:	9a07      	ldr	r2, [sp, #28]
  4040a8:	07d2      	lsls	r2, r2, #31
  4040aa:	f57f adf6 	bpl.w	403c9a <_svfprintf_r+0x6f6>
  4040ae:	2b30      	cmp	r3, #48	; 0x30
  4040b0:	f43f adf3 	beq.w	403c9a <_svfprintf_r+0x6f6>
  4040b4:	3902      	subs	r1, #2
  4040b6:	2330      	movs	r3, #48	; 0x30
  4040b8:	f806 3c01 	strb.w	r3, [r6, #-1]
  4040bc:	eba9 0301 	sub.w	r3, r9, r1
  4040c0:	930e      	str	r3, [sp, #56]	; 0x38
  4040c2:	460e      	mov	r6, r1
  4040c4:	f7ff bb7e 	b.w	4037c4 <_svfprintf_r+0x220>
  4040c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4040ca:	2900      	cmp	r1, #0
  4040cc:	f340 822f 	ble.w	40452e <_svfprintf_r+0xf8a>
  4040d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4040d4:	4293      	cmp	r3, r2
  4040d6:	bfa8      	it	ge
  4040d8:	4613      	movge	r3, r2
  4040da:	2b00      	cmp	r3, #0
  4040dc:	461f      	mov	r7, r3
  4040de:	dd0d      	ble.n	4040fc <_svfprintf_r+0xb58>
  4040e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040e2:	f8c8 6000 	str.w	r6, [r8]
  4040e6:	3301      	adds	r3, #1
  4040e8:	443c      	add	r4, r7
  4040ea:	2b07      	cmp	r3, #7
  4040ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4040ee:	f8c8 7004 	str.w	r7, [r8, #4]
  4040f2:	9326      	str	r3, [sp, #152]	; 0x98
  4040f4:	f300 8320 	bgt.w	404738 <_svfprintf_r+0x1194>
  4040f8:	f108 0808 	add.w	r8, r8, #8
  4040fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4040fe:	2f00      	cmp	r7, #0
  404100:	bfa8      	it	ge
  404102:	1bdb      	subge	r3, r3, r7
  404104:	2b00      	cmp	r3, #0
  404106:	461f      	mov	r7, r3
  404108:	f340 80d7 	ble.w	4042ba <_svfprintf_r+0xd16>
  40410c:	2f10      	cmp	r7, #16
  40410e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404110:	4d31      	ldr	r5, [pc, #196]	; (4041d8 <_svfprintf_r+0xc34>)
  404112:	f340 81ee 	ble.w	4044f2 <_svfprintf_r+0xf4e>
  404116:	4642      	mov	r2, r8
  404118:	4621      	mov	r1, r4
  40411a:	46b0      	mov	r8, r6
  40411c:	f04f 0b10 	mov.w	fp, #16
  404120:	462e      	mov	r6, r5
  404122:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404124:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404126:	e004      	b.n	404132 <_svfprintf_r+0xb8e>
  404128:	3208      	adds	r2, #8
  40412a:	3f10      	subs	r7, #16
  40412c:	2f10      	cmp	r7, #16
  40412e:	f340 81dc 	ble.w	4044ea <_svfprintf_r+0xf46>
  404132:	3301      	adds	r3, #1
  404134:	3110      	adds	r1, #16
  404136:	2b07      	cmp	r3, #7
  404138:	9127      	str	r1, [sp, #156]	; 0x9c
  40413a:	9326      	str	r3, [sp, #152]	; 0x98
  40413c:	e882 0840 	stmia.w	r2, {r6, fp}
  404140:	ddf2      	ble.n	404128 <_svfprintf_r+0xb84>
  404142:	aa25      	add	r2, sp, #148	; 0x94
  404144:	4629      	mov	r1, r5
  404146:	4620      	mov	r0, r4
  404148:	f002 fef2 	bl	406f30 <__ssprint_r>
  40414c:	2800      	cmp	r0, #0
  40414e:	f47f aafb 	bne.w	403748 <_svfprintf_r+0x1a4>
  404152:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404154:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404156:	464a      	mov	r2, r9
  404158:	e7e7      	b.n	40412a <_svfprintf_r+0xb86>
  40415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40415c:	930e      	str	r3, [sp, #56]	; 0x38
  40415e:	464e      	mov	r6, r9
  404160:	f7ff bb30 	b.w	4037c4 <_svfprintf_r+0x220>
  404164:	2d00      	cmp	r5, #0
  404166:	bf08      	it	eq
  404168:	2c0a      	cmpeq	r4, #10
  40416a:	f0c0 8090 	bcc.w	40428e <_svfprintf_r+0xcea>
  40416e:	464e      	mov	r6, r9
  404170:	4620      	mov	r0, r4
  404172:	4629      	mov	r1, r5
  404174:	220a      	movs	r2, #10
  404176:	2300      	movs	r3, #0
  404178:	f7fe fd00 	bl	402b7c <__aeabi_uldivmod>
  40417c:	3230      	adds	r2, #48	; 0x30
  40417e:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404182:	4620      	mov	r0, r4
  404184:	4629      	mov	r1, r5
  404186:	2300      	movs	r3, #0
  404188:	220a      	movs	r2, #10
  40418a:	f7fe fcf7 	bl	402b7c <__aeabi_uldivmod>
  40418e:	4604      	mov	r4, r0
  404190:	460d      	mov	r5, r1
  404192:	ea54 0305 	orrs.w	r3, r4, r5
  404196:	d1eb      	bne.n	404170 <_svfprintf_r+0xbcc>
  404198:	eba9 0306 	sub.w	r3, r9, r6
  40419c:	930e      	str	r3, [sp, #56]	; 0x38
  40419e:	f7ff bb11 	b.w	4037c4 <_svfprintf_r+0x220>
  4041a2:	aa25      	add	r2, sp, #148	; 0x94
  4041a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041a8:	f002 fec2 	bl	406f30 <__ssprint_r>
  4041ac:	2800      	cmp	r0, #0
  4041ae:	f47f aacb 	bne.w	403748 <_svfprintf_r+0x1a4>
  4041b2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041b8:	46c8      	mov	r8, r9
  4041ba:	f7ff bb61 	b.w	403880 <_svfprintf_r+0x2dc>
  4041be:	1e5e      	subs	r6, r3, #1
  4041c0:	2e00      	cmp	r6, #0
  4041c2:	f77f af0a 	ble.w	403fda <_svfprintf_r+0xa36>
  4041c6:	2e10      	cmp	r6, #16
  4041c8:	4d03      	ldr	r5, [pc, #12]	; (4041d8 <_svfprintf_r+0xc34>)
  4041ca:	dd23      	ble.n	404214 <_svfprintf_r+0xc70>
  4041cc:	4622      	mov	r2, r4
  4041ce:	f04f 0b10 	mov.w	fp, #16
  4041d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041d4:	e007      	b.n	4041e6 <_svfprintf_r+0xc42>
  4041d6:	bf00      	nop
  4041d8:	00407c94 	.word	0x00407c94
  4041dc:	3e10      	subs	r6, #16
  4041de:	2e10      	cmp	r6, #16
  4041e0:	f108 0808 	add.w	r8, r8, #8
  4041e4:	dd15      	ble.n	404212 <_svfprintf_r+0xc6e>
  4041e6:	3701      	adds	r7, #1
  4041e8:	3210      	adds	r2, #16
  4041ea:	2f07      	cmp	r7, #7
  4041ec:	9227      	str	r2, [sp, #156]	; 0x9c
  4041ee:	9726      	str	r7, [sp, #152]	; 0x98
  4041f0:	e888 0820 	stmia.w	r8, {r5, fp}
  4041f4:	ddf2      	ble.n	4041dc <_svfprintf_r+0xc38>
  4041f6:	aa25      	add	r2, sp, #148	; 0x94
  4041f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041fa:	4620      	mov	r0, r4
  4041fc:	f002 fe98 	bl	406f30 <__ssprint_r>
  404200:	2800      	cmp	r0, #0
  404202:	f47f aaa1 	bne.w	403748 <_svfprintf_r+0x1a4>
  404206:	3e10      	subs	r6, #16
  404208:	2e10      	cmp	r6, #16
  40420a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40420c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40420e:	46c8      	mov	r8, r9
  404210:	dce9      	bgt.n	4041e6 <_svfprintf_r+0xc42>
  404212:	4614      	mov	r4, r2
  404214:	3701      	adds	r7, #1
  404216:	4434      	add	r4, r6
  404218:	2f07      	cmp	r7, #7
  40421a:	9427      	str	r4, [sp, #156]	; 0x9c
  40421c:	9726      	str	r7, [sp, #152]	; 0x98
  40421e:	e888 0060 	stmia.w	r8, {r5, r6}
  404222:	f77f aed8 	ble.w	403fd6 <_svfprintf_r+0xa32>
  404226:	aa25      	add	r2, sp, #148	; 0x94
  404228:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40422a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40422c:	f002 fe80 	bl	406f30 <__ssprint_r>
  404230:	2800      	cmp	r0, #0
  404232:	f47f aa89 	bne.w	403748 <_svfprintf_r+0x1a4>
  404236:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404238:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40423a:	46c8      	mov	r8, r9
  40423c:	e6cd      	b.n	403fda <_svfprintf_r+0xa36>
  40423e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404240:	6814      	ldr	r4, [r2, #0]
  404242:	4613      	mov	r3, r2
  404244:	3304      	adds	r3, #4
  404246:	17e5      	asrs	r5, r4, #31
  404248:	930f      	str	r3, [sp, #60]	; 0x3c
  40424a:	4622      	mov	r2, r4
  40424c:	462b      	mov	r3, r5
  40424e:	e4fc      	b.n	403c4a <_svfprintf_r+0x6a6>
  404250:	3204      	adds	r2, #4
  404252:	681c      	ldr	r4, [r3, #0]
  404254:	920f      	str	r2, [sp, #60]	; 0x3c
  404256:	2301      	movs	r3, #1
  404258:	2500      	movs	r5, #0
  40425a:	f7ff ba96 	b.w	40378a <_svfprintf_r+0x1e6>
  40425e:	681c      	ldr	r4, [r3, #0]
  404260:	3304      	adds	r3, #4
  404262:	930f      	str	r3, [sp, #60]	; 0x3c
  404264:	2500      	movs	r5, #0
  404266:	e423      	b.n	403ab0 <_svfprintf_r+0x50c>
  404268:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40426a:	460a      	mov	r2, r1
  40426c:	3204      	adds	r2, #4
  40426e:	680c      	ldr	r4, [r1, #0]
  404270:	920f      	str	r2, [sp, #60]	; 0x3c
  404272:	2500      	movs	r5, #0
  404274:	f7ff ba89 	b.w	40378a <_svfprintf_r+0x1e6>
  404278:	4614      	mov	r4, r2
  40427a:	3301      	adds	r3, #1
  40427c:	4434      	add	r4, r6
  40427e:	2b07      	cmp	r3, #7
  404280:	9427      	str	r4, [sp, #156]	; 0x9c
  404282:	9326      	str	r3, [sp, #152]	; 0x98
  404284:	e888 0060 	stmia.w	r8, {r5, r6}
  404288:	f77f ab6a 	ble.w	403960 <_svfprintf_r+0x3bc>
  40428c:	e6b2      	b.n	403ff4 <_svfprintf_r+0xa50>
  40428e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404292:	f8cd b01c 	str.w	fp, [sp, #28]
  404296:	ae42      	add	r6, sp, #264	; 0x108
  404298:	3430      	adds	r4, #48	; 0x30
  40429a:	2301      	movs	r3, #1
  40429c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4042a0:	930e      	str	r3, [sp, #56]	; 0x38
  4042a2:	f7ff ba8f 	b.w	4037c4 <_svfprintf_r+0x220>
  4042a6:	aa25      	add	r2, sp, #148	; 0x94
  4042a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042ac:	f002 fe40 	bl	406f30 <__ssprint_r>
  4042b0:	2800      	cmp	r0, #0
  4042b2:	f47f aa49 	bne.w	403748 <_svfprintf_r+0x1a4>
  4042b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042b8:	46c8      	mov	r8, r9
  4042ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4042bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042be:	429a      	cmp	r2, r3
  4042c0:	db44      	blt.n	40434c <_svfprintf_r+0xda8>
  4042c2:	9b07      	ldr	r3, [sp, #28]
  4042c4:	07d9      	lsls	r1, r3, #31
  4042c6:	d441      	bmi.n	40434c <_svfprintf_r+0xda8>
  4042c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042ca:	9812      	ldr	r0, [sp, #72]	; 0x48
  4042cc:	1a9a      	subs	r2, r3, r2
  4042ce:	1a1d      	subs	r5, r3, r0
  4042d0:	4295      	cmp	r5, r2
  4042d2:	bfa8      	it	ge
  4042d4:	4615      	movge	r5, r2
  4042d6:	2d00      	cmp	r5, #0
  4042d8:	dd0e      	ble.n	4042f8 <_svfprintf_r+0xd54>
  4042da:	9926      	ldr	r1, [sp, #152]	; 0x98
  4042dc:	f8c8 5004 	str.w	r5, [r8, #4]
  4042e0:	3101      	adds	r1, #1
  4042e2:	4406      	add	r6, r0
  4042e4:	442c      	add	r4, r5
  4042e6:	2907      	cmp	r1, #7
  4042e8:	f8c8 6000 	str.w	r6, [r8]
  4042ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4042ee:	9126      	str	r1, [sp, #152]	; 0x98
  4042f0:	f300 823b 	bgt.w	40476a <_svfprintf_r+0x11c6>
  4042f4:	f108 0808 	add.w	r8, r8, #8
  4042f8:	2d00      	cmp	r5, #0
  4042fa:	bfac      	ite	ge
  4042fc:	1b56      	subge	r6, r2, r5
  4042fe:	4616      	movlt	r6, r2
  404300:	2e00      	cmp	r6, #0
  404302:	f77f ab2f 	ble.w	403964 <_svfprintf_r+0x3c0>
  404306:	2e10      	cmp	r6, #16
  404308:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40430a:	4db0      	ldr	r5, [pc, #704]	; (4045cc <_svfprintf_r+0x1028>)
  40430c:	ddb5      	ble.n	40427a <_svfprintf_r+0xcd6>
  40430e:	4622      	mov	r2, r4
  404310:	2710      	movs	r7, #16
  404312:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404316:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404318:	e004      	b.n	404324 <_svfprintf_r+0xd80>
  40431a:	f108 0808 	add.w	r8, r8, #8
  40431e:	3e10      	subs	r6, #16
  404320:	2e10      	cmp	r6, #16
  404322:	dda9      	ble.n	404278 <_svfprintf_r+0xcd4>
  404324:	3301      	adds	r3, #1
  404326:	3210      	adds	r2, #16
  404328:	2b07      	cmp	r3, #7
  40432a:	9227      	str	r2, [sp, #156]	; 0x9c
  40432c:	9326      	str	r3, [sp, #152]	; 0x98
  40432e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404332:	ddf2      	ble.n	40431a <_svfprintf_r+0xd76>
  404334:	aa25      	add	r2, sp, #148	; 0x94
  404336:	4621      	mov	r1, r4
  404338:	4658      	mov	r0, fp
  40433a:	f002 fdf9 	bl	406f30 <__ssprint_r>
  40433e:	2800      	cmp	r0, #0
  404340:	f47f aa02 	bne.w	403748 <_svfprintf_r+0x1a4>
  404344:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404346:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404348:	46c8      	mov	r8, r9
  40434a:	e7e8      	b.n	40431e <_svfprintf_r+0xd7a>
  40434c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434e:	9819      	ldr	r0, [sp, #100]	; 0x64
  404350:	991a      	ldr	r1, [sp, #104]	; 0x68
  404352:	f8c8 1000 	str.w	r1, [r8]
  404356:	3301      	adds	r3, #1
  404358:	4404      	add	r4, r0
  40435a:	2b07      	cmp	r3, #7
  40435c:	9427      	str	r4, [sp, #156]	; 0x9c
  40435e:	f8c8 0004 	str.w	r0, [r8, #4]
  404362:	9326      	str	r3, [sp, #152]	; 0x98
  404364:	f300 81f5 	bgt.w	404752 <_svfprintf_r+0x11ae>
  404368:	f108 0808 	add.w	r8, r8, #8
  40436c:	e7ac      	b.n	4042c8 <_svfprintf_r+0xd24>
  40436e:	9b07      	ldr	r3, [sp, #28]
  404370:	07da      	lsls	r2, r3, #31
  404372:	f53f adfe 	bmi.w	403f72 <_svfprintf_r+0x9ce>
  404376:	3701      	adds	r7, #1
  404378:	3401      	adds	r4, #1
  40437a:	2301      	movs	r3, #1
  40437c:	2f07      	cmp	r7, #7
  40437e:	9427      	str	r4, [sp, #156]	; 0x9c
  404380:	9726      	str	r7, [sp, #152]	; 0x98
  404382:	f8c8 6000 	str.w	r6, [r8]
  404386:	f8c8 3004 	str.w	r3, [r8, #4]
  40438a:	f77f ae24 	ble.w	403fd6 <_svfprintf_r+0xa32>
  40438e:	e74a      	b.n	404226 <_svfprintf_r+0xc82>
  404390:	aa25      	add	r2, sp, #148	; 0x94
  404392:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404394:	980c      	ldr	r0, [sp, #48]	; 0x30
  404396:	f002 fdcb 	bl	406f30 <__ssprint_r>
  40439a:	2800      	cmp	r0, #0
  40439c:	f47f a9d4 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043a2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043a4:	46c8      	mov	r8, r9
  4043a6:	e5f2      	b.n	403f8e <_svfprintf_r+0x9ea>
  4043a8:	aa25      	add	r2, sp, #148	; 0x94
  4043aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043ae:	f002 fdbf 	bl	406f30 <__ssprint_r>
  4043b2:	2800      	cmp	r0, #0
  4043b4:	f47f a9c8 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043ba:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043bc:	46c8      	mov	r8, r9
  4043be:	e5f5      	b.n	403fac <_svfprintf_r+0xa08>
  4043c0:	464e      	mov	r6, r9
  4043c2:	f7ff b9ff 	b.w	4037c4 <_svfprintf_r+0x220>
  4043c6:	aa25      	add	r2, sp, #148	; 0x94
  4043c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043cc:	f002 fdb0 	bl	406f30 <__ssprint_r>
  4043d0:	2800      	cmp	r0, #0
  4043d2:	f47f a9b9 	bne.w	403748 <_svfprintf_r+0x1a4>
  4043d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043d8:	46c8      	mov	r8, r9
  4043da:	f7ff ba74 	b.w	4038c6 <_svfprintf_r+0x322>
  4043de:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4043e0:	4622      	mov	r2, r4
  4043e2:	4620      	mov	r0, r4
  4043e4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4043e6:	4623      	mov	r3, r4
  4043e8:	4621      	mov	r1, r4
  4043ea:	f003 fb01 	bl	4079f0 <__aeabi_dcmpun>
  4043ee:	2800      	cmp	r0, #0
  4043f0:	f040 8286 	bne.w	404900 <_svfprintf_r+0x135c>
  4043f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043f6:	3301      	adds	r3, #1
  4043f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4043fa:	f023 0320 	bic.w	r3, r3, #32
  4043fe:	930e      	str	r3, [sp, #56]	; 0x38
  404400:	f000 81e2 	beq.w	4047c8 <_svfprintf_r+0x1224>
  404404:	2b47      	cmp	r3, #71	; 0x47
  404406:	f000 811e 	beq.w	404646 <_svfprintf_r+0x10a2>
  40440a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40440e:	9307      	str	r3, [sp, #28]
  404410:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404412:	1e1f      	subs	r7, r3, #0
  404414:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404416:	9308      	str	r3, [sp, #32]
  404418:	bfbb      	ittet	lt
  40441a:	463b      	movlt	r3, r7
  40441c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404420:	2300      	movge	r3, #0
  404422:	232d      	movlt	r3, #45	; 0x2d
  404424:	9310      	str	r3, [sp, #64]	; 0x40
  404426:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404428:	2b66      	cmp	r3, #102	; 0x66
  40442a:	f000 81bb 	beq.w	4047a4 <_svfprintf_r+0x1200>
  40442e:	2b46      	cmp	r3, #70	; 0x46
  404430:	f000 80df 	beq.w	4045f2 <_svfprintf_r+0x104e>
  404434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404436:	9a08      	ldr	r2, [sp, #32]
  404438:	2b45      	cmp	r3, #69	; 0x45
  40443a:	bf0c      	ite	eq
  40443c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40443e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404440:	a823      	add	r0, sp, #140	; 0x8c
  404442:	a920      	add	r1, sp, #128	; 0x80
  404444:	bf08      	it	eq
  404446:	1c5d      	addeq	r5, r3, #1
  404448:	9004      	str	r0, [sp, #16]
  40444a:	9103      	str	r1, [sp, #12]
  40444c:	a81f      	add	r0, sp, #124	; 0x7c
  40444e:	2102      	movs	r1, #2
  404450:	463b      	mov	r3, r7
  404452:	9002      	str	r0, [sp, #8]
  404454:	9501      	str	r5, [sp, #4]
  404456:	9100      	str	r1, [sp, #0]
  404458:	980c      	ldr	r0, [sp, #48]	; 0x30
  40445a:	f000 fb6d 	bl	404b38 <_dtoa_r>
  40445e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404460:	2b67      	cmp	r3, #103	; 0x67
  404462:	4606      	mov	r6, r0
  404464:	f040 81e0 	bne.w	404828 <_svfprintf_r+0x1284>
  404468:	f01b 0f01 	tst.w	fp, #1
  40446c:	f000 8246 	beq.w	4048fc <_svfprintf_r+0x1358>
  404470:	1974      	adds	r4, r6, r5
  404472:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404474:	9808      	ldr	r0, [sp, #32]
  404476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404478:	4639      	mov	r1, r7
  40447a:	f003 fa87 	bl	40798c <__aeabi_dcmpeq>
  40447e:	2800      	cmp	r0, #0
  404480:	f040 8165 	bne.w	40474e <_svfprintf_r+0x11aa>
  404484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404486:	42a3      	cmp	r3, r4
  404488:	d206      	bcs.n	404498 <_svfprintf_r+0xef4>
  40448a:	2130      	movs	r1, #48	; 0x30
  40448c:	1c5a      	adds	r2, r3, #1
  40448e:	9223      	str	r2, [sp, #140]	; 0x8c
  404490:	7019      	strb	r1, [r3, #0]
  404492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404494:	429c      	cmp	r4, r3
  404496:	d8f9      	bhi.n	40448c <_svfprintf_r+0xee8>
  404498:	1b9b      	subs	r3, r3, r6
  40449a:	9313      	str	r3, [sp, #76]	; 0x4c
  40449c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40449e:	2b47      	cmp	r3, #71	; 0x47
  4044a0:	f000 80e9 	beq.w	404676 <_svfprintf_r+0x10d2>
  4044a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a6:	2b65      	cmp	r3, #101	; 0x65
  4044a8:	f340 81cd 	ble.w	404846 <_svfprintf_r+0x12a2>
  4044ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044ae:	2b66      	cmp	r3, #102	; 0x66
  4044b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044b2:	9312      	str	r3, [sp, #72]	; 0x48
  4044b4:	f000 819e 	beq.w	4047f4 <_svfprintf_r+0x1250>
  4044b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4044bc:	4619      	mov	r1, r3
  4044be:	4291      	cmp	r1, r2
  4044c0:	f300 818a 	bgt.w	4047d8 <_svfprintf_r+0x1234>
  4044c4:	f01b 0f01 	tst.w	fp, #1
  4044c8:	f040 8213 	bne.w	4048f2 <_svfprintf_r+0x134e>
  4044cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4044d0:	9308      	str	r3, [sp, #32]
  4044d2:	2367      	movs	r3, #103	; 0x67
  4044d4:	920e      	str	r2, [sp, #56]	; 0x38
  4044d6:	9311      	str	r3, [sp, #68]	; 0x44
  4044d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4044da:	2b00      	cmp	r3, #0
  4044dc:	f040 80c4 	bne.w	404668 <_svfprintf_r+0x10c4>
  4044e0:	930a      	str	r3, [sp, #40]	; 0x28
  4044e2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044e6:	f7ff b975 	b.w	4037d4 <_svfprintf_r+0x230>
  4044ea:	4635      	mov	r5, r6
  4044ec:	460c      	mov	r4, r1
  4044ee:	4646      	mov	r6, r8
  4044f0:	4690      	mov	r8, r2
  4044f2:	3301      	adds	r3, #1
  4044f4:	443c      	add	r4, r7
  4044f6:	2b07      	cmp	r3, #7
  4044f8:	9427      	str	r4, [sp, #156]	; 0x9c
  4044fa:	9326      	str	r3, [sp, #152]	; 0x98
  4044fc:	e888 00a0 	stmia.w	r8, {r5, r7}
  404500:	f73f aed1 	bgt.w	4042a6 <_svfprintf_r+0xd02>
  404504:	f108 0808 	add.w	r8, r8, #8
  404508:	e6d7      	b.n	4042ba <_svfprintf_r+0xd16>
  40450a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40450c:	6813      	ldr	r3, [r2, #0]
  40450e:	3204      	adds	r2, #4
  404510:	920f      	str	r2, [sp, #60]	; 0x3c
  404512:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404514:	601a      	str	r2, [r3, #0]
  404516:	f7ff b86c 	b.w	4035f2 <_svfprintf_r+0x4e>
  40451a:	aa25      	add	r2, sp, #148	; 0x94
  40451c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40451e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404520:	f002 fd06 	bl	406f30 <__ssprint_r>
  404524:	2800      	cmp	r0, #0
  404526:	f47f a90f 	bne.w	403748 <_svfprintf_r+0x1a4>
  40452a:	46c8      	mov	r8, r9
  40452c:	e48d      	b.n	403e4a <_svfprintf_r+0x8a6>
  40452e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404530:	4a27      	ldr	r2, [pc, #156]	; (4045d0 <_svfprintf_r+0x102c>)
  404532:	f8c8 2000 	str.w	r2, [r8]
  404536:	3301      	adds	r3, #1
  404538:	3401      	adds	r4, #1
  40453a:	2201      	movs	r2, #1
  40453c:	2b07      	cmp	r3, #7
  40453e:	9427      	str	r4, [sp, #156]	; 0x9c
  404540:	9326      	str	r3, [sp, #152]	; 0x98
  404542:	f8c8 2004 	str.w	r2, [r8, #4]
  404546:	dc72      	bgt.n	40462e <_svfprintf_r+0x108a>
  404548:	f108 0808 	add.w	r8, r8, #8
  40454c:	b929      	cbnz	r1, 40455a <_svfprintf_r+0xfb6>
  40454e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404550:	b91b      	cbnz	r3, 40455a <_svfprintf_r+0xfb6>
  404552:	9b07      	ldr	r3, [sp, #28]
  404554:	07d8      	lsls	r0, r3, #31
  404556:	f57f aa05 	bpl.w	403964 <_svfprintf_r+0x3c0>
  40455a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40455c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40455e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404560:	f8c8 2000 	str.w	r2, [r8]
  404564:	3301      	adds	r3, #1
  404566:	4602      	mov	r2, r0
  404568:	4422      	add	r2, r4
  40456a:	2b07      	cmp	r3, #7
  40456c:	9227      	str	r2, [sp, #156]	; 0x9c
  40456e:	f8c8 0004 	str.w	r0, [r8, #4]
  404572:	9326      	str	r3, [sp, #152]	; 0x98
  404574:	f300 818d 	bgt.w	404892 <_svfprintf_r+0x12ee>
  404578:	f108 0808 	add.w	r8, r8, #8
  40457c:	2900      	cmp	r1, #0
  40457e:	f2c0 8165 	blt.w	40484c <_svfprintf_r+0x12a8>
  404582:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404584:	f8c8 6000 	str.w	r6, [r8]
  404588:	3301      	adds	r3, #1
  40458a:	188c      	adds	r4, r1, r2
  40458c:	2b07      	cmp	r3, #7
  40458e:	9427      	str	r4, [sp, #156]	; 0x9c
  404590:	9326      	str	r3, [sp, #152]	; 0x98
  404592:	f8c8 1004 	str.w	r1, [r8, #4]
  404596:	f77f a9e3 	ble.w	403960 <_svfprintf_r+0x3bc>
  40459a:	e52b      	b.n	403ff4 <_svfprintf_r+0xa50>
  40459c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40459e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045a0:	6813      	ldr	r3, [r2, #0]
  4045a2:	17cd      	asrs	r5, r1, #31
  4045a4:	4608      	mov	r0, r1
  4045a6:	3204      	adds	r2, #4
  4045a8:	4629      	mov	r1, r5
  4045aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4045ac:	e9c3 0100 	strd	r0, r1, [r3]
  4045b0:	f7ff b81f 	b.w	4035f2 <_svfprintf_r+0x4e>
  4045b4:	aa25      	add	r2, sp, #148	; 0x94
  4045b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045ba:	f002 fcb9 	bl	406f30 <__ssprint_r>
  4045be:	2800      	cmp	r0, #0
  4045c0:	f47f a8c2 	bne.w	403748 <_svfprintf_r+0x1a4>
  4045c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045c6:	46c8      	mov	r8, r9
  4045c8:	e458      	b.n	403e7c <_svfprintf_r+0x8d8>
  4045ca:	bf00      	nop
  4045cc:	00407c94 	.word	0x00407c94
  4045d0:	00407c80 	.word	0x00407c80
  4045d4:	2140      	movs	r1, #64	; 0x40
  4045d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045d8:	f001 fb36 	bl	405c48 <_malloc_r>
  4045dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045de:	6010      	str	r0, [r2, #0]
  4045e0:	6110      	str	r0, [r2, #16]
  4045e2:	2800      	cmp	r0, #0
  4045e4:	f000 81ec 	beq.w	4049c0 <_svfprintf_r+0x141c>
  4045e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4045ea:	2340      	movs	r3, #64	; 0x40
  4045ec:	6153      	str	r3, [r2, #20]
  4045ee:	f7fe bff0 	b.w	4035d2 <_svfprintf_r+0x2e>
  4045f2:	a823      	add	r0, sp, #140	; 0x8c
  4045f4:	a920      	add	r1, sp, #128	; 0x80
  4045f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4045f8:	9004      	str	r0, [sp, #16]
  4045fa:	9103      	str	r1, [sp, #12]
  4045fc:	a81f      	add	r0, sp, #124	; 0x7c
  4045fe:	2103      	movs	r1, #3
  404600:	9002      	str	r0, [sp, #8]
  404602:	9a08      	ldr	r2, [sp, #32]
  404604:	9401      	str	r4, [sp, #4]
  404606:	463b      	mov	r3, r7
  404608:	9100      	str	r1, [sp, #0]
  40460a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40460c:	f000 fa94 	bl	404b38 <_dtoa_r>
  404610:	4625      	mov	r5, r4
  404612:	4606      	mov	r6, r0
  404614:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404616:	2b46      	cmp	r3, #70	; 0x46
  404618:	eb06 0405 	add.w	r4, r6, r5
  40461c:	f47f af29 	bne.w	404472 <_svfprintf_r+0xece>
  404620:	7833      	ldrb	r3, [r6, #0]
  404622:	2b30      	cmp	r3, #48	; 0x30
  404624:	f000 8172 	beq.w	40490c <_svfprintf_r+0x1368>
  404628:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40462a:	442c      	add	r4, r5
  40462c:	e721      	b.n	404472 <_svfprintf_r+0xece>
  40462e:	aa25      	add	r2, sp, #148	; 0x94
  404630:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404632:	980c      	ldr	r0, [sp, #48]	; 0x30
  404634:	f002 fc7c 	bl	406f30 <__ssprint_r>
  404638:	2800      	cmp	r0, #0
  40463a:	f47f a885 	bne.w	403748 <_svfprintf_r+0x1a4>
  40463e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404640:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404642:	46c8      	mov	r8, r9
  404644:	e782      	b.n	40454c <_svfprintf_r+0xfa8>
  404646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404648:	2b00      	cmp	r3, #0
  40464a:	bf08      	it	eq
  40464c:	2301      	moveq	r3, #1
  40464e:	930a      	str	r3, [sp, #40]	; 0x28
  404650:	e6db      	b.n	40440a <_svfprintf_r+0xe66>
  404652:	4630      	mov	r0, r6
  404654:	940a      	str	r4, [sp, #40]	; 0x28
  404656:	f7fe fcd3 	bl	403000 <strlen>
  40465a:	950f      	str	r5, [sp, #60]	; 0x3c
  40465c:	900e      	str	r0, [sp, #56]	; 0x38
  40465e:	f8cd b01c 	str.w	fp, [sp, #28]
  404662:	4603      	mov	r3, r0
  404664:	f7ff b9fb 	b.w	403a5e <_svfprintf_r+0x4ba>
  404668:	272d      	movs	r7, #45	; 0x2d
  40466a:	2300      	movs	r3, #0
  40466c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404670:	930a      	str	r3, [sp, #40]	; 0x28
  404672:	f7ff b8b0 	b.w	4037d6 <_svfprintf_r+0x232>
  404676:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404678:	9312      	str	r3, [sp, #72]	; 0x48
  40467a:	461a      	mov	r2, r3
  40467c:	3303      	adds	r3, #3
  40467e:	db04      	blt.n	40468a <_svfprintf_r+0x10e6>
  404680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404682:	4619      	mov	r1, r3
  404684:	4291      	cmp	r1, r2
  404686:	f6bf af17 	bge.w	4044b8 <_svfprintf_r+0xf14>
  40468a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40468c:	3b02      	subs	r3, #2
  40468e:	9311      	str	r3, [sp, #68]	; 0x44
  404690:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404694:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404698:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40469a:	3b01      	subs	r3, #1
  40469c:	2b00      	cmp	r3, #0
  40469e:	931f      	str	r3, [sp, #124]	; 0x7c
  4046a0:	bfbd      	ittte	lt
  4046a2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4046a4:	f1c3 0301 	rsblt	r3, r3, #1
  4046a8:	222d      	movlt	r2, #45	; 0x2d
  4046aa:	222b      	movge	r2, #43	; 0x2b
  4046ac:	2b09      	cmp	r3, #9
  4046ae:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4046b2:	f340 8116 	ble.w	4048e2 <_svfprintf_r+0x133e>
  4046b6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4046ba:	4620      	mov	r0, r4
  4046bc:	4dad      	ldr	r5, [pc, #692]	; (404974 <_svfprintf_r+0x13d0>)
  4046be:	e000      	b.n	4046c2 <_svfprintf_r+0x111e>
  4046c0:	4610      	mov	r0, r2
  4046c2:	fb85 1203 	smull	r1, r2, r5, r3
  4046c6:	17d9      	asrs	r1, r3, #31
  4046c8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4046cc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4046d0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4046d4:	3230      	adds	r2, #48	; 0x30
  4046d6:	2909      	cmp	r1, #9
  4046d8:	f800 2c01 	strb.w	r2, [r0, #-1]
  4046dc:	460b      	mov	r3, r1
  4046de:	f100 32ff 	add.w	r2, r0, #4294967295
  4046e2:	dced      	bgt.n	4046c0 <_svfprintf_r+0x111c>
  4046e4:	3330      	adds	r3, #48	; 0x30
  4046e6:	3802      	subs	r0, #2
  4046e8:	b2d9      	uxtb	r1, r3
  4046ea:	4284      	cmp	r4, r0
  4046ec:	f802 1c01 	strb.w	r1, [r2, #-1]
  4046f0:	f240 815f 	bls.w	4049b2 <_svfprintf_r+0x140e>
  4046f4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4046f8:	4613      	mov	r3, r2
  4046fa:	e001      	b.n	404700 <_svfprintf_r+0x115c>
  4046fc:	f813 1b01 	ldrb.w	r1, [r3], #1
  404700:	f800 1b01 	strb.w	r1, [r0], #1
  404704:	42a3      	cmp	r3, r4
  404706:	d1f9      	bne.n	4046fc <_svfprintf_r+0x1158>
  404708:	3301      	adds	r3, #1
  40470a:	1a9b      	subs	r3, r3, r2
  40470c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404710:	4413      	add	r3, r2
  404712:	aa21      	add	r2, sp, #132	; 0x84
  404714:	1a9b      	subs	r3, r3, r2
  404716:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404718:	931b      	str	r3, [sp, #108]	; 0x6c
  40471a:	2a01      	cmp	r2, #1
  40471c:	4413      	add	r3, r2
  40471e:	930e      	str	r3, [sp, #56]	; 0x38
  404720:	f340 8113 	ble.w	40494a <_svfprintf_r+0x13a6>
  404724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404726:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404728:	4413      	add	r3, r2
  40472a:	930e      	str	r3, [sp, #56]	; 0x38
  40472c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404730:	9308      	str	r3, [sp, #32]
  404732:	2300      	movs	r3, #0
  404734:	9312      	str	r3, [sp, #72]	; 0x48
  404736:	e6cf      	b.n	4044d8 <_svfprintf_r+0xf34>
  404738:	aa25      	add	r2, sp, #148	; 0x94
  40473a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40473c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40473e:	f002 fbf7 	bl	406f30 <__ssprint_r>
  404742:	2800      	cmp	r0, #0
  404744:	f47f a800 	bne.w	403748 <_svfprintf_r+0x1a4>
  404748:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40474a:	46c8      	mov	r8, r9
  40474c:	e4d6      	b.n	4040fc <_svfprintf_r+0xb58>
  40474e:	4623      	mov	r3, r4
  404750:	e6a2      	b.n	404498 <_svfprintf_r+0xef4>
  404752:	aa25      	add	r2, sp, #148	; 0x94
  404754:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404756:	980c      	ldr	r0, [sp, #48]	; 0x30
  404758:	f002 fbea 	bl	406f30 <__ssprint_r>
  40475c:	2800      	cmp	r0, #0
  40475e:	f47e aff3 	bne.w	403748 <_svfprintf_r+0x1a4>
  404762:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404764:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404766:	46c8      	mov	r8, r9
  404768:	e5ae      	b.n	4042c8 <_svfprintf_r+0xd24>
  40476a:	aa25      	add	r2, sp, #148	; 0x94
  40476c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40476e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404770:	f002 fbde 	bl	406f30 <__ssprint_r>
  404774:	2800      	cmp	r0, #0
  404776:	f47e afe7 	bne.w	403748 <_svfprintf_r+0x1a4>
  40477a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40477c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40477e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404780:	1a9a      	subs	r2, r3, r2
  404782:	46c8      	mov	r8, r9
  404784:	e5b8      	b.n	4042f8 <_svfprintf_r+0xd54>
  404786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404788:	9612      	str	r6, [sp, #72]	; 0x48
  40478a:	2b06      	cmp	r3, #6
  40478c:	bf28      	it	cs
  40478e:	2306      	movcs	r3, #6
  404790:	960a      	str	r6, [sp, #40]	; 0x28
  404792:	4637      	mov	r7, r6
  404794:	9308      	str	r3, [sp, #32]
  404796:	950f      	str	r5, [sp, #60]	; 0x3c
  404798:	f8cd b01c 	str.w	fp, [sp, #28]
  40479c:	930e      	str	r3, [sp, #56]	; 0x38
  40479e:	4e76      	ldr	r6, [pc, #472]	; (404978 <_svfprintf_r+0x13d4>)
  4047a0:	f7ff b818 	b.w	4037d4 <_svfprintf_r+0x230>
  4047a4:	a823      	add	r0, sp, #140	; 0x8c
  4047a6:	a920      	add	r1, sp, #128	; 0x80
  4047a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047aa:	9004      	str	r0, [sp, #16]
  4047ac:	9103      	str	r1, [sp, #12]
  4047ae:	a81f      	add	r0, sp, #124	; 0x7c
  4047b0:	2103      	movs	r1, #3
  4047b2:	9002      	str	r0, [sp, #8]
  4047b4:	9a08      	ldr	r2, [sp, #32]
  4047b6:	9501      	str	r5, [sp, #4]
  4047b8:	463b      	mov	r3, r7
  4047ba:	9100      	str	r1, [sp, #0]
  4047bc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047be:	f000 f9bb 	bl	404b38 <_dtoa_r>
  4047c2:	4606      	mov	r6, r0
  4047c4:	1944      	adds	r4, r0, r5
  4047c6:	e72b      	b.n	404620 <_svfprintf_r+0x107c>
  4047c8:	2306      	movs	r3, #6
  4047ca:	930a      	str	r3, [sp, #40]	; 0x28
  4047cc:	e61d      	b.n	40440a <_svfprintf_r+0xe66>
  4047ce:	272d      	movs	r7, #45	; 0x2d
  4047d0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047d4:	f7ff bace 	b.w	403d74 <_svfprintf_r+0x7d0>
  4047d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047dc:	4413      	add	r3, r2
  4047de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4047e0:	930e      	str	r3, [sp, #56]	; 0x38
  4047e2:	2a00      	cmp	r2, #0
  4047e4:	f340 80aa 	ble.w	40493c <_svfprintf_r+0x1398>
  4047e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047ec:	9308      	str	r3, [sp, #32]
  4047ee:	2367      	movs	r3, #103	; 0x67
  4047f0:	9311      	str	r3, [sp, #68]	; 0x44
  4047f2:	e671      	b.n	4044d8 <_svfprintf_r+0xf34>
  4047f4:	2b00      	cmp	r3, #0
  4047f6:	f340 80b2 	ble.w	40495e <_svfprintf_r+0x13ba>
  4047fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047fc:	2a00      	cmp	r2, #0
  4047fe:	f040 8093 	bne.w	404928 <_svfprintf_r+0x1384>
  404802:	f01b 0f01 	tst.w	fp, #1
  404806:	f040 808f 	bne.w	404928 <_svfprintf_r+0x1384>
  40480a:	9308      	str	r3, [sp, #32]
  40480c:	930e      	str	r3, [sp, #56]	; 0x38
  40480e:	e663      	b.n	4044d8 <_svfprintf_r+0xf34>
  404810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404812:	9308      	str	r3, [sp, #32]
  404814:	930e      	str	r3, [sp, #56]	; 0x38
  404816:	900a      	str	r0, [sp, #40]	; 0x28
  404818:	950f      	str	r5, [sp, #60]	; 0x3c
  40481a:	f8cd b01c 	str.w	fp, [sp, #28]
  40481e:	9012      	str	r0, [sp, #72]	; 0x48
  404820:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404824:	f7fe bfd6 	b.w	4037d4 <_svfprintf_r+0x230>
  404828:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40482a:	2b47      	cmp	r3, #71	; 0x47
  40482c:	f47f ae20 	bne.w	404470 <_svfprintf_r+0xecc>
  404830:	f01b 0f01 	tst.w	fp, #1
  404834:	f47f aeee 	bne.w	404614 <_svfprintf_r+0x1070>
  404838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40483a:	1b9b      	subs	r3, r3, r6
  40483c:	9313      	str	r3, [sp, #76]	; 0x4c
  40483e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404840:	2b47      	cmp	r3, #71	; 0x47
  404842:	f43f af18 	beq.w	404676 <_svfprintf_r+0x10d2>
  404846:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404848:	9312      	str	r3, [sp, #72]	; 0x48
  40484a:	e721      	b.n	404690 <_svfprintf_r+0x10ec>
  40484c:	424f      	negs	r7, r1
  40484e:	3110      	adds	r1, #16
  404850:	4d4a      	ldr	r5, [pc, #296]	; (40497c <_svfprintf_r+0x13d8>)
  404852:	da2f      	bge.n	4048b4 <_svfprintf_r+0x1310>
  404854:	2410      	movs	r4, #16
  404856:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40485a:	e004      	b.n	404866 <_svfprintf_r+0x12c2>
  40485c:	f108 0808 	add.w	r8, r8, #8
  404860:	3f10      	subs	r7, #16
  404862:	2f10      	cmp	r7, #16
  404864:	dd26      	ble.n	4048b4 <_svfprintf_r+0x1310>
  404866:	3301      	adds	r3, #1
  404868:	3210      	adds	r2, #16
  40486a:	2b07      	cmp	r3, #7
  40486c:	9227      	str	r2, [sp, #156]	; 0x9c
  40486e:	9326      	str	r3, [sp, #152]	; 0x98
  404870:	f8c8 5000 	str.w	r5, [r8]
  404874:	f8c8 4004 	str.w	r4, [r8, #4]
  404878:	ddf0      	ble.n	40485c <_svfprintf_r+0x12b8>
  40487a:	aa25      	add	r2, sp, #148	; 0x94
  40487c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40487e:	4658      	mov	r0, fp
  404880:	f002 fb56 	bl	406f30 <__ssprint_r>
  404884:	2800      	cmp	r0, #0
  404886:	f47e af5f 	bne.w	403748 <_svfprintf_r+0x1a4>
  40488a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40488c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40488e:	46c8      	mov	r8, r9
  404890:	e7e6      	b.n	404860 <_svfprintf_r+0x12bc>
  404892:	aa25      	add	r2, sp, #148	; 0x94
  404894:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404896:	980c      	ldr	r0, [sp, #48]	; 0x30
  404898:	f002 fb4a 	bl	406f30 <__ssprint_r>
  40489c:	2800      	cmp	r0, #0
  40489e:	f47e af53 	bne.w	403748 <_svfprintf_r+0x1a4>
  4048a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4048a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048a8:	46c8      	mov	r8, r9
  4048aa:	e667      	b.n	40457c <_svfprintf_r+0xfd8>
  4048ac:	2000      	movs	r0, #0
  4048ae:	900a      	str	r0, [sp, #40]	; 0x28
  4048b0:	f7fe bed2 	b.w	403658 <_svfprintf_r+0xb4>
  4048b4:	3301      	adds	r3, #1
  4048b6:	443a      	add	r2, r7
  4048b8:	2b07      	cmp	r3, #7
  4048ba:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048be:	9227      	str	r2, [sp, #156]	; 0x9c
  4048c0:	9326      	str	r3, [sp, #152]	; 0x98
  4048c2:	f108 0808 	add.w	r8, r8, #8
  4048c6:	f77f ae5c 	ble.w	404582 <_svfprintf_r+0xfde>
  4048ca:	aa25      	add	r2, sp, #148	; 0x94
  4048cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d0:	f002 fb2e 	bl	406f30 <__ssprint_r>
  4048d4:	2800      	cmp	r0, #0
  4048d6:	f47e af37 	bne.w	403748 <_svfprintf_r+0x1a4>
  4048da:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048de:	46c8      	mov	r8, r9
  4048e0:	e64f      	b.n	404582 <_svfprintf_r+0xfde>
  4048e2:	3330      	adds	r3, #48	; 0x30
  4048e4:	2230      	movs	r2, #48	; 0x30
  4048e6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4048ea:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4048ee:	ab22      	add	r3, sp, #136	; 0x88
  4048f0:	e70f      	b.n	404712 <_svfprintf_r+0x116e>
  4048f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4048f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048f6:	4413      	add	r3, r2
  4048f8:	930e      	str	r3, [sp, #56]	; 0x38
  4048fa:	e775      	b.n	4047e8 <_svfprintf_r+0x1244>
  4048fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4048fe:	e5cb      	b.n	404498 <_svfprintf_r+0xef4>
  404900:	4e1f      	ldr	r6, [pc, #124]	; (404980 <_svfprintf_r+0x13dc>)
  404902:	4b20      	ldr	r3, [pc, #128]	; (404984 <_svfprintf_r+0x13e0>)
  404904:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404908:	f7ff ba36 	b.w	403d78 <_svfprintf_r+0x7d4>
  40490c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40490e:	9808      	ldr	r0, [sp, #32]
  404910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404912:	4639      	mov	r1, r7
  404914:	f003 f83a 	bl	40798c <__aeabi_dcmpeq>
  404918:	2800      	cmp	r0, #0
  40491a:	f47f ae85 	bne.w	404628 <_svfprintf_r+0x1084>
  40491e:	f1c5 0501 	rsb	r5, r5, #1
  404922:	951f      	str	r5, [sp, #124]	; 0x7c
  404924:	442c      	add	r4, r5
  404926:	e5a4      	b.n	404472 <_svfprintf_r+0xece>
  404928:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40492a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40492c:	4413      	add	r3, r2
  40492e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404930:	441a      	add	r2, r3
  404932:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404936:	920e      	str	r2, [sp, #56]	; 0x38
  404938:	9308      	str	r3, [sp, #32]
  40493a:	e5cd      	b.n	4044d8 <_svfprintf_r+0xf34>
  40493c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40493e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404940:	f1c3 0301 	rsb	r3, r3, #1
  404944:	441a      	add	r2, r3
  404946:	4613      	mov	r3, r2
  404948:	e7d6      	b.n	4048f8 <_svfprintf_r+0x1354>
  40494a:	f01b 0301 	ands.w	r3, fp, #1
  40494e:	9312      	str	r3, [sp, #72]	; 0x48
  404950:	f47f aee8 	bne.w	404724 <_svfprintf_r+0x1180>
  404954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40495a:	9308      	str	r3, [sp, #32]
  40495c:	e5bc      	b.n	4044d8 <_svfprintf_r+0xf34>
  40495e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404960:	b913      	cbnz	r3, 404968 <_svfprintf_r+0x13c4>
  404962:	f01b 0f01 	tst.w	fp, #1
  404966:	d002      	beq.n	40496e <_svfprintf_r+0x13ca>
  404968:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40496a:	3301      	adds	r3, #1
  40496c:	e7df      	b.n	40492e <_svfprintf_r+0x138a>
  40496e:	2301      	movs	r3, #1
  404970:	e74b      	b.n	40480a <_svfprintf_r+0x1266>
  404972:	bf00      	nop
  404974:	66666667 	.word	0x66666667
  404978:	00407c78 	.word	0x00407c78
  40497c:	00407c94 	.word	0x00407c94
  404980:	00407c4c 	.word	0x00407c4c
  404984:	00407c48 	.word	0x00407c48
  404988:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40498a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40498e:	6828      	ldr	r0, [r5, #0]
  404990:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404994:	900a      	str	r0, [sp, #40]	; 0x28
  404996:	4628      	mov	r0, r5
  404998:	3004      	adds	r0, #4
  40499a:	46a2      	mov	sl, r4
  40499c:	900f      	str	r0, [sp, #60]	; 0x3c
  40499e:	f7fe be59 	b.w	403654 <_svfprintf_r+0xb0>
  4049a2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049a6:	f7ff b86f 	b.w	403a88 <_svfprintf_r+0x4e4>
  4049aa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ae:	f7ff ba1c 	b.w	403dea <_svfprintf_r+0x846>
  4049b2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4049b6:	e6ac      	b.n	404712 <_svfprintf_r+0x116e>
  4049b8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049bc:	f7ff b8f3 	b.w	403ba6 <_svfprintf_r+0x602>
  4049c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4049c2:	230c      	movs	r3, #12
  4049c4:	6013      	str	r3, [r2, #0]
  4049c6:	f04f 33ff 	mov.w	r3, #4294967295
  4049ca:	9309      	str	r3, [sp, #36]	; 0x24
  4049cc:	f7fe bec5 	b.w	40375a <_svfprintf_r+0x1b6>
  4049d0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049d4:	f7ff b9a2 	b.w	403d1c <_svfprintf_r+0x778>
  4049d8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049dc:	f7ff b97e 	b.w	403cdc <_svfprintf_r+0x738>
  4049e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049e4:	f7ff b961 	b.w	403caa <_svfprintf_r+0x706>
  4049e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ec:	f7ff b91a 	b.w	403c24 <_svfprintf_r+0x680>

004049f0 <register_fini>:
  4049f0:	4b02      	ldr	r3, [pc, #8]	; (4049fc <register_fini+0xc>)
  4049f2:	b113      	cbz	r3, 4049fa <register_fini+0xa>
  4049f4:	4802      	ldr	r0, [pc, #8]	; (404a00 <register_fini+0x10>)
  4049f6:	f000 b805 	b.w	404a04 <atexit>
  4049fa:	4770      	bx	lr
  4049fc:	00000000 	.word	0x00000000
  404a00:	0040598d 	.word	0x0040598d

00404a04 <atexit>:
  404a04:	2300      	movs	r3, #0
  404a06:	4601      	mov	r1, r0
  404a08:	461a      	mov	r2, r3
  404a0a:	4618      	mov	r0, r3
  404a0c:	f002 bb1c 	b.w	407048 <__register_exitproc>

00404a10 <quorem>:
  404a10:	6902      	ldr	r2, [r0, #16]
  404a12:	690b      	ldr	r3, [r1, #16]
  404a14:	4293      	cmp	r3, r2
  404a16:	f300 808d 	bgt.w	404b34 <quorem+0x124>
  404a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a1e:	f103 38ff 	add.w	r8, r3, #4294967295
  404a22:	f101 0714 	add.w	r7, r1, #20
  404a26:	f100 0b14 	add.w	fp, r0, #20
  404a2a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404a2e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404a32:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404a36:	b083      	sub	sp, #12
  404a38:	3201      	adds	r2, #1
  404a3a:	fbb3 f9f2 	udiv	r9, r3, r2
  404a3e:	eb0b 0304 	add.w	r3, fp, r4
  404a42:	9400      	str	r4, [sp, #0]
  404a44:	eb07 0a04 	add.w	sl, r7, r4
  404a48:	9301      	str	r3, [sp, #4]
  404a4a:	f1b9 0f00 	cmp.w	r9, #0
  404a4e:	d039      	beq.n	404ac4 <quorem+0xb4>
  404a50:	2500      	movs	r5, #0
  404a52:	462e      	mov	r6, r5
  404a54:	46bc      	mov	ip, r7
  404a56:	46de      	mov	lr, fp
  404a58:	f85c 4b04 	ldr.w	r4, [ip], #4
  404a5c:	f8de 3000 	ldr.w	r3, [lr]
  404a60:	b2a2      	uxth	r2, r4
  404a62:	fb09 5502 	mla	r5, r9, r2, r5
  404a66:	0c22      	lsrs	r2, r4, #16
  404a68:	0c2c      	lsrs	r4, r5, #16
  404a6a:	fb09 4202 	mla	r2, r9, r2, r4
  404a6e:	b2ad      	uxth	r5, r5
  404a70:	1b75      	subs	r5, r6, r5
  404a72:	b296      	uxth	r6, r2
  404a74:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404a78:	fa15 f383 	uxtah	r3, r5, r3
  404a7c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404a80:	b29b      	uxth	r3, r3
  404a82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404a86:	45e2      	cmp	sl, ip
  404a88:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404a8c:	f84e 3b04 	str.w	r3, [lr], #4
  404a90:	ea4f 4626 	mov.w	r6, r6, asr #16
  404a94:	d2e0      	bcs.n	404a58 <quorem+0x48>
  404a96:	9b00      	ldr	r3, [sp, #0]
  404a98:	f85b 3003 	ldr.w	r3, [fp, r3]
  404a9c:	b993      	cbnz	r3, 404ac4 <quorem+0xb4>
  404a9e:	9c01      	ldr	r4, [sp, #4]
  404aa0:	1f23      	subs	r3, r4, #4
  404aa2:	459b      	cmp	fp, r3
  404aa4:	d20c      	bcs.n	404ac0 <quorem+0xb0>
  404aa6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404aaa:	b94b      	cbnz	r3, 404ac0 <quorem+0xb0>
  404aac:	f1a4 0308 	sub.w	r3, r4, #8
  404ab0:	e002      	b.n	404ab8 <quorem+0xa8>
  404ab2:	681a      	ldr	r2, [r3, #0]
  404ab4:	3b04      	subs	r3, #4
  404ab6:	b91a      	cbnz	r2, 404ac0 <quorem+0xb0>
  404ab8:	459b      	cmp	fp, r3
  404aba:	f108 38ff 	add.w	r8, r8, #4294967295
  404abe:	d3f8      	bcc.n	404ab2 <quorem+0xa2>
  404ac0:	f8c0 8010 	str.w	r8, [r0, #16]
  404ac4:	4604      	mov	r4, r0
  404ac6:	f001 ff0b 	bl	4068e0 <__mcmp>
  404aca:	2800      	cmp	r0, #0
  404acc:	db2e      	blt.n	404b2c <quorem+0x11c>
  404ace:	f109 0901 	add.w	r9, r9, #1
  404ad2:	465d      	mov	r5, fp
  404ad4:	2300      	movs	r3, #0
  404ad6:	f857 1b04 	ldr.w	r1, [r7], #4
  404ada:	6828      	ldr	r0, [r5, #0]
  404adc:	b28a      	uxth	r2, r1
  404ade:	1a9a      	subs	r2, r3, r2
  404ae0:	0c0b      	lsrs	r3, r1, #16
  404ae2:	fa12 f280 	uxtah	r2, r2, r0
  404ae6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404aea:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404aee:	b292      	uxth	r2, r2
  404af0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404af4:	45ba      	cmp	sl, r7
  404af6:	f845 2b04 	str.w	r2, [r5], #4
  404afa:	ea4f 4323 	mov.w	r3, r3, asr #16
  404afe:	d2ea      	bcs.n	404ad6 <quorem+0xc6>
  404b00:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404b04:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404b08:	b982      	cbnz	r2, 404b2c <quorem+0x11c>
  404b0a:	1f1a      	subs	r2, r3, #4
  404b0c:	4593      	cmp	fp, r2
  404b0e:	d20b      	bcs.n	404b28 <quorem+0x118>
  404b10:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404b14:	b942      	cbnz	r2, 404b28 <quorem+0x118>
  404b16:	3b08      	subs	r3, #8
  404b18:	e002      	b.n	404b20 <quorem+0x110>
  404b1a:	681a      	ldr	r2, [r3, #0]
  404b1c:	3b04      	subs	r3, #4
  404b1e:	b91a      	cbnz	r2, 404b28 <quorem+0x118>
  404b20:	459b      	cmp	fp, r3
  404b22:	f108 38ff 	add.w	r8, r8, #4294967295
  404b26:	d3f8      	bcc.n	404b1a <quorem+0x10a>
  404b28:	f8c4 8010 	str.w	r8, [r4, #16]
  404b2c:	4648      	mov	r0, r9
  404b2e:	b003      	add	sp, #12
  404b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b34:	2000      	movs	r0, #0
  404b36:	4770      	bx	lr

00404b38 <_dtoa_r>:
  404b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404b3e:	b09b      	sub	sp, #108	; 0x6c
  404b40:	4604      	mov	r4, r0
  404b42:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404b44:	4692      	mov	sl, r2
  404b46:	469b      	mov	fp, r3
  404b48:	b141      	cbz	r1, 404b5c <_dtoa_r+0x24>
  404b4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404b4c:	604a      	str	r2, [r1, #4]
  404b4e:	2301      	movs	r3, #1
  404b50:	4093      	lsls	r3, r2
  404b52:	608b      	str	r3, [r1, #8]
  404b54:	f001 fcec 	bl	406530 <_Bfree>
  404b58:	2300      	movs	r3, #0
  404b5a:	6423      	str	r3, [r4, #64]	; 0x40
  404b5c:	f1bb 0f00 	cmp.w	fp, #0
  404b60:	465d      	mov	r5, fp
  404b62:	db35      	blt.n	404bd0 <_dtoa_r+0x98>
  404b64:	2300      	movs	r3, #0
  404b66:	6033      	str	r3, [r6, #0]
  404b68:	4b9d      	ldr	r3, [pc, #628]	; (404de0 <_dtoa_r+0x2a8>)
  404b6a:	43ab      	bics	r3, r5
  404b6c:	d015      	beq.n	404b9a <_dtoa_r+0x62>
  404b6e:	4650      	mov	r0, sl
  404b70:	4659      	mov	r1, fp
  404b72:	2200      	movs	r2, #0
  404b74:	2300      	movs	r3, #0
  404b76:	f002 ff09 	bl	40798c <__aeabi_dcmpeq>
  404b7a:	4680      	mov	r8, r0
  404b7c:	2800      	cmp	r0, #0
  404b7e:	d02d      	beq.n	404bdc <_dtoa_r+0xa4>
  404b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b82:	2301      	movs	r3, #1
  404b84:	6013      	str	r3, [r2, #0]
  404b86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404b88:	2b00      	cmp	r3, #0
  404b8a:	f000 80bd 	beq.w	404d08 <_dtoa_r+0x1d0>
  404b8e:	4895      	ldr	r0, [pc, #596]	; (404de4 <_dtoa_r+0x2ac>)
  404b90:	6018      	str	r0, [r3, #0]
  404b92:	3801      	subs	r0, #1
  404b94:	b01b      	add	sp, #108	; 0x6c
  404b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404b9c:	f242 730f 	movw	r3, #9999	; 0x270f
  404ba0:	6013      	str	r3, [r2, #0]
  404ba2:	f1ba 0f00 	cmp.w	sl, #0
  404ba6:	d10d      	bne.n	404bc4 <_dtoa_r+0x8c>
  404ba8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404bac:	b955      	cbnz	r5, 404bc4 <_dtoa_r+0x8c>
  404bae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bb0:	488d      	ldr	r0, [pc, #564]	; (404de8 <_dtoa_r+0x2b0>)
  404bb2:	2b00      	cmp	r3, #0
  404bb4:	d0ee      	beq.n	404b94 <_dtoa_r+0x5c>
  404bb6:	f100 0308 	add.w	r3, r0, #8
  404bba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404bbc:	6013      	str	r3, [r2, #0]
  404bbe:	b01b      	add	sp, #108	; 0x6c
  404bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bc6:	4889      	ldr	r0, [pc, #548]	; (404dec <_dtoa_r+0x2b4>)
  404bc8:	2b00      	cmp	r3, #0
  404bca:	d0e3      	beq.n	404b94 <_dtoa_r+0x5c>
  404bcc:	1cc3      	adds	r3, r0, #3
  404bce:	e7f4      	b.n	404bba <_dtoa_r+0x82>
  404bd0:	2301      	movs	r3, #1
  404bd2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404bd6:	6033      	str	r3, [r6, #0]
  404bd8:	46ab      	mov	fp, r5
  404bda:	e7c5      	b.n	404b68 <_dtoa_r+0x30>
  404bdc:	aa18      	add	r2, sp, #96	; 0x60
  404bde:	ab19      	add	r3, sp, #100	; 0x64
  404be0:	9201      	str	r2, [sp, #4]
  404be2:	9300      	str	r3, [sp, #0]
  404be4:	4652      	mov	r2, sl
  404be6:	465b      	mov	r3, fp
  404be8:	4620      	mov	r0, r4
  404bea:	f001 ff19 	bl	406a20 <__d2b>
  404bee:	0d2b      	lsrs	r3, r5, #20
  404bf0:	4681      	mov	r9, r0
  404bf2:	d071      	beq.n	404cd8 <_dtoa_r+0x1a0>
  404bf4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404bf8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404bfc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404bfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404c02:	4650      	mov	r0, sl
  404c04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404c08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404c0c:	2200      	movs	r2, #0
  404c0e:	4b78      	ldr	r3, [pc, #480]	; (404df0 <_dtoa_r+0x2b8>)
  404c10:	f002 faa0 	bl	407154 <__aeabi_dsub>
  404c14:	a36c      	add	r3, pc, #432	; (adr r3, 404dc8 <_dtoa_r+0x290>)
  404c16:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c1a:	f002 fc4f 	bl	4074bc <__aeabi_dmul>
  404c1e:	a36c      	add	r3, pc, #432	; (adr r3, 404dd0 <_dtoa_r+0x298>)
  404c20:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c24:	f002 fa98 	bl	407158 <__adddf3>
  404c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c2c:	4630      	mov	r0, r6
  404c2e:	f002 fbdf 	bl	4073f0 <__aeabi_i2d>
  404c32:	a369      	add	r3, pc, #420	; (adr r3, 404dd8 <_dtoa_r+0x2a0>)
  404c34:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c38:	f002 fc40 	bl	4074bc <__aeabi_dmul>
  404c3c:	4602      	mov	r2, r0
  404c3e:	460b      	mov	r3, r1
  404c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c44:	f002 fa88 	bl	407158 <__adddf3>
  404c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c4c:	f002 fee6 	bl	407a1c <__aeabi_d2iz>
  404c50:	2200      	movs	r2, #0
  404c52:	9002      	str	r0, [sp, #8]
  404c54:	2300      	movs	r3, #0
  404c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c5a:	f002 fea1 	bl	4079a0 <__aeabi_dcmplt>
  404c5e:	2800      	cmp	r0, #0
  404c60:	f040 8173 	bne.w	404f4a <_dtoa_r+0x412>
  404c64:	9d02      	ldr	r5, [sp, #8]
  404c66:	2d16      	cmp	r5, #22
  404c68:	f200 815d 	bhi.w	404f26 <_dtoa_r+0x3ee>
  404c6c:	4b61      	ldr	r3, [pc, #388]	; (404df4 <_dtoa_r+0x2bc>)
  404c6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404c72:	e9d3 0100 	ldrd	r0, r1, [r3]
  404c76:	4652      	mov	r2, sl
  404c78:	465b      	mov	r3, fp
  404c7a:	f002 feaf 	bl	4079dc <__aeabi_dcmpgt>
  404c7e:	2800      	cmp	r0, #0
  404c80:	f000 81c5 	beq.w	40500e <_dtoa_r+0x4d6>
  404c84:	1e6b      	subs	r3, r5, #1
  404c86:	9302      	str	r3, [sp, #8]
  404c88:	2300      	movs	r3, #0
  404c8a:	930e      	str	r3, [sp, #56]	; 0x38
  404c8c:	1bbf      	subs	r7, r7, r6
  404c8e:	1e7b      	subs	r3, r7, #1
  404c90:	9306      	str	r3, [sp, #24]
  404c92:	f100 8154 	bmi.w	404f3e <_dtoa_r+0x406>
  404c96:	2300      	movs	r3, #0
  404c98:	9308      	str	r3, [sp, #32]
  404c9a:	9b02      	ldr	r3, [sp, #8]
  404c9c:	2b00      	cmp	r3, #0
  404c9e:	f2c0 8145 	blt.w	404f2c <_dtoa_r+0x3f4>
  404ca2:	9a06      	ldr	r2, [sp, #24]
  404ca4:	930d      	str	r3, [sp, #52]	; 0x34
  404ca6:	4611      	mov	r1, r2
  404ca8:	4419      	add	r1, r3
  404caa:	2300      	movs	r3, #0
  404cac:	9106      	str	r1, [sp, #24]
  404cae:	930c      	str	r3, [sp, #48]	; 0x30
  404cb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cb2:	2b09      	cmp	r3, #9
  404cb4:	d82a      	bhi.n	404d0c <_dtoa_r+0x1d4>
  404cb6:	2b05      	cmp	r3, #5
  404cb8:	f340 865b 	ble.w	405972 <_dtoa_r+0xe3a>
  404cbc:	3b04      	subs	r3, #4
  404cbe:	9324      	str	r3, [sp, #144]	; 0x90
  404cc0:	2500      	movs	r5, #0
  404cc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cc4:	3b02      	subs	r3, #2
  404cc6:	2b03      	cmp	r3, #3
  404cc8:	f200 8642 	bhi.w	405950 <_dtoa_r+0xe18>
  404ccc:	e8df f013 	tbh	[pc, r3, lsl #1]
  404cd0:	02c903d4 	.word	0x02c903d4
  404cd4:	046103df 	.word	0x046103df
  404cd8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404cda:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404cdc:	443e      	add	r6, r7
  404cde:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404ce2:	2b20      	cmp	r3, #32
  404ce4:	f340 818e 	ble.w	405004 <_dtoa_r+0x4cc>
  404ce8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404cec:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404cf0:	409d      	lsls	r5, r3
  404cf2:	fa2a f000 	lsr.w	r0, sl, r0
  404cf6:	4328      	orrs	r0, r5
  404cf8:	f002 fb6a 	bl	4073d0 <__aeabi_ui2d>
  404cfc:	2301      	movs	r3, #1
  404cfe:	3e01      	subs	r6, #1
  404d00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404d04:	9314      	str	r3, [sp, #80]	; 0x50
  404d06:	e781      	b.n	404c0c <_dtoa_r+0xd4>
  404d08:	483b      	ldr	r0, [pc, #236]	; (404df8 <_dtoa_r+0x2c0>)
  404d0a:	e743      	b.n	404b94 <_dtoa_r+0x5c>
  404d0c:	2100      	movs	r1, #0
  404d0e:	6461      	str	r1, [r4, #68]	; 0x44
  404d10:	4620      	mov	r0, r4
  404d12:	9125      	str	r1, [sp, #148]	; 0x94
  404d14:	f001 fbe6 	bl	4064e4 <_Balloc>
  404d18:	f04f 33ff 	mov.w	r3, #4294967295
  404d1c:	930a      	str	r3, [sp, #40]	; 0x28
  404d1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d20:	930f      	str	r3, [sp, #60]	; 0x3c
  404d22:	2301      	movs	r3, #1
  404d24:	9004      	str	r0, [sp, #16]
  404d26:	6420      	str	r0, [r4, #64]	; 0x40
  404d28:	9224      	str	r2, [sp, #144]	; 0x90
  404d2a:	930b      	str	r3, [sp, #44]	; 0x2c
  404d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404d2e:	2b00      	cmp	r3, #0
  404d30:	f2c0 80d9 	blt.w	404ee6 <_dtoa_r+0x3ae>
  404d34:	9a02      	ldr	r2, [sp, #8]
  404d36:	2a0e      	cmp	r2, #14
  404d38:	f300 80d5 	bgt.w	404ee6 <_dtoa_r+0x3ae>
  404d3c:	4b2d      	ldr	r3, [pc, #180]	; (404df4 <_dtoa_r+0x2bc>)
  404d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d42:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d46:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404d4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404d4c:	2b00      	cmp	r3, #0
  404d4e:	f2c0 83ba 	blt.w	4054c6 <_dtoa_r+0x98e>
  404d52:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404d56:	4650      	mov	r0, sl
  404d58:	462a      	mov	r2, r5
  404d5a:	4633      	mov	r3, r6
  404d5c:	4659      	mov	r1, fp
  404d5e:	f002 fcd7 	bl	407710 <__aeabi_ddiv>
  404d62:	f002 fe5b 	bl	407a1c <__aeabi_d2iz>
  404d66:	4680      	mov	r8, r0
  404d68:	f002 fb42 	bl	4073f0 <__aeabi_i2d>
  404d6c:	462a      	mov	r2, r5
  404d6e:	4633      	mov	r3, r6
  404d70:	f002 fba4 	bl	4074bc <__aeabi_dmul>
  404d74:	460b      	mov	r3, r1
  404d76:	4602      	mov	r2, r0
  404d78:	4659      	mov	r1, fp
  404d7a:	4650      	mov	r0, sl
  404d7c:	f002 f9ea 	bl	407154 <__aeabi_dsub>
  404d80:	9d04      	ldr	r5, [sp, #16]
  404d82:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404d86:	702b      	strb	r3, [r5, #0]
  404d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d8a:	2b01      	cmp	r3, #1
  404d8c:	4606      	mov	r6, r0
  404d8e:	460f      	mov	r7, r1
  404d90:	f105 0501 	add.w	r5, r5, #1
  404d94:	d068      	beq.n	404e68 <_dtoa_r+0x330>
  404d96:	2200      	movs	r2, #0
  404d98:	4b18      	ldr	r3, [pc, #96]	; (404dfc <_dtoa_r+0x2c4>)
  404d9a:	f002 fb8f 	bl	4074bc <__aeabi_dmul>
  404d9e:	2200      	movs	r2, #0
  404da0:	2300      	movs	r3, #0
  404da2:	4606      	mov	r6, r0
  404da4:	460f      	mov	r7, r1
  404da6:	f002 fdf1 	bl	40798c <__aeabi_dcmpeq>
  404daa:	2800      	cmp	r0, #0
  404dac:	f040 8088 	bne.w	404ec0 <_dtoa_r+0x388>
  404db0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404db4:	f04f 0a00 	mov.w	sl, #0
  404db8:	f8df b040 	ldr.w	fp, [pc, #64]	; 404dfc <_dtoa_r+0x2c4>
  404dbc:	940c      	str	r4, [sp, #48]	; 0x30
  404dbe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404dc2:	e028      	b.n	404e16 <_dtoa_r+0x2de>
  404dc4:	f3af 8000 	nop.w
  404dc8:	636f4361 	.word	0x636f4361
  404dcc:	3fd287a7 	.word	0x3fd287a7
  404dd0:	8b60c8b3 	.word	0x8b60c8b3
  404dd4:	3fc68a28 	.word	0x3fc68a28
  404dd8:	509f79fb 	.word	0x509f79fb
  404ddc:	3fd34413 	.word	0x3fd34413
  404de0:	7ff00000 	.word	0x7ff00000
  404de4:	00407c81 	.word	0x00407c81
  404de8:	00407ca4 	.word	0x00407ca4
  404dec:	00407cb0 	.word	0x00407cb0
  404df0:	3ff80000 	.word	0x3ff80000
  404df4:	00407cf0 	.word	0x00407cf0
  404df8:	00407c80 	.word	0x00407c80
  404dfc:	40240000 	.word	0x40240000
  404e00:	f002 fb5c 	bl	4074bc <__aeabi_dmul>
  404e04:	2200      	movs	r2, #0
  404e06:	2300      	movs	r3, #0
  404e08:	4606      	mov	r6, r0
  404e0a:	460f      	mov	r7, r1
  404e0c:	f002 fdbe 	bl	40798c <__aeabi_dcmpeq>
  404e10:	2800      	cmp	r0, #0
  404e12:	f040 83c1 	bne.w	405598 <_dtoa_r+0xa60>
  404e16:	4642      	mov	r2, r8
  404e18:	464b      	mov	r3, r9
  404e1a:	4630      	mov	r0, r6
  404e1c:	4639      	mov	r1, r7
  404e1e:	f002 fc77 	bl	407710 <__aeabi_ddiv>
  404e22:	f002 fdfb 	bl	407a1c <__aeabi_d2iz>
  404e26:	4604      	mov	r4, r0
  404e28:	f002 fae2 	bl	4073f0 <__aeabi_i2d>
  404e2c:	4642      	mov	r2, r8
  404e2e:	464b      	mov	r3, r9
  404e30:	f002 fb44 	bl	4074bc <__aeabi_dmul>
  404e34:	4602      	mov	r2, r0
  404e36:	460b      	mov	r3, r1
  404e38:	4630      	mov	r0, r6
  404e3a:	4639      	mov	r1, r7
  404e3c:	f002 f98a 	bl	407154 <__aeabi_dsub>
  404e40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404e44:	9e04      	ldr	r6, [sp, #16]
  404e46:	f805 eb01 	strb.w	lr, [r5], #1
  404e4a:	eba5 0e06 	sub.w	lr, r5, r6
  404e4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404e50:	45b6      	cmp	lr, r6
  404e52:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404e56:	4652      	mov	r2, sl
  404e58:	465b      	mov	r3, fp
  404e5a:	d1d1      	bne.n	404e00 <_dtoa_r+0x2c8>
  404e5c:	46a0      	mov	r8, r4
  404e5e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404e62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e64:	4606      	mov	r6, r0
  404e66:	460f      	mov	r7, r1
  404e68:	4632      	mov	r2, r6
  404e6a:	463b      	mov	r3, r7
  404e6c:	4630      	mov	r0, r6
  404e6e:	4639      	mov	r1, r7
  404e70:	f002 f972 	bl	407158 <__adddf3>
  404e74:	4606      	mov	r6, r0
  404e76:	460f      	mov	r7, r1
  404e78:	4602      	mov	r2, r0
  404e7a:	460b      	mov	r3, r1
  404e7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e80:	f002 fd8e 	bl	4079a0 <__aeabi_dcmplt>
  404e84:	b948      	cbnz	r0, 404e9a <_dtoa_r+0x362>
  404e86:	4632      	mov	r2, r6
  404e88:	463b      	mov	r3, r7
  404e8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404e8e:	f002 fd7d 	bl	40798c <__aeabi_dcmpeq>
  404e92:	b1a8      	cbz	r0, 404ec0 <_dtoa_r+0x388>
  404e94:	f018 0f01 	tst.w	r8, #1
  404e98:	d012      	beq.n	404ec0 <_dtoa_r+0x388>
  404e9a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404e9e:	9a04      	ldr	r2, [sp, #16]
  404ea0:	1e6b      	subs	r3, r5, #1
  404ea2:	e004      	b.n	404eae <_dtoa_r+0x376>
  404ea4:	429a      	cmp	r2, r3
  404ea6:	f000 8401 	beq.w	4056ac <_dtoa_r+0xb74>
  404eaa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404eb2:	f103 0501 	add.w	r5, r3, #1
  404eb6:	d0f5      	beq.n	404ea4 <_dtoa_r+0x36c>
  404eb8:	f108 0801 	add.w	r8, r8, #1
  404ebc:	f883 8000 	strb.w	r8, [r3]
  404ec0:	4649      	mov	r1, r9
  404ec2:	4620      	mov	r0, r4
  404ec4:	f001 fb34 	bl	406530 <_Bfree>
  404ec8:	2200      	movs	r2, #0
  404eca:	9b02      	ldr	r3, [sp, #8]
  404ecc:	702a      	strb	r2, [r5, #0]
  404ece:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404ed0:	3301      	adds	r3, #1
  404ed2:	6013      	str	r3, [r2, #0]
  404ed4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404ed6:	2b00      	cmp	r3, #0
  404ed8:	f000 839e 	beq.w	405618 <_dtoa_r+0xae0>
  404edc:	9804      	ldr	r0, [sp, #16]
  404ede:	601d      	str	r5, [r3, #0]
  404ee0:	b01b      	add	sp, #108	; 0x6c
  404ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ee8:	2a00      	cmp	r2, #0
  404eea:	d03e      	beq.n	404f6a <_dtoa_r+0x432>
  404eec:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404eee:	2a01      	cmp	r2, #1
  404ef0:	f340 8311 	ble.w	405516 <_dtoa_r+0x9de>
  404ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404ef8:	1e5f      	subs	r7, r3, #1
  404efa:	42ba      	cmp	r2, r7
  404efc:	f2c0 838f 	blt.w	40561e <_dtoa_r+0xae6>
  404f00:	1bd7      	subs	r7, r2, r7
  404f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f04:	2b00      	cmp	r3, #0
  404f06:	f2c0 848b 	blt.w	405820 <_dtoa_r+0xce8>
  404f0a:	9d08      	ldr	r5, [sp, #32]
  404f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f0e:	9a08      	ldr	r2, [sp, #32]
  404f10:	441a      	add	r2, r3
  404f12:	9208      	str	r2, [sp, #32]
  404f14:	9a06      	ldr	r2, [sp, #24]
  404f16:	2101      	movs	r1, #1
  404f18:	441a      	add	r2, r3
  404f1a:	4620      	mov	r0, r4
  404f1c:	9206      	str	r2, [sp, #24]
  404f1e:	f001 fba1 	bl	406664 <__i2b>
  404f22:	4606      	mov	r6, r0
  404f24:	e024      	b.n	404f70 <_dtoa_r+0x438>
  404f26:	2301      	movs	r3, #1
  404f28:	930e      	str	r3, [sp, #56]	; 0x38
  404f2a:	e6af      	b.n	404c8c <_dtoa_r+0x154>
  404f2c:	9a08      	ldr	r2, [sp, #32]
  404f2e:	9b02      	ldr	r3, [sp, #8]
  404f30:	1ad2      	subs	r2, r2, r3
  404f32:	425b      	negs	r3, r3
  404f34:	930c      	str	r3, [sp, #48]	; 0x30
  404f36:	2300      	movs	r3, #0
  404f38:	9208      	str	r2, [sp, #32]
  404f3a:	930d      	str	r3, [sp, #52]	; 0x34
  404f3c:	e6b8      	b.n	404cb0 <_dtoa_r+0x178>
  404f3e:	f1c7 0301 	rsb	r3, r7, #1
  404f42:	9308      	str	r3, [sp, #32]
  404f44:	2300      	movs	r3, #0
  404f46:	9306      	str	r3, [sp, #24]
  404f48:	e6a7      	b.n	404c9a <_dtoa_r+0x162>
  404f4a:	9d02      	ldr	r5, [sp, #8]
  404f4c:	4628      	mov	r0, r5
  404f4e:	f002 fa4f 	bl	4073f0 <__aeabi_i2d>
  404f52:	4602      	mov	r2, r0
  404f54:	460b      	mov	r3, r1
  404f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404f5a:	f002 fd17 	bl	40798c <__aeabi_dcmpeq>
  404f5e:	2800      	cmp	r0, #0
  404f60:	f47f ae80 	bne.w	404c64 <_dtoa_r+0x12c>
  404f64:	1e6b      	subs	r3, r5, #1
  404f66:	9302      	str	r3, [sp, #8]
  404f68:	e67c      	b.n	404c64 <_dtoa_r+0x12c>
  404f6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404f6c:	9d08      	ldr	r5, [sp, #32]
  404f6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404f70:	2d00      	cmp	r5, #0
  404f72:	dd0c      	ble.n	404f8e <_dtoa_r+0x456>
  404f74:	9906      	ldr	r1, [sp, #24]
  404f76:	2900      	cmp	r1, #0
  404f78:	460b      	mov	r3, r1
  404f7a:	dd08      	ble.n	404f8e <_dtoa_r+0x456>
  404f7c:	42a9      	cmp	r1, r5
  404f7e:	9a08      	ldr	r2, [sp, #32]
  404f80:	bfa8      	it	ge
  404f82:	462b      	movge	r3, r5
  404f84:	1ad2      	subs	r2, r2, r3
  404f86:	1aed      	subs	r5, r5, r3
  404f88:	1acb      	subs	r3, r1, r3
  404f8a:	9208      	str	r2, [sp, #32]
  404f8c:	9306      	str	r3, [sp, #24]
  404f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f90:	b1d3      	cbz	r3, 404fc8 <_dtoa_r+0x490>
  404f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404f94:	2b00      	cmp	r3, #0
  404f96:	f000 82b7 	beq.w	405508 <_dtoa_r+0x9d0>
  404f9a:	2f00      	cmp	r7, #0
  404f9c:	dd10      	ble.n	404fc0 <_dtoa_r+0x488>
  404f9e:	4631      	mov	r1, r6
  404fa0:	463a      	mov	r2, r7
  404fa2:	4620      	mov	r0, r4
  404fa4:	f001 fbfa 	bl	40679c <__pow5mult>
  404fa8:	464a      	mov	r2, r9
  404faa:	4601      	mov	r1, r0
  404fac:	4606      	mov	r6, r0
  404fae:	4620      	mov	r0, r4
  404fb0:	f001 fb62 	bl	406678 <__multiply>
  404fb4:	4649      	mov	r1, r9
  404fb6:	4680      	mov	r8, r0
  404fb8:	4620      	mov	r0, r4
  404fba:	f001 fab9 	bl	406530 <_Bfree>
  404fbe:	46c1      	mov	r9, r8
  404fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404fc2:	1bda      	subs	r2, r3, r7
  404fc4:	f040 82a1 	bne.w	40550a <_dtoa_r+0x9d2>
  404fc8:	2101      	movs	r1, #1
  404fca:	4620      	mov	r0, r4
  404fcc:	f001 fb4a 	bl	406664 <__i2b>
  404fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404fd2:	2b00      	cmp	r3, #0
  404fd4:	4680      	mov	r8, r0
  404fd6:	dd1c      	ble.n	405012 <_dtoa_r+0x4da>
  404fd8:	4601      	mov	r1, r0
  404fda:	461a      	mov	r2, r3
  404fdc:	4620      	mov	r0, r4
  404fde:	f001 fbdd 	bl	40679c <__pow5mult>
  404fe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fe4:	2b01      	cmp	r3, #1
  404fe6:	4680      	mov	r8, r0
  404fe8:	f340 8254 	ble.w	405494 <_dtoa_r+0x95c>
  404fec:	2300      	movs	r3, #0
  404fee:	930c      	str	r3, [sp, #48]	; 0x30
  404ff0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404ff4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  404ff8:	6918      	ldr	r0, [r3, #16]
  404ffa:	f001 fae3 	bl	4065c4 <__hi0bits>
  404ffe:	f1c0 0020 	rsb	r0, r0, #32
  405002:	e010      	b.n	405026 <_dtoa_r+0x4ee>
  405004:	f1c3 0520 	rsb	r5, r3, #32
  405008:	fa0a f005 	lsl.w	r0, sl, r5
  40500c:	e674      	b.n	404cf8 <_dtoa_r+0x1c0>
  40500e:	900e      	str	r0, [sp, #56]	; 0x38
  405010:	e63c      	b.n	404c8c <_dtoa_r+0x154>
  405012:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405014:	2b01      	cmp	r3, #1
  405016:	f340 8287 	ble.w	405528 <_dtoa_r+0x9f0>
  40501a:	2300      	movs	r3, #0
  40501c:	930c      	str	r3, [sp, #48]	; 0x30
  40501e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405020:	2001      	movs	r0, #1
  405022:	2b00      	cmp	r3, #0
  405024:	d1e4      	bne.n	404ff0 <_dtoa_r+0x4b8>
  405026:	9a06      	ldr	r2, [sp, #24]
  405028:	4410      	add	r0, r2
  40502a:	f010 001f 	ands.w	r0, r0, #31
  40502e:	f000 80a1 	beq.w	405174 <_dtoa_r+0x63c>
  405032:	f1c0 0320 	rsb	r3, r0, #32
  405036:	2b04      	cmp	r3, #4
  405038:	f340 849e 	ble.w	405978 <_dtoa_r+0xe40>
  40503c:	9b08      	ldr	r3, [sp, #32]
  40503e:	f1c0 001c 	rsb	r0, r0, #28
  405042:	4403      	add	r3, r0
  405044:	9308      	str	r3, [sp, #32]
  405046:	4613      	mov	r3, r2
  405048:	4403      	add	r3, r0
  40504a:	4405      	add	r5, r0
  40504c:	9306      	str	r3, [sp, #24]
  40504e:	9b08      	ldr	r3, [sp, #32]
  405050:	2b00      	cmp	r3, #0
  405052:	dd05      	ble.n	405060 <_dtoa_r+0x528>
  405054:	4649      	mov	r1, r9
  405056:	461a      	mov	r2, r3
  405058:	4620      	mov	r0, r4
  40505a:	f001 fbef 	bl	40683c <__lshift>
  40505e:	4681      	mov	r9, r0
  405060:	9b06      	ldr	r3, [sp, #24]
  405062:	2b00      	cmp	r3, #0
  405064:	dd05      	ble.n	405072 <_dtoa_r+0x53a>
  405066:	4641      	mov	r1, r8
  405068:	461a      	mov	r2, r3
  40506a:	4620      	mov	r0, r4
  40506c:	f001 fbe6 	bl	40683c <__lshift>
  405070:	4680      	mov	r8, r0
  405072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405074:	2b00      	cmp	r3, #0
  405076:	f040 8086 	bne.w	405186 <_dtoa_r+0x64e>
  40507a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40507c:	2b00      	cmp	r3, #0
  40507e:	f340 8266 	ble.w	40554e <_dtoa_r+0xa16>
  405082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405084:	2b00      	cmp	r3, #0
  405086:	f000 8098 	beq.w	4051ba <_dtoa_r+0x682>
  40508a:	2d00      	cmp	r5, #0
  40508c:	dd05      	ble.n	40509a <_dtoa_r+0x562>
  40508e:	4631      	mov	r1, r6
  405090:	462a      	mov	r2, r5
  405092:	4620      	mov	r0, r4
  405094:	f001 fbd2 	bl	40683c <__lshift>
  405098:	4606      	mov	r6, r0
  40509a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40509c:	2b00      	cmp	r3, #0
  40509e:	f040 8337 	bne.w	405710 <_dtoa_r+0xbd8>
  4050a2:	9606      	str	r6, [sp, #24]
  4050a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050a6:	9a04      	ldr	r2, [sp, #16]
  4050a8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4050ac:	3b01      	subs	r3, #1
  4050ae:	18d3      	adds	r3, r2, r3
  4050b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4050b2:	f00a 0301 	and.w	r3, sl, #1
  4050b6:	930c      	str	r3, [sp, #48]	; 0x30
  4050b8:	4617      	mov	r7, r2
  4050ba:	46c2      	mov	sl, r8
  4050bc:	4651      	mov	r1, sl
  4050be:	4648      	mov	r0, r9
  4050c0:	f7ff fca6 	bl	404a10 <quorem>
  4050c4:	4631      	mov	r1, r6
  4050c6:	4605      	mov	r5, r0
  4050c8:	4648      	mov	r0, r9
  4050ca:	f001 fc09 	bl	4068e0 <__mcmp>
  4050ce:	465a      	mov	r2, fp
  4050d0:	900a      	str	r0, [sp, #40]	; 0x28
  4050d2:	4651      	mov	r1, sl
  4050d4:	4620      	mov	r0, r4
  4050d6:	f001 fc1f 	bl	406918 <__mdiff>
  4050da:	68c2      	ldr	r2, [r0, #12]
  4050dc:	4680      	mov	r8, r0
  4050de:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4050e2:	2a00      	cmp	r2, #0
  4050e4:	f040 822b 	bne.w	40553e <_dtoa_r+0xa06>
  4050e8:	4601      	mov	r1, r0
  4050ea:	4648      	mov	r0, r9
  4050ec:	9308      	str	r3, [sp, #32]
  4050ee:	f001 fbf7 	bl	4068e0 <__mcmp>
  4050f2:	4641      	mov	r1, r8
  4050f4:	9006      	str	r0, [sp, #24]
  4050f6:	4620      	mov	r0, r4
  4050f8:	f001 fa1a 	bl	406530 <_Bfree>
  4050fc:	9a06      	ldr	r2, [sp, #24]
  4050fe:	9b08      	ldr	r3, [sp, #32]
  405100:	b932      	cbnz	r2, 405110 <_dtoa_r+0x5d8>
  405102:	9924      	ldr	r1, [sp, #144]	; 0x90
  405104:	b921      	cbnz	r1, 405110 <_dtoa_r+0x5d8>
  405106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405108:	2a00      	cmp	r2, #0
  40510a:	f000 83ef 	beq.w	4058ec <_dtoa_r+0xdb4>
  40510e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405110:	990a      	ldr	r1, [sp, #40]	; 0x28
  405112:	2900      	cmp	r1, #0
  405114:	f2c0 829f 	blt.w	405656 <_dtoa_r+0xb1e>
  405118:	d105      	bne.n	405126 <_dtoa_r+0x5ee>
  40511a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40511c:	b919      	cbnz	r1, 405126 <_dtoa_r+0x5ee>
  40511e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405120:	2900      	cmp	r1, #0
  405122:	f000 8298 	beq.w	405656 <_dtoa_r+0xb1e>
  405126:	2a00      	cmp	r2, #0
  405128:	f300 8306 	bgt.w	405738 <_dtoa_r+0xc00>
  40512c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40512e:	703b      	strb	r3, [r7, #0]
  405130:	f107 0801 	add.w	r8, r7, #1
  405134:	4297      	cmp	r7, r2
  405136:	4645      	mov	r5, r8
  405138:	f000 830c 	beq.w	405754 <_dtoa_r+0xc1c>
  40513c:	4649      	mov	r1, r9
  40513e:	2300      	movs	r3, #0
  405140:	220a      	movs	r2, #10
  405142:	4620      	mov	r0, r4
  405144:	f001 f9fe 	bl	406544 <__multadd>
  405148:	455e      	cmp	r6, fp
  40514a:	4681      	mov	r9, r0
  40514c:	4631      	mov	r1, r6
  40514e:	f04f 0300 	mov.w	r3, #0
  405152:	f04f 020a 	mov.w	r2, #10
  405156:	4620      	mov	r0, r4
  405158:	f000 81eb 	beq.w	405532 <_dtoa_r+0x9fa>
  40515c:	f001 f9f2 	bl	406544 <__multadd>
  405160:	4659      	mov	r1, fp
  405162:	4606      	mov	r6, r0
  405164:	2300      	movs	r3, #0
  405166:	220a      	movs	r2, #10
  405168:	4620      	mov	r0, r4
  40516a:	f001 f9eb 	bl	406544 <__multadd>
  40516e:	4647      	mov	r7, r8
  405170:	4683      	mov	fp, r0
  405172:	e7a3      	b.n	4050bc <_dtoa_r+0x584>
  405174:	201c      	movs	r0, #28
  405176:	9b08      	ldr	r3, [sp, #32]
  405178:	4403      	add	r3, r0
  40517a:	9308      	str	r3, [sp, #32]
  40517c:	9b06      	ldr	r3, [sp, #24]
  40517e:	4403      	add	r3, r0
  405180:	4405      	add	r5, r0
  405182:	9306      	str	r3, [sp, #24]
  405184:	e763      	b.n	40504e <_dtoa_r+0x516>
  405186:	4641      	mov	r1, r8
  405188:	4648      	mov	r0, r9
  40518a:	f001 fba9 	bl	4068e0 <__mcmp>
  40518e:	2800      	cmp	r0, #0
  405190:	f6bf af73 	bge.w	40507a <_dtoa_r+0x542>
  405194:	9f02      	ldr	r7, [sp, #8]
  405196:	4649      	mov	r1, r9
  405198:	2300      	movs	r3, #0
  40519a:	220a      	movs	r2, #10
  40519c:	4620      	mov	r0, r4
  40519e:	3f01      	subs	r7, #1
  4051a0:	9702      	str	r7, [sp, #8]
  4051a2:	f001 f9cf 	bl	406544 <__multadd>
  4051a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051a8:	4681      	mov	r9, r0
  4051aa:	2b00      	cmp	r3, #0
  4051ac:	f040 83b6 	bne.w	40591c <_dtoa_r+0xde4>
  4051b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4051b2:	2b00      	cmp	r3, #0
  4051b4:	f340 83bf 	ble.w	405936 <_dtoa_r+0xdfe>
  4051b8:	930a      	str	r3, [sp, #40]	; 0x28
  4051ba:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4051c0:	465d      	mov	r5, fp
  4051c2:	e002      	b.n	4051ca <_dtoa_r+0x692>
  4051c4:	f001 f9be 	bl	406544 <__multadd>
  4051c8:	4681      	mov	r9, r0
  4051ca:	4641      	mov	r1, r8
  4051cc:	4648      	mov	r0, r9
  4051ce:	f7ff fc1f 	bl	404a10 <quorem>
  4051d2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4051d6:	f805 ab01 	strb.w	sl, [r5], #1
  4051da:	eba5 030b 	sub.w	r3, r5, fp
  4051de:	42bb      	cmp	r3, r7
  4051e0:	f04f 020a 	mov.w	r2, #10
  4051e4:	f04f 0300 	mov.w	r3, #0
  4051e8:	4649      	mov	r1, r9
  4051ea:	4620      	mov	r0, r4
  4051ec:	dbea      	blt.n	4051c4 <_dtoa_r+0x68c>
  4051ee:	9b04      	ldr	r3, [sp, #16]
  4051f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051f2:	2a01      	cmp	r2, #1
  4051f4:	bfac      	ite	ge
  4051f6:	189b      	addge	r3, r3, r2
  4051f8:	3301      	addlt	r3, #1
  4051fa:	461d      	mov	r5, r3
  4051fc:	f04f 0b00 	mov.w	fp, #0
  405200:	4649      	mov	r1, r9
  405202:	2201      	movs	r2, #1
  405204:	4620      	mov	r0, r4
  405206:	f001 fb19 	bl	40683c <__lshift>
  40520a:	4641      	mov	r1, r8
  40520c:	4681      	mov	r9, r0
  40520e:	f001 fb67 	bl	4068e0 <__mcmp>
  405212:	2800      	cmp	r0, #0
  405214:	f340 823d 	ble.w	405692 <_dtoa_r+0xb5a>
  405218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40521c:	9904      	ldr	r1, [sp, #16]
  40521e:	1e6b      	subs	r3, r5, #1
  405220:	e004      	b.n	40522c <_dtoa_r+0x6f4>
  405222:	428b      	cmp	r3, r1
  405224:	f000 81ae 	beq.w	405584 <_dtoa_r+0xa4c>
  405228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40522c:	2a39      	cmp	r2, #57	; 0x39
  40522e:	f103 0501 	add.w	r5, r3, #1
  405232:	d0f6      	beq.n	405222 <_dtoa_r+0x6ea>
  405234:	3201      	adds	r2, #1
  405236:	701a      	strb	r2, [r3, #0]
  405238:	4641      	mov	r1, r8
  40523a:	4620      	mov	r0, r4
  40523c:	f001 f978 	bl	406530 <_Bfree>
  405240:	2e00      	cmp	r6, #0
  405242:	f43f ae3d 	beq.w	404ec0 <_dtoa_r+0x388>
  405246:	f1bb 0f00 	cmp.w	fp, #0
  40524a:	d005      	beq.n	405258 <_dtoa_r+0x720>
  40524c:	45b3      	cmp	fp, r6
  40524e:	d003      	beq.n	405258 <_dtoa_r+0x720>
  405250:	4659      	mov	r1, fp
  405252:	4620      	mov	r0, r4
  405254:	f001 f96c 	bl	406530 <_Bfree>
  405258:	4631      	mov	r1, r6
  40525a:	4620      	mov	r0, r4
  40525c:	f001 f968 	bl	406530 <_Bfree>
  405260:	e62e      	b.n	404ec0 <_dtoa_r+0x388>
  405262:	2300      	movs	r3, #0
  405264:	930b      	str	r3, [sp, #44]	; 0x2c
  405266:	9b02      	ldr	r3, [sp, #8]
  405268:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40526a:	4413      	add	r3, r2
  40526c:	930f      	str	r3, [sp, #60]	; 0x3c
  40526e:	3301      	adds	r3, #1
  405270:	2b01      	cmp	r3, #1
  405272:	461f      	mov	r7, r3
  405274:	461e      	mov	r6, r3
  405276:	930a      	str	r3, [sp, #40]	; 0x28
  405278:	bfb8      	it	lt
  40527a:	2701      	movlt	r7, #1
  40527c:	2100      	movs	r1, #0
  40527e:	2f17      	cmp	r7, #23
  405280:	6461      	str	r1, [r4, #68]	; 0x44
  405282:	d90a      	bls.n	40529a <_dtoa_r+0x762>
  405284:	2201      	movs	r2, #1
  405286:	2304      	movs	r3, #4
  405288:	005b      	lsls	r3, r3, #1
  40528a:	f103 0014 	add.w	r0, r3, #20
  40528e:	4287      	cmp	r7, r0
  405290:	4611      	mov	r1, r2
  405292:	f102 0201 	add.w	r2, r2, #1
  405296:	d2f7      	bcs.n	405288 <_dtoa_r+0x750>
  405298:	6461      	str	r1, [r4, #68]	; 0x44
  40529a:	4620      	mov	r0, r4
  40529c:	f001 f922 	bl	4064e4 <_Balloc>
  4052a0:	2e0e      	cmp	r6, #14
  4052a2:	9004      	str	r0, [sp, #16]
  4052a4:	6420      	str	r0, [r4, #64]	; 0x40
  4052a6:	f63f ad41 	bhi.w	404d2c <_dtoa_r+0x1f4>
  4052aa:	2d00      	cmp	r5, #0
  4052ac:	f43f ad3e 	beq.w	404d2c <_dtoa_r+0x1f4>
  4052b0:	9902      	ldr	r1, [sp, #8]
  4052b2:	2900      	cmp	r1, #0
  4052b4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4052b8:	f340 8202 	ble.w	4056c0 <_dtoa_r+0xb88>
  4052bc:	4bb8      	ldr	r3, [pc, #736]	; (4055a0 <_dtoa_r+0xa68>)
  4052be:	f001 020f 	and.w	r2, r1, #15
  4052c2:	110d      	asrs	r5, r1, #4
  4052c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4052c8:	06e9      	lsls	r1, r5, #27
  4052ca:	e9d3 6700 	ldrd	r6, r7, [r3]
  4052ce:	f140 81ae 	bpl.w	40562e <_dtoa_r+0xaf6>
  4052d2:	4bb4      	ldr	r3, [pc, #720]	; (4055a4 <_dtoa_r+0xa6c>)
  4052d4:	4650      	mov	r0, sl
  4052d6:	4659      	mov	r1, fp
  4052d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4052dc:	f002 fa18 	bl	407710 <__aeabi_ddiv>
  4052e0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4052e4:	f005 050f 	and.w	r5, r5, #15
  4052e8:	f04f 0a03 	mov.w	sl, #3
  4052ec:	b18d      	cbz	r5, 405312 <_dtoa_r+0x7da>
  4052ee:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4055a4 <_dtoa_r+0xa6c>
  4052f2:	07ea      	lsls	r2, r5, #31
  4052f4:	d509      	bpl.n	40530a <_dtoa_r+0x7d2>
  4052f6:	4630      	mov	r0, r6
  4052f8:	4639      	mov	r1, r7
  4052fa:	e9d8 2300 	ldrd	r2, r3, [r8]
  4052fe:	f002 f8dd 	bl	4074bc <__aeabi_dmul>
  405302:	f10a 0a01 	add.w	sl, sl, #1
  405306:	4606      	mov	r6, r0
  405308:	460f      	mov	r7, r1
  40530a:	106d      	asrs	r5, r5, #1
  40530c:	f108 0808 	add.w	r8, r8, #8
  405310:	d1ef      	bne.n	4052f2 <_dtoa_r+0x7ba>
  405312:	463b      	mov	r3, r7
  405314:	4632      	mov	r2, r6
  405316:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40531a:	f002 f9f9 	bl	407710 <__aeabi_ddiv>
  40531e:	4607      	mov	r7, r0
  405320:	4688      	mov	r8, r1
  405322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405324:	b143      	cbz	r3, 405338 <_dtoa_r+0x800>
  405326:	2200      	movs	r2, #0
  405328:	4b9f      	ldr	r3, [pc, #636]	; (4055a8 <_dtoa_r+0xa70>)
  40532a:	4638      	mov	r0, r7
  40532c:	4641      	mov	r1, r8
  40532e:	f002 fb37 	bl	4079a0 <__aeabi_dcmplt>
  405332:	2800      	cmp	r0, #0
  405334:	f040 8286 	bne.w	405844 <_dtoa_r+0xd0c>
  405338:	4650      	mov	r0, sl
  40533a:	f002 f859 	bl	4073f0 <__aeabi_i2d>
  40533e:	463a      	mov	r2, r7
  405340:	4643      	mov	r3, r8
  405342:	f002 f8bb 	bl	4074bc <__aeabi_dmul>
  405346:	4b99      	ldr	r3, [pc, #612]	; (4055ac <_dtoa_r+0xa74>)
  405348:	2200      	movs	r2, #0
  40534a:	f001 ff05 	bl	407158 <__adddf3>
  40534e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405350:	4605      	mov	r5, r0
  405352:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405356:	2b00      	cmp	r3, #0
  405358:	f000 813e 	beq.w	4055d8 <_dtoa_r+0xaa0>
  40535c:	9b02      	ldr	r3, [sp, #8]
  40535e:	9315      	str	r3, [sp, #84]	; 0x54
  405360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405362:	9312      	str	r3, [sp, #72]	; 0x48
  405364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405366:	2b00      	cmp	r3, #0
  405368:	f000 81fa 	beq.w	405760 <_dtoa_r+0xc28>
  40536c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40536e:	4b8c      	ldr	r3, [pc, #560]	; (4055a0 <_dtoa_r+0xa68>)
  405370:	498f      	ldr	r1, [pc, #572]	; (4055b0 <_dtoa_r+0xa78>)
  405372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405376:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40537a:	2000      	movs	r0, #0
  40537c:	f002 f9c8 	bl	407710 <__aeabi_ddiv>
  405380:	462a      	mov	r2, r5
  405382:	4633      	mov	r3, r6
  405384:	f001 fee6 	bl	407154 <__aeabi_dsub>
  405388:	4682      	mov	sl, r0
  40538a:	468b      	mov	fp, r1
  40538c:	4638      	mov	r0, r7
  40538e:	4641      	mov	r1, r8
  405390:	f002 fb44 	bl	407a1c <__aeabi_d2iz>
  405394:	4605      	mov	r5, r0
  405396:	f002 f82b 	bl	4073f0 <__aeabi_i2d>
  40539a:	4602      	mov	r2, r0
  40539c:	460b      	mov	r3, r1
  40539e:	4638      	mov	r0, r7
  4053a0:	4641      	mov	r1, r8
  4053a2:	f001 fed7 	bl	407154 <__aeabi_dsub>
  4053a6:	3530      	adds	r5, #48	; 0x30
  4053a8:	fa5f f885 	uxtb.w	r8, r5
  4053ac:	9d04      	ldr	r5, [sp, #16]
  4053ae:	4606      	mov	r6, r0
  4053b0:	460f      	mov	r7, r1
  4053b2:	f885 8000 	strb.w	r8, [r5]
  4053b6:	4602      	mov	r2, r0
  4053b8:	460b      	mov	r3, r1
  4053ba:	4650      	mov	r0, sl
  4053bc:	4659      	mov	r1, fp
  4053be:	3501      	adds	r5, #1
  4053c0:	f002 fb0c 	bl	4079dc <__aeabi_dcmpgt>
  4053c4:	2800      	cmp	r0, #0
  4053c6:	d154      	bne.n	405472 <_dtoa_r+0x93a>
  4053c8:	4632      	mov	r2, r6
  4053ca:	463b      	mov	r3, r7
  4053cc:	2000      	movs	r0, #0
  4053ce:	4976      	ldr	r1, [pc, #472]	; (4055a8 <_dtoa_r+0xa70>)
  4053d0:	f001 fec0 	bl	407154 <__aeabi_dsub>
  4053d4:	4602      	mov	r2, r0
  4053d6:	460b      	mov	r3, r1
  4053d8:	4650      	mov	r0, sl
  4053da:	4659      	mov	r1, fp
  4053dc:	f002 fafe 	bl	4079dc <__aeabi_dcmpgt>
  4053e0:	2800      	cmp	r0, #0
  4053e2:	f040 8270 	bne.w	4058c6 <_dtoa_r+0xd8e>
  4053e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053e8:	2a01      	cmp	r2, #1
  4053ea:	f000 8111 	beq.w	405610 <_dtoa_r+0xad8>
  4053ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4053f0:	9a04      	ldr	r2, [sp, #16]
  4053f2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4053f6:	4413      	add	r3, r2
  4053f8:	4699      	mov	r9, r3
  4053fa:	e00d      	b.n	405418 <_dtoa_r+0x8e0>
  4053fc:	2000      	movs	r0, #0
  4053fe:	496a      	ldr	r1, [pc, #424]	; (4055a8 <_dtoa_r+0xa70>)
  405400:	f001 fea8 	bl	407154 <__aeabi_dsub>
  405404:	4652      	mov	r2, sl
  405406:	465b      	mov	r3, fp
  405408:	f002 faca 	bl	4079a0 <__aeabi_dcmplt>
  40540c:	2800      	cmp	r0, #0
  40540e:	f040 8258 	bne.w	4058c2 <_dtoa_r+0xd8a>
  405412:	454d      	cmp	r5, r9
  405414:	f000 80fa 	beq.w	40560c <_dtoa_r+0xad4>
  405418:	4650      	mov	r0, sl
  40541a:	4659      	mov	r1, fp
  40541c:	2200      	movs	r2, #0
  40541e:	4b65      	ldr	r3, [pc, #404]	; (4055b4 <_dtoa_r+0xa7c>)
  405420:	f002 f84c 	bl	4074bc <__aeabi_dmul>
  405424:	2200      	movs	r2, #0
  405426:	4b63      	ldr	r3, [pc, #396]	; (4055b4 <_dtoa_r+0xa7c>)
  405428:	4682      	mov	sl, r0
  40542a:	468b      	mov	fp, r1
  40542c:	4630      	mov	r0, r6
  40542e:	4639      	mov	r1, r7
  405430:	f002 f844 	bl	4074bc <__aeabi_dmul>
  405434:	460f      	mov	r7, r1
  405436:	4606      	mov	r6, r0
  405438:	f002 faf0 	bl	407a1c <__aeabi_d2iz>
  40543c:	4680      	mov	r8, r0
  40543e:	f001 ffd7 	bl	4073f0 <__aeabi_i2d>
  405442:	4602      	mov	r2, r0
  405444:	460b      	mov	r3, r1
  405446:	4630      	mov	r0, r6
  405448:	4639      	mov	r1, r7
  40544a:	f001 fe83 	bl	407154 <__aeabi_dsub>
  40544e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405452:	fa5f f888 	uxtb.w	r8, r8
  405456:	4652      	mov	r2, sl
  405458:	465b      	mov	r3, fp
  40545a:	f805 8b01 	strb.w	r8, [r5], #1
  40545e:	4606      	mov	r6, r0
  405460:	460f      	mov	r7, r1
  405462:	f002 fa9d 	bl	4079a0 <__aeabi_dcmplt>
  405466:	4632      	mov	r2, r6
  405468:	463b      	mov	r3, r7
  40546a:	2800      	cmp	r0, #0
  40546c:	d0c6      	beq.n	4053fc <_dtoa_r+0x8c4>
  40546e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405472:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405474:	9302      	str	r3, [sp, #8]
  405476:	e523      	b.n	404ec0 <_dtoa_r+0x388>
  405478:	2300      	movs	r3, #0
  40547a:	930b      	str	r3, [sp, #44]	; 0x2c
  40547c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40547e:	2b00      	cmp	r3, #0
  405480:	f340 80dc 	ble.w	40563c <_dtoa_r+0xb04>
  405484:	461f      	mov	r7, r3
  405486:	461e      	mov	r6, r3
  405488:	930f      	str	r3, [sp, #60]	; 0x3c
  40548a:	930a      	str	r3, [sp, #40]	; 0x28
  40548c:	e6f6      	b.n	40527c <_dtoa_r+0x744>
  40548e:	2301      	movs	r3, #1
  405490:	930b      	str	r3, [sp, #44]	; 0x2c
  405492:	e7f3      	b.n	40547c <_dtoa_r+0x944>
  405494:	f1ba 0f00 	cmp.w	sl, #0
  405498:	f47f ada8 	bne.w	404fec <_dtoa_r+0x4b4>
  40549c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4054a0:	2b00      	cmp	r3, #0
  4054a2:	f47f adba 	bne.w	40501a <_dtoa_r+0x4e2>
  4054a6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4054aa:	0d3f      	lsrs	r7, r7, #20
  4054ac:	053f      	lsls	r7, r7, #20
  4054ae:	2f00      	cmp	r7, #0
  4054b0:	f000 820d 	beq.w	4058ce <_dtoa_r+0xd96>
  4054b4:	9b08      	ldr	r3, [sp, #32]
  4054b6:	3301      	adds	r3, #1
  4054b8:	9308      	str	r3, [sp, #32]
  4054ba:	9b06      	ldr	r3, [sp, #24]
  4054bc:	3301      	adds	r3, #1
  4054be:	9306      	str	r3, [sp, #24]
  4054c0:	2301      	movs	r3, #1
  4054c2:	930c      	str	r3, [sp, #48]	; 0x30
  4054c4:	e5ab      	b.n	40501e <_dtoa_r+0x4e6>
  4054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054c8:	2b00      	cmp	r3, #0
  4054ca:	f73f ac42 	bgt.w	404d52 <_dtoa_r+0x21a>
  4054ce:	f040 8221 	bne.w	405914 <_dtoa_r+0xddc>
  4054d2:	2200      	movs	r2, #0
  4054d4:	4b38      	ldr	r3, [pc, #224]	; (4055b8 <_dtoa_r+0xa80>)
  4054d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4054da:	f001 ffef 	bl	4074bc <__aeabi_dmul>
  4054de:	4652      	mov	r2, sl
  4054e0:	465b      	mov	r3, fp
  4054e2:	f002 fa71 	bl	4079c8 <__aeabi_dcmpge>
  4054e6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4054ea:	4646      	mov	r6, r8
  4054ec:	2800      	cmp	r0, #0
  4054ee:	d041      	beq.n	405574 <_dtoa_r+0xa3c>
  4054f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054f2:	9d04      	ldr	r5, [sp, #16]
  4054f4:	43db      	mvns	r3, r3
  4054f6:	9302      	str	r3, [sp, #8]
  4054f8:	4641      	mov	r1, r8
  4054fa:	4620      	mov	r0, r4
  4054fc:	f001 f818 	bl	406530 <_Bfree>
  405500:	2e00      	cmp	r6, #0
  405502:	f43f acdd 	beq.w	404ec0 <_dtoa_r+0x388>
  405506:	e6a7      	b.n	405258 <_dtoa_r+0x720>
  405508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40550a:	4649      	mov	r1, r9
  40550c:	4620      	mov	r0, r4
  40550e:	f001 f945 	bl	40679c <__pow5mult>
  405512:	4681      	mov	r9, r0
  405514:	e558      	b.n	404fc8 <_dtoa_r+0x490>
  405516:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405518:	2a00      	cmp	r2, #0
  40551a:	f000 8187 	beq.w	40582c <_dtoa_r+0xcf4>
  40551e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405522:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405524:	9d08      	ldr	r5, [sp, #32]
  405526:	e4f2      	b.n	404f0e <_dtoa_r+0x3d6>
  405528:	f1ba 0f00 	cmp.w	sl, #0
  40552c:	f47f ad75 	bne.w	40501a <_dtoa_r+0x4e2>
  405530:	e7b4      	b.n	40549c <_dtoa_r+0x964>
  405532:	f001 f807 	bl	406544 <__multadd>
  405536:	4647      	mov	r7, r8
  405538:	4606      	mov	r6, r0
  40553a:	4683      	mov	fp, r0
  40553c:	e5be      	b.n	4050bc <_dtoa_r+0x584>
  40553e:	4601      	mov	r1, r0
  405540:	4620      	mov	r0, r4
  405542:	9306      	str	r3, [sp, #24]
  405544:	f000 fff4 	bl	406530 <_Bfree>
  405548:	2201      	movs	r2, #1
  40554a:	9b06      	ldr	r3, [sp, #24]
  40554c:	e5e0      	b.n	405110 <_dtoa_r+0x5d8>
  40554e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405550:	2b02      	cmp	r3, #2
  405552:	f77f ad96 	ble.w	405082 <_dtoa_r+0x54a>
  405556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405558:	2b00      	cmp	r3, #0
  40555a:	d1c9      	bne.n	4054f0 <_dtoa_r+0x9b8>
  40555c:	4641      	mov	r1, r8
  40555e:	2205      	movs	r2, #5
  405560:	4620      	mov	r0, r4
  405562:	f000 ffef 	bl	406544 <__multadd>
  405566:	4601      	mov	r1, r0
  405568:	4680      	mov	r8, r0
  40556a:	4648      	mov	r0, r9
  40556c:	f001 f9b8 	bl	4068e0 <__mcmp>
  405570:	2800      	cmp	r0, #0
  405572:	ddbd      	ble.n	4054f0 <_dtoa_r+0x9b8>
  405574:	9a02      	ldr	r2, [sp, #8]
  405576:	9904      	ldr	r1, [sp, #16]
  405578:	2331      	movs	r3, #49	; 0x31
  40557a:	3201      	adds	r2, #1
  40557c:	9202      	str	r2, [sp, #8]
  40557e:	700b      	strb	r3, [r1, #0]
  405580:	1c4d      	adds	r5, r1, #1
  405582:	e7b9      	b.n	4054f8 <_dtoa_r+0x9c0>
  405584:	9a02      	ldr	r2, [sp, #8]
  405586:	3201      	adds	r2, #1
  405588:	9202      	str	r2, [sp, #8]
  40558a:	9a04      	ldr	r2, [sp, #16]
  40558c:	2331      	movs	r3, #49	; 0x31
  40558e:	7013      	strb	r3, [r2, #0]
  405590:	e652      	b.n	405238 <_dtoa_r+0x700>
  405592:	2301      	movs	r3, #1
  405594:	930b      	str	r3, [sp, #44]	; 0x2c
  405596:	e666      	b.n	405266 <_dtoa_r+0x72e>
  405598:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40559c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40559e:	e48f      	b.n	404ec0 <_dtoa_r+0x388>
  4055a0:	00407cf0 	.word	0x00407cf0
  4055a4:	00407cc8 	.word	0x00407cc8
  4055a8:	3ff00000 	.word	0x3ff00000
  4055ac:	401c0000 	.word	0x401c0000
  4055b0:	3fe00000 	.word	0x3fe00000
  4055b4:	40240000 	.word	0x40240000
  4055b8:	40140000 	.word	0x40140000
  4055bc:	4650      	mov	r0, sl
  4055be:	f001 ff17 	bl	4073f0 <__aeabi_i2d>
  4055c2:	463a      	mov	r2, r7
  4055c4:	4643      	mov	r3, r8
  4055c6:	f001 ff79 	bl	4074bc <__aeabi_dmul>
  4055ca:	2200      	movs	r2, #0
  4055cc:	4bc1      	ldr	r3, [pc, #772]	; (4058d4 <_dtoa_r+0xd9c>)
  4055ce:	f001 fdc3 	bl	407158 <__adddf3>
  4055d2:	4605      	mov	r5, r0
  4055d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4055d8:	4641      	mov	r1, r8
  4055da:	2200      	movs	r2, #0
  4055dc:	4bbe      	ldr	r3, [pc, #760]	; (4058d8 <_dtoa_r+0xda0>)
  4055de:	4638      	mov	r0, r7
  4055e0:	f001 fdb8 	bl	407154 <__aeabi_dsub>
  4055e4:	462a      	mov	r2, r5
  4055e6:	4633      	mov	r3, r6
  4055e8:	4682      	mov	sl, r0
  4055ea:	468b      	mov	fp, r1
  4055ec:	f002 f9f6 	bl	4079dc <__aeabi_dcmpgt>
  4055f0:	4680      	mov	r8, r0
  4055f2:	2800      	cmp	r0, #0
  4055f4:	f040 8110 	bne.w	405818 <_dtoa_r+0xce0>
  4055f8:	462a      	mov	r2, r5
  4055fa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4055fe:	4650      	mov	r0, sl
  405600:	4659      	mov	r1, fp
  405602:	f002 f9cd 	bl	4079a0 <__aeabi_dcmplt>
  405606:	b118      	cbz	r0, 405610 <_dtoa_r+0xad8>
  405608:	4646      	mov	r6, r8
  40560a:	e771      	b.n	4054f0 <_dtoa_r+0x9b8>
  40560c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405610:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405614:	f7ff bb8a 	b.w	404d2c <_dtoa_r+0x1f4>
  405618:	9804      	ldr	r0, [sp, #16]
  40561a:	f7ff babb 	b.w	404b94 <_dtoa_r+0x5c>
  40561e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405622:	970c      	str	r7, [sp, #48]	; 0x30
  405624:	1afb      	subs	r3, r7, r3
  405626:	441a      	add	r2, r3
  405628:	920d      	str	r2, [sp, #52]	; 0x34
  40562a:	2700      	movs	r7, #0
  40562c:	e469      	b.n	404f02 <_dtoa_r+0x3ca>
  40562e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405632:	f04f 0a02 	mov.w	sl, #2
  405636:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40563a:	e657      	b.n	4052ec <_dtoa_r+0x7b4>
  40563c:	2100      	movs	r1, #0
  40563e:	2301      	movs	r3, #1
  405640:	6461      	str	r1, [r4, #68]	; 0x44
  405642:	4620      	mov	r0, r4
  405644:	9325      	str	r3, [sp, #148]	; 0x94
  405646:	f000 ff4d 	bl	4064e4 <_Balloc>
  40564a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40564c:	9004      	str	r0, [sp, #16]
  40564e:	6420      	str	r0, [r4, #64]	; 0x40
  405650:	930a      	str	r3, [sp, #40]	; 0x28
  405652:	930f      	str	r3, [sp, #60]	; 0x3c
  405654:	e629      	b.n	4052aa <_dtoa_r+0x772>
  405656:	2a00      	cmp	r2, #0
  405658:	46d0      	mov	r8, sl
  40565a:	f8cd b018 	str.w	fp, [sp, #24]
  40565e:	469a      	mov	sl, r3
  405660:	dd11      	ble.n	405686 <_dtoa_r+0xb4e>
  405662:	4649      	mov	r1, r9
  405664:	2201      	movs	r2, #1
  405666:	4620      	mov	r0, r4
  405668:	f001 f8e8 	bl	40683c <__lshift>
  40566c:	4641      	mov	r1, r8
  40566e:	4681      	mov	r9, r0
  405670:	f001 f936 	bl	4068e0 <__mcmp>
  405674:	2800      	cmp	r0, #0
  405676:	f340 8146 	ble.w	405906 <_dtoa_r+0xdce>
  40567a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40567e:	f000 8106 	beq.w	40588e <_dtoa_r+0xd56>
  405682:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405686:	46b3      	mov	fp, r6
  405688:	f887 a000 	strb.w	sl, [r7]
  40568c:	1c7d      	adds	r5, r7, #1
  40568e:	9e06      	ldr	r6, [sp, #24]
  405690:	e5d2      	b.n	405238 <_dtoa_r+0x700>
  405692:	d104      	bne.n	40569e <_dtoa_r+0xb66>
  405694:	f01a 0f01 	tst.w	sl, #1
  405698:	d001      	beq.n	40569e <_dtoa_r+0xb66>
  40569a:	e5bd      	b.n	405218 <_dtoa_r+0x6e0>
  40569c:	4615      	mov	r5, r2
  40569e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056a2:	2b30      	cmp	r3, #48	; 0x30
  4056a4:	f105 32ff 	add.w	r2, r5, #4294967295
  4056a8:	d0f8      	beq.n	40569c <_dtoa_r+0xb64>
  4056aa:	e5c5      	b.n	405238 <_dtoa_r+0x700>
  4056ac:	9904      	ldr	r1, [sp, #16]
  4056ae:	2230      	movs	r2, #48	; 0x30
  4056b0:	700a      	strb	r2, [r1, #0]
  4056b2:	9a02      	ldr	r2, [sp, #8]
  4056b4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4056b8:	3201      	adds	r2, #1
  4056ba:	9202      	str	r2, [sp, #8]
  4056bc:	f7ff bbfc 	b.w	404eb8 <_dtoa_r+0x380>
  4056c0:	f000 80bb 	beq.w	40583a <_dtoa_r+0xd02>
  4056c4:	9b02      	ldr	r3, [sp, #8]
  4056c6:	425d      	negs	r5, r3
  4056c8:	4b84      	ldr	r3, [pc, #528]	; (4058dc <_dtoa_r+0xda4>)
  4056ca:	f005 020f 	and.w	r2, r5, #15
  4056ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4056da:	f001 feef 	bl	4074bc <__aeabi_dmul>
  4056de:	112d      	asrs	r5, r5, #4
  4056e0:	4607      	mov	r7, r0
  4056e2:	4688      	mov	r8, r1
  4056e4:	f000 812c 	beq.w	405940 <_dtoa_r+0xe08>
  4056e8:	4e7d      	ldr	r6, [pc, #500]	; (4058e0 <_dtoa_r+0xda8>)
  4056ea:	f04f 0a02 	mov.w	sl, #2
  4056ee:	07eb      	lsls	r3, r5, #31
  4056f0:	d509      	bpl.n	405706 <_dtoa_r+0xbce>
  4056f2:	4638      	mov	r0, r7
  4056f4:	4641      	mov	r1, r8
  4056f6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4056fa:	f001 fedf 	bl	4074bc <__aeabi_dmul>
  4056fe:	f10a 0a01 	add.w	sl, sl, #1
  405702:	4607      	mov	r7, r0
  405704:	4688      	mov	r8, r1
  405706:	106d      	asrs	r5, r5, #1
  405708:	f106 0608 	add.w	r6, r6, #8
  40570c:	d1ef      	bne.n	4056ee <_dtoa_r+0xbb6>
  40570e:	e608      	b.n	405322 <_dtoa_r+0x7ea>
  405710:	6871      	ldr	r1, [r6, #4]
  405712:	4620      	mov	r0, r4
  405714:	f000 fee6 	bl	4064e4 <_Balloc>
  405718:	6933      	ldr	r3, [r6, #16]
  40571a:	3302      	adds	r3, #2
  40571c:	009a      	lsls	r2, r3, #2
  40571e:	4605      	mov	r5, r0
  405720:	f106 010c 	add.w	r1, r6, #12
  405724:	300c      	adds	r0, #12
  405726:	f000 fddb 	bl	4062e0 <memcpy>
  40572a:	4629      	mov	r1, r5
  40572c:	2201      	movs	r2, #1
  40572e:	4620      	mov	r0, r4
  405730:	f001 f884 	bl	40683c <__lshift>
  405734:	9006      	str	r0, [sp, #24]
  405736:	e4b5      	b.n	4050a4 <_dtoa_r+0x56c>
  405738:	2b39      	cmp	r3, #57	; 0x39
  40573a:	f8cd b018 	str.w	fp, [sp, #24]
  40573e:	46d0      	mov	r8, sl
  405740:	f000 80a5 	beq.w	40588e <_dtoa_r+0xd56>
  405744:	f103 0a01 	add.w	sl, r3, #1
  405748:	46b3      	mov	fp, r6
  40574a:	f887 a000 	strb.w	sl, [r7]
  40574e:	1c7d      	adds	r5, r7, #1
  405750:	9e06      	ldr	r6, [sp, #24]
  405752:	e571      	b.n	405238 <_dtoa_r+0x700>
  405754:	465a      	mov	r2, fp
  405756:	46d0      	mov	r8, sl
  405758:	46b3      	mov	fp, r6
  40575a:	469a      	mov	sl, r3
  40575c:	4616      	mov	r6, r2
  40575e:	e54f      	b.n	405200 <_dtoa_r+0x6c8>
  405760:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405762:	495e      	ldr	r1, [pc, #376]	; (4058dc <_dtoa_r+0xda4>)
  405764:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405768:	462a      	mov	r2, r5
  40576a:	4633      	mov	r3, r6
  40576c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405770:	f001 fea4 	bl	4074bc <__aeabi_dmul>
  405774:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405778:	4638      	mov	r0, r7
  40577a:	4641      	mov	r1, r8
  40577c:	f002 f94e 	bl	407a1c <__aeabi_d2iz>
  405780:	4605      	mov	r5, r0
  405782:	f001 fe35 	bl	4073f0 <__aeabi_i2d>
  405786:	460b      	mov	r3, r1
  405788:	4602      	mov	r2, r0
  40578a:	4641      	mov	r1, r8
  40578c:	4638      	mov	r0, r7
  40578e:	f001 fce1 	bl	407154 <__aeabi_dsub>
  405792:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405794:	460f      	mov	r7, r1
  405796:	9904      	ldr	r1, [sp, #16]
  405798:	3530      	adds	r5, #48	; 0x30
  40579a:	2b01      	cmp	r3, #1
  40579c:	700d      	strb	r5, [r1, #0]
  40579e:	4606      	mov	r6, r0
  4057a0:	f101 0501 	add.w	r5, r1, #1
  4057a4:	d026      	beq.n	4057f4 <_dtoa_r+0xcbc>
  4057a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057a8:	9a04      	ldr	r2, [sp, #16]
  4057aa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4058e8 <_dtoa_r+0xdb0>
  4057ae:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4057b2:	4413      	add	r3, r2
  4057b4:	f04f 0a00 	mov.w	sl, #0
  4057b8:	4699      	mov	r9, r3
  4057ba:	4652      	mov	r2, sl
  4057bc:	465b      	mov	r3, fp
  4057be:	4630      	mov	r0, r6
  4057c0:	4639      	mov	r1, r7
  4057c2:	f001 fe7b 	bl	4074bc <__aeabi_dmul>
  4057c6:	460f      	mov	r7, r1
  4057c8:	4606      	mov	r6, r0
  4057ca:	f002 f927 	bl	407a1c <__aeabi_d2iz>
  4057ce:	4680      	mov	r8, r0
  4057d0:	f001 fe0e 	bl	4073f0 <__aeabi_i2d>
  4057d4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4057d8:	4602      	mov	r2, r0
  4057da:	460b      	mov	r3, r1
  4057dc:	4630      	mov	r0, r6
  4057de:	4639      	mov	r1, r7
  4057e0:	f001 fcb8 	bl	407154 <__aeabi_dsub>
  4057e4:	f805 8b01 	strb.w	r8, [r5], #1
  4057e8:	454d      	cmp	r5, r9
  4057ea:	4606      	mov	r6, r0
  4057ec:	460f      	mov	r7, r1
  4057ee:	d1e4      	bne.n	4057ba <_dtoa_r+0xc82>
  4057f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4057f4:	4b3b      	ldr	r3, [pc, #236]	; (4058e4 <_dtoa_r+0xdac>)
  4057f6:	2200      	movs	r2, #0
  4057f8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4057fc:	f001 fcac 	bl	407158 <__adddf3>
  405800:	4632      	mov	r2, r6
  405802:	463b      	mov	r3, r7
  405804:	f002 f8cc 	bl	4079a0 <__aeabi_dcmplt>
  405808:	2800      	cmp	r0, #0
  40580a:	d046      	beq.n	40589a <_dtoa_r+0xd62>
  40580c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40580e:	9302      	str	r3, [sp, #8]
  405810:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405814:	f7ff bb43 	b.w	404e9e <_dtoa_r+0x366>
  405818:	f04f 0800 	mov.w	r8, #0
  40581c:	4646      	mov	r6, r8
  40581e:	e6a9      	b.n	405574 <_dtoa_r+0xa3c>
  405820:	9b08      	ldr	r3, [sp, #32]
  405822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405824:	1a9d      	subs	r5, r3, r2
  405826:	2300      	movs	r3, #0
  405828:	f7ff bb71 	b.w	404f0e <_dtoa_r+0x3d6>
  40582c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40582e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405830:	9d08      	ldr	r5, [sp, #32]
  405832:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405836:	f7ff bb6a 	b.w	404f0e <_dtoa_r+0x3d6>
  40583a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40583e:	f04f 0a02 	mov.w	sl, #2
  405842:	e56e      	b.n	405322 <_dtoa_r+0x7ea>
  405844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405846:	2b00      	cmp	r3, #0
  405848:	f43f aeb8 	beq.w	4055bc <_dtoa_r+0xa84>
  40584c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40584e:	2b00      	cmp	r3, #0
  405850:	f77f aede 	ble.w	405610 <_dtoa_r+0xad8>
  405854:	2200      	movs	r2, #0
  405856:	4b24      	ldr	r3, [pc, #144]	; (4058e8 <_dtoa_r+0xdb0>)
  405858:	4638      	mov	r0, r7
  40585a:	4641      	mov	r1, r8
  40585c:	f001 fe2e 	bl	4074bc <__aeabi_dmul>
  405860:	4607      	mov	r7, r0
  405862:	4688      	mov	r8, r1
  405864:	f10a 0001 	add.w	r0, sl, #1
  405868:	f001 fdc2 	bl	4073f0 <__aeabi_i2d>
  40586c:	463a      	mov	r2, r7
  40586e:	4643      	mov	r3, r8
  405870:	f001 fe24 	bl	4074bc <__aeabi_dmul>
  405874:	2200      	movs	r2, #0
  405876:	4b17      	ldr	r3, [pc, #92]	; (4058d4 <_dtoa_r+0xd9c>)
  405878:	f001 fc6e 	bl	407158 <__adddf3>
  40587c:	9a02      	ldr	r2, [sp, #8]
  40587e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405880:	9312      	str	r3, [sp, #72]	; 0x48
  405882:	3a01      	subs	r2, #1
  405884:	4605      	mov	r5, r0
  405886:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40588a:	9215      	str	r2, [sp, #84]	; 0x54
  40588c:	e56a      	b.n	405364 <_dtoa_r+0x82c>
  40588e:	2239      	movs	r2, #57	; 0x39
  405890:	46b3      	mov	fp, r6
  405892:	703a      	strb	r2, [r7, #0]
  405894:	9e06      	ldr	r6, [sp, #24]
  405896:	1c7d      	adds	r5, r7, #1
  405898:	e4c0      	b.n	40521c <_dtoa_r+0x6e4>
  40589a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40589e:	2000      	movs	r0, #0
  4058a0:	4910      	ldr	r1, [pc, #64]	; (4058e4 <_dtoa_r+0xdac>)
  4058a2:	f001 fc57 	bl	407154 <__aeabi_dsub>
  4058a6:	4632      	mov	r2, r6
  4058a8:	463b      	mov	r3, r7
  4058aa:	f002 f897 	bl	4079dc <__aeabi_dcmpgt>
  4058ae:	b908      	cbnz	r0, 4058b4 <_dtoa_r+0xd7c>
  4058b0:	e6ae      	b.n	405610 <_dtoa_r+0xad8>
  4058b2:	4615      	mov	r5, r2
  4058b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4058b8:	2b30      	cmp	r3, #48	; 0x30
  4058ba:	f105 32ff 	add.w	r2, r5, #4294967295
  4058be:	d0f8      	beq.n	4058b2 <_dtoa_r+0xd7a>
  4058c0:	e5d7      	b.n	405472 <_dtoa_r+0x93a>
  4058c2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4058c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4058c8:	9302      	str	r3, [sp, #8]
  4058ca:	f7ff bae8 	b.w	404e9e <_dtoa_r+0x366>
  4058ce:	970c      	str	r7, [sp, #48]	; 0x30
  4058d0:	f7ff bba5 	b.w	40501e <_dtoa_r+0x4e6>
  4058d4:	401c0000 	.word	0x401c0000
  4058d8:	40140000 	.word	0x40140000
  4058dc:	00407cf0 	.word	0x00407cf0
  4058e0:	00407cc8 	.word	0x00407cc8
  4058e4:	3fe00000 	.word	0x3fe00000
  4058e8:	40240000 	.word	0x40240000
  4058ec:	2b39      	cmp	r3, #57	; 0x39
  4058ee:	f8cd b018 	str.w	fp, [sp, #24]
  4058f2:	46d0      	mov	r8, sl
  4058f4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4058f8:	469a      	mov	sl, r3
  4058fa:	d0c8      	beq.n	40588e <_dtoa_r+0xd56>
  4058fc:	f1bb 0f00 	cmp.w	fp, #0
  405900:	f73f aebf 	bgt.w	405682 <_dtoa_r+0xb4a>
  405904:	e6bf      	b.n	405686 <_dtoa_r+0xb4e>
  405906:	f47f aebe 	bne.w	405686 <_dtoa_r+0xb4e>
  40590a:	f01a 0f01 	tst.w	sl, #1
  40590e:	f43f aeba 	beq.w	405686 <_dtoa_r+0xb4e>
  405912:	e6b2      	b.n	40567a <_dtoa_r+0xb42>
  405914:	f04f 0800 	mov.w	r8, #0
  405918:	4646      	mov	r6, r8
  40591a:	e5e9      	b.n	4054f0 <_dtoa_r+0x9b8>
  40591c:	4631      	mov	r1, r6
  40591e:	2300      	movs	r3, #0
  405920:	220a      	movs	r2, #10
  405922:	4620      	mov	r0, r4
  405924:	f000 fe0e 	bl	406544 <__multadd>
  405928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40592a:	2b00      	cmp	r3, #0
  40592c:	4606      	mov	r6, r0
  40592e:	dd0a      	ble.n	405946 <_dtoa_r+0xe0e>
  405930:	930a      	str	r3, [sp, #40]	; 0x28
  405932:	f7ff bbaa 	b.w	40508a <_dtoa_r+0x552>
  405936:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405938:	2b02      	cmp	r3, #2
  40593a:	dc23      	bgt.n	405984 <_dtoa_r+0xe4c>
  40593c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40593e:	e43b      	b.n	4051b8 <_dtoa_r+0x680>
  405940:	f04f 0a02 	mov.w	sl, #2
  405944:	e4ed      	b.n	405322 <_dtoa_r+0x7ea>
  405946:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405948:	2b02      	cmp	r3, #2
  40594a:	dc1b      	bgt.n	405984 <_dtoa_r+0xe4c>
  40594c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40594e:	e7ef      	b.n	405930 <_dtoa_r+0xdf8>
  405950:	2500      	movs	r5, #0
  405952:	6465      	str	r5, [r4, #68]	; 0x44
  405954:	4629      	mov	r1, r5
  405956:	4620      	mov	r0, r4
  405958:	f000 fdc4 	bl	4064e4 <_Balloc>
  40595c:	f04f 33ff 	mov.w	r3, #4294967295
  405960:	930a      	str	r3, [sp, #40]	; 0x28
  405962:	930f      	str	r3, [sp, #60]	; 0x3c
  405964:	2301      	movs	r3, #1
  405966:	9004      	str	r0, [sp, #16]
  405968:	9525      	str	r5, [sp, #148]	; 0x94
  40596a:	6420      	str	r0, [r4, #64]	; 0x40
  40596c:	930b      	str	r3, [sp, #44]	; 0x2c
  40596e:	f7ff b9dd 	b.w	404d2c <_dtoa_r+0x1f4>
  405972:	2501      	movs	r5, #1
  405974:	f7ff b9a5 	b.w	404cc2 <_dtoa_r+0x18a>
  405978:	f43f ab69 	beq.w	40504e <_dtoa_r+0x516>
  40597c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405980:	f7ff bbf9 	b.w	405176 <_dtoa_r+0x63e>
  405984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405986:	930a      	str	r3, [sp, #40]	; 0x28
  405988:	e5e5      	b.n	405556 <_dtoa_r+0xa1e>
  40598a:	bf00      	nop

0040598c <__libc_fini_array>:
  40598c:	b538      	push	{r3, r4, r5, lr}
  40598e:	4c0a      	ldr	r4, [pc, #40]	; (4059b8 <__libc_fini_array+0x2c>)
  405990:	4d0a      	ldr	r5, [pc, #40]	; (4059bc <__libc_fini_array+0x30>)
  405992:	1b64      	subs	r4, r4, r5
  405994:	10a4      	asrs	r4, r4, #2
  405996:	d00a      	beq.n	4059ae <__libc_fini_array+0x22>
  405998:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40599c:	3b01      	subs	r3, #1
  40599e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4059a2:	3c01      	subs	r4, #1
  4059a4:	f855 3904 	ldr.w	r3, [r5], #-4
  4059a8:	4798      	blx	r3
  4059aa:	2c00      	cmp	r4, #0
  4059ac:	d1f9      	bne.n	4059a2 <__libc_fini_array+0x16>
  4059ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4059b2:	f002 ba93 	b.w	407edc <_fini>
  4059b6:	bf00      	nop
  4059b8:	00407eec 	.word	0x00407eec
  4059bc:	00407ee8 	.word	0x00407ee8

004059c0 <_malloc_trim_r>:
  4059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059c2:	4f24      	ldr	r7, [pc, #144]	; (405a54 <_malloc_trim_r+0x94>)
  4059c4:	460c      	mov	r4, r1
  4059c6:	4606      	mov	r6, r0
  4059c8:	f000 fd88 	bl	4064dc <__malloc_lock>
  4059cc:	68bb      	ldr	r3, [r7, #8]
  4059ce:	685d      	ldr	r5, [r3, #4]
  4059d0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4059d4:	310f      	adds	r1, #15
  4059d6:	f025 0503 	bic.w	r5, r5, #3
  4059da:	4429      	add	r1, r5
  4059dc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4059e0:	f021 010f 	bic.w	r1, r1, #15
  4059e4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4059e8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4059ec:	db07      	blt.n	4059fe <_malloc_trim_r+0x3e>
  4059ee:	2100      	movs	r1, #0
  4059f0:	4630      	mov	r0, r6
  4059f2:	f001 fa17 	bl	406e24 <_sbrk_r>
  4059f6:	68bb      	ldr	r3, [r7, #8]
  4059f8:	442b      	add	r3, r5
  4059fa:	4298      	cmp	r0, r3
  4059fc:	d004      	beq.n	405a08 <_malloc_trim_r+0x48>
  4059fe:	4630      	mov	r0, r6
  405a00:	f000 fd6e 	bl	4064e0 <__malloc_unlock>
  405a04:	2000      	movs	r0, #0
  405a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a08:	4261      	negs	r1, r4
  405a0a:	4630      	mov	r0, r6
  405a0c:	f001 fa0a 	bl	406e24 <_sbrk_r>
  405a10:	3001      	adds	r0, #1
  405a12:	d00d      	beq.n	405a30 <_malloc_trim_r+0x70>
  405a14:	4b10      	ldr	r3, [pc, #64]	; (405a58 <_malloc_trim_r+0x98>)
  405a16:	68ba      	ldr	r2, [r7, #8]
  405a18:	6819      	ldr	r1, [r3, #0]
  405a1a:	1b2d      	subs	r5, r5, r4
  405a1c:	f045 0501 	orr.w	r5, r5, #1
  405a20:	4630      	mov	r0, r6
  405a22:	1b09      	subs	r1, r1, r4
  405a24:	6055      	str	r5, [r2, #4]
  405a26:	6019      	str	r1, [r3, #0]
  405a28:	f000 fd5a 	bl	4064e0 <__malloc_unlock>
  405a2c:	2001      	movs	r0, #1
  405a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a30:	2100      	movs	r1, #0
  405a32:	4630      	mov	r0, r6
  405a34:	f001 f9f6 	bl	406e24 <_sbrk_r>
  405a38:	68ba      	ldr	r2, [r7, #8]
  405a3a:	1a83      	subs	r3, r0, r2
  405a3c:	2b0f      	cmp	r3, #15
  405a3e:	ddde      	ble.n	4059fe <_malloc_trim_r+0x3e>
  405a40:	4c06      	ldr	r4, [pc, #24]	; (405a5c <_malloc_trim_r+0x9c>)
  405a42:	4905      	ldr	r1, [pc, #20]	; (405a58 <_malloc_trim_r+0x98>)
  405a44:	6824      	ldr	r4, [r4, #0]
  405a46:	f043 0301 	orr.w	r3, r3, #1
  405a4a:	1b00      	subs	r0, r0, r4
  405a4c:	6053      	str	r3, [r2, #4]
  405a4e:	6008      	str	r0, [r1, #0]
  405a50:	e7d5      	b.n	4059fe <_malloc_trim_r+0x3e>
  405a52:	bf00      	nop
  405a54:	200005ac 	.word	0x200005ac
  405a58:	2000896c 	.word	0x2000896c
  405a5c:	200009b4 	.word	0x200009b4

00405a60 <_free_r>:
  405a60:	2900      	cmp	r1, #0
  405a62:	d044      	beq.n	405aee <_free_r+0x8e>
  405a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a68:	460d      	mov	r5, r1
  405a6a:	4680      	mov	r8, r0
  405a6c:	f000 fd36 	bl	4064dc <__malloc_lock>
  405a70:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405a74:	4969      	ldr	r1, [pc, #420]	; (405c1c <_free_r+0x1bc>)
  405a76:	f027 0301 	bic.w	r3, r7, #1
  405a7a:	f1a5 0408 	sub.w	r4, r5, #8
  405a7e:	18e2      	adds	r2, r4, r3
  405a80:	688e      	ldr	r6, [r1, #8]
  405a82:	6850      	ldr	r0, [r2, #4]
  405a84:	42b2      	cmp	r2, r6
  405a86:	f020 0003 	bic.w	r0, r0, #3
  405a8a:	d05e      	beq.n	405b4a <_free_r+0xea>
  405a8c:	07fe      	lsls	r6, r7, #31
  405a8e:	6050      	str	r0, [r2, #4]
  405a90:	d40b      	bmi.n	405aaa <_free_r+0x4a>
  405a92:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405a96:	1be4      	subs	r4, r4, r7
  405a98:	f101 0e08 	add.w	lr, r1, #8
  405a9c:	68a5      	ldr	r5, [r4, #8]
  405a9e:	4575      	cmp	r5, lr
  405aa0:	443b      	add	r3, r7
  405aa2:	d06d      	beq.n	405b80 <_free_r+0x120>
  405aa4:	68e7      	ldr	r7, [r4, #12]
  405aa6:	60ef      	str	r7, [r5, #12]
  405aa8:	60bd      	str	r5, [r7, #8]
  405aaa:	1815      	adds	r5, r2, r0
  405aac:	686d      	ldr	r5, [r5, #4]
  405aae:	07ed      	lsls	r5, r5, #31
  405ab0:	d53e      	bpl.n	405b30 <_free_r+0xd0>
  405ab2:	f043 0201 	orr.w	r2, r3, #1
  405ab6:	6062      	str	r2, [r4, #4]
  405ab8:	50e3      	str	r3, [r4, r3]
  405aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405abe:	d217      	bcs.n	405af0 <_free_r+0x90>
  405ac0:	08db      	lsrs	r3, r3, #3
  405ac2:	1c58      	adds	r0, r3, #1
  405ac4:	109a      	asrs	r2, r3, #2
  405ac6:	684d      	ldr	r5, [r1, #4]
  405ac8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405acc:	60a7      	str	r7, [r4, #8]
  405ace:	2301      	movs	r3, #1
  405ad0:	4093      	lsls	r3, r2
  405ad2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405ad6:	432b      	orrs	r3, r5
  405ad8:	3a08      	subs	r2, #8
  405ada:	60e2      	str	r2, [r4, #12]
  405adc:	604b      	str	r3, [r1, #4]
  405ade:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405ae2:	60fc      	str	r4, [r7, #12]
  405ae4:	4640      	mov	r0, r8
  405ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405aea:	f000 bcf9 	b.w	4064e0 <__malloc_unlock>
  405aee:	4770      	bx	lr
  405af0:	0a5a      	lsrs	r2, r3, #9
  405af2:	2a04      	cmp	r2, #4
  405af4:	d852      	bhi.n	405b9c <_free_r+0x13c>
  405af6:	099a      	lsrs	r2, r3, #6
  405af8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405afc:	00ff      	lsls	r7, r7, #3
  405afe:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405b02:	19c8      	adds	r0, r1, r7
  405b04:	59ca      	ldr	r2, [r1, r7]
  405b06:	3808      	subs	r0, #8
  405b08:	4290      	cmp	r0, r2
  405b0a:	d04f      	beq.n	405bac <_free_r+0x14c>
  405b0c:	6851      	ldr	r1, [r2, #4]
  405b0e:	f021 0103 	bic.w	r1, r1, #3
  405b12:	428b      	cmp	r3, r1
  405b14:	d232      	bcs.n	405b7c <_free_r+0x11c>
  405b16:	6892      	ldr	r2, [r2, #8]
  405b18:	4290      	cmp	r0, r2
  405b1a:	d1f7      	bne.n	405b0c <_free_r+0xac>
  405b1c:	68c3      	ldr	r3, [r0, #12]
  405b1e:	60a0      	str	r0, [r4, #8]
  405b20:	60e3      	str	r3, [r4, #12]
  405b22:	609c      	str	r4, [r3, #8]
  405b24:	60c4      	str	r4, [r0, #12]
  405b26:	4640      	mov	r0, r8
  405b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b2c:	f000 bcd8 	b.w	4064e0 <__malloc_unlock>
  405b30:	6895      	ldr	r5, [r2, #8]
  405b32:	4f3b      	ldr	r7, [pc, #236]	; (405c20 <_free_r+0x1c0>)
  405b34:	42bd      	cmp	r5, r7
  405b36:	4403      	add	r3, r0
  405b38:	d040      	beq.n	405bbc <_free_r+0x15c>
  405b3a:	68d0      	ldr	r0, [r2, #12]
  405b3c:	60e8      	str	r0, [r5, #12]
  405b3e:	f043 0201 	orr.w	r2, r3, #1
  405b42:	6085      	str	r5, [r0, #8]
  405b44:	6062      	str	r2, [r4, #4]
  405b46:	50e3      	str	r3, [r4, r3]
  405b48:	e7b7      	b.n	405aba <_free_r+0x5a>
  405b4a:	07ff      	lsls	r7, r7, #31
  405b4c:	4403      	add	r3, r0
  405b4e:	d407      	bmi.n	405b60 <_free_r+0x100>
  405b50:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405b54:	1aa4      	subs	r4, r4, r2
  405b56:	4413      	add	r3, r2
  405b58:	68a0      	ldr	r0, [r4, #8]
  405b5a:	68e2      	ldr	r2, [r4, #12]
  405b5c:	60c2      	str	r2, [r0, #12]
  405b5e:	6090      	str	r0, [r2, #8]
  405b60:	4a30      	ldr	r2, [pc, #192]	; (405c24 <_free_r+0x1c4>)
  405b62:	6812      	ldr	r2, [r2, #0]
  405b64:	f043 0001 	orr.w	r0, r3, #1
  405b68:	4293      	cmp	r3, r2
  405b6a:	6060      	str	r0, [r4, #4]
  405b6c:	608c      	str	r4, [r1, #8]
  405b6e:	d3b9      	bcc.n	405ae4 <_free_r+0x84>
  405b70:	4b2d      	ldr	r3, [pc, #180]	; (405c28 <_free_r+0x1c8>)
  405b72:	4640      	mov	r0, r8
  405b74:	6819      	ldr	r1, [r3, #0]
  405b76:	f7ff ff23 	bl	4059c0 <_malloc_trim_r>
  405b7a:	e7b3      	b.n	405ae4 <_free_r+0x84>
  405b7c:	4610      	mov	r0, r2
  405b7e:	e7cd      	b.n	405b1c <_free_r+0xbc>
  405b80:	1811      	adds	r1, r2, r0
  405b82:	6849      	ldr	r1, [r1, #4]
  405b84:	07c9      	lsls	r1, r1, #31
  405b86:	d444      	bmi.n	405c12 <_free_r+0x1b2>
  405b88:	6891      	ldr	r1, [r2, #8]
  405b8a:	68d2      	ldr	r2, [r2, #12]
  405b8c:	60ca      	str	r2, [r1, #12]
  405b8e:	4403      	add	r3, r0
  405b90:	f043 0001 	orr.w	r0, r3, #1
  405b94:	6091      	str	r1, [r2, #8]
  405b96:	6060      	str	r0, [r4, #4]
  405b98:	50e3      	str	r3, [r4, r3]
  405b9a:	e7a3      	b.n	405ae4 <_free_r+0x84>
  405b9c:	2a14      	cmp	r2, #20
  405b9e:	d816      	bhi.n	405bce <_free_r+0x16e>
  405ba0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405ba4:	00ff      	lsls	r7, r7, #3
  405ba6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405baa:	e7aa      	b.n	405b02 <_free_r+0xa2>
  405bac:	10aa      	asrs	r2, r5, #2
  405bae:	2301      	movs	r3, #1
  405bb0:	684d      	ldr	r5, [r1, #4]
  405bb2:	4093      	lsls	r3, r2
  405bb4:	432b      	orrs	r3, r5
  405bb6:	604b      	str	r3, [r1, #4]
  405bb8:	4603      	mov	r3, r0
  405bba:	e7b0      	b.n	405b1e <_free_r+0xbe>
  405bbc:	f043 0201 	orr.w	r2, r3, #1
  405bc0:	614c      	str	r4, [r1, #20]
  405bc2:	610c      	str	r4, [r1, #16]
  405bc4:	60e5      	str	r5, [r4, #12]
  405bc6:	60a5      	str	r5, [r4, #8]
  405bc8:	6062      	str	r2, [r4, #4]
  405bca:	50e3      	str	r3, [r4, r3]
  405bcc:	e78a      	b.n	405ae4 <_free_r+0x84>
  405bce:	2a54      	cmp	r2, #84	; 0x54
  405bd0:	d806      	bhi.n	405be0 <_free_r+0x180>
  405bd2:	0b1a      	lsrs	r2, r3, #12
  405bd4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405bd8:	00ff      	lsls	r7, r7, #3
  405bda:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405bde:	e790      	b.n	405b02 <_free_r+0xa2>
  405be0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405be4:	d806      	bhi.n	405bf4 <_free_r+0x194>
  405be6:	0bda      	lsrs	r2, r3, #15
  405be8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405bec:	00ff      	lsls	r7, r7, #3
  405bee:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405bf2:	e786      	b.n	405b02 <_free_r+0xa2>
  405bf4:	f240 5054 	movw	r0, #1364	; 0x554
  405bf8:	4282      	cmp	r2, r0
  405bfa:	d806      	bhi.n	405c0a <_free_r+0x1aa>
  405bfc:	0c9a      	lsrs	r2, r3, #18
  405bfe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405c02:	00ff      	lsls	r7, r7, #3
  405c04:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405c08:	e77b      	b.n	405b02 <_free_r+0xa2>
  405c0a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405c0e:	257e      	movs	r5, #126	; 0x7e
  405c10:	e777      	b.n	405b02 <_free_r+0xa2>
  405c12:	f043 0101 	orr.w	r1, r3, #1
  405c16:	6061      	str	r1, [r4, #4]
  405c18:	6013      	str	r3, [r2, #0]
  405c1a:	e763      	b.n	405ae4 <_free_r+0x84>
  405c1c:	200005ac 	.word	0x200005ac
  405c20:	200005b4 	.word	0x200005b4
  405c24:	200009b8 	.word	0x200009b8
  405c28:	2000899c 	.word	0x2000899c

00405c2c <_localeconv_r>:
  405c2c:	4a04      	ldr	r2, [pc, #16]	; (405c40 <_localeconv_r+0x14>)
  405c2e:	4b05      	ldr	r3, [pc, #20]	; (405c44 <_localeconv_r+0x18>)
  405c30:	6812      	ldr	r2, [r2, #0]
  405c32:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405c34:	2800      	cmp	r0, #0
  405c36:	bf08      	it	eq
  405c38:	4618      	moveq	r0, r3
  405c3a:	30f0      	adds	r0, #240	; 0xf0
  405c3c:	4770      	bx	lr
  405c3e:	bf00      	nop
  405c40:	20000010 	.word	0x20000010
  405c44:	20000440 	.word	0x20000440

00405c48 <_malloc_r>:
  405c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c4c:	f101 060b 	add.w	r6, r1, #11
  405c50:	2e16      	cmp	r6, #22
  405c52:	b083      	sub	sp, #12
  405c54:	4605      	mov	r5, r0
  405c56:	f240 809e 	bls.w	405d96 <_malloc_r+0x14e>
  405c5a:	f036 0607 	bics.w	r6, r6, #7
  405c5e:	f100 80bd 	bmi.w	405ddc <_malloc_r+0x194>
  405c62:	42b1      	cmp	r1, r6
  405c64:	f200 80ba 	bhi.w	405ddc <_malloc_r+0x194>
  405c68:	f000 fc38 	bl	4064dc <__malloc_lock>
  405c6c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405c70:	f0c0 8293 	bcc.w	40619a <_malloc_r+0x552>
  405c74:	0a73      	lsrs	r3, r6, #9
  405c76:	f000 80b8 	beq.w	405dea <_malloc_r+0x1a2>
  405c7a:	2b04      	cmp	r3, #4
  405c7c:	f200 8179 	bhi.w	405f72 <_malloc_r+0x32a>
  405c80:	09b3      	lsrs	r3, r6, #6
  405c82:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405c86:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405c8a:	00c3      	lsls	r3, r0, #3
  405c8c:	4fbf      	ldr	r7, [pc, #764]	; (405f8c <_malloc_r+0x344>)
  405c8e:	443b      	add	r3, r7
  405c90:	f1a3 0108 	sub.w	r1, r3, #8
  405c94:	685c      	ldr	r4, [r3, #4]
  405c96:	42a1      	cmp	r1, r4
  405c98:	d106      	bne.n	405ca8 <_malloc_r+0x60>
  405c9a:	e00c      	b.n	405cb6 <_malloc_r+0x6e>
  405c9c:	2a00      	cmp	r2, #0
  405c9e:	f280 80aa 	bge.w	405df6 <_malloc_r+0x1ae>
  405ca2:	68e4      	ldr	r4, [r4, #12]
  405ca4:	42a1      	cmp	r1, r4
  405ca6:	d006      	beq.n	405cb6 <_malloc_r+0x6e>
  405ca8:	6863      	ldr	r3, [r4, #4]
  405caa:	f023 0303 	bic.w	r3, r3, #3
  405cae:	1b9a      	subs	r2, r3, r6
  405cb0:	2a0f      	cmp	r2, #15
  405cb2:	ddf3      	ble.n	405c9c <_malloc_r+0x54>
  405cb4:	4670      	mov	r0, lr
  405cb6:	693c      	ldr	r4, [r7, #16]
  405cb8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405fa0 <_malloc_r+0x358>
  405cbc:	4574      	cmp	r4, lr
  405cbe:	f000 81ab 	beq.w	406018 <_malloc_r+0x3d0>
  405cc2:	6863      	ldr	r3, [r4, #4]
  405cc4:	f023 0303 	bic.w	r3, r3, #3
  405cc8:	1b9a      	subs	r2, r3, r6
  405cca:	2a0f      	cmp	r2, #15
  405ccc:	f300 8190 	bgt.w	405ff0 <_malloc_r+0x3a8>
  405cd0:	2a00      	cmp	r2, #0
  405cd2:	f8c7 e014 	str.w	lr, [r7, #20]
  405cd6:	f8c7 e010 	str.w	lr, [r7, #16]
  405cda:	f280 809d 	bge.w	405e18 <_malloc_r+0x1d0>
  405cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ce2:	f080 8161 	bcs.w	405fa8 <_malloc_r+0x360>
  405ce6:	08db      	lsrs	r3, r3, #3
  405ce8:	f103 0c01 	add.w	ip, r3, #1
  405cec:	1099      	asrs	r1, r3, #2
  405cee:	687a      	ldr	r2, [r7, #4]
  405cf0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405cf4:	f8c4 8008 	str.w	r8, [r4, #8]
  405cf8:	2301      	movs	r3, #1
  405cfa:	408b      	lsls	r3, r1
  405cfc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405d00:	4313      	orrs	r3, r2
  405d02:	3908      	subs	r1, #8
  405d04:	60e1      	str	r1, [r4, #12]
  405d06:	607b      	str	r3, [r7, #4]
  405d08:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405d0c:	f8c8 400c 	str.w	r4, [r8, #12]
  405d10:	1082      	asrs	r2, r0, #2
  405d12:	2401      	movs	r4, #1
  405d14:	4094      	lsls	r4, r2
  405d16:	429c      	cmp	r4, r3
  405d18:	f200 808b 	bhi.w	405e32 <_malloc_r+0x1ea>
  405d1c:	421c      	tst	r4, r3
  405d1e:	d106      	bne.n	405d2e <_malloc_r+0xe6>
  405d20:	f020 0003 	bic.w	r0, r0, #3
  405d24:	0064      	lsls	r4, r4, #1
  405d26:	421c      	tst	r4, r3
  405d28:	f100 0004 	add.w	r0, r0, #4
  405d2c:	d0fa      	beq.n	405d24 <_malloc_r+0xdc>
  405d2e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405d32:	46cc      	mov	ip, r9
  405d34:	4680      	mov	r8, r0
  405d36:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405d3a:	459c      	cmp	ip, r3
  405d3c:	d107      	bne.n	405d4e <_malloc_r+0x106>
  405d3e:	e16d      	b.n	40601c <_malloc_r+0x3d4>
  405d40:	2a00      	cmp	r2, #0
  405d42:	f280 817b 	bge.w	40603c <_malloc_r+0x3f4>
  405d46:	68db      	ldr	r3, [r3, #12]
  405d48:	459c      	cmp	ip, r3
  405d4a:	f000 8167 	beq.w	40601c <_malloc_r+0x3d4>
  405d4e:	6859      	ldr	r1, [r3, #4]
  405d50:	f021 0103 	bic.w	r1, r1, #3
  405d54:	1b8a      	subs	r2, r1, r6
  405d56:	2a0f      	cmp	r2, #15
  405d58:	ddf2      	ble.n	405d40 <_malloc_r+0xf8>
  405d5a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405d5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405d62:	9300      	str	r3, [sp, #0]
  405d64:	199c      	adds	r4, r3, r6
  405d66:	4628      	mov	r0, r5
  405d68:	f046 0601 	orr.w	r6, r6, #1
  405d6c:	f042 0501 	orr.w	r5, r2, #1
  405d70:	605e      	str	r6, [r3, #4]
  405d72:	f8c8 c00c 	str.w	ip, [r8, #12]
  405d76:	f8cc 8008 	str.w	r8, [ip, #8]
  405d7a:	617c      	str	r4, [r7, #20]
  405d7c:	613c      	str	r4, [r7, #16]
  405d7e:	f8c4 e00c 	str.w	lr, [r4, #12]
  405d82:	f8c4 e008 	str.w	lr, [r4, #8]
  405d86:	6065      	str	r5, [r4, #4]
  405d88:	505a      	str	r2, [r3, r1]
  405d8a:	f000 fba9 	bl	4064e0 <__malloc_unlock>
  405d8e:	9b00      	ldr	r3, [sp, #0]
  405d90:	f103 0408 	add.w	r4, r3, #8
  405d94:	e01e      	b.n	405dd4 <_malloc_r+0x18c>
  405d96:	2910      	cmp	r1, #16
  405d98:	d820      	bhi.n	405ddc <_malloc_r+0x194>
  405d9a:	f000 fb9f 	bl	4064dc <__malloc_lock>
  405d9e:	2610      	movs	r6, #16
  405da0:	2318      	movs	r3, #24
  405da2:	2002      	movs	r0, #2
  405da4:	4f79      	ldr	r7, [pc, #484]	; (405f8c <_malloc_r+0x344>)
  405da6:	443b      	add	r3, r7
  405da8:	f1a3 0208 	sub.w	r2, r3, #8
  405dac:	685c      	ldr	r4, [r3, #4]
  405dae:	4294      	cmp	r4, r2
  405db0:	f000 813d 	beq.w	40602e <_malloc_r+0x3e6>
  405db4:	6863      	ldr	r3, [r4, #4]
  405db6:	68e1      	ldr	r1, [r4, #12]
  405db8:	68a6      	ldr	r6, [r4, #8]
  405dba:	f023 0303 	bic.w	r3, r3, #3
  405dbe:	4423      	add	r3, r4
  405dc0:	4628      	mov	r0, r5
  405dc2:	685a      	ldr	r2, [r3, #4]
  405dc4:	60f1      	str	r1, [r6, #12]
  405dc6:	f042 0201 	orr.w	r2, r2, #1
  405dca:	608e      	str	r6, [r1, #8]
  405dcc:	605a      	str	r2, [r3, #4]
  405dce:	f000 fb87 	bl	4064e0 <__malloc_unlock>
  405dd2:	3408      	adds	r4, #8
  405dd4:	4620      	mov	r0, r4
  405dd6:	b003      	add	sp, #12
  405dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ddc:	2400      	movs	r4, #0
  405dde:	230c      	movs	r3, #12
  405de0:	4620      	mov	r0, r4
  405de2:	602b      	str	r3, [r5, #0]
  405de4:	b003      	add	sp, #12
  405de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dea:	2040      	movs	r0, #64	; 0x40
  405dec:	f44f 7300 	mov.w	r3, #512	; 0x200
  405df0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405df4:	e74a      	b.n	405c8c <_malloc_r+0x44>
  405df6:	4423      	add	r3, r4
  405df8:	68e1      	ldr	r1, [r4, #12]
  405dfa:	685a      	ldr	r2, [r3, #4]
  405dfc:	68a6      	ldr	r6, [r4, #8]
  405dfe:	f042 0201 	orr.w	r2, r2, #1
  405e02:	60f1      	str	r1, [r6, #12]
  405e04:	4628      	mov	r0, r5
  405e06:	608e      	str	r6, [r1, #8]
  405e08:	605a      	str	r2, [r3, #4]
  405e0a:	f000 fb69 	bl	4064e0 <__malloc_unlock>
  405e0e:	3408      	adds	r4, #8
  405e10:	4620      	mov	r0, r4
  405e12:	b003      	add	sp, #12
  405e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e18:	4423      	add	r3, r4
  405e1a:	4628      	mov	r0, r5
  405e1c:	685a      	ldr	r2, [r3, #4]
  405e1e:	f042 0201 	orr.w	r2, r2, #1
  405e22:	605a      	str	r2, [r3, #4]
  405e24:	f000 fb5c 	bl	4064e0 <__malloc_unlock>
  405e28:	3408      	adds	r4, #8
  405e2a:	4620      	mov	r0, r4
  405e2c:	b003      	add	sp, #12
  405e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e32:	68bc      	ldr	r4, [r7, #8]
  405e34:	6863      	ldr	r3, [r4, #4]
  405e36:	f023 0803 	bic.w	r8, r3, #3
  405e3a:	45b0      	cmp	r8, r6
  405e3c:	d304      	bcc.n	405e48 <_malloc_r+0x200>
  405e3e:	eba8 0306 	sub.w	r3, r8, r6
  405e42:	2b0f      	cmp	r3, #15
  405e44:	f300 8085 	bgt.w	405f52 <_malloc_r+0x30a>
  405e48:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405fa4 <_malloc_r+0x35c>
  405e4c:	4b50      	ldr	r3, [pc, #320]	; (405f90 <_malloc_r+0x348>)
  405e4e:	f8d9 2000 	ldr.w	r2, [r9]
  405e52:	681b      	ldr	r3, [r3, #0]
  405e54:	3201      	adds	r2, #1
  405e56:	4433      	add	r3, r6
  405e58:	eb04 0a08 	add.w	sl, r4, r8
  405e5c:	f000 8155 	beq.w	40610a <_malloc_r+0x4c2>
  405e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405e64:	330f      	adds	r3, #15
  405e66:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405e6a:	f02b 0b0f 	bic.w	fp, fp, #15
  405e6e:	4659      	mov	r1, fp
  405e70:	4628      	mov	r0, r5
  405e72:	f000 ffd7 	bl	406e24 <_sbrk_r>
  405e76:	1c41      	adds	r1, r0, #1
  405e78:	4602      	mov	r2, r0
  405e7a:	f000 80fc 	beq.w	406076 <_malloc_r+0x42e>
  405e7e:	4582      	cmp	sl, r0
  405e80:	f200 80f7 	bhi.w	406072 <_malloc_r+0x42a>
  405e84:	4b43      	ldr	r3, [pc, #268]	; (405f94 <_malloc_r+0x34c>)
  405e86:	6819      	ldr	r1, [r3, #0]
  405e88:	4459      	add	r1, fp
  405e8a:	6019      	str	r1, [r3, #0]
  405e8c:	f000 814d 	beq.w	40612a <_malloc_r+0x4e2>
  405e90:	f8d9 0000 	ldr.w	r0, [r9]
  405e94:	3001      	adds	r0, #1
  405e96:	bf1b      	ittet	ne
  405e98:	eba2 0a0a 	subne.w	sl, r2, sl
  405e9c:	4451      	addne	r1, sl
  405e9e:	f8c9 2000 	streq.w	r2, [r9]
  405ea2:	6019      	strne	r1, [r3, #0]
  405ea4:	f012 0107 	ands.w	r1, r2, #7
  405ea8:	f000 8115 	beq.w	4060d6 <_malloc_r+0x48e>
  405eac:	f1c1 0008 	rsb	r0, r1, #8
  405eb0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405eb4:	4402      	add	r2, r0
  405eb6:	3108      	adds	r1, #8
  405eb8:	eb02 090b 	add.w	r9, r2, fp
  405ebc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405ec0:	eba1 0909 	sub.w	r9, r1, r9
  405ec4:	4649      	mov	r1, r9
  405ec6:	4628      	mov	r0, r5
  405ec8:	9301      	str	r3, [sp, #4]
  405eca:	9200      	str	r2, [sp, #0]
  405ecc:	f000 ffaa 	bl	406e24 <_sbrk_r>
  405ed0:	1c43      	adds	r3, r0, #1
  405ed2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405ed6:	f000 8143 	beq.w	406160 <_malloc_r+0x518>
  405eda:	1a80      	subs	r0, r0, r2
  405edc:	4448      	add	r0, r9
  405ede:	f040 0001 	orr.w	r0, r0, #1
  405ee2:	6819      	ldr	r1, [r3, #0]
  405ee4:	60ba      	str	r2, [r7, #8]
  405ee6:	4449      	add	r1, r9
  405ee8:	42bc      	cmp	r4, r7
  405eea:	6050      	str	r0, [r2, #4]
  405eec:	6019      	str	r1, [r3, #0]
  405eee:	d017      	beq.n	405f20 <_malloc_r+0x2d8>
  405ef0:	f1b8 0f0f 	cmp.w	r8, #15
  405ef4:	f240 80fb 	bls.w	4060ee <_malloc_r+0x4a6>
  405ef8:	6860      	ldr	r0, [r4, #4]
  405efa:	f1a8 020c 	sub.w	r2, r8, #12
  405efe:	f022 0207 	bic.w	r2, r2, #7
  405f02:	eb04 0e02 	add.w	lr, r4, r2
  405f06:	f000 0001 	and.w	r0, r0, #1
  405f0a:	f04f 0c05 	mov.w	ip, #5
  405f0e:	4310      	orrs	r0, r2
  405f10:	2a0f      	cmp	r2, #15
  405f12:	6060      	str	r0, [r4, #4]
  405f14:	f8ce c004 	str.w	ip, [lr, #4]
  405f18:	f8ce c008 	str.w	ip, [lr, #8]
  405f1c:	f200 8117 	bhi.w	40614e <_malloc_r+0x506>
  405f20:	4b1d      	ldr	r3, [pc, #116]	; (405f98 <_malloc_r+0x350>)
  405f22:	68bc      	ldr	r4, [r7, #8]
  405f24:	681a      	ldr	r2, [r3, #0]
  405f26:	4291      	cmp	r1, r2
  405f28:	bf88      	it	hi
  405f2a:	6019      	strhi	r1, [r3, #0]
  405f2c:	4b1b      	ldr	r3, [pc, #108]	; (405f9c <_malloc_r+0x354>)
  405f2e:	681a      	ldr	r2, [r3, #0]
  405f30:	4291      	cmp	r1, r2
  405f32:	6862      	ldr	r2, [r4, #4]
  405f34:	bf88      	it	hi
  405f36:	6019      	strhi	r1, [r3, #0]
  405f38:	f022 0203 	bic.w	r2, r2, #3
  405f3c:	4296      	cmp	r6, r2
  405f3e:	eba2 0306 	sub.w	r3, r2, r6
  405f42:	d801      	bhi.n	405f48 <_malloc_r+0x300>
  405f44:	2b0f      	cmp	r3, #15
  405f46:	dc04      	bgt.n	405f52 <_malloc_r+0x30a>
  405f48:	4628      	mov	r0, r5
  405f4a:	f000 fac9 	bl	4064e0 <__malloc_unlock>
  405f4e:	2400      	movs	r4, #0
  405f50:	e740      	b.n	405dd4 <_malloc_r+0x18c>
  405f52:	19a2      	adds	r2, r4, r6
  405f54:	f043 0301 	orr.w	r3, r3, #1
  405f58:	f046 0601 	orr.w	r6, r6, #1
  405f5c:	6066      	str	r6, [r4, #4]
  405f5e:	4628      	mov	r0, r5
  405f60:	60ba      	str	r2, [r7, #8]
  405f62:	6053      	str	r3, [r2, #4]
  405f64:	f000 fabc 	bl	4064e0 <__malloc_unlock>
  405f68:	3408      	adds	r4, #8
  405f6a:	4620      	mov	r0, r4
  405f6c:	b003      	add	sp, #12
  405f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f72:	2b14      	cmp	r3, #20
  405f74:	d971      	bls.n	40605a <_malloc_r+0x412>
  405f76:	2b54      	cmp	r3, #84	; 0x54
  405f78:	f200 80a3 	bhi.w	4060c2 <_malloc_r+0x47a>
  405f7c:	0b33      	lsrs	r3, r6, #12
  405f7e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405f82:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405f86:	00c3      	lsls	r3, r0, #3
  405f88:	e680      	b.n	405c8c <_malloc_r+0x44>
  405f8a:	bf00      	nop
  405f8c:	200005ac 	.word	0x200005ac
  405f90:	2000899c 	.word	0x2000899c
  405f94:	2000896c 	.word	0x2000896c
  405f98:	20008994 	.word	0x20008994
  405f9c:	20008998 	.word	0x20008998
  405fa0:	200005b4 	.word	0x200005b4
  405fa4:	200009b4 	.word	0x200009b4
  405fa8:	0a5a      	lsrs	r2, r3, #9
  405faa:	2a04      	cmp	r2, #4
  405fac:	d95b      	bls.n	406066 <_malloc_r+0x41e>
  405fae:	2a14      	cmp	r2, #20
  405fb0:	f200 80ae 	bhi.w	406110 <_malloc_r+0x4c8>
  405fb4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405fb8:	00c9      	lsls	r1, r1, #3
  405fba:	325b      	adds	r2, #91	; 0x5b
  405fbc:	eb07 0c01 	add.w	ip, r7, r1
  405fc0:	5879      	ldr	r1, [r7, r1]
  405fc2:	f1ac 0c08 	sub.w	ip, ip, #8
  405fc6:	458c      	cmp	ip, r1
  405fc8:	f000 8088 	beq.w	4060dc <_malloc_r+0x494>
  405fcc:	684a      	ldr	r2, [r1, #4]
  405fce:	f022 0203 	bic.w	r2, r2, #3
  405fd2:	4293      	cmp	r3, r2
  405fd4:	d273      	bcs.n	4060be <_malloc_r+0x476>
  405fd6:	6889      	ldr	r1, [r1, #8]
  405fd8:	458c      	cmp	ip, r1
  405fda:	d1f7      	bne.n	405fcc <_malloc_r+0x384>
  405fdc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405fe0:	687b      	ldr	r3, [r7, #4]
  405fe2:	60e2      	str	r2, [r4, #12]
  405fe4:	f8c4 c008 	str.w	ip, [r4, #8]
  405fe8:	6094      	str	r4, [r2, #8]
  405fea:	f8cc 400c 	str.w	r4, [ip, #12]
  405fee:	e68f      	b.n	405d10 <_malloc_r+0xc8>
  405ff0:	19a1      	adds	r1, r4, r6
  405ff2:	f046 0c01 	orr.w	ip, r6, #1
  405ff6:	f042 0601 	orr.w	r6, r2, #1
  405ffa:	f8c4 c004 	str.w	ip, [r4, #4]
  405ffe:	4628      	mov	r0, r5
  406000:	6179      	str	r1, [r7, #20]
  406002:	6139      	str	r1, [r7, #16]
  406004:	f8c1 e00c 	str.w	lr, [r1, #12]
  406008:	f8c1 e008 	str.w	lr, [r1, #8]
  40600c:	604e      	str	r6, [r1, #4]
  40600e:	50e2      	str	r2, [r4, r3]
  406010:	f000 fa66 	bl	4064e0 <__malloc_unlock>
  406014:	3408      	adds	r4, #8
  406016:	e6dd      	b.n	405dd4 <_malloc_r+0x18c>
  406018:	687b      	ldr	r3, [r7, #4]
  40601a:	e679      	b.n	405d10 <_malloc_r+0xc8>
  40601c:	f108 0801 	add.w	r8, r8, #1
  406020:	f018 0f03 	tst.w	r8, #3
  406024:	f10c 0c08 	add.w	ip, ip, #8
  406028:	f47f ae85 	bne.w	405d36 <_malloc_r+0xee>
  40602c:	e02d      	b.n	40608a <_malloc_r+0x442>
  40602e:	68dc      	ldr	r4, [r3, #12]
  406030:	42a3      	cmp	r3, r4
  406032:	bf08      	it	eq
  406034:	3002      	addeq	r0, #2
  406036:	f43f ae3e 	beq.w	405cb6 <_malloc_r+0x6e>
  40603a:	e6bb      	b.n	405db4 <_malloc_r+0x16c>
  40603c:	4419      	add	r1, r3
  40603e:	461c      	mov	r4, r3
  406040:	684a      	ldr	r2, [r1, #4]
  406042:	68db      	ldr	r3, [r3, #12]
  406044:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406048:	f042 0201 	orr.w	r2, r2, #1
  40604c:	604a      	str	r2, [r1, #4]
  40604e:	4628      	mov	r0, r5
  406050:	60f3      	str	r3, [r6, #12]
  406052:	609e      	str	r6, [r3, #8]
  406054:	f000 fa44 	bl	4064e0 <__malloc_unlock>
  406058:	e6bc      	b.n	405dd4 <_malloc_r+0x18c>
  40605a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40605e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406062:	00c3      	lsls	r3, r0, #3
  406064:	e612      	b.n	405c8c <_malloc_r+0x44>
  406066:	099a      	lsrs	r2, r3, #6
  406068:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40606c:	00c9      	lsls	r1, r1, #3
  40606e:	3238      	adds	r2, #56	; 0x38
  406070:	e7a4      	b.n	405fbc <_malloc_r+0x374>
  406072:	42bc      	cmp	r4, r7
  406074:	d054      	beq.n	406120 <_malloc_r+0x4d8>
  406076:	68bc      	ldr	r4, [r7, #8]
  406078:	6862      	ldr	r2, [r4, #4]
  40607a:	f022 0203 	bic.w	r2, r2, #3
  40607e:	e75d      	b.n	405f3c <_malloc_r+0x2f4>
  406080:	f859 3908 	ldr.w	r3, [r9], #-8
  406084:	4599      	cmp	r9, r3
  406086:	f040 8086 	bne.w	406196 <_malloc_r+0x54e>
  40608a:	f010 0f03 	tst.w	r0, #3
  40608e:	f100 30ff 	add.w	r0, r0, #4294967295
  406092:	d1f5      	bne.n	406080 <_malloc_r+0x438>
  406094:	687b      	ldr	r3, [r7, #4]
  406096:	ea23 0304 	bic.w	r3, r3, r4
  40609a:	607b      	str	r3, [r7, #4]
  40609c:	0064      	lsls	r4, r4, #1
  40609e:	429c      	cmp	r4, r3
  4060a0:	f63f aec7 	bhi.w	405e32 <_malloc_r+0x1ea>
  4060a4:	2c00      	cmp	r4, #0
  4060a6:	f43f aec4 	beq.w	405e32 <_malloc_r+0x1ea>
  4060aa:	421c      	tst	r4, r3
  4060ac:	4640      	mov	r0, r8
  4060ae:	f47f ae3e 	bne.w	405d2e <_malloc_r+0xe6>
  4060b2:	0064      	lsls	r4, r4, #1
  4060b4:	421c      	tst	r4, r3
  4060b6:	f100 0004 	add.w	r0, r0, #4
  4060ba:	d0fa      	beq.n	4060b2 <_malloc_r+0x46a>
  4060bc:	e637      	b.n	405d2e <_malloc_r+0xe6>
  4060be:	468c      	mov	ip, r1
  4060c0:	e78c      	b.n	405fdc <_malloc_r+0x394>
  4060c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4060c6:	d815      	bhi.n	4060f4 <_malloc_r+0x4ac>
  4060c8:	0bf3      	lsrs	r3, r6, #15
  4060ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4060ce:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4060d2:	00c3      	lsls	r3, r0, #3
  4060d4:	e5da      	b.n	405c8c <_malloc_r+0x44>
  4060d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4060da:	e6ed      	b.n	405eb8 <_malloc_r+0x270>
  4060dc:	687b      	ldr	r3, [r7, #4]
  4060de:	1092      	asrs	r2, r2, #2
  4060e0:	2101      	movs	r1, #1
  4060e2:	fa01 f202 	lsl.w	r2, r1, r2
  4060e6:	4313      	orrs	r3, r2
  4060e8:	607b      	str	r3, [r7, #4]
  4060ea:	4662      	mov	r2, ip
  4060ec:	e779      	b.n	405fe2 <_malloc_r+0x39a>
  4060ee:	2301      	movs	r3, #1
  4060f0:	6053      	str	r3, [r2, #4]
  4060f2:	e729      	b.n	405f48 <_malloc_r+0x300>
  4060f4:	f240 5254 	movw	r2, #1364	; 0x554
  4060f8:	4293      	cmp	r3, r2
  4060fa:	d822      	bhi.n	406142 <_malloc_r+0x4fa>
  4060fc:	0cb3      	lsrs	r3, r6, #18
  4060fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406102:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406106:	00c3      	lsls	r3, r0, #3
  406108:	e5c0      	b.n	405c8c <_malloc_r+0x44>
  40610a:	f103 0b10 	add.w	fp, r3, #16
  40610e:	e6ae      	b.n	405e6e <_malloc_r+0x226>
  406110:	2a54      	cmp	r2, #84	; 0x54
  406112:	d829      	bhi.n	406168 <_malloc_r+0x520>
  406114:	0b1a      	lsrs	r2, r3, #12
  406116:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40611a:	00c9      	lsls	r1, r1, #3
  40611c:	326e      	adds	r2, #110	; 0x6e
  40611e:	e74d      	b.n	405fbc <_malloc_r+0x374>
  406120:	4b20      	ldr	r3, [pc, #128]	; (4061a4 <_malloc_r+0x55c>)
  406122:	6819      	ldr	r1, [r3, #0]
  406124:	4459      	add	r1, fp
  406126:	6019      	str	r1, [r3, #0]
  406128:	e6b2      	b.n	405e90 <_malloc_r+0x248>
  40612a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40612e:	2800      	cmp	r0, #0
  406130:	f47f aeae 	bne.w	405e90 <_malloc_r+0x248>
  406134:	eb08 030b 	add.w	r3, r8, fp
  406138:	68ba      	ldr	r2, [r7, #8]
  40613a:	f043 0301 	orr.w	r3, r3, #1
  40613e:	6053      	str	r3, [r2, #4]
  406140:	e6ee      	b.n	405f20 <_malloc_r+0x2d8>
  406142:	207f      	movs	r0, #127	; 0x7f
  406144:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406148:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40614c:	e59e      	b.n	405c8c <_malloc_r+0x44>
  40614e:	f104 0108 	add.w	r1, r4, #8
  406152:	4628      	mov	r0, r5
  406154:	9300      	str	r3, [sp, #0]
  406156:	f7ff fc83 	bl	405a60 <_free_r>
  40615a:	9b00      	ldr	r3, [sp, #0]
  40615c:	6819      	ldr	r1, [r3, #0]
  40615e:	e6df      	b.n	405f20 <_malloc_r+0x2d8>
  406160:	2001      	movs	r0, #1
  406162:	f04f 0900 	mov.w	r9, #0
  406166:	e6bc      	b.n	405ee2 <_malloc_r+0x29a>
  406168:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40616c:	d805      	bhi.n	40617a <_malloc_r+0x532>
  40616e:	0bda      	lsrs	r2, r3, #15
  406170:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406174:	00c9      	lsls	r1, r1, #3
  406176:	3277      	adds	r2, #119	; 0x77
  406178:	e720      	b.n	405fbc <_malloc_r+0x374>
  40617a:	f240 5154 	movw	r1, #1364	; 0x554
  40617e:	428a      	cmp	r2, r1
  406180:	d805      	bhi.n	40618e <_malloc_r+0x546>
  406182:	0c9a      	lsrs	r2, r3, #18
  406184:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406188:	00c9      	lsls	r1, r1, #3
  40618a:	327c      	adds	r2, #124	; 0x7c
  40618c:	e716      	b.n	405fbc <_malloc_r+0x374>
  40618e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406192:	227e      	movs	r2, #126	; 0x7e
  406194:	e712      	b.n	405fbc <_malloc_r+0x374>
  406196:	687b      	ldr	r3, [r7, #4]
  406198:	e780      	b.n	40609c <_malloc_r+0x454>
  40619a:	08f0      	lsrs	r0, r6, #3
  40619c:	f106 0308 	add.w	r3, r6, #8
  4061a0:	e600      	b.n	405da4 <_malloc_r+0x15c>
  4061a2:	bf00      	nop
  4061a4:	2000896c 	.word	0x2000896c

004061a8 <__ascii_mbtowc>:
  4061a8:	b082      	sub	sp, #8
  4061aa:	b149      	cbz	r1, 4061c0 <__ascii_mbtowc+0x18>
  4061ac:	b15a      	cbz	r2, 4061c6 <__ascii_mbtowc+0x1e>
  4061ae:	b16b      	cbz	r3, 4061cc <__ascii_mbtowc+0x24>
  4061b0:	7813      	ldrb	r3, [r2, #0]
  4061b2:	600b      	str	r3, [r1, #0]
  4061b4:	7812      	ldrb	r2, [r2, #0]
  4061b6:	1c10      	adds	r0, r2, #0
  4061b8:	bf18      	it	ne
  4061ba:	2001      	movne	r0, #1
  4061bc:	b002      	add	sp, #8
  4061be:	4770      	bx	lr
  4061c0:	a901      	add	r1, sp, #4
  4061c2:	2a00      	cmp	r2, #0
  4061c4:	d1f3      	bne.n	4061ae <__ascii_mbtowc+0x6>
  4061c6:	4610      	mov	r0, r2
  4061c8:	b002      	add	sp, #8
  4061ca:	4770      	bx	lr
  4061cc:	f06f 0001 	mvn.w	r0, #1
  4061d0:	e7f4      	b.n	4061bc <__ascii_mbtowc+0x14>
  4061d2:	bf00      	nop
	...

004061e0 <memchr>:
  4061e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4061e4:	2a10      	cmp	r2, #16
  4061e6:	db2b      	blt.n	406240 <memchr+0x60>
  4061e8:	f010 0f07 	tst.w	r0, #7
  4061ec:	d008      	beq.n	406200 <memchr+0x20>
  4061ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4061f2:	3a01      	subs	r2, #1
  4061f4:	428b      	cmp	r3, r1
  4061f6:	d02d      	beq.n	406254 <memchr+0x74>
  4061f8:	f010 0f07 	tst.w	r0, #7
  4061fc:	b342      	cbz	r2, 406250 <memchr+0x70>
  4061fe:	d1f6      	bne.n	4061ee <memchr+0xe>
  406200:	b4f0      	push	{r4, r5, r6, r7}
  406202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40620a:	f022 0407 	bic.w	r4, r2, #7
  40620e:	f07f 0700 	mvns.w	r7, #0
  406212:	2300      	movs	r3, #0
  406214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406218:	3c08      	subs	r4, #8
  40621a:	ea85 0501 	eor.w	r5, r5, r1
  40621e:	ea86 0601 	eor.w	r6, r6, r1
  406222:	fa85 f547 	uadd8	r5, r5, r7
  406226:	faa3 f587 	sel	r5, r3, r7
  40622a:	fa86 f647 	uadd8	r6, r6, r7
  40622e:	faa5 f687 	sel	r6, r5, r7
  406232:	b98e      	cbnz	r6, 406258 <memchr+0x78>
  406234:	d1ee      	bne.n	406214 <memchr+0x34>
  406236:	bcf0      	pop	{r4, r5, r6, r7}
  406238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40623c:	f002 0207 	and.w	r2, r2, #7
  406240:	b132      	cbz	r2, 406250 <memchr+0x70>
  406242:	f810 3b01 	ldrb.w	r3, [r0], #1
  406246:	3a01      	subs	r2, #1
  406248:	ea83 0301 	eor.w	r3, r3, r1
  40624c:	b113      	cbz	r3, 406254 <memchr+0x74>
  40624e:	d1f8      	bne.n	406242 <memchr+0x62>
  406250:	2000      	movs	r0, #0
  406252:	4770      	bx	lr
  406254:	3801      	subs	r0, #1
  406256:	4770      	bx	lr
  406258:	2d00      	cmp	r5, #0
  40625a:	bf06      	itte	eq
  40625c:	4635      	moveq	r5, r6
  40625e:	3803      	subeq	r0, #3
  406260:	3807      	subne	r0, #7
  406262:	f015 0f01 	tst.w	r5, #1
  406266:	d107      	bne.n	406278 <memchr+0x98>
  406268:	3001      	adds	r0, #1
  40626a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40626e:	bf02      	ittt	eq
  406270:	3001      	addeq	r0, #1
  406272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406276:	3001      	addeq	r0, #1
  406278:	bcf0      	pop	{r4, r5, r6, r7}
  40627a:	3801      	subs	r0, #1
  40627c:	4770      	bx	lr
  40627e:	bf00      	nop

00406280 <memcmp>:
  406280:	2a03      	cmp	r2, #3
  406282:	b470      	push	{r4, r5, r6}
  406284:	d922      	bls.n	4062cc <memcmp+0x4c>
  406286:	ea40 0301 	orr.w	r3, r0, r1
  40628a:	079b      	lsls	r3, r3, #30
  40628c:	d011      	beq.n	4062b2 <memcmp+0x32>
  40628e:	7803      	ldrb	r3, [r0, #0]
  406290:	780c      	ldrb	r4, [r1, #0]
  406292:	42a3      	cmp	r3, r4
  406294:	d11d      	bne.n	4062d2 <memcmp+0x52>
  406296:	440a      	add	r2, r1
  406298:	3101      	adds	r1, #1
  40629a:	e005      	b.n	4062a8 <memcmp+0x28>
  40629c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4062a0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4062a4:	42a3      	cmp	r3, r4
  4062a6:	d114      	bne.n	4062d2 <memcmp+0x52>
  4062a8:	4291      	cmp	r1, r2
  4062aa:	d1f7      	bne.n	40629c <memcmp+0x1c>
  4062ac:	2000      	movs	r0, #0
  4062ae:	bc70      	pop	{r4, r5, r6}
  4062b0:	4770      	bx	lr
  4062b2:	680d      	ldr	r5, [r1, #0]
  4062b4:	6806      	ldr	r6, [r0, #0]
  4062b6:	42ae      	cmp	r6, r5
  4062b8:	460c      	mov	r4, r1
  4062ba:	4603      	mov	r3, r0
  4062bc:	f101 0104 	add.w	r1, r1, #4
  4062c0:	f100 0004 	add.w	r0, r0, #4
  4062c4:	d108      	bne.n	4062d8 <memcmp+0x58>
  4062c6:	3a04      	subs	r2, #4
  4062c8:	2a03      	cmp	r2, #3
  4062ca:	d8f2      	bhi.n	4062b2 <memcmp+0x32>
  4062cc:	2a00      	cmp	r2, #0
  4062ce:	d1de      	bne.n	40628e <memcmp+0xe>
  4062d0:	e7ec      	b.n	4062ac <memcmp+0x2c>
  4062d2:	1b18      	subs	r0, r3, r4
  4062d4:	bc70      	pop	{r4, r5, r6}
  4062d6:	4770      	bx	lr
  4062d8:	4621      	mov	r1, r4
  4062da:	4618      	mov	r0, r3
  4062dc:	e7d7      	b.n	40628e <memcmp+0xe>
  4062de:	bf00      	nop

004062e0 <memcpy>:
  4062e0:	4684      	mov	ip, r0
  4062e2:	ea41 0300 	orr.w	r3, r1, r0
  4062e6:	f013 0303 	ands.w	r3, r3, #3
  4062ea:	d16d      	bne.n	4063c8 <memcpy+0xe8>
  4062ec:	3a40      	subs	r2, #64	; 0x40
  4062ee:	d341      	bcc.n	406374 <memcpy+0x94>
  4062f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062f4:	f840 3b04 	str.w	r3, [r0], #4
  4062f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062fc:	f840 3b04 	str.w	r3, [r0], #4
  406300:	f851 3b04 	ldr.w	r3, [r1], #4
  406304:	f840 3b04 	str.w	r3, [r0], #4
  406308:	f851 3b04 	ldr.w	r3, [r1], #4
  40630c:	f840 3b04 	str.w	r3, [r0], #4
  406310:	f851 3b04 	ldr.w	r3, [r1], #4
  406314:	f840 3b04 	str.w	r3, [r0], #4
  406318:	f851 3b04 	ldr.w	r3, [r1], #4
  40631c:	f840 3b04 	str.w	r3, [r0], #4
  406320:	f851 3b04 	ldr.w	r3, [r1], #4
  406324:	f840 3b04 	str.w	r3, [r0], #4
  406328:	f851 3b04 	ldr.w	r3, [r1], #4
  40632c:	f840 3b04 	str.w	r3, [r0], #4
  406330:	f851 3b04 	ldr.w	r3, [r1], #4
  406334:	f840 3b04 	str.w	r3, [r0], #4
  406338:	f851 3b04 	ldr.w	r3, [r1], #4
  40633c:	f840 3b04 	str.w	r3, [r0], #4
  406340:	f851 3b04 	ldr.w	r3, [r1], #4
  406344:	f840 3b04 	str.w	r3, [r0], #4
  406348:	f851 3b04 	ldr.w	r3, [r1], #4
  40634c:	f840 3b04 	str.w	r3, [r0], #4
  406350:	f851 3b04 	ldr.w	r3, [r1], #4
  406354:	f840 3b04 	str.w	r3, [r0], #4
  406358:	f851 3b04 	ldr.w	r3, [r1], #4
  40635c:	f840 3b04 	str.w	r3, [r0], #4
  406360:	f851 3b04 	ldr.w	r3, [r1], #4
  406364:	f840 3b04 	str.w	r3, [r0], #4
  406368:	f851 3b04 	ldr.w	r3, [r1], #4
  40636c:	f840 3b04 	str.w	r3, [r0], #4
  406370:	3a40      	subs	r2, #64	; 0x40
  406372:	d2bd      	bcs.n	4062f0 <memcpy+0x10>
  406374:	3230      	adds	r2, #48	; 0x30
  406376:	d311      	bcc.n	40639c <memcpy+0xbc>
  406378:	f851 3b04 	ldr.w	r3, [r1], #4
  40637c:	f840 3b04 	str.w	r3, [r0], #4
  406380:	f851 3b04 	ldr.w	r3, [r1], #4
  406384:	f840 3b04 	str.w	r3, [r0], #4
  406388:	f851 3b04 	ldr.w	r3, [r1], #4
  40638c:	f840 3b04 	str.w	r3, [r0], #4
  406390:	f851 3b04 	ldr.w	r3, [r1], #4
  406394:	f840 3b04 	str.w	r3, [r0], #4
  406398:	3a10      	subs	r2, #16
  40639a:	d2ed      	bcs.n	406378 <memcpy+0x98>
  40639c:	320c      	adds	r2, #12
  40639e:	d305      	bcc.n	4063ac <memcpy+0xcc>
  4063a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063a4:	f840 3b04 	str.w	r3, [r0], #4
  4063a8:	3a04      	subs	r2, #4
  4063aa:	d2f9      	bcs.n	4063a0 <memcpy+0xc0>
  4063ac:	3204      	adds	r2, #4
  4063ae:	d008      	beq.n	4063c2 <memcpy+0xe2>
  4063b0:	07d2      	lsls	r2, r2, #31
  4063b2:	bf1c      	itt	ne
  4063b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4063bc:	d301      	bcc.n	4063c2 <memcpy+0xe2>
  4063be:	880b      	ldrh	r3, [r1, #0]
  4063c0:	8003      	strh	r3, [r0, #0]
  4063c2:	4660      	mov	r0, ip
  4063c4:	4770      	bx	lr
  4063c6:	bf00      	nop
  4063c8:	2a08      	cmp	r2, #8
  4063ca:	d313      	bcc.n	4063f4 <memcpy+0x114>
  4063cc:	078b      	lsls	r3, r1, #30
  4063ce:	d08d      	beq.n	4062ec <memcpy+0xc>
  4063d0:	f010 0303 	ands.w	r3, r0, #3
  4063d4:	d08a      	beq.n	4062ec <memcpy+0xc>
  4063d6:	f1c3 0304 	rsb	r3, r3, #4
  4063da:	1ad2      	subs	r2, r2, r3
  4063dc:	07db      	lsls	r3, r3, #31
  4063de:	bf1c      	itt	ne
  4063e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063e4:	f800 3b01 	strbne.w	r3, [r0], #1
  4063e8:	d380      	bcc.n	4062ec <memcpy+0xc>
  4063ea:	f831 3b02 	ldrh.w	r3, [r1], #2
  4063ee:	f820 3b02 	strh.w	r3, [r0], #2
  4063f2:	e77b      	b.n	4062ec <memcpy+0xc>
  4063f4:	3a04      	subs	r2, #4
  4063f6:	d3d9      	bcc.n	4063ac <memcpy+0xcc>
  4063f8:	3a01      	subs	r2, #1
  4063fa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4063fe:	f800 3b01 	strb.w	r3, [r0], #1
  406402:	d2f9      	bcs.n	4063f8 <memcpy+0x118>
  406404:	780b      	ldrb	r3, [r1, #0]
  406406:	7003      	strb	r3, [r0, #0]
  406408:	784b      	ldrb	r3, [r1, #1]
  40640a:	7043      	strb	r3, [r0, #1]
  40640c:	788b      	ldrb	r3, [r1, #2]
  40640e:	7083      	strb	r3, [r0, #2]
  406410:	4660      	mov	r0, ip
  406412:	4770      	bx	lr

00406414 <memmove>:
  406414:	4288      	cmp	r0, r1
  406416:	b5f0      	push	{r4, r5, r6, r7, lr}
  406418:	d90d      	bls.n	406436 <memmove+0x22>
  40641a:	188b      	adds	r3, r1, r2
  40641c:	4298      	cmp	r0, r3
  40641e:	d20a      	bcs.n	406436 <memmove+0x22>
  406420:	1884      	adds	r4, r0, r2
  406422:	2a00      	cmp	r2, #0
  406424:	d051      	beq.n	4064ca <memmove+0xb6>
  406426:	4622      	mov	r2, r4
  406428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40642c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406430:	4299      	cmp	r1, r3
  406432:	d1f9      	bne.n	406428 <memmove+0x14>
  406434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406436:	2a0f      	cmp	r2, #15
  406438:	d948      	bls.n	4064cc <memmove+0xb8>
  40643a:	ea41 0300 	orr.w	r3, r1, r0
  40643e:	079b      	lsls	r3, r3, #30
  406440:	d146      	bne.n	4064d0 <memmove+0xbc>
  406442:	f100 0410 	add.w	r4, r0, #16
  406446:	f101 0310 	add.w	r3, r1, #16
  40644a:	4615      	mov	r5, r2
  40644c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406450:	f844 6c10 	str.w	r6, [r4, #-16]
  406454:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406458:	f844 6c0c 	str.w	r6, [r4, #-12]
  40645c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406460:	f844 6c08 	str.w	r6, [r4, #-8]
  406464:	3d10      	subs	r5, #16
  406466:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40646a:	f844 6c04 	str.w	r6, [r4, #-4]
  40646e:	2d0f      	cmp	r5, #15
  406470:	f103 0310 	add.w	r3, r3, #16
  406474:	f104 0410 	add.w	r4, r4, #16
  406478:	d8e8      	bhi.n	40644c <memmove+0x38>
  40647a:	f1a2 0310 	sub.w	r3, r2, #16
  40647e:	f023 030f 	bic.w	r3, r3, #15
  406482:	f002 0e0f 	and.w	lr, r2, #15
  406486:	3310      	adds	r3, #16
  406488:	f1be 0f03 	cmp.w	lr, #3
  40648c:	4419      	add	r1, r3
  40648e:	4403      	add	r3, r0
  406490:	d921      	bls.n	4064d6 <memmove+0xc2>
  406492:	1f1e      	subs	r6, r3, #4
  406494:	460d      	mov	r5, r1
  406496:	4674      	mov	r4, lr
  406498:	3c04      	subs	r4, #4
  40649a:	f855 7b04 	ldr.w	r7, [r5], #4
  40649e:	f846 7f04 	str.w	r7, [r6, #4]!
  4064a2:	2c03      	cmp	r4, #3
  4064a4:	d8f8      	bhi.n	406498 <memmove+0x84>
  4064a6:	f1ae 0404 	sub.w	r4, lr, #4
  4064aa:	f024 0403 	bic.w	r4, r4, #3
  4064ae:	3404      	adds	r4, #4
  4064b0:	4421      	add	r1, r4
  4064b2:	4423      	add	r3, r4
  4064b4:	f002 0203 	and.w	r2, r2, #3
  4064b8:	b162      	cbz	r2, 4064d4 <memmove+0xc0>
  4064ba:	3b01      	subs	r3, #1
  4064bc:	440a      	add	r2, r1
  4064be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4064c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4064c6:	428a      	cmp	r2, r1
  4064c8:	d1f9      	bne.n	4064be <memmove+0xaa>
  4064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4064cc:	4603      	mov	r3, r0
  4064ce:	e7f3      	b.n	4064b8 <memmove+0xa4>
  4064d0:	4603      	mov	r3, r0
  4064d2:	e7f2      	b.n	4064ba <memmove+0xa6>
  4064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4064d6:	4672      	mov	r2, lr
  4064d8:	e7ee      	b.n	4064b8 <memmove+0xa4>
  4064da:	bf00      	nop

004064dc <__malloc_lock>:
  4064dc:	4770      	bx	lr
  4064de:	bf00      	nop

004064e0 <__malloc_unlock>:
  4064e0:	4770      	bx	lr
  4064e2:	bf00      	nop

004064e4 <_Balloc>:
  4064e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4064e6:	b570      	push	{r4, r5, r6, lr}
  4064e8:	4605      	mov	r5, r0
  4064ea:	460c      	mov	r4, r1
  4064ec:	b14b      	cbz	r3, 406502 <_Balloc+0x1e>
  4064ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4064f2:	b180      	cbz	r0, 406516 <_Balloc+0x32>
  4064f4:	6802      	ldr	r2, [r0, #0]
  4064f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4064fa:	2300      	movs	r3, #0
  4064fc:	6103      	str	r3, [r0, #16]
  4064fe:	60c3      	str	r3, [r0, #12]
  406500:	bd70      	pop	{r4, r5, r6, pc}
  406502:	2221      	movs	r2, #33	; 0x21
  406504:	2104      	movs	r1, #4
  406506:	f000 fdf1 	bl	4070ec <_calloc_r>
  40650a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40650c:	4603      	mov	r3, r0
  40650e:	2800      	cmp	r0, #0
  406510:	d1ed      	bne.n	4064ee <_Balloc+0xa>
  406512:	2000      	movs	r0, #0
  406514:	bd70      	pop	{r4, r5, r6, pc}
  406516:	2101      	movs	r1, #1
  406518:	fa01 f604 	lsl.w	r6, r1, r4
  40651c:	1d72      	adds	r2, r6, #5
  40651e:	4628      	mov	r0, r5
  406520:	0092      	lsls	r2, r2, #2
  406522:	f000 fde3 	bl	4070ec <_calloc_r>
  406526:	2800      	cmp	r0, #0
  406528:	d0f3      	beq.n	406512 <_Balloc+0x2e>
  40652a:	6044      	str	r4, [r0, #4]
  40652c:	6086      	str	r6, [r0, #8]
  40652e:	e7e4      	b.n	4064fa <_Balloc+0x16>

00406530 <_Bfree>:
  406530:	b131      	cbz	r1, 406540 <_Bfree+0x10>
  406532:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406534:	684a      	ldr	r2, [r1, #4]
  406536:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40653a:	6008      	str	r0, [r1, #0]
  40653c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406540:	4770      	bx	lr
  406542:	bf00      	nop

00406544 <__multadd>:
  406544:	b5f0      	push	{r4, r5, r6, r7, lr}
  406546:	690c      	ldr	r4, [r1, #16]
  406548:	b083      	sub	sp, #12
  40654a:	460d      	mov	r5, r1
  40654c:	4606      	mov	r6, r0
  40654e:	f101 0e14 	add.w	lr, r1, #20
  406552:	2700      	movs	r7, #0
  406554:	f8de 0000 	ldr.w	r0, [lr]
  406558:	b281      	uxth	r1, r0
  40655a:	fb02 3301 	mla	r3, r2, r1, r3
  40655e:	0c01      	lsrs	r1, r0, #16
  406560:	0c18      	lsrs	r0, r3, #16
  406562:	fb02 0101 	mla	r1, r2, r1, r0
  406566:	b29b      	uxth	r3, r3
  406568:	3701      	adds	r7, #1
  40656a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40656e:	42bc      	cmp	r4, r7
  406570:	f84e 3b04 	str.w	r3, [lr], #4
  406574:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406578:	dcec      	bgt.n	406554 <__multadd+0x10>
  40657a:	b13b      	cbz	r3, 40658c <__multadd+0x48>
  40657c:	68aa      	ldr	r2, [r5, #8]
  40657e:	4294      	cmp	r4, r2
  406580:	da07      	bge.n	406592 <__multadd+0x4e>
  406582:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406586:	3401      	adds	r4, #1
  406588:	6153      	str	r3, [r2, #20]
  40658a:	612c      	str	r4, [r5, #16]
  40658c:	4628      	mov	r0, r5
  40658e:	b003      	add	sp, #12
  406590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406592:	6869      	ldr	r1, [r5, #4]
  406594:	9301      	str	r3, [sp, #4]
  406596:	3101      	adds	r1, #1
  406598:	4630      	mov	r0, r6
  40659a:	f7ff ffa3 	bl	4064e4 <_Balloc>
  40659e:	692a      	ldr	r2, [r5, #16]
  4065a0:	3202      	adds	r2, #2
  4065a2:	f105 010c 	add.w	r1, r5, #12
  4065a6:	4607      	mov	r7, r0
  4065a8:	0092      	lsls	r2, r2, #2
  4065aa:	300c      	adds	r0, #12
  4065ac:	f7ff fe98 	bl	4062e0 <memcpy>
  4065b0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4065b2:	6869      	ldr	r1, [r5, #4]
  4065b4:	9b01      	ldr	r3, [sp, #4]
  4065b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4065ba:	6028      	str	r0, [r5, #0]
  4065bc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4065c0:	463d      	mov	r5, r7
  4065c2:	e7de      	b.n	406582 <__multadd+0x3e>

004065c4 <__hi0bits>:
  4065c4:	0c02      	lsrs	r2, r0, #16
  4065c6:	0412      	lsls	r2, r2, #16
  4065c8:	4603      	mov	r3, r0
  4065ca:	b9b2      	cbnz	r2, 4065fa <__hi0bits+0x36>
  4065cc:	0403      	lsls	r3, r0, #16
  4065ce:	2010      	movs	r0, #16
  4065d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4065d4:	bf04      	itt	eq
  4065d6:	021b      	lsleq	r3, r3, #8
  4065d8:	3008      	addeq	r0, #8
  4065da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4065de:	bf04      	itt	eq
  4065e0:	011b      	lsleq	r3, r3, #4
  4065e2:	3004      	addeq	r0, #4
  4065e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4065e8:	bf04      	itt	eq
  4065ea:	009b      	lsleq	r3, r3, #2
  4065ec:	3002      	addeq	r0, #2
  4065ee:	2b00      	cmp	r3, #0
  4065f0:	db02      	blt.n	4065f8 <__hi0bits+0x34>
  4065f2:	005b      	lsls	r3, r3, #1
  4065f4:	d403      	bmi.n	4065fe <__hi0bits+0x3a>
  4065f6:	2020      	movs	r0, #32
  4065f8:	4770      	bx	lr
  4065fa:	2000      	movs	r0, #0
  4065fc:	e7e8      	b.n	4065d0 <__hi0bits+0xc>
  4065fe:	3001      	adds	r0, #1
  406600:	4770      	bx	lr
  406602:	bf00      	nop

00406604 <__lo0bits>:
  406604:	6803      	ldr	r3, [r0, #0]
  406606:	f013 0207 	ands.w	r2, r3, #7
  40660a:	4601      	mov	r1, r0
  40660c:	d007      	beq.n	40661e <__lo0bits+0x1a>
  40660e:	07da      	lsls	r2, r3, #31
  406610:	d421      	bmi.n	406656 <__lo0bits+0x52>
  406612:	0798      	lsls	r0, r3, #30
  406614:	d421      	bmi.n	40665a <__lo0bits+0x56>
  406616:	089b      	lsrs	r3, r3, #2
  406618:	600b      	str	r3, [r1, #0]
  40661a:	2002      	movs	r0, #2
  40661c:	4770      	bx	lr
  40661e:	b298      	uxth	r0, r3
  406620:	b198      	cbz	r0, 40664a <__lo0bits+0x46>
  406622:	4610      	mov	r0, r2
  406624:	f013 0fff 	tst.w	r3, #255	; 0xff
  406628:	bf04      	itt	eq
  40662a:	0a1b      	lsreq	r3, r3, #8
  40662c:	3008      	addeq	r0, #8
  40662e:	071a      	lsls	r2, r3, #28
  406630:	bf04      	itt	eq
  406632:	091b      	lsreq	r3, r3, #4
  406634:	3004      	addeq	r0, #4
  406636:	079a      	lsls	r2, r3, #30
  406638:	bf04      	itt	eq
  40663a:	089b      	lsreq	r3, r3, #2
  40663c:	3002      	addeq	r0, #2
  40663e:	07da      	lsls	r2, r3, #31
  406640:	d407      	bmi.n	406652 <__lo0bits+0x4e>
  406642:	085b      	lsrs	r3, r3, #1
  406644:	d104      	bne.n	406650 <__lo0bits+0x4c>
  406646:	2020      	movs	r0, #32
  406648:	4770      	bx	lr
  40664a:	0c1b      	lsrs	r3, r3, #16
  40664c:	2010      	movs	r0, #16
  40664e:	e7e9      	b.n	406624 <__lo0bits+0x20>
  406650:	3001      	adds	r0, #1
  406652:	600b      	str	r3, [r1, #0]
  406654:	4770      	bx	lr
  406656:	2000      	movs	r0, #0
  406658:	4770      	bx	lr
  40665a:	085b      	lsrs	r3, r3, #1
  40665c:	600b      	str	r3, [r1, #0]
  40665e:	2001      	movs	r0, #1
  406660:	4770      	bx	lr
  406662:	bf00      	nop

00406664 <__i2b>:
  406664:	b510      	push	{r4, lr}
  406666:	460c      	mov	r4, r1
  406668:	2101      	movs	r1, #1
  40666a:	f7ff ff3b 	bl	4064e4 <_Balloc>
  40666e:	2201      	movs	r2, #1
  406670:	6144      	str	r4, [r0, #20]
  406672:	6102      	str	r2, [r0, #16]
  406674:	bd10      	pop	{r4, pc}
  406676:	bf00      	nop

00406678 <__multiply>:
  406678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40667c:	690c      	ldr	r4, [r1, #16]
  40667e:	6915      	ldr	r5, [r2, #16]
  406680:	42ac      	cmp	r4, r5
  406682:	b083      	sub	sp, #12
  406684:	468b      	mov	fp, r1
  406686:	4616      	mov	r6, r2
  406688:	da04      	bge.n	406694 <__multiply+0x1c>
  40668a:	4622      	mov	r2, r4
  40668c:	46b3      	mov	fp, r6
  40668e:	462c      	mov	r4, r5
  406690:	460e      	mov	r6, r1
  406692:	4615      	mov	r5, r2
  406694:	f8db 3008 	ldr.w	r3, [fp, #8]
  406698:	f8db 1004 	ldr.w	r1, [fp, #4]
  40669c:	eb04 0805 	add.w	r8, r4, r5
  4066a0:	4598      	cmp	r8, r3
  4066a2:	bfc8      	it	gt
  4066a4:	3101      	addgt	r1, #1
  4066a6:	f7ff ff1d 	bl	4064e4 <_Balloc>
  4066aa:	f100 0914 	add.w	r9, r0, #20
  4066ae:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4066b2:	45d1      	cmp	r9, sl
  4066b4:	9000      	str	r0, [sp, #0]
  4066b6:	d205      	bcs.n	4066c4 <__multiply+0x4c>
  4066b8:	464b      	mov	r3, r9
  4066ba:	2100      	movs	r1, #0
  4066bc:	f843 1b04 	str.w	r1, [r3], #4
  4066c0:	459a      	cmp	sl, r3
  4066c2:	d8fb      	bhi.n	4066bc <__multiply+0x44>
  4066c4:	f106 0c14 	add.w	ip, r6, #20
  4066c8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4066cc:	f10b 0b14 	add.w	fp, fp, #20
  4066d0:	459c      	cmp	ip, r3
  4066d2:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4066d6:	d24c      	bcs.n	406772 <__multiply+0xfa>
  4066d8:	f8cd a004 	str.w	sl, [sp, #4]
  4066dc:	469a      	mov	sl, r3
  4066de:	f8dc 5000 	ldr.w	r5, [ip]
  4066e2:	b2af      	uxth	r7, r5
  4066e4:	b1ef      	cbz	r7, 406722 <__multiply+0xaa>
  4066e6:	2100      	movs	r1, #0
  4066e8:	464d      	mov	r5, r9
  4066ea:	465e      	mov	r6, fp
  4066ec:	460c      	mov	r4, r1
  4066ee:	f856 2b04 	ldr.w	r2, [r6], #4
  4066f2:	6828      	ldr	r0, [r5, #0]
  4066f4:	b293      	uxth	r3, r2
  4066f6:	b281      	uxth	r1, r0
  4066f8:	fb07 1303 	mla	r3, r7, r3, r1
  4066fc:	0c12      	lsrs	r2, r2, #16
  4066fe:	0c01      	lsrs	r1, r0, #16
  406700:	4423      	add	r3, r4
  406702:	fb07 1102 	mla	r1, r7, r2, r1
  406706:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40670a:	b29b      	uxth	r3, r3
  40670c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406710:	45b6      	cmp	lr, r6
  406712:	f845 3b04 	str.w	r3, [r5], #4
  406716:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40671a:	d8e8      	bhi.n	4066ee <__multiply+0x76>
  40671c:	602c      	str	r4, [r5, #0]
  40671e:	f8dc 5000 	ldr.w	r5, [ip]
  406722:	0c2d      	lsrs	r5, r5, #16
  406724:	d01d      	beq.n	406762 <__multiply+0xea>
  406726:	f8d9 3000 	ldr.w	r3, [r9]
  40672a:	4648      	mov	r0, r9
  40672c:	461c      	mov	r4, r3
  40672e:	4659      	mov	r1, fp
  406730:	2200      	movs	r2, #0
  406732:	880e      	ldrh	r6, [r1, #0]
  406734:	0c24      	lsrs	r4, r4, #16
  406736:	fb05 4406 	mla	r4, r5, r6, r4
  40673a:	4422      	add	r2, r4
  40673c:	b29b      	uxth	r3, r3
  40673e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406742:	f840 3b04 	str.w	r3, [r0], #4
  406746:	f851 3b04 	ldr.w	r3, [r1], #4
  40674a:	6804      	ldr	r4, [r0, #0]
  40674c:	0c1b      	lsrs	r3, r3, #16
  40674e:	b2a6      	uxth	r6, r4
  406750:	fb05 6303 	mla	r3, r5, r3, r6
  406754:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406758:	458e      	cmp	lr, r1
  40675a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40675e:	d8e8      	bhi.n	406732 <__multiply+0xba>
  406760:	6003      	str	r3, [r0, #0]
  406762:	f10c 0c04 	add.w	ip, ip, #4
  406766:	45e2      	cmp	sl, ip
  406768:	f109 0904 	add.w	r9, r9, #4
  40676c:	d8b7      	bhi.n	4066de <__multiply+0x66>
  40676e:	f8dd a004 	ldr.w	sl, [sp, #4]
  406772:	f1b8 0f00 	cmp.w	r8, #0
  406776:	dd0b      	ble.n	406790 <__multiply+0x118>
  406778:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40677c:	f1aa 0a04 	sub.w	sl, sl, #4
  406780:	b11b      	cbz	r3, 40678a <__multiply+0x112>
  406782:	e005      	b.n	406790 <__multiply+0x118>
  406784:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406788:	b913      	cbnz	r3, 406790 <__multiply+0x118>
  40678a:	f1b8 0801 	subs.w	r8, r8, #1
  40678e:	d1f9      	bne.n	406784 <__multiply+0x10c>
  406790:	9800      	ldr	r0, [sp, #0]
  406792:	f8c0 8010 	str.w	r8, [r0, #16]
  406796:	b003      	add	sp, #12
  406798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040679c <__pow5mult>:
  40679c:	f012 0303 	ands.w	r3, r2, #3
  4067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067a4:	4614      	mov	r4, r2
  4067a6:	4607      	mov	r7, r0
  4067a8:	d12e      	bne.n	406808 <__pow5mult+0x6c>
  4067aa:	460d      	mov	r5, r1
  4067ac:	10a4      	asrs	r4, r4, #2
  4067ae:	d01c      	beq.n	4067ea <__pow5mult+0x4e>
  4067b0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4067b2:	b396      	cbz	r6, 40681a <__pow5mult+0x7e>
  4067b4:	07e3      	lsls	r3, r4, #31
  4067b6:	f04f 0800 	mov.w	r8, #0
  4067ba:	d406      	bmi.n	4067ca <__pow5mult+0x2e>
  4067bc:	1064      	asrs	r4, r4, #1
  4067be:	d014      	beq.n	4067ea <__pow5mult+0x4e>
  4067c0:	6830      	ldr	r0, [r6, #0]
  4067c2:	b1a8      	cbz	r0, 4067f0 <__pow5mult+0x54>
  4067c4:	4606      	mov	r6, r0
  4067c6:	07e3      	lsls	r3, r4, #31
  4067c8:	d5f8      	bpl.n	4067bc <__pow5mult+0x20>
  4067ca:	4632      	mov	r2, r6
  4067cc:	4629      	mov	r1, r5
  4067ce:	4638      	mov	r0, r7
  4067d0:	f7ff ff52 	bl	406678 <__multiply>
  4067d4:	b1b5      	cbz	r5, 406804 <__pow5mult+0x68>
  4067d6:	686a      	ldr	r2, [r5, #4]
  4067d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4067da:	1064      	asrs	r4, r4, #1
  4067dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4067e0:	6029      	str	r1, [r5, #0]
  4067e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4067e6:	4605      	mov	r5, r0
  4067e8:	d1ea      	bne.n	4067c0 <__pow5mult+0x24>
  4067ea:	4628      	mov	r0, r5
  4067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067f0:	4632      	mov	r2, r6
  4067f2:	4631      	mov	r1, r6
  4067f4:	4638      	mov	r0, r7
  4067f6:	f7ff ff3f 	bl	406678 <__multiply>
  4067fa:	6030      	str	r0, [r6, #0]
  4067fc:	f8c0 8000 	str.w	r8, [r0]
  406800:	4606      	mov	r6, r0
  406802:	e7e0      	b.n	4067c6 <__pow5mult+0x2a>
  406804:	4605      	mov	r5, r0
  406806:	e7d9      	b.n	4067bc <__pow5mult+0x20>
  406808:	1e5a      	subs	r2, r3, #1
  40680a:	4d0b      	ldr	r5, [pc, #44]	; (406838 <__pow5mult+0x9c>)
  40680c:	2300      	movs	r3, #0
  40680e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406812:	f7ff fe97 	bl	406544 <__multadd>
  406816:	4605      	mov	r5, r0
  406818:	e7c8      	b.n	4067ac <__pow5mult+0x10>
  40681a:	2101      	movs	r1, #1
  40681c:	4638      	mov	r0, r7
  40681e:	f7ff fe61 	bl	4064e4 <_Balloc>
  406822:	f240 2171 	movw	r1, #625	; 0x271
  406826:	2201      	movs	r2, #1
  406828:	2300      	movs	r3, #0
  40682a:	6141      	str	r1, [r0, #20]
  40682c:	6102      	str	r2, [r0, #16]
  40682e:	4606      	mov	r6, r0
  406830:	64b8      	str	r0, [r7, #72]	; 0x48
  406832:	6003      	str	r3, [r0, #0]
  406834:	e7be      	b.n	4067b4 <__pow5mult+0x18>
  406836:	bf00      	nop
  406838:	00407db8 	.word	0x00407db8

0040683c <__lshift>:
  40683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406840:	4691      	mov	r9, r2
  406842:	690a      	ldr	r2, [r1, #16]
  406844:	688b      	ldr	r3, [r1, #8]
  406846:	ea4f 1469 	mov.w	r4, r9, asr #5
  40684a:	eb04 0802 	add.w	r8, r4, r2
  40684e:	f108 0501 	add.w	r5, r8, #1
  406852:	429d      	cmp	r5, r3
  406854:	460e      	mov	r6, r1
  406856:	4607      	mov	r7, r0
  406858:	6849      	ldr	r1, [r1, #4]
  40685a:	dd04      	ble.n	406866 <__lshift+0x2a>
  40685c:	005b      	lsls	r3, r3, #1
  40685e:	429d      	cmp	r5, r3
  406860:	f101 0101 	add.w	r1, r1, #1
  406864:	dcfa      	bgt.n	40685c <__lshift+0x20>
  406866:	4638      	mov	r0, r7
  406868:	f7ff fe3c 	bl	4064e4 <_Balloc>
  40686c:	2c00      	cmp	r4, #0
  40686e:	f100 0314 	add.w	r3, r0, #20
  406872:	dd06      	ble.n	406882 <__lshift+0x46>
  406874:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406878:	2100      	movs	r1, #0
  40687a:	f843 1b04 	str.w	r1, [r3], #4
  40687e:	429a      	cmp	r2, r3
  406880:	d1fb      	bne.n	40687a <__lshift+0x3e>
  406882:	6934      	ldr	r4, [r6, #16]
  406884:	f106 0114 	add.w	r1, r6, #20
  406888:	f019 091f 	ands.w	r9, r9, #31
  40688c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406890:	d01d      	beq.n	4068ce <__lshift+0x92>
  406892:	f1c9 0c20 	rsb	ip, r9, #32
  406896:	2200      	movs	r2, #0
  406898:	680c      	ldr	r4, [r1, #0]
  40689a:	fa04 f409 	lsl.w	r4, r4, r9
  40689e:	4314      	orrs	r4, r2
  4068a0:	f843 4b04 	str.w	r4, [r3], #4
  4068a4:	f851 2b04 	ldr.w	r2, [r1], #4
  4068a8:	458e      	cmp	lr, r1
  4068aa:	fa22 f20c 	lsr.w	r2, r2, ip
  4068ae:	d8f3      	bhi.n	406898 <__lshift+0x5c>
  4068b0:	601a      	str	r2, [r3, #0]
  4068b2:	b10a      	cbz	r2, 4068b8 <__lshift+0x7c>
  4068b4:	f108 0502 	add.w	r5, r8, #2
  4068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4068ba:	6872      	ldr	r2, [r6, #4]
  4068bc:	3d01      	subs	r5, #1
  4068be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4068c2:	6105      	str	r5, [r0, #16]
  4068c4:	6031      	str	r1, [r6, #0]
  4068c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4068ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068ce:	3b04      	subs	r3, #4
  4068d0:	f851 2b04 	ldr.w	r2, [r1], #4
  4068d4:	f843 2f04 	str.w	r2, [r3, #4]!
  4068d8:	458e      	cmp	lr, r1
  4068da:	d8f9      	bhi.n	4068d0 <__lshift+0x94>
  4068dc:	e7ec      	b.n	4068b8 <__lshift+0x7c>
  4068de:	bf00      	nop

004068e0 <__mcmp>:
  4068e0:	b430      	push	{r4, r5}
  4068e2:	690b      	ldr	r3, [r1, #16]
  4068e4:	4605      	mov	r5, r0
  4068e6:	6900      	ldr	r0, [r0, #16]
  4068e8:	1ac0      	subs	r0, r0, r3
  4068ea:	d10f      	bne.n	40690c <__mcmp+0x2c>
  4068ec:	009b      	lsls	r3, r3, #2
  4068ee:	3514      	adds	r5, #20
  4068f0:	3114      	adds	r1, #20
  4068f2:	4419      	add	r1, r3
  4068f4:	442b      	add	r3, r5
  4068f6:	e001      	b.n	4068fc <__mcmp+0x1c>
  4068f8:	429d      	cmp	r5, r3
  4068fa:	d207      	bcs.n	40690c <__mcmp+0x2c>
  4068fc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406904:	4294      	cmp	r4, r2
  406906:	d0f7      	beq.n	4068f8 <__mcmp+0x18>
  406908:	d302      	bcc.n	406910 <__mcmp+0x30>
  40690a:	2001      	movs	r0, #1
  40690c:	bc30      	pop	{r4, r5}
  40690e:	4770      	bx	lr
  406910:	f04f 30ff 	mov.w	r0, #4294967295
  406914:	e7fa      	b.n	40690c <__mcmp+0x2c>
  406916:	bf00      	nop

00406918 <__mdiff>:
  406918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40691c:	690f      	ldr	r7, [r1, #16]
  40691e:	460e      	mov	r6, r1
  406920:	6911      	ldr	r1, [r2, #16]
  406922:	1a7f      	subs	r7, r7, r1
  406924:	2f00      	cmp	r7, #0
  406926:	4690      	mov	r8, r2
  406928:	d117      	bne.n	40695a <__mdiff+0x42>
  40692a:	0089      	lsls	r1, r1, #2
  40692c:	f106 0514 	add.w	r5, r6, #20
  406930:	f102 0e14 	add.w	lr, r2, #20
  406934:	186b      	adds	r3, r5, r1
  406936:	4471      	add	r1, lr
  406938:	e001      	b.n	40693e <__mdiff+0x26>
  40693a:	429d      	cmp	r5, r3
  40693c:	d25c      	bcs.n	4069f8 <__mdiff+0xe0>
  40693e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406942:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406946:	42a2      	cmp	r2, r4
  406948:	d0f7      	beq.n	40693a <__mdiff+0x22>
  40694a:	d25e      	bcs.n	406a0a <__mdiff+0xf2>
  40694c:	4633      	mov	r3, r6
  40694e:	462c      	mov	r4, r5
  406950:	4646      	mov	r6, r8
  406952:	4675      	mov	r5, lr
  406954:	4698      	mov	r8, r3
  406956:	2701      	movs	r7, #1
  406958:	e005      	b.n	406966 <__mdiff+0x4e>
  40695a:	db58      	blt.n	406a0e <__mdiff+0xf6>
  40695c:	f106 0514 	add.w	r5, r6, #20
  406960:	f108 0414 	add.w	r4, r8, #20
  406964:	2700      	movs	r7, #0
  406966:	6871      	ldr	r1, [r6, #4]
  406968:	f7ff fdbc 	bl	4064e4 <_Balloc>
  40696c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406970:	6936      	ldr	r6, [r6, #16]
  406972:	60c7      	str	r7, [r0, #12]
  406974:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406978:	46a6      	mov	lr, r4
  40697a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40697e:	f100 0414 	add.w	r4, r0, #20
  406982:	2300      	movs	r3, #0
  406984:	f85e 1b04 	ldr.w	r1, [lr], #4
  406988:	f855 8b04 	ldr.w	r8, [r5], #4
  40698c:	b28a      	uxth	r2, r1
  40698e:	fa13 f388 	uxtah	r3, r3, r8
  406992:	0c09      	lsrs	r1, r1, #16
  406994:	1a9a      	subs	r2, r3, r2
  406996:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40699a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40699e:	b292      	uxth	r2, r2
  4069a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4069a4:	45f4      	cmp	ip, lr
  4069a6:	f844 2b04 	str.w	r2, [r4], #4
  4069aa:	ea4f 4323 	mov.w	r3, r3, asr #16
  4069ae:	d8e9      	bhi.n	406984 <__mdiff+0x6c>
  4069b0:	42af      	cmp	r7, r5
  4069b2:	d917      	bls.n	4069e4 <__mdiff+0xcc>
  4069b4:	46a4      	mov	ip, r4
  4069b6:	46ae      	mov	lr, r5
  4069b8:	f85e 2b04 	ldr.w	r2, [lr], #4
  4069bc:	fa13 f382 	uxtah	r3, r3, r2
  4069c0:	1419      	asrs	r1, r3, #16
  4069c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4069c6:	b29b      	uxth	r3, r3
  4069c8:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4069cc:	4577      	cmp	r7, lr
  4069ce:	f84c 2b04 	str.w	r2, [ip], #4
  4069d2:	ea4f 4321 	mov.w	r3, r1, asr #16
  4069d6:	d8ef      	bhi.n	4069b8 <__mdiff+0xa0>
  4069d8:	43ed      	mvns	r5, r5
  4069da:	442f      	add	r7, r5
  4069dc:	f027 0703 	bic.w	r7, r7, #3
  4069e0:	3704      	adds	r7, #4
  4069e2:	443c      	add	r4, r7
  4069e4:	3c04      	subs	r4, #4
  4069e6:	b922      	cbnz	r2, 4069f2 <__mdiff+0xda>
  4069e8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4069ec:	3e01      	subs	r6, #1
  4069ee:	2b00      	cmp	r3, #0
  4069f0:	d0fa      	beq.n	4069e8 <__mdiff+0xd0>
  4069f2:	6106      	str	r6, [r0, #16]
  4069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069f8:	2100      	movs	r1, #0
  4069fa:	f7ff fd73 	bl	4064e4 <_Balloc>
  4069fe:	2201      	movs	r2, #1
  406a00:	2300      	movs	r3, #0
  406a02:	6102      	str	r2, [r0, #16]
  406a04:	6143      	str	r3, [r0, #20]
  406a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a0a:	4674      	mov	r4, lr
  406a0c:	e7ab      	b.n	406966 <__mdiff+0x4e>
  406a0e:	4633      	mov	r3, r6
  406a10:	f106 0414 	add.w	r4, r6, #20
  406a14:	f102 0514 	add.w	r5, r2, #20
  406a18:	4616      	mov	r6, r2
  406a1a:	2701      	movs	r7, #1
  406a1c:	4698      	mov	r8, r3
  406a1e:	e7a2      	b.n	406966 <__mdiff+0x4e>

00406a20 <__d2b>:
  406a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a24:	b082      	sub	sp, #8
  406a26:	2101      	movs	r1, #1
  406a28:	461c      	mov	r4, r3
  406a2a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406a2e:	4615      	mov	r5, r2
  406a30:	9e08      	ldr	r6, [sp, #32]
  406a32:	f7ff fd57 	bl	4064e4 <_Balloc>
  406a36:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406a3a:	4680      	mov	r8, r0
  406a3c:	b10f      	cbz	r7, 406a42 <__d2b+0x22>
  406a3e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406a42:	9401      	str	r4, [sp, #4]
  406a44:	b31d      	cbz	r5, 406a8e <__d2b+0x6e>
  406a46:	a802      	add	r0, sp, #8
  406a48:	f840 5d08 	str.w	r5, [r0, #-8]!
  406a4c:	f7ff fdda 	bl	406604 <__lo0bits>
  406a50:	2800      	cmp	r0, #0
  406a52:	d134      	bne.n	406abe <__d2b+0x9e>
  406a54:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406a58:	f8c8 2014 	str.w	r2, [r8, #20]
  406a5c:	2b00      	cmp	r3, #0
  406a5e:	bf0c      	ite	eq
  406a60:	2101      	moveq	r1, #1
  406a62:	2102      	movne	r1, #2
  406a64:	f8c8 3018 	str.w	r3, [r8, #24]
  406a68:	f8c8 1010 	str.w	r1, [r8, #16]
  406a6c:	b9df      	cbnz	r7, 406aa6 <__d2b+0x86>
  406a6e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406a72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406a76:	6030      	str	r0, [r6, #0]
  406a78:	6918      	ldr	r0, [r3, #16]
  406a7a:	f7ff fda3 	bl	4065c4 <__hi0bits>
  406a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406a84:	6018      	str	r0, [r3, #0]
  406a86:	4640      	mov	r0, r8
  406a88:	b002      	add	sp, #8
  406a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a8e:	a801      	add	r0, sp, #4
  406a90:	f7ff fdb8 	bl	406604 <__lo0bits>
  406a94:	9b01      	ldr	r3, [sp, #4]
  406a96:	f8c8 3014 	str.w	r3, [r8, #20]
  406a9a:	2101      	movs	r1, #1
  406a9c:	3020      	adds	r0, #32
  406a9e:	f8c8 1010 	str.w	r1, [r8, #16]
  406aa2:	2f00      	cmp	r7, #0
  406aa4:	d0e3      	beq.n	406a6e <__d2b+0x4e>
  406aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406aa8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406aac:	4407      	add	r7, r0
  406aae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406ab2:	6037      	str	r7, [r6, #0]
  406ab4:	6018      	str	r0, [r3, #0]
  406ab6:	4640      	mov	r0, r8
  406ab8:	b002      	add	sp, #8
  406aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406abe:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406ac2:	f1c0 0220 	rsb	r2, r0, #32
  406ac6:	fa03 f202 	lsl.w	r2, r3, r2
  406aca:	430a      	orrs	r2, r1
  406acc:	40c3      	lsrs	r3, r0
  406ace:	9301      	str	r3, [sp, #4]
  406ad0:	f8c8 2014 	str.w	r2, [r8, #20]
  406ad4:	e7c2      	b.n	406a5c <__d2b+0x3c>
  406ad6:	bf00      	nop

00406ad8 <_realloc_r>:
  406ad8:	2900      	cmp	r1, #0
  406ada:	f000 8095 	beq.w	406c08 <_realloc_r+0x130>
  406ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ae2:	460d      	mov	r5, r1
  406ae4:	4616      	mov	r6, r2
  406ae6:	b083      	sub	sp, #12
  406ae8:	4680      	mov	r8, r0
  406aea:	f106 070b 	add.w	r7, r6, #11
  406aee:	f7ff fcf5 	bl	4064dc <__malloc_lock>
  406af2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406af6:	2f16      	cmp	r7, #22
  406af8:	f02e 0403 	bic.w	r4, lr, #3
  406afc:	f1a5 0908 	sub.w	r9, r5, #8
  406b00:	d83c      	bhi.n	406b7c <_realloc_r+0xa4>
  406b02:	2210      	movs	r2, #16
  406b04:	4617      	mov	r7, r2
  406b06:	42be      	cmp	r6, r7
  406b08:	d83d      	bhi.n	406b86 <_realloc_r+0xae>
  406b0a:	4294      	cmp	r4, r2
  406b0c:	da43      	bge.n	406b96 <_realloc_r+0xbe>
  406b0e:	4bc4      	ldr	r3, [pc, #784]	; (406e20 <_realloc_r+0x348>)
  406b10:	6899      	ldr	r1, [r3, #8]
  406b12:	eb09 0004 	add.w	r0, r9, r4
  406b16:	4288      	cmp	r0, r1
  406b18:	f000 80b4 	beq.w	406c84 <_realloc_r+0x1ac>
  406b1c:	6843      	ldr	r3, [r0, #4]
  406b1e:	f023 0101 	bic.w	r1, r3, #1
  406b22:	4401      	add	r1, r0
  406b24:	6849      	ldr	r1, [r1, #4]
  406b26:	07c9      	lsls	r1, r1, #31
  406b28:	d54c      	bpl.n	406bc4 <_realloc_r+0xec>
  406b2a:	f01e 0f01 	tst.w	lr, #1
  406b2e:	f000 809b 	beq.w	406c68 <_realloc_r+0x190>
  406b32:	4631      	mov	r1, r6
  406b34:	4640      	mov	r0, r8
  406b36:	f7ff f887 	bl	405c48 <_malloc_r>
  406b3a:	4606      	mov	r6, r0
  406b3c:	2800      	cmp	r0, #0
  406b3e:	d03a      	beq.n	406bb6 <_realloc_r+0xde>
  406b40:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406b44:	f023 0301 	bic.w	r3, r3, #1
  406b48:	444b      	add	r3, r9
  406b4a:	f1a0 0208 	sub.w	r2, r0, #8
  406b4e:	429a      	cmp	r2, r3
  406b50:	f000 8121 	beq.w	406d96 <_realloc_r+0x2be>
  406b54:	1f22      	subs	r2, r4, #4
  406b56:	2a24      	cmp	r2, #36	; 0x24
  406b58:	f200 8107 	bhi.w	406d6a <_realloc_r+0x292>
  406b5c:	2a13      	cmp	r2, #19
  406b5e:	f200 80db 	bhi.w	406d18 <_realloc_r+0x240>
  406b62:	4603      	mov	r3, r0
  406b64:	462a      	mov	r2, r5
  406b66:	6811      	ldr	r1, [r2, #0]
  406b68:	6019      	str	r1, [r3, #0]
  406b6a:	6851      	ldr	r1, [r2, #4]
  406b6c:	6059      	str	r1, [r3, #4]
  406b6e:	6892      	ldr	r2, [r2, #8]
  406b70:	609a      	str	r2, [r3, #8]
  406b72:	4629      	mov	r1, r5
  406b74:	4640      	mov	r0, r8
  406b76:	f7fe ff73 	bl	405a60 <_free_r>
  406b7a:	e01c      	b.n	406bb6 <_realloc_r+0xde>
  406b7c:	f027 0707 	bic.w	r7, r7, #7
  406b80:	2f00      	cmp	r7, #0
  406b82:	463a      	mov	r2, r7
  406b84:	dabf      	bge.n	406b06 <_realloc_r+0x2e>
  406b86:	2600      	movs	r6, #0
  406b88:	230c      	movs	r3, #12
  406b8a:	4630      	mov	r0, r6
  406b8c:	f8c8 3000 	str.w	r3, [r8]
  406b90:	b003      	add	sp, #12
  406b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b96:	462e      	mov	r6, r5
  406b98:	1be3      	subs	r3, r4, r7
  406b9a:	2b0f      	cmp	r3, #15
  406b9c:	d81e      	bhi.n	406bdc <_realloc_r+0x104>
  406b9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406ba2:	f003 0301 	and.w	r3, r3, #1
  406ba6:	4323      	orrs	r3, r4
  406ba8:	444c      	add	r4, r9
  406baa:	f8c9 3004 	str.w	r3, [r9, #4]
  406bae:	6863      	ldr	r3, [r4, #4]
  406bb0:	f043 0301 	orr.w	r3, r3, #1
  406bb4:	6063      	str	r3, [r4, #4]
  406bb6:	4640      	mov	r0, r8
  406bb8:	f7ff fc92 	bl	4064e0 <__malloc_unlock>
  406bbc:	4630      	mov	r0, r6
  406bbe:	b003      	add	sp, #12
  406bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bc4:	f023 0303 	bic.w	r3, r3, #3
  406bc8:	18e1      	adds	r1, r4, r3
  406bca:	4291      	cmp	r1, r2
  406bcc:	db1f      	blt.n	406c0e <_realloc_r+0x136>
  406bce:	68c3      	ldr	r3, [r0, #12]
  406bd0:	6882      	ldr	r2, [r0, #8]
  406bd2:	462e      	mov	r6, r5
  406bd4:	60d3      	str	r3, [r2, #12]
  406bd6:	460c      	mov	r4, r1
  406bd8:	609a      	str	r2, [r3, #8]
  406bda:	e7dd      	b.n	406b98 <_realloc_r+0xc0>
  406bdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406be0:	eb09 0107 	add.w	r1, r9, r7
  406be4:	f002 0201 	and.w	r2, r2, #1
  406be8:	444c      	add	r4, r9
  406bea:	f043 0301 	orr.w	r3, r3, #1
  406bee:	4317      	orrs	r7, r2
  406bf0:	f8c9 7004 	str.w	r7, [r9, #4]
  406bf4:	604b      	str	r3, [r1, #4]
  406bf6:	6863      	ldr	r3, [r4, #4]
  406bf8:	f043 0301 	orr.w	r3, r3, #1
  406bfc:	3108      	adds	r1, #8
  406bfe:	6063      	str	r3, [r4, #4]
  406c00:	4640      	mov	r0, r8
  406c02:	f7fe ff2d 	bl	405a60 <_free_r>
  406c06:	e7d6      	b.n	406bb6 <_realloc_r+0xde>
  406c08:	4611      	mov	r1, r2
  406c0a:	f7ff b81d 	b.w	405c48 <_malloc_r>
  406c0e:	f01e 0f01 	tst.w	lr, #1
  406c12:	d18e      	bne.n	406b32 <_realloc_r+0x5a>
  406c14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406c18:	eba9 0a01 	sub.w	sl, r9, r1
  406c1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406c20:	f021 0103 	bic.w	r1, r1, #3
  406c24:	440b      	add	r3, r1
  406c26:	4423      	add	r3, r4
  406c28:	4293      	cmp	r3, r2
  406c2a:	db25      	blt.n	406c78 <_realloc_r+0x1a0>
  406c2c:	68c2      	ldr	r2, [r0, #12]
  406c2e:	6881      	ldr	r1, [r0, #8]
  406c30:	4656      	mov	r6, sl
  406c32:	60ca      	str	r2, [r1, #12]
  406c34:	6091      	str	r1, [r2, #8]
  406c36:	f8da 100c 	ldr.w	r1, [sl, #12]
  406c3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406c3e:	1f22      	subs	r2, r4, #4
  406c40:	2a24      	cmp	r2, #36	; 0x24
  406c42:	60c1      	str	r1, [r0, #12]
  406c44:	6088      	str	r0, [r1, #8]
  406c46:	f200 8094 	bhi.w	406d72 <_realloc_r+0x29a>
  406c4a:	2a13      	cmp	r2, #19
  406c4c:	d96f      	bls.n	406d2e <_realloc_r+0x256>
  406c4e:	6829      	ldr	r1, [r5, #0]
  406c50:	f8ca 1008 	str.w	r1, [sl, #8]
  406c54:	6869      	ldr	r1, [r5, #4]
  406c56:	f8ca 100c 	str.w	r1, [sl, #12]
  406c5a:	2a1b      	cmp	r2, #27
  406c5c:	f200 80a2 	bhi.w	406da4 <_realloc_r+0x2cc>
  406c60:	3508      	adds	r5, #8
  406c62:	f10a 0210 	add.w	r2, sl, #16
  406c66:	e063      	b.n	406d30 <_realloc_r+0x258>
  406c68:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406c6c:	eba9 0a03 	sub.w	sl, r9, r3
  406c70:	f8da 1004 	ldr.w	r1, [sl, #4]
  406c74:	f021 0103 	bic.w	r1, r1, #3
  406c78:	1863      	adds	r3, r4, r1
  406c7a:	4293      	cmp	r3, r2
  406c7c:	f6ff af59 	blt.w	406b32 <_realloc_r+0x5a>
  406c80:	4656      	mov	r6, sl
  406c82:	e7d8      	b.n	406c36 <_realloc_r+0x15e>
  406c84:	6841      	ldr	r1, [r0, #4]
  406c86:	f021 0b03 	bic.w	fp, r1, #3
  406c8a:	44a3      	add	fp, r4
  406c8c:	f107 0010 	add.w	r0, r7, #16
  406c90:	4583      	cmp	fp, r0
  406c92:	da56      	bge.n	406d42 <_realloc_r+0x26a>
  406c94:	f01e 0f01 	tst.w	lr, #1
  406c98:	f47f af4b 	bne.w	406b32 <_realloc_r+0x5a>
  406c9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406ca0:	eba9 0a01 	sub.w	sl, r9, r1
  406ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ca8:	f021 0103 	bic.w	r1, r1, #3
  406cac:	448b      	add	fp, r1
  406cae:	4558      	cmp	r0, fp
  406cb0:	dce2      	bgt.n	406c78 <_realloc_r+0x1a0>
  406cb2:	4656      	mov	r6, sl
  406cb4:	f8da 100c 	ldr.w	r1, [sl, #12]
  406cb8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cbc:	1f22      	subs	r2, r4, #4
  406cbe:	2a24      	cmp	r2, #36	; 0x24
  406cc0:	60c1      	str	r1, [r0, #12]
  406cc2:	6088      	str	r0, [r1, #8]
  406cc4:	f200 808f 	bhi.w	406de6 <_realloc_r+0x30e>
  406cc8:	2a13      	cmp	r2, #19
  406cca:	f240 808a 	bls.w	406de2 <_realloc_r+0x30a>
  406cce:	6829      	ldr	r1, [r5, #0]
  406cd0:	f8ca 1008 	str.w	r1, [sl, #8]
  406cd4:	6869      	ldr	r1, [r5, #4]
  406cd6:	f8ca 100c 	str.w	r1, [sl, #12]
  406cda:	2a1b      	cmp	r2, #27
  406cdc:	f200 808a 	bhi.w	406df4 <_realloc_r+0x31c>
  406ce0:	3508      	adds	r5, #8
  406ce2:	f10a 0210 	add.w	r2, sl, #16
  406ce6:	6829      	ldr	r1, [r5, #0]
  406ce8:	6011      	str	r1, [r2, #0]
  406cea:	6869      	ldr	r1, [r5, #4]
  406cec:	6051      	str	r1, [r2, #4]
  406cee:	68a9      	ldr	r1, [r5, #8]
  406cf0:	6091      	str	r1, [r2, #8]
  406cf2:	eb0a 0107 	add.w	r1, sl, r7
  406cf6:	ebab 0207 	sub.w	r2, fp, r7
  406cfa:	f042 0201 	orr.w	r2, r2, #1
  406cfe:	6099      	str	r1, [r3, #8]
  406d00:	604a      	str	r2, [r1, #4]
  406d02:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d06:	f003 0301 	and.w	r3, r3, #1
  406d0a:	431f      	orrs	r7, r3
  406d0c:	4640      	mov	r0, r8
  406d0e:	f8ca 7004 	str.w	r7, [sl, #4]
  406d12:	f7ff fbe5 	bl	4064e0 <__malloc_unlock>
  406d16:	e751      	b.n	406bbc <_realloc_r+0xe4>
  406d18:	682b      	ldr	r3, [r5, #0]
  406d1a:	6003      	str	r3, [r0, #0]
  406d1c:	686b      	ldr	r3, [r5, #4]
  406d1e:	6043      	str	r3, [r0, #4]
  406d20:	2a1b      	cmp	r2, #27
  406d22:	d82d      	bhi.n	406d80 <_realloc_r+0x2a8>
  406d24:	f100 0308 	add.w	r3, r0, #8
  406d28:	f105 0208 	add.w	r2, r5, #8
  406d2c:	e71b      	b.n	406b66 <_realloc_r+0x8e>
  406d2e:	4632      	mov	r2, r6
  406d30:	6829      	ldr	r1, [r5, #0]
  406d32:	6011      	str	r1, [r2, #0]
  406d34:	6869      	ldr	r1, [r5, #4]
  406d36:	6051      	str	r1, [r2, #4]
  406d38:	68a9      	ldr	r1, [r5, #8]
  406d3a:	6091      	str	r1, [r2, #8]
  406d3c:	461c      	mov	r4, r3
  406d3e:	46d1      	mov	r9, sl
  406d40:	e72a      	b.n	406b98 <_realloc_r+0xc0>
  406d42:	eb09 0107 	add.w	r1, r9, r7
  406d46:	ebab 0b07 	sub.w	fp, fp, r7
  406d4a:	f04b 0201 	orr.w	r2, fp, #1
  406d4e:	6099      	str	r1, [r3, #8]
  406d50:	604a      	str	r2, [r1, #4]
  406d52:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d56:	f003 0301 	and.w	r3, r3, #1
  406d5a:	431f      	orrs	r7, r3
  406d5c:	4640      	mov	r0, r8
  406d5e:	f845 7c04 	str.w	r7, [r5, #-4]
  406d62:	f7ff fbbd 	bl	4064e0 <__malloc_unlock>
  406d66:	462e      	mov	r6, r5
  406d68:	e728      	b.n	406bbc <_realloc_r+0xe4>
  406d6a:	4629      	mov	r1, r5
  406d6c:	f7ff fb52 	bl	406414 <memmove>
  406d70:	e6ff      	b.n	406b72 <_realloc_r+0x9a>
  406d72:	4629      	mov	r1, r5
  406d74:	4630      	mov	r0, r6
  406d76:	461c      	mov	r4, r3
  406d78:	46d1      	mov	r9, sl
  406d7a:	f7ff fb4b 	bl	406414 <memmove>
  406d7e:	e70b      	b.n	406b98 <_realloc_r+0xc0>
  406d80:	68ab      	ldr	r3, [r5, #8]
  406d82:	6083      	str	r3, [r0, #8]
  406d84:	68eb      	ldr	r3, [r5, #12]
  406d86:	60c3      	str	r3, [r0, #12]
  406d88:	2a24      	cmp	r2, #36	; 0x24
  406d8a:	d017      	beq.n	406dbc <_realloc_r+0x2e4>
  406d8c:	f100 0310 	add.w	r3, r0, #16
  406d90:	f105 0210 	add.w	r2, r5, #16
  406d94:	e6e7      	b.n	406b66 <_realloc_r+0x8e>
  406d96:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406d9a:	f023 0303 	bic.w	r3, r3, #3
  406d9e:	441c      	add	r4, r3
  406da0:	462e      	mov	r6, r5
  406da2:	e6f9      	b.n	406b98 <_realloc_r+0xc0>
  406da4:	68a9      	ldr	r1, [r5, #8]
  406da6:	f8ca 1010 	str.w	r1, [sl, #16]
  406daa:	68e9      	ldr	r1, [r5, #12]
  406dac:	f8ca 1014 	str.w	r1, [sl, #20]
  406db0:	2a24      	cmp	r2, #36	; 0x24
  406db2:	d00c      	beq.n	406dce <_realloc_r+0x2f6>
  406db4:	3510      	adds	r5, #16
  406db6:	f10a 0218 	add.w	r2, sl, #24
  406dba:	e7b9      	b.n	406d30 <_realloc_r+0x258>
  406dbc:	692b      	ldr	r3, [r5, #16]
  406dbe:	6103      	str	r3, [r0, #16]
  406dc0:	696b      	ldr	r3, [r5, #20]
  406dc2:	6143      	str	r3, [r0, #20]
  406dc4:	f105 0218 	add.w	r2, r5, #24
  406dc8:	f100 0318 	add.w	r3, r0, #24
  406dcc:	e6cb      	b.n	406b66 <_realloc_r+0x8e>
  406dce:	692a      	ldr	r2, [r5, #16]
  406dd0:	f8ca 2018 	str.w	r2, [sl, #24]
  406dd4:	696a      	ldr	r2, [r5, #20]
  406dd6:	f8ca 201c 	str.w	r2, [sl, #28]
  406dda:	3518      	adds	r5, #24
  406ddc:	f10a 0220 	add.w	r2, sl, #32
  406de0:	e7a6      	b.n	406d30 <_realloc_r+0x258>
  406de2:	4632      	mov	r2, r6
  406de4:	e77f      	b.n	406ce6 <_realloc_r+0x20e>
  406de6:	4629      	mov	r1, r5
  406de8:	4630      	mov	r0, r6
  406dea:	9301      	str	r3, [sp, #4]
  406dec:	f7ff fb12 	bl	406414 <memmove>
  406df0:	9b01      	ldr	r3, [sp, #4]
  406df2:	e77e      	b.n	406cf2 <_realloc_r+0x21a>
  406df4:	68a9      	ldr	r1, [r5, #8]
  406df6:	f8ca 1010 	str.w	r1, [sl, #16]
  406dfa:	68e9      	ldr	r1, [r5, #12]
  406dfc:	f8ca 1014 	str.w	r1, [sl, #20]
  406e00:	2a24      	cmp	r2, #36	; 0x24
  406e02:	d003      	beq.n	406e0c <_realloc_r+0x334>
  406e04:	3510      	adds	r5, #16
  406e06:	f10a 0218 	add.w	r2, sl, #24
  406e0a:	e76c      	b.n	406ce6 <_realloc_r+0x20e>
  406e0c:	692a      	ldr	r2, [r5, #16]
  406e0e:	f8ca 2018 	str.w	r2, [sl, #24]
  406e12:	696a      	ldr	r2, [r5, #20]
  406e14:	f8ca 201c 	str.w	r2, [sl, #28]
  406e18:	3518      	adds	r5, #24
  406e1a:	f10a 0220 	add.w	r2, sl, #32
  406e1e:	e762      	b.n	406ce6 <_realloc_r+0x20e>
  406e20:	200005ac 	.word	0x200005ac

00406e24 <_sbrk_r>:
  406e24:	b538      	push	{r3, r4, r5, lr}
  406e26:	4c07      	ldr	r4, [pc, #28]	; (406e44 <_sbrk_r+0x20>)
  406e28:	2300      	movs	r3, #0
  406e2a:	4605      	mov	r5, r0
  406e2c:	4608      	mov	r0, r1
  406e2e:	6023      	str	r3, [r4, #0]
  406e30:	f7fb fe3e 	bl	402ab0 <_sbrk>
  406e34:	1c43      	adds	r3, r0, #1
  406e36:	d000      	beq.n	406e3a <_sbrk_r+0x16>
  406e38:	bd38      	pop	{r3, r4, r5, pc}
  406e3a:	6823      	ldr	r3, [r4, #0]
  406e3c:	2b00      	cmp	r3, #0
  406e3e:	d0fb      	beq.n	406e38 <_sbrk_r+0x14>
  406e40:	602b      	str	r3, [r5, #0]
  406e42:	bd38      	pop	{r3, r4, r5, pc}
  406e44:	200089a8 	.word	0x200089a8

00406e48 <strchr>:
  406e48:	b2c9      	uxtb	r1, r1
  406e4a:	2900      	cmp	r1, #0
  406e4c:	d041      	beq.n	406ed2 <strchr+0x8a>
  406e4e:	0782      	lsls	r2, r0, #30
  406e50:	b4f0      	push	{r4, r5, r6, r7}
  406e52:	d067      	beq.n	406f24 <strchr+0xdc>
  406e54:	7803      	ldrb	r3, [r0, #0]
  406e56:	2b00      	cmp	r3, #0
  406e58:	d068      	beq.n	406f2c <strchr+0xe4>
  406e5a:	4299      	cmp	r1, r3
  406e5c:	d037      	beq.n	406ece <strchr+0x86>
  406e5e:	1c43      	adds	r3, r0, #1
  406e60:	e004      	b.n	406e6c <strchr+0x24>
  406e62:	f813 0b01 	ldrb.w	r0, [r3], #1
  406e66:	b390      	cbz	r0, 406ece <strchr+0x86>
  406e68:	4281      	cmp	r1, r0
  406e6a:	d02f      	beq.n	406ecc <strchr+0x84>
  406e6c:	079a      	lsls	r2, r3, #30
  406e6e:	461c      	mov	r4, r3
  406e70:	d1f7      	bne.n	406e62 <strchr+0x1a>
  406e72:	6825      	ldr	r5, [r4, #0]
  406e74:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  406e78:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  406e7c:	ea83 0605 	eor.w	r6, r3, r5
  406e80:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  406e84:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406e88:	ea20 0006 	bic.w	r0, r0, r6
  406e8c:	ea22 0205 	bic.w	r2, r2, r5
  406e90:	4302      	orrs	r2, r0
  406e92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406e96:	d111      	bne.n	406ebc <strchr+0x74>
  406e98:	4620      	mov	r0, r4
  406e9a:	f850 6f04 	ldr.w	r6, [r0, #4]!
  406e9e:	ea83 0706 	eor.w	r7, r3, r6
  406ea2:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406ea6:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406eaa:	ea25 0507 	bic.w	r5, r5, r7
  406eae:	ea22 0206 	bic.w	r2, r2, r6
  406eb2:	432a      	orrs	r2, r5
  406eb4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406eb8:	d0ef      	beq.n	406e9a <strchr+0x52>
  406eba:	4604      	mov	r4, r0
  406ebc:	7820      	ldrb	r0, [r4, #0]
  406ebe:	b918      	cbnz	r0, 406ec8 <strchr+0x80>
  406ec0:	e005      	b.n	406ece <strchr+0x86>
  406ec2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406ec6:	b110      	cbz	r0, 406ece <strchr+0x86>
  406ec8:	4281      	cmp	r1, r0
  406eca:	d1fa      	bne.n	406ec2 <strchr+0x7a>
  406ecc:	4620      	mov	r0, r4
  406ece:	bcf0      	pop	{r4, r5, r6, r7}
  406ed0:	4770      	bx	lr
  406ed2:	0783      	lsls	r3, r0, #30
  406ed4:	d024      	beq.n	406f20 <strchr+0xd8>
  406ed6:	7803      	ldrb	r3, [r0, #0]
  406ed8:	2b00      	cmp	r3, #0
  406eda:	d0f9      	beq.n	406ed0 <strchr+0x88>
  406edc:	1c43      	adds	r3, r0, #1
  406ede:	e003      	b.n	406ee8 <strchr+0xa0>
  406ee0:	7802      	ldrb	r2, [r0, #0]
  406ee2:	3301      	adds	r3, #1
  406ee4:	2a00      	cmp	r2, #0
  406ee6:	d0f3      	beq.n	406ed0 <strchr+0x88>
  406ee8:	0799      	lsls	r1, r3, #30
  406eea:	4618      	mov	r0, r3
  406eec:	d1f8      	bne.n	406ee0 <strchr+0x98>
  406eee:	6819      	ldr	r1, [r3, #0]
  406ef0:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406ef4:	ea22 0201 	bic.w	r2, r2, r1
  406ef8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406efc:	d108      	bne.n	406f10 <strchr+0xc8>
  406efe:	f853 1f04 	ldr.w	r1, [r3, #4]!
  406f02:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406f06:	ea22 0201 	bic.w	r2, r2, r1
  406f0a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f0e:	d0f6      	beq.n	406efe <strchr+0xb6>
  406f10:	781a      	ldrb	r2, [r3, #0]
  406f12:	4618      	mov	r0, r3
  406f14:	b142      	cbz	r2, 406f28 <strchr+0xe0>
  406f16:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406f1a:	2b00      	cmp	r3, #0
  406f1c:	d1fb      	bne.n	406f16 <strchr+0xce>
  406f1e:	4770      	bx	lr
  406f20:	4603      	mov	r3, r0
  406f22:	e7e4      	b.n	406eee <strchr+0xa6>
  406f24:	4604      	mov	r4, r0
  406f26:	e7a4      	b.n	406e72 <strchr+0x2a>
  406f28:	4618      	mov	r0, r3
  406f2a:	4770      	bx	lr
  406f2c:	4618      	mov	r0, r3
  406f2e:	e7ce      	b.n	406ece <strchr+0x86>

00406f30 <__ssprint_r>:
  406f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f34:	6893      	ldr	r3, [r2, #8]
  406f36:	b083      	sub	sp, #12
  406f38:	4690      	mov	r8, r2
  406f3a:	2b00      	cmp	r3, #0
  406f3c:	d070      	beq.n	407020 <__ssprint_r+0xf0>
  406f3e:	4682      	mov	sl, r0
  406f40:	460c      	mov	r4, r1
  406f42:	6817      	ldr	r7, [r2, #0]
  406f44:	688d      	ldr	r5, [r1, #8]
  406f46:	6808      	ldr	r0, [r1, #0]
  406f48:	e042      	b.n	406fd0 <__ssprint_r+0xa0>
  406f4a:	89a3      	ldrh	r3, [r4, #12]
  406f4c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f50:	d02e      	beq.n	406fb0 <__ssprint_r+0x80>
  406f52:	6965      	ldr	r5, [r4, #20]
  406f54:	6921      	ldr	r1, [r4, #16]
  406f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406f5a:	eba0 0b01 	sub.w	fp, r0, r1
  406f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406f62:	f10b 0001 	add.w	r0, fp, #1
  406f66:	106d      	asrs	r5, r5, #1
  406f68:	4430      	add	r0, r6
  406f6a:	42a8      	cmp	r0, r5
  406f6c:	462a      	mov	r2, r5
  406f6e:	bf84      	itt	hi
  406f70:	4605      	movhi	r5, r0
  406f72:	462a      	movhi	r2, r5
  406f74:	055b      	lsls	r3, r3, #21
  406f76:	d538      	bpl.n	406fea <__ssprint_r+0xba>
  406f78:	4611      	mov	r1, r2
  406f7a:	4650      	mov	r0, sl
  406f7c:	f7fe fe64 	bl	405c48 <_malloc_r>
  406f80:	2800      	cmp	r0, #0
  406f82:	d03c      	beq.n	406ffe <__ssprint_r+0xce>
  406f84:	465a      	mov	r2, fp
  406f86:	6921      	ldr	r1, [r4, #16]
  406f88:	9001      	str	r0, [sp, #4]
  406f8a:	f7ff f9a9 	bl	4062e0 <memcpy>
  406f8e:	89a2      	ldrh	r2, [r4, #12]
  406f90:	9b01      	ldr	r3, [sp, #4]
  406f92:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406f9a:	81a2      	strh	r2, [r4, #12]
  406f9c:	eba5 020b 	sub.w	r2, r5, fp
  406fa0:	eb03 000b 	add.w	r0, r3, fp
  406fa4:	6165      	str	r5, [r4, #20]
  406fa6:	6123      	str	r3, [r4, #16]
  406fa8:	6020      	str	r0, [r4, #0]
  406faa:	60a2      	str	r2, [r4, #8]
  406fac:	4635      	mov	r5, r6
  406fae:	46b3      	mov	fp, r6
  406fb0:	465a      	mov	r2, fp
  406fb2:	4649      	mov	r1, r9
  406fb4:	f7ff fa2e 	bl	406414 <memmove>
  406fb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406fbc:	68a2      	ldr	r2, [r4, #8]
  406fbe:	6820      	ldr	r0, [r4, #0]
  406fc0:	1b55      	subs	r5, r2, r5
  406fc2:	4458      	add	r0, fp
  406fc4:	1b9e      	subs	r6, r3, r6
  406fc6:	60a5      	str	r5, [r4, #8]
  406fc8:	6020      	str	r0, [r4, #0]
  406fca:	f8c8 6008 	str.w	r6, [r8, #8]
  406fce:	b33e      	cbz	r6, 407020 <__ssprint_r+0xf0>
  406fd0:	687e      	ldr	r6, [r7, #4]
  406fd2:	463b      	mov	r3, r7
  406fd4:	3708      	adds	r7, #8
  406fd6:	2e00      	cmp	r6, #0
  406fd8:	d0fa      	beq.n	406fd0 <__ssprint_r+0xa0>
  406fda:	42ae      	cmp	r6, r5
  406fdc:	f8d3 9000 	ldr.w	r9, [r3]
  406fe0:	46ab      	mov	fp, r5
  406fe2:	d2b2      	bcs.n	406f4a <__ssprint_r+0x1a>
  406fe4:	4635      	mov	r5, r6
  406fe6:	46b3      	mov	fp, r6
  406fe8:	e7e2      	b.n	406fb0 <__ssprint_r+0x80>
  406fea:	4650      	mov	r0, sl
  406fec:	f7ff fd74 	bl	406ad8 <_realloc_r>
  406ff0:	4603      	mov	r3, r0
  406ff2:	2800      	cmp	r0, #0
  406ff4:	d1d2      	bne.n	406f9c <__ssprint_r+0x6c>
  406ff6:	6921      	ldr	r1, [r4, #16]
  406ff8:	4650      	mov	r0, sl
  406ffa:	f7fe fd31 	bl	405a60 <_free_r>
  406ffe:	230c      	movs	r3, #12
  407000:	f8ca 3000 	str.w	r3, [sl]
  407004:	89a3      	ldrh	r3, [r4, #12]
  407006:	2200      	movs	r2, #0
  407008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40700c:	f04f 30ff 	mov.w	r0, #4294967295
  407010:	81a3      	strh	r3, [r4, #12]
  407012:	f8c8 2008 	str.w	r2, [r8, #8]
  407016:	f8c8 2004 	str.w	r2, [r8, #4]
  40701a:	b003      	add	sp, #12
  40701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407020:	2000      	movs	r0, #0
  407022:	f8c8 0004 	str.w	r0, [r8, #4]
  407026:	b003      	add	sp, #12
  407028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040702c <__ascii_wctomb>:
  40702c:	b121      	cbz	r1, 407038 <__ascii_wctomb+0xc>
  40702e:	2aff      	cmp	r2, #255	; 0xff
  407030:	d804      	bhi.n	40703c <__ascii_wctomb+0x10>
  407032:	700a      	strb	r2, [r1, #0]
  407034:	2001      	movs	r0, #1
  407036:	4770      	bx	lr
  407038:	4608      	mov	r0, r1
  40703a:	4770      	bx	lr
  40703c:	238a      	movs	r3, #138	; 0x8a
  40703e:	6003      	str	r3, [r0, #0]
  407040:	f04f 30ff 	mov.w	r0, #4294967295
  407044:	4770      	bx	lr
  407046:	bf00      	nop

00407048 <__register_exitproc>:
  407048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40704c:	4c25      	ldr	r4, [pc, #148]	; (4070e4 <__register_exitproc+0x9c>)
  40704e:	6825      	ldr	r5, [r4, #0]
  407050:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407054:	4606      	mov	r6, r0
  407056:	4688      	mov	r8, r1
  407058:	4692      	mov	sl, r2
  40705a:	4699      	mov	r9, r3
  40705c:	b3c4      	cbz	r4, 4070d0 <__register_exitproc+0x88>
  40705e:	6860      	ldr	r0, [r4, #4]
  407060:	281f      	cmp	r0, #31
  407062:	dc17      	bgt.n	407094 <__register_exitproc+0x4c>
  407064:	1c43      	adds	r3, r0, #1
  407066:	b176      	cbz	r6, 407086 <__register_exitproc+0x3e>
  407068:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40706c:	2201      	movs	r2, #1
  40706e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407072:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407076:	4082      	lsls	r2, r0
  407078:	4311      	orrs	r1, r2
  40707a:	2e02      	cmp	r6, #2
  40707c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407080:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407084:	d01e      	beq.n	4070c4 <__register_exitproc+0x7c>
  407086:	3002      	adds	r0, #2
  407088:	6063      	str	r3, [r4, #4]
  40708a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40708e:	2000      	movs	r0, #0
  407090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407094:	4b14      	ldr	r3, [pc, #80]	; (4070e8 <__register_exitproc+0xa0>)
  407096:	b303      	cbz	r3, 4070da <__register_exitproc+0x92>
  407098:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40709c:	f3af 8000 	nop.w
  4070a0:	4604      	mov	r4, r0
  4070a2:	b1d0      	cbz	r0, 4070da <__register_exitproc+0x92>
  4070a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4070a8:	2700      	movs	r7, #0
  4070aa:	e880 0088 	stmia.w	r0, {r3, r7}
  4070ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4070b2:	4638      	mov	r0, r7
  4070b4:	2301      	movs	r3, #1
  4070b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4070ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4070be:	2e00      	cmp	r6, #0
  4070c0:	d0e1      	beq.n	407086 <__register_exitproc+0x3e>
  4070c2:	e7d1      	b.n	407068 <__register_exitproc+0x20>
  4070c4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4070c8:	430a      	orrs	r2, r1
  4070ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4070ce:	e7da      	b.n	407086 <__register_exitproc+0x3e>
  4070d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4070d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4070d8:	e7c1      	b.n	40705e <__register_exitproc+0x16>
  4070da:	f04f 30ff 	mov.w	r0, #4294967295
  4070de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4070e2:	bf00      	nop
  4070e4:	00407c3c 	.word	0x00407c3c
  4070e8:	00000000 	.word	0x00000000

004070ec <_calloc_r>:
  4070ec:	b510      	push	{r4, lr}
  4070ee:	fb02 f101 	mul.w	r1, r2, r1
  4070f2:	f7fe fda9 	bl	405c48 <_malloc_r>
  4070f6:	4604      	mov	r4, r0
  4070f8:	b1d8      	cbz	r0, 407132 <_calloc_r+0x46>
  4070fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4070fe:	f022 0203 	bic.w	r2, r2, #3
  407102:	3a04      	subs	r2, #4
  407104:	2a24      	cmp	r2, #36	; 0x24
  407106:	d818      	bhi.n	40713a <_calloc_r+0x4e>
  407108:	2a13      	cmp	r2, #19
  40710a:	d914      	bls.n	407136 <_calloc_r+0x4a>
  40710c:	2300      	movs	r3, #0
  40710e:	2a1b      	cmp	r2, #27
  407110:	6003      	str	r3, [r0, #0]
  407112:	6043      	str	r3, [r0, #4]
  407114:	d916      	bls.n	407144 <_calloc_r+0x58>
  407116:	2a24      	cmp	r2, #36	; 0x24
  407118:	6083      	str	r3, [r0, #8]
  40711a:	60c3      	str	r3, [r0, #12]
  40711c:	bf11      	iteee	ne
  40711e:	f100 0210 	addne.w	r2, r0, #16
  407122:	6103      	streq	r3, [r0, #16]
  407124:	6143      	streq	r3, [r0, #20]
  407126:	f100 0218 	addeq.w	r2, r0, #24
  40712a:	2300      	movs	r3, #0
  40712c:	6013      	str	r3, [r2, #0]
  40712e:	6053      	str	r3, [r2, #4]
  407130:	6093      	str	r3, [r2, #8]
  407132:	4620      	mov	r0, r4
  407134:	bd10      	pop	{r4, pc}
  407136:	4602      	mov	r2, r0
  407138:	e7f7      	b.n	40712a <_calloc_r+0x3e>
  40713a:	2100      	movs	r1, #0
  40713c:	f7fb fece 	bl	402edc <memset>
  407140:	4620      	mov	r0, r4
  407142:	bd10      	pop	{r4, pc}
  407144:	f100 0208 	add.w	r2, r0, #8
  407148:	e7ef      	b.n	40712a <_calloc_r+0x3e>
  40714a:	bf00      	nop

0040714c <__aeabi_drsub>:
  40714c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407150:	e002      	b.n	407158 <__adddf3>
  407152:	bf00      	nop

00407154 <__aeabi_dsub>:
  407154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407158 <__adddf3>:
  407158:	b530      	push	{r4, r5, lr}
  40715a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40715e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407162:	ea94 0f05 	teq	r4, r5
  407166:	bf08      	it	eq
  407168:	ea90 0f02 	teqeq	r0, r2
  40716c:	bf1f      	itttt	ne
  40716e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407172:	ea55 0c02 	orrsne.w	ip, r5, r2
  407176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40717a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40717e:	f000 80e2 	beq.w	407346 <__adddf3+0x1ee>
  407182:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40718a:	bfb8      	it	lt
  40718c:	426d      	neglt	r5, r5
  40718e:	dd0c      	ble.n	4071aa <__adddf3+0x52>
  407190:	442c      	add	r4, r5
  407192:	ea80 0202 	eor.w	r2, r0, r2
  407196:	ea81 0303 	eor.w	r3, r1, r3
  40719a:	ea82 0000 	eor.w	r0, r2, r0
  40719e:	ea83 0101 	eor.w	r1, r3, r1
  4071a2:	ea80 0202 	eor.w	r2, r0, r2
  4071a6:	ea81 0303 	eor.w	r3, r1, r3
  4071aa:	2d36      	cmp	r5, #54	; 0x36
  4071ac:	bf88      	it	hi
  4071ae:	bd30      	pophi	{r4, r5, pc}
  4071b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4071b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4071b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4071bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4071c0:	d002      	beq.n	4071c8 <__adddf3+0x70>
  4071c2:	4240      	negs	r0, r0
  4071c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4071c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4071cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4071d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4071d4:	d002      	beq.n	4071dc <__adddf3+0x84>
  4071d6:	4252      	negs	r2, r2
  4071d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4071dc:	ea94 0f05 	teq	r4, r5
  4071e0:	f000 80a7 	beq.w	407332 <__adddf3+0x1da>
  4071e4:	f1a4 0401 	sub.w	r4, r4, #1
  4071e8:	f1d5 0e20 	rsbs	lr, r5, #32
  4071ec:	db0d      	blt.n	40720a <__adddf3+0xb2>
  4071ee:	fa02 fc0e 	lsl.w	ip, r2, lr
  4071f2:	fa22 f205 	lsr.w	r2, r2, r5
  4071f6:	1880      	adds	r0, r0, r2
  4071f8:	f141 0100 	adc.w	r1, r1, #0
  4071fc:	fa03 f20e 	lsl.w	r2, r3, lr
  407200:	1880      	adds	r0, r0, r2
  407202:	fa43 f305 	asr.w	r3, r3, r5
  407206:	4159      	adcs	r1, r3
  407208:	e00e      	b.n	407228 <__adddf3+0xd0>
  40720a:	f1a5 0520 	sub.w	r5, r5, #32
  40720e:	f10e 0e20 	add.w	lr, lr, #32
  407212:	2a01      	cmp	r2, #1
  407214:	fa03 fc0e 	lsl.w	ip, r3, lr
  407218:	bf28      	it	cs
  40721a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40721e:	fa43 f305 	asr.w	r3, r3, r5
  407222:	18c0      	adds	r0, r0, r3
  407224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40722c:	d507      	bpl.n	40723e <__adddf3+0xe6>
  40722e:	f04f 0e00 	mov.w	lr, #0
  407232:	f1dc 0c00 	rsbs	ip, ip, #0
  407236:	eb7e 0000 	sbcs.w	r0, lr, r0
  40723a:	eb6e 0101 	sbc.w	r1, lr, r1
  40723e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407242:	d31b      	bcc.n	40727c <__adddf3+0x124>
  407244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407248:	d30c      	bcc.n	407264 <__adddf3+0x10c>
  40724a:	0849      	lsrs	r1, r1, #1
  40724c:	ea5f 0030 	movs.w	r0, r0, rrx
  407250:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407254:	f104 0401 	add.w	r4, r4, #1
  407258:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40725c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407260:	f080 809a 	bcs.w	407398 <__adddf3+0x240>
  407264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407268:	bf08      	it	eq
  40726a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40726e:	f150 0000 	adcs.w	r0, r0, #0
  407272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407276:	ea41 0105 	orr.w	r1, r1, r5
  40727a:	bd30      	pop	{r4, r5, pc}
  40727c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407280:	4140      	adcs	r0, r0
  407282:	eb41 0101 	adc.w	r1, r1, r1
  407286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40728a:	f1a4 0401 	sub.w	r4, r4, #1
  40728e:	d1e9      	bne.n	407264 <__adddf3+0x10c>
  407290:	f091 0f00 	teq	r1, #0
  407294:	bf04      	itt	eq
  407296:	4601      	moveq	r1, r0
  407298:	2000      	moveq	r0, #0
  40729a:	fab1 f381 	clz	r3, r1
  40729e:	bf08      	it	eq
  4072a0:	3320      	addeq	r3, #32
  4072a2:	f1a3 030b 	sub.w	r3, r3, #11
  4072a6:	f1b3 0220 	subs.w	r2, r3, #32
  4072aa:	da0c      	bge.n	4072c6 <__adddf3+0x16e>
  4072ac:	320c      	adds	r2, #12
  4072ae:	dd08      	ble.n	4072c2 <__adddf3+0x16a>
  4072b0:	f102 0c14 	add.w	ip, r2, #20
  4072b4:	f1c2 020c 	rsb	r2, r2, #12
  4072b8:	fa01 f00c 	lsl.w	r0, r1, ip
  4072bc:	fa21 f102 	lsr.w	r1, r1, r2
  4072c0:	e00c      	b.n	4072dc <__adddf3+0x184>
  4072c2:	f102 0214 	add.w	r2, r2, #20
  4072c6:	bfd8      	it	le
  4072c8:	f1c2 0c20 	rsble	ip, r2, #32
  4072cc:	fa01 f102 	lsl.w	r1, r1, r2
  4072d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4072d4:	bfdc      	itt	le
  4072d6:	ea41 010c 	orrle.w	r1, r1, ip
  4072da:	4090      	lslle	r0, r2
  4072dc:	1ae4      	subs	r4, r4, r3
  4072de:	bfa2      	ittt	ge
  4072e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4072e4:	4329      	orrge	r1, r5
  4072e6:	bd30      	popge	{r4, r5, pc}
  4072e8:	ea6f 0404 	mvn.w	r4, r4
  4072ec:	3c1f      	subs	r4, #31
  4072ee:	da1c      	bge.n	40732a <__adddf3+0x1d2>
  4072f0:	340c      	adds	r4, #12
  4072f2:	dc0e      	bgt.n	407312 <__adddf3+0x1ba>
  4072f4:	f104 0414 	add.w	r4, r4, #20
  4072f8:	f1c4 0220 	rsb	r2, r4, #32
  4072fc:	fa20 f004 	lsr.w	r0, r0, r4
  407300:	fa01 f302 	lsl.w	r3, r1, r2
  407304:	ea40 0003 	orr.w	r0, r0, r3
  407308:	fa21 f304 	lsr.w	r3, r1, r4
  40730c:	ea45 0103 	orr.w	r1, r5, r3
  407310:	bd30      	pop	{r4, r5, pc}
  407312:	f1c4 040c 	rsb	r4, r4, #12
  407316:	f1c4 0220 	rsb	r2, r4, #32
  40731a:	fa20 f002 	lsr.w	r0, r0, r2
  40731e:	fa01 f304 	lsl.w	r3, r1, r4
  407322:	ea40 0003 	orr.w	r0, r0, r3
  407326:	4629      	mov	r1, r5
  407328:	bd30      	pop	{r4, r5, pc}
  40732a:	fa21 f004 	lsr.w	r0, r1, r4
  40732e:	4629      	mov	r1, r5
  407330:	bd30      	pop	{r4, r5, pc}
  407332:	f094 0f00 	teq	r4, #0
  407336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40733a:	bf06      	itte	eq
  40733c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407340:	3401      	addeq	r4, #1
  407342:	3d01      	subne	r5, #1
  407344:	e74e      	b.n	4071e4 <__adddf3+0x8c>
  407346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40734a:	bf18      	it	ne
  40734c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407350:	d029      	beq.n	4073a6 <__adddf3+0x24e>
  407352:	ea94 0f05 	teq	r4, r5
  407356:	bf08      	it	eq
  407358:	ea90 0f02 	teqeq	r0, r2
  40735c:	d005      	beq.n	40736a <__adddf3+0x212>
  40735e:	ea54 0c00 	orrs.w	ip, r4, r0
  407362:	bf04      	itt	eq
  407364:	4619      	moveq	r1, r3
  407366:	4610      	moveq	r0, r2
  407368:	bd30      	pop	{r4, r5, pc}
  40736a:	ea91 0f03 	teq	r1, r3
  40736e:	bf1e      	ittt	ne
  407370:	2100      	movne	r1, #0
  407372:	2000      	movne	r0, #0
  407374:	bd30      	popne	{r4, r5, pc}
  407376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40737a:	d105      	bne.n	407388 <__adddf3+0x230>
  40737c:	0040      	lsls	r0, r0, #1
  40737e:	4149      	adcs	r1, r1
  407380:	bf28      	it	cs
  407382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407386:	bd30      	pop	{r4, r5, pc}
  407388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40738c:	bf3c      	itt	cc
  40738e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407392:	bd30      	popcc	{r4, r5, pc}
  407394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40739c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4073a0:	f04f 0000 	mov.w	r0, #0
  4073a4:	bd30      	pop	{r4, r5, pc}
  4073a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4073aa:	bf1a      	itte	ne
  4073ac:	4619      	movne	r1, r3
  4073ae:	4610      	movne	r0, r2
  4073b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4073b4:	bf1c      	itt	ne
  4073b6:	460b      	movne	r3, r1
  4073b8:	4602      	movne	r2, r0
  4073ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4073be:	bf06      	itte	eq
  4073c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4073c4:	ea91 0f03 	teqeq	r1, r3
  4073c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4073cc:	bd30      	pop	{r4, r5, pc}
  4073ce:	bf00      	nop

004073d0 <__aeabi_ui2d>:
  4073d0:	f090 0f00 	teq	r0, #0
  4073d4:	bf04      	itt	eq
  4073d6:	2100      	moveq	r1, #0
  4073d8:	4770      	bxeq	lr
  4073da:	b530      	push	{r4, r5, lr}
  4073dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073e4:	f04f 0500 	mov.w	r5, #0
  4073e8:	f04f 0100 	mov.w	r1, #0
  4073ec:	e750      	b.n	407290 <__adddf3+0x138>
  4073ee:	bf00      	nop

004073f0 <__aeabi_i2d>:
  4073f0:	f090 0f00 	teq	r0, #0
  4073f4:	bf04      	itt	eq
  4073f6:	2100      	moveq	r1, #0
  4073f8:	4770      	bxeq	lr
  4073fa:	b530      	push	{r4, r5, lr}
  4073fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407400:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407408:	bf48      	it	mi
  40740a:	4240      	negmi	r0, r0
  40740c:	f04f 0100 	mov.w	r1, #0
  407410:	e73e      	b.n	407290 <__adddf3+0x138>
  407412:	bf00      	nop

00407414 <__aeabi_f2d>:
  407414:	0042      	lsls	r2, r0, #1
  407416:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40741a:	ea4f 0131 	mov.w	r1, r1, rrx
  40741e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407422:	bf1f      	itttt	ne
  407424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40742c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407430:	4770      	bxne	lr
  407432:	f092 0f00 	teq	r2, #0
  407436:	bf14      	ite	ne
  407438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40743c:	4770      	bxeq	lr
  40743e:	b530      	push	{r4, r5, lr}
  407440:	f44f 7460 	mov.w	r4, #896	; 0x380
  407444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40744c:	e720      	b.n	407290 <__adddf3+0x138>
  40744e:	bf00      	nop

00407450 <__aeabi_ul2d>:
  407450:	ea50 0201 	orrs.w	r2, r0, r1
  407454:	bf08      	it	eq
  407456:	4770      	bxeq	lr
  407458:	b530      	push	{r4, r5, lr}
  40745a:	f04f 0500 	mov.w	r5, #0
  40745e:	e00a      	b.n	407476 <__aeabi_l2d+0x16>

00407460 <__aeabi_l2d>:
  407460:	ea50 0201 	orrs.w	r2, r0, r1
  407464:	bf08      	it	eq
  407466:	4770      	bxeq	lr
  407468:	b530      	push	{r4, r5, lr}
  40746a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40746e:	d502      	bpl.n	407476 <__aeabi_l2d+0x16>
  407470:	4240      	negs	r0, r0
  407472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407476:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40747a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40747e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407482:	f43f aedc 	beq.w	40723e <__adddf3+0xe6>
  407486:	f04f 0203 	mov.w	r2, #3
  40748a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40748e:	bf18      	it	ne
  407490:	3203      	addne	r2, #3
  407492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407496:	bf18      	it	ne
  407498:	3203      	addne	r2, #3
  40749a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40749e:	f1c2 0320 	rsb	r3, r2, #32
  4074a2:	fa00 fc03 	lsl.w	ip, r0, r3
  4074a6:	fa20 f002 	lsr.w	r0, r0, r2
  4074aa:	fa01 fe03 	lsl.w	lr, r1, r3
  4074ae:	ea40 000e 	orr.w	r0, r0, lr
  4074b2:	fa21 f102 	lsr.w	r1, r1, r2
  4074b6:	4414      	add	r4, r2
  4074b8:	e6c1      	b.n	40723e <__adddf3+0xe6>
  4074ba:	bf00      	nop

004074bc <__aeabi_dmul>:
  4074bc:	b570      	push	{r4, r5, r6, lr}
  4074be:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4074c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4074c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4074ca:	bf1d      	ittte	ne
  4074cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4074d0:	ea94 0f0c 	teqne	r4, ip
  4074d4:	ea95 0f0c 	teqne	r5, ip
  4074d8:	f000 f8de 	bleq	407698 <__aeabi_dmul+0x1dc>
  4074dc:	442c      	add	r4, r5
  4074de:	ea81 0603 	eor.w	r6, r1, r3
  4074e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4074e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4074ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4074ee:	bf18      	it	ne
  4074f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4074f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4074fc:	d038      	beq.n	407570 <__aeabi_dmul+0xb4>
  4074fe:	fba0 ce02 	umull	ip, lr, r0, r2
  407502:	f04f 0500 	mov.w	r5, #0
  407506:	fbe1 e502 	umlal	lr, r5, r1, r2
  40750a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40750e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407512:	f04f 0600 	mov.w	r6, #0
  407516:	fbe1 5603 	umlal	r5, r6, r1, r3
  40751a:	f09c 0f00 	teq	ip, #0
  40751e:	bf18      	it	ne
  407520:	f04e 0e01 	orrne.w	lr, lr, #1
  407524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40752c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407530:	d204      	bcs.n	40753c <__aeabi_dmul+0x80>
  407532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407536:	416d      	adcs	r5, r5
  407538:	eb46 0606 	adc.w	r6, r6, r6
  40753c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40754c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407554:	bf88      	it	hi
  407556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40755a:	d81e      	bhi.n	40759a <__aeabi_dmul+0xde>
  40755c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407560:	bf08      	it	eq
  407562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407566:	f150 0000 	adcs.w	r0, r0, #0
  40756a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40756e:	bd70      	pop	{r4, r5, r6, pc}
  407570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407574:	ea46 0101 	orr.w	r1, r6, r1
  407578:	ea40 0002 	orr.w	r0, r0, r2
  40757c:	ea81 0103 	eor.w	r1, r1, r3
  407580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407584:	bfc2      	ittt	gt
  407586:	ebd4 050c 	rsbsgt	r5, r4, ip
  40758a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40758e:	bd70      	popgt	{r4, r5, r6, pc}
  407590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407594:	f04f 0e00 	mov.w	lr, #0
  407598:	3c01      	subs	r4, #1
  40759a:	f300 80ab 	bgt.w	4076f4 <__aeabi_dmul+0x238>
  40759e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4075a2:	bfde      	ittt	le
  4075a4:	2000      	movle	r0, #0
  4075a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4075aa:	bd70      	pople	{r4, r5, r6, pc}
  4075ac:	f1c4 0400 	rsb	r4, r4, #0
  4075b0:	3c20      	subs	r4, #32
  4075b2:	da35      	bge.n	407620 <__aeabi_dmul+0x164>
  4075b4:	340c      	adds	r4, #12
  4075b6:	dc1b      	bgt.n	4075f0 <__aeabi_dmul+0x134>
  4075b8:	f104 0414 	add.w	r4, r4, #20
  4075bc:	f1c4 0520 	rsb	r5, r4, #32
  4075c0:	fa00 f305 	lsl.w	r3, r0, r5
  4075c4:	fa20 f004 	lsr.w	r0, r0, r4
  4075c8:	fa01 f205 	lsl.w	r2, r1, r5
  4075cc:	ea40 0002 	orr.w	r0, r0, r2
  4075d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4075d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4075d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075dc:	fa21 f604 	lsr.w	r6, r1, r4
  4075e0:	eb42 0106 	adc.w	r1, r2, r6
  4075e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075e8:	bf08      	it	eq
  4075ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075ee:	bd70      	pop	{r4, r5, r6, pc}
  4075f0:	f1c4 040c 	rsb	r4, r4, #12
  4075f4:	f1c4 0520 	rsb	r5, r4, #32
  4075f8:	fa00 f304 	lsl.w	r3, r0, r4
  4075fc:	fa20 f005 	lsr.w	r0, r0, r5
  407600:	fa01 f204 	lsl.w	r2, r1, r4
  407604:	ea40 0002 	orr.w	r0, r0, r2
  407608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40760c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407610:	f141 0100 	adc.w	r1, r1, #0
  407614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407618:	bf08      	it	eq
  40761a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40761e:	bd70      	pop	{r4, r5, r6, pc}
  407620:	f1c4 0520 	rsb	r5, r4, #32
  407624:	fa00 f205 	lsl.w	r2, r0, r5
  407628:	ea4e 0e02 	orr.w	lr, lr, r2
  40762c:	fa20 f304 	lsr.w	r3, r0, r4
  407630:	fa01 f205 	lsl.w	r2, r1, r5
  407634:	ea43 0302 	orr.w	r3, r3, r2
  407638:	fa21 f004 	lsr.w	r0, r1, r4
  40763c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407640:	fa21 f204 	lsr.w	r2, r1, r4
  407644:	ea20 0002 	bic.w	r0, r0, r2
  407648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40764c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407650:	bf08      	it	eq
  407652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407656:	bd70      	pop	{r4, r5, r6, pc}
  407658:	f094 0f00 	teq	r4, #0
  40765c:	d10f      	bne.n	40767e <__aeabi_dmul+0x1c2>
  40765e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407662:	0040      	lsls	r0, r0, #1
  407664:	eb41 0101 	adc.w	r1, r1, r1
  407668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40766c:	bf08      	it	eq
  40766e:	3c01      	subeq	r4, #1
  407670:	d0f7      	beq.n	407662 <__aeabi_dmul+0x1a6>
  407672:	ea41 0106 	orr.w	r1, r1, r6
  407676:	f095 0f00 	teq	r5, #0
  40767a:	bf18      	it	ne
  40767c:	4770      	bxne	lr
  40767e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407682:	0052      	lsls	r2, r2, #1
  407684:	eb43 0303 	adc.w	r3, r3, r3
  407688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40768c:	bf08      	it	eq
  40768e:	3d01      	subeq	r5, #1
  407690:	d0f7      	beq.n	407682 <__aeabi_dmul+0x1c6>
  407692:	ea43 0306 	orr.w	r3, r3, r6
  407696:	4770      	bx	lr
  407698:	ea94 0f0c 	teq	r4, ip
  40769c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4076a0:	bf18      	it	ne
  4076a2:	ea95 0f0c 	teqne	r5, ip
  4076a6:	d00c      	beq.n	4076c2 <__aeabi_dmul+0x206>
  4076a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076ac:	bf18      	it	ne
  4076ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076b2:	d1d1      	bne.n	407658 <__aeabi_dmul+0x19c>
  4076b4:	ea81 0103 	eor.w	r1, r1, r3
  4076b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076bc:	f04f 0000 	mov.w	r0, #0
  4076c0:	bd70      	pop	{r4, r5, r6, pc}
  4076c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076c6:	bf06      	itte	eq
  4076c8:	4610      	moveq	r0, r2
  4076ca:	4619      	moveq	r1, r3
  4076cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076d0:	d019      	beq.n	407706 <__aeabi_dmul+0x24a>
  4076d2:	ea94 0f0c 	teq	r4, ip
  4076d6:	d102      	bne.n	4076de <__aeabi_dmul+0x222>
  4076d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4076dc:	d113      	bne.n	407706 <__aeabi_dmul+0x24a>
  4076de:	ea95 0f0c 	teq	r5, ip
  4076e2:	d105      	bne.n	4076f0 <__aeabi_dmul+0x234>
  4076e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4076e8:	bf1c      	itt	ne
  4076ea:	4610      	movne	r0, r2
  4076ec:	4619      	movne	r1, r3
  4076ee:	d10a      	bne.n	407706 <__aeabi_dmul+0x24a>
  4076f0:	ea81 0103 	eor.w	r1, r1, r3
  4076f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407700:	f04f 0000 	mov.w	r0, #0
  407704:	bd70      	pop	{r4, r5, r6, pc}
  407706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40770a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40770e:	bd70      	pop	{r4, r5, r6, pc}

00407710 <__aeabi_ddiv>:
  407710:	b570      	push	{r4, r5, r6, lr}
  407712:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40771a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40771e:	bf1d      	ittte	ne
  407720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407724:	ea94 0f0c 	teqne	r4, ip
  407728:	ea95 0f0c 	teqne	r5, ip
  40772c:	f000 f8a7 	bleq	40787e <__aeabi_ddiv+0x16e>
  407730:	eba4 0405 	sub.w	r4, r4, r5
  407734:	ea81 0e03 	eor.w	lr, r1, r3
  407738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40773c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407740:	f000 8088 	beq.w	407854 <__aeabi_ddiv+0x144>
  407744:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40774c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407754:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40775c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407760:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407768:	429d      	cmp	r5, r3
  40776a:	bf08      	it	eq
  40776c:	4296      	cmpeq	r6, r2
  40776e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407772:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407776:	d202      	bcs.n	40777e <__aeabi_ddiv+0x6e>
  407778:	085b      	lsrs	r3, r3, #1
  40777a:	ea4f 0232 	mov.w	r2, r2, rrx
  40777e:	1ab6      	subs	r6, r6, r2
  407780:	eb65 0503 	sbc.w	r5, r5, r3
  407784:	085b      	lsrs	r3, r3, #1
  407786:	ea4f 0232 	mov.w	r2, r2, rrx
  40778a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40778e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407792:	ebb6 0e02 	subs.w	lr, r6, r2
  407796:	eb75 0e03 	sbcs.w	lr, r5, r3
  40779a:	bf22      	ittt	cs
  40779c:	1ab6      	subcs	r6, r6, r2
  40779e:	4675      	movcs	r5, lr
  4077a0:	ea40 000c 	orrcs.w	r0, r0, ip
  4077a4:	085b      	lsrs	r3, r3, #1
  4077a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4077ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077b2:	bf22      	ittt	cs
  4077b4:	1ab6      	subcs	r6, r6, r2
  4077b6:	4675      	movcs	r5, lr
  4077b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4077bc:	085b      	lsrs	r3, r3, #1
  4077be:	ea4f 0232 	mov.w	r2, r2, rrx
  4077c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077ca:	bf22      	ittt	cs
  4077cc:	1ab6      	subcs	r6, r6, r2
  4077ce:	4675      	movcs	r5, lr
  4077d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4077d4:	085b      	lsrs	r3, r3, #1
  4077d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077da:	ebb6 0e02 	subs.w	lr, r6, r2
  4077de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077e2:	bf22      	ittt	cs
  4077e4:	1ab6      	subcs	r6, r6, r2
  4077e6:	4675      	movcs	r5, lr
  4077e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4077ec:	ea55 0e06 	orrs.w	lr, r5, r6
  4077f0:	d018      	beq.n	407824 <__aeabi_ddiv+0x114>
  4077f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4077f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4077fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4077fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40780a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40780e:	d1c0      	bne.n	407792 <__aeabi_ddiv+0x82>
  407810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407814:	d10b      	bne.n	40782e <__aeabi_ddiv+0x11e>
  407816:	ea41 0100 	orr.w	r1, r1, r0
  40781a:	f04f 0000 	mov.w	r0, #0
  40781e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407822:	e7b6      	b.n	407792 <__aeabi_ddiv+0x82>
  407824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407828:	bf04      	itt	eq
  40782a:	4301      	orreq	r1, r0
  40782c:	2000      	moveq	r0, #0
  40782e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407832:	bf88      	it	hi
  407834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407838:	f63f aeaf 	bhi.w	40759a <__aeabi_dmul+0xde>
  40783c:	ebb5 0c03 	subs.w	ip, r5, r3
  407840:	bf04      	itt	eq
  407842:	ebb6 0c02 	subseq.w	ip, r6, r2
  407846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40784a:	f150 0000 	adcs.w	r0, r0, #0
  40784e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407852:	bd70      	pop	{r4, r5, r6, pc}
  407854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40785c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407860:	bfc2      	ittt	gt
  407862:	ebd4 050c 	rsbsgt	r5, r4, ip
  407866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40786a:	bd70      	popgt	{r4, r5, r6, pc}
  40786c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407870:	f04f 0e00 	mov.w	lr, #0
  407874:	3c01      	subs	r4, #1
  407876:	e690      	b.n	40759a <__aeabi_dmul+0xde>
  407878:	ea45 0e06 	orr.w	lr, r5, r6
  40787c:	e68d      	b.n	40759a <__aeabi_dmul+0xde>
  40787e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407882:	ea94 0f0c 	teq	r4, ip
  407886:	bf08      	it	eq
  407888:	ea95 0f0c 	teqeq	r5, ip
  40788c:	f43f af3b 	beq.w	407706 <__aeabi_dmul+0x24a>
  407890:	ea94 0f0c 	teq	r4, ip
  407894:	d10a      	bne.n	4078ac <__aeabi_ddiv+0x19c>
  407896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40789a:	f47f af34 	bne.w	407706 <__aeabi_dmul+0x24a>
  40789e:	ea95 0f0c 	teq	r5, ip
  4078a2:	f47f af25 	bne.w	4076f0 <__aeabi_dmul+0x234>
  4078a6:	4610      	mov	r0, r2
  4078a8:	4619      	mov	r1, r3
  4078aa:	e72c      	b.n	407706 <__aeabi_dmul+0x24a>
  4078ac:	ea95 0f0c 	teq	r5, ip
  4078b0:	d106      	bne.n	4078c0 <__aeabi_ddiv+0x1b0>
  4078b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4078b6:	f43f aefd 	beq.w	4076b4 <__aeabi_dmul+0x1f8>
  4078ba:	4610      	mov	r0, r2
  4078bc:	4619      	mov	r1, r3
  4078be:	e722      	b.n	407706 <__aeabi_dmul+0x24a>
  4078c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078c4:	bf18      	it	ne
  4078c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4078ca:	f47f aec5 	bne.w	407658 <__aeabi_dmul+0x19c>
  4078ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4078d2:	f47f af0d 	bne.w	4076f0 <__aeabi_dmul+0x234>
  4078d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4078da:	f47f aeeb 	bne.w	4076b4 <__aeabi_dmul+0x1f8>
  4078de:	e712      	b.n	407706 <__aeabi_dmul+0x24a>

004078e0 <__gedf2>:
  4078e0:	f04f 3cff 	mov.w	ip, #4294967295
  4078e4:	e006      	b.n	4078f4 <__cmpdf2+0x4>
  4078e6:	bf00      	nop

004078e8 <__ledf2>:
  4078e8:	f04f 0c01 	mov.w	ip, #1
  4078ec:	e002      	b.n	4078f4 <__cmpdf2+0x4>
  4078ee:	bf00      	nop

004078f0 <__cmpdf2>:
  4078f0:	f04f 0c01 	mov.w	ip, #1
  4078f4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407904:	bf18      	it	ne
  407906:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40790a:	d01b      	beq.n	407944 <__cmpdf2+0x54>
  40790c:	b001      	add	sp, #4
  40790e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407912:	bf0c      	ite	eq
  407914:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407918:	ea91 0f03 	teqne	r1, r3
  40791c:	bf02      	ittt	eq
  40791e:	ea90 0f02 	teqeq	r0, r2
  407922:	2000      	moveq	r0, #0
  407924:	4770      	bxeq	lr
  407926:	f110 0f00 	cmn.w	r0, #0
  40792a:	ea91 0f03 	teq	r1, r3
  40792e:	bf58      	it	pl
  407930:	4299      	cmppl	r1, r3
  407932:	bf08      	it	eq
  407934:	4290      	cmpeq	r0, r2
  407936:	bf2c      	ite	cs
  407938:	17d8      	asrcs	r0, r3, #31
  40793a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40793e:	f040 0001 	orr.w	r0, r0, #1
  407942:	4770      	bx	lr
  407944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40794c:	d102      	bne.n	407954 <__cmpdf2+0x64>
  40794e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407952:	d107      	bne.n	407964 <__cmpdf2+0x74>
  407954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40795c:	d1d6      	bne.n	40790c <__cmpdf2+0x1c>
  40795e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407962:	d0d3      	beq.n	40790c <__cmpdf2+0x1c>
  407964:	f85d 0b04 	ldr.w	r0, [sp], #4
  407968:	4770      	bx	lr
  40796a:	bf00      	nop

0040796c <__aeabi_cdrcmple>:
  40796c:	4684      	mov	ip, r0
  40796e:	4610      	mov	r0, r2
  407970:	4662      	mov	r2, ip
  407972:	468c      	mov	ip, r1
  407974:	4619      	mov	r1, r3
  407976:	4663      	mov	r3, ip
  407978:	e000      	b.n	40797c <__aeabi_cdcmpeq>
  40797a:	bf00      	nop

0040797c <__aeabi_cdcmpeq>:
  40797c:	b501      	push	{r0, lr}
  40797e:	f7ff ffb7 	bl	4078f0 <__cmpdf2>
  407982:	2800      	cmp	r0, #0
  407984:	bf48      	it	mi
  407986:	f110 0f00 	cmnmi.w	r0, #0
  40798a:	bd01      	pop	{r0, pc}

0040798c <__aeabi_dcmpeq>:
  40798c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407990:	f7ff fff4 	bl	40797c <__aeabi_cdcmpeq>
  407994:	bf0c      	ite	eq
  407996:	2001      	moveq	r0, #1
  407998:	2000      	movne	r0, #0
  40799a:	f85d fb08 	ldr.w	pc, [sp], #8
  40799e:	bf00      	nop

004079a0 <__aeabi_dcmplt>:
  4079a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079a4:	f7ff ffea 	bl	40797c <__aeabi_cdcmpeq>
  4079a8:	bf34      	ite	cc
  4079aa:	2001      	movcc	r0, #1
  4079ac:	2000      	movcs	r0, #0
  4079ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4079b2:	bf00      	nop

004079b4 <__aeabi_dcmple>:
  4079b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079b8:	f7ff ffe0 	bl	40797c <__aeabi_cdcmpeq>
  4079bc:	bf94      	ite	ls
  4079be:	2001      	movls	r0, #1
  4079c0:	2000      	movhi	r0, #0
  4079c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4079c6:	bf00      	nop

004079c8 <__aeabi_dcmpge>:
  4079c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079cc:	f7ff ffce 	bl	40796c <__aeabi_cdrcmple>
  4079d0:	bf94      	ite	ls
  4079d2:	2001      	movls	r0, #1
  4079d4:	2000      	movhi	r0, #0
  4079d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079da:	bf00      	nop

004079dc <__aeabi_dcmpgt>:
  4079dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079e0:	f7ff ffc4 	bl	40796c <__aeabi_cdrcmple>
  4079e4:	bf34      	ite	cc
  4079e6:	2001      	movcc	r0, #1
  4079e8:	2000      	movcs	r0, #0
  4079ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4079ee:	bf00      	nop

004079f0 <__aeabi_dcmpun>:
  4079f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079f8:	d102      	bne.n	407a00 <__aeabi_dcmpun+0x10>
  4079fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4079fe:	d10a      	bne.n	407a16 <__aeabi_dcmpun+0x26>
  407a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a08:	d102      	bne.n	407a10 <__aeabi_dcmpun+0x20>
  407a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407a0e:	d102      	bne.n	407a16 <__aeabi_dcmpun+0x26>
  407a10:	f04f 0000 	mov.w	r0, #0
  407a14:	4770      	bx	lr
  407a16:	f04f 0001 	mov.w	r0, #1
  407a1a:	4770      	bx	lr

00407a1c <__aeabi_d2iz>:
  407a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407a24:	d215      	bcs.n	407a52 <__aeabi_d2iz+0x36>
  407a26:	d511      	bpl.n	407a4c <__aeabi_d2iz+0x30>
  407a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a30:	d912      	bls.n	407a58 <__aeabi_d2iz+0x3c>
  407a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a42:	fa23 f002 	lsr.w	r0, r3, r2
  407a46:	bf18      	it	ne
  407a48:	4240      	negne	r0, r0
  407a4a:	4770      	bx	lr
  407a4c:	f04f 0000 	mov.w	r0, #0
  407a50:	4770      	bx	lr
  407a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a56:	d105      	bne.n	407a64 <__aeabi_d2iz+0x48>
  407a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a5c:	bf08      	it	eq
  407a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a62:	4770      	bx	lr
  407a64:	f04f 0000 	mov.w	r0, #0
  407a68:	4770      	bx	lr
  407a6a:	bf00      	nop
  407a6c:	0001c200 	.word	0x0001c200
  407a70:	000000c0 	.word	0x000000c0
  407a74:	00000800 	.word	0x00000800
	...
  407a84:	736f6c63 	.word	0x736f6c63
  407a88:	6c612065 	.word	0x6c612065
  407a8c:	000a0d6c 	.word	0x000a0d6c
  407a90:	70747468 	.word	0x70747468
  407a94:	736f705f 	.word	0x736f705f
  407a98:	6f2d2074 	.word	0x6f2d2074
  407a9c:	74746820 	.word	0x74746820
  407aa0:	2f3a7370 	.word	0x2f3a7370
  407aa4:	6769622f 	.word	0x6769622f
  407aa8:	746f7262 	.word	0x746f7262
  407aac:	73726568 	.word	0x73726568
  407ab0:	2e736565 	.word	0x2e736565
  407ab4:	702f656d 	.word	0x702f656d
  407ab8:	5f74736f 	.word	0x5f74736f
  407abc:	67616d69 	.word	0x67616d69
  407ac0:	70612065 	.word	0x70612065
  407ac4:	63696c70 	.word	0x63696c70
  407ac8:	6f697461 	.word	0x6f697461
  407acc:	736a2f6e 	.word	0x736a2f6e
  407ad0:	0a0d6e6f 	.word	0x0a0d6e6f
  407ad4:	00000000 	.word	0x00000000
  407ad8:	70747468 	.word	0x70747468
  407adc:	6464615f 	.word	0x6464615f
  407ae0:	6165685f 	.word	0x6165685f
  407ae4:	20726564 	.word	0x20726564
  407ae8:	656d2030 	.word	0x656d2030
  407aec:	67617373 	.word	0x67617373
  407af0:	79742d65 	.word	0x79742d65
  407af4:	69206570 	.word	0x69206570
  407af8:	6567616d 	.word	0x6567616d
  407afc:	6e69622d 	.word	0x6e69622d
  407b00:	00000a0d 	.word	0x00000a0d
  407b04:	74697277 	.word	0x74697277
  407b08:	20302065 	.word	0x20302065
  407b0c:	0a0d6425 	.word	0x0a0d6425
  407b10:	00000000 	.word	0x00000000
  407b14:	70747468 	.word	0x70747468
  407b18:	6165725f 	.word	0x6165725f
  407b1c:	74735f64 	.word	0x74735f64
  407b20:	73757461 	.word	0x73757461
  407b24:	0a0d3020 	.word	0x0a0d3020
  407b28:	00000000 	.word	0x00000000
  407b2c:	6e65704f 	.word	0x6e65704f
  407b30:	00006465 	.word	0x00006465
  407b34:	73626577 	.word	0x73626577
  407b38:	656b636f 	.word	0x656b636f
  407b3c:	6c635f74 	.word	0x6c635f74
  407b40:	746e6569 	.word	0x746e6569
  407b44:	20662d20 	.word	0x20662d20
  407b48:	206e6962 	.word	0x206e6962
  407b4c:	3a737377 	.word	0x3a737377
  407b50:	69622f2f 	.word	0x69622f2f
  407b54:	6f726267 	.word	0x6f726267
  407b58:	72656874 	.word	0x72656874
  407b5c:	73656573 	.word	0x73656573
  407b60:	2f656d2e 	.word	0x2f656d2e
  407b64:	72756f73 	.word	0x72756f73
  407b68:	615f6563 	.word	0x615f6563
  407b6c:	6f696475 	.word	0x6f696475
  407b70:	636f735f 	.word	0x636f735f
  407b74:	0d74656b 	.word	0x0d74656b
  407b78:	0000000a 	.word	0x0000000a
  407b7c:	65704f5b 	.word	0x65704f5b
  407b80:	3a64656e 	.word	0x3a64656e
  407b84:	00000020 	.word	0x00000020
  407b88:	74697277 	.word	0x74697277
  407b8c:	64252065 	.word	0x64252065
  407b90:	0d642520 	.word	0x0d642520
  407b94:	0000000a 	.word	0x0000000a
  407b98:	20656466 	.word	0x20656466
  407b9c:	6d746162 	.word	0x6d746162
  407ba0:	742e6e61 	.word	0x742e6e61
  407ba4:	0a0d7478 	.word	0x0a0d7478
  407ba8:	00000000 	.word	0x00000000
  407bac:	20726366 	.word	0x20726366
  407bb0:	6d746162 	.word	0x6d746162
  407bb4:	742e6e61 	.word	0x742e6e61
  407bb8:	25207478 	.word	0x25207478
  407bbc:	000a0d64 	.word	0x000a0d64
  407bc0:	75746573 	.word	0x75746573
  407bc4:	65772070 	.word	0x65772070
  407bc8:	000a0d62 	.word	0x000a0d62
  407bcc:	7373415b 	.word	0x7373415b
  407bd0:	6169636f 	.word	0x6169636f
  407bd4:	5d646574 	.word	0x5d646574
  407bd8:	00000a0d 	.word	0x00000a0d
  407bdc:	20746567 	.word	0x20746567
  407be0:	74737973 	.word	0x74737973
  407be4:	732e6d65 	.word	0x732e6d65
  407be8:	6d656661 	.word	0x6d656661
  407bec:	2e65646f 	.word	0x2e65646f
  407bf0:	74617473 	.word	0x74617473
  407bf4:	0a0d7375 	.word	0x0a0d7375
  407bf8:	00000000 	.word	0x00000000
  407bfc:	6c756166 	.word	0x6c756166
  407c00:	705f7374 	.word	0x705f7374
  407c04:	746e6972 	.word	0x746e6972
  407c08:	00000a0d 	.word	0x00000a0d
  407c0c:	6c756166 	.word	0x6c756166
  407c10:	725f7374 	.word	0x725f7374
  407c14:	74657365 	.word	0x74657365
  407c18:	00000a0d 	.word	0x00000a0d
  407c1c:	6f626572 	.word	0x6f626572
  407c20:	0a0d746f 	.word	0x0a0d746f
  407c24:	00000000 	.word	0x00000000
  407c28:	20746573 	.word	0x20746573
  407c2c:	63207973 	.word	0x63207973
  407c30:	6f207020 	.word	0x6f207020
  407c34:	0a0d6666 	.word	0x0a0d6666
  407c38:	00000000 	.word	0x00000000

00407c3c <_global_impure_ptr>:
  407c3c:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  407c4c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407c5c:	46454443 00000000 33323130 37363534     CDEF....01234567
  407c6c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407c7c:	0000296c 00000030                       l)..0...

00407c84 <blanks.7208>:
  407c84:	20202020 20202020 20202020 20202020                     

00407c94 <zeroes.7209>:
  407c94:	30303030 30303030 30303030 30303030     0000000000000000
  407ca4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407cb4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  407cc4:	00000000                                ....

00407cc8 <__mprec_bigtens>:
  407cc8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407cd8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407ce8:	7f73bf3c 75154fdd                       <.s..O.u

00407cf0 <__mprec_tens>:
  407cf0:	00000000 3ff00000 00000000 40240000     .......?......$@
  407d00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407d10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407d20:	00000000 412e8480 00000000 416312d0     .......A......cA
  407d30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407d40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407d50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407d60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407d70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407d80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407d90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407da0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407db0:	79d99db4 44ea7843                       ...yCx.D

00407db8 <p05.6040>:
  407db8:	00000005 00000019 0000007d              ........}...

00407dc4 <_ctype_>:
  407dc4:	20202000 20202020 28282020 20282828     .         ((((( 
  407dd4:	20202020 20202020 20202020 20202020                     
  407de4:	10108820 10101010 10101010 10101010      ...............
  407df4:	04040410 04040404 10040404 10101010     ................
  407e04:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407e14:	01010101 01010101 01010101 10101010     ................
  407e24:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407e34:	02020202 02020202 02020202 10101010     ................
  407e44:	00000020 00000000 00000000 00000000      ...............
	...

00407ec8 <_init>:
  407ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407eca:	bf00      	nop
  407ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407ece:	bc08      	pop	{r3}
  407ed0:	469e      	mov	lr, r3
  407ed2:	4770      	bx	lr

00407ed4 <__init_array_start>:
  407ed4:	004049f1 	.word	0x004049f1

00407ed8 <__frame_dummy_init_array_entry>:
  407ed8:	004000f1                                ..@.

00407edc <_fini>:
  407edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ede:	bf00      	nop
  407ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407ee2:	bc08      	pop	{r3}
  407ee4:	469e      	mov	lr, r3
  407ee6:	4770      	bx	lr

00407ee8 <__fini_array_start>:
  407ee8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__global_locale>:
20000440:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000460:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000480:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000500:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000520:	702d 0040 61a9 0040 0000 0000 7dc4 0040     -p@..a@......}@.
20000530:	7cc0 0040 7c60 0040 7c60 0040 7c60 0040     .|@.`|@.`|@.`|@.
20000540:	7c60 0040 7c60 0040 7c60 0040 7c60 0040     `|@.`|@.`|@.`|@.
20000550:	7c60 0040 7c60 0040 ffff ffff ffff ffff     `|@.`|@.........
20000560:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000588:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005ac <__malloc_av_>:
	...
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 

200009b4 <__malloc_sbrk_base>:
200009b4:	ffff ffff                                   ....

200009b8 <__malloc_trim_threshold>:
200009b8:	0000 0002                                   ....
