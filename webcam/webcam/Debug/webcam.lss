
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e54  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402e54  00402e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  00402e5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001248  20000438  00403294  00020438  2**2
                  ALLOC
  4 .stack        00003000  20001680  004044dc  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013eee  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000292b  00000000  00000000  000343a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006f68  00000000  00000000  00036cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c08  00000000  00000000  0003dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b68  00000000  00000000  0003e844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000063ce  00000000  00000000  0003f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d663  00000000  00000000  0004577a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f518  00000000  00000000  00052ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035f4  00000000  00000000  000a22f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 46 00 20 fd 1d 40 00 c5 1e 40 00 c5 1e 40 00     .F. ..@...@...@.
  400010:	c5 1e 40 00 c5 1e 40 00 c5 1e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 1e 40 00 c5 1e 40 00 00 00 00 00 c5 1e 40 00     ..@...@.......@.
  40003c:	c5 1e 40 00 c5 1e 40 00 c5 1e 40 00 c5 1e 40 00     ..@...@...@...@.
  40004c:	c5 1e 40 00 c5 1e 40 00 c5 1e 40 00 c5 1e 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 c5 1e 40 00 c5 1e 40 00 00 00 00 00     ......@...@.....
  40006c:	79 08 40 00 91 08 40 00 00 00 00 00 25 0c 40 00     y.@...@.....%.@.
  40007c:	c5 1e 40 00 00 00 00 00 00 00 00 00 c5 1e 40 00     ..@...........@.
  40008c:	c5 1e 40 00 c5 1e 40 00 c5 1e 40 00 55 06 40 00     ..@...@...@.U.@.
  40009c:	59 0a 40 00 c5 1e 40 00 c5 1e 40 00 00 00 00 00     Y.@...@...@.....
	...
  4000b4:	c5 1e 40 00 c5 1e 40 00 c5 1e 40 00 c5 1e 40 00     ..@...@...@...@.
  4000c4:	c5 1e 40 00 c5 1e 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402e5c 	.word	0x00402e5c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402e5c 	.word	0x00402e5c
  40012c:	2000043c 	.word	0x2000043c
  400130:	00402e5c 	.word	0x00402e5c
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr

00400176 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400176:	b480      	push	{r7}
  400178:	b083      	sub	sp, #12
  40017a:	af00      	add	r7, sp, #0
  40017c:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40017e:	687b      	ldr	r3, [r7, #4]
  400180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400184:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400186:	687b      	ldr	r3, [r7, #4]
  400188:	2200      	movs	r2, #0
  40018a:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40018c:	687b      	ldr	r3, [r7, #4]
  40018e:	2200      	movs	r2, #0
  400190:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400192:	687b      	ldr	r3, [r7, #4]
  400194:	2200      	movs	r2, #0
  400196:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400198:	687b      	ldr	r3, [r7, #4]
  40019a:	2200      	movs	r2, #0
  40019c:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40019e:	687b      	ldr	r3, [r7, #4]
  4001a0:	2200      	movs	r2, #0
  4001a2:	61da      	str	r2, [r3, #28]
}
  4001a4:	bf00      	nop
  4001a6:	370c      	adds	r7, #12
  4001a8:	46bd      	mov	sp, r7
  4001aa:	bc80      	pop	{r7}
  4001ac:	4770      	bx	lr

004001ae <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4001ae:	b480      	push	{r7}
  4001b0:	b083      	sub	sp, #12
  4001b2:	af00      	add	r7, sp, #0
  4001b4:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4001b6:	687b      	ldr	r3, [r7, #4]
  4001b8:	2201      	movs	r2, #1
  4001ba:	601a      	str	r2, [r3, #0]
}
  4001bc:	bf00      	nop
  4001be:	370c      	adds	r7, #12
  4001c0:	46bd      	mov	sp, r7
  4001c2:	bc80      	pop	{r7}
  4001c4:	4770      	bx	lr

004001c6 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4001c6:	b480      	push	{r7}
  4001c8:	b085      	sub	sp, #20
  4001ca:	af00      	add	r7, sp, #0
  4001cc:	60f8      	str	r0, [r7, #12]
  4001ce:	60b9      	str	r1, [r7, #8]
  4001d0:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4001d2:	68bb      	ldr	r3, [r7, #8]
  4001d4:	2b00      	cmp	r3, #0
  4001d6:	d103      	bne.n	4001e0 <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4001d8:	68fb      	ldr	r3, [r7, #12]
  4001da:	2200      	movs	r2, #0
  4001dc:	611a      	str	r2, [r3, #16]
  4001de:	e01c      	b.n	40021a <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4001e0:	68fb      	ldr	r3, [r7, #12]
  4001e2:	691a      	ldr	r2, [r3, #16]
  4001e4:	68bb      	ldr	r3, [r7, #8]
  4001e6:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4001e8:	68bb      	ldr	r3, [r7, #8]
  4001ea:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4001ec:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4001ee:	68bb      	ldr	r3, [r7, #8]
  4001f0:	689b      	ldr	r3, [r3, #8]
  4001f2:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4001f4:	68bb      	ldr	r3, [r7, #8]
  4001f6:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4001f8:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4001fa:	68bb      	ldr	r3, [r7, #8]
  4001fc:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4001fe:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400200:	68bb      	ldr	r3, [r7, #8]
  400202:	691b      	ldr	r3, [r3, #16]
  400204:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400206:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400208:	68bb      	ldr	r3, [r7, #8]
  40020a:	695b      	ldr	r3, [r3, #20]
  40020c:	041b      	lsls	r3, r3, #16
  40020e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400212:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400214:	431a      	orrs	r2, r3
  400216:	68fb      	ldr	r3, [r7, #12]
  400218:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  40021a:	687b      	ldr	r3, [r7, #4]
  40021c:	2b00      	cmp	r3, #0
  40021e:	d103      	bne.n	400228 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  400220:	68fb      	ldr	r3, [r7, #12]
  400222:	2200      	movs	r2, #0
  400224:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400226:	e021      	b.n	40026c <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400228:	68fb      	ldr	r3, [r7, #12]
  40022a:	695a      	ldr	r2, [r3, #20]
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	681b      	ldr	r3, [r3, #0]
  400230:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400234:	687b      	ldr	r3, [r7, #4]
  400236:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400238:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40023a:	687b      	ldr	r3, [r7, #4]
  40023c:	689b      	ldr	r3, [r3, #8]
  40023e:	021b      	lsls	r3, r3, #8
  400240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400244:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400246:	687b      	ldr	r3, [r7, #4]
  400248:	68db      	ldr	r3, [r3, #12]
  40024a:	041b      	lsls	r3, r3, #16
  40024c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400250:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400252:	687b      	ldr	r3, [r7, #4]
  400254:	691b      	ldr	r3, [r3, #16]
  400256:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400258:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40025e:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  400260:	687b      	ldr	r3, [r7, #4]
  400262:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400264:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400266:	431a      	orrs	r2, r3
  400268:	68fb      	ldr	r3, [r7, #12]
  40026a:	615a      	str	r2, [r3, #20]
}
  40026c:	bf00      	nop
  40026e:	3714      	adds	r7, #20
  400270:	46bd      	mov	sp, r7
  400272:	bc80      	pop	{r7}
  400274:	4770      	bx	lr

00400276 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400276:	b480      	push	{r7}
  400278:	b083      	sub	sp, #12
  40027a:	af00      	add	r7, sp, #0
  40027c:	6078      	str	r0, [r7, #4]
  40027e:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  400280:	687b      	ldr	r3, [r7, #4]
  400282:	683a      	ldr	r2, [r7, #0]
  400284:	645a      	str	r2, [r3, #68]	; 0x44
}
  400286:	bf00      	nop
  400288:	370c      	adds	r7, #12
  40028a:	46bd      	mov	sp, r7
  40028c:	bc80      	pop	{r7}
  40028e:	4770      	bx	lr

00400290 <ssc_disable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400290:	b480      	push	{r7}
  400292:	b083      	sub	sp, #12
  400294:	af00      	add	r7, sp, #0
  400296:	6078      	str	r0, [r7, #4]
  400298:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IDR = ul_sources;
  40029a:	687b      	ldr	r3, [r7, #4]
  40029c:	683a      	ldr	r2, [r7, #0]
  40029e:	649a      	str	r2, [r3, #72]	; 0x48
}
  4002a0:	bf00      	nop
  4002a2:	370c      	adds	r7, #12
  4002a4:	46bd      	mov	sp, r7
  4002a6:	bc80      	pop	{r7}
  4002a8:	4770      	bx	lr

004002aa <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  4002aa:	b480      	push	{r7}
  4002ac:	b083      	sub	sp, #12
  4002ae:	af00      	add	r7, sp, #0
  4002b0:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  4002b2:	687b      	ldr	r3, [r7, #4]
  4002b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  4002b6:	4618      	mov	r0, r3
  4002b8:	370c      	adds	r7, #12
  4002ba:	46bd      	mov	sp, r7
  4002bc:	bc80      	pop	{r7}
  4002be:	4770      	bx	lr

004002c0 <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4002c0:	b480      	push	{r7}
  4002c2:	b085      	sub	sp, #20
  4002c4:	af00      	add	r7, sp, #0
  4002c6:	6078      	str	r0, [r7, #4]
  4002c8:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4002ca:	f242 7310 	movw	r3, #10000	; 0x2710
  4002ce:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4002d0:	e006      	b.n	4002e0 <ssc_read+0x20>
		if (!ul_timeout--) {
  4002d2:	68fb      	ldr	r3, [r7, #12]
  4002d4:	1e5a      	subs	r2, r3, #1
  4002d6:	60fa      	str	r2, [r7, #12]
  4002d8:	2b00      	cmp	r3, #0
  4002da:	d101      	bne.n	4002e0 <ssc_read+0x20>
			return SSC_RC_ERROR;
  4002dc:	2301      	movs	r3, #1
  4002de:	e00a      	b.n	4002f6 <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4002e0:	687b      	ldr	r3, [r7, #4]
  4002e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4002e4:	f003 0310 	and.w	r3, r3, #16
  4002e8:	2b00      	cmp	r3, #0
  4002ea:	d0f2      	beq.n	4002d2 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	6a1a      	ldr	r2, [r3, #32]
  4002f0:	683b      	ldr	r3, [r7, #0]
  4002f2:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4002f4:	2300      	movs	r3, #0
}
  4002f6:	4618      	mov	r0, r3
  4002f8:	3714      	adds	r7, #20
  4002fa:	46bd      	mov	sp, r7
  4002fc:	bc80      	pop	{r7}
  4002fe:	4770      	bx	lr

00400300 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400300:	b480      	push	{r7}
  400302:	b087      	sub	sp, #28
  400304:	af00      	add	r7, sp, #0
  400306:	60f8      	str	r0, [r7, #12]
  400308:	60b9      	str	r1, [r7, #8]
  40030a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40030c:	68fa      	ldr	r2, [r7, #12]
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	019b      	lsls	r3, r3, #6
  400312:	4413      	add	r3, r2
  400314:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400316:	697b      	ldr	r3, [r7, #20]
  400318:	2202      	movs	r2, #2
  40031a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40031c:	697b      	ldr	r3, [r7, #20]
  40031e:	f04f 32ff 	mov.w	r2, #4294967295
  400322:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400324:	697b      	ldr	r3, [r7, #20]
  400326:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400328:	697b      	ldr	r3, [r7, #20]
  40032a:	687a      	ldr	r2, [r7, #4]
  40032c:	605a      	str	r2, [r3, #4]
}
  40032e:	bf00      	nop
  400330:	371c      	adds	r7, #28
  400332:	46bd      	mov	sp, r7
  400334:	bc80      	pop	{r7}
  400336:	4770      	bx	lr

00400338 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400338:	b480      	push	{r7}
  40033a:	b083      	sub	sp, #12
  40033c:	af00      	add	r7, sp, #0
  40033e:	6078      	str	r0, [r7, #4]
  400340:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400342:	687a      	ldr	r2, [r7, #4]
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	019b      	lsls	r3, r3, #6
  400348:	4413      	add	r3, r2
  40034a:	2205      	movs	r2, #5
  40034c:	601a      	str	r2, [r3, #0]
}
  40034e:	bf00      	nop
  400350:	370c      	adds	r7, #12
  400352:	46bd      	mov	sp, r7
  400354:	bc80      	pop	{r7}
  400356:	4770      	bx	lr

00400358 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400358:	b480      	push	{r7}
  40035a:	b085      	sub	sp, #20
  40035c:	af00      	add	r7, sp, #0
  40035e:	60f8      	str	r0, [r7, #12]
  400360:	60b9      	str	r1, [r7, #8]
  400362:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400364:	68fa      	ldr	r2, [r7, #12]
  400366:	68bb      	ldr	r3, [r7, #8]
  400368:	019b      	lsls	r3, r3, #6
  40036a:	4413      	add	r3, r2
  40036c:	331c      	adds	r3, #28
  40036e:	687a      	ldr	r2, [r7, #4]
  400370:	601a      	str	r2, [r3, #0]
}
  400372:	bf00      	nop
  400374:	3714      	adds	r7, #20
  400376:	46bd      	mov	sp, r7
  400378:	bc80      	pop	{r7}
  40037a:	4770      	bx	lr

0040037c <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40037c:	b480      	push	{r7}
  40037e:	b087      	sub	sp, #28
  400380:	af00      	add	r7, sp, #0
  400382:	60f8      	str	r0, [r7, #12]
  400384:	60b9      	str	r1, [r7, #8]
  400386:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400388:	68fa      	ldr	r2, [r7, #12]
  40038a:	68bb      	ldr	r3, [r7, #8]
  40038c:	019b      	lsls	r3, r3, #6
  40038e:	4413      	add	r3, r2
  400390:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400392:	697b      	ldr	r3, [r7, #20]
  400394:	687a      	ldr	r2, [r7, #4]
  400396:	625a      	str	r2, [r3, #36]	; 0x24
}
  400398:	bf00      	nop
  40039a:	371c      	adds	r7, #28
  40039c:	46bd      	mov	sp, r7
  40039e:	bc80      	pop	{r7}
  4003a0:	4770      	bx	lr

004003a2 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4003a2:	b480      	push	{r7}
  4003a4:	b085      	sub	sp, #20
  4003a6:	af00      	add	r7, sp, #0
  4003a8:	6078      	str	r0, [r7, #4]
  4003aa:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003ac:	687a      	ldr	r2, [r7, #4]
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	019b      	lsls	r3, r3, #6
  4003b2:	4413      	add	r3, r2
  4003b4:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	6a1b      	ldr	r3, [r3, #32]
}
  4003ba:	4618      	mov	r0, r3
  4003bc:	3714      	adds	r7, #20
  4003be:	46bd      	mov	sp, r7
  4003c0:	bc80      	pop	{r7}
  4003c2:	4770      	bx	lr

004003c4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4003c4:	b480      	push	{r7}
  4003c6:	b08d      	sub	sp, #52	; 0x34
  4003c8:	af00      	add	r7, sp, #0
  4003ca:	60f8      	str	r0, [r7, #12]
  4003cc:	60b9      	str	r1, [r7, #8]
  4003ce:	607a      	str	r2, [r7, #4]
  4003d0:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003d2:	2302      	movs	r3, #2
  4003d4:	613b      	str	r3, [r7, #16]
  4003d6:	2308      	movs	r3, #8
  4003d8:	617b      	str	r3, [r7, #20]
  4003da:	2320      	movs	r3, #32
  4003dc:	61bb      	str	r3, [r7, #24]
  4003de:	2380      	movs	r3, #128	; 0x80
  4003e0:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4003e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4003e4:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4003e6:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4003e8:	2300      	movs	r3, #0
  4003ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  4003ec:	e01a      	b.n	400424 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4003ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4003f0:	009b      	lsls	r3, r3, #2
  4003f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4003f6:	4413      	add	r3, r2
  4003f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4003fc:	68ba      	ldr	r2, [r7, #8]
  4003fe:	fbb2 f3f3 	udiv	r3, r2, r3
  400402:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400404:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400406:	0c1b      	lsrs	r3, r3, #16
  400408:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40040a:	68fa      	ldr	r2, [r7, #12]
  40040c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40040e:	429a      	cmp	r2, r3
  400410:	d901      	bls.n	400416 <tc_find_mck_divisor+0x52>
			return 0;
  400412:	2300      	movs	r3, #0
  400414:	e023      	b.n	40045e <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400416:	68fa      	ldr	r2, [r7, #12]
  400418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40041a:	429a      	cmp	r2, r3
  40041c:	d206      	bcs.n	40042c <tc_find_mck_divisor+0x68>
			ul_index++) {
  40041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400420:	3301      	adds	r3, #1
  400422:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400426:	2b04      	cmp	r3, #4
  400428:	d9e1      	bls.n	4003ee <tc_find_mck_divisor+0x2a>
  40042a:	e000      	b.n	40042e <tc_find_mck_divisor+0x6a>
			break;
  40042c:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40042e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400430:	2b04      	cmp	r3, #4
  400432:	d901      	bls.n	400438 <tc_find_mck_divisor+0x74>
		return 0;
  400434:	2300      	movs	r3, #0
  400436:	e012      	b.n	40045e <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400438:	687b      	ldr	r3, [r7, #4]
  40043a:	2b00      	cmp	r3, #0
  40043c:	d008      	beq.n	400450 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400440:	009b      	lsls	r3, r3, #2
  400442:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400446:	4413      	add	r3, r2
  400448:	f853 2c20 	ldr.w	r2, [r3, #-32]
  40044c:	687b      	ldr	r3, [r7, #4]
  40044e:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400450:	683b      	ldr	r3, [r7, #0]
  400452:	2b00      	cmp	r3, #0
  400454:	d002      	beq.n	40045c <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400456:	683b      	ldr	r3, [r7, #0]
  400458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40045a:	601a      	str	r2, [r3, #0]
	}

	return 1;
  40045c:	2301      	movs	r3, #1
}
  40045e:	4618      	mov	r0, r3
  400460:	3734      	adds	r7, #52	; 0x34
  400462:	46bd      	mov	sp, r7
  400464:	bc80      	pop	{r7}
  400466:	4770      	bx	lr

00400468 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400468:	b480      	push	{r7}
  40046a:	b083      	sub	sp, #12
  40046c:	af00      	add	r7, sp, #0
  40046e:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400470:	687b      	ldr	r3, [r7, #4]
  400472:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400476:	605a      	str	r2, [r3, #4]

}
  400478:	bf00      	nop
  40047a:	370c      	adds	r7, #12
  40047c:	46bd      	mov	sp, r7
  40047e:	bc80      	pop	{r7}
  400480:	4770      	bx	lr
	...

00400484 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400484:	b480      	push	{r7}
  400486:	b083      	sub	sp, #12
  400488:	af00      	add	r7, sp, #0
  40048a:	4603      	mov	r3, r0
  40048c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40048e:	4908      	ldr	r1, [pc, #32]	; (4004b0 <NVIC_EnableIRQ+0x2c>)
  400490:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400494:	095b      	lsrs	r3, r3, #5
  400496:	79fa      	ldrb	r2, [r7, #7]
  400498:	f002 021f 	and.w	r2, r2, #31
  40049c:	2001      	movs	r0, #1
  40049e:	fa00 f202 	lsl.w	r2, r0, r2
  4004a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4004a6:	bf00      	nop
  4004a8:	370c      	adds	r7, #12
  4004aa:	46bd      	mov	sp, r7
  4004ac:	bc80      	pop	{r7}
  4004ae:	4770      	bx	lr
  4004b0:	e000e100 	.word	0xe000e100

004004b4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4004b4:	b480      	push	{r7}
  4004b6:	b083      	sub	sp, #12
  4004b8:	af00      	add	r7, sp, #0
  4004ba:	4603      	mov	r3, r0
  4004bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4004be:	4909      	ldr	r1, [pc, #36]	; (4004e4 <NVIC_DisableIRQ+0x30>)
  4004c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4004c4:	095b      	lsrs	r3, r3, #5
  4004c6:	79fa      	ldrb	r2, [r7, #7]
  4004c8:	f002 021f 	and.w	r2, r2, #31
  4004cc:	2001      	movs	r0, #1
  4004ce:	fa00 f202 	lsl.w	r2, r0, r2
  4004d2:	3320      	adds	r3, #32
  4004d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4004d8:	bf00      	nop
  4004da:	370c      	adds	r7, #12
  4004dc:	46bd      	mov	sp, r7
  4004de:	bc80      	pop	{r7}
  4004e0:	4770      	bx	lr
  4004e2:	bf00      	nop
  4004e4:	e000e100 	.word	0xe000e100

004004e8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4004e8:	b480      	push	{r7}
  4004ea:	b083      	sub	sp, #12
  4004ec:	af00      	add	r7, sp, #0
  4004ee:	4603      	mov	r3, r0
  4004f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4004f2:	4909      	ldr	r1, [pc, #36]	; (400518 <NVIC_ClearPendingIRQ+0x30>)
  4004f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4004f8:	095b      	lsrs	r3, r3, #5
  4004fa:	79fa      	ldrb	r2, [r7, #7]
  4004fc:	f002 021f 	and.w	r2, r2, #31
  400500:	2001      	movs	r0, #1
  400502:	fa00 f202 	lsl.w	r2, r0, r2
  400506:	3360      	adds	r3, #96	; 0x60
  400508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40050c:	bf00      	nop
  40050e:	370c      	adds	r7, #12
  400510:	46bd      	mov	sp, r7
  400512:	bc80      	pop	{r7}
  400514:	4770      	bx	lr
  400516:	bf00      	nop
  400518:	e000e100 	.word	0xe000e100

0040051c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40051c:	b480      	push	{r7}
  40051e:	b083      	sub	sp, #12
  400520:	af00      	add	r7, sp, #0
  400522:	4603      	mov	r3, r0
  400524:	6039      	str	r1, [r7, #0]
  400526:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400528:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40052c:	2b00      	cmp	r3, #0
  40052e:	da0b      	bge.n	400548 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400530:	490d      	ldr	r1, [pc, #52]	; (400568 <NVIC_SetPriority+0x4c>)
  400532:	79fb      	ldrb	r3, [r7, #7]
  400534:	f003 030f 	and.w	r3, r3, #15
  400538:	3b04      	subs	r3, #4
  40053a:	683a      	ldr	r2, [r7, #0]
  40053c:	b2d2      	uxtb	r2, r2
  40053e:	0112      	lsls	r2, r2, #4
  400540:	b2d2      	uxtb	r2, r2
  400542:	440b      	add	r3, r1
  400544:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400546:	e009      	b.n	40055c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400548:	4908      	ldr	r1, [pc, #32]	; (40056c <NVIC_SetPriority+0x50>)
  40054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40054e:	683a      	ldr	r2, [r7, #0]
  400550:	b2d2      	uxtb	r2, r2
  400552:	0112      	lsls	r2, r2, #4
  400554:	b2d2      	uxtb	r2, r2
  400556:	440b      	add	r3, r1
  400558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr
  400566:	bf00      	nop
  400568:	e000ed00 	.word	0xe000ed00
  40056c:	e000e100 	.word	0xe000e100

00400570 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400570:	b480      	push	{r7}
  400572:	b083      	sub	sp, #12
  400574:	af00      	add	r7, sp, #0
  400576:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400578:	687b      	ldr	r3, [r7, #4]
  40057a:	2b07      	cmp	r3, #7
  40057c:	d825      	bhi.n	4005ca <osc_get_rate+0x5a>
  40057e:	a201      	add	r2, pc, #4	; (adr r2, 400584 <osc_get_rate+0x14>)
  400580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400584:	004005a5 	.word	0x004005a5
  400588:	004005ab 	.word	0x004005ab
  40058c:	004005b1 	.word	0x004005b1
  400590:	004005b7 	.word	0x004005b7
  400594:	004005bb 	.word	0x004005bb
  400598:	004005bf 	.word	0x004005bf
  40059c:	004005c3 	.word	0x004005c3
  4005a0:	004005c7 	.word	0x004005c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4005a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4005a8:	e010      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005ae:	e00d      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4005b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005b4:	e00a      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4005b6:	4b08      	ldr	r3, [pc, #32]	; (4005d8 <osc_get_rate+0x68>)
  4005b8:	e008      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4005ba:	4b08      	ldr	r3, [pc, #32]	; (4005dc <osc_get_rate+0x6c>)
  4005bc:	e006      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4005be:	4b08      	ldr	r3, [pc, #32]	; (4005e0 <osc_get_rate+0x70>)
  4005c0:	e004      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4005c2:	4b07      	ldr	r3, [pc, #28]	; (4005e0 <osc_get_rate+0x70>)
  4005c4:	e002      	b.n	4005cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <osc_get_rate+0x70>)
  4005c8:	e000      	b.n	4005cc <osc_get_rate+0x5c>
	}

	return 0;
  4005ca:	2300      	movs	r3, #0
}
  4005cc:	4618      	mov	r0, r3
  4005ce:	370c      	adds	r7, #12
  4005d0:	46bd      	mov	sp, r7
  4005d2:	bc80      	pop	{r7}
  4005d4:	4770      	bx	lr
  4005d6:	bf00      	nop
  4005d8:	003d0900 	.word	0x003d0900
  4005dc:	007a1200 	.word	0x007a1200
  4005e0:	00b71b00 	.word	0x00b71b00

004005e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4005e4:	b580      	push	{r7, lr}
  4005e6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4005e8:	2006      	movs	r0, #6
  4005ea:	4b04      	ldr	r3, [pc, #16]	; (4005fc <sysclk_get_main_hz+0x18>)
  4005ec:	4798      	blx	r3
  4005ee:	4602      	mov	r2, r0
  4005f0:	4613      	mov	r3, r2
  4005f2:	009b      	lsls	r3, r3, #2
  4005f4:	4413      	add	r3, r2
  4005f6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4005f8:	4618      	mov	r0, r3
  4005fa:	bd80      	pop	{r7, pc}
  4005fc:	00400571 	.word	0x00400571

00400600 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400600:	b580      	push	{r7, lr}
  400602:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400604:	4b02      	ldr	r3, [pc, #8]	; (400610 <sysclk_get_cpu_hz+0x10>)
  400606:	4798      	blx	r3
  400608:	4603      	mov	r3, r0
  40060a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40060c:	4618      	mov	r0, r3
  40060e:	bd80      	pop	{r7, pc}
  400610:	004005e5 	.word	0x004005e5

00400614 <i2s_capture>:

/** Receive index. */
volatile uint32_t i2s_buf_index = 0;


void i2s_capture(void){
  400614:	b580      	push	{r7, lr}
  400616:	af00      	add	r7, sp, #0
	
	i2s_rec_done = 0;
  400618:	4b0a      	ldr	r3, [pc, #40]	; (400644 <i2s_capture+0x30>)
  40061a:	2200      	movs	r2, #0
  40061c:	701a      	strb	r2, [r3, #0]
	i2s_buf_index = 0;
  40061e:	4b0a      	ldr	r3, [pc, #40]	; (400648 <i2s_capture+0x34>)
  400620:	2200      	movs	r2, #0
  400622:	601a      	str	r2, [r3, #0]
	
	ssc_enable_interrupt(SSC, SSC_IDR_RXRDY);
  400624:	2110      	movs	r1, #16
  400626:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40062a:	4b08      	ldr	r3, [pc, #32]	; (40064c <i2s_capture+0x38>)
  40062c:	4798      	blx	r3
	
	while (!i2s_rec_done){
  40062e:	bf00      	nop
  400630:	4b04      	ldr	r3, [pc, #16]	; (400644 <i2s_capture+0x30>)
  400632:	781b      	ldrb	r3, [r3, #0]
  400634:	b2db      	uxtb	r3, r3
  400636:	2b00      	cmp	r3, #0
  400638:	d0fa      	beq.n	400630 <i2s_capture+0x1c>
		
	}
	
	blink_LED(100);
  40063a:	2064      	movs	r0, #100	; 0x64
  40063c:	4b04      	ldr	r3, [pc, #16]	; (400650 <i2s_capture+0x3c>)
  40063e:	4798      	blx	r3
	
}
  400640:	bf00      	nop
  400642:	bd80      	pop	{r7, pc}
  400644:	200013f4 	.word	0x200013f4
  400648:	200013f8 	.word	0x200013f8
  40064c:	00400277 	.word	0x00400277
  400650:	00400d79 	.word	0x00400d79

00400654 <SSC_Handler>:
/**
 * \brief Synchronous Serial Controller Handler.
 *
 */
void SSC_Handler(void)
{
  400654:	b580      	push	{r7, lr}
  400656:	b082      	sub	sp, #8
  400658:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40065a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40065e:	4b11      	ldr	r3, [pc, #68]	; (4006a4 <SSC_Handler+0x50>)
  400660:	4798      	blx	r3

	ssc_read(SSC, &ul_data);
  400662:	1d3b      	adds	r3, r7, #4
  400664:	4619      	mov	r1, r3
  400666:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <SSC_Handler+0x54>)
  40066c:	4798      	blx	r3
	i2s_rec_buf[i2s_buf_index++] = ul_data;
  40066e:	4b0f      	ldr	r3, [pc, #60]	; (4006ac <SSC_Handler+0x58>)
  400670:	681b      	ldr	r3, [r3, #0]
  400672:	1c5a      	adds	r2, r3, #1
  400674:	490d      	ldr	r1, [pc, #52]	; (4006ac <SSC_Handler+0x58>)
  400676:	600a      	str	r2, [r1, #0]
  400678:	687a      	ldr	r2, [r7, #4]
  40067a:	490d      	ldr	r1, [pc, #52]	; (4006b0 <SSC_Handler+0x5c>)
  40067c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (NUMBER_OF_SAMPLES == i2s_buf_index) {
  400680:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <SSC_Handler+0x58>)
  400682:	681b      	ldr	r3, [r3, #0]
  400684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400688:	d107      	bne.n	40069a <SSC_Handler+0x46>
		i2s_rec_done = 1;
  40068a:	4b0a      	ldr	r3, [pc, #40]	; (4006b4 <SSC_Handler+0x60>)
  40068c:	2201      	movs	r2, #1
  40068e:	701a      	strb	r2, [r3, #0]
		ssc_disable_interrupt(SSC, SSC_IDR_RXRDY);
  400690:	2110      	movs	r1, #16
  400692:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400696:	4b08      	ldr	r3, [pc, #32]	; (4006b8 <SSC_Handler+0x64>)
  400698:	4798      	blx	r3
	}
}
  40069a:	bf00      	nop
  40069c:	3708      	adds	r7, #8
  40069e:	46bd      	mov	sp, r7
  4006a0:	bd80      	pop	{r7, pc}
  4006a2:	bf00      	nop
  4006a4:	004002ab 	.word	0x004002ab
  4006a8:	004002c1 	.word	0x004002c1
  4006ac:	200013f8 	.word	0x200013f8
  4006b0:	20000454 	.word	0x20000454
  4006b4:	200013f4 	.word	0x200013f4
  4006b8:	00400291 	.word	0x00400291

004006bc <configure_i2s>:


void configure_i2s(void){
  4006bc:	b580      	push	{r7, lr}
  4006be:	b082      	sub	sp, #8
  4006c0:	af00      	add	r7, sp, #0
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4006c2:	2016      	movs	r0, #22
  4006c4:	4b15      	ldr	r3, [pc, #84]	; (40071c <configure_i2s+0x60>)
  4006c6:	4798      	blx	r3
	ssc_reset(SSC);
  4006c8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4006cc:	4b14      	ldr	r3, [pc, #80]	; (400720 <configure_i2s+0x64>)
  4006ce:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4006d0:	4b14      	ldr	r3, [pc, #80]	; (400724 <configure_i2s+0x68>)
  4006d2:	4798      	blx	r3
  4006d4:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES){
  4006d6:	687a      	ldr	r2, [r7, #4]
  4006d8:	f44f 217a 	mov.w	r1, #1024000	; 0xfa000
  4006dc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4006e0:	4b11      	ldr	r3, [pc, #68]	; (400728 <configure_i2s+0x6c>)
  4006e2:	4798      	blx	r3
  4006e4:	4603      	mov	r3, r0
  4006e6:	2b00      	cmp	r3, #0
  4006e8:	d113      	bne.n	400712 <configure_i2s+0x56>
		return 1;
	}
	
	// is2 setup
	//ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_STERO, 32);
	set_receiver();
  4006ea:	4b10      	ldr	r3, [pc, #64]	; (40072c <configure_i2s+0x70>)
  4006ec:	4798      	blx	r3

	/* Enable the tx and rx function. */
	ssc_enable_rx(SSC);
  4006ee:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4006f2:	4b0f      	ldr	r3, [pc, #60]	; (400730 <configure_i2s+0x74>)
  4006f4:	4798      	blx	r3

	/* Configure the RX interrupt. */
	//ssc_enable_interrupt(SSC, SSC_IER_RXRDY);

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  4006f6:	2016      	movs	r0, #22
  4006f8:	4b0e      	ldr	r3, [pc, #56]	; (400734 <configure_i2s+0x78>)
  4006fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  4006fc:	2016      	movs	r0, #22
  4006fe:	4b0e      	ldr	r3, [pc, #56]	; (400738 <configure_i2s+0x7c>)
  400700:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  400702:	2104      	movs	r1, #4
  400704:	2016      	movs	r0, #22
  400706:	4b0d      	ldr	r3, [pc, #52]	; (40073c <configure_i2s+0x80>)
  400708:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  40070a:	2016      	movs	r0, #22
  40070c:	4b0c      	ldr	r3, [pc, #48]	; (400740 <configure_i2s+0x84>)
  40070e:	4798      	blx	r3
  400710:	e000      	b.n	400714 <configure_i2s+0x58>
		return 1;
  400712:	bf00      	nop

}
  400714:	3708      	adds	r7, #8
  400716:	46bd      	mov	sp, r7
  400718:	bd80      	pop	{r7, pc}
  40071a:	bf00      	nop
  40071c:	00401a01 	.word	0x00401a01
  400720:	00400177 	.word	0x00400177
  400724:	00400601 	.word	0x00400601
  400728:	00400139 	.word	0x00400139
  40072c:	00400745 	.word	0x00400745
  400730:	004001af 	.word	0x004001af
  400734:	004004b5 	.word	0x004004b5
  400738:	004004e9 	.word	0x004004e9
  40073c:	0040051d 	.word	0x0040051d
  400740:	00400485 	.word	0x00400485

00400744 <set_receiver>:
 * \param ul_mode Working mode, SSC_I2S_MASTER_IN or SSC_I2S_SLAVE_IN.
 * \param ul_cks Source clock selection while working in SSC_I2S_SLAVE_IN mode.
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void set_receiver() {
  400744:	b580      	push	{r7, lr}
  400746:	b08e      	sub	sp, #56	; 0x38
  400748:	af00      	add	r7, sp, #0
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;
	/* Receiver clock mode configuration. */
	
	// TCMR?
	rx_clk_option.ul_cks = SSC_RCMR_CKS_RK;
  40074a:	2302      	movs	r3, #2
  40074c:	61fb      	str	r3, [r7, #28]
	rx_clk_option.ul_cko = SSC_RCMR_CKO_NONE;
  40074e:	2300      	movs	r3, #0
  400750:	623b      	str	r3, [r7, #32]
	rx_clk_option.ul_cki = 0;
  400752:	2300      	movs	r3, #0
  400754:	627b      	str	r3, [r7, #36]	; 0x24
	rx_clk_option.ul_ckg = 0;
  400756:	2300      	movs	r3, #0
  400758:	62bb      	str	r3, [r7, #40]	; 0x28
	rx_clk_option.ul_period = 0;
  40075a:	2300      	movs	r3, #0
  40075c:	62fb      	str	r3, [r7, #44]	; 0x2c
	rx_clk_option.ul_sttdly = 0;
  40075e:	2300      	movs	r3, #0
  400760:	633b      	str	r3, [r7, #48]	; 0x30
	
	// test falling vs rising here
	rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  400762:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  400766:	637b      	str	r3, [r7, #52]	; 0x34
	//rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
	
	/* Receiver frame mode configuration. */
	// 23? we have 24 data bits
	rx_data_frame_option.ul_datlen = 23;
  400768:	2317      	movs	r3, #23
  40076a:	603b      	str	r3, [r7, #0]
	
	rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  40076c:	2380      	movs	r3, #128	; 0x80
  40076e:	607b      	str	r3, [r7, #4]
	
	// why 15? try as 0 and 1
	rx_data_frame_option.ul_datnb = 1;
  400770:	2301      	movs	r3, #1
  400772:	60bb      	str	r3, [r7, #8]
	
	rx_data_frame_option.ul_fslen = 15;
  400774:	230f      	movs	r3, #15
  400776:	60fb      	str	r3, [r7, #12]
	rx_data_frame_option.ul_fslen_ext = 1;
  400778:	2301      	movs	r3, #1
  40077a:	613b      	str	r3, [r7, #16]
	
	rx_data_frame_option.ul_fsos = SSC_RFMR_FSOS_TOGGLING;
  40077c:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
  400780:	617b      	str	r3, [r7, #20]
	rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400782:	2300      	movs	r3, #0
  400784:	61bb      	str	r3, [r7, #24]
	/* Configure the SSC receiver. */
	ssc_set_receiver(SSC, &rx_clk_option, &rx_data_frame_option);
  400786:	463a      	mov	r2, r7
  400788:	f107 031c 	add.w	r3, r7, #28
  40078c:	4619      	mov	r1, r3
  40078e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400792:	4b03      	ldr	r3, [pc, #12]	; (4007a0 <set_receiver+0x5c>)
  400794:	4798      	blx	r3
	
}
  400796:	bf00      	nop
  400798:	3738      	adds	r7, #56	; 0x38
  40079a:	46bd      	mov	sp, r7
  40079c:	bd80      	pop	{r7, pc}
  40079e:	bf00      	nop
  4007a0:	004001c7 	.word	0x004001c7

004007a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4007a4:	b580      	push	{r7, lr}
  4007a6:	b084      	sub	sp, #16
  4007a8:	af00      	add	r7, sp, #0
  4007aa:	6078      	str	r0, [r7, #4]
  4007ac:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4007ae:	6878      	ldr	r0, [r7, #4]
  4007b0:	4b2c      	ldr	r3, [pc, #176]	; (400864 <pio_handler_process+0xc0>)
  4007b2:	4798      	blx	r3
  4007b4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4007b6:	6878      	ldr	r0, [r7, #4]
  4007b8:	4b2b      	ldr	r3, [pc, #172]	; (400868 <pio_handler_process+0xc4>)
  4007ba:	4798      	blx	r3
  4007bc:	4602      	mov	r2, r0
  4007be:	68fb      	ldr	r3, [r7, #12]
  4007c0:	4013      	ands	r3, r2
  4007c2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	2b00      	cmp	r3, #0
  4007c8:	d03c      	beq.n	400844 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4007ca:	2300      	movs	r3, #0
  4007cc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4007ce:	e034      	b.n	40083a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4007d0:	4a26      	ldr	r2, [pc, #152]	; (40086c <pio_handler_process+0xc8>)
  4007d2:	68bb      	ldr	r3, [r7, #8]
  4007d4:	011b      	lsls	r3, r3, #4
  4007d6:	4413      	add	r3, r2
  4007d8:	681a      	ldr	r2, [r3, #0]
  4007da:	683b      	ldr	r3, [r7, #0]
  4007dc:	429a      	cmp	r2, r3
  4007de:	d126      	bne.n	40082e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007e0:	4a22      	ldr	r2, [pc, #136]	; (40086c <pio_handler_process+0xc8>)
  4007e2:	68bb      	ldr	r3, [r7, #8]
  4007e4:	011b      	lsls	r3, r3, #4
  4007e6:	4413      	add	r3, r2
  4007e8:	3304      	adds	r3, #4
  4007ea:	681a      	ldr	r2, [r3, #0]
  4007ec:	68fb      	ldr	r3, [r7, #12]
  4007ee:	4013      	ands	r3, r2
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	d01c      	beq.n	40082e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007f4:	4a1d      	ldr	r2, [pc, #116]	; (40086c <pio_handler_process+0xc8>)
  4007f6:	68bb      	ldr	r3, [r7, #8]
  4007f8:	011b      	lsls	r3, r3, #4
  4007fa:	4413      	add	r3, r2
  4007fc:	330c      	adds	r3, #12
  4007fe:	681b      	ldr	r3, [r3, #0]
  400800:	491a      	ldr	r1, [pc, #104]	; (40086c <pio_handler_process+0xc8>)
  400802:	68ba      	ldr	r2, [r7, #8]
  400804:	0112      	lsls	r2, r2, #4
  400806:	440a      	add	r2, r1
  400808:	6810      	ldr	r0, [r2, #0]
  40080a:	4918      	ldr	r1, [pc, #96]	; (40086c <pio_handler_process+0xc8>)
  40080c:	68ba      	ldr	r2, [r7, #8]
  40080e:	0112      	lsls	r2, r2, #4
  400810:	440a      	add	r2, r1
  400812:	3204      	adds	r2, #4
  400814:	6812      	ldr	r2, [r2, #0]
  400816:	4611      	mov	r1, r2
  400818:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40081a:	4a14      	ldr	r2, [pc, #80]	; (40086c <pio_handler_process+0xc8>)
  40081c:	68bb      	ldr	r3, [r7, #8]
  40081e:	011b      	lsls	r3, r3, #4
  400820:	4413      	add	r3, r2
  400822:	3304      	adds	r3, #4
  400824:	681b      	ldr	r3, [r3, #0]
  400826:	43db      	mvns	r3, r3
  400828:	68fa      	ldr	r2, [r7, #12]
  40082a:	4013      	ands	r3, r2
  40082c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40082e:	68bb      	ldr	r3, [r7, #8]
  400830:	3301      	adds	r3, #1
  400832:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400834:	68bb      	ldr	r3, [r7, #8]
  400836:	2b06      	cmp	r3, #6
  400838:	d803      	bhi.n	400842 <pio_handler_process+0x9e>
		while (status != 0) {
  40083a:	68fb      	ldr	r3, [r7, #12]
  40083c:	2b00      	cmp	r3, #0
  40083e:	d1c7      	bne.n	4007d0 <pio_handler_process+0x2c>
  400840:	e000      	b.n	400844 <pio_handler_process+0xa0>
				break;
  400842:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400844:	4b0a      	ldr	r3, [pc, #40]	; (400870 <pio_handler_process+0xcc>)
  400846:	681b      	ldr	r3, [r3, #0]
  400848:	2b00      	cmp	r3, #0
  40084a:	d007      	beq.n	40085c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40084c:	4b09      	ldr	r3, [pc, #36]	; (400874 <pio_handler_process+0xd0>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	2b00      	cmp	r3, #0
  400852:	d003      	beq.n	40085c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400854:	4b07      	ldr	r3, [pc, #28]	; (400874 <pio_handler_process+0xd0>)
  400856:	681b      	ldr	r3, [r3, #0]
  400858:	6878      	ldr	r0, [r7, #4]
  40085a:	4798      	blx	r3
		}
	}
#endif
}
  40085c:	bf00      	nop
  40085e:	3710      	adds	r7, #16
  400860:	46bd      	mov	sp, r7
  400862:	bd80      	pop	{r7, pc}
  400864:	004015b3 	.word	0x004015b3
  400868:	004015c9 	.word	0x004015c9
  40086c:	200013fc 	.word	0x200013fc
  400870:	2000167c 	.word	0x2000167c
  400874:	2000146c 	.word	0x2000146c

00400878 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400878:	b580      	push	{r7, lr}
  40087a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40087c:	210b      	movs	r1, #11
  40087e:	4802      	ldr	r0, [pc, #8]	; (400888 <PIOA_Handler+0x10>)
  400880:	4b02      	ldr	r3, [pc, #8]	; (40088c <PIOA_Handler+0x14>)
  400882:	4798      	blx	r3
}
  400884:	bf00      	nop
  400886:	bd80      	pop	{r7, pc}
  400888:	400e0e00 	.word	0x400e0e00
  40088c:	004007a5 	.word	0x004007a5

00400890 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400890:	b580      	push	{r7, lr}
  400892:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400894:	210c      	movs	r1, #12
  400896:	4802      	ldr	r0, [pc, #8]	; (4008a0 <PIOB_Handler+0x10>)
  400898:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <PIOB_Handler+0x14>)
  40089a:	4798      	blx	r3
}
  40089c:	bf00      	nop
  40089e:	bd80      	pop	{r7, pc}
  4008a0:	400e1000 	.word	0x400e1000
  4008a4:	004007a5 	.word	0x004007a5

004008a8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4008a8:	b480      	push	{r7}
  4008aa:	b083      	sub	sp, #12
  4008ac:	af00      	add	r7, sp, #0
  4008ae:	6078      	str	r0, [r7, #4]
  4008b0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4008b2:	687b      	ldr	r3, [r7, #4]
  4008b4:	683a      	ldr	r2, [r7, #0]
  4008b6:	609a      	str	r2, [r3, #8]
}
  4008b8:	bf00      	nop
  4008ba:	370c      	adds	r7, #12
  4008bc:	46bd      	mov	sp, r7
  4008be:	bc80      	pop	{r7}
  4008c0:	4770      	bx	lr

004008c2 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4008c2:	b480      	push	{r7}
  4008c4:	b083      	sub	sp, #12
  4008c6:	af00      	add	r7, sp, #0
  4008c8:	6078      	str	r0, [r7, #4]
  4008ca:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4008cc:	687b      	ldr	r3, [r7, #4]
  4008ce:	683a      	ldr	r2, [r7, #0]
  4008d0:	60da      	str	r2, [r3, #12]
}
  4008d2:	bf00      	nop
  4008d4:	370c      	adds	r7, #12
  4008d6:	46bd      	mov	sp, r7
  4008d8:	bc80      	pop	{r7}
  4008da:	4770      	bx	lr

004008dc <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  4008dc:	b480      	push	{r7}
  4008de:	b083      	sub	sp, #12
  4008e0:	af00      	add	r7, sp, #0
  4008e2:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  4008e4:	687b      	ldr	r3, [r7, #4]
  4008e6:	695b      	ldr	r3, [r3, #20]
}
  4008e8:	4618      	mov	r0, r3
  4008ea:	370c      	adds	r7, #12
  4008ec:	46bd      	mov	sp, r7
  4008ee:	bc80      	pop	{r7}
  4008f0:	4770      	bx	lr

004008f2 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  4008f2:	b480      	push	{r7}
  4008f4:	b083      	sub	sp, #12
  4008f6:	af00      	add	r7, sp, #0
  4008f8:	6078      	str	r0, [r7, #4]
  4008fa:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4008fc:	bf00      	nop
  4008fe:	687b      	ldr	r3, [r7, #4]
  400900:	695b      	ldr	r3, [r3, #20]
  400902:	f003 0302 	and.w	r3, r3, #2
  400906:	2b00      	cmp	r3, #0
  400908:	d0f9      	beq.n	4008fe <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40090a:	683b      	ldr	r3, [r7, #0]
  40090c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400910:	687b      	ldr	r3, [r7, #4]
  400912:	61da      	str	r2, [r3, #28]

	return 0;
  400914:	2300      	movs	r3, #0
}
  400916:	4618      	mov	r0, r3
  400918:	370c      	adds	r7, #12
  40091a:	46bd      	mov	sp, r7
  40091c:	bc80      	pop	{r7}
  40091e:	4770      	bx	lr

00400920 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400920:	b580      	push	{r7, lr}
  400922:	b082      	sub	sp, #8
  400924:	af00      	add	r7, sp, #0
  400926:	6078      	str	r0, [r7, #4]
  400928:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  40092a:	e007      	b.n	40093c <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  40092c:	683b      	ldr	r3, [r7, #0]
  40092e:	1c5a      	adds	r2, r3, #1
  400930:	603a      	str	r2, [r7, #0]
  400932:	781b      	ldrb	r3, [r3, #0]
  400934:	4619      	mov	r1, r3
  400936:	6878      	ldr	r0, [r7, #4]
  400938:	4b04      	ldr	r3, [pc, #16]	; (40094c <usart_write_line+0x2c>)
  40093a:	4798      	blx	r3
	while (*string != '\0') {
  40093c:	683b      	ldr	r3, [r7, #0]
  40093e:	781b      	ldrb	r3, [r3, #0]
  400940:	2b00      	cmp	r3, #0
  400942:	d1f3      	bne.n	40092c <usart_write_line+0xc>
	}
}
  400944:	bf00      	nop
  400946:	3708      	adds	r7, #8
  400948:	46bd      	mov	sp, r7
  40094a:	bd80      	pop	{r7, pc}
  40094c:	004008f3 	.word	0x004008f3

00400950 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400950:	b480      	push	{r7}
  400952:	b083      	sub	sp, #12
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
  400958:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	695b      	ldr	r3, [r3, #20]
  40095e:	f003 0301 	and.w	r3, r3, #1
  400962:	2b00      	cmp	r3, #0
  400964:	d101      	bne.n	40096a <usart_read+0x1a>
		return 1;
  400966:	2301      	movs	r3, #1
  400968:	e006      	b.n	400978 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40096a:	687b      	ldr	r3, [r7, #4]
  40096c:	699b      	ldr	r3, [r3, #24]
  40096e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400972:	683b      	ldr	r3, [r7, #0]
  400974:	601a      	str	r2, [r3, #0]

	return 0;
  400976:	2300      	movs	r3, #0
}
  400978:	4618      	mov	r0, r3
  40097a:	370c      	adds	r7, #12
  40097c:	46bd      	mov	sp, r7
  40097e:	bc80      	pop	{r7}
  400980:	4770      	bx	lr
	...

00400984 <NVIC_EnableIRQ>:
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	4603      	mov	r3, r0
  40098c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40098e:	4908      	ldr	r1, [pc, #32]	; (4009b0 <NVIC_EnableIRQ+0x2c>)
  400990:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400994:	095b      	lsrs	r3, r3, #5
  400996:	79fa      	ldrb	r2, [r7, #7]
  400998:	f002 021f 	and.w	r2, r2, #31
  40099c:	2001      	movs	r0, #1
  40099e:	fa00 f202 	lsl.w	r2, r0, r2
  4009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4009a6:	bf00      	nop
  4009a8:	370c      	adds	r7, #12
  4009aa:	46bd      	mov	sp, r7
  4009ac:	bc80      	pop	{r7}
  4009ae:	4770      	bx	lr
  4009b0:	e000e100 	.word	0xe000e100

004009b4 <osc_get_rate>:
{
  4009b4:	b480      	push	{r7}
  4009b6:	b083      	sub	sp, #12
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4009bc:	687b      	ldr	r3, [r7, #4]
  4009be:	2b07      	cmp	r3, #7
  4009c0:	d825      	bhi.n	400a0e <osc_get_rate+0x5a>
  4009c2:	a201      	add	r2, pc, #4	; (adr r2, 4009c8 <osc_get_rate+0x14>)
  4009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4009c8:	004009e9 	.word	0x004009e9
  4009cc:	004009ef 	.word	0x004009ef
  4009d0:	004009f5 	.word	0x004009f5
  4009d4:	004009fb 	.word	0x004009fb
  4009d8:	004009ff 	.word	0x004009ff
  4009dc:	00400a03 	.word	0x00400a03
  4009e0:	00400a07 	.word	0x00400a07
  4009e4:	00400a0b 	.word	0x00400a0b
		return OSC_SLCK_32K_RC_HZ;
  4009e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4009ec:	e010      	b.n	400a10 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4009ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009f2:	e00d      	b.n	400a10 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4009f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009f8:	e00a      	b.n	400a10 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4009fa:	4b08      	ldr	r3, [pc, #32]	; (400a1c <osc_get_rate+0x68>)
  4009fc:	e008      	b.n	400a10 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4009fe:	4b08      	ldr	r3, [pc, #32]	; (400a20 <osc_get_rate+0x6c>)
  400a00:	e006      	b.n	400a10 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400a02:	4b08      	ldr	r3, [pc, #32]	; (400a24 <osc_get_rate+0x70>)
  400a04:	e004      	b.n	400a10 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <osc_get_rate+0x70>)
  400a08:	e002      	b.n	400a10 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400a0a:	4b06      	ldr	r3, [pc, #24]	; (400a24 <osc_get_rate+0x70>)
  400a0c:	e000      	b.n	400a10 <osc_get_rate+0x5c>
	return 0;
  400a0e:	2300      	movs	r3, #0
}
  400a10:	4618      	mov	r0, r3
  400a12:	370c      	adds	r7, #12
  400a14:	46bd      	mov	sp, r7
  400a16:	bc80      	pop	{r7}
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	003d0900 	.word	0x003d0900
  400a20:	007a1200 	.word	0x007a1200
  400a24:	00b71b00 	.word	0x00b71b00

00400a28 <sysclk_get_main_hz>:
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400a2c:	2006      	movs	r0, #6
  400a2e:	4b04      	ldr	r3, [pc, #16]	; (400a40 <sysclk_get_main_hz+0x18>)
  400a30:	4798      	blx	r3
  400a32:	4602      	mov	r2, r0
  400a34:	4613      	mov	r3, r2
  400a36:	009b      	lsls	r3, r3, #2
  400a38:	4413      	add	r3, r2
  400a3a:	009b      	lsls	r3, r3, #2
}
  400a3c:	4618      	mov	r0, r3
  400a3e:	bd80      	pop	{r7, pc}
  400a40:	004009b5 	.word	0x004009b5

00400a44 <sysclk_get_cpu_hz>:
{
  400a44:	b580      	push	{r7, lr}
  400a46:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400a48:	4b02      	ldr	r3, [pc, #8]	; (400a54 <sysclk_get_cpu_hz+0x10>)
  400a4a:	4798      	blx	r3
  400a4c:	4603      	mov	r3, r0
  400a4e:	085b      	lsrs	r3, r3, #1
}
  400a50:	4618      	mov	r0, r3
  400a52:	bd80      	pop	{r7, pc}
  400a54:	00400a29 	.word	0x00400a29

00400a58 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400a58:	b580      	push	{r7, lr}
  400a5a:	b082      	sub	sp, #8
  400a5c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400a5e:	2100      	movs	r1, #0
  400a60:	4809      	ldr	r0, [pc, #36]	; (400a88 <TC0_Handler+0x30>)
  400a62:	4b0a      	ldr	r3, [pc, #40]	; (400a8c <TC0_Handler+0x34>)
  400a64:	4798      	blx	r3
  400a66:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400a68:	687b      	ldr	r3, [r7, #4]
  400a6a:	f003 0310 	and.w	r3, r3, #16
  400a6e:	2b00      	cmp	r3, #0
  400a70:	d006      	beq.n	400a80 <TC0_Handler+0x28>
		counts++;
  400a72:	4b07      	ldr	r3, [pc, #28]	; (400a90 <TC0_Handler+0x38>)
  400a74:	781b      	ldrb	r3, [r3, #0]
  400a76:	b2db      	uxtb	r3, r3
  400a78:	3301      	adds	r3, #1
  400a7a:	b2da      	uxtb	r2, r3
  400a7c:	4b04      	ldr	r3, [pc, #16]	; (400a90 <TC0_Handler+0x38>)
  400a7e:	701a      	strb	r2, [r3, #0]
	}
}
  400a80:	bf00      	nop
  400a82:	3708      	adds	r7, #8
  400a84:	46bd      	mov	sp, r7
  400a86:	bd80      	pop	{r7, pc}
  400a88:	40010000 	.word	0x40010000
  400a8c:	004003a3 	.word	0x004003a3
  400a90:	20001678 	.word	0x20001678

00400a94 <configure_tc>:

void configure_tc(void)
{
  400a94:	b590      	push	{r4, r7, lr}
  400a96:	b087      	sub	sp, #28
  400a98:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400a9a:	4b16      	ldr	r3, [pc, #88]	; (400af4 <configure_tc+0x60>)
  400a9c:	4798      	blx	r3
  400a9e:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400aa0:	2017      	movs	r0, #23
  400aa2:	4b15      	ldr	r3, [pc, #84]	; (400af8 <configure_tc+0x64>)
  400aa4:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400aa6:	1d39      	adds	r1, r7, #4
  400aa8:	f107 0208 	add.w	r2, r7, #8
  400aac:	68fb      	ldr	r3, [r7, #12]
  400aae:	9300      	str	r3, [sp, #0]
  400ab0:	460b      	mov	r3, r1
  400ab2:	68f9      	ldr	r1, [r7, #12]
  400ab4:	2001      	movs	r0, #1
  400ab6:	4c11      	ldr	r4, [pc, #68]	; (400afc <configure_tc+0x68>)
  400ab8:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400aba:	687b      	ldr	r3, [r7, #4]
  400abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400ac0:	461a      	mov	r2, r3
  400ac2:	2100      	movs	r1, #0
  400ac4:	480e      	ldr	r0, [pc, #56]	; (400b00 <configure_tc+0x6c>)
  400ac6:	4b0f      	ldr	r3, [pc, #60]	; (400b04 <configure_tc+0x70>)
  400ac8:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400aca:	68bb      	ldr	r3, [r7, #8]
  400acc:	68fa      	ldr	r2, [r7, #12]
  400ace:	fbb2 f3f3 	udiv	r3, r2, r3
  400ad2:	461a      	mov	r2, r3
  400ad4:	2100      	movs	r1, #0
  400ad6:	480a      	ldr	r0, [pc, #40]	; (400b00 <configure_tc+0x6c>)
  400ad8:	4b0b      	ldr	r3, [pc, #44]	; (400b08 <configure_tc+0x74>)
  400ada:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400adc:	2017      	movs	r0, #23
  400ade:	4b0b      	ldr	r3, [pc, #44]	; (400b0c <configure_tc+0x78>)
  400ae0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400ae2:	2210      	movs	r2, #16
  400ae4:	2100      	movs	r1, #0
  400ae6:	4806      	ldr	r0, [pc, #24]	; (400b00 <configure_tc+0x6c>)
  400ae8:	4b09      	ldr	r3, [pc, #36]	; (400b10 <configure_tc+0x7c>)
  400aea:	4798      	blx	r3
  400aec:	bf00      	nop
  400aee:	3714      	adds	r7, #20
  400af0:	46bd      	mov	sp, r7
  400af2:	bd90      	pop	{r4, r7, pc}
  400af4:	00400a45 	.word	0x00400a45
  400af8:	00401a01 	.word	0x00401a01
  400afc:	004003c5 	.word	0x004003c5
  400b00:	40010000 	.word	0x40010000
  400b04:	00400301 	.word	0x00400301
  400b08:	00400359 	.word	0x00400359
  400b0c:	00400985 	.word	0x00400985
  400b10:	0040037d 	.word	0x0040037d

00400b14 <osc_get_rate>:
{
  400b14:	b480      	push	{r7}
  400b16:	b083      	sub	sp, #12
  400b18:	af00      	add	r7, sp, #0
  400b1a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b1c:	687b      	ldr	r3, [r7, #4]
  400b1e:	2b07      	cmp	r3, #7
  400b20:	d825      	bhi.n	400b6e <osc_get_rate+0x5a>
  400b22:	a201      	add	r2, pc, #4	; (adr r2, 400b28 <osc_get_rate+0x14>)
  400b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b28:	00400b49 	.word	0x00400b49
  400b2c:	00400b4f 	.word	0x00400b4f
  400b30:	00400b55 	.word	0x00400b55
  400b34:	00400b5b 	.word	0x00400b5b
  400b38:	00400b5f 	.word	0x00400b5f
  400b3c:	00400b63 	.word	0x00400b63
  400b40:	00400b67 	.word	0x00400b67
  400b44:	00400b6b 	.word	0x00400b6b
		return OSC_SLCK_32K_RC_HZ;
  400b48:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400b4c:	e010      	b.n	400b70 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b52:	e00d      	b.n	400b70 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b58:	e00a      	b.n	400b70 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400b5a:	4b08      	ldr	r3, [pc, #32]	; (400b7c <osc_get_rate+0x68>)
  400b5c:	e008      	b.n	400b70 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400b5e:	4b08      	ldr	r3, [pc, #32]	; (400b80 <osc_get_rate+0x6c>)
  400b60:	e006      	b.n	400b70 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400b62:	4b08      	ldr	r3, [pc, #32]	; (400b84 <osc_get_rate+0x70>)
  400b64:	e004      	b.n	400b70 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400b66:	4b07      	ldr	r3, [pc, #28]	; (400b84 <osc_get_rate+0x70>)
  400b68:	e002      	b.n	400b70 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400b6a:	4b06      	ldr	r3, [pc, #24]	; (400b84 <osc_get_rate+0x70>)
  400b6c:	e000      	b.n	400b70 <osc_get_rate+0x5c>
	return 0;
  400b6e:	2300      	movs	r3, #0
}
  400b70:	4618      	mov	r0, r3
  400b72:	370c      	adds	r7, #12
  400b74:	46bd      	mov	sp, r7
  400b76:	bc80      	pop	{r7}
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop
  400b7c:	003d0900 	.word	0x003d0900
  400b80:	007a1200 	.word	0x007a1200
  400b84:	00b71b00 	.word	0x00b71b00

00400b88 <sysclk_get_main_hz>:
{
  400b88:	b580      	push	{r7, lr}
  400b8a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400b8c:	2006      	movs	r0, #6
  400b8e:	4b04      	ldr	r3, [pc, #16]	; (400ba0 <sysclk_get_main_hz+0x18>)
  400b90:	4798      	blx	r3
  400b92:	4602      	mov	r2, r0
  400b94:	4613      	mov	r3, r2
  400b96:	009b      	lsls	r3, r3, #2
  400b98:	4413      	add	r3, r2
  400b9a:	009b      	lsls	r3, r3, #2
}
  400b9c:	4618      	mov	r0, r3
  400b9e:	bd80      	pop	{r7, pc}
  400ba0:	00400b15 	.word	0x00400b15

00400ba4 <sysclk_get_cpu_hz>:
{
  400ba4:	b580      	push	{r7, lr}
  400ba6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400ba8:	4b02      	ldr	r3, [pc, #8]	; (400bb4 <sysclk_get_cpu_hz+0x10>)
  400baa:	4798      	blx	r3
  400bac:	4603      	mov	r3, r0
  400bae:	085b      	lsrs	r3, r3, #1
}
  400bb0:	4618      	mov	r0, r3
  400bb2:	bd80      	pop	{r7, pc}
  400bb4:	00400b89 	.word	0x00400b89

00400bb8 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400bb8:	b480      	push	{r7}
  400bba:	b08b      	sub	sp, #44	; 0x2c
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	627b      	str	r3, [r7, #36]	; 0x24
  400bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bc6:	623b      	str	r3, [r7, #32]
  400bc8:	6a3b      	ldr	r3, [r7, #32]
  400bca:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400bcc:	69fb      	ldr	r3, [r7, #28]
  400bce:	095b      	lsrs	r3, r3, #5
  400bd0:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400bd2:	69bb      	ldr	r3, [r7, #24]
  400bd4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400bd8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400bdc:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  400bde:	617b      	str	r3, [r7, #20]
  400be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400be2:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400be4:	693b      	ldr	r3, [r7, #16]
  400be6:	f003 031f 	and.w	r3, r3, #31
  400bea:	2201      	movs	r2, #1
  400bec:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  400bf0:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400bf2:	697b      	ldr	r3, [r7, #20]
  400bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400bf8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400bfa:	68bb      	ldr	r3, [r7, #8]
  400bfc:	f003 031f 	and.w	r3, r3, #31
  400c00:	2101      	movs	r1, #1
  400c02:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400c06:	4013      	ands	r3, r2
  400c08:	2b00      	cmp	r3, #0
  400c0a:	d003      	beq.n	400c14 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  400c0c:	697b      	ldr	r3, [r7, #20]
  400c0e:	68fa      	ldr	r2, [r7, #12]
  400c10:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  400c12:	e002      	b.n	400c1a <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  400c14:	697b      	ldr	r3, [r7, #20]
  400c16:	68fa      	ldr	r2, [r7, #12]
  400c18:	631a      	str	r2, [r3, #48]	; 0x30
  400c1a:	bf00      	nop
  400c1c:	372c      	adds	r7, #44	; 0x2c
  400c1e:	46bd      	mov	sp, r7
  400c20:	bc80      	pop	{r7}
  400c22:	4770      	bx	lr

00400c24 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  400c24:	b580      	push	{r7, lr}
  400c26:	b082      	sub	sp, #8
  400c28:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  400c2a:	2300      	movs	r3, #0
  400c2c:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  400c2e:	2101      	movs	r1, #1
  400c30:	4815      	ldr	r0, [pc, #84]	; (400c88 <USART0_Handler+0x64>)
  400c32:	4b16      	ldr	r3, [pc, #88]	; (400c8c <USART0_Handler+0x68>)
  400c34:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  400c36:	4814      	ldr	r0, [pc, #80]	; (400c88 <USART0_Handler+0x64>)
  400c38:	4b15      	ldr	r3, [pc, #84]	; (400c90 <USART0_Handler+0x6c>)
  400c3a:	4798      	blx	r3
  400c3c:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400c3e:	4915      	ldr	r1, [pc, #84]	; (400c94 <USART0_Handler+0x70>)
  400c40:	4811      	ldr	r0, [pc, #68]	; (400c88 <USART0_Handler+0x64>)
  400c42:	4b15      	ldr	r3, [pc, #84]	; (400c98 <USART0_Handler+0x74>)
  400c44:	4798      	blx	r3
  400c46:	4603      	mov	r3, r0
  400c48:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  400c4a:	683b      	ldr	r3, [r7, #0]
  400c4c:	f003 0301 	and.w	r3, r3, #1
  400c50:	2b00      	cmp	r3, #0
  400c52:	d011      	beq.n	400c78 <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400c54:	490f      	ldr	r1, [pc, #60]	; (400c94 <USART0_Handler+0x70>)
  400c56:	480c      	ldr	r0, [pc, #48]	; (400c88 <USART0_Handler+0x64>)
  400c58:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <USART0_Handler+0x74>)
  400c5a:	4798      	blx	r3
  400c5c:	4603      	mov	r3, r0
  400c5e:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  400c60:	4b0e      	ldr	r3, [pc, #56]	; (400c9c <USART0_Handler+0x78>)
  400c62:	681b      	ldr	r3, [r3, #0]
  400c64:	4a0b      	ldr	r2, [pc, #44]	; (400c94 <USART0_Handler+0x70>)
  400c66:	6812      	ldr	r2, [r2, #0]
  400c68:	b2d1      	uxtb	r1, r2
  400c6a:	4a0d      	ldr	r2, [pc, #52]	; (400ca0 <USART0_Handler+0x7c>)
  400c6c:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  400c6e:	4b0b      	ldr	r3, [pc, #44]	; (400c9c <USART0_Handler+0x78>)
  400c70:	681b      	ldr	r3, [r3, #0]
  400c72:	3301      	adds	r3, #1
  400c74:	4a09      	ldr	r2, [pc, #36]	; (400c9c <USART0_Handler+0x78>)
  400c76:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400c78:	2101      	movs	r1, #1
  400c7a:	4803      	ldr	r0, [pc, #12]	; (400c88 <USART0_Handler+0x64>)
  400c7c:	4b09      	ldr	r3, [pc, #36]	; (400ca4 <USART0_Handler+0x80>)
  400c7e:	4798      	blx	r3
}
  400c80:	bf00      	nop
  400c82:	3708      	adds	r7, #8
  400c84:	46bd      	mov	sp, r7
  400c86:	bd80      	pop	{r7, pc}
  400c88:	40024000 	.word	0x40024000
  400c8c:	004008c3 	.word	0x004008c3
  400c90:	004008dd 	.word	0x004008dd
  400c94:	20001674 	.word	0x20001674
  400c98:	00400951 	.word	0x00400951
  400c9c:	20001664 	.word	0x20001664
  400ca0:	20001470 	.word	0x20001470
  400ca4:	004008a9 	.word	0x004008a9

00400ca8 <write_wifi_command>:
}

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  400ca8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400cac:	b082      	sub	sp, #8
  400cae:	af00      	add	r7, sp, #0
  400cb0:	6078      	str	r0, [r7, #4]
  400cb2:	460b      	mov	r3, r1
  400cb4:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  400cb6:	4b29      	ldr	r3, [pc, #164]	; (400d5c <write_wifi_command+0xb4>)
  400cb8:	2200      	movs	r2, #0
  400cba:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  400cbc:	6879      	ldr	r1, [r7, #4]
  400cbe:	4828      	ldr	r0, [pc, #160]	; (400d60 <write_wifi_command+0xb8>)
  400cc0:	4b28      	ldr	r3, [pc, #160]	; (400d64 <write_wifi_command+0xbc>)
  400cc2:	4798      	blx	r3
	
	timeout_counter = 0;
  400cc4:	4b28      	ldr	r3, [pc, #160]	; (400d68 <write_wifi_command+0xc0>)
  400cc6:	2200      	movs	r2, #0
  400cc8:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  400cca:	78fb      	ldrb	r3, [r7, #3]
  400ccc:	461a      	mov	r2, r3
  400cce:	0092      	lsls	r2, r2, #2
  400cd0:	4413      	add	r3, r2
  400cd2:	009b      	lsls	r3, r3, #2
  400cd4:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  400cd6:	e031      	b.n	400d3c <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  400cd8:	4b24      	ldr	r3, [pc, #144]	; (400d6c <write_wifi_command+0xc4>)
  400cda:	4798      	blx	r3
  400cdc:	4603      	mov	r3, r0
  400cde:	4619      	mov	r1, r3
  400ce0:	f04f 0200 	mov.w	r2, #0
  400ce4:	460b      	mov	r3, r1
  400ce6:	4614      	mov	r4, r2
  400ce8:	00a6      	lsls	r6, r4, #2
  400cea:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400cee:	009d      	lsls	r5, r3, #2
  400cf0:	462b      	mov	r3, r5
  400cf2:	4634      	mov	r4, r6
  400cf4:	185b      	adds	r3, r3, r1
  400cf6:	eb44 0402 	adc.w	r4, r4, r2
  400cfa:	18db      	adds	r3, r3, r3
  400cfc:	eb44 0404 	adc.w	r4, r4, r4
  400d00:	4619      	mov	r1, r3
  400d02:	4622      	mov	r2, r4
  400d04:	f243 63af 	movw	r3, #13999	; 0x36af
  400d08:	f04f 0400 	mov.w	r4, #0
  400d0c:	eb11 0b03 	adds.w	fp, r1, r3
  400d10:	eb42 0c04 	adc.w	ip, r2, r4
  400d14:	4658      	mov	r0, fp
  400d16:	4661      	mov	r1, ip
  400d18:	4c15      	ldr	r4, [pc, #84]	; (400d70 <write_wifi_command+0xc8>)
  400d1a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400d1e:	f04f 0300 	mov.w	r3, #0
  400d22:	47a0      	blx	r4
  400d24:	4603      	mov	r3, r0
  400d26:	460c      	mov	r4, r1
  400d28:	4618      	mov	r0, r3
  400d2a:	4b12      	ldr	r3, [pc, #72]	; (400d74 <write_wifi_command+0xcc>)
  400d2c:	4798      	blx	r3
		timeout_counter++;
  400d2e:	4b0e      	ldr	r3, [pc, #56]	; (400d68 <write_wifi_command+0xc0>)
  400d30:	781b      	ldrb	r3, [r3, #0]
  400d32:	b2db      	uxtb	r3, r3
  400d34:	3301      	adds	r3, #1
  400d36:	b2da      	uxtb	r2, r3
  400d38:	4b0b      	ldr	r3, [pc, #44]	; (400d68 <write_wifi_command+0xc0>)
  400d3a:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  400d3c:	4b0a      	ldr	r3, [pc, #40]	; (400d68 <write_wifi_command+0xc0>)
  400d3e:	781b      	ldrb	r3, [r3, #0]
  400d40:	b2db      	uxtb	r3, r3
  400d42:	78fa      	ldrb	r2, [r7, #3]
  400d44:	429a      	cmp	r2, r3
  400d46:	d903      	bls.n	400d50 <write_wifi_command+0xa8>
  400d48:	4b04      	ldr	r3, [pc, #16]	; (400d5c <write_wifi_command+0xb4>)
  400d4a:	681b      	ldr	r3, [r3, #0]
  400d4c:	2b00      	cmp	r3, #0
  400d4e:	d0c3      	beq.n	400cd8 <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  400d50:	bf00      	nop
  400d52:	3708      	adds	r7, #8
  400d54:	46bd      	mov	sp, r7
  400d56:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400d5a:	bf00      	nop
  400d5c:	2000166c 	.word	0x2000166c
  400d60:	40024000 	.word	0x40024000
  400d64:	00400921 	.word	0x00400921
  400d68:	20001668 	.word	0x20001668
  400d6c:	00400ba5 	.word	0x00400ba5
  400d70:	0040214d 	.word	0x0040214d
  400d74:	20000001 	.word	0x20000001

00400d78 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  400d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  400d7a:	b083      	sub	sp, #12
  400d7c:	af00      	add	r7, sp, #0
  400d7e:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  400d80:	687b      	ldr	r3, [r7, #4]
  400d82:	2b00      	cmp	r3, #0
  400d84:	d026      	beq.n	400dd4 <blink_LED+0x5c>
  400d86:	687b      	ldr	r3, [r7, #4]
  400d88:	461d      	mov	r5, r3
  400d8a:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400d8e:	4b66      	ldr	r3, [pc, #408]	; (400f28 <blink_LED+0x1b0>)
  400d90:	4798      	blx	r3
  400d92:	4603      	mov	r3, r0
  400d94:	f04f 0400 	mov.w	r4, #0
  400d98:	fb03 f106 	mul.w	r1, r3, r6
  400d9c:	fb05 f204 	mul.w	r2, r5, r4
  400da0:	440a      	add	r2, r1
  400da2:	fba5 3403 	umull	r3, r4, r5, r3
  400da6:	4422      	add	r2, r4
  400da8:	4614      	mov	r4, r2
  400daa:	f243 61af 	movw	r1, #13999	; 0x36af
  400dae:	f04f 0200 	mov.w	r2, #0
  400db2:	185d      	adds	r5, r3, r1
  400db4:	eb44 0602 	adc.w	r6, r4, r2
  400db8:	4628      	mov	r0, r5
  400dba:	4631      	mov	r1, r6
  400dbc:	4c5b      	ldr	r4, [pc, #364]	; (400f2c <blink_LED+0x1b4>)
  400dbe:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400dc2:	f04f 0300 	mov.w	r3, #0
  400dc6:	47a0      	blx	r4
  400dc8:	4603      	mov	r3, r0
  400dca:	460c      	mov	r4, r1
  400dcc:	4618      	mov	r0, r3
  400dce:	4b58      	ldr	r3, [pc, #352]	; (400f30 <blink_LED+0x1b8>)
  400dd0:	4798      	blx	r3
  400dd2:	e016      	b.n	400e02 <blink_LED+0x8a>
  400dd4:	4b54      	ldr	r3, [pc, #336]	; (400f28 <blink_LED+0x1b0>)
  400dd6:	4798      	blx	r3
  400dd8:	4603      	mov	r3, r0
  400dda:	f04f 0400 	mov.w	r4, #0
  400dde:	a250      	add	r2, pc, #320	; (adr r2, 400f20 <blink_LED+0x1a8>)
  400de0:	e9d2 1200 	ldrd	r1, r2, [r2]
  400de4:	185d      	adds	r5, r3, r1
  400de6:	eb44 0602 	adc.w	r6, r4, r2
  400dea:	4628      	mov	r0, r5
  400dec:	4631      	mov	r1, r6
  400dee:	4c4f      	ldr	r4, [pc, #316]	; (400f2c <blink_LED+0x1b4>)
  400df0:	4a50      	ldr	r2, [pc, #320]	; (400f34 <blink_LED+0x1bc>)
  400df2:	f04f 0300 	mov.w	r3, #0
  400df6:	47a0      	blx	r4
  400df8:	4603      	mov	r3, r0
  400dfa:	460c      	mov	r4, r1
  400dfc:	4618      	mov	r0, r3
  400dfe:	4b4c      	ldr	r3, [pc, #304]	; (400f30 <blink_LED+0x1b8>)
  400e00:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400e02:	2013      	movs	r0, #19
  400e04:	4b4c      	ldr	r3, [pc, #304]	; (400f38 <blink_LED+0x1c0>)
  400e06:	4798      	blx	r3
	delay_ms(ms_blink);
  400e08:	687b      	ldr	r3, [r7, #4]
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d026      	beq.n	400e5c <blink_LED+0xe4>
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	461d      	mov	r5, r3
  400e12:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400e16:	4b44      	ldr	r3, [pc, #272]	; (400f28 <blink_LED+0x1b0>)
  400e18:	4798      	blx	r3
  400e1a:	4603      	mov	r3, r0
  400e1c:	f04f 0400 	mov.w	r4, #0
  400e20:	fb03 f106 	mul.w	r1, r3, r6
  400e24:	fb05 f204 	mul.w	r2, r5, r4
  400e28:	440a      	add	r2, r1
  400e2a:	fba5 3403 	umull	r3, r4, r5, r3
  400e2e:	4422      	add	r2, r4
  400e30:	4614      	mov	r4, r2
  400e32:	f243 61af 	movw	r1, #13999	; 0x36af
  400e36:	f04f 0200 	mov.w	r2, #0
  400e3a:	185d      	adds	r5, r3, r1
  400e3c:	eb44 0602 	adc.w	r6, r4, r2
  400e40:	4628      	mov	r0, r5
  400e42:	4631      	mov	r1, r6
  400e44:	4c39      	ldr	r4, [pc, #228]	; (400f2c <blink_LED+0x1b4>)
  400e46:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e4a:	f04f 0300 	mov.w	r3, #0
  400e4e:	47a0      	blx	r4
  400e50:	4603      	mov	r3, r0
  400e52:	460c      	mov	r4, r1
  400e54:	4618      	mov	r0, r3
  400e56:	4b36      	ldr	r3, [pc, #216]	; (400f30 <blink_LED+0x1b8>)
  400e58:	4798      	blx	r3
  400e5a:	e016      	b.n	400e8a <blink_LED+0x112>
  400e5c:	4b32      	ldr	r3, [pc, #200]	; (400f28 <blink_LED+0x1b0>)
  400e5e:	4798      	blx	r3
  400e60:	4603      	mov	r3, r0
  400e62:	f04f 0400 	mov.w	r4, #0
  400e66:	a22e      	add	r2, pc, #184	; (adr r2, 400f20 <blink_LED+0x1a8>)
  400e68:	e9d2 1200 	ldrd	r1, r2, [r2]
  400e6c:	185d      	adds	r5, r3, r1
  400e6e:	eb44 0602 	adc.w	r6, r4, r2
  400e72:	4628      	mov	r0, r5
  400e74:	4631      	mov	r1, r6
  400e76:	4c2d      	ldr	r4, [pc, #180]	; (400f2c <blink_LED+0x1b4>)
  400e78:	4a2e      	ldr	r2, [pc, #184]	; (400f34 <blink_LED+0x1bc>)
  400e7a:	f04f 0300 	mov.w	r3, #0
  400e7e:	47a0      	blx	r4
  400e80:	4603      	mov	r3, r0
  400e82:	460c      	mov	r4, r1
  400e84:	4618      	mov	r0, r3
  400e86:	4b2a      	ldr	r3, [pc, #168]	; (400f30 <blink_LED+0x1b8>)
  400e88:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400e8a:	2013      	movs	r0, #19
  400e8c:	4b2a      	ldr	r3, [pc, #168]	; (400f38 <blink_LED+0x1c0>)
  400e8e:	4798      	blx	r3
	delay_ms(ms_blink);
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	2b00      	cmp	r3, #0
  400e94:	d026      	beq.n	400ee4 <blink_LED+0x16c>
  400e96:	687b      	ldr	r3, [r7, #4]
  400e98:	461d      	mov	r5, r3
  400e9a:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400e9e:	4b22      	ldr	r3, [pc, #136]	; (400f28 <blink_LED+0x1b0>)
  400ea0:	4798      	blx	r3
  400ea2:	4603      	mov	r3, r0
  400ea4:	f04f 0400 	mov.w	r4, #0
  400ea8:	fb03 f106 	mul.w	r1, r3, r6
  400eac:	fb05 f204 	mul.w	r2, r5, r4
  400eb0:	440a      	add	r2, r1
  400eb2:	fba5 3403 	umull	r3, r4, r5, r3
  400eb6:	4422      	add	r2, r4
  400eb8:	4614      	mov	r4, r2
  400eba:	f243 61af 	movw	r1, #13999	; 0x36af
  400ebe:	f04f 0200 	mov.w	r2, #0
  400ec2:	185d      	adds	r5, r3, r1
  400ec4:	eb44 0602 	adc.w	r6, r4, r2
  400ec8:	4628      	mov	r0, r5
  400eca:	4631      	mov	r1, r6
  400ecc:	4c17      	ldr	r4, [pc, #92]	; (400f2c <blink_LED+0x1b4>)
  400ece:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400ed2:	f04f 0300 	mov.w	r3, #0
  400ed6:	47a0      	blx	r4
  400ed8:	4603      	mov	r3, r0
  400eda:	460c      	mov	r4, r1
  400edc:	4618      	mov	r0, r3
  400ede:	4b14      	ldr	r3, [pc, #80]	; (400f30 <blink_LED+0x1b8>)
  400ee0:	4798      	blx	r3
}
  400ee2:	e016      	b.n	400f12 <blink_LED+0x19a>
	delay_ms(ms_blink);
  400ee4:	4b10      	ldr	r3, [pc, #64]	; (400f28 <blink_LED+0x1b0>)
  400ee6:	4798      	blx	r3
  400ee8:	4603      	mov	r3, r0
  400eea:	f04f 0400 	mov.w	r4, #0
  400eee:	a20c      	add	r2, pc, #48	; (adr r2, 400f20 <blink_LED+0x1a8>)
  400ef0:	e9d2 1200 	ldrd	r1, r2, [r2]
  400ef4:	185d      	adds	r5, r3, r1
  400ef6:	eb44 0602 	adc.w	r6, r4, r2
  400efa:	4628      	mov	r0, r5
  400efc:	4631      	mov	r1, r6
  400efe:	4c0b      	ldr	r4, [pc, #44]	; (400f2c <blink_LED+0x1b4>)
  400f00:	4a0c      	ldr	r2, [pc, #48]	; (400f34 <blink_LED+0x1bc>)
  400f02:	f04f 0300 	mov.w	r3, #0
  400f06:	47a0      	blx	r4
  400f08:	4603      	mov	r3, r0
  400f0a:	460c      	mov	r4, r1
  400f0c:	4618      	mov	r0, r3
  400f0e:	4b08      	ldr	r3, [pc, #32]	; (400f30 <blink_LED+0x1b8>)
  400f10:	4798      	blx	r3
}
  400f12:	bf00      	nop
  400f14:	370c      	adds	r7, #12
  400f16:	46bd      	mov	sp, r7
  400f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f1a:	bf00      	nop
  400f1c:	f3af 8000 	nop.w
  400f20:	00d59f7f 	.word	0x00d59f7f
  400f24:	00000000 	.word	0x00000000
  400f28:	00400ba5 	.word	0x00400ba5
  400f2c:	0040214d 	.word	0x0040214d
  400f30:	20000001 	.word	0x20000001
  400f34:	00d59f80 	.word	0x00d59f80
  400f38:	00400bb9 	.word	0x00400bb9

00400f3c <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  400f3c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  400f40:	b082      	sub	sp, #8
  400f42:	af00      	add	r7, sp, #0
	
	int connected = 0;
  400f44:	2300      	movs	r3, #0
  400f46:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  400f48:	2300      	movs	r3, #0
  400f4a:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  400f4c:	21d0      	movs	r1, #208	; 0xd0
  400f4e:	482b      	ldr	r0, [pc, #172]	; (400ffc <setup_wifi+0xc0>)
  400f50:	4b2b      	ldr	r3, [pc, #172]	; (401000 <setup_wifi+0xc4>)
  400f52:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  400f54:	e046      	b.n	400fe4 <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  400f56:	492b      	ldr	r1, [pc, #172]	; (401004 <setup_wifi+0xc8>)
  400f58:	482b      	ldr	r0, [pc, #172]	; (401008 <setup_wifi+0xcc>)
  400f5a:	4b2c      	ldr	r3, [pc, #176]	; (40100c <setup_wifi+0xd0>)
  400f5c:	4798      	blx	r3
  400f5e:	4603      	mov	r3, r0
  400f60:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  400f62:	683b      	ldr	r3, [r7, #0]
  400f64:	f240 52dc 	movw	r2, #1500	; 0x5dc
  400f68:	4293      	cmp	r3, r2
  400f6a:	dd02      	ble.n	400f72 <setup_wifi+0x36>
			blink_LED(50);
  400f6c:	2032      	movs	r0, #50	; 0x32
  400f6e:	4b28      	ldr	r3, [pc, #160]	; (401010 <setup_wifi+0xd4>)
  400f70:	4798      	blx	r3
		}
		delay_ms(200);
  400f72:	4b28      	ldr	r3, [pc, #160]	; (401014 <setup_wifi+0xd8>)
  400f74:	4798      	blx	r3
  400f76:	4603      	mov	r3, r0
  400f78:	4619      	mov	r1, r3
  400f7a:	f04f 0200 	mov.w	r2, #0
  400f7e:	460b      	mov	r3, r1
  400f80:	4614      	mov	r4, r2
  400f82:	18db      	adds	r3, r3, r3
  400f84:	eb44 0404 	adc.w	r4, r4, r4
  400f88:	185b      	adds	r3, r3, r1
  400f8a:	eb44 0402 	adc.w	r4, r4, r2
  400f8e:	00e6      	lsls	r6, r4, #3
  400f90:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  400f94:	00dd      	lsls	r5, r3, #3
  400f96:	462b      	mov	r3, r5
  400f98:	4634      	mov	r4, r6
  400f9a:	185b      	adds	r3, r3, r1
  400f9c:	eb44 0402 	adc.w	r4, r4, r2
  400fa0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  400fa4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  400fa8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  400fac:	4643      	mov	r3, r8
  400fae:	464c      	mov	r4, r9
  400fb0:	4619      	mov	r1, r3
  400fb2:	4622      	mov	r2, r4
  400fb4:	f243 63af 	movw	r3, #13999	; 0x36af
  400fb8:	f04f 0400 	mov.w	r4, #0
  400fbc:	eb11 0b03 	adds.w	fp, r1, r3
  400fc0:	eb42 0c04 	adc.w	ip, r2, r4
  400fc4:	4658      	mov	r0, fp
  400fc6:	4661      	mov	r1, ip
  400fc8:	4c13      	ldr	r4, [pc, #76]	; (401018 <setup_wifi+0xdc>)
  400fca:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400fce:	f04f 0300 	mov.w	r3, #0
  400fd2:	47a0      	blx	r4
  400fd4:	4603      	mov	r3, r0
  400fd6:	460c      	mov	r4, r1
  400fd8:	4618      	mov	r0, r3
  400fda:	4b10      	ldr	r3, [pc, #64]	; (40101c <setup_wifi+0xe0>)
  400fdc:	4798      	blx	r3
		seconds++;
  400fde:	683b      	ldr	r3, [r7, #0]
  400fe0:	3301      	adds	r3, #1
  400fe2:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  400fe4:	687b      	ldr	r3, [r7, #4]
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d0b5      	beq.n	400f56 <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  400fea:	4b0d      	ldr	r3, [pc, #52]	; (401020 <setup_wifi+0xe4>)
  400fec:	2200      	movs	r2, #0
  400fee:	601a      	str	r2, [r3, #0]
}
  400ff0:	bf00      	nop
  400ff2:	3708      	adds	r7, #8
  400ff4:	46bd      	mov	sp, r7
  400ff6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  400ffa:	bf00      	nop
  400ffc:	00402d9c 	.word	0x00402d9c
  401000:	00400ca9 	.word	0x00400ca9
  401004:	00402da8 	.word	0x00402da8
  401008:	20001470 	.word	0x20001470
  40100c:	0040275d 	.word	0x0040275d
  401010:	00400d79 	.word	0x00400d79
  401014:	00400ba5 	.word	0x00400ba5
  401018:	0040214d 	.word	0x0040214d
  40101c:	20000001 	.word	0x20000001
  401020:	20001670 	.word	0x20001670

00401024 <osc_enable>:
{
  401024:	b580      	push	{r7, lr}
  401026:	b082      	sub	sp, #8
  401028:	af00      	add	r7, sp, #0
  40102a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40102c:	687b      	ldr	r3, [r7, #4]
  40102e:	2b07      	cmp	r3, #7
  401030:	d831      	bhi.n	401096 <osc_enable+0x72>
  401032:	a201      	add	r2, pc, #4	; (adr r2, 401038 <osc_enable+0x14>)
  401034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401038:	00401095 	.word	0x00401095
  40103c:	00401059 	.word	0x00401059
  401040:	00401061 	.word	0x00401061
  401044:	00401069 	.word	0x00401069
  401048:	00401071 	.word	0x00401071
  40104c:	00401079 	.word	0x00401079
  401050:	00401081 	.word	0x00401081
  401054:	0040108b 	.word	0x0040108b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401058:	2000      	movs	r0, #0
  40105a:	4b11      	ldr	r3, [pc, #68]	; (4010a0 <osc_enable+0x7c>)
  40105c:	4798      	blx	r3
		break;
  40105e:	e01a      	b.n	401096 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401060:	2001      	movs	r0, #1
  401062:	4b0f      	ldr	r3, [pc, #60]	; (4010a0 <osc_enable+0x7c>)
  401064:	4798      	blx	r3
		break;
  401066:	e016      	b.n	401096 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401068:	2000      	movs	r0, #0
  40106a:	4b0e      	ldr	r3, [pc, #56]	; (4010a4 <osc_enable+0x80>)
  40106c:	4798      	blx	r3
		break;
  40106e:	e012      	b.n	401096 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401070:	2010      	movs	r0, #16
  401072:	4b0c      	ldr	r3, [pc, #48]	; (4010a4 <osc_enable+0x80>)
  401074:	4798      	blx	r3
		break;
  401076:	e00e      	b.n	401096 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401078:	2020      	movs	r0, #32
  40107a:	4b0a      	ldr	r3, [pc, #40]	; (4010a4 <osc_enable+0x80>)
  40107c:	4798      	blx	r3
		break;
  40107e:	e00a      	b.n	401096 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401080:	213e      	movs	r1, #62	; 0x3e
  401082:	2000      	movs	r0, #0
  401084:	4b08      	ldr	r3, [pc, #32]	; (4010a8 <osc_enable+0x84>)
  401086:	4798      	blx	r3
		break;
  401088:	e005      	b.n	401096 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40108a:	213e      	movs	r1, #62	; 0x3e
  40108c:	2001      	movs	r0, #1
  40108e:	4b06      	ldr	r3, [pc, #24]	; (4010a8 <osc_enable+0x84>)
  401090:	4798      	blx	r3
		break;
  401092:	e000      	b.n	401096 <osc_enable+0x72>
		break;
  401094:	bf00      	nop
}
  401096:	bf00      	nop
  401098:	3708      	adds	r7, #8
  40109a:	46bd      	mov	sp, r7
  40109c:	bd80      	pop	{r7, pc}
  40109e:	bf00      	nop
  4010a0:	00401835 	.word	0x00401835
  4010a4:	004018a1 	.word	0x004018a1
  4010a8:	00401911 	.word	0x00401911

004010ac <osc_is_ready>:
{
  4010ac:	b580      	push	{r7, lr}
  4010ae:	b082      	sub	sp, #8
  4010b0:	af00      	add	r7, sp, #0
  4010b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4010b4:	687b      	ldr	r3, [r7, #4]
  4010b6:	2b07      	cmp	r3, #7
  4010b8:	d826      	bhi.n	401108 <osc_is_ready+0x5c>
  4010ba:	a201      	add	r2, pc, #4	; (adr r2, 4010c0 <osc_is_ready+0x14>)
  4010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010c0:	004010e1 	.word	0x004010e1
  4010c4:	004010e5 	.word	0x004010e5
  4010c8:	004010e5 	.word	0x004010e5
  4010cc:	004010f7 	.word	0x004010f7
  4010d0:	004010f7 	.word	0x004010f7
  4010d4:	004010f7 	.word	0x004010f7
  4010d8:	004010f7 	.word	0x004010f7
  4010dc:	004010f7 	.word	0x004010f7
		return 1;
  4010e0:	2301      	movs	r3, #1
  4010e2:	e012      	b.n	40110a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4010e4:	4b0b      	ldr	r3, [pc, #44]	; (401114 <osc_is_ready+0x68>)
  4010e6:	4798      	blx	r3
  4010e8:	4603      	mov	r3, r0
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	bf14      	ite	ne
  4010ee:	2301      	movne	r3, #1
  4010f0:	2300      	moveq	r3, #0
  4010f2:	b2db      	uxtb	r3, r3
  4010f4:	e009      	b.n	40110a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4010f6:	4b08      	ldr	r3, [pc, #32]	; (401118 <osc_is_ready+0x6c>)
  4010f8:	4798      	blx	r3
  4010fa:	4603      	mov	r3, r0
  4010fc:	2b00      	cmp	r3, #0
  4010fe:	bf14      	ite	ne
  401100:	2301      	movne	r3, #1
  401102:	2300      	moveq	r3, #0
  401104:	b2db      	uxtb	r3, r3
  401106:	e000      	b.n	40110a <osc_is_ready+0x5e>
	return 0;
  401108:	2300      	movs	r3, #0
}
  40110a:	4618      	mov	r0, r3
  40110c:	3708      	adds	r7, #8
  40110e:	46bd      	mov	sp, r7
  401110:	bd80      	pop	{r7, pc}
  401112:	bf00      	nop
  401114:	0040186d 	.word	0x0040186d
  401118:	00401989 	.word	0x00401989

0040111c <osc_get_rate>:
{
  40111c:	b480      	push	{r7}
  40111e:	b083      	sub	sp, #12
  401120:	af00      	add	r7, sp, #0
  401122:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401124:	687b      	ldr	r3, [r7, #4]
  401126:	2b07      	cmp	r3, #7
  401128:	d825      	bhi.n	401176 <osc_get_rate+0x5a>
  40112a:	a201      	add	r2, pc, #4	; (adr r2, 401130 <osc_get_rate+0x14>)
  40112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401130:	00401151 	.word	0x00401151
  401134:	00401157 	.word	0x00401157
  401138:	0040115d 	.word	0x0040115d
  40113c:	00401163 	.word	0x00401163
  401140:	00401167 	.word	0x00401167
  401144:	0040116b 	.word	0x0040116b
  401148:	0040116f 	.word	0x0040116f
  40114c:	00401173 	.word	0x00401173
		return OSC_SLCK_32K_RC_HZ;
  401150:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401154:	e010      	b.n	401178 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40115a:	e00d      	b.n	401178 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40115c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401160:	e00a      	b.n	401178 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401162:	4b08      	ldr	r3, [pc, #32]	; (401184 <osc_get_rate+0x68>)
  401164:	e008      	b.n	401178 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401166:	4b08      	ldr	r3, [pc, #32]	; (401188 <osc_get_rate+0x6c>)
  401168:	e006      	b.n	401178 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40116a:	4b08      	ldr	r3, [pc, #32]	; (40118c <osc_get_rate+0x70>)
  40116c:	e004      	b.n	401178 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40116e:	4b07      	ldr	r3, [pc, #28]	; (40118c <osc_get_rate+0x70>)
  401170:	e002      	b.n	401178 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401172:	4b06      	ldr	r3, [pc, #24]	; (40118c <osc_get_rate+0x70>)
  401174:	e000      	b.n	401178 <osc_get_rate+0x5c>
	return 0;
  401176:	2300      	movs	r3, #0
}
  401178:	4618      	mov	r0, r3
  40117a:	370c      	adds	r7, #12
  40117c:	46bd      	mov	sp, r7
  40117e:	bc80      	pop	{r7}
  401180:	4770      	bx	lr
  401182:	bf00      	nop
  401184:	003d0900 	.word	0x003d0900
  401188:	007a1200 	.word	0x007a1200
  40118c:	00b71b00 	.word	0x00b71b00

00401190 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401190:	b580      	push	{r7, lr}
  401192:	b082      	sub	sp, #8
  401194:	af00      	add	r7, sp, #0
  401196:	4603      	mov	r3, r0
  401198:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40119a:	bf00      	nop
  40119c:	79fb      	ldrb	r3, [r7, #7]
  40119e:	4618      	mov	r0, r3
  4011a0:	4b05      	ldr	r3, [pc, #20]	; (4011b8 <osc_wait_ready+0x28>)
  4011a2:	4798      	blx	r3
  4011a4:	4603      	mov	r3, r0
  4011a6:	f083 0301 	eor.w	r3, r3, #1
  4011aa:	b2db      	uxtb	r3, r3
  4011ac:	2b00      	cmp	r3, #0
  4011ae:	d1f5      	bne.n	40119c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4011b0:	bf00      	nop
  4011b2:	3708      	adds	r7, #8
  4011b4:	46bd      	mov	sp, r7
  4011b6:	bd80      	pop	{r7, pc}
  4011b8:	004010ad 	.word	0x004010ad

004011bc <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4011bc:	b580      	push	{r7, lr}
  4011be:	b086      	sub	sp, #24
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	60f8      	str	r0, [r7, #12]
  4011c4:	607a      	str	r2, [r7, #4]
  4011c6:	603b      	str	r3, [r7, #0]
  4011c8:	460b      	mov	r3, r1
  4011ca:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4011cc:	7afb      	ldrb	r3, [r7, #11]
  4011ce:	4618      	mov	r0, r3
  4011d0:	4b0d      	ldr	r3, [pc, #52]	; (401208 <pll_config_init+0x4c>)
  4011d2:	4798      	blx	r3
  4011d4:	4602      	mov	r2, r0
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	fbb2 f3f3 	udiv	r3, r2, r3
  4011dc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4011de:	697b      	ldr	r3, [r7, #20]
  4011e0:	683a      	ldr	r2, [r7, #0]
  4011e2:	fb02 f303 	mul.w	r3, r2, r3
  4011e6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4011e8:	683b      	ldr	r3, [r7, #0]
  4011ea:	3b01      	subs	r3, #1
  4011ec:	041a      	lsls	r2, r3, #16
  4011ee:	4b07      	ldr	r3, [pc, #28]	; (40120c <pll_config_init+0x50>)
  4011f0:	4013      	ands	r3, r2
  4011f2:	687a      	ldr	r2, [r7, #4]
  4011f4:	b2d2      	uxtb	r2, r2
  4011f6:	4313      	orrs	r3, r2
  4011f8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4011fc:	68fb      	ldr	r3, [r7, #12]
  4011fe:	601a      	str	r2, [r3, #0]
}
  401200:	bf00      	nop
  401202:	3718      	adds	r7, #24
  401204:	46bd      	mov	sp, r7
  401206:	bd80      	pop	{r7, pc}
  401208:	0040111d 	.word	0x0040111d
  40120c:	07ff0000 	.word	0x07ff0000

00401210 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401210:	b580      	push	{r7, lr}
  401212:	b082      	sub	sp, #8
  401214:	af00      	add	r7, sp, #0
  401216:	6078      	str	r0, [r7, #4]
  401218:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40121a:	683b      	ldr	r3, [r7, #0]
  40121c:	2b00      	cmp	r3, #0
  40121e:	d108      	bne.n	401232 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401220:	4b09      	ldr	r3, [pc, #36]	; (401248 <pll_enable+0x38>)
  401222:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401224:	4a09      	ldr	r2, [pc, #36]	; (40124c <pll_enable+0x3c>)
  401226:	687b      	ldr	r3, [r7, #4]
  401228:	681b      	ldr	r3, [r3, #0]
  40122a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40122e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401230:	e005      	b.n	40123e <pll_enable+0x2e>
		pmc_disable_pllbck();
  401232:	4b07      	ldr	r3, [pc, #28]	; (401250 <pll_enable+0x40>)
  401234:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401236:	4a05      	ldr	r2, [pc, #20]	; (40124c <pll_enable+0x3c>)
  401238:	687b      	ldr	r3, [r7, #4]
  40123a:	681b      	ldr	r3, [r3, #0]
  40123c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40123e:	bf00      	nop
  401240:	3708      	adds	r7, #8
  401242:	46bd      	mov	sp, r7
  401244:	bd80      	pop	{r7, pc}
  401246:	bf00      	nop
  401248:	004019a1 	.word	0x004019a1
  40124c:	400e0400 	.word	0x400e0400
  401250:	004019d1 	.word	0x004019d1

00401254 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401254:	b580      	push	{r7, lr}
  401256:	b082      	sub	sp, #8
  401258:	af00      	add	r7, sp, #0
  40125a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40125c:	687b      	ldr	r3, [r7, #4]
  40125e:	2b00      	cmp	r3, #0
  401260:	d103      	bne.n	40126a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401262:	4b05      	ldr	r3, [pc, #20]	; (401278 <pll_is_locked+0x24>)
  401264:	4798      	blx	r3
  401266:	4603      	mov	r3, r0
  401268:	e002      	b.n	401270 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40126a:	4b04      	ldr	r3, [pc, #16]	; (40127c <pll_is_locked+0x28>)
  40126c:	4798      	blx	r3
  40126e:	4603      	mov	r3, r0
	}
}
  401270:	4618      	mov	r0, r3
  401272:	3708      	adds	r7, #8
  401274:	46bd      	mov	sp, r7
  401276:	bd80      	pop	{r7, pc}
  401278:	004019b9 	.word	0x004019b9
  40127c:	004019e9 	.word	0x004019e9

00401280 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401280:	b580      	push	{r7, lr}
  401282:	b082      	sub	sp, #8
  401284:	af00      	add	r7, sp, #0
  401286:	4603      	mov	r3, r0
  401288:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40128a:	79fb      	ldrb	r3, [r7, #7]
  40128c:	3b03      	subs	r3, #3
  40128e:	2b04      	cmp	r3, #4
  401290:	d808      	bhi.n	4012a4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401292:	79fb      	ldrb	r3, [r7, #7]
  401294:	4618      	mov	r0, r3
  401296:	4b06      	ldr	r3, [pc, #24]	; (4012b0 <pll_enable_source+0x30>)
  401298:	4798      	blx	r3
		osc_wait_ready(e_src);
  40129a:	79fb      	ldrb	r3, [r7, #7]
  40129c:	4618      	mov	r0, r3
  40129e:	4b05      	ldr	r3, [pc, #20]	; (4012b4 <pll_enable_source+0x34>)
  4012a0:	4798      	blx	r3
		break;
  4012a2:	e000      	b.n	4012a6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4012a4:	bf00      	nop
	}
}
  4012a6:	bf00      	nop
  4012a8:	3708      	adds	r7, #8
  4012aa:	46bd      	mov	sp, r7
  4012ac:	bd80      	pop	{r7, pc}
  4012ae:	bf00      	nop
  4012b0:	00401025 	.word	0x00401025
  4012b4:	00401191 	.word	0x00401191

004012b8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4012b8:	b580      	push	{r7, lr}
  4012ba:	b082      	sub	sp, #8
  4012bc:	af00      	add	r7, sp, #0
  4012be:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4012c0:	bf00      	nop
  4012c2:	6878      	ldr	r0, [r7, #4]
  4012c4:	4b04      	ldr	r3, [pc, #16]	; (4012d8 <pll_wait_for_lock+0x20>)
  4012c6:	4798      	blx	r3
  4012c8:	4603      	mov	r3, r0
  4012ca:	2b00      	cmp	r3, #0
  4012cc:	d0f9      	beq.n	4012c2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4012ce:	2300      	movs	r3, #0
}
  4012d0:	4618      	mov	r0, r3
  4012d2:	3708      	adds	r7, #8
  4012d4:	46bd      	mov	sp, r7
  4012d6:	bd80      	pop	{r7, pc}
  4012d8:	00401255 	.word	0x00401255

004012dc <sysclk_get_main_hz>:
{
  4012dc:	b580      	push	{r7, lr}
  4012de:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4012e0:	2006      	movs	r0, #6
  4012e2:	4b04      	ldr	r3, [pc, #16]	; (4012f4 <sysclk_get_main_hz+0x18>)
  4012e4:	4798      	blx	r3
  4012e6:	4602      	mov	r2, r0
  4012e8:	4613      	mov	r3, r2
  4012ea:	009b      	lsls	r3, r3, #2
  4012ec:	4413      	add	r3, r2
  4012ee:	009b      	lsls	r3, r3, #2
}
  4012f0:	4618      	mov	r0, r3
  4012f2:	bd80      	pop	{r7, pc}
  4012f4:	0040111d 	.word	0x0040111d

004012f8 <sysclk_get_cpu_hz>:
{
  4012f8:	b580      	push	{r7, lr}
  4012fa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4012fc:	4b02      	ldr	r3, [pc, #8]	; (401308 <sysclk_get_cpu_hz+0x10>)
  4012fe:	4798      	blx	r3
  401300:	4603      	mov	r3, r0
  401302:	085b      	lsrs	r3, r3, #1
}
  401304:	4618      	mov	r0, r3
  401306:	bd80      	pop	{r7, pc}
  401308:	004012dd 	.word	0x004012dd

0040130c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40130c:	b590      	push	{r4, r7, lr}
  40130e:	b083      	sub	sp, #12
  401310:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401312:	4811      	ldr	r0, [pc, #68]	; (401358 <sysclk_init+0x4c>)
  401314:	4b11      	ldr	r3, [pc, #68]	; (40135c <sysclk_init+0x50>)
  401316:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401318:	2006      	movs	r0, #6
  40131a:	4b11      	ldr	r3, [pc, #68]	; (401360 <sysclk_init+0x54>)
  40131c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40131e:	1d38      	adds	r0, r7, #4
  401320:	2314      	movs	r3, #20
  401322:	2201      	movs	r2, #1
  401324:	2106      	movs	r1, #6
  401326:	4c0f      	ldr	r4, [pc, #60]	; (401364 <sysclk_init+0x58>)
  401328:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40132a:	1d3b      	adds	r3, r7, #4
  40132c:	2100      	movs	r1, #0
  40132e:	4618      	mov	r0, r3
  401330:	4b0d      	ldr	r3, [pc, #52]	; (401368 <sysclk_init+0x5c>)
  401332:	4798      	blx	r3
		pll_wait_for_lock(0);
  401334:	2000      	movs	r0, #0
  401336:	4b0d      	ldr	r3, [pc, #52]	; (40136c <sysclk_init+0x60>)
  401338:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40133a:	2010      	movs	r0, #16
  40133c:	4b0c      	ldr	r3, [pc, #48]	; (401370 <sysclk_init+0x64>)
  40133e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401340:	4b0c      	ldr	r3, [pc, #48]	; (401374 <sysclk_init+0x68>)
  401342:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401344:	4b0c      	ldr	r3, [pc, #48]	; (401378 <sysclk_init+0x6c>)
  401346:	4798      	blx	r3
  401348:	4603      	mov	r3, r0
  40134a:	4618      	mov	r0, r3
  40134c:	4b03      	ldr	r3, [pc, #12]	; (40135c <sysclk_init+0x50>)
  40134e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401350:	bf00      	nop
  401352:	370c      	adds	r7, #12
  401354:	46bd      	mov	sp, r7
  401356:	bd90      	pop	{r4, r7, pc}
  401358:	07270e00 	.word	0x07270e00
  40135c:	00402065 	.word	0x00402065
  401360:	00401281 	.word	0x00401281
  401364:	004011bd 	.word	0x004011bd
  401368:	00401211 	.word	0x00401211
  40136c:	004012b9 	.word	0x004012b9
  401370:	004017b5 	.word	0x004017b5
  401374:	00401ecd 	.word	0x00401ecd
  401378:	004012f9 	.word	0x004012f9

0040137c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40137c:	b480      	push	{r7}
  40137e:	b085      	sub	sp, #20
  401380:	af00      	add	r7, sp, #0
  401382:	60f8      	str	r0, [r7, #12]
  401384:	60b9      	str	r1, [r7, #8]
  401386:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401388:	687b      	ldr	r3, [r7, #4]
  40138a:	2b00      	cmp	r3, #0
  40138c:	d003      	beq.n	401396 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40138e:	68fb      	ldr	r3, [r7, #12]
  401390:	68ba      	ldr	r2, [r7, #8]
  401392:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401394:	e002      	b.n	40139c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401396:	68fb      	ldr	r3, [r7, #12]
  401398:	68ba      	ldr	r2, [r7, #8]
  40139a:	661a      	str	r2, [r3, #96]	; 0x60
}
  40139c:	bf00      	nop
  40139e:	3714      	adds	r7, #20
  4013a0:	46bd      	mov	sp, r7
  4013a2:	bc80      	pop	{r7}
  4013a4:	4770      	bx	lr

004013a6 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4013a6:	b480      	push	{r7}
  4013a8:	b087      	sub	sp, #28
  4013aa:	af00      	add	r7, sp, #0
  4013ac:	60f8      	str	r0, [r7, #12]
  4013ae:	60b9      	str	r1, [r7, #8]
  4013b0:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4013b2:	68fb      	ldr	r3, [r7, #12]
  4013b4:	687a      	ldr	r2, [r7, #4]
  4013b6:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4013b8:	68bb      	ldr	r3, [r7, #8]
  4013ba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013be:	d04a      	beq.n	401456 <pio_set_peripheral+0xb0>
  4013c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013c4:	d808      	bhi.n	4013d8 <pio_set_peripheral+0x32>
  4013c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013ca:	d016      	beq.n	4013fa <pio_set_peripheral+0x54>
  4013cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013d0:	d02c      	beq.n	40142c <pio_set_peripheral+0x86>
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d069      	beq.n	4014aa <pio_set_peripheral+0x104>
  4013d6:	e064      	b.n	4014a2 <pio_set_peripheral+0xfc>
  4013d8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013dc:	d065      	beq.n	4014aa <pio_set_peripheral+0x104>
  4013de:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013e2:	d803      	bhi.n	4013ec <pio_set_peripheral+0x46>
  4013e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013e8:	d04a      	beq.n	401480 <pio_set_peripheral+0xda>
  4013ea:	e05a      	b.n	4014a2 <pio_set_peripheral+0xfc>
  4013ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4013f0:	d05b      	beq.n	4014aa <pio_set_peripheral+0x104>
  4013f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4013f6:	d058      	beq.n	4014aa <pio_set_peripheral+0x104>
  4013f8:	e053      	b.n	4014a2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013fa:	68fb      	ldr	r3, [r7, #12]
  4013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013fe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401400:	68fb      	ldr	r3, [r7, #12]
  401402:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	43d9      	mvns	r1, r3
  401408:	697b      	ldr	r3, [r7, #20]
  40140a:	400b      	ands	r3, r1
  40140c:	401a      	ands	r2, r3
  40140e:	68fb      	ldr	r3, [r7, #12]
  401410:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401412:	68fb      	ldr	r3, [r7, #12]
  401414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401416:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401418:	68fb      	ldr	r3, [r7, #12]
  40141a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40141c:	687b      	ldr	r3, [r7, #4]
  40141e:	43d9      	mvns	r1, r3
  401420:	697b      	ldr	r3, [r7, #20]
  401422:	400b      	ands	r3, r1
  401424:	401a      	ands	r2, r3
  401426:	68fb      	ldr	r3, [r7, #12]
  401428:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40142a:	e03a      	b.n	4014a2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40142c:	68fb      	ldr	r3, [r7, #12]
  40142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401430:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401432:	687a      	ldr	r2, [r7, #4]
  401434:	697b      	ldr	r3, [r7, #20]
  401436:	431a      	orrs	r2, r3
  401438:	68fb      	ldr	r3, [r7, #12]
  40143a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40143c:	68fb      	ldr	r3, [r7, #12]
  40143e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401440:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	43d9      	mvns	r1, r3
  40144a:	697b      	ldr	r3, [r7, #20]
  40144c:	400b      	ands	r3, r1
  40144e:	401a      	ands	r2, r3
  401450:	68fb      	ldr	r3, [r7, #12]
  401452:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401454:	e025      	b.n	4014a2 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401456:	68fb      	ldr	r3, [r7, #12]
  401458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40145a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40145c:	68fb      	ldr	r3, [r7, #12]
  40145e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401460:	687b      	ldr	r3, [r7, #4]
  401462:	43d9      	mvns	r1, r3
  401464:	697b      	ldr	r3, [r7, #20]
  401466:	400b      	ands	r3, r1
  401468:	401a      	ands	r2, r3
  40146a:	68fb      	ldr	r3, [r7, #12]
  40146c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401472:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401474:	687a      	ldr	r2, [r7, #4]
  401476:	697b      	ldr	r3, [r7, #20]
  401478:	431a      	orrs	r2, r3
  40147a:	68fb      	ldr	r3, [r7, #12]
  40147c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40147e:	e010      	b.n	4014a2 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401480:	68fb      	ldr	r3, [r7, #12]
  401482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401484:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401486:	687a      	ldr	r2, [r7, #4]
  401488:	697b      	ldr	r3, [r7, #20]
  40148a:	431a      	orrs	r2, r3
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401490:	68fb      	ldr	r3, [r7, #12]
  401492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401494:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401496:	687a      	ldr	r2, [r7, #4]
  401498:	697b      	ldr	r3, [r7, #20]
  40149a:	431a      	orrs	r2, r3
  40149c:	68fb      	ldr	r3, [r7, #12]
  40149e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4014a0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4014a2:	68fb      	ldr	r3, [r7, #12]
  4014a4:	687a      	ldr	r2, [r7, #4]
  4014a6:	605a      	str	r2, [r3, #4]
  4014a8:	e000      	b.n	4014ac <pio_set_peripheral+0x106>
		return;
  4014aa:	bf00      	nop
}
  4014ac:	371c      	adds	r7, #28
  4014ae:	46bd      	mov	sp, r7
  4014b0:	bc80      	pop	{r7}
  4014b2:	4770      	bx	lr

004014b4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4014b4:	b580      	push	{r7, lr}
  4014b6:	b084      	sub	sp, #16
  4014b8:	af00      	add	r7, sp, #0
  4014ba:	60f8      	str	r0, [r7, #12]
  4014bc:	60b9      	str	r1, [r7, #8]
  4014be:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4014c0:	68b9      	ldr	r1, [r7, #8]
  4014c2:	68f8      	ldr	r0, [r7, #12]
  4014c4:	4b19      	ldr	r3, [pc, #100]	; (40152c <pio_set_input+0x78>)
  4014c6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	f003 0301 	and.w	r3, r3, #1
  4014ce:	461a      	mov	r2, r3
  4014d0:	68b9      	ldr	r1, [r7, #8]
  4014d2:	68f8      	ldr	r0, [r7, #12]
  4014d4:	4b16      	ldr	r3, [pc, #88]	; (401530 <pio_set_input+0x7c>)
  4014d6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	f003 030a 	and.w	r3, r3, #10
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d003      	beq.n	4014ea <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4014e2:	68fb      	ldr	r3, [r7, #12]
  4014e4:	68ba      	ldr	r2, [r7, #8]
  4014e6:	621a      	str	r2, [r3, #32]
  4014e8:	e002      	b.n	4014f0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	68ba      	ldr	r2, [r7, #8]
  4014ee:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4014f0:	687b      	ldr	r3, [r7, #4]
  4014f2:	f003 0302 	and.w	r3, r3, #2
  4014f6:	2b00      	cmp	r3, #0
  4014f8:	d004      	beq.n	401504 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4014fa:	68fb      	ldr	r3, [r7, #12]
  4014fc:	68ba      	ldr	r2, [r7, #8]
  4014fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401502:	e008      	b.n	401516 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401504:	687b      	ldr	r3, [r7, #4]
  401506:	f003 0308 	and.w	r3, r3, #8
  40150a:	2b00      	cmp	r3, #0
  40150c:	d003      	beq.n	401516 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40150e:	68fb      	ldr	r3, [r7, #12]
  401510:	68ba      	ldr	r2, [r7, #8]
  401512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401516:	68fb      	ldr	r3, [r7, #12]
  401518:	68ba      	ldr	r2, [r7, #8]
  40151a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40151c:	68fb      	ldr	r3, [r7, #12]
  40151e:	68ba      	ldr	r2, [r7, #8]
  401520:	601a      	str	r2, [r3, #0]
}
  401522:	bf00      	nop
  401524:	3710      	adds	r7, #16
  401526:	46bd      	mov	sp, r7
  401528:	bd80      	pop	{r7, pc}
  40152a:	bf00      	nop
  40152c:	00401599 	.word	0x00401599
  401530:	0040137d 	.word	0x0040137d

00401534 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401534:	b580      	push	{r7, lr}
  401536:	b084      	sub	sp, #16
  401538:	af00      	add	r7, sp, #0
  40153a:	60f8      	str	r0, [r7, #12]
  40153c:	60b9      	str	r1, [r7, #8]
  40153e:	607a      	str	r2, [r7, #4]
  401540:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401542:	68b9      	ldr	r1, [r7, #8]
  401544:	68f8      	ldr	r0, [r7, #12]
  401546:	4b12      	ldr	r3, [pc, #72]	; (401590 <pio_set_output+0x5c>)
  401548:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40154a:	69ba      	ldr	r2, [r7, #24]
  40154c:	68b9      	ldr	r1, [r7, #8]
  40154e:	68f8      	ldr	r0, [r7, #12]
  401550:	4b10      	ldr	r3, [pc, #64]	; (401594 <pio_set_output+0x60>)
  401552:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401554:	683b      	ldr	r3, [r7, #0]
  401556:	2b00      	cmp	r3, #0
  401558:	d003      	beq.n	401562 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40155a:	68fb      	ldr	r3, [r7, #12]
  40155c:	68ba      	ldr	r2, [r7, #8]
  40155e:	651a      	str	r2, [r3, #80]	; 0x50
  401560:	e002      	b.n	401568 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401562:	68fb      	ldr	r3, [r7, #12]
  401564:	68ba      	ldr	r2, [r7, #8]
  401566:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401568:	687b      	ldr	r3, [r7, #4]
  40156a:	2b00      	cmp	r3, #0
  40156c:	d003      	beq.n	401576 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40156e:	68fb      	ldr	r3, [r7, #12]
  401570:	68ba      	ldr	r2, [r7, #8]
  401572:	631a      	str	r2, [r3, #48]	; 0x30
  401574:	e002      	b.n	40157c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401576:	68fb      	ldr	r3, [r7, #12]
  401578:	68ba      	ldr	r2, [r7, #8]
  40157a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40157c:	68fb      	ldr	r3, [r7, #12]
  40157e:	68ba      	ldr	r2, [r7, #8]
  401580:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401582:	68fb      	ldr	r3, [r7, #12]
  401584:	68ba      	ldr	r2, [r7, #8]
  401586:	601a      	str	r2, [r3, #0]
}
  401588:	bf00      	nop
  40158a:	3710      	adds	r7, #16
  40158c:	46bd      	mov	sp, r7
  40158e:	bd80      	pop	{r7, pc}
  401590:	00401599 	.word	0x00401599
  401594:	0040137d 	.word	0x0040137d

00401598 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401598:	b480      	push	{r7}
  40159a:	b083      	sub	sp, #12
  40159c:	af00      	add	r7, sp, #0
  40159e:	6078      	str	r0, [r7, #4]
  4015a0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4015a2:	687b      	ldr	r3, [r7, #4]
  4015a4:	683a      	ldr	r2, [r7, #0]
  4015a6:	645a      	str	r2, [r3, #68]	; 0x44
}
  4015a8:	bf00      	nop
  4015aa:	370c      	adds	r7, #12
  4015ac:	46bd      	mov	sp, r7
  4015ae:	bc80      	pop	{r7}
  4015b0:	4770      	bx	lr

004015b2 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4015b2:	b480      	push	{r7}
  4015b4:	b083      	sub	sp, #12
  4015b6:	af00      	add	r7, sp, #0
  4015b8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4015ba:	687b      	ldr	r3, [r7, #4]
  4015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4015be:	4618      	mov	r0, r3
  4015c0:	370c      	adds	r7, #12
  4015c2:	46bd      	mov	sp, r7
  4015c4:	bc80      	pop	{r7}
  4015c6:	4770      	bx	lr

004015c8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4015c8:	b480      	push	{r7}
  4015ca:	b083      	sub	sp, #12
  4015cc:	af00      	add	r7, sp, #0
  4015ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4015d0:	687b      	ldr	r3, [r7, #4]
  4015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4015d4:	4618      	mov	r0, r3
  4015d6:	370c      	adds	r7, #12
  4015d8:	46bd      	mov	sp, r7
  4015da:	bc80      	pop	{r7}
  4015dc:	4770      	bx	lr
	...

004015e0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4015e0:	b590      	push	{r4, r7, lr}
  4015e2:	b087      	sub	sp, #28
  4015e4:	af02      	add	r7, sp, #8
  4015e6:	6078      	str	r0, [r7, #4]
  4015e8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4015ea:	6878      	ldr	r0, [r7, #4]
  4015ec:	4b63      	ldr	r3, [pc, #396]	; (40177c <pio_configure_pin+0x19c>)
  4015ee:	4798      	blx	r3
  4015f0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4015f2:	683b      	ldr	r3, [r7, #0]
  4015f4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4015f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015fc:	d067      	beq.n	4016ce <pio_configure_pin+0xee>
  4015fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401602:	d809      	bhi.n	401618 <pio_configure_pin+0x38>
  401604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401608:	d02b      	beq.n	401662 <pio_configure_pin+0x82>
  40160a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40160e:	d043      	beq.n	401698 <pio_configure_pin+0xb8>
  401610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401614:	d00a      	beq.n	40162c <pio_configure_pin+0x4c>
  401616:	e0a9      	b.n	40176c <pio_configure_pin+0x18c>
  401618:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40161c:	d07e      	beq.n	40171c <pio_configure_pin+0x13c>
  40161e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401622:	d07b      	beq.n	40171c <pio_configure_pin+0x13c>
  401624:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401628:	d06c      	beq.n	401704 <pio_configure_pin+0x124>
  40162a:	e09f      	b.n	40176c <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40162c:	687b      	ldr	r3, [r7, #4]
  40162e:	f003 031f 	and.w	r3, r3, #31
  401632:	2201      	movs	r2, #1
  401634:	fa02 f303 	lsl.w	r3, r2, r3
  401638:	461a      	mov	r2, r3
  40163a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40163e:	68f8      	ldr	r0, [r7, #12]
  401640:	4b4f      	ldr	r3, [pc, #316]	; (401780 <pio_configure_pin+0x1a0>)
  401642:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401644:	687b      	ldr	r3, [r7, #4]
  401646:	f003 031f 	and.w	r3, r3, #31
  40164a:	2201      	movs	r2, #1
  40164c:	fa02 f303 	lsl.w	r3, r2, r3
  401650:	4619      	mov	r1, r3
  401652:	683b      	ldr	r3, [r7, #0]
  401654:	f003 0301 	and.w	r3, r3, #1
  401658:	461a      	mov	r2, r3
  40165a:	68f8      	ldr	r0, [r7, #12]
  40165c:	4b49      	ldr	r3, [pc, #292]	; (401784 <pio_configure_pin+0x1a4>)
  40165e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401660:	e086      	b.n	401770 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401662:	687b      	ldr	r3, [r7, #4]
  401664:	f003 031f 	and.w	r3, r3, #31
  401668:	2201      	movs	r2, #1
  40166a:	fa02 f303 	lsl.w	r3, r2, r3
  40166e:	461a      	mov	r2, r3
  401670:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401674:	68f8      	ldr	r0, [r7, #12]
  401676:	4b42      	ldr	r3, [pc, #264]	; (401780 <pio_configure_pin+0x1a0>)
  401678:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40167a:	687b      	ldr	r3, [r7, #4]
  40167c:	f003 031f 	and.w	r3, r3, #31
  401680:	2201      	movs	r2, #1
  401682:	fa02 f303 	lsl.w	r3, r2, r3
  401686:	4619      	mov	r1, r3
  401688:	683b      	ldr	r3, [r7, #0]
  40168a:	f003 0301 	and.w	r3, r3, #1
  40168e:	461a      	mov	r2, r3
  401690:	68f8      	ldr	r0, [r7, #12]
  401692:	4b3c      	ldr	r3, [pc, #240]	; (401784 <pio_configure_pin+0x1a4>)
  401694:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401696:	e06b      	b.n	401770 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401698:	687b      	ldr	r3, [r7, #4]
  40169a:	f003 031f 	and.w	r3, r3, #31
  40169e:	2201      	movs	r2, #1
  4016a0:	fa02 f303 	lsl.w	r3, r2, r3
  4016a4:	461a      	mov	r2, r3
  4016a6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4016aa:	68f8      	ldr	r0, [r7, #12]
  4016ac:	4b34      	ldr	r3, [pc, #208]	; (401780 <pio_configure_pin+0x1a0>)
  4016ae:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4016b0:	687b      	ldr	r3, [r7, #4]
  4016b2:	f003 031f 	and.w	r3, r3, #31
  4016b6:	2201      	movs	r2, #1
  4016b8:	fa02 f303 	lsl.w	r3, r2, r3
  4016bc:	4619      	mov	r1, r3
  4016be:	683b      	ldr	r3, [r7, #0]
  4016c0:	f003 0301 	and.w	r3, r3, #1
  4016c4:	461a      	mov	r2, r3
  4016c6:	68f8      	ldr	r0, [r7, #12]
  4016c8:	4b2e      	ldr	r3, [pc, #184]	; (401784 <pio_configure_pin+0x1a4>)
  4016ca:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4016cc:	e050      	b.n	401770 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4016ce:	687b      	ldr	r3, [r7, #4]
  4016d0:	f003 031f 	and.w	r3, r3, #31
  4016d4:	2201      	movs	r2, #1
  4016d6:	fa02 f303 	lsl.w	r3, r2, r3
  4016da:	461a      	mov	r2, r3
  4016dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4016e0:	68f8      	ldr	r0, [r7, #12]
  4016e2:	4b27      	ldr	r3, [pc, #156]	; (401780 <pio_configure_pin+0x1a0>)
  4016e4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4016e6:	687b      	ldr	r3, [r7, #4]
  4016e8:	f003 031f 	and.w	r3, r3, #31
  4016ec:	2201      	movs	r2, #1
  4016ee:	fa02 f303 	lsl.w	r3, r2, r3
  4016f2:	4619      	mov	r1, r3
  4016f4:	683b      	ldr	r3, [r7, #0]
  4016f6:	f003 0301 	and.w	r3, r3, #1
  4016fa:	461a      	mov	r2, r3
  4016fc:	68f8      	ldr	r0, [r7, #12]
  4016fe:	4b21      	ldr	r3, [pc, #132]	; (401784 <pio_configure_pin+0x1a4>)
  401700:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401702:	e035      	b.n	401770 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	f003 031f 	and.w	r3, r3, #31
  40170a:	2201      	movs	r2, #1
  40170c:	fa02 f303 	lsl.w	r3, r2, r3
  401710:	683a      	ldr	r2, [r7, #0]
  401712:	4619      	mov	r1, r3
  401714:	68f8      	ldr	r0, [r7, #12]
  401716:	4b1c      	ldr	r3, [pc, #112]	; (401788 <pio_configure_pin+0x1a8>)
  401718:	4798      	blx	r3
		break;
  40171a:	e029      	b.n	401770 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40171c:	687b      	ldr	r3, [r7, #4]
  40171e:	f003 031f 	and.w	r3, r3, #31
  401722:	2201      	movs	r2, #1
  401724:	fa02 f303 	lsl.w	r3, r2, r3
  401728:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40172a:	683b      	ldr	r3, [r7, #0]
  40172c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401730:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401734:	bf0c      	ite	eq
  401736:	2301      	moveq	r3, #1
  401738:	2300      	movne	r3, #0
  40173a:	b2db      	uxtb	r3, r3
  40173c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40173e:	683b      	ldr	r3, [r7, #0]
  401740:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401744:	2b00      	cmp	r3, #0
  401746:	bf14      	ite	ne
  401748:	2301      	movne	r3, #1
  40174a:	2300      	moveq	r3, #0
  40174c:	b2db      	uxtb	r3, r3
  40174e:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401750:	683b      	ldr	r3, [r7, #0]
  401752:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401756:	2b00      	cmp	r3, #0
  401758:	bf14      	ite	ne
  40175a:	2301      	movne	r3, #1
  40175c:	2300      	moveq	r3, #0
  40175e:	b2db      	uxtb	r3, r3
  401760:	9300      	str	r3, [sp, #0]
  401762:	4603      	mov	r3, r0
  401764:	68f8      	ldr	r0, [r7, #12]
  401766:	4c09      	ldr	r4, [pc, #36]	; (40178c <pio_configure_pin+0x1ac>)
  401768:	47a0      	blx	r4
		break;
  40176a:	e001      	b.n	401770 <pio_configure_pin+0x190>

	default:
		return 0;
  40176c:	2300      	movs	r3, #0
  40176e:	e000      	b.n	401772 <pio_configure_pin+0x192>
	}

	return 1;
  401770:	2301      	movs	r3, #1
}
  401772:	4618      	mov	r0, r3
  401774:	3714      	adds	r7, #20
  401776:	46bd      	mov	sp, r7
  401778:	bd90      	pop	{r4, r7, pc}
  40177a:	bf00      	nop
  40177c:	00401791 	.word	0x00401791
  401780:	004013a7 	.word	0x004013a7
  401784:	0040137d 	.word	0x0040137d
  401788:	004014b5 	.word	0x004014b5
  40178c:	00401535 	.word	0x00401535

00401790 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401790:	b480      	push	{r7}
  401792:	b085      	sub	sp, #20
  401794:	af00      	add	r7, sp, #0
  401796:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401798:	687b      	ldr	r3, [r7, #4]
  40179a:	095b      	lsrs	r3, r3, #5
  40179c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4017a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4017a4:	025b      	lsls	r3, r3, #9
  4017a6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4017a8:	68fb      	ldr	r3, [r7, #12]
}
  4017aa:	4618      	mov	r0, r3
  4017ac:	3714      	adds	r7, #20
  4017ae:	46bd      	mov	sp, r7
  4017b0:	bc80      	pop	{r7}
  4017b2:	4770      	bx	lr

004017b4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4017b4:	b480      	push	{r7}
  4017b6:	b085      	sub	sp, #20
  4017b8:	af00      	add	r7, sp, #0
  4017ba:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4017bc:	491c      	ldr	r1, [pc, #112]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  4017be:	4b1c      	ldr	r3, [pc, #112]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  4017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4017c6:	687b      	ldr	r3, [r7, #4]
  4017c8:	4313      	orrs	r3, r2
  4017ca:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4017d0:	60fb      	str	r3, [r7, #12]
  4017d2:	e007      	b.n	4017e4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4017d4:	68fb      	ldr	r3, [r7, #12]
  4017d6:	2b00      	cmp	r3, #0
  4017d8:	d101      	bne.n	4017de <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4017da:	2301      	movs	r3, #1
  4017dc:	e023      	b.n	401826 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4017de:	68fb      	ldr	r3, [r7, #12]
  4017e0:	3b01      	subs	r3, #1
  4017e2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017e4:	4b12      	ldr	r3, [pc, #72]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  4017e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017e8:	f003 0308 	and.w	r3, r3, #8
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d0f1      	beq.n	4017d4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4017f0:	4a0f      	ldr	r2, [pc, #60]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  4017f2:	4b0f      	ldr	r3, [pc, #60]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  4017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017f6:	f023 0303 	bic.w	r3, r3, #3
  4017fa:	f043 0302 	orr.w	r3, r3, #2
  4017fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401800:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401804:	60fb      	str	r3, [r7, #12]
  401806:	e007      	b.n	401818 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401808:	68fb      	ldr	r3, [r7, #12]
  40180a:	2b00      	cmp	r3, #0
  40180c:	d101      	bne.n	401812 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40180e:	2301      	movs	r3, #1
  401810:	e009      	b.n	401826 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401812:	68fb      	ldr	r3, [r7, #12]
  401814:	3b01      	subs	r3, #1
  401816:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401818:	4b05      	ldr	r3, [pc, #20]	; (401830 <pmc_switch_mck_to_pllack+0x7c>)
  40181a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40181c:	f003 0308 	and.w	r3, r3, #8
  401820:	2b00      	cmp	r3, #0
  401822:	d0f1      	beq.n	401808 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401824:	2300      	movs	r3, #0
}
  401826:	4618      	mov	r0, r3
  401828:	3714      	adds	r7, #20
  40182a:	46bd      	mov	sp, r7
  40182c:	bc80      	pop	{r7}
  40182e:	4770      	bx	lr
  401830:	400e0400 	.word	0x400e0400

00401834 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401834:	b480      	push	{r7}
  401836:	b083      	sub	sp, #12
  401838:	af00      	add	r7, sp, #0
  40183a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40183c:	687b      	ldr	r3, [r7, #4]
  40183e:	2b01      	cmp	r3, #1
  401840:	d107      	bne.n	401852 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401842:	4a08      	ldr	r2, [pc, #32]	; (401864 <pmc_switch_sclk_to_32kxtal+0x30>)
  401844:	4b07      	ldr	r3, [pc, #28]	; (401864 <pmc_switch_sclk_to_32kxtal+0x30>)
  401846:	689b      	ldr	r3, [r3, #8]
  401848:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40184c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401850:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401852:	4b04      	ldr	r3, [pc, #16]	; (401864 <pmc_switch_sclk_to_32kxtal+0x30>)
  401854:	4a04      	ldr	r2, [pc, #16]	; (401868 <pmc_switch_sclk_to_32kxtal+0x34>)
  401856:	601a      	str	r2, [r3, #0]
}
  401858:	bf00      	nop
  40185a:	370c      	adds	r7, #12
  40185c:	46bd      	mov	sp, r7
  40185e:	bc80      	pop	{r7}
  401860:	4770      	bx	lr
  401862:	bf00      	nop
  401864:	400e1410 	.word	0x400e1410
  401868:	a5000008 	.word	0xa5000008

0040186c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40186c:	b480      	push	{r7}
  40186e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401870:	4b09      	ldr	r3, [pc, #36]	; (401898 <pmc_osc_is_ready_32kxtal+0x2c>)
  401872:	695b      	ldr	r3, [r3, #20]
  401874:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401878:	2b00      	cmp	r3, #0
  40187a:	d007      	beq.n	40188c <pmc_osc_is_ready_32kxtal+0x20>
  40187c:	4b07      	ldr	r3, [pc, #28]	; (40189c <pmc_osc_is_ready_32kxtal+0x30>)
  40187e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401880:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401884:	2b00      	cmp	r3, #0
  401886:	d001      	beq.n	40188c <pmc_osc_is_ready_32kxtal+0x20>
  401888:	2301      	movs	r3, #1
  40188a:	e000      	b.n	40188e <pmc_osc_is_ready_32kxtal+0x22>
  40188c:	2300      	movs	r3, #0
}
  40188e:	4618      	mov	r0, r3
  401890:	46bd      	mov	sp, r7
  401892:	bc80      	pop	{r7}
  401894:	4770      	bx	lr
  401896:	bf00      	nop
  401898:	400e1410 	.word	0x400e1410
  40189c:	400e0400 	.word	0x400e0400

004018a0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4018a0:	b480      	push	{r7}
  4018a2:	b083      	sub	sp, #12
  4018a4:	af00      	add	r7, sp, #0
  4018a6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4018a8:	4a18      	ldr	r2, [pc, #96]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018aa:	4b18      	ldr	r3, [pc, #96]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018ac:	6a1b      	ldr	r3, [r3, #32]
  4018ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018b2:	f043 0308 	orr.w	r3, r3, #8
  4018b6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4018b8:	bf00      	nop
  4018ba:	4b14      	ldr	r3, [pc, #80]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4018c2:	2b00      	cmp	r3, #0
  4018c4:	d0f9      	beq.n	4018ba <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4018c6:	4911      	ldr	r1, [pc, #68]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018c8:	4b10      	ldr	r3, [pc, #64]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018ca:	6a1b      	ldr	r3, [r3, #32]
  4018cc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4018d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4018d4:	687a      	ldr	r2, [r7, #4]
  4018d6:	4313      	orrs	r3, r2
  4018d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4018dc:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4018de:	bf00      	nop
  4018e0:	4b0a      	ldr	r3, [pc, #40]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4018e8:	2b00      	cmp	r3, #0
  4018ea:	d0f9      	beq.n	4018e0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4018ec:	4a07      	ldr	r2, [pc, #28]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018ee:	4b07      	ldr	r3, [pc, #28]	; (40190c <pmc_switch_mainck_to_fastrc+0x6c>)
  4018f0:	6a1b      	ldr	r3, [r3, #32]
  4018f2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4018fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018fe:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401900:	bf00      	nop
  401902:	370c      	adds	r7, #12
  401904:	46bd      	mov	sp, r7
  401906:	bc80      	pop	{r7}
  401908:	4770      	bx	lr
  40190a:	bf00      	nop
  40190c:	400e0400 	.word	0x400e0400

00401910 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401910:	b480      	push	{r7}
  401912:	b083      	sub	sp, #12
  401914:	af00      	add	r7, sp, #0
  401916:	6078      	str	r0, [r7, #4]
  401918:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40191a:	687b      	ldr	r3, [r7, #4]
  40191c:	2b00      	cmp	r3, #0
  40191e:	d008      	beq.n	401932 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401920:	4916      	ldr	r1, [pc, #88]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401922:	4b16      	ldr	r3, [pc, #88]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401924:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401926:	4a16      	ldr	r2, [pc, #88]	; (401980 <pmc_switch_mainck_to_xtal+0x70>)
  401928:	401a      	ands	r2, r3
  40192a:	4b16      	ldr	r3, [pc, #88]	; (401984 <pmc_switch_mainck_to_xtal+0x74>)
  40192c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40192e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401930:	e01e      	b.n	401970 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401932:	4912      	ldr	r1, [pc, #72]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401934:	4b11      	ldr	r3, [pc, #68]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401936:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401938:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40193c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401940:	683a      	ldr	r2, [r7, #0]
  401942:	0212      	lsls	r2, r2, #8
  401944:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401946:	4313      	orrs	r3, r2
  401948:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40194c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401950:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401952:	bf00      	nop
  401954:	4b09      	ldr	r3, [pc, #36]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401958:	f003 0301 	and.w	r3, r3, #1
  40195c:	2b00      	cmp	r3, #0
  40195e:	d0f9      	beq.n	401954 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401960:	4a06      	ldr	r2, [pc, #24]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401962:	4b06      	ldr	r3, [pc, #24]	; (40197c <pmc_switch_mainck_to_xtal+0x6c>)
  401964:	6a1b      	ldr	r3, [r3, #32]
  401966:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40196e:	6213      	str	r3, [r2, #32]
}
  401970:	bf00      	nop
  401972:	370c      	adds	r7, #12
  401974:	46bd      	mov	sp, r7
  401976:	bc80      	pop	{r7}
  401978:	4770      	bx	lr
  40197a:	bf00      	nop
  40197c:	400e0400 	.word	0x400e0400
  401980:	fec8fffc 	.word	0xfec8fffc
  401984:	01370002 	.word	0x01370002

00401988 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401988:	b480      	push	{r7}
  40198a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40198c:	4b03      	ldr	r3, [pc, #12]	; (40199c <pmc_osc_is_ready_mainck+0x14>)
  40198e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401994:	4618      	mov	r0, r3
  401996:	46bd      	mov	sp, r7
  401998:	bc80      	pop	{r7}
  40199a:	4770      	bx	lr
  40199c:	400e0400 	.word	0x400e0400

004019a0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4019a0:	b480      	push	{r7}
  4019a2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4019a4:	4b03      	ldr	r3, [pc, #12]	; (4019b4 <pmc_disable_pllack+0x14>)
  4019a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4019aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4019ac:	bf00      	nop
  4019ae:	46bd      	mov	sp, r7
  4019b0:	bc80      	pop	{r7}
  4019b2:	4770      	bx	lr
  4019b4:	400e0400 	.word	0x400e0400

004019b8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4019b8:	b480      	push	{r7}
  4019ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4019bc:	4b03      	ldr	r3, [pc, #12]	; (4019cc <pmc_is_locked_pllack+0x14>)
  4019be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019c0:	f003 0302 	and.w	r3, r3, #2
}
  4019c4:	4618      	mov	r0, r3
  4019c6:	46bd      	mov	sp, r7
  4019c8:	bc80      	pop	{r7}
  4019ca:	4770      	bx	lr
  4019cc:	400e0400 	.word	0x400e0400

004019d0 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4019d0:	b480      	push	{r7}
  4019d2:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4019d4:	4b03      	ldr	r3, [pc, #12]	; (4019e4 <pmc_disable_pllbck+0x14>)
  4019d6:	2200      	movs	r2, #0
  4019d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4019da:	bf00      	nop
  4019dc:	46bd      	mov	sp, r7
  4019de:	bc80      	pop	{r7}
  4019e0:	4770      	bx	lr
  4019e2:	bf00      	nop
  4019e4:	400e0400 	.word	0x400e0400

004019e8 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4019e8:	b480      	push	{r7}
  4019ea:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4019ec:	4b03      	ldr	r3, [pc, #12]	; (4019fc <pmc_is_locked_pllbck+0x14>)
  4019ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019f0:	f003 0304 	and.w	r3, r3, #4
}
  4019f4:	4618      	mov	r0, r3
  4019f6:	46bd      	mov	sp, r7
  4019f8:	bc80      	pop	{r7}
  4019fa:	4770      	bx	lr
  4019fc:	400e0400 	.word	0x400e0400

00401a00 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401a00:	b480      	push	{r7}
  401a02:	b083      	sub	sp, #12
  401a04:	af00      	add	r7, sp, #0
  401a06:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401a08:	687b      	ldr	r3, [r7, #4]
  401a0a:	2b22      	cmp	r3, #34	; 0x22
  401a0c:	d901      	bls.n	401a12 <pmc_enable_periph_clk+0x12>
		return 1;
  401a0e:	2301      	movs	r3, #1
  401a10:	e02f      	b.n	401a72 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	2b1f      	cmp	r3, #31
  401a16:	d813      	bhi.n	401a40 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a18:	4b18      	ldr	r3, [pc, #96]	; (401a7c <pmc_enable_periph_clk+0x7c>)
  401a1a:	699a      	ldr	r2, [r3, #24]
  401a1c:	2101      	movs	r1, #1
  401a1e:	687b      	ldr	r3, [r7, #4]
  401a20:	fa01 f303 	lsl.w	r3, r1, r3
  401a24:	401a      	ands	r2, r3
  401a26:	2101      	movs	r1, #1
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	fa01 f303 	lsl.w	r3, r1, r3
  401a2e:	429a      	cmp	r2, r3
  401a30:	d01e      	beq.n	401a70 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a32:	4a12      	ldr	r2, [pc, #72]	; (401a7c <pmc_enable_periph_clk+0x7c>)
  401a34:	2101      	movs	r1, #1
  401a36:	687b      	ldr	r3, [r7, #4]
  401a38:	fa01 f303 	lsl.w	r3, r1, r3
  401a3c:	6113      	str	r3, [r2, #16]
  401a3e:	e017      	b.n	401a70 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	3b20      	subs	r3, #32
  401a44:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a46:	4b0d      	ldr	r3, [pc, #52]	; (401a7c <pmc_enable_periph_clk+0x7c>)
  401a48:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a4c:	2101      	movs	r1, #1
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	fa01 f303 	lsl.w	r3, r1, r3
  401a54:	401a      	ands	r2, r3
  401a56:	2101      	movs	r1, #1
  401a58:	687b      	ldr	r3, [r7, #4]
  401a5a:	fa01 f303 	lsl.w	r3, r1, r3
  401a5e:	429a      	cmp	r2, r3
  401a60:	d006      	beq.n	401a70 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a62:	4a06      	ldr	r2, [pc, #24]	; (401a7c <pmc_enable_periph_clk+0x7c>)
  401a64:	2101      	movs	r1, #1
  401a66:	687b      	ldr	r3, [r7, #4]
  401a68:	fa01 f303 	lsl.w	r3, r1, r3
  401a6c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401a70:	2300      	movs	r3, #0
}
  401a72:	4618      	mov	r0, r3
  401a74:	370c      	adds	r7, #12
  401a76:	46bd      	mov	sp, r7
  401a78:	bc80      	pop	{r7}
  401a7a:	4770      	bx	lr
  401a7c:	400e0400 	.word	0x400e0400

00401a80 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401a80:	b580      	push	{r7, lr}
  401a82:	b082      	sub	sp, #8
  401a84:	af00      	add	r7, sp, #0
  401a86:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401a88:	6878      	ldr	r0, [r7, #4]
  401a8a:	4b03      	ldr	r3, [pc, #12]	; (401a98 <sysclk_enable_peripheral_clock+0x18>)
  401a8c:	4798      	blx	r3
}
  401a8e:	bf00      	nop
  401a90:	3708      	adds	r7, #8
  401a92:	46bd      	mov	sp, r7
  401a94:	bd80      	pop	{r7, pc}
  401a96:	bf00      	nop
  401a98:	00401a01 	.word	0x00401a01

00401a9c <ioport_init>:
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401aa0:	200b      	movs	r0, #11
  401aa2:	4b03      	ldr	r3, [pc, #12]	; (401ab0 <ioport_init+0x14>)
  401aa4:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401aa6:	200c      	movs	r0, #12
  401aa8:	4b01      	ldr	r3, [pc, #4]	; (401ab0 <ioport_init+0x14>)
  401aaa:	4798      	blx	r3
}
  401aac:	bf00      	nop
  401aae:	bd80      	pop	{r7, pc}
  401ab0:	00401a81 	.word	0x00401a81

00401ab4 <ioport_set_pin_mode>:
{
  401ab4:	b480      	push	{r7}
  401ab6:	b08d      	sub	sp, #52	; 0x34
  401ab8:	af00      	add	r7, sp, #0
  401aba:	6078      	str	r0, [r7, #4]
  401abc:	6039      	str	r1, [r7, #0]
  401abe:	687b      	ldr	r3, [r7, #4]
  401ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ac2:	683b      	ldr	r3, [r7, #0]
  401ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  401ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ac8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401acc:	095a      	lsrs	r2, r3, #5
  401ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ad0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401ad2:	6a3b      	ldr	r3, [r7, #32]
  401ad4:	f003 031f 	and.w	r3, r3, #31
  401ad8:	2101      	movs	r1, #1
  401ada:	fa01 f303 	lsl.w	r3, r1, r3
  401ade:	61fa      	str	r2, [r7, #28]
  401ae0:	61bb      	str	r3, [r7, #24]
  401ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401ae4:	617b      	str	r3, [r7, #20]
  401ae6:	69fb      	ldr	r3, [r7, #28]
  401ae8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401aea:	693b      	ldr	r3, [r7, #16]
  401aec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401af0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401af4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401af6:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401af8:	697b      	ldr	r3, [r7, #20]
  401afa:	f003 0308 	and.w	r3, r3, #8
  401afe:	2b00      	cmp	r3, #0
  401b00:	d003      	beq.n	401b0a <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401b02:	68fb      	ldr	r3, [r7, #12]
  401b04:	69ba      	ldr	r2, [r7, #24]
  401b06:	665a      	str	r2, [r3, #100]	; 0x64
  401b08:	e002      	b.n	401b10 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  401b0a:	68fb      	ldr	r3, [r7, #12]
  401b0c:	69ba      	ldr	r2, [r7, #24]
  401b0e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401b10:	697b      	ldr	r3, [r7, #20]
  401b12:	f003 0310 	and.w	r3, r3, #16
  401b16:	2b00      	cmp	r3, #0
  401b18:	d004      	beq.n	401b24 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401b1a:	68fb      	ldr	r3, [r7, #12]
  401b1c:	69ba      	ldr	r2, [r7, #24]
  401b1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401b22:	e003      	b.n	401b2c <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  401b24:	68fb      	ldr	r3, [r7, #12]
  401b26:	69ba      	ldr	r2, [r7, #24]
  401b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401b2c:	697b      	ldr	r3, [r7, #20]
  401b2e:	f003 0320 	and.w	r3, r3, #32
  401b32:	2b00      	cmp	r3, #0
  401b34:	d003      	beq.n	401b3e <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401b36:	68fb      	ldr	r3, [r7, #12]
  401b38:	69ba      	ldr	r2, [r7, #24]
  401b3a:	651a      	str	r2, [r3, #80]	; 0x50
  401b3c:	e002      	b.n	401b44 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  401b3e:	68fb      	ldr	r3, [r7, #12]
  401b40:	69ba      	ldr	r2, [r7, #24]
  401b42:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401b44:	697b      	ldr	r3, [r7, #20]
  401b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	d003      	beq.n	401b56 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  401b4e:	68fb      	ldr	r3, [r7, #12]
  401b50:	69ba      	ldr	r2, [r7, #24]
  401b52:	621a      	str	r2, [r3, #32]
  401b54:	e002      	b.n	401b5c <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  401b56:	68fb      	ldr	r3, [r7, #12]
  401b58:	69ba      	ldr	r2, [r7, #24]
  401b5a:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401b5c:	697b      	ldr	r3, [r7, #20]
  401b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401b62:	2b00      	cmp	r3, #0
  401b64:	d004      	beq.n	401b70 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  401b66:	68fb      	ldr	r3, [r7, #12]
  401b68:	69ba      	ldr	r2, [r7, #24]
  401b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401b6e:	e003      	b.n	401b78 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  401b70:	68fb      	ldr	r3, [r7, #12]
  401b72:	69ba      	ldr	r2, [r7, #24]
  401b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401b78:	697b      	ldr	r3, [r7, #20]
  401b7a:	f003 0301 	and.w	r3, r3, #1
  401b7e:	2b00      	cmp	r3, #0
  401b80:	d006      	beq.n	401b90 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401b82:	68fb      	ldr	r3, [r7, #12]
  401b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b86:	69bb      	ldr	r3, [r7, #24]
  401b88:	431a      	orrs	r2, r3
  401b8a:	68fb      	ldr	r3, [r7, #12]
  401b8c:	671a      	str	r2, [r3, #112]	; 0x70
  401b8e:	e006      	b.n	401b9e <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  401b90:	68fb      	ldr	r3, [r7, #12]
  401b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401b94:	69bb      	ldr	r3, [r7, #24]
  401b96:	43db      	mvns	r3, r3
  401b98:	401a      	ands	r2, r3
  401b9a:	68fb      	ldr	r3, [r7, #12]
  401b9c:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401b9e:	697b      	ldr	r3, [r7, #20]
  401ba0:	f003 0302 	and.w	r3, r3, #2
  401ba4:	2b00      	cmp	r3, #0
  401ba6:	d006      	beq.n	401bb6 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401ba8:	68fb      	ldr	r3, [r7, #12]
  401baa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401bac:	69bb      	ldr	r3, [r7, #24]
  401bae:	431a      	orrs	r2, r3
  401bb0:	68fb      	ldr	r3, [r7, #12]
  401bb2:	675a      	str	r2, [r3, #116]	; 0x74
}
  401bb4:	e006      	b.n	401bc4 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  401bb6:	68fb      	ldr	r3, [r7, #12]
  401bb8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401bba:	69bb      	ldr	r3, [r7, #24]
  401bbc:	43db      	mvns	r3, r3
  401bbe:	401a      	ands	r2, r3
  401bc0:	68fb      	ldr	r3, [r7, #12]
  401bc2:	675a      	str	r2, [r3, #116]	; 0x74
  401bc4:	bf00      	nop
  401bc6:	3734      	adds	r7, #52	; 0x34
  401bc8:	46bd      	mov	sp, r7
  401bca:	bc80      	pop	{r7}
  401bcc:	4770      	bx	lr

00401bce <ioport_set_pin_dir>:
{
  401bce:	b480      	push	{r7}
  401bd0:	b08d      	sub	sp, #52	; 0x34
  401bd2:	af00      	add	r7, sp, #0
  401bd4:	6078      	str	r0, [r7, #4]
  401bd6:	460b      	mov	r3, r1
  401bd8:	70fb      	strb	r3, [r7, #3]
  401bda:	687b      	ldr	r3, [r7, #4]
  401bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  401bde:	78fb      	ldrb	r3, [r7, #3]
  401be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401be6:	627b      	str	r3, [r7, #36]	; 0x24
  401be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bea:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401bec:	6a3b      	ldr	r3, [r7, #32]
  401bee:	095b      	lsrs	r3, r3, #5
  401bf0:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401bf2:	69fb      	ldr	r3, [r7, #28]
  401bf4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401bf8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401bfc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401bfe:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401c04:	2b01      	cmp	r3, #1
  401c06:	d109      	bne.n	401c1c <ioport_set_pin_dir+0x4e>
  401c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c0a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401c0c:	697b      	ldr	r3, [r7, #20]
  401c0e:	f003 031f 	and.w	r3, r3, #31
  401c12:	2201      	movs	r2, #1
  401c14:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401c16:	69bb      	ldr	r3, [r7, #24]
  401c18:	611a      	str	r2, [r3, #16]
  401c1a:	e00c      	b.n	401c36 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401c20:	2b00      	cmp	r3, #0
  401c22:	d108      	bne.n	401c36 <ioport_set_pin_dir+0x68>
  401c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c26:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401c28:	693b      	ldr	r3, [r7, #16]
  401c2a:	f003 031f 	and.w	r3, r3, #31
  401c2e:	2201      	movs	r2, #1
  401c30:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401c32:	69bb      	ldr	r3, [r7, #24]
  401c34:	615a      	str	r2, [r3, #20]
  401c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c38:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401c3a:	68fb      	ldr	r3, [r7, #12]
  401c3c:	f003 031f 	and.w	r3, r3, #31
  401c40:	2201      	movs	r2, #1
  401c42:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401c44:	69bb      	ldr	r3, [r7, #24]
  401c46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401c4a:	bf00      	nop
  401c4c:	3734      	adds	r7, #52	; 0x34
  401c4e:	46bd      	mov	sp, r7
  401c50:	bc80      	pop	{r7}
  401c52:	4770      	bx	lr

00401c54 <ioport_set_pin_level>:
{
  401c54:	b480      	push	{r7}
  401c56:	b08b      	sub	sp, #44	; 0x2c
  401c58:	af00      	add	r7, sp, #0
  401c5a:	6078      	str	r0, [r7, #4]
  401c5c:	460b      	mov	r3, r1
  401c5e:	70fb      	strb	r3, [r7, #3]
  401c60:	687b      	ldr	r3, [r7, #4]
  401c62:	627b      	str	r3, [r7, #36]	; 0x24
  401c64:	78fb      	ldrb	r3, [r7, #3]
  401c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c6c:	61fb      	str	r3, [r7, #28]
  401c6e:	69fb      	ldr	r3, [r7, #28]
  401c70:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401c72:	69bb      	ldr	r3, [r7, #24]
  401c74:	095b      	lsrs	r3, r3, #5
  401c76:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c78:	697b      	ldr	r3, [r7, #20]
  401c7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401c7e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401c82:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401c84:	613b      	str	r3, [r7, #16]
	if (level) {
  401c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	d009      	beq.n	401ca2 <ioport_set_pin_level+0x4e>
  401c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c90:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401c92:	68fb      	ldr	r3, [r7, #12]
  401c94:	f003 031f 	and.w	r3, r3, #31
  401c98:	2201      	movs	r2, #1
  401c9a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401c9c:	693b      	ldr	r3, [r7, #16]
  401c9e:	631a      	str	r2, [r3, #48]	; 0x30
}
  401ca0:	e008      	b.n	401cb4 <ioport_set_pin_level+0x60>
  401ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401ca4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401ca6:	68bb      	ldr	r3, [r7, #8]
  401ca8:	f003 031f 	and.w	r3, r3, #31
  401cac:	2201      	movs	r2, #1
  401cae:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401cb0:	693b      	ldr	r3, [r7, #16]
  401cb2:	635a      	str	r2, [r3, #52]	; 0x34
  401cb4:	bf00      	nop
  401cb6:	372c      	adds	r7, #44	; 0x2c
  401cb8:	46bd      	mov	sp, r7
  401cba:	bc80      	pop	{r7}
  401cbc:	4770      	bx	lr
	...

00401cc0 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "camera.h"

void board_init(void)
{
  401cc0:	b580      	push	{r7, lr}
  401cc2:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  401cc4:	4844      	ldr	r0, [pc, #272]	; (401dd8 <board_init+0x118>)
  401cc6:	4b45      	ldr	r3, [pc, #276]	; (401ddc <board_init+0x11c>)
  401cc8:	4798      	blx	r3
	
	ioport_init();
  401cca:	4b45      	ldr	r3, [pc, #276]	; (401de0 <board_init+0x120>)
  401ccc:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  401cce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401cd2:	2013      	movs	r0, #19
  401cd4:	4b43      	ldr	r3, [pc, #268]	; (401de4 <board_init+0x124>)
  401cd6:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401cd8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401cdc:	2013      	movs	r0, #19
  401cde:	4b41      	ldr	r3, [pc, #260]	; (401de4 <board_init+0x124>)
  401ce0:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  401ce2:	2101      	movs	r1, #1
  401ce4:	2013      	movs	r0, #19
  401ce6:	4b40      	ldr	r3, [pc, #256]	; (401de8 <board_init+0x128>)
  401ce8:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  401cea:	2100      	movs	r1, #0
  401cec:	2013      	movs	r0, #19
  401cee:	4b3f      	ldr	r3, [pc, #252]	; (401dec <board_init+0x12c>)
  401cf0:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  401cf2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401cf6:	2007      	movs	r0, #7
  401cf8:	4b3a      	ldr	r3, [pc, #232]	; (401de4 <board_init+0x124>)
  401cfa:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  401cfc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d00:	2007      	movs	r0, #7
  401d02:	4b38      	ldr	r3, [pc, #224]	; (401de4 <board_init+0x124>)
  401d04:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  401d06:	2101      	movs	r1, #1
  401d08:	2007      	movs	r0, #7
  401d0a:	4b37      	ldr	r3, [pc, #220]	; (401de8 <board_init+0x128>)
  401d0c:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  401d0e:	2100      	movs	r1, #0
  401d10:	2007      	movs	r0, #7
  401d12:	4b36      	ldr	r3, [pc, #216]	; (401dec <board_init+0x12c>)
  401d14:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  401d16:	4936      	ldr	r1, [pc, #216]	; (401df0 <board_init+0x130>)
  401d18:	2021      	movs	r0, #33	; 0x21
  401d1a:	4b32      	ldr	r3, [pc, #200]	; (401de4 <board_init+0x124>)
  401d1c:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  401d1e:	2100      	movs	r1, #0
  401d20:	2021      	movs	r0, #33	; 0x21
  401d22:	4b31      	ldr	r3, [pc, #196]	; (401de8 <board_init+0x128>)
  401d24:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  401d26:	2108      	movs	r1, #8
  401d28:	2021      	movs	r0, #33	; 0x21
  401d2a:	4b32      	ldr	r3, [pc, #200]	; (401df4 <board_init+0x134>)
  401d2c:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401d2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d32:	2005      	movs	r0, #5
  401d34:	4b2b      	ldr	r3, [pc, #172]	; (401de4 <board_init+0x124>)
  401d36:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401d38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d3c:	2006      	movs	r0, #6
  401d3e:	4b29      	ldr	r3, [pc, #164]	; (401de4 <board_init+0x124>)
  401d40:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401d42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d46:	2008      	movs	r0, #8
  401d48:	4b26      	ldr	r3, [pc, #152]	; (401de4 <board_init+0x124>)
  401d4a:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401d4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d50:	2011      	movs	r0, #17
  401d52:	4b24      	ldr	r3, [pc, #144]	; (401de4 <board_init+0x124>)
  401d54:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401d56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d5a:	2003      	movs	r0, #3
  401d5c:	4b21      	ldr	r3, [pc, #132]	; (401de4 <board_init+0x124>)
  401d5e:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401d60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d64:	2004      	movs	r0, #4
  401d66:	4b1f      	ldr	r3, [pc, #124]	; (401de4 <board_init+0x124>)
  401d68:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  401d6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d6e:	2014      	movs	r0, #20
  401d70:	4b1c      	ldr	r3, [pc, #112]	; (401de4 <board_init+0x124>)
  401d72:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  401d74:	2101      	movs	r1, #1
  401d76:	2014      	movs	r0, #20
  401d78:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <board_init+0x128>)
  401d7a:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  401d7c:	2100      	movs	r1, #0
  401d7e:	2014      	movs	r0, #20
  401d80:	4b1a      	ldr	r3, [pc, #104]	; (401dec <board_init+0x12c>)
  401d82:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401d84:	2171      	movs	r1, #113	; 0x71
  401d86:	2010      	movs	r0, #16
  401d88:	4b16      	ldr	r3, [pc, #88]	; (401de4 <board_init+0x124>)
  401d8a:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401d8c:	2171      	movs	r1, #113	; 0x71
  401d8e:	200f      	movs	r0, #15
  401d90:	4b14      	ldr	r3, [pc, #80]	; (401de4 <board_init+0x124>)
  401d92:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401d94:	4918      	ldr	r1, [pc, #96]	; (401df8 <board_init+0x138>)
  401d96:	2018      	movs	r0, #24
  401d98:	4b12      	ldr	r3, [pc, #72]	; (401de4 <board_init+0x124>)
  401d9a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401d9c:	4916      	ldr	r1, [pc, #88]	; (401df8 <board_init+0x138>)
  401d9e:	2019      	movs	r0, #25
  401da0:	4b10      	ldr	r3, [pc, #64]	; (401de4 <board_init+0x124>)
  401da2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401da4:	4914      	ldr	r1, [pc, #80]	; (401df8 <board_init+0x138>)
  401da6:	201a      	movs	r0, #26
  401da8:	4b0e      	ldr	r3, [pc, #56]	; (401de4 <board_init+0x124>)
  401daa:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401dac:	4912      	ldr	r1, [pc, #72]	; (401df8 <board_init+0x138>)
  401dae:	201b      	movs	r0, #27
  401db0:	4b0c      	ldr	r3, [pc, #48]	; (401de4 <board_init+0x124>)
  401db2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401db4:	4910      	ldr	r1, [pc, #64]	; (401df8 <board_init+0x138>)
  401db6:	201c      	movs	r0, #28
  401db8:	4b0a      	ldr	r3, [pc, #40]	; (401de4 <board_init+0x124>)
  401dba:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401dbc:	490e      	ldr	r1, [pc, #56]	; (401df8 <board_init+0x138>)
  401dbe:	201d      	movs	r0, #29
  401dc0:	4b08      	ldr	r3, [pc, #32]	; (401de4 <board_init+0x124>)
  401dc2:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  401dc4:	490c      	ldr	r1, [pc, #48]	; (401df8 <board_init+0x138>)
  401dc6:	201e      	movs	r0, #30
  401dc8:	4b06      	ldr	r3, [pc, #24]	; (401de4 <board_init+0x124>)
  401dca:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  401dcc:	490a      	ldr	r1, [pc, #40]	; (401df8 <board_init+0x138>)
  401dce:	201f      	movs	r0, #31
  401dd0:	4b04      	ldr	r3, [pc, #16]	; (401de4 <board_init+0x124>)
  401dd2:	4798      	blx	r3
}
  401dd4:	bf00      	nop
  401dd6:	bd80      	pop	{r7, pc}
  401dd8:	400e1450 	.word	0x400e1450
  401ddc:	00400469 	.word	0x00400469
  401de0:	00401a9d 	.word	0x00401a9d
  401de4:	004015e1 	.word	0x004015e1
  401de8:	00401bcf 	.word	0x00401bcf
  401dec:	00401c55 	.word	0x00401c55
  401df0:	28000079 	.word	0x28000079
  401df4:	00401ab5 	.word	0x00401ab5
  401df8:	28000001 	.word	0x28000001

00401dfc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401dfc:	b580      	push	{r7, lr}
  401dfe:	b084      	sub	sp, #16
  401e00:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401e02:	4b27      	ldr	r3, [pc, #156]	; (401ea0 <Reset_Handler+0xa4>)
  401e04:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401e06:	4b27      	ldr	r3, [pc, #156]	; (401ea4 <Reset_Handler+0xa8>)
  401e08:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401e0a:	68fa      	ldr	r2, [r7, #12]
  401e0c:	68bb      	ldr	r3, [r7, #8]
  401e0e:	429a      	cmp	r2, r3
  401e10:	d90d      	bls.n	401e2e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401e12:	e007      	b.n	401e24 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401e14:	68bb      	ldr	r3, [r7, #8]
  401e16:	1d1a      	adds	r2, r3, #4
  401e18:	60ba      	str	r2, [r7, #8]
  401e1a:	68fa      	ldr	r2, [r7, #12]
  401e1c:	1d11      	adds	r1, r2, #4
  401e1e:	60f9      	str	r1, [r7, #12]
  401e20:	6812      	ldr	r2, [r2, #0]
  401e22:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401e24:	68bb      	ldr	r3, [r7, #8]
  401e26:	4a20      	ldr	r2, [pc, #128]	; (401ea8 <Reset_Handler+0xac>)
  401e28:	4293      	cmp	r3, r2
  401e2a:	d3f3      	bcc.n	401e14 <Reset_Handler+0x18>
  401e2c:	e020      	b.n	401e70 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401e2e:	68fa      	ldr	r2, [r7, #12]
  401e30:	68bb      	ldr	r3, [r7, #8]
  401e32:	429a      	cmp	r2, r3
  401e34:	d21c      	bcs.n	401e70 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401e36:	4a1c      	ldr	r2, [pc, #112]	; (401ea8 <Reset_Handler+0xac>)
  401e38:	4b1a      	ldr	r3, [pc, #104]	; (401ea4 <Reset_Handler+0xa8>)
  401e3a:	1ad3      	subs	r3, r2, r3
  401e3c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401e3e:	68fa      	ldr	r2, [r7, #12]
  401e40:	687b      	ldr	r3, [r7, #4]
  401e42:	4413      	add	r3, r2
  401e44:	3b04      	subs	r3, #4
  401e46:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401e48:	68ba      	ldr	r2, [r7, #8]
  401e4a:	687b      	ldr	r3, [r7, #4]
  401e4c:	4413      	add	r3, r2
  401e4e:	3b04      	subs	r3, #4
  401e50:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401e52:	e00a      	b.n	401e6a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401e54:	68bb      	ldr	r3, [r7, #8]
  401e56:	1f1a      	subs	r2, r3, #4
  401e58:	60ba      	str	r2, [r7, #8]
  401e5a:	68fa      	ldr	r2, [r7, #12]
  401e5c:	1f11      	subs	r1, r2, #4
  401e5e:	60f9      	str	r1, [r7, #12]
  401e60:	6812      	ldr	r2, [r2, #0]
  401e62:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401e64:	687b      	ldr	r3, [r7, #4]
  401e66:	3b04      	subs	r3, #4
  401e68:	607b      	str	r3, [r7, #4]
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d1f1      	bne.n	401e54 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401e70:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401e72:	4b0e      	ldr	r3, [pc, #56]	; (401eac <Reset_Handler+0xb0>)
  401e74:	60bb      	str	r3, [r7, #8]
  401e76:	e004      	b.n	401e82 <Reset_Handler+0x86>
		*pDest++ = 0;
  401e78:	68bb      	ldr	r3, [r7, #8]
  401e7a:	1d1a      	adds	r2, r3, #4
  401e7c:	60ba      	str	r2, [r7, #8]
  401e7e:	2200      	movs	r2, #0
  401e80:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401e82:	68bb      	ldr	r3, [r7, #8]
  401e84:	4a0a      	ldr	r2, [pc, #40]	; (401eb0 <Reset_Handler+0xb4>)
  401e86:	4293      	cmp	r3, r2
  401e88:	d3f6      	bcc.n	401e78 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401e8a:	4b0a      	ldr	r3, [pc, #40]	; (401eb4 <Reset_Handler+0xb8>)
  401e8c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401e8e:	4a0a      	ldr	r2, [pc, #40]	; (401eb8 <Reset_Handler+0xbc>)
  401e90:	68fb      	ldr	r3, [r7, #12]
  401e92:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401e94:	4b09      	ldr	r3, [pc, #36]	; (401ebc <Reset_Handler+0xc0>)
  401e96:	4798      	blx	r3

	/* Branch to main function */
	main();
  401e98:	4b09      	ldr	r3, [pc, #36]	; (401ec0 <Reset_Handler+0xc4>)
  401e9a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401e9c:	e7fe      	b.n	401e9c <Reset_Handler+0xa0>
  401e9e:	bf00      	nop
  401ea0:	00402e5c 	.word	0x00402e5c
  401ea4:	20000000 	.word	0x20000000
  401ea8:	20000438 	.word	0x20000438
  401eac:	20000438 	.word	0x20000438
  401eb0:	20001680 	.word	0x20001680
  401eb4:	00400000 	.word	0x00400000
  401eb8:	e000ed00 	.word	0xe000ed00
  401ebc:	0040245d 	.word	0x0040245d
  401ec0:	004020f9 	.word	0x004020f9

00401ec4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401ec4:	b480      	push	{r7}
  401ec6:	af00      	add	r7, sp, #0
	while (1) {
  401ec8:	e7fe      	b.n	401ec8 <Dummy_Handler+0x4>
	...

00401ecc <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401ecc:	b480      	push	{r7}
  401ece:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401ed0:	4b5d      	ldr	r3, [pc, #372]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ed4:	f003 0303 	and.w	r3, r3, #3
  401ed8:	2b03      	cmp	r3, #3
  401eda:	f200 8096 	bhi.w	40200a <SystemCoreClockUpdate+0x13e>
  401ede:	a201      	add	r2, pc, #4	; (adr r2, 401ee4 <SystemCoreClockUpdate+0x18>)
  401ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ee4:	00401ef5 	.word	0x00401ef5
  401ee8:	00401f15 	.word	0x00401f15
  401eec:	00401f5f 	.word	0x00401f5f
  401ef0:	00401f5f 	.word	0x00401f5f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401ef4:	4b55      	ldr	r3, [pc, #340]	; (40204c <SystemCoreClockUpdate+0x180>)
  401ef6:	695b      	ldr	r3, [r3, #20]
  401ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401efc:	2b00      	cmp	r3, #0
  401efe:	d004      	beq.n	401f0a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401f00:	4b53      	ldr	r3, [pc, #332]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f06:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401f08:	e080      	b.n	40200c <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401f0a:	4b51      	ldr	r3, [pc, #324]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f0c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401f10:	601a      	str	r2, [r3, #0]
		break;
  401f12:	e07b      	b.n	40200c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401f14:	4b4c      	ldr	r3, [pc, #304]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401f16:	6a1b      	ldr	r3, [r3, #32]
  401f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401f1c:	2b00      	cmp	r3, #0
  401f1e:	d003      	beq.n	401f28 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401f20:	4b4b      	ldr	r3, [pc, #300]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f22:	4a4c      	ldr	r2, [pc, #304]	; (402054 <SystemCoreClockUpdate+0x188>)
  401f24:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401f26:	e071      	b.n	40200c <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f28:	4b49      	ldr	r3, [pc, #292]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f2a:	4a4b      	ldr	r2, [pc, #300]	; (402058 <SystemCoreClockUpdate+0x18c>)
  401f2c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401f2e:	4b46      	ldr	r3, [pc, #280]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401f30:	6a1b      	ldr	r3, [r3, #32]
  401f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f36:	2b10      	cmp	r3, #16
  401f38:	d008      	beq.n	401f4c <SystemCoreClockUpdate+0x80>
  401f3a:	2b20      	cmp	r3, #32
  401f3c:	d00a      	beq.n	401f54 <SystemCoreClockUpdate+0x88>
  401f3e:	2b00      	cmp	r3, #0
  401f40:	d000      	beq.n	401f44 <SystemCoreClockUpdate+0x78>
			break;
  401f42:	e00b      	b.n	401f5c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f44:	4b42      	ldr	r3, [pc, #264]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f46:	4a44      	ldr	r2, [pc, #272]	; (402058 <SystemCoreClockUpdate+0x18c>)
  401f48:	601a      	str	r2, [r3, #0]
			break;
  401f4a:	e007      	b.n	401f5c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401f4c:	4b40      	ldr	r3, [pc, #256]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f4e:	4a43      	ldr	r2, [pc, #268]	; (40205c <SystemCoreClockUpdate+0x190>)
  401f50:	601a      	str	r2, [r3, #0]
			break;
  401f52:	e003      	b.n	401f5c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401f54:	4b3e      	ldr	r3, [pc, #248]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f56:	4a3f      	ldr	r2, [pc, #252]	; (402054 <SystemCoreClockUpdate+0x188>)
  401f58:	601a      	str	r2, [r3, #0]
			break;
  401f5a:	bf00      	nop
		break;
  401f5c:	e056      	b.n	40200c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401f5e:	4b3a      	ldr	r3, [pc, #232]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401f60:	6a1b      	ldr	r3, [r3, #32]
  401f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401f66:	2b00      	cmp	r3, #0
  401f68:	d003      	beq.n	401f72 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401f6a:	4b39      	ldr	r3, [pc, #228]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f6c:	4a39      	ldr	r2, [pc, #228]	; (402054 <SystemCoreClockUpdate+0x188>)
  401f6e:	601a      	str	r2, [r3, #0]
  401f70:	e019      	b.n	401fa6 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f72:	4b37      	ldr	r3, [pc, #220]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f74:	4a38      	ldr	r2, [pc, #224]	; (402058 <SystemCoreClockUpdate+0x18c>)
  401f76:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401f78:	4b33      	ldr	r3, [pc, #204]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401f7a:	6a1b      	ldr	r3, [r3, #32]
  401f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f80:	2b10      	cmp	r3, #16
  401f82:	d008      	beq.n	401f96 <SystemCoreClockUpdate+0xca>
  401f84:	2b20      	cmp	r3, #32
  401f86:	d00a      	beq.n	401f9e <SystemCoreClockUpdate+0xd2>
  401f88:	2b00      	cmp	r3, #0
  401f8a:	d000      	beq.n	401f8e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  401f8c:	e00b      	b.n	401fa6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f8e:	4b30      	ldr	r3, [pc, #192]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f90:	4a31      	ldr	r2, [pc, #196]	; (402058 <SystemCoreClockUpdate+0x18c>)
  401f92:	601a      	str	r2, [r3, #0]
					break;
  401f94:	e007      	b.n	401fa6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401f96:	4b2e      	ldr	r3, [pc, #184]	; (402050 <SystemCoreClockUpdate+0x184>)
  401f98:	4a30      	ldr	r2, [pc, #192]	; (40205c <SystemCoreClockUpdate+0x190>)
  401f9a:	601a      	str	r2, [r3, #0]
					break;
  401f9c:	e003      	b.n	401fa6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401f9e:	4b2c      	ldr	r3, [pc, #176]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fa0:	4a2c      	ldr	r2, [pc, #176]	; (402054 <SystemCoreClockUpdate+0x188>)
  401fa2:	601a      	str	r2, [r3, #0]
					break;
  401fa4:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401fa6:	4b28      	ldr	r3, [pc, #160]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401faa:	f003 0303 	and.w	r3, r3, #3
  401fae:	2b02      	cmp	r3, #2
  401fb0:	d115      	bne.n	401fde <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401fb2:	4b25      	ldr	r3, [pc, #148]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401fb6:	0c1b      	lsrs	r3, r3, #16
  401fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401fbc:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401fbe:	4a24      	ldr	r2, [pc, #144]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fc0:	6812      	ldr	r2, [r2, #0]
  401fc2:	fb02 f303 	mul.w	r3, r2, r3
  401fc6:	4a22      	ldr	r2, [pc, #136]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fc8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401fca:	4b1f      	ldr	r3, [pc, #124]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  401fce:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401fd0:	4a1f      	ldr	r2, [pc, #124]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fd2:	6812      	ldr	r2, [r2, #0]
  401fd4:	fbb2 f3f3 	udiv	r3, r2, r3
  401fd8:	4a1d      	ldr	r2, [pc, #116]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fda:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  401fdc:	e016      	b.n	40200c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401fde:	4b1a      	ldr	r3, [pc, #104]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401fe2:	0c1b      	lsrs	r3, r3, #16
  401fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401fe8:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401fea:	4a19      	ldr	r2, [pc, #100]	; (402050 <SystemCoreClockUpdate+0x184>)
  401fec:	6812      	ldr	r2, [r2, #0]
  401fee:	fb02 f303 	mul.w	r3, r2, r3
  401ff2:	4a17      	ldr	r2, [pc, #92]	; (402050 <SystemCoreClockUpdate+0x184>)
  401ff4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ff6:	4b14      	ldr	r3, [pc, #80]	; (402048 <SystemCoreClockUpdate+0x17c>)
  401ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  401ffa:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ffc:	4a14      	ldr	r2, [pc, #80]	; (402050 <SystemCoreClockUpdate+0x184>)
  401ffe:	6812      	ldr	r2, [r2, #0]
  402000:	fbb2 f3f3 	udiv	r3, r2, r3
  402004:	4a12      	ldr	r2, [pc, #72]	; (402050 <SystemCoreClockUpdate+0x184>)
  402006:	6013      	str	r3, [r2, #0]
		break;
  402008:	e000      	b.n	40200c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40200a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40200c:	4b0e      	ldr	r3, [pc, #56]	; (402048 <SystemCoreClockUpdate+0x17c>)
  40200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402010:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402014:	2b70      	cmp	r3, #112	; 0x70
  402016:	d108      	bne.n	40202a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402018:	4b0d      	ldr	r3, [pc, #52]	; (402050 <SystemCoreClockUpdate+0x184>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	4a10      	ldr	r2, [pc, #64]	; (402060 <SystemCoreClockUpdate+0x194>)
  40201e:	fba2 2303 	umull	r2, r3, r2, r3
  402022:	085b      	lsrs	r3, r3, #1
  402024:	4a0a      	ldr	r2, [pc, #40]	; (402050 <SystemCoreClockUpdate+0x184>)
  402026:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402028:	e00a      	b.n	402040 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40202a:	4b07      	ldr	r3, [pc, #28]	; (402048 <SystemCoreClockUpdate+0x17c>)
  40202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40202e:	091b      	lsrs	r3, r3, #4
  402030:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402034:	4a06      	ldr	r2, [pc, #24]	; (402050 <SystemCoreClockUpdate+0x184>)
  402036:	6812      	ldr	r2, [r2, #0]
  402038:	fa22 f303 	lsr.w	r3, r2, r3
  40203c:	4a04      	ldr	r2, [pc, #16]	; (402050 <SystemCoreClockUpdate+0x184>)
  40203e:	6013      	str	r3, [r2, #0]
}
  402040:	bf00      	nop
  402042:	46bd      	mov	sp, r7
  402044:	bc80      	pop	{r7}
  402046:	4770      	bx	lr
  402048:	400e0400 	.word	0x400e0400
  40204c:	400e1410 	.word	0x400e1410
  402050:	2000000c 	.word	0x2000000c
  402054:	00b71b00 	.word	0x00b71b00
  402058:	003d0900 	.word	0x003d0900
  40205c:	007a1200 	.word	0x007a1200
  402060:	aaaaaaab 	.word	0xaaaaaaab

00402064 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402064:	b480      	push	{r7}
  402066:	b083      	sub	sp, #12
  402068:	af00      	add	r7, sp, #0
  40206a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40206c:	687b      	ldr	r3, [r7, #4]
  40206e:	4a18      	ldr	r2, [pc, #96]	; (4020d0 <system_init_flash+0x6c>)
  402070:	4293      	cmp	r3, r2
  402072:	d804      	bhi.n	40207e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402074:	4b17      	ldr	r3, [pc, #92]	; (4020d4 <system_init_flash+0x70>)
  402076:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40207a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40207c:	e023      	b.n	4020c6 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40207e:	687b      	ldr	r3, [r7, #4]
  402080:	4a15      	ldr	r2, [pc, #84]	; (4020d8 <system_init_flash+0x74>)
  402082:	4293      	cmp	r3, r2
  402084:	d803      	bhi.n	40208e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402086:	4b13      	ldr	r3, [pc, #76]	; (4020d4 <system_init_flash+0x70>)
  402088:	4a14      	ldr	r2, [pc, #80]	; (4020dc <system_init_flash+0x78>)
  40208a:	601a      	str	r2, [r3, #0]
}
  40208c:	e01b      	b.n	4020c6 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40208e:	687b      	ldr	r3, [r7, #4]
  402090:	4a13      	ldr	r2, [pc, #76]	; (4020e0 <system_init_flash+0x7c>)
  402092:	4293      	cmp	r3, r2
  402094:	d803      	bhi.n	40209e <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402096:	4b0f      	ldr	r3, [pc, #60]	; (4020d4 <system_init_flash+0x70>)
  402098:	4a12      	ldr	r2, [pc, #72]	; (4020e4 <system_init_flash+0x80>)
  40209a:	601a      	str	r2, [r3, #0]
}
  40209c:	e013      	b.n	4020c6 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40209e:	687b      	ldr	r3, [r7, #4]
  4020a0:	4a11      	ldr	r2, [pc, #68]	; (4020e8 <system_init_flash+0x84>)
  4020a2:	4293      	cmp	r3, r2
  4020a4:	d803      	bhi.n	4020ae <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4020a6:	4b0b      	ldr	r3, [pc, #44]	; (4020d4 <system_init_flash+0x70>)
  4020a8:	4a10      	ldr	r2, [pc, #64]	; (4020ec <system_init_flash+0x88>)
  4020aa:	601a      	str	r2, [r3, #0]
}
  4020ac:	e00b      	b.n	4020c6 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4020ae:	687b      	ldr	r3, [r7, #4]
  4020b0:	4a0f      	ldr	r2, [pc, #60]	; (4020f0 <system_init_flash+0x8c>)
  4020b2:	4293      	cmp	r3, r2
  4020b4:	d804      	bhi.n	4020c0 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4020b6:	4b07      	ldr	r3, [pc, #28]	; (4020d4 <system_init_flash+0x70>)
  4020b8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4020bc:	601a      	str	r2, [r3, #0]
}
  4020be:	e002      	b.n	4020c6 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4020c0:	4b04      	ldr	r3, [pc, #16]	; (4020d4 <system_init_flash+0x70>)
  4020c2:	4a0c      	ldr	r2, [pc, #48]	; (4020f4 <system_init_flash+0x90>)
  4020c4:	601a      	str	r2, [r3, #0]
}
  4020c6:	bf00      	nop
  4020c8:	370c      	adds	r7, #12
  4020ca:	46bd      	mov	sp, r7
  4020cc:	bc80      	pop	{r7}
  4020ce:	4770      	bx	lr
  4020d0:	01312cff 	.word	0x01312cff
  4020d4:	400e0a00 	.word	0x400e0a00
  4020d8:	026259ff 	.word	0x026259ff
  4020dc:	04000100 	.word	0x04000100
  4020e0:	039386ff 	.word	0x039386ff
  4020e4:	04000200 	.word	0x04000200
  4020e8:	04c4b3ff 	.word	0x04c4b3ff
  4020ec:	04000300 	.word	0x04000300
  4020f0:	05f5e0ff 	.word	0x05f5e0ff
  4020f4:	04000500 	.word	0x04000500

004020f8 <main>:
		}
	}
}

int main (void)
{
  4020f8:	b580      	push	{r7, lr}
  4020fa:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  4020fc:	4b0a      	ldr	r3, [pc, #40]	; (402128 <main+0x30>)
  4020fe:	4798      	blx	r3
	board_init();	
  402100:	4b0a      	ldr	r3, [pc, #40]	; (40212c <main+0x34>)
  402102:	4798      	blx	r3
	configure_tc();
  402104:	4b0a      	ldr	r3, [pc, #40]	; (402130 <main+0x38>)
  402106:	4798      	blx	r3
	tc_start(TC0, 0);
  402108:	2100      	movs	r1, #0
  40210a:	480a      	ldr	r0, [pc, #40]	; (402134 <main+0x3c>)
  40210c:	4b0a      	ldr	r3, [pc, #40]	; (402138 <main+0x40>)
  40210e:	4798      	blx	r3
	//configure_wifi();		// configures and initializes wifi module
	//configure_camera();		// configures and initializes camera module
	//reboot_wifi();			// reboots the wifi chip (takes several seconds)
	

	configure_i2s();
  402110:	4b0a      	ldr	r3, [pc, #40]	; (40213c <main+0x44>)
  402112:	4798      	blx	r3

	//uint16_t *samples_data = generate_spoof(440);
	while(1) {
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  402114:	4b0a      	ldr	r3, [pc, #40]	; (402140 <main+0x48>)
  402116:	681b      	ldr	r3, [r3, #0]
  402118:	2b00      	cmp	r3, #0
  40211a:	d001      	beq.n	402120 <main+0x28>
			setup_wifi();		// the wifi chip tries to reassociate to a new network
  40211c:	4b09      	ldr	r3, [pc, #36]	; (402144 <main+0x4c>)
  40211e:	4798      	blx	r3
		}

		i2s_capture();
  402120:	4b09      	ldr	r3, [pc, #36]	; (402148 <main+0x50>)
  402122:	4798      	blx	r3
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  402124:	e7f6      	b.n	402114 <main+0x1c>
  402126:	bf00      	nop
  402128:	0040130d 	.word	0x0040130d
  40212c:	00401cc1 	.word	0x00401cc1
  402130:	00400a95 	.word	0x00400a95
  402134:	40010000 	.word	0x40010000
  402138:	00400339 	.word	0x00400339
  40213c:	004006bd 	.word	0x004006bd
  402140:	20001670 	.word	0x20001670
  402144:	00400f3d 	.word	0x00400f3d
  402148:	00400615 	.word	0x00400615

0040214c <__aeabi_uldivmod>:
  40214c:	b953      	cbnz	r3, 402164 <__aeabi_uldivmod+0x18>
  40214e:	b94a      	cbnz	r2, 402164 <__aeabi_uldivmod+0x18>
  402150:	2900      	cmp	r1, #0
  402152:	bf08      	it	eq
  402154:	2800      	cmpeq	r0, #0
  402156:	bf1c      	itt	ne
  402158:	f04f 31ff 	movne.w	r1, #4294967295
  40215c:	f04f 30ff 	movne.w	r0, #4294967295
  402160:	f000 b97a 	b.w	402458 <__aeabi_idiv0>
  402164:	f1ad 0c08 	sub.w	ip, sp, #8
  402168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40216c:	f000 f806 	bl	40217c <__udivmoddi4>
  402170:	f8dd e004 	ldr.w	lr, [sp, #4]
  402174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402178:	b004      	add	sp, #16
  40217a:	4770      	bx	lr

0040217c <__udivmoddi4>:
  40217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402180:	468c      	mov	ip, r1
  402182:	460d      	mov	r5, r1
  402184:	4604      	mov	r4, r0
  402186:	9e08      	ldr	r6, [sp, #32]
  402188:	2b00      	cmp	r3, #0
  40218a:	d151      	bne.n	402230 <__udivmoddi4+0xb4>
  40218c:	428a      	cmp	r2, r1
  40218e:	4617      	mov	r7, r2
  402190:	d96d      	bls.n	40226e <__udivmoddi4+0xf2>
  402192:	fab2 fe82 	clz	lr, r2
  402196:	f1be 0f00 	cmp.w	lr, #0
  40219a:	d00b      	beq.n	4021b4 <__udivmoddi4+0x38>
  40219c:	f1ce 0c20 	rsb	ip, lr, #32
  4021a0:	fa01 f50e 	lsl.w	r5, r1, lr
  4021a4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4021a8:	fa02 f70e 	lsl.w	r7, r2, lr
  4021ac:	ea4c 0c05 	orr.w	ip, ip, r5
  4021b0:	fa00 f40e 	lsl.w	r4, r0, lr
  4021b4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4021b8:	0c25      	lsrs	r5, r4, #16
  4021ba:	fbbc f8fa 	udiv	r8, ip, sl
  4021be:	fa1f f987 	uxth.w	r9, r7
  4021c2:	fb0a cc18 	mls	ip, sl, r8, ip
  4021c6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4021ca:	fb08 f309 	mul.w	r3, r8, r9
  4021ce:	42ab      	cmp	r3, r5
  4021d0:	d90a      	bls.n	4021e8 <__udivmoddi4+0x6c>
  4021d2:	19ed      	adds	r5, r5, r7
  4021d4:	f108 32ff 	add.w	r2, r8, #4294967295
  4021d8:	f080 8123 	bcs.w	402422 <__udivmoddi4+0x2a6>
  4021dc:	42ab      	cmp	r3, r5
  4021de:	f240 8120 	bls.w	402422 <__udivmoddi4+0x2a6>
  4021e2:	f1a8 0802 	sub.w	r8, r8, #2
  4021e6:	443d      	add	r5, r7
  4021e8:	1aed      	subs	r5, r5, r3
  4021ea:	b2a4      	uxth	r4, r4
  4021ec:	fbb5 f0fa 	udiv	r0, r5, sl
  4021f0:	fb0a 5510 	mls	r5, sl, r0, r5
  4021f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4021f8:	fb00 f909 	mul.w	r9, r0, r9
  4021fc:	45a1      	cmp	r9, r4
  4021fe:	d909      	bls.n	402214 <__udivmoddi4+0x98>
  402200:	19e4      	adds	r4, r4, r7
  402202:	f100 33ff 	add.w	r3, r0, #4294967295
  402206:	f080 810a 	bcs.w	40241e <__udivmoddi4+0x2a2>
  40220a:	45a1      	cmp	r9, r4
  40220c:	f240 8107 	bls.w	40241e <__udivmoddi4+0x2a2>
  402210:	3802      	subs	r0, #2
  402212:	443c      	add	r4, r7
  402214:	eba4 0409 	sub.w	r4, r4, r9
  402218:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40221c:	2100      	movs	r1, #0
  40221e:	2e00      	cmp	r6, #0
  402220:	d061      	beq.n	4022e6 <__udivmoddi4+0x16a>
  402222:	fa24 f40e 	lsr.w	r4, r4, lr
  402226:	2300      	movs	r3, #0
  402228:	6034      	str	r4, [r6, #0]
  40222a:	6073      	str	r3, [r6, #4]
  40222c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402230:	428b      	cmp	r3, r1
  402232:	d907      	bls.n	402244 <__udivmoddi4+0xc8>
  402234:	2e00      	cmp	r6, #0
  402236:	d054      	beq.n	4022e2 <__udivmoddi4+0x166>
  402238:	2100      	movs	r1, #0
  40223a:	e886 0021 	stmia.w	r6, {r0, r5}
  40223e:	4608      	mov	r0, r1
  402240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402244:	fab3 f183 	clz	r1, r3
  402248:	2900      	cmp	r1, #0
  40224a:	f040 808e 	bne.w	40236a <__udivmoddi4+0x1ee>
  40224e:	42ab      	cmp	r3, r5
  402250:	d302      	bcc.n	402258 <__udivmoddi4+0xdc>
  402252:	4282      	cmp	r2, r0
  402254:	f200 80fa 	bhi.w	40244c <__udivmoddi4+0x2d0>
  402258:	1a84      	subs	r4, r0, r2
  40225a:	eb65 0503 	sbc.w	r5, r5, r3
  40225e:	2001      	movs	r0, #1
  402260:	46ac      	mov	ip, r5
  402262:	2e00      	cmp	r6, #0
  402264:	d03f      	beq.n	4022e6 <__udivmoddi4+0x16a>
  402266:	e886 1010 	stmia.w	r6, {r4, ip}
  40226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40226e:	b912      	cbnz	r2, 402276 <__udivmoddi4+0xfa>
  402270:	2701      	movs	r7, #1
  402272:	fbb7 f7f2 	udiv	r7, r7, r2
  402276:	fab7 fe87 	clz	lr, r7
  40227a:	f1be 0f00 	cmp.w	lr, #0
  40227e:	d134      	bne.n	4022ea <__udivmoddi4+0x16e>
  402280:	1beb      	subs	r3, r5, r7
  402282:	0c3a      	lsrs	r2, r7, #16
  402284:	fa1f fc87 	uxth.w	ip, r7
  402288:	2101      	movs	r1, #1
  40228a:	fbb3 f8f2 	udiv	r8, r3, r2
  40228e:	0c25      	lsrs	r5, r4, #16
  402290:	fb02 3318 	mls	r3, r2, r8, r3
  402294:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402298:	fb0c f308 	mul.w	r3, ip, r8
  40229c:	42ab      	cmp	r3, r5
  40229e:	d907      	bls.n	4022b0 <__udivmoddi4+0x134>
  4022a0:	19ed      	adds	r5, r5, r7
  4022a2:	f108 30ff 	add.w	r0, r8, #4294967295
  4022a6:	d202      	bcs.n	4022ae <__udivmoddi4+0x132>
  4022a8:	42ab      	cmp	r3, r5
  4022aa:	f200 80d1 	bhi.w	402450 <__udivmoddi4+0x2d4>
  4022ae:	4680      	mov	r8, r0
  4022b0:	1aed      	subs	r5, r5, r3
  4022b2:	b2a3      	uxth	r3, r4
  4022b4:	fbb5 f0f2 	udiv	r0, r5, r2
  4022b8:	fb02 5510 	mls	r5, r2, r0, r5
  4022bc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4022c0:	fb0c fc00 	mul.w	ip, ip, r0
  4022c4:	45a4      	cmp	ip, r4
  4022c6:	d907      	bls.n	4022d8 <__udivmoddi4+0x15c>
  4022c8:	19e4      	adds	r4, r4, r7
  4022ca:	f100 33ff 	add.w	r3, r0, #4294967295
  4022ce:	d202      	bcs.n	4022d6 <__udivmoddi4+0x15a>
  4022d0:	45a4      	cmp	ip, r4
  4022d2:	f200 80b8 	bhi.w	402446 <__udivmoddi4+0x2ca>
  4022d6:	4618      	mov	r0, r3
  4022d8:	eba4 040c 	sub.w	r4, r4, ip
  4022dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4022e0:	e79d      	b.n	40221e <__udivmoddi4+0xa2>
  4022e2:	4631      	mov	r1, r6
  4022e4:	4630      	mov	r0, r6
  4022e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022ea:	f1ce 0420 	rsb	r4, lr, #32
  4022ee:	fa05 f30e 	lsl.w	r3, r5, lr
  4022f2:	fa07 f70e 	lsl.w	r7, r7, lr
  4022f6:	fa20 f804 	lsr.w	r8, r0, r4
  4022fa:	0c3a      	lsrs	r2, r7, #16
  4022fc:	fa25 f404 	lsr.w	r4, r5, r4
  402300:	ea48 0803 	orr.w	r8, r8, r3
  402304:	fbb4 f1f2 	udiv	r1, r4, r2
  402308:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40230c:	fb02 4411 	mls	r4, r2, r1, r4
  402310:	fa1f fc87 	uxth.w	ip, r7
  402314:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402318:	fb01 f30c 	mul.w	r3, r1, ip
  40231c:	42ab      	cmp	r3, r5
  40231e:	fa00 f40e 	lsl.w	r4, r0, lr
  402322:	d909      	bls.n	402338 <__udivmoddi4+0x1bc>
  402324:	19ed      	adds	r5, r5, r7
  402326:	f101 30ff 	add.w	r0, r1, #4294967295
  40232a:	f080 808a 	bcs.w	402442 <__udivmoddi4+0x2c6>
  40232e:	42ab      	cmp	r3, r5
  402330:	f240 8087 	bls.w	402442 <__udivmoddi4+0x2c6>
  402334:	3902      	subs	r1, #2
  402336:	443d      	add	r5, r7
  402338:	1aeb      	subs	r3, r5, r3
  40233a:	fa1f f588 	uxth.w	r5, r8
  40233e:	fbb3 f0f2 	udiv	r0, r3, r2
  402342:	fb02 3310 	mls	r3, r2, r0, r3
  402346:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40234a:	fb00 f30c 	mul.w	r3, r0, ip
  40234e:	42ab      	cmp	r3, r5
  402350:	d907      	bls.n	402362 <__udivmoddi4+0x1e6>
  402352:	19ed      	adds	r5, r5, r7
  402354:	f100 38ff 	add.w	r8, r0, #4294967295
  402358:	d26f      	bcs.n	40243a <__udivmoddi4+0x2be>
  40235a:	42ab      	cmp	r3, r5
  40235c:	d96d      	bls.n	40243a <__udivmoddi4+0x2be>
  40235e:	3802      	subs	r0, #2
  402360:	443d      	add	r5, r7
  402362:	1aeb      	subs	r3, r5, r3
  402364:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402368:	e78f      	b.n	40228a <__udivmoddi4+0x10e>
  40236a:	f1c1 0720 	rsb	r7, r1, #32
  40236e:	fa22 f807 	lsr.w	r8, r2, r7
  402372:	408b      	lsls	r3, r1
  402374:	fa05 f401 	lsl.w	r4, r5, r1
  402378:	ea48 0303 	orr.w	r3, r8, r3
  40237c:	fa20 fe07 	lsr.w	lr, r0, r7
  402380:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402384:	40fd      	lsrs	r5, r7
  402386:	ea4e 0e04 	orr.w	lr, lr, r4
  40238a:	fbb5 f9fc 	udiv	r9, r5, ip
  40238e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402392:	fb0c 5519 	mls	r5, ip, r9, r5
  402396:	fa1f f883 	uxth.w	r8, r3
  40239a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40239e:	fb09 f408 	mul.w	r4, r9, r8
  4023a2:	42ac      	cmp	r4, r5
  4023a4:	fa02 f201 	lsl.w	r2, r2, r1
  4023a8:	fa00 fa01 	lsl.w	sl, r0, r1
  4023ac:	d908      	bls.n	4023c0 <__udivmoddi4+0x244>
  4023ae:	18ed      	adds	r5, r5, r3
  4023b0:	f109 30ff 	add.w	r0, r9, #4294967295
  4023b4:	d243      	bcs.n	40243e <__udivmoddi4+0x2c2>
  4023b6:	42ac      	cmp	r4, r5
  4023b8:	d941      	bls.n	40243e <__udivmoddi4+0x2c2>
  4023ba:	f1a9 0902 	sub.w	r9, r9, #2
  4023be:	441d      	add	r5, r3
  4023c0:	1b2d      	subs	r5, r5, r4
  4023c2:	fa1f fe8e 	uxth.w	lr, lr
  4023c6:	fbb5 f0fc 	udiv	r0, r5, ip
  4023ca:	fb0c 5510 	mls	r5, ip, r0, r5
  4023ce:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4023d2:	fb00 f808 	mul.w	r8, r0, r8
  4023d6:	45a0      	cmp	r8, r4
  4023d8:	d907      	bls.n	4023ea <__udivmoddi4+0x26e>
  4023da:	18e4      	adds	r4, r4, r3
  4023dc:	f100 35ff 	add.w	r5, r0, #4294967295
  4023e0:	d229      	bcs.n	402436 <__udivmoddi4+0x2ba>
  4023e2:	45a0      	cmp	r8, r4
  4023e4:	d927      	bls.n	402436 <__udivmoddi4+0x2ba>
  4023e6:	3802      	subs	r0, #2
  4023e8:	441c      	add	r4, r3
  4023ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4023ee:	eba4 0408 	sub.w	r4, r4, r8
  4023f2:	fba0 8902 	umull	r8, r9, r0, r2
  4023f6:	454c      	cmp	r4, r9
  4023f8:	46c6      	mov	lr, r8
  4023fa:	464d      	mov	r5, r9
  4023fc:	d315      	bcc.n	40242a <__udivmoddi4+0x2ae>
  4023fe:	d012      	beq.n	402426 <__udivmoddi4+0x2aa>
  402400:	b156      	cbz	r6, 402418 <__udivmoddi4+0x29c>
  402402:	ebba 030e 	subs.w	r3, sl, lr
  402406:	eb64 0405 	sbc.w	r4, r4, r5
  40240a:	fa04 f707 	lsl.w	r7, r4, r7
  40240e:	40cb      	lsrs	r3, r1
  402410:	431f      	orrs	r7, r3
  402412:	40cc      	lsrs	r4, r1
  402414:	6037      	str	r7, [r6, #0]
  402416:	6074      	str	r4, [r6, #4]
  402418:	2100      	movs	r1, #0
  40241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40241e:	4618      	mov	r0, r3
  402420:	e6f8      	b.n	402214 <__udivmoddi4+0x98>
  402422:	4690      	mov	r8, r2
  402424:	e6e0      	b.n	4021e8 <__udivmoddi4+0x6c>
  402426:	45c2      	cmp	sl, r8
  402428:	d2ea      	bcs.n	402400 <__udivmoddi4+0x284>
  40242a:	ebb8 0e02 	subs.w	lr, r8, r2
  40242e:	eb69 0503 	sbc.w	r5, r9, r3
  402432:	3801      	subs	r0, #1
  402434:	e7e4      	b.n	402400 <__udivmoddi4+0x284>
  402436:	4628      	mov	r0, r5
  402438:	e7d7      	b.n	4023ea <__udivmoddi4+0x26e>
  40243a:	4640      	mov	r0, r8
  40243c:	e791      	b.n	402362 <__udivmoddi4+0x1e6>
  40243e:	4681      	mov	r9, r0
  402440:	e7be      	b.n	4023c0 <__udivmoddi4+0x244>
  402442:	4601      	mov	r1, r0
  402444:	e778      	b.n	402338 <__udivmoddi4+0x1bc>
  402446:	3802      	subs	r0, #2
  402448:	443c      	add	r4, r7
  40244a:	e745      	b.n	4022d8 <__udivmoddi4+0x15c>
  40244c:	4608      	mov	r0, r1
  40244e:	e708      	b.n	402262 <__udivmoddi4+0xe6>
  402450:	f1a8 0802 	sub.w	r8, r8, #2
  402454:	443d      	add	r5, r7
  402456:	e72b      	b.n	4022b0 <__udivmoddi4+0x134>

00402458 <__aeabi_idiv0>:
  402458:	4770      	bx	lr
  40245a:	bf00      	nop

0040245c <__libc_init_array>:
  40245c:	b570      	push	{r4, r5, r6, lr}
  40245e:	4e0f      	ldr	r6, [pc, #60]	; (40249c <__libc_init_array+0x40>)
  402460:	4d0f      	ldr	r5, [pc, #60]	; (4024a0 <__libc_init_array+0x44>)
  402462:	1b76      	subs	r6, r6, r5
  402464:	10b6      	asrs	r6, r6, #2
  402466:	bf18      	it	ne
  402468:	2400      	movne	r4, #0
  40246a:	d005      	beq.n	402478 <__libc_init_array+0x1c>
  40246c:	3401      	adds	r4, #1
  40246e:	f855 3b04 	ldr.w	r3, [r5], #4
  402472:	4798      	blx	r3
  402474:	42a6      	cmp	r6, r4
  402476:	d1f9      	bne.n	40246c <__libc_init_array+0x10>
  402478:	4e0a      	ldr	r6, [pc, #40]	; (4024a4 <__libc_init_array+0x48>)
  40247a:	4d0b      	ldr	r5, [pc, #44]	; (4024a8 <__libc_init_array+0x4c>)
  40247c:	1b76      	subs	r6, r6, r5
  40247e:	f000 fcd7 	bl	402e30 <_init>
  402482:	10b6      	asrs	r6, r6, #2
  402484:	bf18      	it	ne
  402486:	2400      	movne	r4, #0
  402488:	d006      	beq.n	402498 <__libc_init_array+0x3c>
  40248a:	3401      	adds	r4, #1
  40248c:	f855 3b04 	ldr.w	r3, [r5], #4
  402490:	4798      	blx	r3
  402492:	42a6      	cmp	r6, r4
  402494:	d1f9      	bne.n	40248a <__libc_init_array+0x2e>
  402496:	bd70      	pop	{r4, r5, r6, pc}
  402498:	bd70      	pop	{r4, r5, r6, pc}
  40249a:	bf00      	nop
  40249c:	00402e3c 	.word	0x00402e3c
  4024a0:	00402e3c 	.word	0x00402e3c
  4024a4:	00402e44 	.word	0x00402e44
  4024a8:	00402e3c 	.word	0x00402e3c

004024ac <critical_factorization>:
  4024ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4024b0:	f04f 0e01 	mov.w	lr, #1
  4024b4:	4674      	mov	r4, lr
  4024b6:	2500      	movs	r5, #0
  4024b8:	f04f 36ff 	mov.w	r6, #4294967295
  4024bc:	192b      	adds	r3, r5, r4
  4024be:	428b      	cmp	r3, r1
  4024c0:	eb00 0706 	add.w	r7, r0, r6
  4024c4:	d20d      	bcs.n	4024e2 <critical_factorization+0x36>
  4024c6:	5d3f      	ldrb	r7, [r7, r4]
  4024c8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4024cc:	45bc      	cmp	ip, r7
  4024ce:	d22d      	bcs.n	40252c <critical_factorization+0x80>
  4024d0:	461d      	mov	r5, r3
  4024d2:	2401      	movs	r4, #1
  4024d4:	eba3 0e06 	sub.w	lr, r3, r6
  4024d8:	192b      	adds	r3, r5, r4
  4024da:	428b      	cmp	r3, r1
  4024dc:	eb00 0706 	add.w	r7, r0, r6
  4024e0:	d3f1      	bcc.n	4024c6 <critical_factorization+0x1a>
  4024e2:	f04f 0801 	mov.w	r8, #1
  4024e6:	f8c2 e000 	str.w	lr, [r2]
  4024ea:	4644      	mov	r4, r8
  4024ec:	2500      	movs	r5, #0
  4024ee:	f04f 37ff 	mov.w	r7, #4294967295
  4024f2:	192b      	adds	r3, r5, r4
  4024f4:	4299      	cmp	r1, r3
  4024f6:	eb00 0e07 	add.w	lr, r0, r7
  4024fa:	d90e      	bls.n	40251a <critical_factorization+0x6e>
  4024fc:	f81e e004 	ldrb.w	lr, [lr, r4]
  402500:	f810 c003 	ldrb.w	ip, [r0, r3]
  402504:	45f4      	cmp	ip, lr
  402506:	d918      	bls.n	40253a <critical_factorization+0x8e>
  402508:	461d      	mov	r5, r3
  40250a:	2401      	movs	r4, #1
  40250c:	eba3 0807 	sub.w	r8, r3, r7
  402510:	192b      	adds	r3, r5, r4
  402512:	4299      	cmp	r1, r3
  402514:	eb00 0e07 	add.w	lr, r0, r7
  402518:	d8f0      	bhi.n	4024fc <critical_factorization+0x50>
  40251a:	3701      	adds	r7, #1
  40251c:	1c70      	adds	r0, r6, #1
  40251e:	4287      	cmp	r7, r0
  402520:	bf24      	itt	cs
  402522:	f8c2 8000 	strcs.w	r8, [r2]
  402526:	4638      	movcs	r0, r7
  402528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40252c:	d00c      	beq.n	402548 <critical_factorization+0x9c>
  40252e:	f04f 0e01 	mov.w	lr, #1
  402532:	462e      	mov	r6, r5
  402534:	4674      	mov	r4, lr
  402536:	4475      	add	r5, lr
  402538:	e7c0      	b.n	4024bc <critical_factorization+0x10>
  40253a:	d00b      	beq.n	402554 <critical_factorization+0xa8>
  40253c:	f04f 0801 	mov.w	r8, #1
  402540:	462f      	mov	r7, r5
  402542:	4644      	mov	r4, r8
  402544:	4445      	add	r5, r8
  402546:	e7d4      	b.n	4024f2 <critical_factorization+0x46>
  402548:	4574      	cmp	r4, lr
  40254a:	bf12      	itee	ne
  40254c:	3401      	addne	r4, #1
  40254e:	461d      	moveq	r5, r3
  402550:	2401      	moveq	r4, #1
  402552:	e7b3      	b.n	4024bc <critical_factorization+0x10>
  402554:	4544      	cmp	r4, r8
  402556:	bf12      	itee	ne
  402558:	3401      	addne	r4, #1
  40255a:	461d      	moveq	r5, r3
  40255c:	2401      	moveq	r4, #1
  40255e:	e7c8      	b.n	4024f2 <critical_factorization+0x46>

00402560 <two_way_long_needle>:
  402560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402564:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402568:	4616      	mov	r6, r2
  40256a:	4605      	mov	r5, r0
  40256c:	468b      	mov	fp, r1
  40256e:	4610      	mov	r0, r2
  402570:	4619      	mov	r1, r3
  402572:	aa03      	add	r2, sp, #12
  402574:	461c      	mov	r4, r3
  402576:	f7ff ff99 	bl	4024ac <critical_factorization>
  40257a:	ab03      	add	r3, sp, #12
  40257c:	4681      	mov	r9, r0
  40257e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  402582:	f843 4f04 	str.w	r4, [r3, #4]!
  402586:	4293      	cmp	r3, r2
  402588:	d1fb      	bne.n	402582 <two_way_long_needle+0x22>
  40258a:	b14c      	cbz	r4, 4025a0 <two_way_long_needle+0x40>
  40258c:	1e63      	subs	r3, r4, #1
  40258e:	1e72      	subs	r2, r6, #1
  402590:	a804      	add	r0, sp, #16
  402592:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402596:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40259a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40259e:	d2f8      	bcs.n	402592 <two_way_long_needle+0x32>
  4025a0:	9903      	ldr	r1, [sp, #12]
  4025a2:	464a      	mov	r2, r9
  4025a4:	4431      	add	r1, r6
  4025a6:	4630      	mov	r0, r6
  4025a8:	f000 fa62 	bl	402a70 <memcmp>
  4025ac:	2800      	cmp	r0, #0
  4025ae:	d16f      	bne.n	402690 <two_way_long_needle+0x130>
  4025b0:	f109 33ff 	add.w	r3, r9, #4294967295
  4025b4:	9300      	str	r3, [sp, #0]
  4025b6:	18f3      	adds	r3, r6, r3
  4025b8:	4682      	mov	sl, r0
  4025ba:	9301      	str	r3, [sp, #4]
  4025bc:	4623      	mov	r3, r4
  4025be:	4680      	mov	r8, r0
  4025c0:	4654      	mov	r4, sl
  4025c2:	4658      	mov	r0, fp
  4025c4:	469a      	mov	sl, r3
  4025c6:	eb08 070a 	add.w	r7, r8, sl
  4025ca:	1a3a      	subs	r2, r7, r0
  4025cc:	2100      	movs	r1, #0
  4025ce:	4428      	add	r0, r5
  4025d0:	f000 f9fe 	bl	4029d0 <memchr>
  4025d4:	2800      	cmp	r0, #0
  4025d6:	d156      	bne.n	402686 <two_way_long_needle+0x126>
  4025d8:	2f00      	cmp	r7, #0
  4025da:	d054      	beq.n	402686 <two_way_long_needle+0x126>
  4025dc:	19eb      	adds	r3, r5, r7
  4025de:	aa04      	add	r2, sp, #16
  4025e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4025e8:	b14b      	cbz	r3, 4025fe <two_way_long_needle+0x9e>
  4025ea:	b124      	cbz	r4, 4025f6 <two_way_long_needle+0x96>
  4025ec:	9a03      	ldr	r2, [sp, #12]
  4025ee:	4293      	cmp	r3, r2
  4025f0:	d201      	bcs.n	4025f6 <two_way_long_needle+0x96>
  4025f2:	ebaa 0302 	sub.w	r3, sl, r2
  4025f6:	4498      	add	r8, r3
  4025f8:	2400      	movs	r4, #0
  4025fa:	4638      	mov	r0, r7
  4025fc:	e7e3      	b.n	4025c6 <two_way_long_needle+0x66>
  4025fe:	454c      	cmp	r4, r9
  402600:	4623      	mov	r3, r4
  402602:	f10a 3eff 	add.w	lr, sl, #4294967295
  402606:	bf38      	it	cc
  402608:	464b      	movcc	r3, r9
  40260a:	4573      	cmp	r3, lr
  40260c:	d213      	bcs.n	402636 <two_way_long_needle+0xd6>
  40260e:	eb08 0203 	add.w	r2, r8, r3
  402612:	f816 c003 	ldrb.w	ip, [r6, r3]
  402616:	5ca8      	ldrb	r0, [r5, r2]
  402618:	4584      	cmp	ip, r0
  40261a:	442a      	add	r2, r5
  40261c:	eb06 0103 	add.w	r1, r6, r3
  402620:	d006      	beq.n	402630 <two_way_long_needle+0xd0>
  402622:	e02c      	b.n	40267e <two_way_long_needle+0x11e>
  402624:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402628:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40262c:	4584      	cmp	ip, r0
  40262e:	d126      	bne.n	40267e <two_way_long_needle+0x11e>
  402630:	3301      	adds	r3, #1
  402632:	4573      	cmp	r3, lr
  402634:	d3f6      	bcc.n	402624 <two_way_long_needle+0xc4>
  402636:	454c      	cmp	r4, r9
  402638:	9900      	ldr	r1, [sp, #0]
  40263a:	f080 8089 	bcs.w	402750 <two_way_long_needle+0x1f0>
  40263e:	9b00      	ldr	r3, [sp, #0]
  402640:	eb08 0203 	add.w	r2, r8, r3
  402644:	9b01      	ldr	r3, [sp, #4]
  402646:	5ca8      	ldrb	r0, [r5, r2]
  402648:	781b      	ldrb	r3, [r3, #0]
  40264a:	4298      	cmp	r0, r3
  40264c:	442a      	add	r2, r5
  40264e:	d17f      	bne.n	402750 <two_way_long_needle+0x1f0>
  402650:	9801      	ldr	r0, [sp, #4]
  402652:	f104 3bff 	add.w	fp, r4, #4294967295
  402656:	e006      	b.n	402666 <two_way_long_needle+0x106>
  402658:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40265c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402660:	45f4      	cmp	ip, lr
  402662:	d103      	bne.n	40266c <two_way_long_needle+0x10c>
  402664:	4619      	mov	r1, r3
  402666:	1e4b      	subs	r3, r1, #1
  402668:	459b      	cmp	fp, r3
  40266a:	d1f5      	bne.n	402658 <two_way_long_needle+0xf8>
  40266c:	3401      	adds	r4, #1
  40266e:	428c      	cmp	r4, r1
  402670:	d870      	bhi.n	402754 <two_way_long_needle+0x1f4>
  402672:	9c03      	ldr	r4, [sp, #12]
  402674:	4638      	mov	r0, r7
  402676:	44a0      	add	r8, r4
  402678:	ebaa 0404 	sub.w	r4, sl, r4
  40267c:	e7a3      	b.n	4025c6 <two_way_long_needle+0x66>
  40267e:	f1c9 0201 	rsb	r2, r9, #1
  402682:	4490      	add	r8, r2
  402684:	e7b7      	b.n	4025f6 <two_way_long_needle+0x96>
  402686:	2000      	movs	r0, #0
  402688:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402690:	eba4 0309 	sub.w	r3, r4, r9
  402694:	454b      	cmp	r3, r9
  402696:	bf38      	it	cc
  402698:	464b      	movcc	r3, r9
  40269a:	3301      	adds	r3, #1
  40269c:	f109 38ff 	add.w	r8, r9, #4294967295
  4026a0:	9303      	str	r3, [sp, #12]
  4026a2:	eb06 0308 	add.w	r3, r6, r8
  4026a6:	4658      	mov	r0, fp
  4026a8:	f04f 0a00 	mov.w	sl, #0
  4026ac:	46cb      	mov	fp, r9
  4026ae:	4699      	mov	r9, r3
  4026b0:	eb0a 0704 	add.w	r7, sl, r4
  4026b4:	1a3a      	subs	r2, r7, r0
  4026b6:	2100      	movs	r1, #0
  4026b8:	4428      	add	r0, r5
  4026ba:	f000 f989 	bl	4029d0 <memchr>
  4026be:	2800      	cmp	r0, #0
  4026c0:	d1e1      	bne.n	402686 <two_way_long_needle+0x126>
  4026c2:	2f00      	cmp	r7, #0
  4026c4:	d0df      	beq.n	402686 <two_way_long_needle+0x126>
  4026c6:	19eb      	adds	r3, r5, r7
  4026c8:	aa04      	add	r2, sp, #16
  4026ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4026d2:	bba3      	cbnz	r3, 40273e <two_way_long_needle+0x1de>
  4026d4:	1e61      	subs	r1, r4, #1
  4026d6:	458b      	cmp	fp, r1
  4026d8:	d215      	bcs.n	402706 <two_way_long_needle+0x1a6>
  4026da:	eb0a 020b 	add.w	r2, sl, fp
  4026de:	f816 300b 	ldrb.w	r3, [r6, fp]
  4026e2:	f815 e002 	ldrb.w	lr, [r5, r2]
  4026e6:	459e      	cmp	lr, r3
  4026e8:	442a      	add	r2, r5
  4026ea:	eb06 000b 	add.w	r0, r6, fp
  4026ee:	465b      	mov	r3, fp
  4026f0:	d006      	beq.n	402700 <two_way_long_needle+0x1a0>
  4026f2:	e027      	b.n	402744 <two_way_long_needle+0x1e4>
  4026f4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  4026f8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  4026fc:	45f4      	cmp	ip, lr
  4026fe:	d121      	bne.n	402744 <two_way_long_needle+0x1e4>
  402700:	3301      	adds	r3, #1
  402702:	428b      	cmp	r3, r1
  402704:	d3f6      	bcc.n	4026f4 <two_way_long_needle+0x194>
  402706:	f1b8 3fff 	cmp.w	r8, #4294967295
  40270a:	d011      	beq.n	402730 <two_way_long_needle+0x1d0>
  40270c:	eb0a 0208 	add.w	r2, sl, r8
  402710:	f899 1000 	ldrb.w	r1, [r9]
  402714:	5cab      	ldrb	r3, [r5, r2]
  402716:	4299      	cmp	r1, r3
  402718:	442a      	add	r2, r5
  40271a:	d10f      	bne.n	40273c <two_way_long_needle+0x1dc>
  40271c:	464b      	mov	r3, r9
  40271e:	e005      	b.n	40272c <two_way_long_needle+0x1cc>
  402720:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402724:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402728:	4288      	cmp	r0, r1
  40272a:	d107      	bne.n	40273c <two_way_long_needle+0x1dc>
  40272c:	42b3      	cmp	r3, r6
  40272e:	d1f7      	bne.n	402720 <two_way_long_needle+0x1c0>
  402730:	eb05 000a 	add.w	r0, r5, sl
  402734:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40273c:	9b03      	ldr	r3, [sp, #12]
  40273e:	449a      	add	sl, r3
  402740:	4638      	mov	r0, r7
  402742:	e7b5      	b.n	4026b0 <two_way_long_needle+0x150>
  402744:	f1cb 0201 	rsb	r2, fp, #1
  402748:	4492      	add	sl, r2
  40274a:	449a      	add	sl, r3
  40274c:	4638      	mov	r0, r7
  40274e:	e7af      	b.n	4026b0 <two_way_long_needle+0x150>
  402750:	4649      	mov	r1, r9
  402752:	e78b      	b.n	40266c <two_way_long_needle+0x10c>
  402754:	eb05 0008 	add.w	r0, r5, r8
  402758:	e796      	b.n	402688 <two_way_long_needle+0x128>
  40275a:	bf00      	nop

0040275c <strstr>:
  40275c:	7802      	ldrb	r2, [r0, #0]
  40275e:	2a00      	cmp	r2, #0
  402760:	f000 8101 	beq.w	402966 <strstr+0x20a>
  402764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402768:	f891 8000 	ldrb.w	r8, [r1]
  40276c:	b085      	sub	sp, #20
  40276e:	4644      	mov	r4, r8
  402770:	f1b8 0f00 	cmp.w	r8, #0
  402774:	d016      	beq.n	4027a4 <strstr+0x48>
  402776:	4686      	mov	lr, r0
  402778:	f101 0c01 	add.w	ip, r1, #1
  40277c:	2701      	movs	r7, #1
  40277e:	e003      	b.n	402788 <strstr+0x2c>
  402780:	f813 4b01 	ldrb.w	r4, [r3], #1
  402784:	b16c      	cbz	r4, 4027a2 <strstr+0x46>
  402786:	469c      	mov	ip, r3
  402788:	42a2      	cmp	r2, r4
  40278a:	bf14      	ite	ne
  40278c:	2700      	movne	r7, #0
  40278e:	f007 0701 	andeq.w	r7, r7, #1
  402792:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  402796:	4663      	mov	r3, ip
  402798:	2a00      	cmp	r2, #0
  40279a:	d1f1      	bne.n	402780 <strstr+0x24>
  40279c:	f89c 3000 	ldrb.w	r3, [ip]
  4027a0:	b9fb      	cbnz	r3, 4027e2 <strstr+0x86>
  4027a2:	b117      	cbz	r7, 4027aa <strstr+0x4e>
  4027a4:	b005      	add	sp, #20
  4027a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027aa:	460e      	mov	r6, r1
  4027ac:	4605      	mov	r5, r0
  4027ae:	4641      	mov	r1, r8
  4027b0:	3001      	adds	r0, #1
  4027b2:	ebac 0406 	sub.w	r4, ip, r6
  4027b6:	f000 f98b 	bl	402ad0 <strchr>
  4027ba:	4607      	mov	r7, r0
  4027bc:	b188      	cbz	r0, 4027e2 <strstr+0x86>
  4027be:	2c01      	cmp	r4, #1
  4027c0:	d0f0      	beq.n	4027a4 <strstr+0x48>
  4027c2:	1928      	adds	r0, r5, r4
  4027c4:	4287      	cmp	r7, r0
  4027c6:	bf94      	ite	ls
  4027c8:	1bc1      	subls	r1, r0, r7
  4027ca:	2101      	movhi	r1, #1
  4027cc:	2c1f      	cmp	r4, #31
  4027ce:	468b      	mov	fp, r1
  4027d0:	d90b      	bls.n	4027ea <strstr+0x8e>
  4027d2:	4623      	mov	r3, r4
  4027d4:	4632      	mov	r2, r6
  4027d6:	4638      	mov	r0, r7
  4027d8:	f7ff fec2 	bl	402560 <two_way_long_needle>
  4027dc:	b005      	add	sp, #20
  4027de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027e2:	2000      	movs	r0, #0
  4027e4:	b005      	add	sp, #20
  4027e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027ea:	aa03      	add	r2, sp, #12
  4027ec:	4621      	mov	r1, r4
  4027ee:	4630      	mov	r0, r6
  4027f0:	f7ff fe5c 	bl	4024ac <critical_factorization>
  4027f4:	9903      	ldr	r1, [sp, #12]
  4027f6:	4680      	mov	r8, r0
  4027f8:	4602      	mov	r2, r0
  4027fa:	4431      	add	r1, r6
  4027fc:	4630      	mov	r0, r6
  4027fe:	f000 f937 	bl	402a70 <memcmp>
  402802:	2800      	cmp	r0, #0
  402804:	d157      	bne.n	4028b6 <strstr+0x15a>
  402806:	f108 33ff 	add.w	r3, r8, #4294967295
  40280a:	9300      	str	r3, [sp, #0]
  40280c:	18f3      	adds	r3, r6, r3
  40280e:	4681      	mov	r9, r0
  402810:	4605      	mov	r5, r0
  402812:	9301      	str	r3, [sp, #4]
  402814:	4658      	mov	r0, fp
  402816:	46b2      	mov	sl, r6
  402818:	1966      	adds	r6, r4, r5
  40281a:	1a32      	subs	r2, r6, r0
  40281c:	2100      	movs	r1, #0
  40281e:	4438      	add	r0, r7
  402820:	f000 f8d6 	bl	4029d0 <memchr>
  402824:	2800      	cmp	r0, #0
  402826:	d1dc      	bne.n	4027e2 <strstr+0x86>
  402828:	2e00      	cmp	r6, #0
  40282a:	d0da      	beq.n	4027e2 <strstr+0x86>
  40282c:	45c8      	cmp	r8, r9
  40282e:	4643      	mov	r3, r8
  402830:	bf38      	it	cc
  402832:	464b      	movcc	r3, r9
  402834:	429c      	cmp	r4, r3
  402836:	d912      	bls.n	40285e <strstr+0x102>
  402838:	195a      	adds	r2, r3, r5
  40283a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40283e:	5cb8      	ldrb	r0, [r7, r2]
  402840:	4281      	cmp	r1, r0
  402842:	443a      	add	r2, r7
  402844:	eb0a 0e03 	add.w	lr, sl, r3
  402848:	d006      	beq.n	402858 <strstr+0xfc>
  40284a:	e02c      	b.n	4028a6 <strstr+0x14a>
  40284c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  402850:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402854:	4288      	cmp	r0, r1
  402856:	d126      	bne.n	4028a6 <strstr+0x14a>
  402858:	3301      	adds	r3, #1
  40285a:	429c      	cmp	r4, r3
  40285c:	d1f6      	bne.n	40284c <strstr+0xf0>
  40285e:	45c8      	cmp	r8, r9
  402860:	9900      	ldr	r1, [sp, #0]
  402862:	f240 8083 	bls.w	40296c <strstr+0x210>
  402866:	9b00      	ldr	r3, [sp, #0]
  402868:	18ea      	adds	r2, r5, r3
  40286a:	9b01      	ldr	r3, [sp, #4]
  40286c:	5cb8      	ldrb	r0, [r7, r2]
  40286e:	781b      	ldrb	r3, [r3, #0]
  402870:	4298      	cmp	r0, r3
  402872:	443a      	add	r2, r7
  402874:	d17a      	bne.n	40296c <strstr+0x210>
  402876:	9801      	ldr	r0, [sp, #4]
  402878:	f109 3bff 	add.w	fp, r9, #4294967295
  40287c:	e006      	b.n	40288c <strstr+0x130>
  40287e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402882:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402886:	45f4      	cmp	ip, lr
  402888:	d103      	bne.n	402892 <strstr+0x136>
  40288a:	4619      	mov	r1, r3
  40288c:	1e4b      	subs	r3, r1, #1
  40288e:	455b      	cmp	r3, fp
  402890:	d1f5      	bne.n	40287e <strstr+0x122>
  402892:	f109 0901 	add.w	r9, r9, #1
  402896:	4589      	cmp	r9, r1
  402898:	d857      	bhi.n	40294a <strstr+0x1ee>
  40289a:	9b03      	ldr	r3, [sp, #12]
  40289c:	4630      	mov	r0, r6
  40289e:	441d      	add	r5, r3
  4028a0:	eba4 0903 	sub.w	r9, r4, r3
  4028a4:	e7b8      	b.n	402818 <strstr+0xbc>
  4028a6:	f1c8 0201 	rsb	r2, r8, #1
  4028aa:	4415      	add	r5, r2
  4028ac:	441d      	add	r5, r3
  4028ae:	f04f 0900 	mov.w	r9, #0
  4028b2:	4630      	mov	r0, r6
  4028b4:	e7b0      	b.n	402818 <strstr+0xbc>
  4028b6:	eba4 0308 	sub.w	r3, r4, r8
  4028ba:	4543      	cmp	r3, r8
  4028bc:	bf38      	it	cc
  4028be:	4643      	movcc	r3, r8
  4028c0:	3301      	adds	r3, #1
  4028c2:	f108 39ff 	add.w	r9, r8, #4294967295
  4028c6:	9303      	str	r3, [sp, #12]
  4028c8:	eb06 0309 	add.w	r3, r6, r9
  4028cc:	4658      	mov	r0, fp
  4028ce:	2500      	movs	r5, #0
  4028d0:	46bb      	mov	fp, r7
  4028d2:	469a      	mov	sl, r3
  4028d4:	1967      	adds	r7, r4, r5
  4028d6:	1a3a      	subs	r2, r7, r0
  4028d8:	2100      	movs	r1, #0
  4028da:	4458      	add	r0, fp
  4028dc:	f000 f878 	bl	4029d0 <memchr>
  4028e0:	2800      	cmp	r0, #0
  4028e2:	f47f af7e 	bne.w	4027e2 <strstr+0x86>
  4028e6:	2f00      	cmp	r7, #0
  4028e8:	f43f af7b 	beq.w	4027e2 <strstr+0x86>
  4028ec:	4544      	cmp	r4, r8
  4028ee:	d915      	bls.n	40291c <strstr+0x1c0>
  4028f0:	eb08 0205 	add.w	r2, r8, r5
  4028f4:	f816 3008 	ldrb.w	r3, [r6, r8]
  4028f8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  4028fc:	4298      	cmp	r0, r3
  4028fe:	445a      	add	r2, fp
  402900:	eb06 0108 	add.w	r1, r6, r8
  402904:	4643      	mov	r3, r8
  402906:	d006      	beq.n	402916 <strstr+0x1ba>
  402908:	e023      	b.n	402952 <strstr+0x1f6>
  40290a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40290e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402912:	4586      	cmp	lr, r0
  402914:	d11d      	bne.n	402952 <strstr+0x1f6>
  402916:	3301      	adds	r3, #1
  402918:	429c      	cmp	r4, r3
  40291a:	d1f6      	bne.n	40290a <strstr+0x1ae>
  40291c:	f1b9 3fff 	cmp.w	r9, #4294967295
  402920:	d012      	beq.n	402948 <strstr+0x1ec>
  402922:	eb05 0209 	add.w	r2, r5, r9
  402926:	f89a 3000 	ldrb.w	r3, [sl]
  40292a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40292e:	4299      	cmp	r1, r3
  402930:	445a      	add	r2, fp
  402932:	d114      	bne.n	40295e <strstr+0x202>
  402934:	4653      	mov	r3, sl
  402936:	e005      	b.n	402944 <strstr+0x1e8>
  402938:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40293c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402940:	4288      	cmp	r0, r1
  402942:	d10c      	bne.n	40295e <strstr+0x202>
  402944:	42b3      	cmp	r3, r6
  402946:	d1f7      	bne.n	402938 <strstr+0x1dc>
  402948:	465f      	mov	r7, fp
  40294a:	1978      	adds	r0, r7, r5
  40294c:	b005      	add	sp, #20
  40294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402952:	f1c8 0201 	rsb	r2, r8, #1
  402956:	4415      	add	r5, r2
  402958:	441d      	add	r5, r3
  40295a:	4638      	mov	r0, r7
  40295c:	e7ba      	b.n	4028d4 <strstr+0x178>
  40295e:	9b03      	ldr	r3, [sp, #12]
  402960:	4638      	mov	r0, r7
  402962:	441d      	add	r5, r3
  402964:	e7b6      	b.n	4028d4 <strstr+0x178>
  402966:	780b      	ldrb	r3, [r1, #0]
  402968:	b913      	cbnz	r3, 402970 <strstr+0x214>
  40296a:	4770      	bx	lr
  40296c:	4641      	mov	r1, r8
  40296e:	e790      	b.n	402892 <strstr+0x136>
  402970:	2000      	movs	r0, #0
  402972:	4770      	bx	lr

00402974 <register_fini>:
  402974:	4b02      	ldr	r3, [pc, #8]	; (402980 <register_fini+0xc>)
  402976:	b113      	cbz	r3, 40297e <register_fini+0xa>
  402978:	4802      	ldr	r0, [pc, #8]	; (402984 <register_fini+0x10>)
  40297a:	f000 b805 	b.w	402988 <atexit>
  40297e:	4770      	bx	lr
  402980:	00000000 	.word	0x00000000
  402984:	00402995 	.word	0x00402995

00402988 <atexit>:
  402988:	2300      	movs	r3, #0
  40298a:	4601      	mov	r1, r0
  40298c:	461a      	mov	r2, r3
  40298e:	4618      	mov	r0, r3
  402990:	f000 b912 	b.w	402bb8 <__register_exitproc>

00402994 <__libc_fini_array>:
  402994:	b538      	push	{r3, r4, r5, lr}
  402996:	4c0a      	ldr	r4, [pc, #40]	; (4029c0 <__libc_fini_array+0x2c>)
  402998:	4d0a      	ldr	r5, [pc, #40]	; (4029c4 <__libc_fini_array+0x30>)
  40299a:	1b64      	subs	r4, r4, r5
  40299c:	10a4      	asrs	r4, r4, #2
  40299e:	d00a      	beq.n	4029b6 <__libc_fini_array+0x22>
  4029a0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4029a4:	3b01      	subs	r3, #1
  4029a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4029aa:	3c01      	subs	r4, #1
  4029ac:	f855 3904 	ldr.w	r3, [r5], #-4
  4029b0:	4798      	blx	r3
  4029b2:	2c00      	cmp	r4, #0
  4029b4:	d1f9      	bne.n	4029aa <__libc_fini_array+0x16>
  4029b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4029ba:	f000 ba43 	b.w	402e44 <_fini>
  4029be:	bf00      	nop
  4029c0:	00402e54 	.word	0x00402e54
  4029c4:	00402e50 	.word	0x00402e50
	...

004029d0 <memchr>:
  4029d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4029d4:	2a10      	cmp	r2, #16
  4029d6:	db2b      	blt.n	402a30 <memchr+0x60>
  4029d8:	f010 0f07 	tst.w	r0, #7
  4029dc:	d008      	beq.n	4029f0 <memchr+0x20>
  4029de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4029e2:	3a01      	subs	r2, #1
  4029e4:	428b      	cmp	r3, r1
  4029e6:	d02d      	beq.n	402a44 <memchr+0x74>
  4029e8:	f010 0f07 	tst.w	r0, #7
  4029ec:	b342      	cbz	r2, 402a40 <memchr+0x70>
  4029ee:	d1f6      	bne.n	4029de <memchr+0xe>
  4029f0:	b4f0      	push	{r4, r5, r6, r7}
  4029f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4029f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4029fa:	f022 0407 	bic.w	r4, r2, #7
  4029fe:	f07f 0700 	mvns.w	r7, #0
  402a02:	2300      	movs	r3, #0
  402a04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402a08:	3c08      	subs	r4, #8
  402a0a:	ea85 0501 	eor.w	r5, r5, r1
  402a0e:	ea86 0601 	eor.w	r6, r6, r1
  402a12:	fa85 f547 	uadd8	r5, r5, r7
  402a16:	faa3 f587 	sel	r5, r3, r7
  402a1a:	fa86 f647 	uadd8	r6, r6, r7
  402a1e:	faa5 f687 	sel	r6, r5, r7
  402a22:	b98e      	cbnz	r6, 402a48 <memchr+0x78>
  402a24:	d1ee      	bne.n	402a04 <memchr+0x34>
  402a26:	bcf0      	pop	{r4, r5, r6, r7}
  402a28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402a2c:	f002 0207 	and.w	r2, r2, #7
  402a30:	b132      	cbz	r2, 402a40 <memchr+0x70>
  402a32:	f810 3b01 	ldrb.w	r3, [r0], #1
  402a36:	3a01      	subs	r2, #1
  402a38:	ea83 0301 	eor.w	r3, r3, r1
  402a3c:	b113      	cbz	r3, 402a44 <memchr+0x74>
  402a3e:	d1f8      	bne.n	402a32 <memchr+0x62>
  402a40:	2000      	movs	r0, #0
  402a42:	4770      	bx	lr
  402a44:	3801      	subs	r0, #1
  402a46:	4770      	bx	lr
  402a48:	2d00      	cmp	r5, #0
  402a4a:	bf06      	itte	eq
  402a4c:	4635      	moveq	r5, r6
  402a4e:	3803      	subeq	r0, #3
  402a50:	3807      	subne	r0, #7
  402a52:	f015 0f01 	tst.w	r5, #1
  402a56:	d107      	bne.n	402a68 <memchr+0x98>
  402a58:	3001      	adds	r0, #1
  402a5a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402a5e:	bf02      	ittt	eq
  402a60:	3001      	addeq	r0, #1
  402a62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402a66:	3001      	addeq	r0, #1
  402a68:	bcf0      	pop	{r4, r5, r6, r7}
  402a6a:	3801      	subs	r0, #1
  402a6c:	4770      	bx	lr
  402a6e:	bf00      	nop

00402a70 <memcmp>:
  402a70:	2a03      	cmp	r2, #3
  402a72:	b470      	push	{r4, r5, r6}
  402a74:	d922      	bls.n	402abc <memcmp+0x4c>
  402a76:	ea40 0301 	orr.w	r3, r0, r1
  402a7a:	079b      	lsls	r3, r3, #30
  402a7c:	d011      	beq.n	402aa2 <memcmp+0x32>
  402a7e:	7803      	ldrb	r3, [r0, #0]
  402a80:	780c      	ldrb	r4, [r1, #0]
  402a82:	42a3      	cmp	r3, r4
  402a84:	d11d      	bne.n	402ac2 <memcmp+0x52>
  402a86:	440a      	add	r2, r1
  402a88:	3101      	adds	r1, #1
  402a8a:	e005      	b.n	402a98 <memcmp+0x28>
  402a8c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402a90:	f811 4b01 	ldrb.w	r4, [r1], #1
  402a94:	42a3      	cmp	r3, r4
  402a96:	d114      	bne.n	402ac2 <memcmp+0x52>
  402a98:	4291      	cmp	r1, r2
  402a9a:	d1f7      	bne.n	402a8c <memcmp+0x1c>
  402a9c:	2000      	movs	r0, #0
  402a9e:	bc70      	pop	{r4, r5, r6}
  402aa0:	4770      	bx	lr
  402aa2:	680d      	ldr	r5, [r1, #0]
  402aa4:	6806      	ldr	r6, [r0, #0]
  402aa6:	42ae      	cmp	r6, r5
  402aa8:	460c      	mov	r4, r1
  402aaa:	4603      	mov	r3, r0
  402aac:	f101 0104 	add.w	r1, r1, #4
  402ab0:	f100 0004 	add.w	r0, r0, #4
  402ab4:	d108      	bne.n	402ac8 <memcmp+0x58>
  402ab6:	3a04      	subs	r2, #4
  402ab8:	2a03      	cmp	r2, #3
  402aba:	d8f2      	bhi.n	402aa2 <memcmp+0x32>
  402abc:	2a00      	cmp	r2, #0
  402abe:	d1de      	bne.n	402a7e <memcmp+0xe>
  402ac0:	e7ec      	b.n	402a9c <memcmp+0x2c>
  402ac2:	1b18      	subs	r0, r3, r4
  402ac4:	bc70      	pop	{r4, r5, r6}
  402ac6:	4770      	bx	lr
  402ac8:	4621      	mov	r1, r4
  402aca:	4618      	mov	r0, r3
  402acc:	e7d7      	b.n	402a7e <memcmp+0xe>
  402ace:	bf00      	nop

00402ad0 <strchr>:
  402ad0:	b2c9      	uxtb	r1, r1
  402ad2:	2900      	cmp	r1, #0
  402ad4:	d041      	beq.n	402b5a <strchr+0x8a>
  402ad6:	0782      	lsls	r2, r0, #30
  402ad8:	b4f0      	push	{r4, r5, r6, r7}
  402ada:	d067      	beq.n	402bac <strchr+0xdc>
  402adc:	7803      	ldrb	r3, [r0, #0]
  402ade:	2b00      	cmp	r3, #0
  402ae0:	d068      	beq.n	402bb4 <strchr+0xe4>
  402ae2:	4299      	cmp	r1, r3
  402ae4:	d037      	beq.n	402b56 <strchr+0x86>
  402ae6:	1c43      	adds	r3, r0, #1
  402ae8:	e004      	b.n	402af4 <strchr+0x24>
  402aea:	f813 0b01 	ldrb.w	r0, [r3], #1
  402aee:	b390      	cbz	r0, 402b56 <strchr+0x86>
  402af0:	4281      	cmp	r1, r0
  402af2:	d02f      	beq.n	402b54 <strchr+0x84>
  402af4:	079a      	lsls	r2, r3, #30
  402af6:	461c      	mov	r4, r3
  402af8:	d1f7      	bne.n	402aea <strchr+0x1a>
  402afa:	6825      	ldr	r5, [r4, #0]
  402afc:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402b00:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402b04:	ea83 0605 	eor.w	r6, r3, r5
  402b08:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  402b0c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402b10:	ea20 0006 	bic.w	r0, r0, r6
  402b14:	ea22 0205 	bic.w	r2, r2, r5
  402b18:	4302      	orrs	r2, r0
  402b1a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b1e:	d111      	bne.n	402b44 <strchr+0x74>
  402b20:	4620      	mov	r0, r4
  402b22:	f850 6f04 	ldr.w	r6, [r0, #4]!
  402b26:	ea83 0706 	eor.w	r7, r3, r6
  402b2a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  402b2e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  402b32:	ea25 0507 	bic.w	r5, r5, r7
  402b36:	ea22 0206 	bic.w	r2, r2, r6
  402b3a:	432a      	orrs	r2, r5
  402b3c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b40:	d0ef      	beq.n	402b22 <strchr+0x52>
  402b42:	4604      	mov	r4, r0
  402b44:	7820      	ldrb	r0, [r4, #0]
  402b46:	b918      	cbnz	r0, 402b50 <strchr+0x80>
  402b48:	e005      	b.n	402b56 <strchr+0x86>
  402b4a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  402b4e:	b110      	cbz	r0, 402b56 <strchr+0x86>
  402b50:	4281      	cmp	r1, r0
  402b52:	d1fa      	bne.n	402b4a <strchr+0x7a>
  402b54:	4620      	mov	r0, r4
  402b56:	bcf0      	pop	{r4, r5, r6, r7}
  402b58:	4770      	bx	lr
  402b5a:	0783      	lsls	r3, r0, #30
  402b5c:	d024      	beq.n	402ba8 <strchr+0xd8>
  402b5e:	7803      	ldrb	r3, [r0, #0]
  402b60:	2b00      	cmp	r3, #0
  402b62:	d0f9      	beq.n	402b58 <strchr+0x88>
  402b64:	1c43      	adds	r3, r0, #1
  402b66:	e003      	b.n	402b70 <strchr+0xa0>
  402b68:	7802      	ldrb	r2, [r0, #0]
  402b6a:	3301      	adds	r3, #1
  402b6c:	2a00      	cmp	r2, #0
  402b6e:	d0f3      	beq.n	402b58 <strchr+0x88>
  402b70:	0799      	lsls	r1, r3, #30
  402b72:	4618      	mov	r0, r3
  402b74:	d1f8      	bne.n	402b68 <strchr+0x98>
  402b76:	6819      	ldr	r1, [r3, #0]
  402b78:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402b7c:	ea22 0201 	bic.w	r2, r2, r1
  402b80:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b84:	d108      	bne.n	402b98 <strchr+0xc8>
  402b86:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402b8a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402b8e:	ea22 0201 	bic.w	r2, r2, r1
  402b92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402b96:	d0f6      	beq.n	402b86 <strchr+0xb6>
  402b98:	781a      	ldrb	r2, [r3, #0]
  402b9a:	4618      	mov	r0, r3
  402b9c:	b142      	cbz	r2, 402bb0 <strchr+0xe0>
  402b9e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402ba2:	2b00      	cmp	r3, #0
  402ba4:	d1fb      	bne.n	402b9e <strchr+0xce>
  402ba6:	4770      	bx	lr
  402ba8:	4603      	mov	r3, r0
  402baa:	e7e4      	b.n	402b76 <strchr+0xa6>
  402bac:	4604      	mov	r4, r0
  402bae:	e7a4      	b.n	402afa <strchr+0x2a>
  402bb0:	4618      	mov	r0, r3
  402bb2:	4770      	bx	lr
  402bb4:	4618      	mov	r0, r3
  402bb6:	e7ce      	b.n	402b56 <strchr+0x86>

00402bb8 <__register_exitproc>:
  402bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402bbc:	4c25      	ldr	r4, [pc, #148]	; (402c54 <__register_exitproc+0x9c>)
  402bbe:	6825      	ldr	r5, [r4, #0]
  402bc0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402bc4:	4606      	mov	r6, r0
  402bc6:	4688      	mov	r8, r1
  402bc8:	4692      	mov	sl, r2
  402bca:	4699      	mov	r9, r3
  402bcc:	b3c4      	cbz	r4, 402c40 <__register_exitproc+0x88>
  402bce:	6860      	ldr	r0, [r4, #4]
  402bd0:	281f      	cmp	r0, #31
  402bd2:	dc17      	bgt.n	402c04 <__register_exitproc+0x4c>
  402bd4:	1c43      	adds	r3, r0, #1
  402bd6:	b176      	cbz	r6, 402bf6 <__register_exitproc+0x3e>
  402bd8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402bdc:	2201      	movs	r2, #1
  402bde:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402be2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402be6:	4082      	lsls	r2, r0
  402be8:	4311      	orrs	r1, r2
  402bea:	2e02      	cmp	r6, #2
  402bec:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402bf0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402bf4:	d01e      	beq.n	402c34 <__register_exitproc+0x7c>
  402bf6:	3002      	adds	r0, #2
  402bf8:	6063      	str	r3, [r4, #4]
  402bfa:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402bfe:	2000      	movs	r0, #0
  402c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c04:	4b14      	ldr	r3, [pc, #80]	; (402c58 <__register_exitproc+0xa0>)
  402c06:	b303      	cbz	r3, 402c4a <__register_exitproc+0x92>
  402c08:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c0c:	f3af 8000 	nop.w
  402c10:	4604      	mov	r4, r0
  402c12:	b1d0      	cbz	r0, 402c4a <__register_exitproc+0x92>
  402c14:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402c18:	2700      	movs	r7, #0
  402c1a:	e880 0088 	stmia.w	r0, {r3, r7}
  402c1e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402c22:	4638      	mov	r0, r7
  402c24:	2301      	movs	r3, #1
  402c26:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402c2a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402c2e:	2e00      	cmp	r6, #0
  402c30:	d0e1      	beq.n	402bf6 <__register_exitproc+0x3e>
  402c32:	e7d1      	b.n	402bd8 <__register_exitproc+0x20>
  402c34:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402c38:	430a      	orrs	r2, r1
  402c3a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402c3e:	e7da      	b.n	402bf6 <__register_exitproc+0x3e>
  402c40:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402c44:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402c48:	e7c1      	b.n	402bce <__register_exitproc+0x16>
  402c4a:	f04f 30ff 	mov.w	r0, #4294967295
  402c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c52:	bf00      	nop
  402c54:	00402e2c 	.word	0x00402e2c
  402c58:	00000000 	.word	0x00000000
  402c5c:	000e1000 	.word	0x000e1000
  402c60:	000000c0 	.word	0x000000c0
  402c64:	00000800 	.word	0x00000800
	...
  402c74:	20656466 	.word	0x20656466
  402c78:	67616d69 	.word	0x67616d69
  402c7c:	706a2e65 	.word	0x706a2e65
  402c80:	000a0d67 	.word	0x000a0d67
  402c84:	20726366 	.word	0x20726366
  402c88:	67616d69 	.word	0x67616d69
  402c8c:	706a2e65 	.word	0x706a2e65
  402c90:	64252067 	.word	0x64252067
  402c94:	00000a0d 	.word	0x00000a0d
  402c98:	736f6c63 	.word	0x736f6c63
  402c9c:	6c612065 	.word	0x6c612065
  402ca0:	000a0d6c 	.word	0x000a0d6c
  402ca4:	70747468 	.word	0x70747468
  402ca8:	736f705f 	.word	0x736f705f
  402cac:	6f2d2074 	.word	0x6f2d2074
  402cb0:	74746820 	.word	0x74746820
  402cb4:	2f3a7370 	.word	0x2f3a7370
  402cb8:	6769622f 	.word	0x6769622f
  402cbc:	746f7262 	.word	0x746f7262
  402cc0:	73726568 	.word	0x73726568
  402cc4:	2e736565 	.word	0x2e736565
  402cc8:	702f656d 	.word	0x702f656d
  402ccc:	5f74736f 	.word	0x5f74736f
  402cd0:	67616d69 	.word	0x67616d69
  402cd4:	70612065 	.word	0x70612065
  402cd8:	63696c70 	.word	0x63696c70
  402cdc:	6f697461 	.word	0x6f697461
  402ce0:	736a2f6e 	.word	0x736a2f6e
  402ce4:	0a0d6e6f 	.word	0x0a0d6e6f
  402ce8:	00000000 	.word	0x00000000
  402cec:	70747468 	.word	0x70747468
  402cf0:	6464615f 	.word	0x6464615f
  402cf4:	6165685f 	.word	0x6165685f
  402cf8:	20726564 	.word	0x20726564
  402cfc:	656d2030 	.word	0x656d2030
  402d00:	67617373 	.word	0x67617373
  402d04:	79742d65 	.word	0x79742d65
  402d08:	69206570 	.word	0x69206570
  402d0c:	6567616d 	.word	0x6567616d
  402d10:	6e69622d 	.word	0x6e69622d
  402d14:	00000a0d 	.word	0x00000a0d
  402d18:	74697277 	.word	0x74697277
  402d1c:	20302065 	.word	0x20302065
  402d20:	0a0d6425 	.word	0x0a0d6425
  402d24:	00000000 	.word	0x00000000
  402d28:	70747468 	.word	0x70747468
  402d2c:	6165725f 	.word	0x6165725f
  402d30:	74735f64 	.word	0x74735f64
  402d34:	73757461 	.word	0x73757461
  402d38:	0a0d3020 	.word	0x0a0d3020
  402d3c:	00000000 	.word	0x00000000
  402d40:	6e65704f 	.word	0x6e65704f
  402d44:	00006465 	.word	0x00006465
  402d48:	70747468 	.word	0x70747468
  402d4c:	6464615f 	.word	0x6464615f
  402d50:	6165685f 	.word	0x6165685f
  402d54:	20726564 	.word	0x20726564
  402d58:	656d2030 	.word	0x656d2030
  402d5c:	67617373 	.word	0x67617373
  402d60:	79742d65 	.word	0x79742d65
  402d64:	61206570 	.word	0x61206570
  402d68:	6f696475 	.word	0x6f696475
  402d6c:	6e69622d 	.word	0x6e69622d
  402d70:	00000a0d 	.word	0x00000a0d
  402d74:	20656466 	.word	0x20656466
  402d78:	6d746162 	.word	0x6d746162
  402d7c:	742e6e61 	.word	0x742e6e61
  402d80:	0a0d7478 	.word	0x0a0d7478
  402d84:	00000000 	.word	0x00000000
  402d88:	20726366 	.word	0x20726366
  402d8c:	6d746162 	.word	0x6d746162
  402d90:	742e6e61 	.word	0x742e6e61
  402d94:	25207478 	.word	0x25207478
  402d98:	000a0d64 	.word	0x000a0d64
  402d9c:	75746573 	.word	0x75746573
  402da0:	65772070 	.word	0x65772070
  402da4:	000a0d62 	.word	0x000a0d62
  402da8:	7373415b 	.word	0x7373415b
  402dac:	6169636f 	.word	0x6169636f
  402db0:	5d646574 	.word	0x5d646574
  402db4:	00000a0d 	.word	0x00000a0d
  402db8:	20746567 	.word	0x20746567
  402dbc:	74737973 	.word	0x74737973
  402dc0:	732e6d65 	.word	0x732e6d65
  402dc4:	6d656661 	.word	0x6d656661
  402dc8:	2e65646f 	.word	0x2e65646f
  402dcc:	74617473 	.word	0x74617473
  402dd0:	0a0d7375 	.word	0x0a0d7375
  402dd4:	00000000 	.word	0x00000000
  402dd8:	6c756166 	.word	0x6c756166
  402ddc:	705f7374 	.word	0x705f7374
  402de0:	746e6972 	.word	0x746e6972
  402de4:	00000a0d 	.word	0x00000a0d
  402de8:	6c756166 	.word	0x6c756166
  402dec:	725f7374 	.word	0x725f7374
  402df0:	74657365 	.word	0x74657365
  402df4:	00000a0d 	.word	0x00000a0d
  402df8:	6f626572 	.word	0x6f626572
  402dfc:	0a0d746f 	.word	0x0a0d746f
  402e00:	00000000 	.word	0x00000000
  402e04:	20746573 	.word	0x20746573
  402e08:	63207973 	.word	0x63207973
  402e0c:	6f206520 	.word	0x6f206520
  402e10:	0a0d6666 	.word	0x0a0d6666
  402e14:	00000000 	.word	0x00000000
  402e18:	20746573 	.word	0x20746573
  402e1c:	63207973 	.word	0x63207973
  402e20:	6f207020 	.word	0x6f207020
  402e24:	0a0d6666 	.word	0x0a0d6666
  402e28:	00000000 	.word	0x00000000

00402e2c <_global_impure_ptr>:
  402e2c:	20000010                                ... 

00402e30 <_init>:
  402e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e32:	bf00      	nop
  402e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e36:	bc08      	pop	{r3}
  402e38:	469e      	mov	lr, r3
  402e3a:	4770      	bx	lr

00402e3c <__init_array_start>:
  402e3c:	00402975 	.word	0x00402975

00402e40 <__frame_dummy_init_array_entry>:
  402e40:	004000f1                                ..@.

00402e44 <_fini>:
  402e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e46:	bf00      	nop
  402e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e4a:	bc08      	pop	{r3}
  402e4c:	469e      	mov	lr, r3
  402e4e:	4770      	bx	lr

00402e50 <__fini_array_start>:
  402e50:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
