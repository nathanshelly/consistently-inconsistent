
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004026c0  004026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  004026c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002ac  20000438  00402b00  00020438  2**2
                  ALLOC
  4 .stack        00003004  200006e4  00402dac  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000919f  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001872  00000000  00000000  0002965a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b56  00000000  00000000  0002aecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009f8  00000000  00000000  00030a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000978  00000000  00000000  0003141a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000049b2  00000000  00000000  00031d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b404  00000000  00000000  00036744  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004dabf  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b5c  00000000  00000000  0008f608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200036e8 	.word	0x200036e8
  400004:	00401ce1 	.word	0x00401ce1
  400008:	00401da9 	.word	0x00401da9
  40000c:	00401da9 	.word	0x00401da9
  400010:	00401da9 	.word	0x00401da9
  400014:	00401da9 	.word	0x00401da9
  400018:	00401da9 	.word	0x00401da9
	...
  40002c:	00401da9 	.word	0x00401da9
  400030:	00401da9 	.word	0x00401da9
  400034:	00000000 	.word	0x00000000
  400038:	00401da9 	.word	0x00401da9
  40003c:	00401da9 	.word	0x00401da9
  400040:	00401da9 	.word	0x00401da9
  400044:	00401da9 	.word	0x00401da9
  400048:	00401da9 	.word	0x00401da9
  40004c:	00401da9 	.word	0x00401da9
  400050:	00401da9 	.word	0x00401da9
  400054:	00401da9 	.word	0x00401da9
  400058:	00401da9 	.word	0x00401da9
  40005c:	00000000 	.word	0x00000000
  400060:	00401da9 	.word	0x00401da9
  400064:	00401da9 	.word	0x00401da9
  400068:	00000000 	.word	0x00000000
  40006c:	00400425 	.word	0x00400425
  400070:	0040043d 	.word	0x0040043d
  400074:	00000000 	.word	0x00000000
  400078:	00400ab9 	.word	0x00400ab9
  40007c:	00401da9 	.word	0x00401da9
	...
  400088:	00401da9 	.word	0x00401da9
  40008c:	00401da9 	.word	0x00401da9
  400090:	00401da9 	.word	0x00401da9
  400094:	00401da9 	.word	0x00401da9
  400098:	00401da9 	.word	0x00401da9
  40009c:	0040088d 	.word	0x0040088d
  4000a0:	00401da9 	.word	0x00401da9
  4000a4:	00401da9 	.word	0x00401da9
	...
  4000b4:	00401da9 	.word	0x00401da9
  4000b8:	00401da9 	.word	0x00401da9
  4000bc:	00401da9 	.word	0x00401da9
  4000c0:	00401da9 	.word	0x00401da9
  4000c4:	00401da9 	.word	0x00401da9
  4000c8:	00401da9 	.word	0x00401da9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004026c8 	.word	0x004026c8

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000043c 	.word	0x2000043c
  40011c:	004026c8 	.word	0x004026c8
  400120:	004026c8 	.word	0x004026c8
  400124:	00000000 	.word	0x00000000

00400128 <tc_init>:
  400128:	b480      	push	{r7}
  40012a:	b087      	sub	sp, #28
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
  400134:	68fa      	ldr	r2, [r7, #12]
  400136:	68bb      	ldr	r3, [r7, #8]
  400138:	019b      	lsls	r3, r3, #6
  40013a:	4413      	add	r3, r2
  40013c:	617b      	str	r3, [r7, #20]
  40013e:	697b      	ldr	r3, [r7, #20]
  400140:	2202      	movs	r2, #2
  400142:	601a      	str	r2, [r3, #0]
  400144:	697b      	ldr	r3, [r7, #20]
  400146:	f04f 32ff 	mov.w	r2, #4294967295
  40014a:	629a      	str	r2, [r3, #40]	; 0x28
  40014c:	697b      	ldr	r3, [r7, #20]
  40014e:	6a1b      	ldr	r3, [r3, #32]
  400150:	697b      	ldr	r3, [r7, #20]
  400152:	687a      	ldr	r2, [r7, #4]
  400154:	605a      	str	r2, [r3, #4]
  400156:	bf00      	nop
  400158:	371c      	adds	r7, #28
  40015a:	46bd      	mov	sp, r7
  40015c:	bc80      	pop	{r7}
  40015e:	4770      	bx	lr

00400160 <tc_start>:
  400160:	b480      	push	{r7}
  400162:	b083      	sub	sp, #12
  400164:	af00      	add	r7, sp, #0
  400166:	6078      	str	r0, [r7, #4]
  400168:	6039      	str	r1, [r7, #0]
  40016a:	687a      	ldr	r2, [r7, #4]
  40016c:	683b      	ldr	r3, [r7, #0]
  40016e:	019b      	lsls	r3, r3, #6
  400170:	4413      	add	r3, r2
  400172:	2205      	movs	r2, #5
  400174:	601a      	str	r2, [r3, #0]
  400176:	bf00      	nop
  400178:	370c      	adds	r7, #12
  40017a:	46bd      	mov	sp, r7
  40017c:	bc80      	pop	{r7}
  40017e:	4770      	bx	lr

00400180 <tc_write_rc>:
  400180:	b480      	push	{r7}
  400182:	b085      	sub	sp, #20
  400184:	af00      	add	r7, sp, #0
  400186:	60f8      	str	r0, [r7, #12]
  400188:	60b9      	str	r1, [r7, #8]
  40018a:	607a      	str	r2, [r7, #4]
  40018c:	68fa      	ldr	r2, [r7, #12]
  40018e:	68bb      	ldr	r3, [r7, #8]
  400190:	019b      	lsls	r3, r3, #6
  400192:	4413      	add	r3, r2
  400194:	331c      	adds	r3, #28
  400196:	687a      	ldr	r2, [r7, #4]
  400198:	601a      	str	r2, [r3, #0]
  40019a:	bf00      	nop
  40019c:	3714      	adds	r7, #20
  40019e:	46bd      	mov	sp, r7
  4001a0:	bc80      	pop	{r7}
  4001a2:	4770      	bx	lr

004001a4 <tc_enable_interrupt>:
  4001a4:	b480      	push	{r7}
  4001a6:	b087      	sub	sp, #28
  4001a8:	af00      	add	r7, sp, #0
  4001aa:	60f8      	str	r0, [r7, #12]
  4001ac:	60b9      	str	r1, [r7, #8]
  4001ae:	607a      	str	r2, [r7, #4]
  4001b0:	68fa      	ldr	r2, [r7, #12]
  4001b2:	68bb      	ldr	r3, [r7, #8]
  4001b4:	019b      	lsls	r3, r3, #6
  4001b6:	4413      	add	r3, r2
  4001b8:	617b      	str	r3, [r7, #20]
  4001ba:	697b      	ldr	r3, [r7, #20]
  4001bc:	687a      	ldr	r2, [r7, #4]
  4001be:	625a      	str	r2, [r3, #36]	; 0x24
  4001c0:	bf00      	nop
  4001c2:	371c      	adds	r7, #28
  4001c4:	46bd      	mov	sp, r7
  4001c6:	bc80      	pop	{r7}
  4001c8:	4770      	bx	lr
  4001ca:	bf00      	nop

004001cc <tc_get_status>:
  4001cc:	b480      	push	{r7}
  4001ce:	b085      	sub	sp, #20
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
  4001d4:	6039      	str	r1, [r7, #0]
  4001d6:	687a      	ldr	r2, [r7, #4]
  4001d8:	683b      	ldr	r3, [r7, #0]
  4001da:	019b      	lsls	r3, r3, #6
  4001dc:	4413      	add	r3, r2
  4001de:	60fb      	str	r3, [r7, #12]
  4001e0:	68fb      	ldr	r3, [r7, #12]
  4001e2:	6a1b      	ldr	r3, [r3, #32]
  4001e4:	4618      	mov	r0, r3
  4001e6:	3714      	adds	r7, #20
  4001e8:	46bd      	mov	sp, r7
  4001ea:	bc80      	pop	{r7}
  4001ec:	4770      	bx	lr
  4001ee:	bf00      	nop

004001f0 <tc_find_mck_divisor>:
  4001f0:	b480      	push	{r7}
  4001f2:	b08d      	sub	sp, #52	; 0x34
  4001f4:	af00      	add	r7, sp, #0
  4001f6:	60f8      	str	r0, [r7, #12]
  4001f8:	60b9      	str	r1, [r7, #8]
  4001fa:	607a      	str	r2, [r7, #4]
  4001fc:	603b      	str	r3, [r7, #0]
  4001fe:	2302      	movs	r3, #2
  400200:	613b      	str	r3, [r7, #16]
  400202:	2308      	movs	r3, #8
  400204:	617b      	str	r3, [r7, #20]
  400206:	2320      	movs	r3, #32
  400208:	61bb      	str	r3, [r7, #24]
  40020a:	2380      	movs	r3, #128	; 0x80
  40020c:	61fb      	str	r3, [r7, #28]
  40020e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400210:	0bdb      	lsrs	r3, r3, #15
  400212:	623b      	str	r3, [r7, #32]
  400214:	2300      	movs	r3, #0
  400216:	62fb      	str	r3, [r7, #44]	; 0x2c
  400218:	e01a      	b.n	400250 <tc_find_mck_divisor+0x60>
  40021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40021c:	009b      	lsls	r3, r3, #2
  40021e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400222:	4413      	add	r3, r2
  400224:	f853 3c20 	ldr.w	r3, [r3, #-32]
  400228:	68ba      	ldr	r2, [r7, #8]
  40022a:	fbb2 f3f3 	udiv	r3, r2, r3
  40022e:	62bb      	str	r3, [r7, #40]	; 0x28
  400230:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400232:	0c1b      	lsrs	r3, r3, #16
  400234:	627b      	str	r3, [r7, #36]	; 0x24
  400236:	68fa      	ldr	r2, [r7, #12]
  400238:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40023a:	429a      	cmp	r2, r3
  40023c:	d901      	bls.n	400242 <tc_find_mck_divisor+0x52>
  40023e:	2300      	movs	r3, #0
  400240:	e023      	b.n	40028a <tc_find_mck_divisor+0x9a>
  400242:	68fa      	ldr	r2, [r7, #12]
  400244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400246:	429a      	cmp	r2, r3
  400248:	d206      	bcs.n	400258 <tc_find_mck_divisor+0x68>
  40024a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40024c:	3301      	adds	r3, #1
  40024e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400252:	2b04      	cmp	r3, #4
  400254:	d9e1      	bls.n	40021a <tc_find_mck_divisor+0x2a>
  400256:	e000      	b.n	40025a <tc_find_mck_divisor+0x6a>
  400258:	bf00      	nop
  40025a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40025c:	2b04      	cmp	r3, #4
  40025e:	d901      	bls.n	400264 <tc_find_mck_divisor+0x74>
  400260:	2300      	movs	r3, #0
  400262:	e012      	b.n	40028a <tc_find_mck_divisor+0x9a>
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b00      	cmp	r3, #0
  400268:	d008      	beq.n	40027c <tc_find_mck_divisor+0x8c>
  40026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40026c:	009b      	lsls	r3, r3, #2
  40026e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400272:	4413      	add	r3, r2
  400274:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	601a      	str	r2, [r3, #0]
  40027c:	683b      	ldr	r3, [r7, #0]
  40027e:	2b00      	cmp	r3, #0
  400280:	d002      	beq.n	400288 <tc_find_mck_divisor+0x98>
  400282:	683b      	ldr	r3, [r7, #0]
  400284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400286:	601a      	str	r2, [r3, #0]
  400288:	2301      	movs	r3, #1
  40028a:	4618      	mov	r0, r3
  40028c:	3734      	adds	r7, #52	; 0x34
  40028e:	46bd      	mov	sp, r7
  400290:	bc80      	pop	{r7}
  400292:	4770      	bx	lr

00400294 <wdt_disable>:
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002a2:	605a      	str	r2, [r3, #4]
  4002a4:	bf00      	nop
  4002a6:	370c      	adds	r7, #12
  4002a8:	46bd      	mov	sp, r7
  4002aa:	bc80      	pop	{r7}
  4002ac:	4770      	bx	lr
  4002ae:	bf00      	nop

004002b0 <pio_handler_process>:
  4002b0:	b580      	push	{r7, lr}
  4002b2:	b084      	sub	sp, #16
  4002b4:	af00      	add	r7, sp, #0
  4002b6:	6078      	str	r0, [r7, #4]
  4002b8:	6039      	str	r1, [r7, #0]
  4002ba:	6878      	ldr	r0, [r7, #4]
  4002bc:	4b2c      	ldr	r3, [pc, #176]	; (400370 <pio_handler_process+0xc0>)
  4002be:	4798      	blx	r3
  4002c0:	60f8      	str	r0, [r7, #12]
  4002c2:	6878      	ldr	r0, [r7, #4]
  4002c4:	4b2b      	ldr	r3, [pc, #172]	; (400374 <pio_handler_process+0xc4>)
  4002c6:	4798      	blx	r3
  4002c8:	4602      	mov	r2, r0
  4002ca:	68fb      	ldr	r3, [r7, #12]
  4002cc:	4013      	ands	r3, r2
  4002ce:	60fb      	str	r3, [r7, #12]
  4002d0:	68fb      	ldr	r3, [r7, #12]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d03c      	beq.n	400350 <pio_handler_process+0xa0>
  4002d6:	2300      	movs	r3, #0
  4002d8:	60bb      	str	r3, [r7, #8]
  4002da:	e034      	b.n	400346 <pio_handler_process+0x96>
  4002dc:	4a26      	ldr	r2, [pc, #152]	; (400378 <pio_handler_process+0xc8>)
  4002de:	68bb      	ldr	r3, [r7, #8]
  4002e0:	011b      	lsls	r3, r3, #4
  4002e2:	4413      	add	r3, r2
  4002e4:	681a      	ldr	r2, [r3, #0]
  4002e6:	683b      	ldr	r3, [r7, #0]
  4002e8:	429a      	cmp	r2, r3
  4002ea:	d126      	bne.n	40033a <pio_handler_process+0x8a>
  4002ec:	4a22      	ldr	r2, [pc, #136]	; (400378 <pio_handler_process+0xc8>)
  4002ee:	68bb      	ldr	r3, [r7, #8]
  4002f0:	011b      	lsls	r3, r3, #4
  4002f2:	4413      	add	r3, r2
  4002f4:	3304      	adds	r3, #4
  4002f6:	681a      	ldr	r2, [r3, #0]
  4002f8:	68fb      	ldr	r3, [r7, #12]
  4002fa:	4013      	ands	r3, r2
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d01c      	beq.n	40033a <pio_handler_process+0x8a>
  400300:	4a1d      	ldr	r2, [pc, #116]	; (400378 <pio_handler_process+0xc8>)
  400302:	68bb      	ldr	r3, [r7, #8]
  400304:	011b      	lsls	r3, r3, #4
  400306:	4413      	add	r3, r2
  400308:	330c      	adds	r3, #12
  40030a:	681b      	ldr	r3, [r3, #0]
  40030c:	491a      	ldr	r1, [pc, #104]	; (400378 <pio_handler_process+0xc8>)
  40030e:	68ba      	ldr	r2, [r7, #8]
  400310:	0112      	lsls	r2, r2, #4
  400312:	440a      	add	r2, r1
  400314:	6810      	ldr	r0, [r2, #0]
  400316:	4918      	ldr	r1, [pc, #96]	; (400378 <pio_handler_process+0xc8>)
  400318:	68ba      	ldr	r2, [r7, #8]
  40031a:	0112      	lsls	r2, r2, #4
  40031c:	440a      	add	r2, r1
  40031e:	3204      	adds	r2, #4
  400320:	6812      	ldr	r2, [r2, #0]
  400322:	4611      	mov	r1, r2
  400324:	4798      	blx	r3
  400326:	4a14      	ldr	r2, [pc, #80]	; (400378 <pio_handler_process+0xc8>)
  400328:	68bb      	ldr	r3, [r7, #8]
  40032a:	011b      	lsls	r3, r3, #4
  40032c:	4413      	add	r3, r2
  40032e:	3304      	adds	r3, #4
  400330:	681b      	ldr	r3, [r3, #0]
  400332:	43db      	mvns	r3, r3
  400334:	68fa      	ldr	r2, [r7, #12]
  400336:	4013      	ands	r3, r2
  400338:	60fb      	str	r3, [r7, #12]
  40033a:	68bb      	ldr	r3, [r7, #8]
  40033c:	3301      	adds	r3, #1
  40033e:	60bb      	str	r3, [r7, #8]
  400340:	68bb      	ldr	r3, [r7, #8]
  400342:	2b06      	cmp	r3, #6
  400344:	d803      	bhi.n	40034e <pio_handler_process+0x9e>
  400346:	68fb      	ldr	r3, [r7, #12]
  400348:	2b00      	cmp	r3, #0
  40034a:	d1c7      	bne.n	4002dc <pio_handler_process+0x2c>
  40034c:	e000      	b.n	400350 <pio_handler_process+0xa0>
  40034e:	bf00      	nop
  400350:	4b0a      	ldr	r3, [pc, #40]	; (40037c <pio_handler_process+0xcc>)
  400352:	681b      	ldr	r3, [r3, #0]
  400354:	2b00      	cmp	r3, #0
  400356:	d007      	beq.n	400368 <pio_handler_process+0xb8>
  400358:	4b09      	ldr	r3, [pc, #36]	; (400380 <pio_handler_process+0xd0>)
  40035a:	681b      	ldr	r3, [r3, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d003      	beq.n	400368 <pio_handler_process+0xb8>
  400360:	4b07      	ldr	r3, [pc, #28]	; (400380 <pio_handler_process+0xd0>)
  400362:	681b      	ldr	r3, [r3, #0]
  400364:	6878      	ldr	r0, [r7, #4]
  400366:	4798      	blx	r3
  400368:	bf00      	nop
  40036a:	3710      	adds	r7, #16
  40036c:	46bd      	mov	sp, r7
  40036e:	bd80      	pop	{r7, pc}
  400370:	004014b9 	.word	0x004014b9
  400374:	004014d1 	.word	0x004014d1
  400378:	20000454 	.word	0x20000454
  40037c:	200006e0 	.word	0x200006e0
  400380:	200004c8 	.word	0x200004c8

00400384 <pio_handler_set>:
  400384:	b580      	push	{r7, lr}
  400386:	b086      	sub	sp, #24
  400388:	af00      	add	r7, sp, #0
  40038a:	60f8      	str	r0, [r7, #12]
  40038c:	60b9      	str	r1, [r7, #8]
  40038e:	607a      	str	r2, [r7, #4]
  400390:	603b      	str	r3, [r7, #0]
  400392:	4b21      	ldr	r3, [pc, #132]	; (400418 <pio_handler_set+0x94>)
  400394:	681b      	ldr	r3, [r3, #0]
  400396:	2b06      	cmp	r3, #6
  400398:	d901      	bls.n	40039e <pio_handler_set+0x1a>
  40039a:	2301      	movs	r3, #1
  40039c:	e038      	b.n	400410 <pio_handler_set+0x8c>
  40039e:	2300      	movs	r3, #0
  4003a0:	75fb      	strb	r3, [r7, #23]
  4003a2:	e011      	b.n	4003c8 <pio_handler_set+0x44>
  4003a4:	7dfb      	ldrb	r3, [r7, #23]
  4003a6:	011b      	lsls	r3, r3, #4
  4003a8:	4a1c      	ldr	r2, [pc, #112]	; (40041c <pio_handler_set+0x98>)
  4003aa:	4413      	add	r3, r2
  4003ac:	613b      	str	r3, [r7, #16]
  4003ae:	693b      	ldr	r3, [r7, #16]
  4003b0:	681a      	ldr	r2, [r3, #0]
  4003b2:	68bb      	ldr	r3, [r7, #8]
  4003b4:	429a      	cmp	r2, r3
  4003b6:	d104      	bne.n	4003c2 <pio_handler_set+0x3e>
  4003b8:	693b      	ldr	r3, [r7, #16]
  4003ba:	685a      	ldr	r2, [r3, #4]
  4003bc:	687b      	ldr	r3, [r7, #4]
  4003be:	429a      	cmp	r2, r3
  4003c0:	d008      	beq.n	4003d4 <pio_handler_set+0x50>
  4003c2:	7dfb      	ldrb	r3, [r7, #23]
  4003c4:	3301      	adds	r3, #1
  4003c6:	75fb      	strb	r3, [r7, #23]
  4003c8:	7dfa      	ldrb	r2, [r7, #23]
  4003ca:	4b13      	ldr	r3, [pc, #76]	; (400418 <pio_handler_set+0x94>)
  4003cc:	681b      	ldr	r3, [r3, #0]
  4003ce:	429a      	cmp	r2, r3
  4003d0:	d9e8      	bls.n	4003a4 <pio_handler_set+0x20>
  4003d2:	e000      	b.n	4003d6 <pio_handler_set+0x52>
  4003d4:	bf00      	nop
  4003d6:	693b      	ldr	r3, [r7, #16]
  4003d8:	68ba      	ldr	r2, [r7, #8]
  4003da:	601a      	str	r2, [r3, #0]
  4003dc:	693b      	ldr	r3, [r7, #16]
  4003de:	687a      	ldr	r2, [r7, #4]
  4003e0:	605a      	str	r2, [r3, #4]
  4003e2:	693b      	ldr	r3, [r7, #16]
  4003e4:	683a      	ldr	r2, [r7, #0]
  4003e6:	609a      	str	r2, [r3, #8]
  4003e8:	693b      	ldr	r3, [r7, #16]
  4003ea:	6a3a      	ldr	r2, [r7, #32]
  4003ec:	60da      	str	r2, [r3, #12]
  4003ee:	7dfa      	ldrb	r2, [r7, #23]
  4003f0:	4b09      	ldr	r3, [pc, #36]	; (400418 <pio_handler_set+0x94>)
  4003f2:	681b      	ldr	r3, [r3, #0]
  4003f4:	3301      	adds	r3, #1
  4003f6:	429a      	cmp	r2, r3
  4003f8:	d104      	bne.n	400404 <pio_handler_set+0x80>
  4003fa:	4b07      	ldr	r3, [pc, #28]	; (400418 <pio_handler_set+0x94>)
  4003fc:	681b      	ldr	r3, [r3, #0]
  4003fe:	3301      	adds	r3, #1
  400400:	4a05      	ldr	r2, [pc, #20]	; (400418 <pio_handler_set+0x94>)
  400402:	6013      	str	r3, [r2, #0]
  400404:	683a      	ldr	r2, [r7, #0]
  400406:	6879      	ldr	r1, [r7, #4]
  400408:	68f8      	ldr	r0, [r7, #12]
  40040a:	4b05      	ldr	r3, [pc, #20]	; (400420 <pio_handler_set+0x9c>)
  40040c:	4798      	blx	r3
  40040e:	2300      	movs	r3, #0
  400410:	4618      	mov	r0, r3
  400412:	3718      	adds	r7, #24
  400414:	46bd      	mov	sp, r7
  400416:	bd80      	pop	{r7, pc}
  400418:	200004c4 	.word	0x200004c4
  40041c:	20000454 	.word	0x20000454
  400420:	00401415 	.word	0x00401415

00400424 <PIOA_Handler>:
  400424:	b580      	push	{r7, lr}
  400426:	af00      	add	r7, sp, #0
  400428:	210b      	movs	r1, #11
  40042a:	4802      	ldr	r0, [pc, #8]	; (400434 <PIOA_Handler+0x10>)
  40042c:	4b02      	ldr	r3, [pc, #8]	; (400438 <PIOA_Handler+0x14>)
  40042e:	4798      	blx	r3
  400430:	bf00      	nop
  400432:	bd80      	pop	{r7, pc}
  400434:	400e0e00 	.word	0x400e0e00
  400438:	004002b1 	.word	0x004002b1

0040043c <PIOB_Handler>:
  40043c:	b580      	push	{r7, lr}
  40043e:	af00      	add	r7, sp, #0
  400440:	210c      	movs	r1, #12
  400442:	4802      	ldr	r0, [pc, #8]	; (40044c <PIOB_Handler+0x10>)
  400444:	4b02      	ldr	r3, [pc, #8]	; (400450 <PIOB_Handler+0x14>)
  400446:	4798      	blx	r3
  400448:	bf00      	nop
  40044a:	bd80      	pop	{r7, pc}
  40044c:	400e1000 	.word	0x400e1000
  400450:	004002b1 	.word	0x004002b1

00400454 <usart_set_async_baudrate>:
  400454:	b480      	push	{r7}
  400456:	b089      	sub	sp, #36	; 0x24
  400458:	af00      	add	r7, sp, #0
  40045a:	60f8      	str	r0, [r7, #12]
  40045c:	60b9      	str	r1, [r7, #8]
  40045e:	607a      	str	r2, [r7, #4]
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	011a      	lsls	r2, r3, #4
  400464:	687b      	ldr	r3, [r7, #4]
  400466:	429a      	cmp	r2, r3
  400468:	d802      	bhi.n	400470 <usart_set_async_baudrate+0x1c>
  40046a:	2310      	movs	r3, #16
  40046c:	61fb      	str	r3, [r7, #28]
  40046e:	e001      	b.n	400474 <usart_set_async_baudrate+0x20>
  400470:	2308      	movs	r3, #8
  400472:	61fb      	str	r3, [r7, #28]
  400474:	687b      	ldr	r3, [r7, #4]
  400476:	00da      	lsls	r2, r3, #3
  400478:	69fb      	ldr	r3, [r7, #28]
  40047a:	68b9      	ldr	r1, [r7, #8]
  40047c:	fb01 f303 	mul.w	r3, r1, r3
  400480:	085b      	lsrs	r3, r3, #1
  400482:	441a      	add	r2, r3
  400484:	69fb      	ldr	r3, [r7, #28]
  400486:	68b9      	ldr	r1, [r7, #8]
  400488:	fb01 f303 	mul.w	r3, r1, r3
  40048c:	fbb2 f3f3 	udiv	r3, r2, r3
  400490:	61bb      	str	r3, [r7, #24]
  400492:	69bb      	ldr	r3, [r7, #24]
  400494:	08db      	lsrs	r3, r3, #3
  400496:	617b      	str	r3, [r7, #20]
  400498:	69bb      	ldr	r3, [r7, #24]
  40049a:	f003 0307 	and.w	r3, r3, #7
  40049e:	613b      	str	r3, [r7, #16]
  4004a0:	697b      	ldr	r3, [r7, #20]
  4004a2:	2b00      	cmp	r3, #0
  4004a4:	d003      	beq.n	4004ae <usart_set_async_baudrate+0x5a>
  4004a6:	697b      	ldr	r3, [r7, #20]
  4004a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4004ac:	d301      	bcc.n	4004b2 <usart_set_async_baudrate+0x5e>
  4004ae:	2301      	movs	r3, #1
  4004b0:	e00f      	b.n	4004d2 <usart_set_async_baudrate+0x7e>
  4004b2:	69fb      	ldr	r3, [r7, #28]
  4004b4:	2b08      	cmp	r3, #8
  4004b6:	d105      	bne.n	4004c4 <usart_set_async_baudrate+0x70>
  4004b8:	68fb      	ldr	r3, [r7, #12]
  4004ba:	685b      	ldr	r3, [r3, #4]
  4004bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4004c0:	68fb      	ldr	r3, [r7, #12]
  4004c2:	605a      	str	r2, [r3, #4]
  4004c4:	693b      	ldr	r3, [r7, #16]
  4004c6:	041a      	lsls	r2, r3, #16
  4004c8:	697b      	ldr	r3, [r7, #20]
  4004ca:	431a      	orrs	r2, r3
  4004cc:	68fb      	ldr	r3, [r7, #12]
  4004ce:	621a      	str	r2, [r3, #32]
  4004d0:	2300      	movs	r3, #0
  4004d2:	4618      	mov	r0, r3
  4004d4:	3724      	adds	r7, #36	; 0x24
  4004d6:	46bd      	mov	sp, r7
  4004d8:	bc80      	pop	{r7}
  4004da:	4770      	bx	lr

004004dc <usart_reset>:
  4004dc:	b580      	push	{r7, lr}
  4004de:	b082      	sub	sp, #8
  4004e0:	af00      	add	r7, sp, #0
  4004e2:	6078      	str	r0, [r7, #4]
  4004e4:	6878      	ldr	r0, [r7, #4]
  4004e6:	4b0f      	ldr	r3, [pc, #60]	; (400524 <usart_reset+0x48>)
  4004e8:	4798      	blx	r3
  4004ea:	687b      	ldr	r3, [r7, #4]
  4004ec:	2200      	movs	r2, #0
  4004ee:	605a      	str	r2, [r3, #4]
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	2200      	movs	r2, #0
  4004f4:	625a      	str	r2, [r3, #36]	; 0x24
  4004f6:	687b      	ldr	r3, [r7, #4]
  4004f8:	2200      	movs	r2, #0
  4004fa:	629a      	str	r2, [r3, #40]	; 0x28
  4004fc:	6878      	ldr	r0, [r7, #4]
  4004fe:	4b0a      	ldr	r3, [pc, #40]	; (400528 <usart_reset+0x4c>)
  400500:	4798      	blx	r3
  400502:	6878      	ldr	r0, [r7, #4]
  400504:	4b09      	ldr	r3, [pc, #36]	; (40052c <usart_reset+0x50>)
  400506:	4798      	blx	r3
  400508:	6878      	ldr	r0, [r7, #4]
  40050a:	4b09      	ldr	r3, [pc, #36]	; (400530 <usart_reset+0x54>)
  40050c:	4798      	blx	r3
  40050e:	6878      	ldr	r0, [r7, #4]
  400510:	4b08      	ldr	r3, [pc, #32]	; (400534 <usart_reset+0x58>)
  400512:	4798      	blx	r3
  400514:	6878      	ldr	r0, [r7, #4]
  400516:	4b08      	ldr	r3, [pc, #32]	; (400538 <usart_reset+0x5c>)
  400518:	4798      	blx	r3
  40051a:	bf00      	nop
  40051c:	3708      	adds	r7, #8
  40051e:	46bd      	mov	sp, r7
  400520:	bd80      	pop	{r7, pc}
  400522:	bf00      	nop
  400524:	00400799 	.word	0x00400799
  400528:	00400619 	.word	0x00400619
  40052c:	00400649 	.word	0x00400649
  400530:	004006b1 	.word	0x004006b1
  400534:	004006e9 	.word	0x004006e9
  400538:	004006cd 	.word	0x004006cd

0040053c <usart_init_rs232>:
  40053c:	b580      	push	{r7, lr}
  40053e:	b084      	sub	sp, #16
  400540:	af00      	add	r7, sp, #0
  400542:	60f8      	str	r0, [r7, #12]
  400544:	60b9      	str	r1, [r7, #8]
  400546:	607a      	str	r2, [r7, #4]
  400548:	68f8      	ldr	r0, [r7, #12]
  40054a:	4b1a      	ldr	r3, [pc, #104]	; (4005b4 <usart_init_rs232+0x78>)
  40054c:	4798      	blx	r3
  40054e:	4b1a      	ldr	r3, [pc, #104]	; (4005b8 <usart_init_rs232+0x7c>)
  400550:	2200      	movs	r2, #0
  400552:	601a      	str	r2, [r3, #0]
  400554:	68bb      	ldr	r3, [r7, #8]
  400556:	2b00      	cmp	r3, #0
  400558:	d009      	beq.n	40056e <usart_init_rs232+0x32>
  40055a:	68bb      	ldr	r3, [r7, #8]
  40055c:	681b      	ldr	r3, [r3, #0]
  40055e:	687a      	ldr	r2, [r7, #4]
  400560:	4619      	mov	r1, r3
  400562:	68f8      	ldr	r0, [r7, #12]
  400564:	4b15      	ldr	r3, [pc, #84]	; (4005bc <usart_init_rs232+0x80>)
  400566:	4798      	blx	r3
  400568:	4603      	mov	r3, r0
  40056a:	2b00      	cmp	r3, #0
  40056c:	d001      	beq.n	400572 <usart_init_rs232+0x36>
  40056e:	2301      	movs	r3, #1
  400570:	e01b      	b.n	4005aa <usart_init_rs232+0x6e>
  400572:	68bb      	ldr	r3, [r7, #8]
  400574:	685a      	ldr	r2, [r3, #4]
  400576:	68bb      	ldr	r3, [r7, #8]
  400578:	689b      	ldr	r3, [r3, #8]
  40057a:	431a      	orrs	r2, r3
  40057c:	68bb      	ldr	r3, [r7, #8]
  40057e:	691b      	ldr	r3, [r3, #16]
  400580:	431a      	orrs	r2, r3
  400582:	68bb      	ldr	r3, [r7, #8]
  400584:	68db      	ldr	r3, [r3, #12]
  400586:	431a      	orrs	r2, r3
  400588:	4b0b      	ldr	r3, [pc, #44]	; (4005b8 <usart_init_rs232+0x7c>)
  40058a:	681b      	ldr	r3, [r3, #0]
  40058c:	4313      	orrs	r3, r2
  40058e:	4a0a      	ldr	r2, [pc, #40]	; (4005b8 <usart_init_rs232+0x7c>)
  400590:	6013      	str	r3, [r2, #0]
  400592:	4b09      	ldr	r3, [pc, #36]	; (4005b8 <usart_init_rs232+0x7c>)
  400594:	681b      	ldr	r3, [r3, #0]
  400596:	4a08      	ldr	r2, [pc, #32]	; (4005b8 <usart_init_rs232+0x7c>)
  400598:	6013      	str	r3, [r2, #0]
  40059a:	68fb      	ldr	r3, [r7, #12]
  40059c:	685a      	ldr	r2, [r3, #4]
  40059e:	4b06      	ldr	r3, [pc, #24]	; (4005b8 <usart_init_rs232+0x7c>)
  4005a0:	681b      	ldr	r3, [r3, #0]
  4005a2:	431a      	orrs	r2, r3
  4005a4:	68fb      	ldr	r3, [r7, #12]
  4005a6:	605a      	str	r2, [r3, #4]
  4005a8:	2300      	movs	r3, #0
  4005aa:	4618      	mov	r0, r3
  4005ac:	3710      	adds	r7, #16
  4005ae:	46bd      	mov	sp, r7
  4005b0:	bd80      	pop	{r7, pc}
  4005b2:	bf00      	nop
  4005b4:	004004dd 	.word	0x004004dd
  4005b8:	200004cc 	.word	0x200004cc
  4005bc:	00400455 	.word	0x00400455

004005c0 <usart_init_hw_handshaking>:
  4005c0:	b580      	push	{r7, lr}
  4005c2:	b084      	sub	sp, #16
  4005c4:	af00      	add	r7, sp, #0
  4005c6:	60f8      	str	r0, [r7, #12]
  4005c8:	60b9      	str	r1, [r7, #8]
  4005ca:	607a      	str	r2, [r7, #4]
  4005cc:	687a      	ldr	r2, [r7, #4]
  4005ce:	68b9      	ldr	r1, [r7, #8]
  4005d0:	68f8      	ldr	r0, [r7, #12]
  4005d2:	4b0a      	ldr	r3, [pc, #40]	; (4005fc <usart_init_hw_handshaking+0x3c>)
  4005d4:	4798      	blx	r3
  4005d6:	4603      	mov	r3, r0
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d001      	beq.n	4005e0 <usart_init_hw_handshaking+0x20>
  4005dc:	2301      	movs	r3, #1
  4005de:	e008      	b.n	4005f2 <usart_init_hw_handshaking+0x32>
  4005e0:	68fb      	ldr	r3, [r7, #12]
  4005e2:	685b      	ldr	r3, [r3, #4]
  4005e4:	f023 030f 	bic.w	r3, r3, #15
  4005e8:	f043 0202 	orr.w	r2, r3, #2
  4005ec:	68fb      	ldr	r3, [r7, #12]
  4005ee:	605a      	str	r2, [r3, #4]
  4005f0:	2300      	movs	r3, #0
  4005f2:	4618      	mov	r0, r3
  4005f4:	3710      	adds	r7, #16
  4005f6:	46bd      	mov	sp, r7
  4005f8:	bd80      	pop	{r7, pc}
  4005fa:	bf00      	nop
  4005fc:	0040053d 	.word	0x0040053d

00400600 <usart_enable_tx>:
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	6078      	str	r0, [r7, #4]
  400608:	687b      	ldr	r3, [r7, #4]
  40060a:	2240      	movs	r2, #64	; 0x40
  40060c:	601a      	str	r2, [r3, #0]
  40060e:	bf00      	nop
  400610:	370c      	adds	r7, #12
  400612:	46bd      	mov	sp, r7
  400614:	bc80      	pop	{r7}
  400616:	4770      	bx	lr

00400618 <usart_reset_tx>:
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	6078      	str	r0, [r7, #4]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	2288      	movs	r2, #136	; 0x88
  400624:	601a      	str	r2, [r3, #0]
  400626:	bf00      	nop
  400628:	370c      	adds	r7, #12
  40062a:	46bd      	mov	sp, r7
  40062c:	bc80      	pop	{r7}
  40062e:	4770      	bx	lr

00400630 <usart_enable_rx>:
  400630:	b480      	push	{r7}
  400632:	b083      	sub	sp, #12
  400634:	af00      	add	r7, sp, #0
  400636:	6078      	str	r0, [r7, #4]
  400638:	687b      	ldr	r3, [r7, #4]
  40063a:	2210      	movs	r2, #16
  40063c:	601a      	str	r2, [r3, #0]
  40063e:	bf00      	nop
  400640:	370c      	adds	r7, #12
  400642:	46bd      	mov	sp, r7
  400644:	bc80      	pop	{r7}
  400646:	4770      	bx	lr

00400648 <usart_reset_rx>:
  400648:	b480      	push	{r7}
  40064a:	b083      	sub	sp, #12
  40064c:	af00      	add	r7, sp, #0
  40064e:	6078      	str	r0, [r7, #4]
  400650:	687b      	ldr	r3, [r7, #4]
  400652:	2224      	movs	r2, #36	; 0x24
  400654:	601a      	str	r2, [r3, #0]
  400656:	bf00      	nop
  400658:	370c      	adds	r7, #12
  40065a:	46bd      	mov	sp, r7
  40065c:	bc80      	pop	{r7}
  40065e:	4770      	bx	lr

00400660 <usart_enable_interrupt>:
  400660:	b480      	push	{r7}
  400662:	b083      	sub	sp, #12
  400664:	af00      	add	r7, sp, #0
  400666:	6078      	str	r0, [r7, #4]
  400668:	6039      	str	r1, [r7, #0]
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	683a      	ldr	r2, [r7, #0]
  40066e:	609a      	str	r2, [r3, #8]
  400670:	bf00      	nop
  400672:	370c      	adds	r7, #12
  400674:	46bd      	mov	sp, r7
  400676:	bc80      	pop	{r7}
  400678:	4770      	bx	lr
  40067a:	bf00      	nop

0040067c <usart_disable_interrupt>:
  40067c:	b480      	push	{r7}
  40067e:	b083      	sub	sp, #12
  400680:	af00      	add	r7, sp, #0
  400682:	6078      	str	r0, [r7, #4]
  400684:	6039      	str	r1, [r7, #0]
  400686:	687b      	ldr	r3, [r7, #4]
  400688:	683a      	ldr	r2, [r7, #0]
  40068a:	60da      	str	r2, [r3, #12]
  40068c:	bf00      	nop
  40068e:	370c      	adds	r7, #12
  400690:	46bd      	mov	sp, r7
  400692:	bc80      	pop	{r7}
  400694:	4770      	bx	lr
  400696:	bf00      	nop

00400698 <usart_get_status>:
  400698:	b480      	push	{r7}
  40069a:	b083      	sub	sp, #12
  40069c:	af00      	add	r7, sp, #0
  40069e:	6078      	str	r0, [r7, #4]
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	695b      	ldr	r3, [r3, #20]
  4006a4:	4618      	mov	r0, r3
  4006a6:	370c      	adds	r7, #12
  4006a8:	46bd      	mov	sp, r7
  4006aa:	bc80      	pop	{r7}
  4006ac:	4770      	bx	lr
  4006ae:	bf00      	nop

004006b0 <usart_reset_status>:
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
  4006b8:	687b      	ldr	r3, [r7, #4]
  4006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  4006be:	601a      	str	r2, [r3, #0]
  4006c0:	bf00      	nop
  4006c2:	370c      	adds	r7, #12
  4006c4:	46bd      	mov	sp, r7
  4006c6:	bc80      	pop	{r7}
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop

004006cc <usart_drive_DTR_pin_high>:
  4006cc:	b480      	push	{r7}
  4006ce:	b083      	sub	sp, #12
  4006d0:	af00      	add	r7, sp, #0
  4006d2:	6078      	str	r0, [r7, #4]
  4006d4:	687b      	ldr	r3, [r7, #4]
  4006d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4006da:	601a      	str	r2, [r3, #0]
  4006dc:	bf00      	nop
  4006de:	370c      	adds	r7, #12
  4006e0:	46bd      	mov	sp, r7
  4006e2:	bc80      	pop	{r7}
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop

004006e8 <usart_drive_RTS_pin_high>:
  4006e8:	b480      	push	{r7}
  4006ea:	b083      	sub	sp, #12
  4006ec:	af00      	add	r7, sp, #0
  4006ee:	6078      	str	r0, [r7, #4]
  4006f0:	687b      	ldr	r3, [r7, #4]
  4006f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006f6:	601a      	str	r2, [r3, #0]
  4006f8:	bf00      	nop
  4006fa:	370c      	adds	r7, #12
  4006fc:	46bd      	mov	sp, r7
  4006fe:	bc80      	pop	{r7}
  400700:	4770      	bx	lr
  400702:	bf00      	nop

00400704 <usart_putchar>:
  400704:	b480      	push	{r7}
  400706:	b083      	sub	sp, #12
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
  40070c:	6039      	str	r1, [r7, #0]
  40070e:	bf00      	nop
  400710:	687b      	ldr	r3, [r7, #4]
  400712:	695b      	ldr	r3, [r3, #20]
  400714:	f003 0302 	and.w	r3, r3, #2
  400718:	2b00      	cmp	r3, #0
  40071a:	d0f9      	beq.n	400710 <usart_putchar+0xc>
  40071c:	683b      	ldr	r3, [r7, #0]
  40071e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	61da      	str	r2, [r3, #28]
  400726:	2300      	movs	r3, #0
  400728:	4618      	mov	r0, r3
  40072a:	370c      	adds	r7, #12
  40072c:	46bd      	mov	sp, r7
  40072e:	bc80      	pop	{r7}
  400730:	4770      	bx	lr
  400732:	bf00      	nop

00400734 <usart_write_line>:
  400734:	b580      	push	{r7, lr}
  400736:	b082      	sub	sp, #8
  400738:	af00      	add	r7, sp, #0
  40073a:	6078      	str	r0, [r7, #4]
  40073c:	6039      	str	r1, [r7, #0]
  40073e:	e007      	b.n	400750 <usart_write_line+0x1c>
  400740:	683b      	ldr	r3, [r7, #0]
  400742:	1c5a      	adds	r2, r3, #1
  400744:	603a      	str	r2, [r7, #0]
  400746:	781b      	ldrb	r3, [r3, #0]
  400748:	4619      	mov	r1, r3
  40074a:	6878      	ldr	r0, [r7, #4]
  40074c:	4b04      	ldr	r3, [pc, #16]	; (400760 <usart_write_line+0x2c>)
  40074e:	4798      	blx	r3
  400750:	683b      	ldr	r3, [r7, #0]
  400752:	781b      	ldrb	r3, [r3, #0]
  400754:	2b00      	cmp	r3, #0
  400756:	d1f3      	bne.n	400740 <usart_write_line+0xc>
  400758:	bf00      	nop
  40075a:	3708      	adds	r7, #8
  40075c:	46bd      	mov	sp, r7
  40075e:	bd80      	pop	{r7, pc}
  400760:	00400705 	.word	0x00400705

00400764 <usart_read>:
  400764:	b480      	push	{r7}
  400766:	b083      	sub	sp, #12
  400768:	af00      	add	r7, sp, #0
  40076a:	6078      	str	r0, [r7, #4]
  40076c:	6039      	str	r1, [r7, #0]
  40076e:	687b      	ldr	r3, [r7, #4]
  400770:	695b      	ldr	r3, [r3, #20]
  400772:	f003 0301 	and.w	r3, r3, #1
  400776:	2b00      	cmp	r3, #0
  400778:	d101      	bne.n	40077e <usart_read+0x1a>
  40077a:	2301      	movs	r3, #1
  40077c:	e006      	b.n	40078c <usart_read+0x28>
  40077e:	687b      	ldr	r3, [r7, #4]
  400780:	699b      	ldr	r3, [r3, #24]
  400782:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400786:	683b      	ldr	r3, [r7, #0]
  400788:	601a      	str	r2, [r3, #0]
  40078a:	2300      	movs	r3, #0
  40078c:	4618      	mov	r0, r3
  40078e:	370c      	adds	r7, #12
  400790:	46bd      	mov	sp, r7
  400792:	bc80      	pop	{r7}
  400794:	4770      	bx	lr
  400796:	bf00      	nop

00400798 <usart_disable_writeprotect>:
  400798:	b480      	push	{r7}
  40079a:	b083      	sub	sp, #12
  40079c:	af00      	add	r7, sp, #0
  40079e:	6078      	str	r0, [r7, #4]
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	4a04      	ldr	r2, [pc, #16]	; (4007b4 <usart_disable_writeprotect+0x1c>)
  4007a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  4007a8:	bf00      	nop
  4007aa:	370c      	adds	r7, #12
  4007ac:	46bd      	mov	sp, r7
  4007ae:	bc80      	pop	{r7}
  4007b0:	4770      	bx	lr
  4007b2:	bf00      	nop
  4007b4:	55534100 	.word	0x55534100

004007b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4007b8:	b480      	push	{r7}
  4007ba:	b083      	sub	sp, #12
  4007bc:	af00      	add	r7, sp, #0
  4007be:	4603      	mov	r3, r0
  4007c0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4007c2:	4908      	ldr	r1, [pc, #32]	; (4007e4 <NVIC_EnableIRQ+0x2c>)
  4007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4007c8:	095b      	lsrs	r3, r3, #5
  4007ca:	79fa      	ldrb	r2, [r7, #7]
  4007cc:	f002 021f 	and.w	r2, r2, #31
  4007d0:	2001      	movs	r0, #1
  4007d2:	fa00 f202 	lsl.w	r2, r0, r2
  4007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4007da:	bf00      	nop
  4007dc:	370c      	adds	r7, #12
  4007de:	46bd      	mov	sp, r7
  4007e0:	bc80      	pop	{r7}
  4007e2:	4770      	bx	lr
  4007e4:	e000e100 	.word	0xe000e100

004007e8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4007e8:	b480      	push	{r7}
  4007ea:	b083      	sub	sp, #12
  4007ec:	af00      	add	r7, sp, #0
  4007ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4007f0:	687b      	ldr	r3, [r7, #4]
  4007f2:	2b07      	cmp	r3, #7
  4007f4:	d825      	bhi.n	400842 <osc_get_rate+0x5a>
  4007f6:	a201      	add	r2, pc, #4	; (adr r2, 4007fc <osc_get_rate+0x14>)
  4007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007fc:	0040081d 	.word	0x0040081d
  400800:	00400823 	.word	0x00400823
  400804:	00400829 	.word	0x00400829
  400808:	0040082f 	.word	0x0040082f
  40080c:	00400833 	.word	0x00400833
  400810:	00400837 	.word	0x00400837
  400814:	0040083b 	.word	0x0040083b
  400818:	0040083f 	.word	0x0040083f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40081c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400820:	e010      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400826:	e00d      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40082c:	e00a      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40082e:	4b08      	ldr	r3, [pc, #32]	; (400850 <osc_get_rate+0x68>)
  400830:	e008      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400832:	4b08      	ldr	r3, [pc, #32]	; (400854 <osc_get_rate+0x6c>)
  400834:	e006      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400836:	4b08      	ldr	r3, [pc, #32]	; (400858 <osc_get_rate+0x70>)
  400838:	e004      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40083a:	4b07      	ldr	r3, [pc, #28]	; (400858 <osc_get_rate+0x70>)
  40083c:	e002      	b.n	400844 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40083e:	4b06      	ldr	r3, [pc, #24]	; (400858 <osc_get_rate+0x70>)
  400840:	e000      	b.n	400844 <osc_get_rate+0x5c>
	}

	return 0;
  400842:	2300      	movs	r3, #0
}
  400844:	4618      	mov	r0, r3
  400846:	370c      	adds	r7, #12
  400848:	46bd      	mov	sp, r7
  40084a:	bc80      	pop	{r7}
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop
  400850:	003d0900 	.word	0x003d0900
  400854:	007a1200 	.word	0x007a1200
  400858:	00b71b00 	.word	0x00b71b00

0040085c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40085c:	b580      	push	{r7, lr}
  40085e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400860:	2006      	movs	r0, #6
  400862:	4b04      	ldr	r3, [pc, #16]	; (400874 <sysclk_get_main_hz+0x18>)
  400864:	4798      	blx	r3
  400866:	4602      	mov	r2, r0
  400868:	4613      	mov	r3, r2
  40086a:	009b      	lsls	r3, r3, #2
  40086c:	4413      	add	r3, r2
  40086e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400870:	4618      	mov	r0, r3
  400872:	bd80      	pop	{r7, pc}
  400874:	004007e9 	.word	0x004007e9

00400878 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400878:	b580      	push	{r7, lr}
  40087a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40087c:	4b02      	ldr	r3, [pc, #8]	; (400888 <sysclk_get_cpu_hz+0x10>)
  40087e:	4798      	blx	r3
  400880:	4603      	mov	r3, r0
  400882:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400884:	4618      	mov	r0, r3
  400886:	bd80      	pop	{r7, pc}
  400888:	0040085d 	.word	0x0040085d

0040088c <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  40088c:	b580      	push	{r7, lr}
  40088e:	b082      	sub	sp, #8
  400890:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400892:	2100      	movs	r1, #0
  400894:	4809      	ldr	r0, [pc, #36]	; (4008bc <TC0_Handler+0x30>)
  400896:	4b0a      	ldr	r3, [pc, #40]	; (4008c0 <TC0_Handler+0x34>)
  400898:	4798      	blx	r3
  40089a:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  40089c:	687b      	ldr	r3, [r7, #4]
  40089e:	f003 0310 	and.w	r3, r3, #16
  4008a2:	2b00      	cmp	r3, #0
  4008a4:	d006      	beq.n	4008b4 <TC0_Handler+0x28>
		counts++;
  4008a6:	4b07      	ldr	r3, [pc, #28]	; (4008c4 <TC0_Handler+0x38>)
  4008a8:	781b      	ldrb	r3, [r3, #0]
  4008aa:	b2db      	uxtb	r3, r3
  4008ac:	3301      	adds	r3, #1
  4008ae:	b2da      	uxtb	r2, r3
  4008b0:	4b04      	ldr	r3, [pc, #16]	; (4008c4 <TC0_Handler+0x38>)
  4008b2:	701a      	strb	r2, [r3, #0]
	}
}
  4008b4:	bf00      	nop
  4008b6:	3708      	adds	r7, #8
  4008b8:	46bd      	mov	sp, r7
  4008ba:	bd80      	pop	{r7, pc}
  4008bc:	40010000 	.word	0x40010000
  4008c0:	004001cd 	.word	0x004001cd
  4008c4:	200006dc 	.word	0x200006dc

004008c8 <configure_tc>:

void configure_tc(void)
{
  4008c8:	b590      	push	{r4, r7, lr}
  4008ca:	b087      	sub	sp, #28
  4008cc:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  4008ce:	4b16      	ldr	r3, [pc, #88]	; (400928 <configure_tc+0x60>)
  4008d0:	4798      	blx	r3
  4008d2:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  4008d4:	2017      	movs	r0, #23
  4008d6:	4b15      	ldr	r3, [pc, #84]	; (40092c <configure_tc+0x64>)
  4008d8:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4008da:	1d39      	adds	r1, r7, #4
  4008dc:	f107 0208 	add.w	r2, r7, #8
  4008e0:	68fb      	ldr	r3, [r7, #12]
  4008e2:	9300      	str	r3, [sp, #0]
  4008e4:	460b      	mov	r3, r1
  4008e6:	68f9      	ldr	r1, [r7, #12]
  4008e8:	2001      	movs	r0, #1
  4008ea:	4c11      	ldr	r4, [pc, #68]	; (400930 <configure_tc+0x68>)
  4008ec:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4008ee:	687b      	ldr	r3, [r7, #4]
  4008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4008f4:	461a      	mov	r2, r3
  4008f6:	2100      	movs	r1, #0
  4008f8:	480e      	ldr	r0, [pc, #56]	; (400934 <configure_tc+0x6c>)
  4008fa:	4b0f      	ldr	r3, [pc, #60]	; (400938 <configure_tc+0x70>)
  4008fc:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4008fe:	68bb      	ldr	r3, [r7, #8]
  400900:	68fa      	ldr	r2, [r7, #12]
  400902:	fbb2 f3f3 	udiv	r3, r2, r3
  400906:	461a      	mov	r2, r3
  400908:	2100      	movs	r1, #0
  40090a:	480a      	ldr	r0, [pc, #40]	; (400934 <configure_tc+0x6c>)
  40090c:	4b0b      	ldr	r3, [pc, #44]	; (40093c <configure_tc+0x74>)
  40090e:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400910:	2017      	movs	r0, #23
  400912:	4b0b      	ldr	r3, [pc, #44]	; (400940 <configure_tc+0x78>)
  400914:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400916:	2210      	movs	r2, #16
  400918:	2100      	movs	r1, #0
  40091a:	4806      	ldr	r0, [pc, #24]	; (400934 <configure_tc+0x6c>)
  40091c:	4b09      	ldr	r3, [pc, #36]	; (400944 <configure_tc+0x7c>)
  40091e:	4798      	blx	r3
  400920:	bf00      	nop
  400922:	3714      	adds	r7, #20
  400924:	46bd      	mov	sp, r7
  400926:	bd90      	pop	{r4, r7, pc}
  400928:	00400879 	.word	0x00400879
  40092c:	00401909 	.word	0x00401909
  400930:	004001f1 	.word	0x004001f1
  400934:	40010000 	.word	0x40010000
  400938:	00400129 	.word	0x00400129
  40093c:	00400181 	.word	0x00400181
  400940:	004007b9 	.word	0x004007b9
  400944:	004001a5 	.word	0x004001a5

00400948 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400948:	b480      	push	{r7}
  40094a:	b083      	sub	sp, #12
  40094c:	af00      	add	r7, sp, #0
  40094e:	4603      	mov	r3, r0
  400950:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400952:	4908      	ldr	r1, [pc, #32]	; (400974 <NVIC_EnableIRQ+0x2c>)
  400954:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400958:	095b      	lsrs	r3, r3, #5
  40095a:	79fa      	ldrb	r2, [r7, #7]
  40095c:	f002 021f 	and.w	r2, r2, #31
  400960:	2001      	movs	r0, #1
  400962:	fa00 f202 	lsl.w	r2, r0, r2
  400966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40096a:	bf00      	nop
  40096c:	370c      	adds	r7, #12
  40096e:	46bd      	mov	sp, r7
  400970:	bc80      	pop	{r7}
  400972:	4770      	bx	lr
  400974:	e000e100 	.word	0xe000e100

00400978 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400978:	b480      	push	{r7}
  40097a:	b083      	sub	sp, #12
  40097c:	af00      	add	r7, sp, #0
  40097e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	2b07      	cmp	r3, #7
  400984:	d825      	bhi.n	4009d2 <osc_get_rate+0x5a>
  400986:	a201      	add	r2, pc, #4	; (adr r2, 40098c <osc_get_rate+0x14>)
  400988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40098c:	004009ad 	.word	0x004009ad
  400990:	004009b3 	.word	0x004009b3
  400994:	004009b9 	.word	0x004009b9
  400998:	004009bf 	.word	0x004009bf
  40099c:	004009c3 	.word	0x004009c3
  4009a0:	004009c7 	.word	0x004009c7
  4009a4:	004009cb 	.word	0x004009cb
  4009a8:	004009cf 	.word	0x004009cf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4009ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4009b0:	e010      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4009b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009b6:	e00d      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4009b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009bc:	e00a      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4009be:	4b08      	ldr	r3, [pc, #32]	; (4009e0 <osc_get_rate+0x68>)
  4009c0:	e008      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4009c2:	4b08      	ldr	r3, [pc, #32]	; (4009e4 <osc_get_rate+0x6c>)
  4009c4:	e006      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4009c6:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <osc_get_rate+0x70>)
  4009c8:	e004      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4009ca:	4b07      	ldr	r3, [pc, #28]	; (4009e8 <osc_get_rate+0x70>)
  4009cc:	e002      	b.n	4009d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4009ce:	4b06      	ldr	r3, [pc, #24]	; (4009e8 <osc_get_rate+0x70>)
  4009d0:	e000      	b.n	4009d4 <osc_get_rate+0x5c>
	}

	return 0;
  4009d2:	2300      	movs	r3, #0
}
  4009d4:	4618      	mov	r0, r3
  4009d6:	370c      	adds	r7, #12
  4009d8:	46bd      	mov	sp, r7
  4009da:	bc80      	pop	{r7}
  4009dc:	4770      	bx	lr
  4009de:	bf00      	nop
  4009e0:	003d0900 	.word	0x003d0900
  4009e4:	007a1200 	.word	0x007a1200
  4009e8:	00b71b00 	.word	0x00b71b00

004009ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4009ec:	b580      	push	{r7, lr}
  4009ee:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4009f0:	2006      	movs	r0, #6
  4009f2:	4b04      	ldr	r3, [pc, #16]	; (400a04 <sysclk_get_main_hz+0x18>)
  4009f4:	4798      	blx	r3
  4009f6:	4602      	mov	r2, r0
  4009f8:	4613      	mov	r3, r2
  4009fa:	009b      	lsls	r3, r3, #2
  4009fc:	4413      	add	r3, r2
  4009fe:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400a00:	4618      	mov	r0, r3
  400a02:	bd80      	pop	{r7, pc}
  400a04:	00400979 	.word	0x00400979

00400a08 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400a08:	b580      	push	{r7, lr}
  400a0a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400a0c:	4b02      	ldr	r3, [pc, #8]	; (400a18 <sysclk_get_cpu_hz+0x10>)
  400a0e:	4798      	blx	r3
  400a10:	4603      	mov	r3, r0
  400a12:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400a14:	4618      	mov	r0, r3
  400a16:	bd80      	pop	{r7, pc}
  400a18:	004009ed 	.word	0x004009ed

00400a1c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400a1c:	b580      	push	{r7, lr}
  400a1e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400a20:	4b02      	ldr	r3, [pc, #8]	; (400a2c <sysclk_get_peripheral_hz+0x10>)
  400a22:	4798      	blx	r3
  400a24:	4603      	mov	r3, r0
  400a26:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400a28:	4618      	mov	r0, r3
  400a2a:	bd80      	pop	{r7, pc}
  400a2c:	004009ed 	.word	0x004009ed

00400a30 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400a30:	b580      	push	{r7, lr}
  400a32:	b082      	sub	sp, #8
  400a34:	af00      	add	r7, sp, #0
  400a36:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400a38:	6878      	ldr	r0, [r7, #4]
  400a3a:	4b03      	ldr	r3, [pc, #12]	; (400a48 <sysclk_enable_peripheral_clock+0x18>)
  400a3c:	4798      	blx	r3
}
  400a3e:	bf00      	nop
  400a40:	3708      	adds	r7, #8
  400a42:	46bd      	mov	sp, r7
  400a44:	bd80      	pop	{r7, pc}
  400a46:	bf00      	nop
  400a48:	00401909 	.word	0x00401909

00400a4c <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400a4c:	b480      	push	{r7}
  400a4e:	b08b      	sub	sp, #44	; 0x2c
  400a50:	af00      	add	r7, sp, #0
  400a52:	6078      	str	r0, [r7, #4]
  400a54:	687b      	ldr	r3, [r7, #4]
  400a56:	627b      	str	r3, [r7, #36]	; 0x24
  400a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a5a:	623b      	str	r3, [r7, #32]
  400a5c:	6a3b      	ldr	r3, [r7, #32]
  400a5e:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400a60:	69fb      	ldr	r3, [r7, #28]
  400a62:	095b      	lsrs	r3, r3, #5
  400a64:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a66:	69bb      	ldr	r3, [r7, #24]
  400a68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400a6c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400a70:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  400a72:	617b      	str	r3, [r7, #20]
  400a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a76:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400a78:	693b      	ldr	r3, [r7, #16]
  400a7a:	f003 031f 	and.w	r3, r3, #31
  400a7e:	2201      	movs	r2, #1
  400a80:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  400a84:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400a86:	697b      	ldr	r3, [r7, #20]
  400a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400a8c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400a8e:	68bb      	ldr	r3, [r7, #8]
  400a90:	f003 031f 	and.w	r3, r3, #31
  400a94:	2101      	movs	r1, #1
  400a96:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400a9a:	4013      	ands	r3, r2
  400a9c:	2b00      	cmp	r3, #0
  400a9e:	d003      	beq.n	400aa8 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  400aa0:	697b      	ldr	r3, [r7, #20]
  400aa2:	68fa      	ldr	r2, [r7, #12]
  400aa4:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  400aa6:	e002      	b.n	400aae <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  400aa8:	697b      	ldr	r3, [r7, #20]
  400aaa:	68fa      	ldr	r2, [r7, #12]
  400aac:	631a      	str	r2, [r3, #48]	; 0x30
  400aae:	bf00      	nop
  400ab0:	372c      	adds	r7, #44	; 0x2c
  400ab2:	46bd      	mov	sp, r7
  400ab4:	bc80      	pop	{r7}
  400ab6:	4770      	bx	lr

00400ab8 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void WIFI_USART_Handler(void)
{	
  400ab8:	b580      	push	{r7, lr}
  400aba:	b082      	sub	sp, #8
  400abc:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  400abe:	2300      	movs	r3, #0
  400ac0:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  400ac2:	2101      	movs	r1, #1
  400ac4:	4812      	ldr	r0, [pc, #72]	; (400b10 <USART0_Handler+0x58>)
  400ac6:	4b13      	ldr	r3, [pc, #76]	; (400b14 <USART0_Handler+0x5c>)
  400ac8:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  400aca:	4811      	ldr	r0, [pc, #68]	; (400b10 <USART0_Handler+0x58>)
  400acc:	4b12      	ldr	r3, [pc, #72]	; (400b18 <USART0_Handler+0x60>)
  400ace:	4798      	blx	r3
  400ad0:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400ad2:	4912      	ldr	r1, [pc, #72]	; (400b1c <USART0_Handler+0x64>)
  400ad4:	480e      	ldr	r0, [pc, #56]	; (400b10 <USART0_Handler+0x58>)
  400ad6:	4b12      	ldr	r3, [pc, #72]	; (400b20 <USART0_Handler+0x68>)
  400ad8:	4798      	blx	r3
  400ada:	4603      	mov	r3, r0
  400adc:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  400ade:	683b      	ldr	r3, [r7, #0]
  400ae0:	f003 0301 	and.w	r3, r3, #1
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	d00b      	beq.n	400b00 <USART0_Handler+0x48>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400ae8:	490c      	ldr	r1, [pc, #48]	; (400b1c <USART0_Handler+0x64>)
  400aea:	4809      	ldr	r0, [pc, #36]	; (400b10 <USART0_Handler+0x58>)
  400aec:	4b0c      	ldr	r3, [pc, #48]	; (400b20 <USART0_Handler+0x68>)
  400aee:	4798      	blx	r3
  400af0:	4603      	mov	r3, r0
  400af2:	71fb      	strb	r3, [r7, #7]
		process_incoming_byte((uint8_t) received_byte_wifi);
  400af4:	4b09      	ldr	r3, [pc, #36]	; (400b1c <USART0_Handler+0x64>)
  400af6:	681b      	ldr	r3, [r3, #0]
  400af8:	b2db      	uxtb	r3, r3
  400afa:	4618      	mov	r0, r3
  400afc:	4b09      	ldr	r3, [pc, #36]	; (400b24 <USART0_Handler+0x6c>)
  400afe:	4798      	blx	r3
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400b00:	2101      	movs	r1, #1
  400b02:	4803      	ldr	r0, [pc, #12]	; (400b10 <USART0_Handler+0x58>)
  400b04:	4b08      	ldr	r3, [pc, #32]	; (400b28 <USART0_Handler+0x70>)
  400b06:	4798      	blx	r3
}
  400b08:	bf00      	nop
  400b0a:	3708      	adds	r7, #8
  400b0c:	46bd      	mov	sp, r7
  400b0e:	bd80      	pop	{r7, pc}
  400b10:	40024000 	.word	0x40024000
  400b14:	0040067d 	.word	0x0040067d
  400b18:	00400699 	.word	0x00400699
  400b1c:	200006c8 	.word	0x200006c8
  400b20:	00400765 	.word	0x00400765
  400b24:	00400b2d 	.word	0x00400b2d
  400b28:	00400661 	.word	0x00400661

00400b2c <process_incoming_byte>:

/**
 *  \brief Processes incoming bytes.
 */
void process_incoming_byte(uint8_t inByte) {
  400b2c:	b580      	push	{r7, lr}
  400b2e:	b082      	sub	sp, #8
  400b30:	af00      	add	r7, sp, #0
  400b32:	4603      	mov	r3, r0
  400b34:	71fb      	strb	r3, [r7, #7]
	input_buffer[buffer_index++] = inByte;
  400b36:	4b07      	ldr	r3, [pc, #28]	; (400b54 <process_incoming_byte+0x28>)
  400b38:	681b      	ldr	r3, [r3, #0]
  400b3a:	1c5a      	adds	r2, r3, #1
  400b3c:	4905      	ldr	r1, [pc, #20]	; (400b54 <process_incoming_byte+0x28>)
  400b3e:	600a      	str	r2, [r1, #0]
  400b40:	4905      	ldr	r1, [pc, #20]	; (400b58 <process_incoming_byte+0x2c>)
  400b42:	79fa      	ldrb	r2, [r7, #7]
  400b44:	54ca      	strb	r2, [r1, r3]
	ioport_toggle_pin_level(LED_PIN);
  400b46:	2013      	movs	r0, #19
  400b48:	4b04      	ldr	r3, [pc, #16]	; (400b5c <process_incoming_byte+0x30>)
  400b4a:	4798      	blx	r3
}
  400b4c:	bf00      	nop
  400b4e:	3708      	adds	r7, #8
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	200006cc 	.word	0x200006cc
  400b58:	200004d0 	.word	0x200004d0
  400b5c:	00400a4d 	.word	0x00400a4d

00400b60 <configure_usart_wifi>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart_wifi(void)
{
  400b60:	b5b0      	push	{r4, r5, r7, lr}
  400b62:	b086      	sub	sp, #24
  400b64:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  400b66:	4b15      	ldr	r3, [pc, #84]	; (400bbc <configure_usart_wifi+0x5c>)
  400b68:	463c      	mov	r4, r7
  400b6a:	461d      	mov	r5, r3
  400b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400b70:	e895 0003 	ldmia.w	r5, {r0, r1}
  400b74:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  400b78:	4b11      	ldr	r3, [pc, #68]	; (400bc0 <configure_usart_wifi+0x60>)
  400b7a:	4798      	blx	r3
  400b7c:	4602      	mov	r2, r0
  400b7e:	4b11      	ldr	r3, [pc, #68]	; (400bc4 <configure_usart_wifi+0x64>)
  400b80:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  400b82:	200e      	movs	r0, #14
  400b84:	4b10      	ldr	r3, [pc, #64]	; (400bc8 <configure_usart_wifi+0x68>)
  400b86:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  400b88:	4b0e      	ldr	r3, [pc, #56]	; (400bc4 <configure_usart_wifi+0x64>)
  400b8a:	681a      	ldr	r2, [r3, #0]
  400b8c:	463b      	mov	r3, r7
  400b8e:	4619      	mov	r1, r3
  400b90:	480e      	ldr	r0, [pc, #56]	; (400bcc <configure_usart_wifi+0x6c>)
  400b92:	4b0f      	ldr	r3, [pc, #60]	; (400bd0 <configure_usart_wifi+0x70>)
  400b94:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  400b96:	f04f 31ff 	mov.w	r1, #4294967295
  400b9a:	480c      	ldr	r0, [pc, #48]	; (400bcc <configure_usart_wifi+0x6c>)
  400b9c:	4b0d      	ldr	r3, [pc, #52]	; (400bd4 <configure_usart_wifi+0x74>)
  400b9e:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  400ba0:	480a      	ldr	r0, [pc, #40]	; (400bcc <configure_usart_wifi+0x6c>)
  400ba2:	4b0d      	ldr	r3, [pc, #52]	; (400bd8 <configure_usart_wifi+0x78>)
  400ba4:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  400ba6:	4809      	ldr	r0, [pc, #36]	; (400bcc <configure_usart_wifi+0x6c>)
  400ba8:	4b0c      	ldr	r3, [pc, #48]	; (400bdc <configure_usart_wifi+0x7c>)
  400baa:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  400bac:	200e      	movs	r0, #14
  400bae:	4b0c      	ldr	r3, [pc, #48]	; (400be0 <configure_usart_wifi+0x80>)
  400bb0:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  400bb2:	bf00      	nop
  400bb4:	3718      	adds	r7, #24
  400bb6:	46bd      	mov	sp, r7
  400bb8:	bdb0      	pop	{r4, r5, r7, pc}
  400bba:	bf00      	nop
  400bbc:	00402608 	.word	0x00402608
  400bc0:	00400a1d 	.word	0x00400a1d
  400bc4:	200006d8 	.word	0x200006d8
  400bc8:	00400a31 	.word	0x00400a31
  400bcc:	40024000 	.word	0x40024000
  400bd0:	004005c1 	.word	0x004005c1
  400bd4:	0040067d 	.word	0x0040067d
  400bd8:	00400601 	.word	0x00400601
  400bdc:	00400631 	.word	0x00400631
  400be0:	00400949 	.word	0x00400949

00400be4 <wifi_command_response_handler>:

/**
 *  \brief Command response handler for wifi.
 */
void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask) {
  400be4:	b580      	push	{r7, lr}
  400be6:	b082      	sub	sp, #8
  400be8:	af00      	add	r7, sp, #0
  400bea:	6078      	str	r0, [r7, #4]
  400bec:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	process_data_wifi();
  400bee:	4b03      	ldr	r3, [pc, #12]	; (400bfc <wifi_command_response_handler+0x18>)
  400bf0:	4798      	blx	r3
}
  400bf2:	bf00      	nop
  400bf4:	3708      	adds	r7, #8
  400bf6:	46bd      	mov	sp, r7
  400bf8:	bd80      	pop	{r7, pc}
  400bfa:	bf00      	nop
  400bfc:	00400c01 	.word	0x00400c01

00400c00 <process_data_wifi>:

/**
 *  \brief Processes data from wifi.
 */
void process_data_wifi(void){
  400c00:	b480      	push	{r7}
  400c02:	af00      	add	r7, sp, #0
	input_buffer[buffer_index] = 0;
  400c04:	4b07      	ldr	r3, [pc, #28]	; (400c24 <process_data_wifi+0x24>)
  400c06:	681b      	ldr	r3, [r3, #0]
  400c08:	4a07      	ldr	r2, [pc, #28]	; (400c28 <process_data_wifi+0x28>)
  400c0a:	2100      	movs	r1, #0
  400c0c:	54d1      	strb	r1, [r2, r3]
	data_recieved = 1;
  400c0e:	4b07      	ldr	r3, [pc, #28]	; (400c2c <process_data_wifi+0x2c>)
  400c10:	2201      	movs	r2, #1
  400c12:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
  400c14:	4b03      	ldr	r3, [pc, #12]	; (400c24 <process_data_wifi+0x24>)
  400c16:	2200      	movs	r2, #0
  400c18:	601a      	str	r2, [r3, #0]
}
  400c1a:	bf00      	nop
  400c1c:	46bd      	mov	sp, r7
  400c1e:	bc80      	pop	{r7}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	200006cc 	.word	0x200006cc
  400c28:	200004d0 	.word	0x200004d0
  400c2c:	200006d4 	.word	0x200006d4

00400c30 <configure_wifi_comm_pin>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_wifi_comm_pin(void){
  400c30:	b590      	push	{r4, r7, lr}
  400c32:	b083      	sub	sp, #12
  400c34:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  400c36:	200c      	movs	r0, #12
  400c38:	4b0c      	ldr	r3, [pc, #48]	; (400c6c <configure_wifi_comm_pin+0x3c>)
  400c3a:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  400c3c:	220a      	movs	r2, #10
  400c3e:	2101      	movs	r1, #1
  400c40:	480b      	ldr	r0, [pc, #44]	; (400c70 <configure_wifi_comm_pin+0x40>)
  400c42:	4b0c      	ldr	r3, [pc, #48]	; (400c74 <configure_wifi_comm_pin+0x44>)
  400c44:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, wifi_command_response_handler);
  400c46:	4b0c      	ldr	r3, [pc, #48]	; (400c78 <configure_wifi_comm_pin+0x48>)
  400c48:	9300      	str	r3, [sp, #0]
  400c4a:	2370      	movs	r3, #112	; 0x70
  400c4c:	2201      	movs	r2, #1
  400c4e:	210c      	movs	r1, #12
  400c50:	4807      	ldr	r0, [pc, #28]	; (400c70 <configure_wifi_comm_pin+0x40>)
  400c52:	4c0a      	ldr	r4, [pc, #40]	; (400c7c <configure_wifi_comm_pin+0x4c>)
  400c54:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  400c56:	200c      	movs	r0, #12
  400c58:	4b09      	ldr	r3, [pc, #36]	; (400c80 <configure_wifi_comm_pin+0x50>)
  400c5a:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  400c5c:	2101      	movs	r1, #1
  400c5e:	4804      	ldr	r0, [pc, #16]	; (400c70 <configure_wifi_comm_pin+0x40>)
  400c60:	4b08      	ldr	r3, [pc, #32]	; (400c84 <configure_wifi_comm_pin+0x54>)
  400c62:	4798      	blx	r3
}
  400c64:	bf00      	nop
  400c66:	3704      	adds	r7, #4
  400c68:	46bd      	mov	sp, r7
  400c6a:	bd90      	pop	{r4, r7, pc}
  400c6c:	00401909 	.word	0x00401909
  400c70:	400e1000 	.word	0x400e1000
  400c74:	004011e9 	.word	0x004011e9
  400c78:	00400be5 	.word	0x00400be5
  400c7c:	00400385 	.word	0x00400385
  400c80:	00400949 	.word	0x00400949
  400c84:	00401481 	.word	0x00401481

00400c88 <wifi_web_setup_handler>:

/**
 *  \brief Handler for setting up wifi.
 */
void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask) {
  400c88:	b480      	push	{r7}
  400c8a:	b083      	sub	sp, #12
  400c8c:	af00      	add	r7, sp, #0
  400c8e:	6078      	str	r0, [r7, #4]
  400c90:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  400c92:	4b04      	ldr	r3, [pc, #16]	; (400ca4 <wifi_web_setup_handler+0x1c>)
  400c94:	2201      	movs	r2, #1
  400c96:	601a      	str	r2, [r3, #0]
}
  400c98:	bf00      	nop
  400c9a:	370c      	adds	r7, #12
  400c9c:	46bd      	mov	sp, r7
  400c9e:	bc80      	pop	{r7}
  400ca0:	4770      	bx	lr
  400ca2:	bf00      	nop
  400ca4:	200006c4 	.word	0x200006c4

00400ca8 <configure_wifi_web_setup_pin>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_wifi_web_setup_pin(void){
  400ca8:	b590      	push	{r4, r7, lr}
  400caa:	b083      	sub	sp, #12
  400cac:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  400cae:	200c      	movs	r0, #12
  400cb0:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <configure_wifi_web_setup_pin+0x3c>)
  400cb2:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP, WIFI_SETUP_MASK, 10);
  400cb4:	220a      	movs	r2, #10
  400cb6:	2104      	movs	r1, #4
  400cb8:	2079      	movs	r0, #121	; 0x79
  400cba:	4b0b      	ldr	r3, [pc, #44]	; (400ce8 <configure_wifi_web_setup_pin+0x40>)
  400cbc:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  400cbe:	4b0b      	ldr	r3, [pc, #44]	; (400cec <configure_wifi_web_setup_pin+0x44>)
  400cc0:	9300      	str	r3, [sp, #0]
  400cc2:	2359      	movs	r3, #89	; 0x59
  400cc4:	2204      	movs	r2, #4
  400cc6:	210c      	movs	r1, #12
  400cc8:	2079      	movs	r0, #121	; 0x79
  400cca:	4c09      	ldr	r4, [pc, #36]	; (400cf0 <configure_wifi_web_setup_pin+0x48>)
  400ccc:	47a0      	blx	r4
			WIFI_SETUP_ATTR, wifi_web_setup_handler);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  400cce:	200c      	movs	r0, #12
  400cd0:	4b08      	ldr	r3, [pc, #32]	; (400cf4 <configure_wifi_web_setup_pin+0x4c>)
  400cd2:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP, WIFI_SETUP_MASK);
  400cd4:	2104      	movs	r1, #4
  400cd6:	2079      	movs	r0, #121	; 0x79
  400cd8:	4b07      	ldr	r3, [pc, #28]	; (400cf8 <configure_wifi_web_setup_pin+0x50>)
  400cda:	4798      	blx	r3
}
  400cdc:	bf00      	nop
  400cde:	3704      	adds	r7, #4
  400ce0:	46bd      	mov	sp, r7
  400ce2:	bd90      	pop	{r4, r7, pc}
  400ce4:	00401909 	.word	0x00401909
  400ce8:	004011e9 	.word	0x004011e9
  400cec:	00400c89 	.word	0x00400c89
  400cf0:	00400385 	.word	0x00400385
  400cf4:	00400949 	.word	0x00400949
  400cf8:	00401481 	.word	0x00401481

00400cfc <write_wifi_command>:

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  400cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d00:	b08b      	sub	sp, #44	; 0x2c
  400d02:	af00      	add	r7, sp, #0
  400d04:	6278      	str	r0, [r7, #36]	; 0x24
  400d06:	460b      	mov	r3, r1
  400d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	usart_write_line(BOARD_USART, comm);
  400d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
  400d0e:	484e      	ldr	r0, [pc, #312]	; (400e48 <write_wifi_command+0x14c>)
  400d10:	4b4e      	ldr	r3, [pc, #312]	; (400e4c <write_wifi_command+0x150>)
  400d12:	4798      	blx	r3
	
	// EDIT THIS
	timeout_counter = 0;
  400d14:	4a4e      	ldr	r2, [pc, #312]	; (400e50 <write_wifi_command+0x154>)
  400d16:	2300      	movs	r3, #0
  400d18:	7013      	strb	r3, [r2, #0]
	while(timeout_counter < cnt && !data_recieved) {
  400d1a:	e049      	b.n	400db0 <write_wifi_command+0xb4>
		delay_ms(1000);
  400d1c:	4b4d      	ldr	r3, [pc, #308]	; (400e54 <write_wifi_command+0x158>)
  400d1e:	4798      	blx	r3
  400d20:	4603      	mov	r3, r0
  400d22:	4619      	mov	r1, r3
  400d24:	f04f 0200 	mov.w	r2, #0
  400d28:	460b      	mov	r3, r1
  400d2a:	4614      	mov	r4, r2
  400d2c:	00a0      	lsls	r0, r4, #2
  400d2e:	61f8      	str	r0, [r7, #28]
  400d30:	69f8      	ldr	r0, [r7, #28]
  400d32:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400d36:	61f8      	str	r0, [r7, #28]
  400d38:	009b      	lsls	r3, r3, #2
  400d3a:	61bb      	str	r3, [r7, #24]
  400d3c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  400d40:	ea4f 1944 	mov.w	r9, r4, lsl #5
  400d44:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  400d48:	ea4f 1843 	mov.w	r8, r3, lsl #5
  400d4c:	ebb8 0803 	subs.w	r8, r8, r3
  400d50:	eb69 0904 	sbc.w	r9, r9, r4
  400d54:	eb18 0801 	adds.w	r8, r8, r1
  400d58:	eb49 0902 	adc.w	r9, r9, r2
  400d5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
  400d60:	617b      	str	r3, [r7, #20]
  400d62:	697b      	ldr	r3, [r7, #20]
  400d64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
  400d68:	617b      	str	r3, [r7, #20]
  400d6a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  400d6e:	613b      	str	r3, [r7, #16]
  400d70:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
  400d74:	4641      	mov	r1, r8
  400d76:	464a      	mov	r2, r9
  400d78:	f243 63af 	movw	r3, #13999	; 0x36af
  400d7c:	f04f 0400 	mov.w	r4, #0
  400d80:	eb11 0a03 	adds.w	sl, r1, r3
  400d84:	eb42 0b04 	adc.w	fp, r2, r4
  400d88:	4650      	mov	r0, sl
  400d8a:	4659      	mov	r1, fp
  400d8c:	4c32      	ldr	r4, [pc, #200]	; (400e58 <write_wifi_command+0x15c>)
  400d8e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400d92:	f04f 0300 	mov.w	r3, #0
  400d96:	47a0      	blx	r4
  400d98:	4603      	mov	r3, r0
  400d9a:	460c      	mov	r4, r1
  400d9c:	4618      	mov	r0, r3
  400d9e:	4b2f      	ldr	r3, [pc, #188]	; (400e5c <write_wifi_command+0x160>)
  400da0:	4798      	blx	r3
		timeout_counter++;
  400da2:	4b2b      	ldr	r3, [pc, #172]	; (400e50 <write_wifi_command+0x154>)
  400da4:	781b      	ldrb	r3, [r3, #0]
  400da6:	b2db      	uxtb	r3, r3
  400da8:	3301      	adds	r3, #1
  400daa:	b2db      	uxtb	r3, r3
  400dac:	4a28      	ldr	r2, [pc, #160]	; (400e50 <write_wifi_command+0x154>)
  400dae:	7013      	strb	r3, [r2, #0]
void write_wifi_command(char* comm, uint8_t cnt){
	usart_write_line(BOARD_USART, comm);
	
	// EDIT THIS
	timeout_counter = 0;
	while(timeout_counter < cnt && !data_recieved) {
  400db0:	4b27      	ldr	r3, [pc, #156]	; (400e50 <write_wifi_command+0x154>)
  400db2:	781b      	ldrb	r3, [r3, #0]
  400db4:	b2db      	uxtb	r3, r3
  400db6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
  400dba:	429a      	cmp	r2, r3
  400dbc:	d903      	bls.n	400dc6 <write_wifi_command+0xca>
  400dbe:	4b28      	ldr	r3, [pc, #160]	; (400e60 <write_wifi_command+0x164>)
  400dc0:	681b      	ldr	r3, [r3, #0]
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d0aa      	beq.n	400d1c <write_wifi_command+0x20>
		delay_ms(1000);
		timeout_counter++;
	}
	
	delay_ms(1000);
  400dc6:	4b23      	ldr	r3, [pc, #140]	; (400e54 <write_wifi_command+0x158>)
  400dc8:	4798      	blx	r3
  400dca:	4603      	mov	r3, r0
  400dcc:	4619      	mov	r1, r3
  400dce:	f04f 0200 	mov.w	r2, #0
  400dd2:	460b      	mov	r3, r1
  400dd4:	4614      	mov	r4, r2
  400dd6:	00a0      	lsls	r0, r4, #2
  400dd8:	60f8      	str	r0, [r7, #12]
  400dda:	68f8      	ldr	r0, [r7, #12]
  400ddc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400de0:	60f8      	str	r0, [r7, #12]
  400de2:	009b      	lsls	r3, r3, #2
  400de4:	60bb      	str	r3, [r7, #8]
  400de6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400dea:	0166      	lsls	r6, r4, #5
  400dec:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  400df0:	015d      	lsls	r5, r3, #5
  400df2:	1aed      	subs	r5, r5, r3
  400df4:	eb66 0604 	sbc.w	r6, r6, r4
  400df8:	186d      	adds	r5, r5, r1
  400dfa:	eb46 0602 	adc.w	r6, r6, r2
  400dfe:	00f3      	lsls	r3, r6, #3
  400e00:	607b      	str	r3, [r7, #4]
  400e02:	687b      	ldr	r3, [r7, #4]
  400e04:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
  400e08:	607b      	str	r3, [r7, #4]
  400e0a:	00eb      	lsls	r3, r5, #3
  400e0c:	603b      	str	r3, [r7, #0]
  400e0e:	e9d7 5600 	ldrd	r5, r6, [r7]
  400e12:	4629      	mov	r1, r5
  400e14:	4632      	mov	r2, r6
  400e16:	f243 63af 	movw	r3, #13999	; 0x36af
  400e1a:	f04f 0400 	mov.w	r4, #0
  400e1e:	18cd      	adds	r5, r1, r3
  400e20:	eb42 0604 	adc.w	r6, r2, r4
  400e24:	4628      	mov	r0, r5
  400e26:	4631      	mov	r1, r6
  400e28:	4c0b      	ldr	r4, [pc, #44]	; (400e58 <write_wifi_command+0x15c>)
  400e2a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e2e:	f04f 0300 	mov.w	r3, #0
  400e32:	47a0      	blx	r4
  400e34:	4603      	mov	r3, r0
  400e36:	460c      	mov	r4, r1
  400e38:	4618      	mov	r0, r3
  400e3a:	4b08      	ldr	r3, [pc, #32]	; (400e5c <write_wifi_command+0x160>)
  400e3c:	4798      	blx	r3
}
  400e3e:	bf00      	nop
  400e40:	372c      	adds	r7, #44	; 0x2c
  400e42:	46bd      	mov	sp, r7
  400e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e48:	40024000 	.word	0x40024000
  400e4c:	00400735 	.word	0x00400735
  400e50:	200006d0 	.word	0x200006d0
  400e54:	00400a09 	.word	0x00400a09
  400e58:	004021b5 	.word	0x004021b5
  400e5c:	20000001 	.word	0x20000001
  400e60:	200006d4 	.word	0x200006d4

00400e64 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400e64:	b580      	push	{r7, lr}
  400e66:	b082      	sub	sp, #8
  400e68:	af00      	add	r7, sp, #0
  400e6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e6c:	687b      	ldr	r3, [r7, #4]
  400e6e:	2b07      	cmp	r3, #7
  400e70:	d831      	bhi.n	400ed6 <osc_enable+0x72>
  400e72:	a201      	add	r2, pc, #4	; (adr r2, 400e78 <osc_enable+0x14>)
  400e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e78:	00400ed5 	.word	0x00400ed5
  400e7c:	00400e99 	.word	0x00400e99
  400e80:	00400ea1 	.word	0x00400ea1
  400e84:	00400ea9 	.word	0x00400ea9
  400e88:	00400eb1 	.word	0x00400eb1
  400e8c:	00400eb9 	.word	0x00400eb9
  400e90:	00400ec1 	.word	0x00400ec1
  400e94:	00400ecb 	.word	0x00400ecb
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400e98:	2000      	movs	r0, #0
  400e9a:	4b11      	ldr	r3, [pc, #68]	; (400ee0 <osc_enable+0x7c>)
  400e9c:	4798      	blx	r3
		break;
  400e9e:	e01a      	b.n	400ed6 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400ea0:	2001      	movs	r0, #1
  400ea2:	4b0f      	ldr	r3, [pc, #60]	; (400ee0 <osc_enable+0x7c>)
  400ea4:	4798      	blx	r3
		break;
  400ea6:	e016      	b.n	400ed6 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400ea8:	2000      	movs	r0, #0
  400eaa:	4b0e      	ldr	r3, [pc, #56]	; (400ee4 <osc_enable+0x80>)
  400eac:	4798      	blx	r3
		break;
  400eae:	e012      	b.n	400ed6 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400eb0:	2010      	movs	r0, #16
  400eb2:	4b0c      	ldr	r3, [pc, #48]	; (400ee4 <osc_enable+0x80>)
  400eb4:	4798      	blx	r3
		break;
  400eb6:	e00e      	b.n	400ed6 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400eb8:	2020      	movs	r0, #32
  400eba:	4b0a      	ldr	r3, [pc, #40]	; (400ee4 <osc_enable+0x80>)
  400ebc:	4798      	blx	r3
		break;
  400ebe:	e00a      	b.n	400ed6 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ec0:	213e      	movs	r1, #62	; 0x3e
  400ec2:	2000      	movs	r0, #0
  400ec4:	4b08      	ldr	r3, [pc, #32]	; (400ee8 <osc_enable+0x84>)
  400ec6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400ec8:	e005      	b.n	400ed6 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400eca:	213e      	movs	r1, #62	; 0x3e
  400ecc:	2001      	movs	r0, #1
  400ece:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <osc_enable+0x84>)
  400ed0:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400ed2:	e000      	b.n	400ed6 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  400ed4:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  400ed6:	bf00      	nop
  400ed8:	3708      	adds	r7, #8
  400eda:	46bd      	mov	sp, r7
  400edc:	bd80      	pop	{r7, pc}
  400ede:	bf00      	nop
  400ee0:	0040173d 	.word	0x0040173d
  400ee4:	004017a9 	.word	0x004017a9
  400ee8:	00401819 	.word	0x00401819

00400eec <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400eec:	b580      	push	{r7, lr}
  400eee:	b082      	sub	sp, #8
  400ef0:	af00      	add	r7, sp, #0
  400ef2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400ef4:	687b      	ldr	r3, [r7, #4]
  400ef6:	2b07      	cmp	r3, #7
  400ef8:	d826      	bhi.n	400f48 <osc_is_ready+0x5c>
  400efa:	a201      	add	r2, pc, #4	; (adr r2, 400f00 <osc_is_ready+0x14>)
  400efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f00:	00400f21 	.word	0x00400f21
  400f04:	00400f25 	.word	0x00400f25
  400f08:	00400f25 	.word	0x00400f25
  400f0c:	00400f37 	.word	0x00400f37
  400f10:	00400f37 	.word	0x00400f37
  400f14:	00400f37 	.word	0x00400f37
  400f18:	00400f37 	.word	0x00400f37
  400f1c:	00400f37 	.word	0x00400f37
	case OSC_SLCK_32K_RC:
		return 1;
  400f20:	2301      	movs	r3, #1
  400f22:	e012      	b.n	400f4a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400f24:	4b0b      	ldr	r3, [pc, #44]	; (400f54 <osc_is_ready+0x68>)
  400f26:	4798      	blx	r3
  400f28:	4603      	mov	r3, r0
  400f2a:	2b00      	cmp	r3, #0
  400f2c:	bf14      	ite	ne
  400f2e:	2301      	movne	r3, #1
  400f30:	2300      	moveq	r3, #0
  400f32:	b2db      	uxtb	r3, r3
  400f34:	e009      	b.n	400f4a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400f36:	4b08      	ldr	r3, [pc, #32]	; (400f58 <osc_is_ready+0x6c>)
  400f38:	4798      	blx	r3
  400f3a:	4603      	mov	r3, r0
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	bf14      	ite	ne
  400f40:	2301      	movne	r3, #1
  400f42:	2300      	moveq	r3, #0
  400f44:	b2db      	uxtb	r3, r3
  400f46:	e000      	b.n	400f4a <osc_is_ready+0x5e>
	}

	return 0;
  400f48:	2300      	movs	r3, #0
}
  400f4a:	4618      	mov	r0, r3
  400f4c:	3708      	adds	r7, #8
  400f4e:	46bd      	mov	sp, r7
  400f50:	bd80      	pop	{r7, pc}
  400f52:	bf00      	nop
  400f54:	00401775 	.word	0x00401775
  400f58:	00401891 	.word	0x00401891

00400f5c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400f5c:	b480      	push	{r7}
  400f5e:	b083      	sub	sp, #12
  400f60:	af00      	add	r7, sp, #0
  400f62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f64:	687b      	ldr	r3, [r7, #4]
  400f66:	2b07      	cmp	r3, #7
  400f68:	d825      	bhi.n	400fb6 <osc_get_rate+0x5a>
  400f6a:	a201      	add	r2, pc, #4	; (adr r2, 400f70 <osc_get_rate+0x14>)
  400f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f70:	00400f91 	.word	0x00400f91
  400f74:	00400f97 	.word	0x00400f97
  400f78:	00400f9d 	.word	0x00400f9d
  400f7c:	00400fa3 	.word	0x00400fa3
  400f80:	00400fa7 	.word	0x00400fa7
  400f84:	00400fab 	.word	0x00400fab
  400f88:	00400faf 	.word	0x00400faf
  400f8c:	00400fb3 	.word	0x00400fb3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400f90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f94:	e010      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f9a:	e00d      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400fa0:	e00a      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400fa2:	4b08      	ldr	r3, [pc, #32]	; (400fc4 <osc_get_rate+0x68>)
  400fa4:	e008      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400fa6:	4b08      	ldr	r3, [pc, #32]	; (400fc8 <osc_get_rate+0x6c>)
  400fa8:	e006      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400faa:	4b08      	ldr	r3, [pc, #32]	; (400fcc <osc_get_rate+0x70>)
  400fac:	e004      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400fae:	4b07      	ldr	r3, [pc, #28]	; (400fcc <osc_get_rate+0x70>)
  400fb0:	e002      	b.n	400fb8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400fb2:	4b06      	ldr	r3, [pc, #24]	; (400fcc <osc_get_rate+0x70>)
  400fb4:	e000      	b.n	400fb8 <osc_get_rate+0x5c>
	}

	return 0;
  400fb6:	2300      	movs	r3, #0
}
  400fb8:	4618      	mov	r0, r3
  400fba:	370c      	adds	r7, #12
  400fbc:	46bd      	mov	sp, r7
  400fbe:	bc80      	pop	{r7}
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop
  400fc4:	003d0900 	.word	0x003d0900
  400fc8:	007a1200 	.word	0x007a1200
  400fcc:	00b71b00 	.word	0x00b71b00

00400fd0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400fd0:	b580      	push	{r7, lr}
  400fd2:	b082      	sub	sp, #8
  400fd4:	af00      	add	r7, sp, #0
  400fd6:	4603      	mov	r3, r0
  400fd8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400fda:	bf00      	nop
  400fdc:	79fb      	ldrb	r3, [r7, #7]
  400fde:	4618      	mov	r0, r3
  400fe0:	4b05      	ldr	r3, [pc, #20]	; (400ff8 <osc_wait_ready+0x28>)
  400fe2:	4798      	blx	r3
  400fe4:	4603      	mov	r3, r0
  400fe6:	f083 0301 	eor.w	r3, r3, #1
  400fea:	b2db      	uxtb	r3, r3
  400fec:	2b00      	cmp	r3, #0
  400fee:	d1f5      	bne.n	400fdc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400ff0:	bf00      	nop
  400ff2:	3708      	adds	r7, #8
  400ff4:	46bd      	mov	sp, r7
  400ff6:	bd80      	pop	{r7, pc}
  400ff8:	00400eed 	.word	0x00400eed

00400ffc <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400ffc:	b580      	push	{r7, lr}
  400ffe:	b086      	sub	sp, #24
  401000:	af00      	add	r7, sp, #0
  401002:	60f8      	str	r0, [r7, #12]
  401004:	607a      	str	r2, [r7, #4]
  401006:	603b      	str	r3, [r7, #0]
  401008:	460b      	mov	r3, r1
  40100a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40100c:	7afb      	ldrb	r3, [r7, #11]
  40100e:	4618      	mov	r0, r3
  401010:	4b0d      	ldr	r3, [pc, #52]	; (401048 <pll_config_init+0x4c>)
  401012:	4798      	blx	r3
  401014:	4602      	mov	r2, r0
  401016:	687b      	ldr	r3, [r7, #4]
  401018:	fbb2 f3f3 	udiv	r3, r2, r3
  40101c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40101e:	697b      	ldr	r3, [r7, #20]
  401020:	683a      	ldr	r2, [r7, #0]
  401022:	fb02 f303 	mul.w	r3, r2, r3
  401026:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401028:	683b      	ldr	r3, [r7, #0]
  40102a:	3b01      	subs	r3, #1
  40102c:	041a      	lsls	r2, r3, #16
  40102e:	4b07      	ldr	r3, [pc, #28]	; (40104c <pll_config_init+0x50>)
  401030:	4013      	ands	r3, r2
  401032:	687a      	ldr	r2, [r7, #4]
  401034:	b2d2      	uxtb	r2, r2
  401036:	4313      	orrs	r3, r2
  401038:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40103c:	68fb      	ldr	r3, [r7, #12]
  40103e:	601a      	str	r2, [r3, #0]
}
  401040:	bf00      	nop
  401042:	3718      	adds	r7, #24
  401044:	46bd      	mov	sp, r7
  401046:	bd80      	pop	{r7, pc}
  401048:	00400f5d 	.word	0x00400f5d
  40104c:	07ff0000 	.word	0x07ff0000

00401050 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401050:	b580      	push	{r7, lr}
  401052:	b082      	sub	sp, #8
  401054:	af00      	add	r7, sp, #0
  401056:	6078      	str	r0, [r7, #4]
  401058:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40105a:	683b      	ldr	r3, [r7, #0]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d108      	bne.n	401072 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401060:	4b09      	ldr	r3, [pc, #36]	; (401088 <pll_enable+0x38>)
  401062:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401064:	4a09      	ldr	r2, [pc, #36]	; (40108c <pll_enable+0x3c>)
  401066:	687b      	ldr	r3, [r7, #4]
  401068:	681b      	ldr	r3, [r3, #0]
  40106a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40106e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401070:	e005      	b.n	40107e <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  401072:	4b07      	ldr	r3, [pc, #28]	; (401090 <pll_enable+0x40>)
  401074:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401076:	4a05      	ldr	r2, [pc, #20]	; (40108c <pll_enable+0x3c>)
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	681b      	ldr	r3, [r3, #0]
  40107c:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  40107e:	bf00      	nop
  401080:	3708      	adds	r7, #8
  401082:	46bd      	mov	sp, r7
  401084:	bd80      	pop	{r7, pc}
  401086:	bf00      	nop
  401088:	004018a9 	.word	0x004018a9
  40108c:	400e0400 	.word	0x400e0400
  401090:	004018d9 	.word	0x004018d9

00401094 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401094:	b580      	push	{r7, lr}
  401096:	b082      	sub	sp, #8
  401098:	af00      	add	r7, sp, #0
  40109a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	2b00      	cmp	r3, #0
  4010a0:	d103      	bne.n	4010aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  4010a2:	4b05      	ldr	r3, [pc, #20]	; (4010b8 <pll_is_locked+0x24>)
  4010a4:	4798      	blx	r3
  4010a6:	4603      	mov	r3, r0
  4010a8:	e002      	b.n	4010b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  4010aa:	4b04      	ldr	r3, [pc, #16]	; (4010bc <pll_is_locked+0x28>)
  4010ac:	4798      	blx	r3
  4010ae:	4603      	mov	r3, r0
	}
}
  4010b0:	4618      	mov	r0, r3
  4010b2:	3708      	adds	r7, #8
  4010b4:	46bd      	mov	sp, r7
  4010b6:	bd80      	pop	{r7, pc}
  4010b8:	004018c1 	.word	0x004018c1
  4010bc:	004018f1 	.word	0x004018f1

004010c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4010c0:	b580      	push	{r7, lr}
  4010c2:	b082      	sub	sp, #8
  4010c4:	af00      	add	r7, sp, #0
  4010c6:	4603      	mov	r3, r0
  4010c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4010ca:	79fb      	ldrb	r3, [r7, #7]
  4010cc:	3b03      	subs	r3, #3
  4010ce:	2b04      	cmp	r3, #4
  4010d0:	d808      	bhi.n	4010e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4010d2:	79fb      	ldrb	r3, [r7, #7]
  4010d4:	4618      	mov	r0, r3
  4010d6:	4b06      	ldr	r3, [pc, #24]	; (4010f0 <pll_enable_source+0x30>)
  4010d8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4010da:	79fb      	ldrb	r3, [r7, #7]
  4010dc:	4618      	mov	r0, r3
  4010de:	4b05      	ldr	r3, [pc, #20]	; (4010f4 <pll_enable_source+0x34>)
  4010e0:	4798      	blx	r3
		break;
  4010e2:	e000      	b.n	4010e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4010e4:	bf00      	nop
	}
}
  4010e6:	bf00      	nop
  4010e8:	3708      	adds	r7, #8
  4010ea:	46bd      	mov	sp, r7
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00400e65 	.word	0x00400e65
  4010f4:	00400fd1 	.word	0x00400fd1

004010f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4010f8:	b580      	push	{r7, lr}
  4010fa:	b082      	sub	sp, #8
  4010fc:	af00      	add	r7, sp, #0
  4010fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401100:	bf00      	nop
  401102:	6878      	ldr	r0, [r7, #4]
  401104:	4b04      	ldr	r3, [pc, #16]	; (401118 <pll_wait_for_lock+0x20>)
  401106:	4798      	blx	r3
  401108:	4603      	mov	r3, r0
  40110a:	2b00      	cmp	r3, #0
  40110c:	d0f9      	beq.n	401102 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40110e:	2300      	movs	r3, #0
}
  401110:	4618      	mov	r0, r3
  401112:	3708      	adds	r7, #8
  401114:	46bd      	mov	sp, r7
  401116:	bd80      	pop	{r7, pc}
  401118:	00401095 	.word	0x00401095

0040111c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401120:	2006      	movs	r0, #6
  401122:	4b04      	ldr	r3, [pc, #16]	; (401134 <sysclk_get_main_hz+0x18>)
  401124:	4798      	blx	r3
  401126:	4602      	mov	r2, r0
  401128:	4613      	mov	r3, r2
  40112a:	009b      	lsls	r3, r3, #2
  40112c:	4413      	add	r3, r2
  40112e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401130:	4618      	mov	r0, r3
  401132:	bd80      	pop	{r7, pc}
  401134:	00400f5d 	.word	0x00400f5d

00401138 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401138:	b580      	push	{r7, lr}
  40113a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40113c:	4b02      	ldr	r3, [pc, #8]	; (401148 <sysclk_get_cpu_hz+0x10>)
  40113e:	4798      	blx	r3
  401140:	4603      	mov	r3, r0
  401142:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401144:	4618      	mov	r0, r3
  401146:	bd80      	pop	{r7, pc}
  401148:	0040111d 	.word	0x0040111d

0040114c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40114c:	b590      	push	{r4, r7, lr}
  40114e:	b083      	sub	sp, #12
  401150:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401152:	4811      	ldr	r0, [pc, #68]	; (401198 <sysclk_init+0x4c>)
  401154:	4b11      	ldr	r3, [pc, #68]	; (40119c <sysclk_init+0x50>)
  401156:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401158:	2006      	movs	r0, #6
  40115a:	4b11      	ldr	r3, [pc, #68]	; (4011a0 <sysclk_init+0x54>)
  40115c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40115e:	1d38      	adds	r0, r7, #4
  401160:	2314      	movs	r3, #20
  401162:	2201      	movs	r2, #1
  401164:	2106      	movs	r1, #6
  401166:	4c0f      	ldr	r4, [pc, #60]	; (4011a4 <sysclk_init+0x58>)
  401168:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40116a:	1d3b      	adds	r3, r7, #4
  40116c:	2100      	movs	r1, #0
  40116e:	4618      	mov	r0, r3
  401170:	4b0d      	ldr	r3, [pc, #52]	; (4011a8 <sysclk_init+0x5c>)
  401172:	4798      	blx	r3
		pll_wait_for_lock(0);
  401174:	2000      	movs	r0, #0
  401176:	4b0d      	ldr	r3, [pc, #52]	; (4011ac <sysclk_init+0x60>)
  401178:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40117a:	2010      	movs	r0, #16
  40117c:	4b0c      	ldr	r3, [pc, #48]	; (4011b0 <sysclk_init+0x64>)
  40117e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401180:	4b0c      	ldr	r3, [pc, #48]	; (4011b4 <sysclk_init+0x68>)
  401182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401184:	4b0c      	ldr	r3, [pc, #48]	; (4011b8 <sysclk_init+0x6c>)
  401186:	4798      	blx	r3
  401188:	4603      	mov	r3, r0
  40118a:	4618      	mov	r0, r3
  40118c:	4b03      	ldr	r3, [pc, #12]	; (40119c <sysclk_init+0x50>)
  40118e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401190:	bf00      	nop
  401192:	370c      	adds	r7, #12
  401194:	46bd      	mov	sp, r7
  401196:	bd90      	pop	{r4, r7, pc}
  401198:	07270e00 	.word	0x07270e00
  40119c:	00401f4d 	.word	0x00401f4d
  4011a0:	004010c1 	.word	0x004010c1
  4011a4:	00400ffd 	.word	0x00400ffd
  4011a8:	00401051 	.word	0x00401051
  4011ac:	004010f9 	.word	0x004010f9
  4011b0:	004016bd 	.word	0x004016bd
  4011b4:	00401db1 	.word	0x00401db1
  4011b8:	00401139 	.word	0x00401139

004011bc <pio_pull_up>:
  4011bc:	b480      	push	{r7}
  4011be:	b085      	sub	sp, #20
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	60f8      	str	r0, [r7, #12]
  4011c4:	60b9      	str	r1, [r7, #8]
  4011c6:	607a      	str	r2, [r7, #4]
  4011c8:	687b      	ldr	r3, [r7, #4]
  4011ca:	2b00      	cmp	r3, #0
  4011cc:	d003      	beq.n	4011d6 <pio_pull_up+0x1a>
  4011ce:	68fb      	ldr	r3, [r7, #12]
  4011d0:	68ba      	ldr	r2, [r7, #8]
  4011d2:	665a      	str	r2, [r3, #100]	; 0x64
  4011d4:	e002      	b.n	4011dc <pio_pull_up+0x20>
  4011d6:	68fb      	ldr	r3, [r7, #12]
  4011d8:	68ba      	ldr	r2, [r7, #8]
  4011da:	661a      	str	r2, [r3, #96]	; 0x60
  4011dc:	bf00      	nop
  4011de:	3714      	adds	r7, #20
  4011e0:	46bd      	mov	sp, r7
  4011e2:	bc80      	pop	{r7}
  4011e4:	4770      	bx	lr
  4011e6:	bf00      	nop

004011e8 <pio_set_debounce_filter>:
  4011e8:	b480      	push	{r7}
  4011ea:	b085      	sub	sp, #20
  4011ec:	af00      	add	r7, sp, #0
  4011ee:	60f8      	str	r0, [r7, #12]
  4011f0:	60b9      	str	r1, [r7, #8]
  4011f2:	607a      	str	r2, [r7, #4]
  4011f4:	68fb      	ldr	r3, [r7, #12]
  4011f6:	68ba      	ldr	r2, [r7, #8]
  4011f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	005b      	lsls	r3, r3, #1
  401200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401204:	fbb2 f3f3 	udiv	r3, r2, r3
  401208:	3b01      	subs	r3, #1
  40120a:	f3c3 020d 	ubfx	r2, r3, #0, #14
  40120e:	68fb      	ldr	r3, [r7, #12]
  401210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  401214:	bf00      	nop
  401216:	3714      	adds	r7, #20
  401218:	46bd      	mov	sp, r7
  40121a:	bc80      	pop	{r7}
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop

00401220 <pio_set_peripheral>:
  401220:	b480      	push	{r7}
  401222:	b087      	sub	sp, #28
  401224:	af00      	add	r7, sp, #0
  401226:	60f8      	str	r0, [r7, #12]
  401228:	60b9      	str	r1, [r7, #8]
  40122a:	607a      	str	r2, [r7, #4]
  40122c:	68fb      	ldr	r3, [r7, #12]
  40122e:	687a      	ldr	r2, [r7, #4]
  401230:	645a      	str	r2, [r3, #68]	; 0x44
  401232:	68bb      	ldr	r3, [r7, #8]
  401234:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401238:	d04a      	beq.n	4012d0 <pio_set_peripheral+0xb0>
  40123a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40123e:	d808      	bhi.n	401252 <pio_set_peripheral+0x32>
  401240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401244:	d016      	beq.n	401274 <pio_set_peripheral+0x54>
  401246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40124a:	d02c      	beq.n	4012a6 <pio_set_peripheral+0x86>
  40124c:	2b00      	cmp	r3, #0
  40124e:	d069      	beq.n	401324 <pio_set_peripheral+0x104>
  401250:	e064      	b.n	40131c <pio_set_peripheral+0xfc>
  401252:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401256:	d065      	beq.n	401324 <pio_set_peripheral+0x104>
  401258:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40125c:	d803      	bhi.n	401266 <pio_set_peripheral+0x46>
  40125e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401262:	d04a      	beq.n	4012fa <pio_set_peripheral+0xda>
  401264:	e05a      	b.n	40131c <pio_set_peripheral+0xfc>
  401266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40126a:	d05b      	beq.n	401324 <pio_set_peripheral+0x104>
  40126c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401270:	d058      	beq.n	401324 <pio_set_peripheral+0x104>
  401272:	e053      	b.n	40131c <pio_set_peripheral+0xfc>
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401278:	617b      	str	r3, [r7, #20]
  40127a:	68fb      	ldr	r3, [r7, #12]
  40127c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40127e:	687b      	ldr	r3, [r7, #4]
  401280:	43d9      	mvns	r1, r3
  401282:	697b      	ldr	r3, [r7, #20]
  401284:	400b      	ands	r3, r1
  401286:	401a      	ands	r2, r3
  401288:	68fb      	ldr	r3, [r7, #12]
  40128a:	671a      	str	r2, [r3, #112]	; 0x70
  40128c:	68fb      	ldr	r3, [r7, #12]
  40128e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401290:	617b      	str	r3, [r7, #20]
  401292:	68fb      	ldr	r3, [r7, #12]
  401294:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401296:	687b      	ldr	r3, [r7, #4]
  401298:	43d9      	mvns	r1, r3
  40129a:	697b      	ldr	r3, [r7, #20]
  40129c:	400b      	ands	r3, r1
  40129e:	401a      	ands	r2, r3
  4012a0:	68fb      	ldr	r3, [r7, #12]
  4012a2:	675a      	str	r2, [r3, #116]	; 0x74
  4012a4:	e03a      	b.n	40131c <pio_set_peripheral+0xfc>
  4012a6:	68fb      	ldr	r3, [r7, #12]
  4012a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4012aa:	617b      	str	r3, [r7, #20]
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	697b      	ldr	r3, [r7, #20]
  4012b0:	431a      	orrs	r2, r3
  4012b2:	68fb      	ldr	r3, [r7, #12]
  4012b4:	671a      	str	r2, [r3, #112]	; 0x70
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4012ba:	617b      	str	r3, [r7, #20]
  4012bc:	68fb      	ldr	r3, [r7, #12]
  4012be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4012c0:	687b      	ldr	r3, [r7, #4]
  4012c2:	43d9      	mvns	r1, r3
  4012c4:	697b      	ldr	r3, [r7, #20]
  4012c6:	400b      	ands	r3, r1
  4012c8:	401a      	ands	r2, r3
  4012ca:	68fb      	ldr	r3, [r7, #12]
  4012cc:	675a      	str	r2, [r3, #116]	; 0x74
  4012ce:	e025      	b.n	40131c <pio_set_peripheral+0xfc>
  4012d0:	68fb      	ldr	r3, [r7, #12]
  4012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4012d4:	617b      	str	r3, [r7, #20]
  4012d6:	68fb      	ldr	r3, [r7, #12]
  4012d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4012da:	687b      	ldr	r3, [r7, #4]
  4012dc:	43d9      	mvns	r1, r3
  4012de:	697b      	ldr	r3, [r7, #20]
  4012e0:	400b      	ands	r3, r1
  4012e2:	401a      	ands	r2, r3
  4012e4:	68fb      	ldr	r3, [r7, #12]
  4012e6:	671a      	str	r2, [r3, #112]	; 0x70
  4012e8:	68fb      	ldr	r3, [r7, #12]
  4012ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4012ec:	617b      	str	r3, [r7, #20]
  4012ee:	687a      	ldr	r2, [r7, #4]
  4012f0:	697b      	ldr	r3, [r7, #20]
  4012f2:	431a      	orrs	r2, r3
  4012f4:	68fb      	ldr	r3, [r7, #12]
  4012f6:	675a      	str	r2, [r3, #116]	; 0x74
  4012f8:	e010      	b.n	40131c <pio_set_peripheral+0xfc>
  4012fa:	68fb      	ldr	r3, [r7, #12]
  4012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4012fe:	617b      	str	r3, [r7, #20]
  401300:	687a      	ldr	r2, [r7, #4]
  401302:	697b      	ldr	r3, [r7, #20]
  401304:	431a      	orrs	r2, r3
  401306:	68fb      	ldr	r3, [r7, #12]
  401308:	671a      	str	r2, [r3, #112]	; 0x70
  40130a:	68fb      	ldr	r3, [r7, #12]
  40130c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40130e:	617b      	str	r3, [r7, #20]
  401310:	687a      	ldr	r2, [r7, #4]
  401312:	697b      	ldr	r3, [r7, #20]
  401314:	431a      	orrs	r2, r3
  401316:	68fb      	ldr	r3, [r7, #12]
  401318:	675a      	str	r2, [r3, #116]	; 0x74
  40131a:	bf00      	nop
  40131c:	68fb      	ldr	r3, [r7, #12]
  40131e:	687a      	ldr	r2, [r7, #4]
  401320:	605a      	str	r2, [r3, #4]
  401322:	e000      	b.n	401326 <pio_set_peripheral+0x106>
  401324:	bf00      	nop
  401326:	371c      	adds	r7, #28
  401328:	46bd      	mov	sp, r7
  40132a:	bc80      	pop	{r7}
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop

00401330 <pio_set_input>:
  401330:	b580      	push	{r7, lr}
  401332:	b084      	sub	sp, #16
  401334:	af00      	add	r7, sp, #0
  401336:	60f8      	str	r0, [r7, #12]
  401338:	60b9      	str	r1, [r7, #8]
  40133a:	607a      	str	r2, [r7, #4]
  40133c:	68b9      	ldr	r1, [r7, #8]
  40133e:	68f8      	ldr	r0, [r7, #12]
  401340:	4b19      	ldr	r3, [pc, #100]	; (4013a8 <pio_set_input+0x78>)
  401342:	4798      	blx	r3
  401344:	687b      	ldr	r3, [r7, #4]
  401346:	f003 0301 	and.w	r3, r3, #1
  40134a:	461a      	mov	r2, r3
  40134c:	68b9      	ldr	r1, [r7, #8]
  40134e:	68f8      	ldr	r0, [r7, #12]
  401350:	4b16      	ldr	r3, [pc, #88]	; (4013ac <pio_set_input+0x7c>)
  401352:	4798      	blx	r3
  401354:	687b      	ldr	r3, [r7, #4]
  401356:	f003 030a 	and.w	r3, r3, #10
  40135a:	2b00      	cmp	r3, #0
  40135c:	d003      	beq.n	401366 <pio_set_input+0x36>
  40135e:	68fb      	ldr	r3, [r7, #12]
  401360:	68ba      	ldr	r2, [r7, #8]
  401362:	621a      	str	r2, [r3, #32]
  401364:	e002      	b.n	40136c <pio_set_input+0x3c>
  401366:	68fb      	ldr	r3, [r7, #12]
  401368:	68ba      	ldr	r2, [r7, #8]
  40136a:	625a      	str	r2, [r3, #36]	; 0x24
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	f003 0302 	and.w	r3, r3, #2
  401372:	2b00      	cmp	r3, #0
  401374:	d004      	beq.n	401380 <pio_set_input+0x50>
  401376:	68fb      	ldr	r3, [r7, #12]
  401378:	68ba      	ldr	r2, [r7, #8]
  40137a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40137e:	e008      	b.n	401392 <pio_set_input+0x62>
  401380:	687b      	ldr	r3, [r7, #4]
  401382:	f003 0308 	and.w	r3, r3, #8
  401386:	2b00      	cmp	r3, #0
  401388:	d003      	beq.n	401392 <pio_set_input+0x62>
  40138a:	68fb      	ldr	r3, [r7, #12]
  40138c:	68ba      	ldr	r2, [r7, #8]
  40138e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401392:	68fb      	ldr	r3, [r7, #12]
  401394:	68ba      	ldr	r2, [r7, #8]
  401396:	615a      	str	r2, [r3, #20]
  401398:	68fb      	ldr	r3, [r7, #12]
  40139a:	68ba      	ldr	r2, [r7, #8]
  40139c:	601a      	str	r2, [r3, #0]
  40139e:	bf00      	nop
  4013a0:	3710      	adds	r7, #16
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd80      	pop	{r7, pc}
  4013a6:	bf00      	nop
  4013a8:	0040149d 	.word	0x0040149d
  4013ac:	004011bd 	.word	0x004011bd

004013b0 <pio_set_output>:
  4013b0:	b580      	push	{r7, lr}
  4013b2:	b084      	sub	sp, #16
  4013b4:	af00      	add	r7, sp, #0
  4013b6:	60f8      	str	r0, [r7, #12]
  4013b8:	60b9      	str	r1, [r7, #8]
  4013ba:	607a      	str	r2, [r7, #4]
  4013bc:	603b      	str	r3, [r7, #0]
  4013be:	68b9      	ldr	r1, [r7, #8]
  4013c0:	68f8      	ldr	r0, [r7, #12]
  4013c2:	4b12      	ldr	r3, [pc, #72]	; (40140c <pio_set_output+0x5c>)
  4013c4:	4798      	blx	r3
  4013c6:	69ba      	ldr	r2, [r7, #24]
  4013c8:	68b9      	ldr	r1, [r7, #8]
  4013ca:	68f8      	ldr	r0, [r7, #12]
  4013cc:	4b10      	ldr	r3, [pc, #64]	; (401410 <pio_set_output+0x60>)
  4013ce:	4798      	blx	r3
  4013d0:	683b      	ldr	r3, [r7, #0]
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d003      	beq.n	4013de <pio_set_output+0x2e>
  4013d6:	68fb      	ldr	r3, [r7, #12]
  4013d8:	68ba      	ldr	r2, [r7, #8]
  4013da:	651a      	str	r2, [r3, #80]	; 0x50
  4013dc:	e002      	b.n	4013e4 <pio_set_output+0x34>
  4013de:	68fb      	ldr	r3, [r7, #12]
  4013e0:	68ba      	ldr	r2, [r7, #8]
  4013e2:	655a      	str	r2, [r3, #84]	; 0x54
  4013e4:	687b      	ldr	r3, [r7, #4]
  4013e6:	2b00      	cmp	r3, #0
  4013e8:	d003      	beq.n	4013f2 <pio_set_output+0x42>
  4013ea:	68fb      	ldr	r3, [r7, #12]
  4013ec:	68ba      	ldr	r2, [r7, #8]
  4013ee:	631a      	str	r2, [r3, #48]	; 0x30
  4013f0:	e002      	b.n	4013f8 <pio_set_output+0x48>
  4013f2:	68fb      	ldr	r3, [r7, #12]
  4013f4:	68ba      	ldr	r2, [r7, #8]
  4013f6:	635a      	str	r2, [r3, #52]	; 0x34
  4013f8:	68fb      	ldr	r3, [r7, #12]
  4013fa:	68ba      	ldr	r2, [r7, #8]
  4013fc:	611a      	str	r2, [r3, #16]
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	68ba      	ldr	r2, [r7, #8]
  401402:	601a      	str	r2, [r3, #0]
  401404:	bf00      	nop
  401406:	3710      	adds	r7, #16
  401408:	46bd      	mov	sp, r7
  40140a:	bd80      	pop	{r7, pc}
  40140c:	0040149d 	.word	0x0040149d
  401410:	004011bd 	.word	0x004011bd

00401414 <pio_configure_interrupt>:
  401414:	b480      	push	{r7}
  401416:	b085      	sub	sp, #20
  401418:	af00      	add	r7, sp, #0
  40141a:	60f8      	str	r0, [r7, #12]
  40141c:	60b9      	str	r1, [r7, #8]
  40141e:	607a      	str	r2, [r7, #4]
  401420:	687b      	ldr	r3, [r7, #4]
  401422:	f003 0310 	and.w	r3, r3, #16
  401426:	2b00      	cmp	r3, #0
  401428:	d020      	beq.n	40146c <pio_configure_interrupt+0x58>
  40142a:	68fb      	ldr	r3, [r7, #12]
  40142c:	68ba      	ldr	r2, [r7, #8]
  40142e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401432:	687b      	ldr	r3, [r7, #4]
  401434:	f003 0320 	and.w	r3, r3, #32
  401438:	2b00      	cmp	r3, #0
  40143a:	d004      	beq.n	401446 <pio_configure_interrupt+0x32>
  40143c:	68fb      	ldr	r3, [r7, #12]
  40143e:	68ba      	ldr	r2, [r7, #8]
  401440:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401444:	e003      	b.n	40144e <pio_configure_interrupt+0x3a>
  401446:	68fb      	ldr	r3, [r7, #12]
  401448:	68ba      	ldr	r2, [r7, #8]
  40144a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40144e:	687b      	ldr	r3, [r7, #4]
  401450:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401454:	2b00      	cmp	r3, #0
  401456:	d004      	beq.n	401462 <pio_configure_interrupt+0x4e>
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	68ba      	ldr	r2, [r7, #8]
  40145c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401460:	e008      	b.n	401474 <pio_configure_interrupt+0x60>
  401462:	68fb      	ldr	r3, [r7, #12]
  401464:	68ba      	ldr	r2, [r7, #8]
  401466:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  40146a:	e003      	b.n	401474 <pio_configure_interrupt+0x60>
  40146c:	68fb      	ldr	r3, [r7, #12]
  40146e:	68ba      	ldr	r2, [r7, #8]
  401470:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  401474:	bf00      	nop
  401476:	3714      	adds	r7, #20
  401478:	46bd      	mov	sp, r7
  40147a:	bc80      	pop	{r7}
  40147c:	4770      	bx	lr
  40147e:	bf00      	nop

00401480 <pio_enable_interrupt>:
  401480:	b480      	push	{r7}
  401482:	b083      	sub	sp, #12
  401484:	af00      	add	r7, sp, #0
  401486:	6078      	str	r0, [r7, #4]
  401488:	6039      	str	r1, [r7, #0]
  40148a:	687b      	ldr	r3, [r7, #4]
  40148c:	683a      	ldr	r2, [r7, #0]
  40148e:	641a      	str	r2, [r3, #64]	; 0x40
  401490:	bf00      	nop
  401492:	370c      	adds	r7, #12
  401494:	46bd      	mov	sp, r7
  401496:	bc80      	pop	{r7}
  401498:	4770      	bx	lr
  40149a:	bf00      	nop

0040149c <pio_disable_interrupt>:
  40149c:	b480      	push	{r7}
  40149e:	b083      	sub	sp, #12
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	6078      	str	r0, [r7, #4]
  4014a4:	6039      	str	r1, [r7, #0]
  4014a6:	687b      	ldr	r3, [r7, #4]
  4014a8:	683a      	ldr	r2, [r7, #0]
  4014aa:	645a      	str	r2, [r3, #68]	; 0x44
  4014ac:	bf00      	nop
  4014ae:	370c      	adds	r7, #12
  4014b0:	46bd      	mov	sp, r7
  4014b2:	bc80      	pop	{r7}
  4014b4:	4770      	bx	lr
  4014b6:	bf00      	nop

004014b8 <pio_get_interrupt_status>:
  4014b8:	b480      	push	{r7}
  4014ba:	b083      	sub	sp, #12
  4014bc:	af00      	add	r7, sp, #0
  4014be:	6078      	str	r0, [r7, #4]
  4014c0:	687b      	ldr	r3, [r7, #4]
  4014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  4014c4:	4618      	mov	r0, r3
  4014c6:	370c      	adds	r7, #12
  4014c8:	46bd      	mov	sp, r7
  4014ca:	bc80      	pop	{r7}
  4014cc:	4770      	bx	lr
  4014ce:	bf00      	nop

004014d0 <pio_get_interrupt_mask>:
  4014d0:	b480      	push	{r7}
  4014d2:	b083      	sub	sp, #12
  4014d4:	af00      	add	r7, sp, #0
  4014d6:	6078      	str	r0, [r7, #4]
  4014d8:	687b      	ldr	r3, [r7, #4]
  4014da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4014dc:	4618      	mov	r0, r3
  4014de:	370c      	adds	r7, #12
  4014e0:	46bd      	mov	sp, r7
  4014e2:	bc80      	pop	{r7}
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop

004014e8 <pio_configure_pin>:
  4014e8:	b590      	push	{r4, r7, lr}
  4014ea:	b087      	sub	sp, #28
  4014ec:	af02      	add	r7, sp, #8
  4014ee:	6078      	str	r0, [r7, #4]
  4014f0:	6039      	str	r1, [r7, #0]
  4014f2:	6878      	ldr	r0, [r7, #4]
  4014f4:	4b63      	ldr	r3, [pc, #396]	; (401684 <pio_configure_pin+0x19c>)
  4014f6:	4798      	blx	r3
  4014f8:	60f8      	str	r0, [r7, #12]
  4014fa:	683b      	ldr	r3, [r7, #0]
  4014fc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401504:	d067      	beq.n	4015d6 <pio_configure_pin+0xee>
  401506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40150a:	d809      	bhi.n	401520 <pio_configure_pin+0x38>
  40150c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401510:	d02b      	beq.n	40156a <pio_configure_pin+0x82>
  401512:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401516:	d043      	beq.n	4015a0 <pio_configure_pin+0xb8>
  401518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40151c:	d00a      	beq.n	401534 <pio_configure_pin+0x4c>
  40151e:	e0a9      	b.n	401674 <pio_configure_pin+0x18c>
  401520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401524:	d07e      	beq.n	401624 <pio_configure_pin+0x13c>
  401526:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40152a:	d07b      	beq.n	401624 <pio_configure_pin+0x13c>
  40152c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401530:	d06c      	beq.n	40160c <pio_configure_pin+0x124>
  401532:	e09f      	b.n	401674 <pio_configure_pin+0x18c>
  401534:	687b      	ldr	r3, [r7, #4]
  401536:	f003 031f 	and.w	r3, r3, #31
  40153a:	2201      	movs	r2, #1
  40153c:	fa02 f303 	lsl.w	r3, r2, r3
  401540:	461a      	mov	r2, r3
  401542:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401546:	68f8      	ldr	r0, [r7, #12]
  401548:	4b4f      	ldr	r3, [pc, #316]	; (401688 <pio_configure_pin+0x1a0>)
  40154a:	4798      	blx	r3
  40154c:	687b      	ldr	r3, [r7, #4]
  40154e:	f003 031f 	and.w	r3, r3, #31
  401552:	2201      	movs	r2, #1
  401554:	fa02 f303 	lsl.w	r3, r2, r3
  401558:	4619      	mov	r1, r3
  40155a:	683b      	ldr	r3, [r7, #0]
  40155c:	f003 0301 	and.w	r3, r3, #1
  401560:	461a      	mov	r2, r3
  401562:	68f8      	ldr	r0, [r7, #12]
  401564:	4b49      	ldr	r3, [pc, #292]	; (40168c <pio_configure_pin+0x1a4>)
  401566:	4798      	blx	r3
  401568:	e086      	b.n	401678 <pio_configure_pin+0x190>
  40156a:	687b      	ldr	r3, [r7, #4]
  40156c:	f003 031f 	and.w	r3, r3, #31
  401570:	2201      	movs	r2, #1
  401572:	fa02 f303 	lsl.w	r3, r2, r3
  401576:	461a      	mov	r2, r3
  401578:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40157c:	68f8      	ldr	r0, [r7, #12]
  40157e:	4b42      	ldr	r3, [pc, #264]	; (401688 <pio_configure_pin+0x1a0>)
  401580:	4798      	blx	r3
  401582:	687b      	ldr	r3, [r7, #4]
  401584:	f003 031f 	and.w	r3, r3, #31
  401588:	2201      	movs	r2, #1
  40158a:	fa02 f303 	lsl.w	r3, r2, r3
  40158e:	4619      	mov	r1, r3
  401590:	683b      	ldr	r3, [r7, #0]
  401592:	f003 0301 	and.w	r3, r3, #1
  401596:	461a      	mov	r2, r3
  401598:	68f8      	ldr	r0, [r7, #12]
  40159a:	4b3c      	ldr	r3, [pc, #240]	; (40168c <pio_configure_pin+0x1a4>)
  40159c:	4798      	blx	r3
  40159e:	e06b      	b.n	401678 <pio_configure_pin+0x190>
  4015a0:	687b      	ldr	r3, [r7, #4]
  4015a2:	f003 031f 	and.w	r3, r3, #31
  4015a6:	2201      	movs	r2, #1
  4015a8:	fa02 f303 	lsl.w	r3, r2, r3
  4015ac:	461a      	mov	r2, r3
  4015ae:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015b2:	68f8      	ldr	r0, [r7, #12]
  4015b4:	4b34      	ldr	r3, [pc, #208]	; (401688 <pio_configure_pin+0x1a0>)
  4015b6:	4798      	blx	r3
  4015b8:	687b      	ldr	r3, [r7, #4]
  4015ba:	f003 031f 	and.w	r3, r3, #31
  4015be:	2201      	movs	r2, #1
  4015c0:	fa02 f303 	lsl.w	r3, r2, r3
  4015c4:	4619      	mov	r1, r3
  4015c6:	683b      	ldr	r3, [r7, #0]
  4015c8:	f003 0301 	and.w	r3, r3, #1
  4015cc:	461a      	mov	r2, r3
  4015ce:	68f8      	ldr	r0, [r7, #12]
  4015d0:	4b2e      	ldr	r3, [pc, #184]	; (40168c <pio_configure_pin+0x1a4>)
  4015d2:	4798      	blx	r3
  4015d4:	e050      	b.n	401678 <pio_configure_pin+0x190>
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	f003 031f 	and.w	r3, r3, #31
  4015dc:	2201      	movs	r2, #1
  4015de:	fa02 f303 	lsl.w	r3, r2, r3
  4015e2:	461a      	mov	r2, r3
  4015e4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015e8:	68f8      	ldr	r0, [r7, #12]
  4015ea:	4b27      	ldr	r3, [pc, #156]	; (401688 <pio_configure_pin+0x1a0>)
  4015ec:	4798      	blx	r3
  4015ee:	687b      	ldr	r3, [r7, #4]
  4015f0:	f003 031f 	and.w	r3, r3, #31
  4015f4:	2201      	movs	r2, #1
  4015f6:	fa02 f303 	lsl.w	r3, r2, r3
  4015fa:	4619      	mov	r1, r3
  4015fc:	683b      	ldr	r3, [r7, #0]
  4015fe:	f003 0301 	and.w	r3, r3, #1
  401602:	461a      	mov	r2, r3
  401604:	68f8      	ldr	r0, [r7, #12]
  401606:	4b21      	ldr	r3, [pc, #132]	; (40168c <pio_configure_pin+0x1a4>)
  401608:	4798      	blx	r3
  40160a:	e035      	b.n	401678 <pio_configure_pin+0x190>
  40160c:	687b      	ldr	r3, [r7, #4]
  40160e:	f003 031f 	and.w	r3, r3, #31
  401612:	2201      	movs	r2, #1
  401614:	fa02 f303 	lsl.w	r3, r2, r3
  401618:	683a      	ldr	r2, [r7, #0]
  40161a:	4619      	mov	r1, r3
  40161c:	68f8      	ldr	r0, [r7, #12]
  40161e:	4b1c      	ldr	r3, [pc, #112]	; (401690 <pio_configure_pin+0x1a8>)
  401620:	4798      	blx	r3
  401622:	e029      	b.n	401678 <pio_configure_pin+0x190>
  401624:	687b      	ldr	r3, [r7, #4]
  401626:	f003 031f 	and.w	r3, r3, #31
  40162a:	2201      	movs	r2, #1
  40162c:	fa02 f303 	lsl.w	r3, r2, r3
  401630:	4619      	mov	r1, r3
  401632:	683b      	ldr	r3, [r7, #0]
  401634:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
  401638:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40163c:	bf0c      	ite	eq
  40163e:	2301      	moveq	r3, #1
  401640:	2300      	movne	r3, #0
  401642:	b2db      	uxtb	r3, r3
  401644:	461a      	mov	r2, r3
  401646:	683b      	ldr	r3, [r7, #0]
  401648:	f003 0304 	and.w	r3, r3, #4
  40164c:	2b00      	cmp	r3, #0
  40164e:	bf14      	ite	ne
  401650:	2301      	movne	r3, #1
  401652:	2300      	moveq	r3, #0
  401654:	b2db      	uxtb	r3, r3
  401656:	4618      	mov	r0, r3
  401658:	683b      	ldr	r3, [r7, #0]
  40165a:	f003 0301 	and.w	r3, r3, #1
  40165e:	2b00      	cmp	r3, #0
  401660:	bf14      	ite	ne
  401662:	2301      	movne	r3, #1
  401664:	2300      	moveq	r3, #0
  401666:	b2db      	uxtb	r3, r3
  401668:	9300      	str	r3, [sp, #0]
  40166a:	4603      	mov	r3, r0
  40166c:	68f8      	ldr	r0, [r7, #12]
  40166e:	4c09      	ldr	r4, [pc, #36]	; (401694 <pio_configure_pin+0x1ac>)
  401670:	47a0      	blx	r4
  401672:	e001      	b.n	401678 <pio_configure_pin+0x190>
  401674:	2300      	movs	r3, #0
  401676:	e000      	b.n	40167a <pio_configure_pin+0x192>
  401678:	2301      	movs	r3, #1
  40167a:	4618      	mov	r0, r3
  40167c:	3714      	adds	r7, #20
  40167e:	46bd      	mov	sp, r7
  401680:	bd90      	pop	{r4, r7, pc}
  401682:	bf00      	nop
  401684:	00401699 	.word	0x00401699
  401688:	00401221 	.word	0x00401221
  40168c:	004011bd 	.word	0x004011bd
  401690:	00401331 	.word	0x00401331
  401694:	004013b1 	.word	0x004013b1

00401698 <pio_get_pin_group>:
  401698:	b480      	push	{r7}
  40169a:	b085      	sub	sp, #20
  40169c:	af00      	add	r7, sp, #0
  40169e:	6078      	str	r0, [r7, #4]
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	095b      	lsrs	r3, r3, #5
  4016a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016ac:	025b      	lsls	r3, r3, #9
  4016ae:	60fb      	str	r3, [r7, #12]
  4016b0:	68fb      	ldr	r3, [r7, #12]
  4016b2:	4618      	mov	r0, r3
  4016b4:	3714      	adds	r7, #20
  4016b6:	46bd      	mov	sp, r7
  4016b8:	bc80      	pop	{r7}
  4016ba:	4770      	bx	lr

004016bc <pmc_switch_mck_to_pllack>:
  4016bc:	b480      	push	{r7}
  4016be:	b085      	sub	sp, #20
  4016c0:	af00      	add	r7, sp, #0
  4016c2:	6078      	str	r0, [r7, #4]
  4016c4:	491c      	ldr	r1, [pc, #112]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  4016c6:	4b1c      	ldr	r3, [pc, #112]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  4016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4016ce:	687b      	ldr	r3, [r7, #4]
  4016d0:	4313      	orrs	r3, r2
  4016d2:	630b      	str	r3, [r1, #48]	; 0x30
  4016d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4016d8:	60fb      	str	r3, [r7, #12]
  4016da:	e007      	b.n	4016ec <pmc_switch_mck_to_pllack+0x30>
  4016dc:	68fb      	ldr	r3, [r7, #12]
  4016de:	2b00      	cmp	r3, #0
  4016e0:	d101      	bne.n	4016e6 <pmc_switch_mck_to_pllack+0x2a>
  4016e2:	2301      	movs	r3, #1
  4016e4:	e023      	b.n	40172e <pmc_switch_mck_to_pllack+0x72>
  4016e6:	68fb      	ldr	r3, [r7, #12]
  4016e8:	3b01      	subs	r3, #1
  4016ea:	60fb      	str	r3, [r7, #12]
  4016ec:	4b12      	ldr	r3, [pc, #72]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  4016ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016f0:	f003 0308 	and.w	r3, r3, #8
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d0f1      	beq.n	4016dc <pmc_switch_mck_to_pllack+0x20>
  4016f8:	4a0f      	ldr	r2, [pc, #60]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  4016fa:	4b0f      	ldr	r3, [pc, #60]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  4016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016fe:	f023 0303 	bic.w	r3, r3, #3
  401702:	f043 0302 	orr.w	r3, r3, #2
  401706:	6313      	str	r3, [r2, #48]	; 0x30
  401708:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40170c:	60fb      	str	r3, [r7, #12]
  40170e:	e007      	b.n	401720 <pmc_switch_mck_to_pllack+0x64>
  401710:	68fb      	ldr	r3, [r7, #12]
  401712:	2b00      	cmp	r3, #0
  401714:	d101      	bne.n	40171a <pmc_switch_mck_to_pllack+0x5e>
  401716:	2301      	movs	r3, #1
  401718:	e009      	b.n	40172e <pmc_switch_mck_to_pllack+0x72>
  40171a:	68fb      	ldr	r3, [r7, #12]
  40171c:	3b01      	subs	r3, #1
  40171e:	60fb      	str	r3, [r7, #12]
  401720:	4b05      	ldr	r3, [pc, #20]	; (401738 <pmc_switch_mck_to_pllack+0x7c>)
  401722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401724:	f003 0308 	and.w	r3, r3, #8
  401728:	2b00      	cmp	r3, #0
  40172a:	d0f1      	beq.n	401710 <pmc_switch_mck_to_pllack+0x54>
  40172c:	2300      	movs	r3, #0
  40172e:	4618      	mov	r0, r3
  401730:	3714      	adds	r7, #20
  401732:	46bd      	mov	sp, r7
  401734:	bc80      	pop	{r7}
  401736:	4770      	bx	lr
  401738:	400e0400 	.word	0x400e0400

0040173c <pmc_switch_sclk_to_32kxtal>:
  40173c:	b480      	push	{r7}
  40173e:	b083      	sub	sp, #12
  401740:	af00      	add	r7, sp, #0
  401742:	6078      	str	r0, [r7, #4]
  401744:	687b      	ldr	r3, [r7, #4]
  401746:	2b01      	cmp	r3, #1
  401748:	d107      	bne.n	40175a <pmc_switch_sclk_to_32kxtal+0x1e>
  40174a:	4a08      	ldr	r2, [pc, #32]	; (40176c <pmc_switch_sclk_to_32kxtal+0x30>)
  40174c:	4b07      	ldr	r3, [pc, #28]	; (40176c <pmc_switch_sclk_to_32kxtal+0x30>)
  40174e:	689b      	ldr	r3, [r3, #8]
  401750:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401758:	6093      	str	r3, [r2, #8]
  40175a:	4b04      	ldr	r3, [pc, #16]	; (40176c <pmc_switch_sclk_to_32kxtal+0x30>)
  40175c:	4a04      	ldr	r2, [pc, #16]	; (401770 <pmc_switch_sclk_to_32kxtal+0x34>)
  40175e:	601a      	str	r2, [r3, #0]
  401760:	bf00      	nop
  401762:	370c      	adds	r7, #12
  401764:	46bd      	mov	sp, r7
  401766:	bc80      	pop	{r7}
  401768:	4770      	bx	lr
  40176a:	bf00      	nop
  40176c:	400e1410 	.word	0x400e1410
  401770:	a5000008 	.word	0xa5000008

00401774 <pmc_osc_is_ready_32kxtal>:
  401774:	b480      	push	{r7}
  401776:	af00      	add	r7, sp, #0
  401778:	4b09      	ldr	r3, [pc, #36]	; (4017a0 <pmc_osc_is_ready_32kxtal+0x2c>)
  40177a:	695b      	ldr	r3, [r3, #20]
  40177c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401780:	2b00      	cmp	r3, #0
  401782:	d007      	beq.n	401794 <pmc_osc_is_ready_32kxtal+0x20>
  401784:	4b07      	ldr	r3, [pc, #28]	; (4017a4 <pmc_osc_is_ready_32kxtal+0x30>)
  401786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401788:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40178c:	2b00      	cmp	r3, #0
  40178e:	d001      	beq.n	401794 <pmc_osc_is_ready_32kxtal+0x20>
  401790:	2301      	movs	r3, #1
  401792:	e000      	b.n	401796 <pmc_osc_is_ready_32kxtal+0x22>
  401794:	2300      	movs	r3, #0
  401796:	4618      	mov	r0, r3
  401798:	46bd      	mov	sp, r7
  40179a:	bc80      	pop	{r7}
  40179c:	4770      	bx	lr
  40179e:	bf00      	nop
  4017a0:	400e1410 	.word	0x400e1410
  4017a4:	400e0400 	.word	0x400e0400

004017a8 <pmc_switch_mainck_to_fastrc>:
  4017a8:	b480      	push	{r7}
  4017aa:	b083      	sub	sp, #12
  4017ac:	af00      	add	r7, sp, #0
  4017ae:	6078      	str	r0, [r7, #4]
  4017b0:	4a18      	ldr	r2, [pc, #96]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017b2:	4b18      	ldr	r3, [pc, #96]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017b4:	6a1b      	ldr	r3, [r3, #32]
  4017b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017ba:	f043 0308 	orr.w	r3, r3, #8
  4017be:	6213      	str	r3, [r2, #32]
  4017c0:	bf00      	nop
  4017c2:	4b14      	ldr	r3, [pc, #80]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4017ca:	2b00      	cmp	r3, #0
  4017cc:	d0f9      	beq.n	4017c2 <pmc_switch_mainck_to_fastrc+0x1a>
  4017ce:	4911      	ldr	r1, [pc, #68]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017d0:	4b10      	ldr	r3, [pc, #64]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017d2:	6a1b      	ldr	r3, [r3, #32]
  4017d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4017d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4017dc:	687a      	ldr	r2, [r7, #4]
  4017de:	4313      	orrs	r3, r2
  4017e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017e4:	620b      	str	r3, [r1, #32]
  4017e6:	bf00      	nop
  4017e8:	4b0a      	ldr	r3, [pc, #40]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d0f9      	beq.n	4017e8 <pmc_switch_mainck_to_fastrc+0x40>
  4017f4:	4a07      	ldr	r2, [pc, #28]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017f6:	4b07      	ldr	r3, [pc, #28]	; (401814 <pmc_switch_mainck_to_fastrc+0x6c>)
  4017f8:	6a1b      	ldr	r3, [r3, #32]
  4017fa:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401802:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401806:	6213      	str	r3, [r2, #32]
  401808:	bf00      	nop
  40180a:	370c      	adds	r7, #12
  40180c:	46bd      	mov	sp, r7
  40180e:	bc80      	pop	{r7}
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0400 	.word	0x400e0400

00401818 <pmc_switch_mainck_to_xtal>:
  401818:	b480      	push	{r7}
  40181a:	b083      	sub	sp, #12
  40181c:	af00      	add	r7, sp, #0
  40181e:	6078      	str	r0, [r7, #4]
  401820:	6039      	str	r1, [r7, #0]
  401822:	687b      	ldr	r3, [r7, #4]
  401824:	2b00      	cmp	r3, #0
  401826:	d008      	beq.n	40183a <pmc_switch_mainck_to_xtal+0x22>
  401828:	4916      	ldr	r1, [pc, #88]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40182a:	4b16      	ldr	r3, [pc, #88]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40182c:	6a1b      	ldr	r3, [r3, #32]
  40182e:	4a16      	ldr	r2, [pc, #88]	; (401888 <pmc_switch_mainck_to_xtal+0x70>)
  401830:	401a      	ands	r2, r3
  401832:	4b16      	ldr	r3, [pc, #88]	; (40188c <pmc_switch_mainck_to_xtal+0x74>)
  401834:	4313      	orrs	r3, r2
  401836:	620b      	str	r3, [r1, #32]
  401838:	e01e      	b.n	401878 <pmc_switch_mainck_to_xtal+0x60>
  40183a:	4912      	ldr	r1, [pc, #72]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40183c:	4b11      	ldr	r3, [pc, #68]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40183e:	6a1b      	ldr	r3, [r3, #32]
  401840:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401844:	f023 0303 	bic.w	r3, r3, #3
  401848:	683a      	ldr	r2, [r7, #0]
  40184a:	0212      	lsls	r2, r2, #8
  40184c:	b292      	uxth	r2, r2
  40184e:	4313      	orrs	r3, r2
  401850:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401854:	f043 0301 	orr.w	r3, r3, #1
  401858:	620b      	str	r3, [r1, #32]
  40185a:	bf00      	nop
  40185c:	4b09      	ldr	r3, [pc, #36]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40185e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401860:	f003 0301 	and.w	r3, r3, #1
  401864:	2b00      	cmp	r3, #0
  401866:	d0f9      	beq.n	40185c <pmc_switch_mainck_to_xtal+0x44>
  401868:	4a06      	ldr	r2, [pc, #24]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40186a:	4b06      	ldr	r3, [pc, #24]	; (401884 <pmc_switch_mainck_to_xtal+0x6c>)
  40186c:	6a1b      	ldr	r3, [r3, #32]
  40186e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401876:	6213      	str	r3, [r2, #32]
  401878:	bf00      	nop
  40187a:	370c      	adds	r7, #12
  40187c:	46bd      	mov	sp, r7
  40187e:	bc80      	pop	{r7}
  401880:	4770      	bx	lr
  401882:	bf00      	nop
  401884:	400e0400 	.word	0x400e0400
  401888:	fec8fffc 	.word	0xfec8fffc
  40188c:	01370002 	.word	0x01370002

00401890 <pmc_osc_is_ready_mainck>:
  401890:	b480      	push	{r7}
  401892:	af00      	add	r7, sp, #0
  401894:	4b03      	ldr	r3, [pc, #12]	; (4018a4 <pmc_osc_is_ready_mainck+0x14>)
  401896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40189c:	4618      	mov	r0, r3
  40189e:	46bd      	mov	sp, r7
  4018a0:	bc80      	pop	{r7}
  4018a2:	4770      	bx	lr
  4018a4:	400e0400 	.word	0x400e0400

004018a8 <pmc_disable_pllack>:
  4018a8:	b480      	push	{r7}
  4018aa:	af00      	add	r7, sp, #0
  4018ac:	4b03      	ldr	r3, [pc, #12]	; (4018bc <pmc_disable_pllack+0x14>)
  4018ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018b2:	629a      	str	r2, [r3, #40]	; 0x28
  4018b4:	bf00      	nop
  4018b6:	46bd      	mov	sp, r7
  4018b8:	bc80      	pop	{r7}
  4018ba:	4770      	bx	lr
  4018bc:	400e0400 	.word	0x400e0400

004018c0 <pmc_is_locked_pllack>:
  4018c0:	b480      	push	{r7}
  4018c2:	af00      	add	r7, sp, #0
  4018c4:	4b03      	ldr	r3, [pc, #12]	; (4018d4 <pmc_is_locked_pllack+0x14>)
  4018c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018c8:	f003 0302 	and.w	r3, r3, #2
  4018cc:	4618      	mov	r0, r3
  4018ce:	46bd      	mov	sp, r7
  4018d0:	bc80      	pop	{r7}
  4018d2:	4770      	bx	lr
  4018d4:	400e0400 	.word	0x400e0400

004018d8 <pmc_disable_pllbck>:
  4018d8:	b480      	push	{r7}
  4018da:	af00      	add	r7, sp, #0
  4018dc:	4b03      	ldr	r3, [pc, #12]	; (4018ec <pmc_disable_pllbck+0x14>)
  4018de:	2200      	movs	r2, #0
  4018e0:	62da      	str	r2, [r3, #44]	; 0x2c
  4018e2:	bf00      	nop
  4018e4:	46bd      	mov	sp, r7
  4018e6:	bc80      	pop	{r7}
  4018e8:	4770      	bx	lr
  4018ea:	bf00      	nop
  4018ec:	400e0400 	.word	0x400e0400

004018f0 <pmc_is_locked_pllbck>:
  4018f0:	b480      	push	{r7}
  4018f2:	af00      	add	r7, sp, #0
  4018f4:	4b03      	ldr	r3, [pc, #12]	; (401904 <pmc_is_locked_pllbck+0x14>)
  4018f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018f8:	f003 0304 	and.w	r3, r3, #4
  4018fc:	4618      	mov	r0, r3
  4018fe:	46bd      	mov	sp, r7
  401900:	bc80      	pop	{r7}
  401902:	4770      	bx	lr
  401904:	400e0400 	.word	0x400e0400

00401908 <pmc_enable_periph_clk>:
  401908:	b480      	push	{r7}
  40190a:	b083      	sub	sp, #12
  40190c:	af00      	add	r7, sp, #0
  40190e:	6078      	str	r0, [r7, #4]
  401910:	687b      	ldr	r3, [r7, #4]
  401912:	2b22      	cmp	r3, #34	; 0x22
  401914:	d901      	bls.n	40191a <pmc_enable_periph_clk+0x12>
  401916:	2301      	movs	r3, #1
  401918:	e02f      	b.n	40197a <pmc_enable_periph_clk+0x72>
  40191a:	687b      	ldr	r3, [r7, #4]
  40191c:	2b1f      	cmp	r3, #31
  40191e:	d813      	bhi.n	401948 <pmc_enable_periph_clk+0x40>
  401920:	4b18      	ldr	r3, [pc, #96]	; (401984 <pmc_enable_periph_clk+0x7c>)
  401922:	699a      	ldr	r2, [r3, #24]
  401924:	2101      	movs	r1, #1
  401926:	687b      	ldr	r3, [r7, #4]
  401928:	fa01 f303 	lsl.w	r3, r1, r3
  40192c:	401a      	ands	r2, r3
  40192e:	2101      	movs	r1, #1
  401930:	687b      	ldr	r3, [r7, #4]
  401932:	fa01 f303 	lsl.w	r3, r1, r3
  401936:	429a      	cmp	r2, r3
  401938:	d01e      	beq.n	401978 <pmc_enable_periph_clk+0x70>
  40193a:	4a12      	ldr	r2, [pc, #72]	; (401984 <pmc_enable_periph_clk+0x7c>)
  40193c:	2101      	movs	r1, #1
  40193e:	687b      	ldr	r3, [r7, #4]
  401940:	fa01 f303 	lsl.w	r3, r1, r3
  401944:	6113      	str	r3, [r2, #16]
  401946:	e017      	b.n	401978 <pmc_enable_periph_clk+0x70>
  401948:	687b      	ldr	r3, [r7, #4]
  40194a:	3b20      	subs	r3, #32
  40194c:	607b      	str	r3, [r7, #4]
  40194e:	4b0d      	ldr	r3, [pc, #52]	; (401984 <pmc_enable_periph_clk+0x7c>)
  401950:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401954:	2101      	movs	r1, #1
  401956:	687b      	ldr	r3, [r7, #4]
  401958:	fa01 f303 	lsl.w	r3, r1, r3
  40195c:	401a      	ands	r2, r3
  40195e:	2101      	movs	r1, #1
  401960:	687b      	ldr	r3, [r7, #4]
  401962:	fa01 f303 	lsl.w	r3, r1, r3
  401966:	429a      	cmp	r2, r3
  401968:	d006      	beq.n	401978 <pmc_enable_periph_clk+0x70>
  40196a:	4a06      	ldr	r2, [pc, #24]	; (401984 <pmc_enable_periph_clk+0x7c>)
  40196c:	2101      	movs	r1, #1
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	fa01 f303 	lsl.w	r3, r1, r3
  401974:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  401978:	2300      	movs	r3, #0
  40197a:	4618      	mov	r0, r3
  40197c:	370c      	adds	r7, #12
  40197e:	46bd      	mov	sp, r7
  401980:	bc80      	pop	{r7}
  401982:	4770      	bx	lr
  401984:	400e0400 	.word	0x400e0400

00401988 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401988:	b580      	push	{r7, lr}
  40198a:	b082      	sub	sp, #8
  40198c:	af00      	add	r7, sp, #0
  40198e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401990:	6878      	ldr	r0, [r7, #4]
  401992:	4b03      	ldr	r3, [pc, #12]	; (4019a0 <sysclk_enable_peripheral_clock+0x18>)
  401994:	4798      	blx	r3
}
  401996:	bf00      	nop
  401998:	3708      	adds	r7, #8
  40199a:	46bd      	mov	sp, r7
  40199c:	bd80      	pop	{r7, pc}
  40199e:	bf00      	nop
  4019a0:	00401909 	.word	0x00401909

004019a4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4019a4:	b580      	push	{r7, lr}
  4019a6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4019a8:	200b      	movs	r0, #11
  4019aa:	4b03      	ldr	r3, [pc, #12]	; (4019b8 <ioport_init+0x14>)
  4019ac:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4019ae:	200c      	movs	r0, #12
  4019b0:	4b01      	ldr	r3, [pc, #4]	; (4019b8 <ioport_init+0x14>)
  4019b2:	4798      	blx	r3
	arch_ioport_init();
}
  4019b4:	bf00      	nop
  4019b6:	bd80      	pop	{r7, pc}
  4019b8:	00401989 	.word	0x00401989

004019bc <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4019bc:	b480      	push	{r7}
  4019be:	b08d      	sub	sp, #52	; 0x34
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
  4019c4:	6039      	str	r1, [r7, #0]
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4019ca:	683b      	ldr	r3, [r7, #0]
  4019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  4019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019d0:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019d4:	095a      	lsrs	r2, r3, #5
  4019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019d8:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4019da:	6a3b      	ldr	r3, [r7, #32]
  4019dc:	f003 031f 	and.w	r3, r3, #31
  4019e0:	2101      	movs	r1, #1
  4019e2:	fa01 f303 	lsl.w	r3, r1, r3
  4019e6:	61fa      	str	r2, [r7, #28]
  4019e8:	61bb      	str	r3, [r7, #24]
  4019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4019ec:	617b      	str	r3, [r7, #20]
  4019ee:	69fb      	ldr	r3, [r7, #28]
  4019f0:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019f2:	693b      	ldr	r3, [r7, #16]
  4019f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4019f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4019fc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4019fe:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  401a00:	697b      	ldr	r3, [r7, #20]
  401a02:	f003 0308 	and.w	r3, r3, #8
  401a06:	2b00      	cmp	r3, #0
  401a08:	d003      	beq.n	401a12 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401a0a:	68fb      	ldr	r3, [r7, #12]
  401a0c:	69ba      	ldr	r2, [r7, #24]
  401a0e:	665a      	str	r2, [r3, #100]	; 0x64
  401a10:	e002      	b.n	401a18 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	69ba      	ldr	r2, [r7, #24]
  401a16:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  401a18:	697b      	ldr	r3, [r7, #20]
  401a1a:	f003 0310 	and.w	r3, r3, #16
  401a1e:	2b00      	cmp	r3, #0
  401a20:	d004      	beq.n	401a2c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	69ba      	ldr	r2, [r7, #24]
  401a26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401a2a:	e003      	b.n	401a34 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  401a2c:	68fb      	ldr	r3, [r7, #12]
  401a2e:	69ba      	ldr	r2, [r7, #24]
  401a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401a34:	697b      	ldr	r3, [r7, #20]
  401a36:	f003 0320 	and.w	r3, r3, #32
  401a3a:	2b00      	cmp	r3, #0
  401a3c:	d003      	beq.n	401a46 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401a3e:	68fb      	ldr	r3, [r7, #12]
  401a40:	69ba      	ldr	r2, [r7, #24]
  401a42:	651a      	str	r2, [r3, #80]	; 0x50
  401a44:	e002      	b.n	401a4c <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  401a46:	68fb      	ldr	r3, [r7, #12]
  401a48:	69ba      	ldr	r2, [r7, #24]
  401a4a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401a4c:	697b      	ldr	r3, [r7, #20]
  401a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401a52:	2b00      	cmp	r3, #0
  401a54:	d003      	beq.n	401a5e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	69ba      	ldr	r2, [r7, #24]
  401a5a:	621a      	str	r2, [r3, #32]
  401a5c:	e002      	b.n	401a64 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  401a5e:	68fb      	ldr	r3, [r7, #12]
  401a60:	69ba      	ldr	r2, [r7, #24]
  401a62:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  401a64:	697b      	ldr	r3, [r7, #20]
  401a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d004      	beq.n	401a78 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  401a6e:	68fb      	ldr	r3, [r7, #12]
  401a70:	69ba      	ldr	r2, [r7, #24]
  401a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401a76:	e003      	b.n	401a80 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401a78:	68fb      	ldr	r3, [r7, #12]
  401a7a:	69ba      	ldr	r2, [r7, #24]
  401a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a80:	697b      	ldr	r3, [r7, #20]
  401a82:	f003 0301 	and.w	r3, r3, #1
  401a86:	2b00      	cmp	r3, #0
  401a88:	d006      	beq.n	401a98 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401a8a:	68fb      	ldr	r3, [r7, #12]
  401a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a8e:	69bb      	ldr	r3, [r7, #24]
  401a90:	431a      	orrs	r2, r3
  401a92:	68fb      	ldr	r3, [r7, #12]
  401a94:	671a      	str	r2, [r3, #112]	; 0x70
  401a96:	e006      	b.n	401aa6 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401a98:	68fb      	ldr	r3, [r7, #12]
  401a9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a9c:	69bb      	ldr	r3, [r7, #24]
  401a9e:	43db      	mvns	r3, r3
  401aa0:	401a      	ands	r2, r3
  401aa2:	68fb      	ldr	r3, [r7, #12]
  401aa4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  401aa6:	697b      	ldr	r3, [r7, #20]
  401aa8:	f003 0302 	and.w	r3, r3, #2
  401aac:	2b00      	cmp	r3, #0
  401aae:	d006      	beq.n	401abe <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401ab0:	68fb      	ldr	r3, [r7, #12]
  401ab2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ab4:	69bb      	ldr	r3, [r7, #24]
  401ab6:	431a      	orrs	r2, r3
  401ab8:	68fb      	ldr	r3, [r7, #12]
  401aba:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  401abc:	e006      	b.n	401acc <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401abe:	68fb      	ldr	r3, [r7, #12]
  401ac0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ac2:	69bb      	ldr	r3, [r7, #24]
  401ac4:	43db      	mvns	r3, r3
  401ac6:	401a      	ands	r2, r3
  401ac8:	68fb      	ldr	r3, [r7, #12]
  401aca:	675a      	str	r2, [r3, #116]	; 0x74
  401acc:	bf00      	nop
  401ace:	3734      	adds	r7, #52	; 0x34
  401ad0:	46bd      	mov	sp, r7
  401ad2:	bc80      	pop	{r7}
  401ad4:	4770      	bx	lr
  401ad6:	bf00      	nop

00401ad8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401ad8:	b480      	push	{r7}
  401ada:	b08d      	sub	sp, #52	; 0x34
  401adc:	af00      	add	r7, sp, #0
  401ade:	6078      	str	r0, [r7, #4]
  401ae0:	460b      	mov	r3, r1
  401ae2:	70fb      	strb	r3, [r7, #3]
  401ae4:	687b      	ldr	r3, [r7, #4]
  401ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  401ae8:	78fb      	ldrb	r3, [r7, #3]
  401aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401af0:	627b      	str	r3, [r7, #36]	; 0x24
  401af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401af4:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401af6:	6a3b      	ldr	r3, [r7, #32]
  401af8:	095b      	lsrs	r3, r3, #5
  401afa:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401afc:	69fb      	ldr	r3, [r7, #28]
  401afe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b02:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b06:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401b08:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b0e:	2b01      	cmp	r3, #1
  401b10:	d109      	bne.n	401b26 <ioport_set_pin_dir+0x4e>
  401b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b14:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401b16:	697b      	ldr	r3, [r7, #20]
  401b18:	f003 031f 	and.w	r3, r3, #31
  401b1c:	2201      	movs	r2, #1
  401b1e:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401b20:	69bb      	ldr	r3, [r7, #24]
  401b22:	611a      	str	r2, [r3, #16]
  401b24:	e00c      	b.n	401b40 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b2a:	2b00      	cmp	r3, #0
  401b2c:	d108      	bne.n	401b40 <ioport_set_pin_dir+0x68>
  401b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b30:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401b32:	693b      	ldr	r3, [r7, #16]
  401b34:	f003 031f 	and.w	r3, r3, #31
  401b38:	2201      	movs	r2, #1
  401b3a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401b3c:	69bb      	ldr	r3, [r7, #24]
  401b3e:	615a      	str	r2, [r3, #20]
  401b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b42:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401b44:	68fb      	ldr	r3, [r7, #12]
  401b46:	f003 031f 	and.w	r3, r3, #31
  401b4a:	2201      	movs	r2, #1
  401b4c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401b4e:	69bb      	ldr	r3, [r7, #24]
  401b50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401b54:	bf00      	nop
  401b56:	3734      	adds	r7, #52	; 0x34
  401b58:	46bd      	mov	sp, r7
  401b5a:	bc80      	pop	{r7}
  401b5c:	4770      	bx	lr
  401b5e:	bf00      	nop

00401b60 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401b60:	b480      	push	{r7}
  401b62:	b08b      	sub	sp, #44	; 0x2c
  401b64:	af00      	add	r7, sp, #0
  401b66:	6078      	str	r0, [r7, #4]
  401b68:	460b      	mov	r3, r1
  401b6a:	70fb      	strb	r3, [r7, #3]
  401b6c:	687b      	ldr	r3, [r7, #4]
  401b6e:	627b      	str	r3, [r7, #36]	; 0x24
  401b70:	78fb      	ldrb	r3, [r7, #3]
  401b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b78:	61fb      	str	r3, [r7, #28]
  401b7a:	69fb      	ldr	r3, [r7, #28]
  401b7c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  401b7e:	69bb      	ldr	r3, [r7, #24]
  401b80:	095b      	lsrs	r3, r3, #5
  401b82:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b84:	697b      	ldr	r3, [r7, #20]
  401b86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b8a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b8e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401b90:	613b      	str	r3, [r7, #16]

	if (level) {
  401b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b96:	2b00      	cmp	r3, #0
  401b98:	d009      	beq.n	401bae <ioport_set_pin_level+0x4e>
  401b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b9c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401b9e:	68fb      	ldr	r3, [r7, #12]
  401ba0:	f003 031f 	and.w	r3, r3, #31
  401ba4:	2201      	movs	r2, #1
  401ba6:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ba8:	693b      	ldr	r3, [r7, #16]
  401baa:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401bac:	e008      	b.n	401bc0 <ioport_set_pin_level+0x60>
  401bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401bb0:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  401bb2:	68bb      	ldr	r3, [r7, #8]
  401bb4:	f003 031f 	and.w	r3, r3, #31
  401bb8:	2201      	movs	r2, #1
  401bba:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401bbc:	693b      	ldr	r3, [r7, #16]
  401bbe:	635a      	str	r2, [r3, #52]	; 0x34
  401bc0:	bf00      	nop
  401bc2:	372c      	adds	r7, #44	; 0x2c
  401bc4:	46bd      	mov	sp, r7
  401bc6:	bc80      	pop	{r7}
  401bc8:	4770      	bx	lr
  401bca:	bf00      	nop

00401bcc <board_init>:
#include <board.h>
#include <conf_board.h>
#include "camera.h"

void board_init(void)
{
  401bcc:	b580      	push	{r7, lr}
  401bce:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	ioport_init();
  401bd0:	4b3c      	ldr	r3, [pc, #240]	; (401cc4 <board_init+0xf8>)
  401bd2:	4798      	blx	r3
		
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  401bd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bd8:	2013      	movs	r0, #19
  401bda:	4b3b      	ldr	r3, [pc, #236]	; (401cc8 <board_init+0xfc>)
  401bdc:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401bde:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401be2:	2013      	movs	r0, #19
  401be4:	4b38      	ldr	r3, [pc, #224]	; (401cc8 <board_init+0xfc>)
  401be6:	4798      	blx	r3
	
	/* Set output direction on the given LED IOPORTs */
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  401be8:	2101      	movs	r1, #1
  401bea:	2013      	movs	r0, #19
  401bec:	4b37      	ldr	r3, [pc, #220]	; (401ccc <board_init+0x100>)
  401bee:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  401bf0:	2100      	movs	r1, #0
  401bf2:	2013      	movs	r0, #19
  401bf4:	4b36      	ldr	r3, [pc, #216]	; (401cd0 <board_init+0x104>)
  401bf6:	4798      	blx	r3
	
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  401bf8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bfc:	2014      	movs	r0, #20
  401bfe:	4b32      	ldr	r3, [pc, #200]	; (401cc8 <board_init+0xfc>)
  401c00:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  401c02:	2101      	movs	r1, #1
  401c04:	2014      	movs	r0, #20
  401c06:	4b31      	ldr	r3, [pc, #196]	; (401ccc <board_init+0x100>)
  401c08:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  401c0a:	2100      	movs	r1, #0
  401c0c:	2014      	movs	r0, #20
  401c0e:	4b30      	ldr	r3, [pc, #192]	; (401cd0 <board_init+0x104>)
  401c10:	4798      	blx	r3

	// configure network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  401c12:	4930      	ldr	r1, [pc, #192]	; (401cd4 <board_init+0x108>)
  401c14:	2021      	movs	r0, #33	; 0x21
  401c16:	4b2c      	ldr	r3, [pc, #176]	; (401cc8 <board_init+0xfc>)
  401c18:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  401c1a:	2100      	movs	r1, #0
  401c1c:	2021      	movs	r0, #33	; 0x21
  401c1e:	4b2b      	ldr	r3, [pc, #172]	; (401ccc <board_init+0x100>)
  401c20:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  401c22:	2108      	movs	r1, #8
  401c24:	2021      	movs	r0, #33	; 0x21
  401c26:	4b2c      	ldr	r3, [pc, #176]	; (401cd8 <board_init+0x10c>)
  401c28:	4798      	blx	r3

	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401c2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401c2e:	2011      	movs	r0, #17
  401c30:	4b25      	ldr	r3, [pc, #148]	; (401cc8 <board_init+0xfc>)
  401c32:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401c34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c38:	2003      	movs	r0, #3
  401c3a:	4b23      	ldr	r3, [pc, #140]	; (401cc8 <board_init+0xfc>)
  401c3c:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401c3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c42:	2004      	movs	r0, #4
  401c44:	4b20      	ldr	r3, [pc, #128]	; (401cc8 <board_init+0xfc>)
  401c46:	4798      	blx	r3
	///* Configure UART pins */
	//#ifdef CONF_BOARD_UART_CONSOLE
	//gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
	//#endif
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401c48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c4c:	2005      	movs	r0, #5
  401c4e:	4b1e      	ldr	r3, [pc, #120]	; (401cc8 <board_init+0xfc>)
  401c50:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401c52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c56:	2006      	movs	r0, #6
  401c58:	4b1b      	ldr	r3, [pc, #108]	; (401cc8 <board_init+0xfc>)
  401c5a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401c5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c60:	2008      	movs	r0, #8
  401c62:	4b19      	ldr	r3, [pc, #100]	; (401cc8 <board_init+0xfc>)
  401c64:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
  401c66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c6a:	2007      	movs	r0, #7
  401c6c:	4b16      	ldr	r3, [pc, #88]	; (401cc8 <board_init+0xfc>)
  401c6e:	4798      	blx	r3
	
	//gpio_configure_pin(OV_SW_OVT_GPIO, OV_SW_OVT_FLAGS);
	//gpio_configure_pin(OV_RST_GPIO, OV_RST_FLAGS);
	//gpio_configure_pin(OV_FSIN_GPIO, OV_FSIN_FLAGS);
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401c70:	2171      	movs	r1, #113	; 0x71
  401c72:	2010      	movs	r0, #16
  401c74:	4b14      	ldr	r3, [pc, #80]	; (401cc8 <board_init+0xfc>)
  401c76:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401c78:	2171      	movs	r1, #113	; 0x71
  401c7a:	200f      	movs	r0, #15
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <board_init+0xfc>)
  401c7e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401c80:	4916      	ldr	r1, [pc, #88]	; (401cdc <board_init+0x110>)
  401c82:	2018      	movs	r0, #24
  401c84:	4b10      	ldr	r3, [pc, #64]	; (401cc8 <board_init+0xfc>)
  401c86:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401c88:	4914      	ldr	r1, [pc, #80]	; (401cdc <board_init+0x110>)
  401c8a:	2019      	movs	r0, #25
  401c8c:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <board_init+0xfc>)
  401c8e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401c90:	4912      	ldr	r1, [pc, #72]	; (401cdc <board_init+0x110>)
  401c92:	201a      	movs	r0, #26
  401c94:	4b0c      	ldr	r3, [pc, #48]	; (401cc8 <board_init+0xfc>)
  401c96:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401c98:	4910      	ldr	r1, [pc, #64]	; (401cdc <board_init+0x110>)
  401c9a:	201b      	movs	r0, #27
  401c9c:	4b0a      	ldr	r3, [pc, #40]	; (401cc8 <board_init+0xfc>)
  401c9e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401ca0:	490e      	ldr	r1, [pc, #56]	; (401cdc <board_init+0x110>)
  401ca2:	201c      	movs	r0, #28
  401ca4:	4b08      	ldr	r3, [pc, #32]	; (401cc8 <board_init+0xfc>)
  401ca6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401ca8:	490c      	ldr	r1, [pc, #48]	; (401cdc <board_init+0x110>)
  401caa:	201d      	movs	r0, #29
  401cac:	4b06      	ldr	r3, [pc, #24]	; (401cc8 <board_init+0xfc>)
  401cae:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  401cb0:	490a      	ldr	r1, [pc, #40]	; (401cdc <board_init+0x110>)
  401cb2:	201e      	movs	r0, #30
  401cb4:	4b04      	ldr	r3, [pc, #16]	; (401cc8 <board_init+0xfc>)
  401cb6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  401cb8:	4908      	ldr	r1, [pc, #32]	; (401cdc <board_init+0x110>)
  401cba:	201f      	movs	r0, #31
  401cbc:	4b02      	ldr	r3, [pc, #8]	; (401cc8 <board_init+0xfc>)
  401cbe:	4798      	blx	r3
}
  401cc0:	bf00      	nop
  401cc2:	bd80      	pop	{r7, pc}
  401cc4:	004019a5 	.word	0x004019a5
  401cc8:	004014e9 	.word	0x004014e9
  401ccc:	00401ad9 	.word	0x00401ad9
  401cd0:	00401b61 	.word	0x00401b61
  401cd4:	28000079 	.word	0x28000079
  401cd8:	004019bd 	.word	0x004019bd
  401cdc:	28000001 	.word	0x28000001

00401ce0 <Reset_Handler>:
  401ce0:	b580      	push	{r7, lr}
  401ce2:	b084      	sub	sp, #16
  401ce4:	af00      	add	r7, sp, #0
  401ce6:	4b27      	ldr	r3, [pc, #156]	; (401d84 <Reset_Handler+0xa4>)
  401ce8:	60fb      	str	r3, [r7, #12]
  401cea:	4b27      	ldr	r3, [pc, #156]	; (401d88 <Reset_Handler+0xa8>)
  401cec:	60bb      	str	r3, [r7, #8]
  401cee:	68fa      	ldr	r2, [r7, #12]
  401cf0:	68bb      	ldr	r3, [r7, #8]
  401cf2:	429a      	cmp	r2, r3
  401cf4:	d90d      	bls.n	401d12 <Reset_Handler+0x32>
  401cf6:	e007      	b.n	401d08 <Reset_Handler+0x28>
  401cf8:	68bb      	ldr	r3, [r7, #8]
  401cfa:	1d1a      	adds	r2, r3, #4
  401cfc:	60ba      	str	r2, [r7, #8]
  401cfe:	68fa      	ldr	r2, [r7, #12]
  401d00:	1d11      	adds	r1, r2, #4
  401d02:	60f9      	str	r1, [r7, #12]
  401d04:	6812      	ldr	r2, [r2, #0]
  401d06:	601a      	str	r2, [r3, #0]
  401d08:	68bb      	ldr	r3, [r7, #8]
  401d0a:	4a20      	ldr	r2, [pc, #128]	; (401d8c <Reset_Handler+0xac>)
  401d0c:	4293      	cmp	r3, r2
  401d0e:	d3f3      	bcc.n	401cf8 <Reset_Handler+0x18>
  401d10:	e020      	b.n	401d54 <Reset_Handler+0x74>
  401d12:	68fa      	ldr	r2, [r7, #12]
  401d14:	68bb      	ldr	r3, [r7, #8]
  401d16:	429a      	cmp	r2, r3
  401d18:	d21c      	bcs.n	401d54 <Reset_Handler+0x74>
  401d1a:	4a1c      	ldr	r2, [pc, #112]	; (401d8c <Reset_Handler+0xac>)
  401d1c:	4b1a      	ldr	r3, [pc, #104]	; (401d88 <Reset_Handler+0xa8>)
  401d1e:	1ad3      	subs	r3, r2, r3
  401d20:	607b      	str	r3, [r7, #4]
  401d22:	68fa      	ldr	r2, [r7, #12]
  401d24:	687b      	ldr	r3, [r7, #4]
  401d26:	4413      	add	r3, r2
  401d28:	3b04      	subs	r3, #4
  401d2a:	60fb      	str	r3, [r7, #12]
  401d2c:	68ba      	ldr	r2, [r7, #8]
  401d2e:	687b      	ldr	r3, [r7, #4]
  401d30:	4413      	add	r3, r2
  401d32:	3b04      	subs	r3, #4
  401d34:	60bb      	str	r3, [r7, #8]
  401d36:	e00a      	b.n	401d4e <Reset_Handler+0x6e>
  401d38:	68bb      	ldr	r3, [r7, #8]
  401d3a:	1f1a      	subs	r2, r3, #4
  401d3c:	60ba      	str	r2, [r7, #8]
  401d3e:	68fa      	ldr	r2, [r7, #12]
  401d40:	1f11      	subs	r1, r2, #4
  401d42:	60f9      	str	r1, [r7, #12]
  401d44:	6812      	ldr	r2, [r2, #0]
  401d46:	601a      	str	r2, [r3, #0]
  401d48:	687b      	ldr	r3, [r7, #4]
  401d4a:	3b04      	subs	r3, #4
  401d4c:	607b      	str	r3, [r7, #4]
  401d4e:	687b      	ldr	r3, [r7, #4]
  401d50:	2b00      	cmp	r3, #0
  401d52:	d1f1      	bne.n	401d38 <Reset_Handler+0x58>
  401d54:	bf00      	nop
  401d56:	4b0e      	ldr	r3, [pc, #56]	; (401d90 <Reset_Handler+0xb0>)
  401d58:	60bb      	str	r3, [r7, #8]
  401d5a:	e004      	b.n	401d66 <Reset_Handler+0x86>
  401d5c:	68bb      	ldr	r3, [r7, #8]
  401d5e:	1d1a      	adds	r2, r3, #4
  401d60:	60ba      	str	r2, [r7, #8]
  401d62:	2200      	movs	r2, #0
  401d64:	601a      	str	r2, [r3, #0]
  401d66:	68bb      	ldr	r3, [r7, #8]
  401d68:	4a0a      	ldr	r2, [pc, #40]	; (401d94 <Reset_Handler+0xb4>)
  401d6a:	4293      	cmp	r3, r2
  401d6c:	d3f6      	bcc.n	401d5c <Reset_Handler+0x7c>
  401d6e:	4b0a      	ldr	r3, [pc, #40]	; (401d98 <Reset_Handler+0xb8>)
  401d70:	60fb      	str	r3, [r7, #12]
  401d72:	4a0a      	ldr	r2, [pc, #40]	; (401d9c <Reset_Handler+0xbc>)
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	6093      	str	r3, [r2, #8]
  401d78:	4b09      	ldr	r3, [pc, #36]	; (401da0 <Reset_Handler+0xc0>)
  401d7a:	4798      	blx	r3
  401d7c:	4b09      	ldr	r3, [pc, #36]	; (401da4 <Reset_Handler+0xc4>)
  401d7e:	4798      	blx	r3
  401d80:	e7fe      	b.n	401d80 <Reset_Handler+0xa0>
  401d82:	bf00      	nop
  401d84:	004026c8 	.word	0x004026c8
  401d88:	20000000 	.word	0x20000000
  401d8c:	20000438 	.word	0x20000438
  401d90:	20000438 	.word	0x20000438
  401d94:	200006e4 	.word	0x200006e4
  401d98:	00400000 	.word	0x00400000
  401d9c:	e000ed00 	.word	0xe000ed00
  401da0:	004024cd 	.word	0x004024cd
  401da4:	00402085 	.word	0x00402085

00401da8 <Dummy_Handler>:
  401da8:	b480      	push	{r7}
  401daa:	af00      	add	r7, sp, #0
  401dac:	e7fe      	b.n	401dac <Dummy_Handler+0x4>
  401dae:	bf00      	nop

00401db0 <SystemCoreClockUpdate>:
  401db0:	b480      	push	{r7}
  401db2:	af00      	add	r7, sp, #0
  401db4:	4b5d      	ldr	r3, [pc, #372]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401db8:	f003 0303 	and.w	r3, r3, #3
  401dbc:	2b03      	cmp	r3, #3
  401dbe:	f200 8096 	bhi.w	401eee <SystemCoreClockUpdate+0x13e>
  401dc2:	a201      	add	r2, pc, #4	; (adr r2, 401dc8 <SystemCoreClockUpdate+0x18>)
  401dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dc8:	00401dd9 	.word	0x00401dd9
  401dcc:	00401df9 	.word	0x00401df9
  401dd0:	00401e43 	.word	0x00401e43
  401dd4:	00401e43 	.word	0x00401e43
  401dd8:	4b55      	ldr	r3, [pc, #340]	; (401f30 <SystemCoreClockUpdate+0x180>)
  401dda:	695b      	ldr	r3, [r3, #20]
  401ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401de0:	2b00      	cmp	r3, #0
  401de2:	d004      	beq.n	401dee <SystemCoreClockUpdate+0x3e>
  401de4:	4b53      	ldr	r3, [pc, #332]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401dea:	601a      	str	r2, [r3, #0]
  401dec:	e080      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401dee:	4b51      	ldr	r3, [pc, #324]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401df0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401df4:	601a      	str	r2, [r3, #0]
  401df6:	e07b      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401df8:	4b4c      	ldr	r3, [pc, #304]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401dfa:	6a1b      	ldr	r3, [r3, #32]
  401dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401e00:	2b00      	cmp	r3, #0
  401e02:	d003      	beq.n	401e0c <SystemCoreClockUpdate+0x5c>
  401e04:	4b4b      	ldr	r3, [pc, #300]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e06:	4a4c      	ldr	r2, [pc, #304]	; (401f38 <SystemCoreClockUpdate+0x188>)
  401e08:	601a      	str	r2, [r3, #0]
  401e0a:	e071      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401e0c:	4b49      	ldr	r3, [pc, #292]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e0e:	4a4b      	ldr	r2, [pc, #300]	; (401f3c <SystemCoreClockUpdate+0x18c>)
  401e10:	601a      	str	r2, [r3, #0]
  401e12:	4b46      	ldr	r3, [pc, #280]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401e14:	6a1b      	ldr	r3, [r3, #32]
  401e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e1a:	2b10      	cmp	r3, #16
  401e1c:	d008      	beq.n	401e30 <SystemCoreClockUpdate+0x80>
  401e1e:	2b20      	cmp	r3, #32
  401e20:	d00a      	beq.n	401e38 <SystemCoreClockUpdate+0x88>
  401e22:	2b00      	cmp	r3, #0
  401e24:	d000      	beq.n	401e28 <SystemCoreClockUpdate+0x78>
  401e26:	e00b      	b.n	401e40 <SystemCoreClockUpdate+0x90>
  401e28:	4b42      	ldr	r3, [pc, #264]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e2a:	4a44      	ldr	r2, [pc, #272]	; (401f3c <SystemCoreClockUpdate+0x18c>)
  401e2c:	601a      	str	r2, [r3, #0]
  401e2e:	e007      	b.n	401e40 <SystemCoreClockUpdate+0x90>
  401e30:	4b40      	ldr	r3, [pc, #256]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e32:	4a43      	ldr	r2, [pc, #268]	; (401f40 <SystemCoreClockUpdate+0x190>)
  401e34:	601a      	str	r2, [r3, #0]
  401e36:	e003      	b.n	401e40 <SystemCoreClockUpdate+0x90>
  401e38:	4b3e      	ldr	r3, [pc, #248]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e3a:	4a3f      	ldr	r2, [pc, #252]	; (401f38 <SystemCoreClockUpdate+0x188>)
  401e3c:	601a      	str	r2, [r3, #0]
  401e3e:	bf00      	nop
  401e40:	e056      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401e42:	4b3a      	ldr	r3, [pc, #232]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401e44:	6a1b      	ldr	r3, [r3, #32]
  401e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401e4a:	2b00      	cmp	r3, #0
  401e4c:	d003      	beq.n	401e56 <SystemCoreClockUpdate+0xa6>
  401e4e:	4b39      	ldr	r3, [pc, #228]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e50:	4a39      	ldr	r2, [pc, #228]	; (401f38 <SystemCoreClockUpdate+0x188>)
  401e52:	601a      	str	r2, [r3, #0]
  401e54:	e019      	b.n	401e8a <SystemCoreClockUpdate+0xda>
  401e56:	4b37      	ldr	r3, [pc, #220]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e58:	4a38      	ldr	r2, [pc, #224]	; (401f3c <SystemCoreClockUpdate+0x18c>)
  401e5a:	601a      	str	r2, [r3, #0]
  401e5c:	4b33      	ldr	r3, [pc, #204]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401e5e:	6a1b      	ldr	r3, [r3, #32]
  401e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e64:	2b10      	cmp	r3, #16
  401e66:	d008      	beq.n	401e7a <SystemCoreClockUpdate+0xca>
  401e68:	2b20      	cmp	r3, #32
  401e6a:	d00a      	beq.n	401e82 <SystemCoreClockUpdate+0xd2>
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d000      	beq.n	401e72 <SystemCoreClockUpdate+0xc2>
  401e70:	e00b      	b.n	401e8a <SystemCoreClockUpdate+0xda>
  401e72:	4b30      	ldr	r3, [pc, #192]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e74:	4a31      	ldr	r2, [pc, #196]	; (401f3c <SystemCoreClockUpdate+0x18c>)
  401e76:	601a      	str	r2, [r3, #0]
  401e78:	e007      	b.n	401e8a <SystemCoreClockUpdate+0xda>
  401e7a:	4b2e      	ldr	r3, [pc, #184]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e7c:	4a30      	ldr	r2, [pc, #192]	; (401f40 <SystemCoreClockUpdate+0x190>)
  401e7e:	601a      	str	r2, [r3, #0]
  401e80:	e003      	b.n	401e8a <SystemCoreClockUpdate+0xda>
  401e82:	4b2c      	ldr	r3, [pc, #176]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401e84:	4a2c      	ldr	r2, [pc, #176]	; (401f38 <SystemCoreClockUpdate+0x188>)
  401e86:	601a      	str	r2, [r3, #0]
  401e88:	bf00      	nop
  401e8a:	4b28      	ldr	r3, [pc, #160]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e8e:	f003 0303 	and.w	r3, r3, #3
  401e92:	2b02      	cmp	r3, #2
  401e94:	d115      	bne.n	401ec2 <SystemCoreClockUpdate+0x112>
  401e96:	4b25      	ldr	r3, [pc, #148]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401e9a:	4b2a      	ldr	r3, [pc, #168]	; (401f44 <SystemCoreClockUpdate+0x194>)
  401e9c:	4013      	ands	r3, r2
  401e9e:	0c1b      	lsrs	r3, r3, #16
  401ea0:	3301      	adds	r3, #1
  401ea2:	4a24      	ldr	r2, [pc, #144]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401ea4:	6812      	ldr	r2, [r2, #0]
  401ea6:	fb02 f303 	mul.w	r3, r2, r3
  401eaa:	4a22      	ldr	r2, [pc, #136]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401eac:	6013      	str	r3, [r2, #0]
  401eae:	4b1f      	ldr	r3, [pc, #124]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401eb2:	b2db      	uxtb	r3, r3
  401eb4:	4a1f      	ldr	r2, [pc, #124]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401eb6:	6812      	ldr	r2, [r2, #0]
  401eb8:	fbb2 f3f3 	udiv	r3, r2, r3
  401ebc:	4a1d      	ldr	r2, [pc, #116]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401ebe:	6013      	str	r3, [r2, #0]
  401ec0:	e016      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401ec2:	4b1a      	ldr	r3, [pc, #104]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ec6:	4b1f      	ldr	r3, [pc, #124]	; (401f44 <SystemCoreClockUpdate+0x194>)
  401ec8:	4013      	ands	r3, r2
  401eca:	0c1b      	lsrs	r3, r3, #16
  401ecc:	3301      	adds	r3, #1
  401ece:	4a19      	ldr	r2, [pc, #100]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401ed0:	6812      	ldr	r2, [r2, #0]
  401ed2:	fb02 f303 	mul.w	r3, r2, r3
  401ed6:	4a17      	ldr	r2, [pc, #92]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401ed8:	6013      	str	r3, [r2, #0]
  401eda:	4b14      	ldr	r3, [pc, #80]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ede:	b2db      	uxtb	r3, r3
  401ee0:	4a14      	ldr	r2, [pc, #80]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401ee2:	6812      	ldr	r2, [r2, #0]
  401ee4:	fbb2 f3f3 	udiv	r3, r2, r3
  401ee8:	4a12      	ldr	r2, [pc, #72]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401eea:	6013      	str	r3, [r2, #0]
  401eec:	e000      	b.n	401ef0 <SystemCoreClockUpdate+0x140>
  401eee:	bf00      	nop
  401ef0:	4b0e      	ldr	r3, [pc, #56]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ef8:	2b70      	cmp	r3, #112	; 0x70
  401efa:	d108      	bne.n	401f0e <SystemCoreClockUpdate+0x15e>
  401efc:	4b0d      	ldr	r3, [pc, #52]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401efe:	681b      	ldr	r3, [r3, #0]
  401f00:	4a11      	ldr	r2, [pc, #68]	; (401f48 <SystemCoreClockUpdate+0x198>)
  401f02:	fba2 2303 	umull	r2, r3, r2, r3
  401f06:	085b      	lsrs	r3, r3, #1
  401f08:	4a0a      	ldr	r2, [pc, #40]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401f0a:	6013      	str	r3, [r2, #0]
  401f0c:	e00a      	b.n	401f24 <SystemCoreClockUpdate+0x174>
  401f0e:	4b07      	ldr	r3, [pc, #28]	; (401f2c <SystemCoreClockUpdate+0x17c>)
  401f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f16:	091b      	lsrs	r3, r3, #4
  401f18:	4a06      	ldr	r2, [pc, #24]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401f1a:	6812      	ldr	r2, [r2, #0]
  401f1c:	fa22 f303 	lsr.w	r3, r2, r3
  401f20:	4a04      	ldr	r2, [pc, #16]	; (401f34 <SystemCoreClockUpdate+0x184>)
  401f22:	6013      	str	r3, [r2, #0]
  401f24:	bf00      	nop
  401f26:	46bd      	mov	sp, r7
  401f28:	bc80      	pop	{r7}
  401f2a:	4770      	bx	lr
  401f2c:	400e0400 	.word	0x400e0400
  401f30:	400e1410 	.word	0x400e1410
  401f34:	2000000c 	.word	0x2000000c
  401f38:	00b71b00 	.word	0x00b71b00
  401f3c:	003d0900 	.word	0x003d0900
  401f40:	007a1200 	.word	0x007a1200
  401f44:	07ff0000 	.word	0x07ff0000
  401f48:	aaaaaaab 	.word	0xaaaaaaab

00401f4c <system_init_flash>:
  401f4c:	b480      	push	{r7}
  401f4e:	b083      	sub	sp, #12
  401f50:	af00      	add	r7, sp, #0
  401f52:	6078      	str	r0, [r7, #4]
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	4a18      	ldr	r2, [pc, #96]	; (401fb8 <system_init_flash+0x6c>)
  401f58:	4293      	cmp	r3, r2
  401f5a:	d804      	bhi.n	401f66 <system_init_flash+0x1a>
  401f5c:	4b17      	ldr	r3, [pc, #92]	; (401fbc <system_init_flash+0x70>)
  401f5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401f62:	601a      	str	r2, [r3, #0]
  401f64:	e023      	b.n	401fae <system_init_flash+0x62>
  401f66:	687b      	ldr	r3, [r7, #4]
  401f68:	4a15      	ldr	r2, [pc, #84]	; (401fc0 <system_init_flash+0x74>)
  401f6a:	4293      	cmp	r3, r2
  401f6c:	d803      	bhi.n	401f76 <system_init_flash+0x2a>
  401f6e:	4b13      	ldr	r3, [pc, #76]	; (401fbc <system_init_flash+0x70>)
  401f70:	4a14      	ldr	r2, [pc, #80]	; (401fc4 <system_init_flash+0x78>)
  401f72:	601a      	str	r2, [r3, #0]
  401f74:	e01b      	b.n	401fae <system_init_flash+0x62>
  401f76:	687b      	ldr	r3, [r7, #4]
  401f78:	4a13      	ldr	r2, [pc, #76]	; (401fc8 <system_init_flash+0x7c>)
  401f7a:	4293      	cmp	r3, r2
  401f7c:	d803      	bhi.n	401f86 <system_init_flash+0x3a>
  401f7e:	4b0f      	ldr	r3, [pc, #60]	; (401fbc <system_init_flash+0x70>)
  401f80:	4a12      	ldr	r2, [pc, #72]	; (401fcc <system_init_flash+0x80>)
  401f82:	601a      	str	r2, [r3, #0]
  401f84:	e013      	b.n	401fae <system_init_flash+0x62>
  401f86:	687b      	ldr	r3, [r7, #4]
  401f88:	4a11      	ldr	r2, [pc, #68]	; (401fd0 <system_init_flash+0x84>)
  401f8a:	4293      	cmp	r3, r2
  401f8c:	d803      	bhi.n	401f96 <system_init_flash+0x4a>
  401f8e:	4b0b      	ldr	r3, [pc, #44]	; (401fbc <system_init_flash+0x70>)
  401f90:	4a10      	ldr	r2, [pc, #64]	; (401fd4 <system_init_flash+0x88>)
  401f92:	601a      	str	r2, [r3, #0]
  401f94:	e00b      	b.n	401fae <system_init_flash+0x62>
  401f96:	687b      	ldr	r3, [r7, #4]
  401f98:	4a0f      	ldr	r2, [pc, #60]	; (401fd8 <system_init_flash+0x8c>)
  401f9a:	4293      	cmp	r3, r2
  401f9c:	d804      	bhi.n	401fa8 <system_init_flash+0x5c>
  401f9e:	4b07      	ldr	r3, [pc, #28]	; (401fbc <system_init_flash+0x70>)
  401fa0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401fa4:	601a      	str	r2, [r3, #0]
  401fa6:	e002      	b.n	401fae <system_init_flash+0x62>
  401fa8:	4b04      	ldr	r3, [pc, #16]	; (401fbc <system_init_flash+0x70>)
  401faa:	4a0c      	ldr	r2, [pc, #48]	; (401fdc <system_init_flash+0x90>)
  401fac:	601a      	str	r2, [r3, #0]
  401fae:	bf00      	nop
  401fb0:	370c      	adds	r7, #12
  401fb2:	46bd      	mov	sp, r7
  401fb4:	bc80      	pop	{r7}
  401fb6:	4770      	bx	lr
  401fb8:	01312cff 	.word	0x01312cff
  401fbc:	400e0a00 	.word	0x400e0a00
  401fc0:	026259ff 	.word	0x026259ff
  401fc4:	04000100 	.word	0x04000100
  401fc8:	039386ff 	.word	0x039386ff
  401fcc:	04000200 	.word	0x04000200
  401fd0:	04c4b3ff 	.word	0x04c4b3ff
  401fd4:	04000300 	.word	0x04000300
  401fd8:	05f5e0ff 	.word	0x05f5e0ff
  401fdc:	04000500 	.word	0x04000500

00401fe0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401fe0:	b480      	push	{r7}
  401fe2:	b083      	sub	sp, #12
  401fe4:	af00      	add	r7, sp, #0
  401fe6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401fe8:	687b      	ldr	r3, [r7, #4]
  401fea:	2b07      	cmp	r3, #7
  401fec:	d825      	bhi.n	40203a <osc_get_rate+0x5a>
  401fee:	a201      	add	r2, pc, #4	; (adr r2, 401ff4 <osc_get_rate+0x14>)
  401ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ff4:	00402015 	.word	0x00402015
  401ff8:	0040201b 	.word	0x0040201b
  401ffc:	00402021 	.word	0x00402021
  402000:	00402027 	.word	0x00402027
  402004:	0040202b 	.word	0x0040202b
  402008:	0040202f 	.word	0x0040202f
  40200c:	00402033 	.word	0x00402033
  402010:	00402037 	.word	0x00402037
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402014:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402018:	e010      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40201a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40201e:	e00d      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402024:	e00a      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402026:	4b08      	ldr	r3, [pc, #32]	; (402048 <osc_get_rate+0x68>)
  402028:	e008      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40202a:	4b08      	ldr	r3, [pc, #32]	; (40204c <osc_get_rate+0x6c>)
  40202c:	e006      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40202e:	4b08      	ldr	r3, [pc, #32]	; (402050 <osc_get_rate+0x70>)
  402030:	e004      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402032:	4b07      	ldr	r3, [pc, #28]	; (402050 <osc_get_rate+0x70>)
  402034:	e002      	b.n	40203c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402036:	4b06      	ldr	r3, [pc, #24]	; (402050 <osc_get_rate+0x70>)
  402038:	e000      	b.n	40203c <osc_get_rate+0x5c>
	}

	return 0;
  40203a:	2300      	movs	r3, #0
}
  40203c:	4618      	mov	r0, r3
  40203e:	370c      	adds	r7, #12
  402040:	46bd      	mov	sp, r7
  402042:	bc80      	pop	{r7}
  402044:	4770      	bx	lr
  402046:	bf00      	nop
  402048:	003d0900 	.word	0x003d0900
  40204c:	007a1200 	.word	0x007a1200
  402050:	00b71b00 	.word	0x00b71b00

00402054 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  402054:	b580      	push	{r7, lr}
  402056:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402058:	2006      	movs	r0, #6
  40205a:	4b04      	ldr	r3, [pc, #16]	; (40206c <sysclk_get_main_hz+0x18>)
  40205c:	4798      	blx	r3
  40205e:	4602      	mov	r2, r0
  402060:	4613      	mov	r3, r2
  402062:	009b      	lsls	r3, r3, #2
  402064:	4413      	add	r3, r2
  402066:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402068:	4618      	mov	r0, r3
  40206a:	bd80      	pop	{r7, pc}
  40206c:	00401fe1 	.word	0x00401fe1

00402070 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402070:	b580      	push	{r7, lr}
  402072:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402074:	4b02      	ldr	r3, [pc, #8]	; (402080 <sysclk_get_cpu_hz+0x10>)
  402076:	4798      	blx	r3
  402078:	4603      	mov	r3, r0
  40207a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40207c:	4618      	mov	r0, r3
  40207e:	bd80      	pop	{r7, pc}
  402080:	00402055 	.word	0x00402055

00402084 <main>:
#include "ov2640.h"
#include "timer_interface.h"
uint8_t placeholder = 0;

int main (void)
{
  402084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  402088:	af00      	add	r7, sp, #0
	sysclk_init();
  40208a:	4b35      	ldr	r3, [pc, #212]	; (402160 <main+0xdc>)
  40208c:	4798      	blx	r3
	wdt_disable(WDT);
  40208e:	4835      	ldr	r0, [pc, #212]	; (402164 <main+0xe0>)
  402090:	4b35      	ldr	r3, [pc, #212]	; (402168 <main+0xe4>)
  402092:	4798      	blx	r3
	board_init();
  402094:	4b35      	ldr	r3, [pc, #212]	; (40216c <main+0xe8>)
  402096:	4798      	blx	r3
	
	// timer configuration
	configure_tc();
  402098:	4b35      	ldr	r3, [pc, #212]	; (402170 <main+0xec>)
  40209a:	4798      	blx	r3
	tc_start(TC0, 0);
  40209c:	2100      	movs	r1, #0
  40209e:	4835      	ldr	r0, [pc, #212]	; (402174 <main+0xf0>)
  4020a0:	4b35      	ldr	r3, [pc, #212]	; (402178 <main+0xf4>)
  4020a2:	4798      	blx	r3
	
	// Custom configuration calls
	configure_usart_wifi();
  4020a4:	4b35      	ldr	r3, [pc, #212]	; (40217c <main+0xf8>)
  4020a6:	4798      	blx	r3
	configure_wifi_comm_pin();
  4020a8:	4b35      	ldr	r3, [pc, #212]	; (402180 <main+0xfc>)
  4020aa:	4798      	blx	r3
	configure_wifi_web_setup_pin();	
  4020ac:	4b35      	ldr	r3, [pc, #212]	; (402184 <main+0x100>)
  4020ae:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4020b0:	2101      	movs	r1, #1
  4020b2:	4835      	ldr	r0, [pc, #212]	; (402188 <main+0x104>)
  4020b4:	4b35      	ldr	r3, [pc, #212]	; (40218c <main+0x108>)
  4020b6:	4798      	blx	r3
	// set up camera	
	//init_camera();
	//configure_camera();
	
	//usart_write_line(BOARD_USART, "\r\n");
	write_wifi_command("\r\n", 1);
  4020b8:	2101      	movs	r1, #1
  4020ba:	4835      	ldr	r0, [pc, #212]	; (402190 <main+0x10c>)
  4020bc:	4b35      	ldr	r3, [pc, #212]	; (402194 <main+0x110>)
  4020be:	4798      	blx	r3
	
	
	//delay_ms(1000);
	data_recieved = 0;
  4020c0:	4b35      	ldr	r3, [pc, #212]	; (402198 <main+0x114>)
  4020c2:	2200      	movs	r2, #0
  4020c4:	601a      	str	r2, [r3, #0]
	
	//write_wifi_command("get wl n s\r\n", 1);
	
	usart_write_line(BOARD_USART, "get wl n s\r\n");
  4020c6:	4935      	ldr	r1, [pc, #212]	; (40219c <main+0x118>)
  4020c8:	482f      	ldr	r0, [pc, #188]	; (402188 <main+0x104>)
  4020ca:	4b35      	ldr	r3, [pc, #212]	; (4021a0 <main+0x11c>)
  4020cc:	4798      	blx	r3
	delay_ms(1000);
  4020ce:	4b35      	ldr	r3, [pc, #212]	; (4021a4 <main+0x120>)
  4020d0:	4798      	blx	r3
  4020d2:	4603      	mov	r3, r0
  4020d4:	4618      	mov	r0, r3
  4020d6:	f04f 0100 	mov.w	r1, #0
  4020da:	4602      	mov	r2, r0
  4020dc:	460b      	mov	r3, r1
  4020de:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  4020e2:	ea4b 7b92 	orr.w	fp, fp, r2, lsr #30
  4020e6:	ea4f 0a82 	mov.w	sl, r2, lsl #2
  4020ea:	4652      	mov	r2, sl
  4020ec:	465b      	mov	r3, fp
  4020ee:	015d      	lsls	r5, r3, #5
  4020f0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
  4020f4:	0154      	lsls	r4, r2, #5
  4020f6:	1aa4      	subs	r4, r4, r2
  4020f8:	eb65 0503 	sbc.w	r5, r5, r3
  4020fc:	1824      	adds	r4, r4, r0
  4020fe:	eb45 0501 	adc.w	r5, r5, r1
  402102:	ea4f 09c5 	mov.w	r9, r5, lsl #3
  402106:	ea49 7954 	orr.w	r9, r9, r4, lsr #29
  40210a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
  40210e:	4644      	mov	r4, r8
  402110:	464d      	mov	r5, r9
  402112:	4621      	mov	r1, r4
  402114:	462a      	mov	r2, r5
  402116:	f243 63af 	movw	r3, #13999	; 0x36af
  40211a:	f04f 0400 	mov.w	r4, #0
  40211e:	eb11 0803 	adds.w	r8, r1, r3
  402122:	eb42 0904 	adc.w	r9, r2, r4
  402126:	4640      	mov	r0, r8
  402128:	4649      	mov	r1, r9
  40212a:	4c1f      	ldr	r4, [pc, #124]	; (4021a8 <main+0x124>)
  40212c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402130:	f04f 0300 	mov.w	r3, #0
  402134:	47a0      	blx	r4
  402136:	4603      	mov	r3, r0
  402138:	460c      	mov	r4, r1
  40213a:	4618      	mov	r0, r3
  40213c:	4b1b      	ldr	r3, [pc, #108]	; (4021ac <main+0x128>)
  40213e:	4798      	blx	r3
		
	
	data_recieved = 0;
  402140:	4b15      	ldr	r3, [pc, #84]	; (402198 <main+0x114>)
  402142:	2200      	movs	r2, #0
  402144:	601a      	str	r2, [r3, #0]
	//write_wifi_command("set sy c e off\r\n", 1);
	//write_wifi_command("set sy c e off\r\n", 1);
	//usart_write_line(BOARD_USART, "set sy c e off\r\n");
	
	//usart_write_line(BOARD_USART, "set sy c e off\r\n");
	write_wifi_command("set sy c e off\r\n", 1);
  402146:	2101      	movs	r1, #1
  402148:	4819      	ldr	r0, [pc, #100]	; (4021b0 <main+0x12c>)
  40214a:	4b12      	ldr	r3, [pc, #72]	; (402194 <main+0x110>)
  40214c:	4798      	blx	r3
	
	//delay_ms(1000);
	data_recieved = 0;
  40214e:	4b12      	ldr	r3, [pc, #72]	; (402198 <main+0x114>)
  402150:	2200      	movs	r2, #0
  402152:	601a      	str	r2, [r3, #0]
	
	write_wifi_command("set sy c e off\r\n", 1);
  402154:	2101      	movs	r1, #1
  402156:	4816      	ldr	r0, [pc, #88]	; (4021b0 <main+0x12c>)
  402158:	4b0e      	ldr	r3, [pc, #56]	; (402194 <main+0x110>)
  40215a:	4798      	blx	r3
	//usart_write_line(BOARD_USART, "set sy c e off\r\n");
	
	while(1) {
		
	}
  40215c:	e7fe      	b.n	40215c <main+0xd8>
  40215e:	bf00      	nop
  402160:	0040114d 	.word	0x0040114d
  402164:	400e1450 	.word	0x400e1450
  402168:	00400295 	.word	0x00400295
  40216c:	00401bcd 	.word	0x00401bcd
  402170:	004008c9 	.word	0x004008c9
  402174:	40010000 	.word	0x40010000
  402178:	00400161 	.word	0x00400161
  40217c:	00400b61 	.word	0x00400b61
  402180:	00400c31 	.word	0x00400c31
  402184:	00400ca9 	.word	0x00400ca9
  402188:	40024000 	.word	0x40024000
  40218c:	00400661 	.word	0x00400661
  402190:	0040266c 	.word	0x0040266c
  402194:	00400cfd 	.word	0x00400cfd
  402198:	200006d4 	.word	0x200006d4
  40219c:	00402670 	.word	0x00402670
  4021a0:	00400735 	.word	0x00400735
  4021a4:	00402071 	.word	0x00402071
  4021a8:	004021b5 	.word	0x004021b5
  4021ac:	20000001 	.word	0x20000001
  4021b0:	00402680 	.word	0x00402680

004021b4 <__aeabi_uldivmod>:
  4021b4:	b953      	cbnz	r3, 4021cc <__aeabi_uldivmod+0x18>
  4021b6:	b94a      	cbnz	r2, 4021cc <__aeabi_uldivmod+0x18>
  4021b8:	2900      	cmp	r1, #0
  4021ba:	bf08      	it	eq
  4021bc:	2800      	cmpeq	r0, #0
  4021be:	bf1c      	itt	ne
  4021c0:	f04f 31ff 	movne.w	r1, #4294967295
  4021c4:	f04f 30ff 	movne.w	r0, #4294967295
  4021c8:	f000 b97e 	b.w	4024c8 <__aeabi_idiv0>
  4021cc:	f1ad 0c08 	sub.w	ip, sp, #8
  4021d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4021d4:	f000 f806 	bl	4021e4 <__udivmoddi4>
  4021d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4021dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4021e0:	b004      	add	sp, #16
  4021e2:	4770      	bx	lr

004021e4 <__udivmoddi4>:
  4021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4021e8:	468c      	mov	ip, r1
  4021ea:	460e      	mov	r6, r1
  4021ec:	4604      	mov	r4, r0
  4021ee:	9d08      	ldr	r5, [sp, #32]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d150      	bne.n	402296 <__udivmoddi4+0xb2>
  4021f4:	428a      	cmp	r2, r1
  4021f6:	4617      	mov	r7, r2
  4021f8:	d96c      	bls.n	4022d4 <__udivmoddi4+0xf0>
  4021fa:	fab2 fe82 	clz	lr, r2
  4021fe:	f1be 0f00 	cmp.w	lr, #0
  402202:	d00b      	beq.n	40221c <__udivmoddi4+0x38>
  402204:	f1ce 0420 	rsb	r4, lr, #32
  402208:	fa20 f404 	lsr.w	r4, r0, r4
  40220c:	fa01 f60e 	lsl.w	r6, r1, lr
  402210:	ea44 0c06 	orr.w	ip, r4, r6
  402214:	fa02 f70e 	lsl.w	r7, r2, lr
  402218:	fa00 f40e 	lsl.w	r4, r0, lr
  40221c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  402220:	0c22      	lsrs	r2, r4, #16
  402222:	fbbc f0f9 	udiv	r0, ip, r9
  402226:	fa1f f887 	uxth.w	r8, r7
  40222a:	fb09 c610 	mls	r6, r9, r0, ip
  40222e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402232:	fb00 f308 	mul.w	r3, r0, r8
  402236:	42b3      	cmp	r3, r6
  402238:	d909      	bls.n	40224e <__udivmoddi4+0x6a>
  40223a:	19f6      	adds	r6, r6, r7
  40223c:	f100 32ff 	add.w	r2, r0, #4294967295
  402240:	f080 8122 	bcs.w	402488 <__udivmoddi4+0x2a4>
  402244:	42b3      	cmp	r3, r6
  402246:	f240 811f 	bls.w	402488 <__udivmoddi4+0x2a4>
  40224a:	3802      	subs	r0, #2
  40224c:	443e      	add	r6, r7
  40224e:	1af6      	subs	r6, r6, r3
  402250:	b2a2      	uxth	r2, r4
  402252:	fbb6 f3f9 	udiv	r3, r6, r9
  402256:	fb09 6613 	mls	r6, r9, r3, r6
  40225a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  40225e:	fb03 f808 	mul.w	r8, r3, r8
  402262:	45a0      	cmp	r8, r4
  402264:	d909      	bls.n	40227a <__udivmoddi4+0x96>
  402266:	19e4      	adds	r4, r4, r7
  402268:	f103 32ff 	add.w	r2, r3, #4294967295
  40226c:	f080 810a 	bcs.w	402484 <__udivmoddi4+0x2a0>
  402270:	45a0      	cmp	r8, r4
  402272:	f240 8107 	bls.w	402484 <__udivmoddi4+0x2a0>
  402276:	3b02      	subs	r3, #2
  402278:	443c      	add	r4, r7
  40227a:	ebc8 0404 	rsb	r4, r8, r4
  40227e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402282:	2100      	movs	r1, #0
  402284:	2d00      	cmp	r5, #0
  402286:	d062      	beq.n	40234e <__udivmoddi4+0x16a>
  402288:	fa24 f40e 	lsr.w	r4, r4, lr
  40228c:	2300      	movs	r3, #0
  40228e:	602c      	str	r4, [r5, #0]
  402290:	606b      	str	r3, [r5, #4]
  402292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402296:	428b      	cmp	r3, r1
  402298:	d907      	bls.n	4022aa <__udivmoddi4+0xc6>
  40229a:	2d00      	cmp	r5, #0
  40229c:	d055      	beq.n	40234a <__udivmoddi4+0x166>
  40229e:	2100      	movs	r1, #0
  4022a0:	e885 0041 	stmia.w	r5, {r0, r6}
  4022a4:	4608      	mov	r0, r1
  4022a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022aa:	fab3 f183 	clz	r1, r3
  4022ae:	2900      	cmp	r1, #0
  4022b0:	f040 8090 	bne.w	4023d4 <__udivmoddi4+0x1f0>
  4022b4:	42b3      	cmp	r3, r6
  4022b6:	d302      	bcc.n	4022be <__udivmoddi4+0xda>
  4022b8:	4282      	cmp	r2, r0
  4022ba:	f200 80f8 	bhi.w	4024ae <__udivmoddi4+0x2ca>
  4022be:	1a84      	subs	r4, r0, r2
  4022c0:	eb66 0603 	sbc.w	r6, r6, r3
  4022c4:	2001      	movs	r0, #1
  4022c6:	46b4      	mov	ip, r6
  4022c8:	2d00      	cmp	r5, #0
  4022ca:	d040      	beq.n	40234e <__udivmoddi4+0x16a>
  4022cc:	e885 1010 	stmia.w	r5, {r4, ip}
  4022d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022d4:	b912      	cbnz	r2, 4022dc <__udivmoddi4+0xf8>
  4022d6:	2701      	movs	r7, #1
  4022d8:	fbb7 f7f2 	udiv	r7, r7, r2
  4022dc:	fab7 fe87 	clz	lr, r7
  4022e0:	f1be 0f00 	cmp.w	lr, #0
  4022e4:	d135      	bne.n	402352 <__udivmoddi4+0x16e>
  4022e6:	1bf3      	subs	r3, r6, r7
  4022e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4022ec:	fa1f fc87 	uxth.w	ip, r7
  4022f0:	2101      	movs	r1, #1
  4022f2:	fbb3 f0f8 	udiv	r0, r3, r8
  4022f6:	0c22      	lsrs	r2, r4, #16
  4022f8:	fb08 3610 	mls	r6, r8, r0, r3
  4022fc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402300:	fb0c f300 	mul.w	r3, ip, r0
  402304:	42b3      	cmp	r3, r6
  402306:	d907      	bls.n	402318 <__udivmoddi4+0x134>
  402308:	19f6      	adds	r6, r6, r7
  40230a:	f100 32ff 	add.w	r2, r0, #4294967295
  40230e:	d202      	bcs.n	402316 <__udivmoddi4+0x132>
  402310:	42b3      	cmp	r3, r6
  402312:	f200 80ce 	bhi.w	4024b2 <__udivmoddi4+0x2ce>
  402316:	4610      	mov	r0, r2
  402318:	1af6      	subs	r6, r6, r3
  40231a:	b2a2      	uxth	r2, r4
  40231c:	fbb6 f3f8 	udiv	r3, r6, r8
  402320:	fb08 6613 	mls	r6, r8, r3, r6
  402324:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402328:	fb0c fc03 	mul.w	ip, ip, r3
  40232c:	45a4      	cmp	ip, r4
  40232e:	d907      	bls.n	402340 <__udivmoddi4+0x15c>
  402330:	19e4      	adds	r4, r4, r7
  402332:	f103 32ff 	add.w	r2, r3, #4294967295
  402336:	d202      	bcs.n	40233e <__udivmoddi4+0x15a>
  402338:	45a4      	cmp	ip, r4
  40233a:	f200 80b5 	bhi.w	4024a8 <__udivmoddi4+0x2c4>
  40233e:	4613      	mov	r3, r2
  402340:	ebcc 0404 	rsb	r4, ip, r4
  402344:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402348:	e79c      	b.n	402284 <__udivmoddi4+0xa0>
  40234a:	4629      	mov	r1, r5
  40234c:	4628      	mov	r0, r5
  40234e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402352:	f1ce 0120 	rsb	r1, lr, #32
  402356:	fa06 f30e 	lsl.w	r3, r6, lr
  40235a:	fa07 f70e 	lsl.w	r7, r7, lr
  40235e:	fa20 f901 	lsr.w	r9, r0, r1
  402362:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402366:	40ce      	lsrs	r6, r1
  402368:	ea49 0903 	orr.w	r9, r9, r3
  40236c:	fbb6 faf8 	udiv	sl, r6, r8
  402370:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402374:	fb08 661a 	mls	r6, r8, sl, r6
  402378:	fa1f fc87 	uxth.w	ip, r7
  40237c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402380:	fb0a f20c 	mul.w	r2, sl, ip
  402384:	429a      	cmp	r2, r3
  402386:	fa00 f40e 	lsl.w	r4, r0, lr
  40238a:	d90a      	bls.n	4023a2 <__udivmoddi4+0x1be>
  40238c:	19db      	adds	r3, r3, r7
  40238e:	f10a 31ff 	add.w	r1, sl, #4294967295
  402392:	f080 8087 	bcs.w	4024a4 <__udivmoddi4+0x2c0>
  402396:	429a      	cmp	r2, r3
  402398:	f240 8084 	bls.w	4024a4 <__udivmoddi4+0x2c0>
  40239c:	f1aa 0a02 	sub.w	sl, sl, #2
  4023a0:	443b      	add	r3, r7
  4023a2:	1a9b      	subs	r3, r3, r2
  4023a4:	fa1f f989 	uxth.w	r9, r9
  4023a8:	fbb3 f1f8 	udiv	r1, r3, r8
  4023ac:	fb08 3311 	mls	r3, r8, r1, r3
  4023b0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  4023b4:	fb01 f60c 	mul.w	r6, r1, ip
  4023b8:	429e      	cmp	r6, r3
  4023ba:	d907      	bls.n	4023cc <__udivmoddi4+0x1e8>
  4023bc:	19db      	adds	r3, r3, r7
  4023be:	f101 32ff 	add.w	r2, r1, #4294967295
  4023c2:	d26b      	bcs.n	40249c <__udivmoddi4+0x2b8>
  4023c4:	429e      	cmp	r6, r3
  4023c6:	d969      	bls.n	40249c <__udivmoddi4+0x2b8>
  4023c8:	3902      	subs	r1, #2
  4023ca:	443b      	add	r3, r7
  4023cc:	1b9b      	subs	r3, r3, r6
  4023ce:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  4023d2:	e78e      	b.n	4022f2 <__udivmoddi4+0x10e>
  4023d4:	f1c1 0e20 	rsb	lr, r1, #32
  4023d8:	fa22 f40e 	lsr.w	r4, r2, lr
  4023dc:	408b      	lsls	r3, r1
  4023de:	4323      	orrs	r3, r4
  4023e0:	fa20 f70e 	lsr.w	r7, r0, lr
  4023e4:	fa06 f401 	lsl.w	r4, r6, r1
  4023e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4023ec:	fa26 f60e 	lsr.w	r6, r6, lr
  4023f0:	433c      	orrs	r4, r7
  4023f2:	fbb6 f9fc 	udiv	r9, r6, ip
  4023f6:	0c27      	lsrs	r7, r4, #16
  4023f8:	fb0c 6619 	mls	r6, ip, r9, r6
  4023fc:	fa1f f883 	uxth.w	r8, r3
  402400:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  402404:	fb09 f708 	mul.w	r7, r9, r8
  402408:	42b7      	cmp	r7, r6
  40240a:	fa02 f201 	lsl.w	r2, r2, r1
  40240e:	fa00 fa01 	lsl.w	sl, r0, r1
  402412:	d908      	bls.n	402426 <__udivmoddi4+0x242>
  402414:	18f6      	adds	r6, r6, r3
  402416:	f109 30ff 	add.w	r0, r9, #4294967295
  40241a:	d241      	bcs.n	4024a0 <__udivmoddi4+0x2bc>
  40241c:	42b7      	cmp	r7, r6
  40241e:	d93f      	bls.n	4024a0 <__udivmoddi4+0x2bc>
  402420:	f1a9 0902 	sub.w	r9, r9, #2
  402424:	441e      	add	r6, r3
  402426:	1bf6      	subs	r6, r6, r7
  402428:	b2a0      	uxth	r0, r4
  40242a:	fbb6 f4fc 	udiv	r4, r6, ip
  40242e:	fb0c 6614 	mls	r6, ip, r4, r6
  402432:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  402436:	fb04 f808 	mul.w	r8, r4, r8
  40243a:	45b8      	cmp	r8, r7
  40243c:	d907      	bls.n	40244e <__udivmoddi4+0x26a>
  40243e:	18ff      	adds	r7, r7, r3
  402440:	f104 30ff 	add.w	r0, r4, #4294967295
  402444:	d228      	bcs.n	402498 <__udivmoddi4+0x2b4>
  402446:	45b8      	cmp	r8, r7
  402448:	d926      	bls.n	402498 <__udivmoddi4+0x2b4>
  40244a:	3c02      	subs	r4, #2
  40244c:	441f      	add	r7, r3
  40244e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402452:	ebc8 0707 	rsb	r7, r8, r7
  402456:	fba0 8902 	umull	r8, r9, r0, r2
  40245a:	454f      	cmp	r7, r9
  40245c:	4644      	mov	r4, r8
  40245e:	464e      	mov	r6, r9
  402460:	d314      	bcc.n	40248c <__udivmoddi4+0x2a8>
  402462:	d029      	beq.n	4024b8 <__udivmoddi4+0x2d4>
  402464:	b365      	cbz	r5, 4024c0 <__udivmoddi4+0x2dc>
  402466:	ebba 0304 	subs.w	r3, sl, r4
  40246a:	eb67 0706 	sbc.w	r7, r7, r6
  40246e:	fa07 fe0e 	lsl.w	lr, r7, lr
  402472:	40cb      	lsrs	r3, r1
  402474:	40cf      	lsrs	r7, r1
  402476:	ea4e 0303 	orr.w	r3, lr, r3
  40247a:	e885 0088 	stmia.w	r5, {r3, r7}
  40247e:	2100      	movs	r1, #0
  402480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402484:	4613      	mov	r3, r2
  402486:	e6f8      	b.n	40227a <__udivmoddi4+0x96>
  402488:	4610      	mov	r0, r2
  40248a:	e6e0      	b.n	40224e <__udivmoddi4+0x6a>
  40248c:	ebb8 0402 	subs.w	r4, r8, r2
  402490:	eb69 0603 	sbc.w	r6, r9, r3
  402494:	3801      	subs	r0, #1
  402496:	e7e5      	b.n	402464 <__udivmoddi4+0x280>
  402498:	4604      	mov	r4, r0
  40249a:	e7d8      	b.n	40244e <__udivmoddi4+0x26a>
  40249c:	4611      	mov	r1, r2
  40249e:	e795      	b.n	4023cc <__udivmoddi4+0x1e8>
  4024a0:	4681      	mov	r9, r0
  4024a2:	e7c0      	b.n	402426 <__udivmoddi4+0x242>
  4024a4:	468a      	mov	sl, r1
  4024a6:	e77c      	b.n	4023a2 <__udivmoddi4+0x1be>
  4024a8:	3b02      	subs	r3, #2
  4024aa:	443c      	add	r4, r7
  4024ac:	e748      	b.n	402340 <__udivmoddi4+0x15c>
  4024ae:	4608      	mov	r0, r1
  4024b0:	e70a      	b.n	4022c8 <__udivmoddi4+0xe4>
  4024b2:	3802      	subs	r0, #2
  4024b4:	443e      	add	r6, r7
  4024b6:	e72f      	b.n	402318 <__udivmoddi4+0x134>
  4024b8:	45c2      	cmp	sl, r8
  4024ba:	d3e7      	bcc.n	40248c <__udivmoddi4+0x2a8>
  4024bc:	463e      	mov	r6, r7
  4024be:	e7d1      	b.n	402464 <__udivmoddi4+0x280>
  4024c0:	4629      	mov	r1, r5
  4024c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024c6:	bf00      	nop

004024c8 <__aeabi_idiv0>:
  4024c8:	4770      	bx	lr
  4024ca:	bf00      	nop

004024cc <__libc_init_array>:
  4024cc:	b570      	push	{r4, r5, r6, lr}
  4024ce:	4e0f      	ldr	r6, [pc, #60]	; (40250c <__libc_init_array+0x40>)
  4024d0:	4d0f      	ldr	r5, [pc, #60]	; (402510 <__libc_init_array+0x44>)
  4024d2:	1b76      	subs	r6, r6, r5
  4024d4:	10b6      	asrs	r6, r6, #2
  4024d6:	bf18      	it	ne
  4024d8:	2400      	movne	r4, #0
  4024da:	d005      	beq.n	4024e8 <__libc_init_array+0x1c>
  4024dc:	3401      	adds	r4, #1
  4024de:	f855 3b04 	ldr.w	r3, [r5], #4
  4024e2:	4798      	blx	r3
  4024e4:	42a6      	cmp	r6, r4
  4024e6:	d1f9      	bne.n	4024dc <__libc_init_array+0x10>
  4024e8:	4e0a      	ldr	r6, [pc, #40]	; (402514 <__libc_init_array+0x48>)
  4024ea:	4d0b      	ldr	r5, [pc, #44]	; (402518 <__libc_init_array+0x4c>)
  4024ec:	1b76      	subs	r6, r6, r5
  4024ee:	f000 f8d5 	bl	40269c <_init>
  4024f2:	10b6      	asrs	r6, r6, #2
  4024f4:	bf18      	it	ne
  4024f6:	2400      	movne	r4, #0
  4024f8:	d006      	beq.n	402508 <__libc_init_array+0x3c>
  4024fa:	3401      	adds	r4, #1
  4024fc:	f855 3b04 	ldr.w	r3, [r5], #4
  402500:	4798      	blx	r3
  402502:	42a6      	cmp	r6, r4
  402504:	d1f9      	bne.n	4024fa <__libc_init_array+0x2e>
  402506:	bd70      	pop	{r4, r5, r6, pc}
  402508:	bd70      	pop	{r4, r5, r6, pc}
  40250a:	bf00      	nop
  40250c:	004026a8 	.word	0x004026a8
  402510:	004026a8 	.word	0x004026a8
  402514:	004026b0 	.word	0x004026b0
  402518:	004026a8 	.word	0x004026a8

0040251c <register_fini>:
  40251c:	4b02      	ldr	r3, [pc, #8]	; (402528 <register_fini+0xc>)
  40251e:	b113      	cbz	r3, 402526 <register_fini+0xa>
  402520:	4802      	ldr	r0, [pc, #8]	; (40252c <register_fini+0x10>)
  402522:	f000 b805 	b.w	402530 <atexit>
  402526:	4770      	bx	lr
  402528:	00000000 	.word	0x00000000
  40252c:	0040253d 	.word	0x0040253d

00402530 <atexit>:
  402530:	2300      	movs	r3, #0
  402532:	4601      	mov	r1, r0
  402534:	461a      	mov	r2, r3
  402536:	4618      	mov	r0, r3
  402538:	f000 b814 	b.w	402564 <__register_exitproc>

0040253c <__libc_fini_array>:
  40253c:	b538      	push	{r3, r4, r5, lr}
  40253e:	4d07      	ldr	r5, [pc, #28]	; (40255c <__libc_fini_array+0x20>)
  402540:	4c07      	ldr	r4, [pc, #28]	; (402560 <__libc_fini_array+0x24>)
  402542:	1b2c      	subs	r4, r5, r4
  402544:	10a4      	asrs	r4, r4, #2
  402546:	d005      	beq.n	402554 <__libc_fini_array+0x18>
  402548:	3c01      	subs	r4, #1
  40254a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40254e:	4798      	blx	r3
  402550:	2c00      	cmp	r4, #0
  402552:	d1f9      	bne.n	402548 <__libc_fini_array+0xc>
  402554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402558:	f000 b8aa 	b.w	4026b0 <_fini>
  40255c:	004026c0 	.word	0x004026c0
  402560:	004026bc 	.word	0x004026bc

00402564 <__register_exitproc>:
  402564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402568:	4c25      	ldr	r4, [pc, #148]	; (402600 <__register_exitproc+0x9c>)
  40256a:	6825      	ldr	r5, [r4, #0]
  40256c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402570:	4606      	mov	r6, r0
  402572:	4688      	mov	r8, r1
  402574:	4692      	mov	sl, r2
  402576:	4699      	mov	r9, r3
  402578:	b3c4      	cbz	r4, 4025ec <__register_exitproc+0x88>
  40257a:	6860      	ldr	r0, [r4, #4]
  40257c:	281f      	cmp	r0, #31
  40257e:	dc17      	bgt.n	4025b0 <__register_exitproc+0x4c>
  402580:	1c43      	adds	r3, r0, #1
  402582:	b176      	cbz	r6, 4025a2 <__register_exitproc+0x3e>
  402584:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402588:	2201      	movs	r2, #1
  40258a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40258e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402592:	4082      	lsls	r2, r0
  402594:	4311      	orrs	r1, r2
  402596:	2e02      	cmp	r6, #2
  402598:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40259c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4025a0:	d01e      	beq.n	4025e0 <__register_exitproc+0x7c>
  4025a2:	3002      	adds	r0, #2
  4025a4:	6063      	str	r3, [r4, #4]
  4025a6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4025aa:	2000      	movs	r0, #0
  4025ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025b0:	4b14      	ldr	r3, [pc, #80]	; (402604 <__register_exitproc+0xa0>)
  4025b2:	b303      	cbz	r3, 4025f6 <__register_exitproc+0x92>
  4025b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4025b8:	f3af 8000 	nop.w
  4025bc:	4604      	mov	r4, r0
  4025be:	b1d0      	cbz	r0, 4025f6 <__register_exitproc+0x92>
  4025c0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4025c4:	2700      	movs	r7, #0
  4025c6:	e880 0088 	stmia.w	r0, {r3, r7}
  4025ca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4025ce:	4638      	mov	r0, r7
  4025d0:	2301      	movs	r3, #1
  4025d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4025d6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4025da:	2e00      	cmp	r6, #0
  4025dc:	d0e1      	beq.n	4025a2 <__register_exitproc+0x3e>
  4025de:	e7d1      	b.n	402584 <__register_exitproc+0x20>
  4025e0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4025e4:	430a      	orrs	r2, r1
  4025e6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4025ea:	e7da      	b.n	4025a2 <__register_exitproc+0x3e>
  4025ec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4025f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4025f4:	e7c1      	b.n	40257a <__register_exitproc+0x16>
  4025f6:	f04f 30ff 	mov.w	r0, #4294967295
  4025fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4025fe:	bf00      	nop
  402600:	00402698 	.word	0x00402698
  402604:	00000000 	.word	0x00000000
  402608:	0001c200 	.word	0x0001c200
  40260c:	000000c0 	.word	0x000000c0
  402610:	00000800 	.word	0x00000800
	...
  402620:	20656466 	.word	0x20656466
  402624:	67616d69 	.word	0x67616d69
  402628:	706a2e65 	.word	0x706a2e65
  40262c:	000a0d67 	.word	0x000a0d67
  402630:	20726366 	.word	0x20726366
  402634:	67616d69 	.word	0x67616d69
  402638:	706a2e65 	.word	0x706a2e65
  40263c:	64252067 	.word	0x64252067
  402640:	00000a0d 	.word	0x00000a0d
  402644:	20656466 	.word	0x20656466
  402648:	6d746162 	.word	0x6d746162
  40264c:	742e6e61 	.word	0x742e6e61
  402650:	0a0d7478 	.word	0x0a0d7478
  402654:	00000000 	.word	0x00000000
  402658:	20726366 	.word	0x20726366
  40265c:	6d746162 	.word	0x6d746162
  402660:	742e6e61 	.word	0x742e6e61
  402664:	25207478 	.word	0x25207478
  402668:	000a0d64 	.word	0x000a0d64
  40266c:	00000a0d 	.word	0x00000a0d
  402670:	20746567 	.word	0x20746567
  402674:	6e206c77 	.word	0x6e206c77
  402678:	0a0d7320 	.word	0x0a0d7320
  40267c:	00000000 	.word	0x00000000
  402680:	20746573 	.word	0x20746573
  402684:	63207973 	.word	0x63207973
  402688:	6f206520 	.word	0x6f206520
  40268c:	0a0d6666 	.word	0x0a0d6666
  402690:	00000000 	.word	0x00000000
  402694:	00000043 	.word	0x00000043

00402698 <_global_impure_ptr>:
  402698:	20000010                                ... 

0040269c <_init>:
  40269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40269e:	bf00      	nop
  4026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4026a2:	bc08      	pop	{r3}
  4026a4:	469e      	mov	lr, r3
  4026a6:	4770      	bx	lr

004026a8 <__init_array_start>:
  4026a8:	0040251d 	.word	0x0040251d

004026ac <__frame_dummy_init_array_entry>:
  4026ac:	004000f1                                ..@.

004026b0 <_fini>:
  4026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026b2:	bf00      	nop
  4026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4026b6:	bc08      	pop	{r3}
  4026b8:	469e      	mov	lr, r3
  4026ba:	4770      	bx	lr

004026bc <__fini_array_start>:
  4026bc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	2694 0040 0000 0000 0000 0000 0000 0000     .&@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
