
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f54  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407f54  00407f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  00407f5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000480  200009bc  00408918  000209bc  2**2
                  ALLOC
  4 .stack        00003004  20000e3c  00408d98  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014c77  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b81  00000000  00000000  000356b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000072f2  00000000  00000000  00038237  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c70  00000000  00000000  0003f529  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc0  00000000  00000000  00040199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006a2c  00000000  00000000  00040d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000db67  00000000  00000000  00047785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004ff7a  00000000  00000000  000552ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004174  00000000  00000000  000a5268  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 3e 00 20 b5 27 40 00 7d 28 40 00 7d 28 40 00     @>. .'@.}(@.}(@.
  400010:	7d 28 40 00 7d 28 40 00 7d 28 40 00 00 00 00 00     }(@.}(@.}(@.....
	...
  40002c:	7d 28 40 00 7d 28 40 00 00 00 00 00 7d 28 40 00     }(@.}(@.....}(@.
  40003c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  40004c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  40005c:	00 00 00 00 7d 28 40 00 7d 28 40 00 00 00 00 00     ....}(@.}(@.....
  40006c:	dd 09 40 00 f5 09 40 00 00 00 00 00 65 10 40 00     ..@...@.....e.@.
  40007c:	7d 28 40 00 00 00 00 00 00 00 00 00 7d 28 40 00     }(@.........}(@.
  40008c:	7d 28 40 00 7d 28 40 00 7d 28 40 00 49 07 40 00     }(@.}(@.}(@.I.@.
  40009c:	39 0e 40 00 7d 28 40 00 7d 28 40 00 00 00 00 00     9.@.}(@.}(@.....
	...
  4000b4:	7d 28 40 00 7d 28 40 00 7d 28 40 00 7d 28 40 00     }(@.}(@.}(@.}(@.
  4000c4:	7d 28 40 00 7d 28 40 00                             }(@.}(@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407f5c 	.word	0x00407f5c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00407f5c 	.word	0x00407f5c
  40012c:	200009c0 	.word	0x200009c0
  400130:	00407f5c 	.word	0x00407f5c
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
	...

00400178 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400178:	b580      	push	{r7, lr}
  40017a:	b092      	sub	sp, #72	; 0x48
  40017c:	af00      	add	r7, sp, #0
  40017e:	60f8      	str	r0, [r7, #12]
  400180:	60b9      	str	r1, [r7, #8]
  400182:	607a      	str	r2, [r7, #4]
  400184:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40018a:	221c      	movs	r2, #28
  40018c:	2100      	movs	r1, #0
  40018e:	4618      	mov	r0, r3
  400190:	4b36      	ldr	r3, [pc, #216]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  400192:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400194:	f107 0310 	add.w	r3, r7, #16
  400198:	221c      	movs	r2, #28
  40019a:	2100      	movs	r1, #0
  40019c:	4618      	mov	r0, r3
  40019e:	4b33      	ldr	r3, [pc, #204]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  4001a0:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  4001a2:	683b      	ldr	r3, [r7, #0]
  4001a4:	2b02      	cmp	r3, #2
  4001a6:	d004      	beq.n	4001b2 <ssc_i2s_set_receiver+0x3a>
  4001a8:	2b03      	cmp	r3, #3
  4001aa:	d00a      	beq.n	4001c2 <ssc_i2s_set_receiver+0x4a>
  4001ac:	2b01      	cmp	r3, #1
  4001ae:	d004      	beq.n	4001ba <ssc_i2s_set_receiver+0x42>
  4001b0:	e00b      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	e007      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c0:	e003      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001c6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ca:	68bb      	ldr	r3, [r7, #8]
  4001cc:	f003 0302 	and.w	r3, r3, #2
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d022      	beq.n	40021a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	2b03      	cmp	r3, #3
  4001d8:	d102      	bne.n	4001e0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001da:	2301      	movs	r3, #1
  4001dc:	61bb      	str	r3, [r7, #24]
  4001de:	e001      	b.n	4001e4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001e4:	2300      	movs	r3, #0
  4001e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001e8:	2304      	movs	r3, #4
  4001ea:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001f0:	2300      	movs	r3, #0
  4001f2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400200:	3b01      	subs	r3, #1
  400202:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400204:	2380      	movs	r3, #128	; 0x80
  400206:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  400208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40020a:	3b01      	subs	r3, #1
  40020c:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  40020e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400212:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400214:	2300      	movs	r3, #0
  400216:	62bb      	str	r3, [r7, #40]	; 0x28
  400218:	e01b      	b.n	400252 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40021a:	68bb      	ldr	r3, [r7, #8]
  40021c:	f003 0308 	and.w	r3, r3, #8
  400220:	2b00      	cmp	r3, #0
  400222:	d016      	beq.n	400252 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400228:	2300      	movs	r3, #0
  40022a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40022c:	2300      	movs	r3, #0
  40022e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400230:	2300      	movs	r3, #0
  400232:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400234:	2301      	movs	r3, #1
  400236:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400238:	2300      	movs	r3, #0
  40023a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40023c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40023e:	3b01      	subs	r3, #1
  400240:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400242:	2380      	movs	r3, #128	; 0x80
  400244:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400246:	2300      	movs	r3, #0
  400248:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40024a:	2300      	movs	r3, #0
  40024c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40024e:	2300      	movs	r3, #0
  400250:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400252:	f107 0210 	add.w	r2, r7, #16
  400256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40025a:	4619      	mov	r1, r3
  40025c:	68f8      	ldr	r0, [r7, #12]
  40025e:	4b04      	ldr	r3, [pc, #16]	; (400270 <ssc_i2s_set_receiver+0xf8>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3748      	adds	r7, #72	; 0x48
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	00403671 	.word	0x00403671
  400270:	004002c5 	.word	0x004002c5

00400274 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400274:	b480      	push	{r7}
  400276:	b083      	sub	sp, #12
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400282:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	2200      	movs	r2, #0
  400288:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40028a:	687b      	ldr	r3, [r7, #4]
  40028c:	2200      	movs	r2, #0
  40028e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	2200      	movs	r2, #0
  400294:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	2200      	movs	r2, #0
  40029a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2200      	movs	r2, #0
  4002a0:	61da      	str	r2, [r3, #28]
}
  4002a2:	bf00      	nop
  4002a4:	370c      	adds	r7, #12
  4002a6:	46bd      	mov	sp, r7
  4002a8:	bc80      	pop	{r7}
  4002aa:	4770      	bx	lr

004002ac <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2201      	movs	r2, #1
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b085      	sub	sp, #20
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	60f8      	str	r0, [r7, #12]
  4002cc:	60b9      	str	r1, [r7, #8]
  4002ce:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002d0:	68bb      	ldr	r3, [r7, #8]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d103      	bne.n	4002de <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	2200      	movs	r2, #0
  4002da:	611a      	str	r2, [r3, #16]
  4002dc:	e01c      	b.n	400318 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	691a      	ldr	r2, [r3, #16]
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ea:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002ec:	68bb      	ldr	r3, [r7, #8]
  4002ee:	689b      	ldr	r3, [r3, #8]
  4002f0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002f6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4002f8:	68bb      	ldr	r3, [r7, #8]
  4002fa:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4002fc:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	691b      	ldr	r3, [r3, #16]
  400302:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400304:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400306:	68bb      	ldr	r3, [r7, #8]
  400308:	695b      	ldr	r3, [r3, #20]
  40030a:	041b      	lsls	r3, r3, #16
  40030c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400310:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400312:	431a      	orrs	r2, r3
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2b00      	cmp	r3, #0
  40031c:	d103      	bne.n	400326 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	2200      	movs	r2, #0
  400322:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400324:	e021      	b.n	40036a <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	695a      	ldr	r2, [r3, #20]
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400336:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	689b      	ldr	r3, [r3, #8]
  40033c:	021b      	lsls	r3, r3, #8
  40033e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400342:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	041b      	lsls	r3, r3, #16
  40034a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40034e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	691b      	ldr	r3, [r3, #16]
  400354:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400356:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40035c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400362:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400364:	431a      	orrs	r2, r3
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	615a      	str	r2, [r3, #20]
}
  40036a:	bf00      	nop
  40036c:	3714      	adds	r7, #20
  40036e:	46bd      	mov	sp, r7
  400370:	bc80      	pop	{r7}
  400372:	4770      	bx	lr

00400374 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400374:	b480      	push	{r7}
  400376:	b083      	sub	sp, #12
  400378:	af00      	add	r7, sp, #0
  40037a:	6078      	str	r0, [r7, #4]
  40037c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	683a      	ldr	r2, [r7, #0]
  400382:	645a      	str	r2, [r3, #68]	; 0x44
}
  400384:	bf00      	nop
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <ssc_disable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
  400396:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IDR = ul_sources;
  400398:	687b      	ldr	r3, [r7, #4]
  40039a:	683a      	ldr	r2, [r7, #0]
  40039c:	649a      	str	r2, [r3, #72]	; 0x48
}
  40039e:	bf00      	nop
  4003a0:	370c      	adds	r7, #12
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bc80      	pop	{r7}
  4003a6:	4770      	bx	lr

004003a8 <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  4003a8:	b480      	push	{r7}
  4003aa:	b083      	sub	sp, #12
  4003ac:	af00      	add	r7, sp, #0
  4003ae:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  4003b0:	687b      	ldr	r3, [r7, #4]
  4003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  4003b4:	4618      	mov	r0, r3
  4003b6:	370c      	adds	r7, #12
  4003b8:	46bd      	mov	sp, r7
  4003ba:	bc80      	pop	{r7}
  4003bc:	4770      	bx	lr

004003be <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4003be:	b480      	push	{r7}
  4003c0:	b085      	sub	sp, #20
  4003c2:	af00      	add	r7, sp, #0
  4003c4:	6078      	str	r0, [r7, #4]
  4003c6:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003c8:	f242 7310 	movw	r3, #10000	; 0x2710
  4003cc:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003ce:	e006      	b.n	4003de <ssc_read+0x20>
		if (!ul_timeout--) {
  4003d0:	68fb      	ldr	r3, [r7, #12]
  4003d2:	1e5a      	subs	r2, r3, #1
  4003d4:	60fa      	str	r2, [r7, #12]
  4003d6:	2b00      	cmp	r3, #0
  4003d8:	d101      	bne.n	4003de <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003da:	2301      	movs	r3, #1
  4003dc:	e00a      	b.n	4003f4 <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003e2:	f003 0310 	and.w	r3, r3, #16
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d0f2      	beq.n	4003d0 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003ea:	687b      	ldr	r3, [r7, #4]
  4003ec:	6a1a      	ldr	r2, [r3, #32]
  4003ee:	683b      	ldr	r3, [r7, #0]
  4003f0:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003f2:	2300      	movs	r3, #0
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3714      	adds	r7, #20
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bc80      	pop	{r7}
  4003fc:	4770      	bx	lr

004003fe <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003fe:	b480      	push	{r7}
  400400:	b087      	sub	sp, #28
  400402:	af00      	add	r7, sp, #0
  400404:	60f8      	str	r0, [r7, #12]
  400406:	60b9      	str	r1, [r7, #8]
  400408:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40040a:	68fa      	ldr	r2, [r7, #12]
  40040c:	68bb      	ldr	r3, [r7, #8]
  40040e:	019b      	lsls	r3, r3, #6
  400410:	4413      	add	r3, r2
  400412:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400414:	697b      	ldr	r3, [r7, #20]
  400416:	2202      	movs	r2, #2
  400418:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40041a:	697b      	ldr	r3, [r7, #20]
  40041c:	f04f 32ff 	mov.w	r2, #4294967295
  400420:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400422:	697b      	ldr	r3, [r7, #20]
  400424:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400426:	697b      	ldr	r3, [r7, #20]
  400428:	687a      	ldr	r2, [r7, #4]
  40042a:	605a      	str	r2, [r3, #4]
}
  40042c:	bf00      	nop
  40042e:	371c      	adds	r7, #28
  400430:	46bd      	mov	sp, r7
  400432:	bc80      	pop	{r7}
  400434:	4770      	bx	lr

00400436 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400436:	b480      	push	{r7}
  400438:	b083      	sub	sp, #12
  40043a:	af00      	add	r7, sp, #0
  40043c:	6078      	str	r0, [r7, #4]
  40043e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400440:	687a      	ldr	r2, [r7, #4]
  400442:	683b      	ldr	r3, [r7, #0]
  400444:	019b      	lsls	r3, r3, #6
  400446:	4413      	add	r3, r2
  400448:	2205      	movs	r2, #5
  40044a:	601a      	str	r2, [r3, #0]
}
  40044c:	bf00      	nop
  40044e:	370c      	adds	r7, #12
  400450:	46bd      	mov	sp, r7
  400452:	bc80      	pop	{r7}
  400454:	4770      	bx	lr

00400456 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400456:	b480      	push	{r7}
  400458:	b085      	sub	sp, #20
  40045a:	af00      	add	r7, sp, #0
  40045c:	60f8      	str	r0, [r7, #12]
  40045e:	60b9      	str	r1, [r7, #8]
  400460:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400462:	68fa      	ldr	r2, [r7, #12]
  400464:	68bb      	ldr	r3, [r7, #8]
  400466:	019b      	lsls	r3, r3, #6
  400468:	4413      	add	r3, r2
  40046a:	331c      	adds	r3, #28
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	601a      	str	r2, [r3, #0]
}
  400470:	bf00      	nop
  400472:	3714      	adds	r7, #20
  400474:	46bd      	mov	sp, r7
  400476:	bc80      	pop	{r7}
  400478:	4770      	bx	lr

0040047a <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40047a:	b480      	push	{r7}
  40047c:	b087      	sub	sp, #28
  40047e:	af00      	add	r7, sp, #0
  400480:	60f8      	str	r0, [r7, #12]
  400482:	60b9      	str	r1, [r7, #8]
  400484:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400486:	68fa      	ldr	r2, [r7, #12]
  400488:	68bb      	ldr	r3, [r7, #8]
  40048a:	019b      	lsls	r3, r3, #6
  40048c:	4413      	add	r3, r2
  40048e:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400490:	697b      	ldr	r3, [r7, #20]
  400492:	687a      	ldr	r2, [r7, #4]
  400494:	625a      	str	r2, [r3, #36]	; 0x24
}
  400496:	bf00      	nop
  400498:	371c      	adds	r7, #28
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b085      	sub	sp, #20
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
  4004a8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004aa:	687a      	ldr	r2, [r7, #4]
  4004ac:	683b      	ldr	r3, [r7, #0]
  4004ae:	019b      	lsls	r3, r3, #6
  4004b0:	4413      	add	r3, r2
  4004b2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	6a1b      	ldr	r3, [r3, #32]
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	3714      	adds	r7, #20
  4004bc:	46bd      	mov	sp, r7
  4004be:	bc80      	pop	{r7}
  4004c0:	4770      	bx	lr

004004c2 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004c2:	b480      	push	{r7}
  4004c4:	b08d      	sub	sp, #52	; 0x34
  4004c6:	af00      	add	r7, sp, #0
  4004c8:	60f8      	str	r0, [r7, #12]
  4004ca:	60b9      	str	r1, [r7, #8]
  4004cc:	607a      	str	r2, [r7, #4]
  4004ce:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004d0:	2302      	movs	r3, #2
  4004d2:	613b      	str	r3, [r7, #16]
  4004d4:	2308      	movs	r3, #8
  4004d6:	617b      	str	r3, [r7, #20]
  4004d8:	2320      	movs	r3, #32
  4004da:	61bb      	str	r3, [r7, #24]
  4004dc:	2380      	movs	r3, #128	; 0x80
  4004de:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004e2:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004e4:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004e6:	2300      	movs	r3, #0
  4004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004ea:	e01a      	b.n	400522 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004ee:	009b      	lsls	r3, r3, #2
  4004f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004f4:	4413      	add	r3, r2
  4004f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004fa:	68ba      	ldr	r2, [r7, #8]
  4004fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400500:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400502:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400504:	0c1b      	lsrs	r3, r3, #16
  400506:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400508:	68fa      	ldr	r2, [r7, #12]
  40050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40050c:	429a      	cmp	r2, r3
  40050e:	d901      	bls.n	400514 <tc_find_mck_divisor+0x52>
			return 0;
  400510:	2300      	movs	r3, #0
  400512:	e023      	b.n	40055c <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400514:	68fa      	ldr	r2, [r7, #12]
  400516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400518:	429a      	cmp	r2, r3
  40051a:	d206      	bcs.n	40052a <tc_find_mck_divisor+0x68>
			ul_index++) {
  40051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40051e:	3301      	adds	r3, #1
  400520:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400524:	2b04      	cmp	r3, #4
  400526:	d9e1      	bls.n	4004ec <tc_find_mck_divisor+0x2a>
  400528:	e000      	b.n	40052c <tc_find_mck_divisor+0x6a>
			break;
  40052a:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40052e:	2b04      	cmp	r3, #4
  400530:	d901      	bls.n	400536 <tc_find_mck_divisor+0x74>
		return 0;
  400532:	2300      	movs	r3, #0
  400534:	e012      	b.n	40055c <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400536:	687b      	ldr	r3, [r7, #4]
  400538:	2b00      	cmp	r3, #0
  40053a:	d008      	beq.n	40054e <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40053e:	009b      	lsls	r3, r3, #2
  400540:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400544:	4413      	add	r3, r2
  400546:	f853 2c20 	ldr.w	r2, [r3, #-32]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40054e:	683b      	ldr	r3, [r7, #0]
  400550:	2b00      	cmp	r3, #0
  400552:	d002      	beq.n	40055a <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400554:	683b      	ldr	r3, [r7, #0]
  400556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400558:	601a      	str	r2, [r3, #0]
	}

	return 1;
  40055a:	2301      	movs	r3, #1
}
  40055c:	4618      	mov	r0, r3
  40055e:	3734      	adds	r7, #52	; 0x34
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400574:	605a      	str	r2, [r3, #4]

}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	4603      	mov	r3, r0
  400588:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40058a:	4908      	ldr	r1, [pc, #32]	; (4005ac <NVIC_EnableIRQ+0x2c>)
  40058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400590:	095b      	lsrs	r3, r3, #5
  400592:	79fa      	ldrb	r2, [r7, #7]
  400594:	f002 021f 	and.w	r2, r2, #31
  400598:	2001      	movs	r0, #1
  40059a:	fa00 f202 	lsl.w	r2, r0, r2
  40059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005a2:	bf00      	nop
  4005a4:	370c      	adds	r7, #12
  4005a6:	46bd      	mov	sp, r7
  4005a8:	bc80      	pop	{r7}
  4005aa:	4770      	bx	lr
  4005ac:	e000e100 	.word	0xe000e100

004005b0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4005b0:	b480      	push	{r7}
  4005b2:	b083      	sub	sp, #12
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	4603      	mov	r3, r0
  4005b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005ba:	4909      	ldr	r1, [pc, #36]	; (4005e0 <NVIC_DisableIRQ+0x30>)
  4005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005c0:	095b      	lsrs	r3, r3, #5
  4005c2:	79fa      	ldrb	r2, [r7, #7]
  4005c4:	f002 021f 	and.w	r2, r2, #31
  4005c8:	2001      	movs	r0, #1
  4005ca:	fa00 f202 	lsl.w	r2, r0, r2
  4005ce:	3320      	adds	r3, #32
  4005d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005d4:	bf00      	nop
  4005d6:	370c      	adds	r7, #12
  4005d8:	46bd      	mov	sp, r7
  4005da:	bc80      	pop	{r7}
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	e000e100 	.word	0xe000e100

004005e4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b083      	sub	sp, #12
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	4603      	mov	r3, r0
  4005ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005ee:	4909      	ldr	r1, [pc, #36]	; (400614 <NVIC_ClearPendingIRQ+0x30>)
  4005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005f4:	095b      	lsrs	r3, r3, #5
  4005f6:	79fa      	ldrb	r2, [r7, #7]
  4005f8:	f002 021f 	and.w	r2, r2, #31
  4005fc:	2001      	movs	r0, #1
  4005fe:	fa00 f202 	lsl.w	r2, r0, r2
  400602:	3360      	adds	r3, #96	; 0x60
  400604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400608:	bf00      	nop
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	e000e100 	.word	0xe000e100

00400618 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	4603      	mov	r3, r0
  400620:	6039      	str	r1, [r7, #0]
  400622:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400624:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400628:	2b00      	cmp	r3, #0
  40062a:	da0b      	bge.n	400644 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40062c:	490d      	ldr	r1, [pc, #52]	; (400664 <NVIC_SetPriority+0x4c>)
  40062e:	79fb      	ldrb	r3, [r7, #7]
  400630:	f003 030f 	and.w	r3, r3, #15
  400634:	3b04      	subs	r3, #4
  400636:	683a      	ldr	r2, [r7, #0]
  400638:	b2d2      	uxtb	r2, r2
  40063a:	0112      	lsls	r2, r2, #4
  40063c:	b2d2      	uxtb	r2, r2
  40063e:	440b      	add	r3, r1
  400640:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400642:	e009      	b.n	400658 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400644:	4908      	ldr	r1, [pc, #32]	; (400668 <NVIC_SetPriority+0x50>)
  400646:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40064a:	683a      	ldr	r2, [r7, #0]
  40064c:	b2d2      	uxtb	r2, r2
  40064e:	0112      	lsls	r2, r2, #4
  400650:	b2d2      	uxtb	r2, r2
  400652:	440b      	add	r3, r1
  400654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400658:	bf00      	nop
  40065a:	370c      	adds	r7, #12
  40065c:	46bd      	mov	sp, r7
  40065e:	bc80      	pop	{r7}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	e000ed00 	.word	0xe000ed00
  400668:	e000e100 	.word	0xe000e100

0040066c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40066c:	b480      	push	{r7}
  40066e:	b083      	sub	sp, #12
  400670:	af00      	add	r7, sp, #0
  400672:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400674:	687b      	ldr	r3, [r7, #4]
  400676:	2b07      	cmp	r3, #7
  400678:	d825      	bhi.n	4006c6 <osc_get_rate+0x5a>
  40067a:	a201      	add	r2, pc, #4	; (adr r2, 400680 <osc_get_rate+0x14>)
  40067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400680:	004006a1 	.word	0x004006a1
  400684:	004006a7 	.word	0x004006a7
  400688:	004006ad 	.word	0x004006ad
  40068c:	004006b3 	.word	0x004006b3
  400690:	004006b7 	.word	0x004006b7
  400694:	004006bb 	.word	0x004006bb
  400698:	004006bf 	.word	0x004006bf
  40069c:	004006c3 	.word	0x004006c3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006a4:	e010      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4006a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006aa:	e00d      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4006ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006b0:	e00a      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4006b2:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <osc_get_rate+0x68>)
  4006b4:	e008      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4006b6:	4b08      	ldr	r3, [pc, #32]	; (4006d8 <osc_get_rate+0x6c>)
  4006b8:	e006      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006ba:	4b08      	ldr	r3, [pc, #32]	; (4006dc <osc_get_rate+0x70>)
  4006bc:	e004      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006be:	4b07      	ldr	r3, [pc, #28]	; (4006dc <osc_get_rate+0x70>)
  4006c0:	e002      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006c2:	4b06      	ldr	r3, [pc, #24]	; (4006dc <osc_get_rate+0x70>)
  4006c4:	e000      	b.n	4006c8 <osc_get_rate+0x5c>
	}

	return 0;
  4006c6:	2300      	movs	r3, #0
}
  4006c8:	4618      	mov	r0, r3
  4006ca:	370c      	adds	r7, #12
  4006cc:	46bd      	mov	sp, r7
  4006ce:	bc80      	pop	{r7}
  4006d0:	4770      	bx	lr
  4006d2:	bf00      	nop
  4006d4:	003d0900 	.word	0x003d0900
  4006d8:	007a1200 	.word	0x007a1200
  4006dc:	00b71b00 	.word	0x00b71b00

004006e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006e4:	2006      	movs	r0, #6
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <sysclk_get_main_hz+0x18>)
  4006e8:	4798      	blx	r3
  4006ea:	4602      	mov	r2, r0
  4006ec:	4613      	mov	r3, r2
  4006ee:	009b      	lsls	r3, r3, #2
  4006f0:	4413      	add	r3, r2
  4006f2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006f4:	4618      	mov	r0, r3
  4006f6:	bd80      	pop	{r7, pc}
  4006f8:	0040066d 	.word	0x0040066d

004006fc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <sysclk_get_cpu_hz+0x10>)
  400702:	4798      	blx	r3
  400704:	4603      	mov	r3, r0
  400706:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400708:	4618      	mov	r0, r3
  40070a:	bd80      	pop	{r7, pc}
  40070c:	004006e1 	.word	0x004006e1

00400710 <i2s_capture>:
volatile uint8_t i2s_rec_done = 0;

/** Receive index. */
volatile uint32_t i2s_buf_index = 0;

void i2s_capture(void){
  400710:	b580      	push	{r7, lr}
  400712:	af00      	add	r7, sp, #0
	i2s_rec_done = 0;
  400714:	4b09      	ldr	r3, [pc, #36]	; (40073c <i2s_capture+0x2c>)
  400716:	2200      	movs	r2, #0
  400718:	701a      	strb	r2, [r3, #0]
	i2s_buf_index = 0;
  40071a:	4b09      	ldr	r3, [pc, #36]	; (400740 <i2s_capture+0x30>)
  40071c:	2200      	movs	r2, #0
  40071e:	601a      	str	r2, [r3, #0]

	ssc_enable_interrupt(SSC, SSC_IDR_RXRDY);	
  400720:	2110      	movs	r1, #16
  400722:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400726:	4b07      	ldr	r3, [pc, #28]	; (400744 <i2s_capture+0x34>)
  400728:	4798      	blx	r3
	while (!i2s_rec_done) {}
  40072a:	bf00      	nop
  40072c:	4b03      	ldr	r3, [pc, #12]	; (40073c <i2s_capture+0x2c>)
  40072e:	781b      	ldrb	r3, [r3, #0]
  400730:	b2db      	uxtb	r3, r3
  400732:	2b00      	cmp	r3, #0
  400734:	d0fa      	beq.n	40072c <i2s_capture+0x1c>
}
  400736:	bf00      	nop
  400738:	bd80      	pop	{r7, pc}
  40073a:	bf00      	nop
  40073c:	20000b68 	.word	0x20000b68
  400740:	20000b6c 	.word	0x20000b6c
  400744:	00400375 	.word	0x00400375

00400748 <SSC_Handler>:
/**
 * \brief Synchronous Serial Controller Handler.
 *
 */
void SSC_Handler(void)
{
  400748:	b590      	push	{r4, r7, lr}
  40074a:	b083      	sub	sp, #12
  40074c:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40074e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400752:	4b13      	ldr	r3, [pc, #76]	; (4007a0 <SSC_Handler+0x58>)
  400754:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  400756:	1d3b      	adds	r3, r7, #4
  400758:	4619      	mov	r1, r3
  40075a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40075e:	4b11      	ldr	r3, [pc, #68]	; (4007a4 <SSC_Handler+0x5c>)
  400760:	4798      	blx	r3
	
	i2s_rec_buf[i2s_buf_index++] = modify_data(ul_data);
  400762:	4b11      	ldr	r3, [pc, #68]	; (4007a8 <SSC_Handler+0x60>)
  400764:	681c      	ldr	r4, [r3, #0]
  400766:	1c63      	adds	r3, r4, #1
  400768:	4a0f      	ldr	r2, [pc, #60]	; (4007a8 <SSC_Handler+0x60>)
  40076a:	6013      	str	r3, [r2, #0]
  40076c:	687b      	ldr	r3, [r7, #4]
  40076e:	4618      	mov	r0, r3
  400770:	4b0e      	ldr	r3, [pc, #56]	; (4007ac <SSC_Handler+0x64>)
  400772:	4798      	blx	r3
  400774:	4603      	mov	r3, r0
  400776:	461a      	mov	r2, r3
  400778:	4b0d      	ldr	r3, [pc, #52]	; (4007b0 <SSC_Handler+0x68>)
  40077a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (NUMBER_OF_SAMPLES == i2s_buf_index) {
  40077e:	4b0a      	ldr	r3, [pc, #40]	; (4007a8 <SSC_Handler+0x60>)
  400780:	681b      	ldr	r3, [r3, #0]
  400782:	2bc8      	cmp	r3, #200	; 0xc8
  400784:	d107      	bne.n	400796 <SSC_Handler+0x4e>
		i2s_rec_done = 1;
  400786:	4b0b      	ldr	r3, [pc, #44]	; (4007b4 <SSC_Handler+0x6c>)
  400788:	2201      	movs	r2, #1
  40078a:	701a      	strb	r2, [r3, #0]
		ssc_disable_interrupt(SSC, SSC_IDR_RXRDY);
  40078c:	2110      	movs	r1, #16
  40078e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400792:	4b09      	ldr	r3, [pc, #36]	; (4007b8 <SSC_Handler+0x70>)
  400794:	4798      	blx	r3
	}
}
  400796:	bf00      	nop
  400798:	370c      	adds	r7, #12
  40079a:	46bd      	mov	sp, r7
  40079c:	bd90      	pop	{r4, r7, pc}
  40079e:	bf00      	nop
  4007a0:	004003a9 	.word	0x004003a9
  4007a4:	004003bf 	.word	0x004003bf
  4007a8:	20000b6c 	.word	0x20000b6c
  4007ac:	004007bd 	.word	0x004007bd
  4007b0:	200009d8 	.word	0x200009d8
  4007b4:	20000b68 	.word	0x20000b68
  4007b8:	0040038f 	.word	0x0040038f

004007bc <modify_data>:

uint16_t modify_data(uint32_t data_to_modify) {
  4007bc:	b480      	push	{r7}
  4007be:	b083      	sub	sp, #12
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	6078      	str	r0, [r7, #4]
	// get rid of zero padding and tristated signal
	return (uint16_t) (data_to_modify >> 16);
  4007c4:	687b      	ldr	r3, [r7, #4]
  4007c6:	0c1b      	lsrs	r3, r3, #16
  4007c8:	b29b      	uxth	r3, r3
}
  4007ca:	4618      	mov	r0, r3
  4007cc:	370c      	adds	r7, #12
  4007ce:	46bd      	mov	sp, r7
  4007d0:	bc80      	pop	{r7}
  4007d2:	4770      	bx	lr

004007d4 <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void){
  4007d4:	b590      	push	{r4, r7, lr}
  4007d6:	b085      	sub	sp, #20
  4007d8:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007da:	2016      	movs	r0, #22
  4007dc:	4b18      	ldr	r3, [pc, #96]	; (400840 <configure_i2s+0x6c>)
  4007de:	4798      	blx	r3
	ssc_reset(SSC);
  4007e0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007e4:	4b17      	ldr	r3, [pc, #92]	; (400844 <configure_i2s+0x70>)
  4007e6:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007e8:	4b17      	ldr	r3, [pc, #92]	; (400848 <configure_i2s+0x74>)
  4007ea:	4798      	blx	r3
  4007ec:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007ee:	687a      	ldr	r2, [r7, #4]
  4007f0:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007f4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007f8:	4b14      	ldr	r3, [pc, #80]	; (40084c <configure_i2s+0x78>)
  4007fa:	4798      	blx	r3
  4007fc:	4603      	mov	r3, r0
  4007fe:	2b00      	cmp	r3, #0
  400800:	d11a      	bne.n	400838 <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  400802:	2320      	movs	r3, #32
  400804:	9300      	str	r3, [sp, #0]
  400806:	2301      	movs	r3, #1
  400808:	2202      	movs	r2, #2
  40080a:	2102      	movs	r1, #2
  40080c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400810:	4c0f      	ldr	r4, [pc, #60]	; (400850 <configure_i2s+0x7c>)
  400812:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  400814:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400818:	4b0e      	ldr	r3, [pc, #56]	; (400854 <configure_i2s+0x80>)
  40081a:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  40081c:	2016      	movs	r0, #22
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <configure_i2s+0x84>)
  400820:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  400822:	2016      	movs	r0, #22
  400824:	4b0d      	ldr	r3, [pc, #52]	; (40085c <configure_i2s+0x88>)
  400826:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  400828:	2104      	movs	r1, #4
  40082a:	2016      	movs	r0, #22
  40082c:	4b0c      	ldr	r3, [pc, #48]	; (400860 <configure_i2s+0x8c>)
  40082e:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400830:	2016      	movs	r0, #22
  400832:	4b0c      	ldr	r3, [pc, #48]	; (400864 <configure_i2s+0x90>)
  400834:	4798      	blx	r3
  400836:	e000      	b.n	40083a <configure_i2s+0x66>
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  400838:	bf00      	nop
}
  40083a:	370c      	adds	r7, #12
  40083c:	46bd      	mov	sp, r7
  40083e:	bd90      	pop	{r4, r7, pc}
  400840:	0040239d 	.word	0x0040239d
  400844:	00400275 	.word	0x00400275
  400848:	004006fd 	.word	0x004006fd
  40084c:	00400139 	.word	0x00400139
  400850:	00400179 	.word	0x00400179
  400854:	004002ad 	.word	0x004002ad
  400858:	004005b1 	.word	0x004005b1
  40085c:	004005e5 	.word	0x004005e5
  400860:	00400619 	.word	0x00400619
  400864:	00400581 	.word	0x00400581

00400868 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400868:	b580      	push	{r7, lr}
  40086a:	b084      	sub	sp, #16
  40086c:	af00      	add	r7, sp, #0
  40086e:	6078      	str	r0, [r7, #4]
  400870:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400872:	6878      	ldr	r0, [r7, #4]
  400874:	4b2c      	ldr	r3, [pc, #176]	; (400928 <pio_handler_process+0xc0>)
  400876:	4798      	blx	r3
  400878:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40087a:	6878      	ldr	r0, [r7, #4]
  40087c:	4b2b      	ldr	r3, [pc, #172]	; (40092c <pio_handler_process+0xc4>)
  40087e:	4798      	blx	r3
  400880:	4602      	mov	r2, r0
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	4013      	ands	r3, r2
  400886:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	2b00      	cmp	r3, #0
  40088c:	d03c      	beq.n	400908 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40088e:	2300      	movs	r3, #0
  400890:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400892:	e034      	b.n	4008fe <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400894:	4a26      	ldr	r2, [pc, #152]	; (400930 <pio_handler_process+0xc8>)
  400896:	68bb      	ldr	r3, [r7, #8]
  400898:	011b      	lsls	r3, r3, #4
  40089a:	4413      	add	r3, r2
  40089c:	681a      	ldr	r2, [r3, #0]
  40089e:	683b      	ldr	r3, [r7, #0]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d126      	bne.n	4008f2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008a4:	4a22      	ldr	r2, [pc, #136]	; (400930 <pio_handler_process+0xc8>)
  4008a6:	68bb      	ldr	r3, [r7, #8]
  4008a8:	011b      	lsls	r3, r3, #4
  4008aa:	4413      	add	r3, r2
  4008ac:	3304      	adds	r3, #4
  4008ae:	681a      	ldr	r2, [r3, #0]
  4008b0:	68fb      	ldr	r3, [r7, #12]
  4008b2:	4013      	ands	r3, r2
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d01c      	beq.n	4008f2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008b8:	4a1d      	ldr	r2, [pc, #116]	; (400930 <pio_handler_process+0xc8>)
  4008ba:	68bb      	ldr	r3, [r7, #8]
  4008bc:	011b      	lsls	r3, r3, #4
  4008be:	4413      	add	r3, r2
  4008c0:	330c      	adds	r3, #12
  4008c2:	681b      	ldr	r3, [r3, #0]
  4008c4:	491a      	ldr	r1, [pc, #104]	; (400930 <pio_handler_process+0xc8>)
  4008c6:	68ba      	ldr	r2, [r7, #8]
  4008c8:	0112      	lsls	r2, r2, #4
  4008ca:	440a      	add	r2, r1
  4008cc:	6810      	ldr	r0, [r2, #0]
  4008ce:	4918      	ldr	r1, [pc, #96]	; (400930 <pio_handler_process+0xc8>)
  4008d0:	68ba      	ldr	r2, [r7, #8]
  4008d2:	0112      	lsls	r2, r2, #4
  4008d4:	440a      	add	r2, r1
  4008d6:	3204      	adds	r2, #4
  4008d8:	6812      	ldr	r2, [r2, #0]
  4008da:	4611      	mov	r1, r2
  4008dc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008de:	4a14      	ldr	r2, [pc, #80]	; (400930 <pio_handler_process+0xc8>)
  4008e0:	68bb      	ldr	r3, [r7, #8]
  4008e2:	011b      	lsls	r3, r3, #4
  4008e4:	4413      	add	r3, r2
  4008e6:	3304      	adds	r3, #4
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	43db      	mvns	r3, r3
  4008ec:	68fa      	ldr	r2, [r7, #12]
  4008ee:	4013      	ands	r3, r2
  4008f0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008f2:	68bb      	ldr	r3, [r7, #8]
  4008f4:	3301      	adds	r3, #1
  4008f6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008f8:	68bb      	ldr	r3, [r7, #8]
  4008fa:	2b06      	cmp	r3, #6
  4008fc:	d803      	bhi.n	400906 <pio_handler_process+0x9e>
		while (status != 0) {
  4008fe:	68fb      	ldr	r3, [r7, #12]
  400900:	2b00      	cmp	r3, #0
  400902:	d1c7      	bne.n	400894 <pio_handler_process+0x2c>
  400904:	e000      	b.n	400908 <pio_handler_process+0xa0>
				break;
  400906:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400908:	4b0a      	ldr	r3, [pc, #40]	; (400934 <pio_handler_process+0xcc>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	2b00      	cmp	r3, #0
  40090e:	d007      	beq.n	400920 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400910:	4b09      	ldr	r3, [pc, #36]	; (400938 <pio_handler_process+0xd0>)
  400912:	681b      	ldr	r3, [r3, #0]
  400914:	2b00      	cmp	r3, #0
  400916:	d003      	beq.n	400920 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400918:	4b07      	ldr	r3, [pc, #28]	; (400938 <pio_handler_process+0xd0>)
  40091a:	681b      	ldr	r3, [r3, #0]
  40091c:	6878      	ldr	r0, [r7, #4]
  40091e:	4798      	blx	r3
		}
	}
#endif
}
  400920:	bf00      	nop
  400922:	3710      	adds	r7, #16
  400924:	46bd      	mov	sp, r7
  400926:	bd80      	pop	{r7, pc}
  400928:	00401f4f 	.word	0x00401f4f
  40092c:	00401f65 	.word	0x00401f65
  400930:	20000b70 	.word	0x20000b70
  400934:	20000e34 	.word	0x20000e34
  400938:	20000be4 	.word	0x20000be4

0040093c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40093c:	b580      	push	{r7, lr}
  40093e:	b086      	sub	sp, #24
  400940:	af00      	add	r7, sp, #0
  400942:	60f8      	str	r0, [r7, #12]
  400944:	60b9      	str	r1, [r7, #8]
  400946:	607a      	str	r2, [r7, #4]
  400948:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40094a:	4b21      	ldr	r3, [pc, #132]	; (4009d0 <pio_handler_set+0x94>)
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	2b06      	cmp	r3, #6
  400950:	d901      	bls.n	400956 <pio_handler_set+0x1a>
		return 1;
  400952:	2301      	movs	r3, #1
  400954:	e038      	b.n	4009c8 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400956:	2300      	movs	r3, #0
  400958:	75fb      	strb	r3, [r7, #23]
  40095a:	e011      	b.n	400980 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40095c:	7dfb      	ldrb	r3, [r7, #23]
  40095e:	011b      	lsls	r3, r3, #4
  400960:	4a1c      	ldr	r2, [pc, #112]	; (4009d4 <pio_handler_set+0x98>)
  400962:	4413      	add	r3, r2
  400964:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400966:	693b      	ldr	r3, [r7, #16]
  400968:	681a      	ldr	r2, [r3, #0]
  40096a:	68bb      	ldr	r3, [r7, #8]
  40096c:	429a      	cmp	r2, r3
  40096e:	d104      	bne.n	40097a <pio_handler_set+0x3e>
  400970:	693b      	ldr	r3, [r7, #16]
  400972:	685a      	ldr	r2, [r3, #4]
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	429a      	cmp	r2, r3
  400978:	d008      	beq.n	40098c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40097a:	7dfb      	ldrb	r3, [r7, #23]
  40097c:	3301      	adds	r3, #1
  40097e:	75fb      	strb	r3, [r7, #23]
  400980:	7dfa      	ldrb	r2, [r7, #23]
  400982:	4b13      	ldr	r3, [pc, #76]	; (4009d0 <pio_handler_set+0x94>)
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	429a      	cmp	r2, r3
  400988:	d9e8      	bls.n	40095c <pio_handler_set+0x20>
  40098a:	e000      	b.n	40098e <pio_handler_set+0x52>
			break;
  40098c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40098e:	693b      	ldr	r3, [r7, #16]
  400990:	68ba      	ldr	r2, [r7, #8]
  400992:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400994:	693b      	ldr	r3, [r7, #16]
  400996:	687a      	ldr	r2, [r7, #4]
  400998:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40099a:	693b      	ldr	r3, [r7, #16]
  40099c:	683a      	ldr	r2, [r7, #0]
  40099e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4009a0:	693b      	ldr	r3, [r7, #16]
  4009a2:	6a3a      	ldr	r2, [r7, #32]
  4009a4:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4009a6:	7dfa      	ldrb	r2, [r7, #23]
  4009a8:	4b09      	ldr	r3, [pc, #36]	; (4009d0 <pio_handler_set+0x94>)
  4009aa:	681b      	ldr	r3, [r3, #0]
  4009ac:	3301      	adds	r3, #1
  4009ae:	429a      	cmp	r2, r3
  4009b0:	d104      	bne.n	4009bc <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4009b2:	4b07      	ldr	r3, [pc, #28]	; (4009d0 <pio_handler_set+0x94>)
  4009b4:	681b      	ldr	r3, [r3, #0]
  4009b6:	3301      	adds	r3, #1
  4009b8:	4a05      	ldr	r2, [pc, #20]	; (4009d0 <pio_handler_set+0x94>)
  4009ba:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009bc:	683a      	ldr	r2, [r7, #0]
  4009be:	6879      	ldr	r1, [r7, #4]
  4009c0:	68f8      	ldr	r0, [r7, #12]
  4009c2:	4b05      	ldr	r3, [pc, #20]	; (4009d8 <pio_handler_set+0x9c>)
  4009c4:	4798      	blx	r3

	return 0;
  4009c6:	2300      	movs	r3, #0
}
  4009c8:	4618      	mov	r0, r3
  4009ca:	3718      	adds	r7, #24
  4009cc:	46bd      	mov	sp, r7
  4009ce:	bd80      	pop	{r7, pc}
  4009d0:	20000be0 	.word	0x20000be0
  4009d4:	20000b70 	.word	0x20000b70
  4009d8:	00401eb1 	.word	0x00401eb1

004009dc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009e0:	210b      	movs	r1, #11
  4009e2:	4802      	ldr	r0, [pc, #8]	; (4009ec <PIOA_Handler+0x10>)
  4009e4:	4b02      	ldr	r3, [pc, #8]	; (4009f0 <PIOA_Handler+0x14>)
  4009e6:	4798      	blx	r3
}
  4009e8:	bf00      	nop
  4009ea:	bd80      	pop	{r7, pc}
  4009ec:	400e0e00 	.word	0x400e0e00
  4009f0:	00400869 	.word	0x00400869

004009f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009f4:	b580      	push	{r7, lr}
  4009f6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009f8:	210c      	movs	r1, #12
  4009fa:	4802      	ldr	r0, [pc, #8]	; (400a04 <PIOB_Handler+0x10>)
  4009fc:	4b02      	ldr	r3, [pc, #8]	; (400a08 <PIOB_Handler+0x14>)
  4009fe:	4798      	blx	r3
}
  400a00:	bf00      	nop
  400a02:	bd80      	pop	{r7, pc}
  400a04:	400e1000 	.word	0x400e1000
  400a08:	00400869 	.word	0x00400869

00400a0c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a0c:	b480      	push	{r7}
  400a0e:	b089      	sub	sp, #36	; 0x24
  400a10:	af00      	add	r7, sp, #0
  400a12:	60f8      	str	r0, [r7, #12]
  400a14:	60b9      	str	r1, [r7, #8]
  400a16:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a18:	68bb      	ldr	r3, [r7, #8]
  400a1a:	011a      	lsls	r2, r3, #4
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	429a      	cmp	r2, r3
  400a20:	d802      	bhi.n	400a28 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400a22:	2310      	movs	r3, #16
  400a24:	61fb      	str	r3, [r7, #28]
  400a26:	e001      	b.n	400a2c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400a28:	2308      	movs	r3, #8
  400a2a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a2c:	687b      	ldr	r3, [r7, #4]
  400a2e:	00da      	lsls	r2, r3, #3
  400a30:	69fb      	ldr	r3, [r7, #28]
  400a32:	68b9      	ldr	r1, [r7, #8]
  400a34:	fb01 f303 	mul.w	r3, r1, r3
  400a38:	085b      	lsrs	r3, r3, #1
  400a3a:	441a      	add	r2, r3
  400a3c:	69fb      	ldr	r3, [r7, #28]
  400a3e:	68b9      	ldr	r1, [r7, #8]
  400a40:	fb01 f303 	mul.w	r3, r1, r3
  400a44:	fbb2 f3f3 	udiv	r3, r2, r3
  400a48:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	08db      	lsrs	r3, r3, #3
  400a4e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400a50:	69bb      	ldr	r3, [r7, #24]
  400a52:	f003 0307 	and.w	r3, r3, #7
  400a56:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a58:	697b      	ldr	r3, [r7, #20]
  400a5a:	2b00      	cmp	r3, #0
  400a5c:	d003      	beq.n	400a66 <usart_set_async_baudrate+0x5a>
  400a5e:	697b      	ldr	r3, [r7, #20]
  400a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400a64:	d301      	bcc.n	400a6a <usart_set_async_baudrate+0x5e>
		return 1;
  400a66:	2301      	movs	r3, #1
  400a68:	e00f      	b.n	400a8a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400a6a:	69fb      	ldr	r3, [r7, #28]
  400a6c:	2b08      	cmp	r3, #8
  400a6e:	d105      	bne.n	400a7c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400a70:	68fb      	ldr	r3, [r7, #12]
  400a72:	685b      	ldr	r3, [r3, #4]
  400a74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400a78:	68fb      	ldr	r3, [r7, #12]
  400a7a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a7c:	693b      	ldr	r3, [r7, #16]
  400a7e:	041a      	lsls	r2, r3, #16
  400a80:	697b      	ldr	r3, [r7, #20]
  400a82:	431a      	orrs	r2, r3
  400a84:	68fb      	ldr	r3, [r7, #12]
  400a86:	621a      	str	r2, [r3, #32]

	return 0;
  400a88:	2300      	movs	r3, #0
}
  400a8a:	4618      	mov	r0, r3
  400a8c:	3724      	adds	r7, #36	; 0x24
  400a8e:	46bd      	mov	sp, r7
  400a90:	bc80      	pop	{r7}
  400a92:	4770      	bx	lr

00400a94 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400a94:	b580      	push	{r7, lr}
  400a96:	b082      	sub	sp, #8
  400a98:	af00      	add	r7, sp, #0
  400a9a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400a9c:	6878      	ldr	r0, [r7, #4]
  400a9e:	4b0f      	ldr	r3, [pc, #60]	; (400adc <usart_reset+0x48>)
  400aa0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	2200      	movs	r2, #0
  400aa6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400aa8:	687b      	ldr	r3, [r7, #4]
  400aaa:	2200      	movs	r2, #0
  400aac:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400aae:	687b      	ldr	r3, [r7, #4]
  400ab0:	2200      	movs	r2, #0
  400ab2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400ab4:	6878      	ldr	r0, [r7, #4]
  400ab6:	4b0a      	ldr	r3, [pc, #40]	; (400ae0 <usart_reset+0x4c>)
  400ab8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400aba:	6878      	ldr	r0, [r7, #4]
  400abc:	4b09      	ldr	r3, [pc, #36]	; (400ae4 <usart_reset+0x50>)
  400abe:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400ac0:	6878      	ldr	r0, [r7, #4]
  400ac2:	4b09      	ldr	r3, [pc, #36]	; (400ae8 <usart_reset+0x54>)
  400ac4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400ac6:	6878      	ldr	r0, [r7, #4]
  400ac8:	4b08      	ldr	r3, [pc, #32]	; (400aec <usart_reset+0x58>)
  400aca:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400acc:	6878      	ldr	r0, [r7, #4]
  400ace:	4b08      	ldr	r3, [pc, #32]	; (400af0 <usart_reset+0x5c>)
  400ad0:	4798      	blx	r3
#endif
}
  400ad2:	bf00      	nop
  400ad4:	3708      	adds	r7, #8
  400ad6:	46bd      	mov	sp, r7
  400ad8:	bd80      	pop	{r7, pc}
  400ada:	bf00      	nop
  400adc:	00400d45 	.word	0x00400d45
  400ae0:	00400bd1 	.word	0x00400bd1
  400ae4:	00400c01 	.word	0x00400c01
  400ae8:	00400c63 	.word	0x00400c63
  400aec:	00400c97 	.word	0x00400c97
  400af0:	00400c7d 	.word	0x00400c7d

00400af4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400af4:	b580      	push	{r7, lr}
  400af6:	b084      	sub	sp, #16
  400af8:	af00      	add	r7, sp, #0
  400afa:	60f8      	str	r0, [r7, #12]
  400afc:	60b9      	str	r1, [r7, #8]
  400afe:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400b00:	68f8      	ldr	r0, [r7, #12]
  400b02:	4b1a      	ldr	r3, [pc, #104]	; (400b6c <usart_init_rs232+0x78>)
  400b04:	4798      	blx	r3

	ul_reg_val = 0;
  400b06:	4b1a      	ldr	r3, [pc, #104]	; (400b70 <usart_init_rs232+0x7c>)
  400b08:	2200      	movs	r2, #0
  400b0a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400b0c:	68bb      	ldr	r3, [r7, #8]
  400b0e:	2b00      	cmp	r3, #0
  400b10:	d009      	beq.n	400b26 <usart_init_rs232+0x32>
  400b12:	68bb      	ldr	r3, [r7, #8]
  400b14:	681b      	ldr	r3, [r3, #0]
  400b16:	687a      	ldr	r2, [r7, #4]
  400b18:	4619      	mov	r1, r3
  400b1a:	68f8      	ldr	r0, [r7, #12]
  400b1c:	4b15      	ldr	r3, [pc, #84]	; (400b74 <usart_init_rs232+0x80>)
  400b1e:	4798      	blx	r3
  400b20:	4603      	mov	r3, r0
  400b22:	2b00      	cmp	r3, #0
  400b24:	d001      	beq.n	400b2a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400b26:	2301      	movs	r3, #1
  400b28:	e01b      	b.n	400b62 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b2a:	68bb      	ldr	r3, [r7, #8]
  400b2c:	685a      	ldr	r2, [r3, #4]
  400b2e:	68bb      	ldr	r3, [r7, #8]
  400b30:	689b      	ldr	r3, [r3, #8]
  400b32:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b34:	68bb      	ldr	r3, [r7, #8]
  400b36:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b38:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b3a:	68bb      	ldr	r3, [r7, #8]
  400b3c:	68db      	ldr	r3, [r3, #12]
  400b3e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b40:	4b0b      	ldr	r3, [pc, #44]	; (400b70 <usart_init_rs232+0x7c>)
  400b42:	681b      	ldr	r3, [r3, #0]
  400b44:	4313      	orrs	r3, r2
  400b46:	4a0a      	ldr	r2, [pc, #40]	; (400b70 <usart_init_rs232+0x7c>)
  400b48:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400b4a:	4b09      	ldr	r3, [pc, #36]	; (400b70 <usart_init_rs232+0x7c>)
  400b4c:	681b      	ldr	r3, [r3, #0]
  400b4e:	4a08      	ldr	r2, [pc, #32]	; (400b70 <usart_init_rs232+0x7c>)
  400b50:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400b52:	68fb      	ldr	r3, [r7, #12]
  400b54:	685a      	ldr	r2, [r3, #4]
  400b56:	4b06      	ldr	r3, [pc, #24]	; (400b70 <usart_init_rs232+0x7c>)
  400b58:	681b      	ldr	r3, [r3, #0]
  400b5a:	431a      	orrs	r2, r3
  400b5c:	68fb      	ldr	r3, [r7, #12]
  400b5e:	605a      	str	r2, [r3, #4]

	return 0;
  400b60:	2300      	movs	r3, #0
}
  400b62:	4618      	mov	r0, r3
  400b64:	3710      	adds	r7, #16
  400b66:	46bd      	mov	sp, r7
  400b68:	bd80      	pop	{r7, pc}
  400b6a:	bf00      	nop
  400b6c:	00400a95 	.word	0x00400a95
  400b70:	20000be8 	.word	0x20000be8
  400b74:	00400a0d 	.word	0x00400a0d

00400b78 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400b78:	b580      	push	{r7, lr}
  400b7a:	b084      	sub	sp, #16
  400b7c:	af00      	add	r7, sp, #0
  400b7e:	60f8      	str	r0, [r7, #12]
  400b80:	60b9      	str	r1, [r7, #8]
  400b82:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400b84:	687a      	ldr	r2, [r7, #4]
  400b86:	68b9      	ldr	r1, [r7, #8]
  400b88:	68f8      	ldr	r0, [r7, #12]
  400b8a:	4b0a      	ldr	r3, [pc, #40]	; (400bb4 <usart_init_hw_handshaking+0x3c>)
  400b8c:	4798      	blx	r3
  400b8e:	4603      	mov	r3, r0
  400b90:	2b00      	cmp	r3, #0
  400b92:	d001      	beq.n	400b98 <usart_init_hw_handshaking+0x20>
		return 1;
  400b94:	2301      	movs	r3, #1
  400b96:	e008      	b.n	400baa <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400b98:	68fb      	ldr	r3, [r7, #12]
  400b9a:	685b      	ldr	r3, [r3, #4]
  400b9c:	f023 030f 	bic.w	r3, r3, #15
  400ba0:	f043 0202 	orr.w	r2, r3, #2
  400ba4:	68fb      	ldr	r3, [r7, #12]
  400ba6:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400ba8:	2300      	movs	r3, #0
}
  400baa:	4618      	mov	r0, r3
  400bac:	3710      	adds	r7, #16
  400bae:	46bd      	mov	sp, r7
  400bb0:	bd80      	pop	{r7, pc}
  400bb2:	bf00      	nop
  400bb4:	00400af5 	.word	0x00400af5

00400bb8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400bb8:	b480      	push	{r7}
  400bba:	b083      	sub	sp, #12
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	2240      	movs	r2, #64	; 0x40
  400bc4:	601a      	str	r2, [r3, #0]
}
  400bc6:	bf00      	nop
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	bc80      	pop	{r7}
  400bce:	4770      	bx	lr

00400bd0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400bd0:	b480      	push	{r7}
  400bd2:	b083      	sub	sp, #12
  400bd4:	af00      	add	r7, sp, #0
  400bd6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bd8:	687b      	ldr	r3, [r7, #4]
  400bda:	2288      	movs	r2, #136	; 0x88
  400bdc:	601a      	str	r2, [r3, #0]
}
  400bde:	bf00      	nop
  400be0:	370c      	adds	r7, #12
  400be2:	46bd      	mov	sp, r7
  400be4:	bc80      	pop	{r7}
  400be6:	4770      	bx	lr

00400be8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	2210      	movs	r2, #16
  400bf4:	601a      	str	r2, [r3, #0]
}
  400bf6:	bf00      	nop
  400bf8:	370c      	adds	r7, #12
  400bfa:	46bd      	mov	sp, r7
  400bfc:	bc80      	pop	{r7}
  400bfe:	4770      	bx	lr

00400c00 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c08:	687b      	ldr	r3, [r7, #4]
  400c0a:	2224      	movs	r2, #36	; 0x24
  400c0c:	601a      	str	r2, [r3, #0]
}
  400c0e:	bf00      	nop
  400c10:	370c      	adds	r7, #12
  400c12:	46bd      	mov	sp, r7
  400c14:	bc80      	pop	{r7}
  400c16:	4770      	bx	lr

00400c18 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c18:	b480      	push	{r7}
  400c1a:	b083      	sub	sp, #12
  400c1c:	af00      	add	r7, sp, #0
  400c1e:	6078      	str	r0, [r7, #4]
  400c20:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400c22:	687b      	ldr	r3, [r7, #4]
  400c24:	683a      	ldr	r2, [r7, #0]
  400c26:	609a      	str	r2, [r3, #8]
}
  400c28:	bf00      	nop
  400c2a:	370c      	adds	r7, #12
  400c2c:	46bd      	mov	sp, r7
  400c2e:	bc80      	pop	{r7}
  400c30:	4770      	bx	lr

00400c32 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c32:	b480      	push	{r7}
  400c34:	b083      	sub	sp, #12
  400c36:	af00      	add	r7, sp, #0
  400c38:	6078      	str	r0, [r7, #4]
  400c3a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	683a      	ldr	r2, [r7, #0]
  400c40:	60da      	str	r2, [r3, #12]
}
  400c42:	bf00      	nop
  400c44:	370c      	adds	r7, #12
  400c46:	46bd      	mov	sp, r7
  400c48:	bc80      	pop	{r7}
  400c4a:	4770      	bx	lr

00400c4c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400c4c:	b480      	push	{r7}
  400c4e:	b083      	sub	sp, #12
  400c50:	af00      	add	r7, sp, #0
  400c52:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	695b      	ldr	r3, [r3, #20]
}
  400c58:	4618      	mov	r0, r3
  400c5a:	370c      	adds	r7, #12
  400c5c:	46bd      	mov	sp, r7
  400c5e:	bc80      	pop	{r7}
  400c60:	4770      	bx	lr

00400c62 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400c62:	b480      	push	{r7}
  400c64:	b083      	sub	sp, #12
  400c66:	af00      	add	r7, sp, #0
  400c68:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c70:	601a      	str	r2, [r3, #0]
}
  400c72:	bf00      	nop
  400c74:	370c      	adds	r7, #12
  400c76:	46bd      	mov	sp, r7
  400c78:	bc80      	pop	{r7}
  400c7a:	4770      	bx	lr

00400c7c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400c8a:	601a      	str	r2, [r3, #0]
}
  400c8c:	bf00      	nop
  400c8e:	370c      	adds	r7, #12
  400c90:	46bd      	mov	sp, r7
  400c92:	bc80      	pop	{r7}
  400c94:	4770      	bx	lr

00400c96 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400c96:	b480      	push	{r7}
  400c98:	b083      	sub	sp, #12
  400c9a:	af00      	add	r7, sp, #0
  400c9c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400c9e:	687b      	ldr	r3, [r7, #4]
  400ca0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ca4:	601a      	str	r2, [r3, #0]
}
  400ca6:	bf00      	nop
  400ca8:	370c      	adds	r7, #12
  400caa:	46bd      	mov	sp, r7
  400cac:	bc80      	pop	{r7}
  400cae:	4770      	bx	lr

00400cb0 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400cb0:	b480      	push	{r7}
  400cb2:	b083      	sub	sp, #12
  400cb4:	af00      	add	r7, sp, #0
  400cb6:	6078      	str	r0, [r7, #4]
  400cb8:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400cba:	bf00      	nop
  400cbc:	687b      	ldr	r3, [r7, #4]
  400cbe:	695b      	ldr	r3, [r3, #20]
  400cc0:	f003 0302 	and.w	r3, r3, #2
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d0f9      	beq.n	400cbc <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400cc8:	683b      	ldr	r3, [r7, #0]
  400cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cce:	687b      	ldr	r3, [r7, #4]
  400cd0:	61da      	str	r2, [r3, #28]

	return 0;
  400cd2:	2300      	movs	r3, #0
}
  400cd4:	4618      	mov	r0, r3
  400cd6:	370c      	adds	r7, #12
  400cd8:	46bd      	mov	sp, r7
  400cda:	bc80      	pop	{r7}
  400cdc:	4770      	bx	lr
	...

00400ce0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400ce0:	b580      	push	{r7, lr}
  400ce2:	b082      	sub	sp, #8
  400ce4:	af00      	add	r7, sp, #0
  400ce6:	6078      	str	r0, [r7, #4]
  400ce8:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400cea:	e007      	b.n	400cfc <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400cec:	683b      	ldr	r3, [r7, #0]
  400cee:	1c5a      	adds	r2, r3, #1
  400cf0:	603a      	str	r2, [r7, #0]
  400cf2:	781b      	ldrb	r3, [r3, #0]
  400cf4:	4619      	mov	r1, r3
  400cf6:	6878      	ldr	r0, [r7, #4]
  400cf8:	4b04      	ldr	r3, [pc, #16]	; (400d0c <usart_write_line+0x2c>)
  400cfa:	4798      	blx	r3
	while (*string != '\0') {
  400cfc:	683b      	ldr	r3, [r7, #0]
  400cfe:	781b      	ldrb	r3, [r3, #0]
  400d00:	2b00      	cmp	r3, #0
  400d02:	d1f3      	bne.n	400cec <usart_write_line+0xc>
	}
}
  400d04:	bf00      	nop
  400d06:	3708      	adds	r7, #8
  400d08:	46bd      	mov	sp, r7
  400d0a:	bd80      	pop	{r7, pc}
  400d0c:	00400cb1 	.word	0x00400cb1

00400d10 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400d10:	b480      	push	{r7}
  400d12:	b083      	sub	sp, #12
  400d14:	af00      	add	r7, sp, #0
  400d16:	6078      	str	r0, [r7, #4]
  400d18:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d1a:	687b      	ldr	r3, [r7, #4]
  400d1c:	695b      	ldr	r3, [r3, #20]
  400d1e:	f003 0301 	and.w	r3, r3, #1
  400d22:	2b00      	cmp	r3, #0
  400d24:	d101      	bne.n	400d2a <usart_read+0x1a>
		return 1;
  400d26:	2301      	movs	r3, #1
  400d28:	e006      	b.n	400d38 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d2a:	687b      	ldr	r3, [r7, #4]
  400d2c:	699b      	ldr	r3, [r3, #24]
  400d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400d32:	683b      	ldr	r3, [r7, #0]
  400d34:	601a      	str	r2, [r3, #0]

	return 0;
  400d36:	2300      	movs	r3, #0
}
  400d38:	4618      	mov	r0, r3
  400d3a:	370c      	adds	r7, #12
  400d3c:	46bd      	mov	sp, r7
  400d3e:	bc80      	pop	{r7}
  400d40:	4770      	bx	lr
	...

00400d44 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400d44:	b480      	push	{r7}
  400d46:	b083      	sub	sp, #12
  400d48:	af00      	add	r7, sp, #0
  400d4a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	4a04      	ldr	r2, [pc, #16]	; (400d60 <usart_disable_writeprotect+0x1c>)
  400d50:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400d54:	bf00      	nop
  400d56:	370c      	adds	r7, #12
  400d58:	46bd      	mov	sp, r7
  400d5a:	bc80      	pop	{r7}
  400d5c:	4770      	bx	lr
  400d5e:	bf00      	nop
  400d60:	55534100 	.word	0x55534100

00400d64 <NVIC_EnableIRQ>:
{
  400d64:	b480      	push	{r7}
  400d66:	b083      	sub	sp, #12
  400d68:	af00      	add	r7, sp, #0
  400d6a:	4603      	mov	r3, r0
  400d6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d6e:	4908      	ldr	r1, [pc, #32]	; (400d90 <NVIC_EnableIRQ+0x2c>)
  400d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d74:	095b      	lsrs	r3, r3, #5
  400d76:	79fa      	ldrb	r2, [r7, #7]
  400d78:	f002 021f 	and.w	r2, r2, #31
  400d7c:	2001      	movs	r0, #1
  400d7e:	fa00 f202 	lsl.w	r2, r0, r2
  400d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400d86:	bf00      	nop
  400d88:	370c      	adds	r7, #12
  400d8a:	46bd      	mov	sp, r7
  400d8c:	bc80      	pop	{r7}
  400d8e:	4770      	bx	lr
  400d90:	e000e100 	.word	0xe000e100

00400d94 <osc_get_rate>:
{
  400d94:	b480      	push	{r7}
  400d96:	b083      	sub	sp, #12
  400d98:	af00      	add	r7, sp, #0
  400d9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d9c:	687b      	ldr	r3, [r7, #4]
  400d9e:	2b07      	cmp	r3, #7
  400da0:	d825      	bhi.n	400dee <osc_get_rate+0x5a>
  400da2:	a201      	add	r2, pc, #4	; (adr r2, 400da8 <osc_get_rate+0x14>)
  400da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400da8:	00400dc9 	.word	0x00400dc9
  400dac:	00400dcf 	.word	0x00400dcf
  400db0:	00400dd5 	.word	0x00400dd5
  400db4:	00400ddb 	.word	0x00400ddb
  400db8:	00400ddf 	.word	0x00400ddf
  400dbc:	00400de3 	.word	0x00400de3
  400dc0:	00400de7 	.word	0x00400de7
  400dc4:	00400deb 	.word	0x00400deb
		return OSC_SLCK_32K_RC_HZ;
  400dc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400dcc:	e010      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dd2:	e00d      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dd8:	e00a      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400dda:	4b08      	ldr	r3, [pc, #32]	; (400dfc <osc_get_rate+0x68>)
  400ddc:	e008      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400dde:	4b08      	ldr	r3, [pc, #32]	; (400e00 <osc_get_rate+0x6c>)
  400de0:	e006      	b.n	400df0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400de2:	4b08      	ldr	r3, [pc, #32]	; (400e04 <osc_get_rate+0x70>)
  400de4:	e004      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400de6:	4b07      	ldr	r3, [pc, #28]	; (400e04 <osc_get_rate+0x70>)
  400de8:	e002      	b.n	400df0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400dea:	4b06      	ldr	r3, [pc, #24]	; (400e04 <osc_get_rate+0x70>)
  400dec:	e000      	b.n	400df0 <osc_get_rate+0x5c>
	return 0;
  400dee:	2300      	movs	r3, #0
}
  400df0:	4618      	mov	r0, r3
  400df2:	370c      	adds	r7, #12
  400df4:	46bd      	mov	sp, r7
  400df6:	bc80      	pop	{r7}
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	003d0900 	.word	0x003d0900
  400e00:	007a1200 	.word	0x007a1200
  400e04:	00b71b00 	.word	0x00b71b00

00400e08 <sysclk_get_main_hz>:
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400e0c:	2006      	movs	r0, #6
  400e0e:	4b04      	ldr	r3, [pc, #16]	; (400e20 <sysclk_get_main_hz+0x18>)
  400e10:	4798      	blx	r3
  400e12:	4602      	mov	r2, r0
  400e14:	4613      	mov	r3, r2
  400e16:	009b      	lsls	r3, r3, #2
  400e18:	4413      	add	r3, r2
  400e1a:	009b      	lsls	r3, r3, #2
}
  400e1c:	4618      	mov	r0, r3
  400e1e:	bd80      	pop	{r7, pc}
  400e20:	00400d95 	.word	0x00400d95

00400e24 <sysclk_get_cpu_hz>:
{
  400e24:	b580      	push	{r7, lr}
  400e26:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400e28:	4b02      	ldr	r3, [pc, #8]	; (400e34 <sysclk_get_cpu_hz+0x10>)
  400e2a:	4798      	blx	r3
  400e2c:	4603      	mov	r3, r0
  400e2e:	085b      	lsrs	r3, r3, #1
}
  400e30:	4618      	mov	r0, r3
  400e32:	bd80      	pop	{r7, pc}
  400e34:	00400e09 	.word	0x00400e09

00400e38 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400e38:	b580      	push	{r7, lr}
  400e3a:	b082      	sub	sp, #8
  400e3c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400e3e:	2100      	movs	r1, #0
  400e40:	4809      	ldr	r0, [pc, #36]	; (400e68 <TC0_Handler+0x30>)
  400e42:	4b0a      	ldr	r3, [pc, #40]	; (400e6c <TC0_Handler+0x34>)
  400e44:	4798      	blx	r3
  400e46:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	f003 0310 	and.w	r3, r3, #16
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d006      	beq.n	400e60 <TC0_Handler+0x28>
		counts++;
  400e52:	4b07      	ldr	r3, [pc, #28]	; (400e70 <TC0_Handler+0x38>)
  400e54:	781b      	ldrb	r3, [r3, #0]
  400e56:	b2db      	uxtb	r3, r3
  400e58:	3301      	adds	r3, #1
  400e5a:	b2da      	uxtb	r2, r3
  400e5c:	4b04      	ldr	r3, [pc, #16]	; (400e70 <TC0_Handler+0x38>)
  400e5e:	701a      	strb	r2, [r3, #0]
	}
}
  400e60:	bf00      	nop
  400e62:	3708      	adds	r7, #8
  400e64:	46bd      	mov	sp, r7
  400e66:	bd80      	pop	{r7, pc}
  400e68:	40010000 	.word	0x40010000
  400e6c:	004004a1 	.word	0x004004a1
  400e70:	20000e30 	.word	0x20000e30

00400e74 <configure_tc>:

void configure_tc(void)
{
  400e74:	b590      	push	{r4, r7, lr}
  400e76:	b087      	sub	sp, #28
  400e78:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400e7a:	4b16      	ldr	r3, [pc, #88]	; (400ed4 <configure_tc+0x60>)
  400e7c:	4798      	blx	r3
  400e7e:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400e80:	2017      	movs	r0, #23
  400e82:	4b15      	ldr	r3, [pc, #84]	; (400ed8 <configure_tc+0x64>)
  400e84:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400e86:	1d39      	adds	r1, r7, #4
  400e88:	f107 0208 	add.w	r2, r7, #8
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	9300      	str	r3, [sp, #0]
  400e90:	460b      	mov	r3, r1
  400e92:	68f9      	ldr	r1, [r7, #12]
  400e94:	2001      	movs	r0, #1
  400e96:	4c11      	ldr	r4, [pc, #68]	; (400edc <configure_tc+0x68>)
  400e98:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400e9a:	687b      	ldr	r3, [r7, #4]
  400e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400ea0:	461a      	mov	r2, r3
  400ea2:	2100      	movs	r1, #0
  400ea4:	480e      	ldr	r0, [pc, #56]	; (400ee0 <configure_tc+0x6c>)
  400ea6:	4b0f      	ldr	r3, [pc, #60]	; (400ee4 <configure_tc+0x70>)
  400ea8:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400eaa:	68bb      	ldr	r3, [r7, #8]
  400eac:	68fa      	ldr	r2, [r7, #12]
  400eae:	fbb2 f3f3 	udiv	r3, r2, r3
  400eb2:	461a      	mov	r2, r3
  400eb4:	2100      	movs	r1, #0
  400eb6:	480a      	ldr	r0, [pc, #40]	; (400ee0 <configure_tc+0x6c>)
  400eb8:	4b0b      	ldr	r3, [pc, #44]	; (400ee8 <configure_tc+0x74>)
  400eba:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400ebc:	2017      	movs	r0, #23
  400ebe:	4b0b      	ldr	r3, [pc, #44]	; (400eec <configure_tc+0x78>)
  400ec0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400ec2:	2210      	movs	r2, #16
  400ec4:	2100      	movs	r1, #0
  400ec6:	4806      	ldr	r0, [pc, #24]	; (400ee0 <configure_tc+0x6c>)
  400ec8:	4b09      	ldr	r3, [pc, #36]	; (400ef0 <configure_tc+0x7c>)
  400eca:	4798      	blx	r3
  400ecc:	bf00      	nop
  400ece:	3714      	adds	r7, #20
  400ed0:	46bd      	mov	sp, r7
  400ed2:	bd90      	pop	{r4, r7, pc}
  400ed4:	00400e25 	.word	0x00400e25
  400ed8:	0040239d 	.word	0x0040239d
  400edc:	004004c3 	.word	0x004004c3
  400ee0:	40010000 	.word	0x40010000
  400ee4:	004003ff 	.word	0x004003ff
  400ee8:	00400457 	.word	0x00400457
  400eec:	00400d65 	.word	0x00400d65
  400ef0:	0040047b 	.word	0x0040047b

00400ef4 <NVIC_EnableIRQ>:
{
  400ef4:	b480      	push	{r7}
  400ef6:	b083      	sub	sp, #12
  400ef8:	af00      	add	r7, sp, #0
  400efa:	4603      	mov	r3, r0
  400efc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400efe:	4908      	ldr	r1, [pc, #32]	; (400f20 <NVIC_EnableIRQ+0x2c>)
  400f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400f04:	095b      	lsrs	r3, r3, #5
  400f06:	79fa      	ldrb	r2, [r7, #7]
  400f08:	f002 021f 	and.w	r2, r2, #31
  400f0c:	2001      	movs	r0, #1
  400f0e:	fa00 f202 	lsl.w	r2, r0, r2
  400f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400f16:	bf00      	nop
  400f18:	370c      	adds	r7, #12
  400f1a:	46bd      	mov	sp, r7
  400f1c:	bc80      	pop	{r7}
  400f1e:	4770      	bx	lr
  400f20:	e000e100 	.word	0xe000e100

00400f24 <osc_get_rate>:
{
  400f24:	b480      	push	{r7}
  400f26:	b083      	sub	sp, #12
  400f28:	af00      	add	r7, sp, #0
  400f2a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	2b07      	cmp	r3, #7
  400f30:	d825      	bhi.n	400f7e <osc_get_rate+0x5a>
  400f32:	a201      	add	r2, pc, #4	; (adr r2, 400f38 <osc_get_rate+0x14>)
  400f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f38:	00400f59 	.word	0x00400f59
  400f3c:	00400f5f 	.word	0x00400f5f
  400f40:	00400f65 	.word	0x00400f65
  400f44:	00400f6b 	.word	0x00400f6b
  400f48:	00400f6f 	.word	0x00400f6f
  400f4c:	00400f73 	.word	0x00400f73
  400f50:	00400f77 	.word	0x00400f77
  400f54:	00400f7b 	.word	0x00400f7b
		return OSC_SLCK_32K_RC_HZ;
  400f58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f5c:	e010      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f62:	e00d      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f68:	e00a      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400f6a:	4b08      	ldr	r3, [pc, #32]	; (400f8c <osc_get_rate+0x68>)
  400f6c:	e008      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400f6e:	4b08      	ldr	r3, [pc, #32]	; (400f90 <osc_get_rate+0x6c>)
  400f70:	e006      	b.n	400f80 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400f72:	4b08      	ldr	r3, [pc, #32]	; (400f94 <osc_get_rate+0x70>)
  400f74:	e004      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400f76:	4b07      	ldr	r3, [pc, #28]	; (400f94 <osc_get_rate+0x70>)
  400f78:	e002      	b.n	400f80 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400f7a:	4b06      	ldr	r3, [pc, #24]	; (400f94 <osc_get_rate+0x70>)
  400f7c:	e000      	b.n	400f80 <osc_get_rate+0x5c>
	return 0;
  400f7e:	2300      	movs	r3, #0
}
  400f80:	4618      	mov	r0, r3
  400f82:	370c      	adds	r7, #12
  400f84:	46bd      	mov	sp, r7
  400f86:	bc80      	pop	{r7}
  400f88:	4770      	bx	lr
  400f8a:	bf00      	nop
  400f8c:	003d0900 	.word	0x003d0900
  400f90:	007a1200 	.word	0x007a1200
  400f94:	00b71b00 	.word	0x00b71b00

00400f98 <sysclk_get_main_hz>:
{
  400f98:	b580      	push	{r7, lr}
  400f9a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f9c:	2006      	movs	r0, #6
  400f9e:	4b04      	ldr	r3, [pc, #16]	; (400fb0 <sysclk_get_main_hz+0x18>)
  400fa0:	4798      	blx	r3
  400fa2:	4602      	mov	r2, r0
  400fa4:	4613      	mov	r3, r2
  400fa6:	009b      	lsls	r3, r3, #2
  400fa8:	4413      	add	r3, r2
  400faa:	009b      	lsls	r3, r3, #2
}
  400fac:	4618      	mov	r0, r3
  400fae:	bd80      	pop	{r7, pc}
  400fb0:	00400f25 	.word	0x00400f25

00400fb4 <sysclk_get_cpu_hz>:
{
  400fb4:	b580      	push	{r7, lr}
  400fb6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fb8:	4b02      	ldr	r3, [pc, #8]	; (400fc4 <sysclk_get_cpu_hz+0x10>)
  400fba:	4798      	blx	r3
  400fbc:	4603      	mov	r3, r0
  400fbe:	085b      	lsrs	r3, r3, #1
}
  400fc0:	4618      	mov	r0, r3
  400fc2:	bd80      	pop	{r7, pc}
  400fc4:	00400f99 	.word	0x00400f99

00400fc8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400fc8:	b580      	push	{r7, lr}
  400fca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fcc:	4b02      	ldr	r3, [pc, #8]	; (400fd8 <sysclk_get_peripheral_hz+0x10>)
  400fce:	4798      	blx	r3
  400fd0:	4603      	mov	r3, r0
  400fd2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fd4:	4618      	mov	r0, r3
  400fd6:	bd80      	pop	{r7, pc}
  400fd8:	00400f99 	.word	0x00400f99

00400fdc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400fdc:	b580      	push	{r7, lr}
  400fde:	b082      	sub	sp, #8
  400fe0:	af00      	add	r7, sp, #0
  400fe2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400fe4:	6878      	ldr	r0, [r7, #4]
  400fe6:	4b03      	ldr	r3, [pc, #12]	; (400ff4 <sysclk_enable_peripheral_clock+0x18>)
  400fe8:	4798      	blx	r3
}
  400fea:	bf00      	nop
  400fec:	3708      	adds	r7, #8
  400fee:	46bd      	mov	sp, r7
  400ff0:	bd80      	pop	{r7, pc}
  400ff2:	bf00      	nop
  400ff4:	0040239d 	.word	0x0040239d

00400ff8 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400ff8:	b480      	push	{r7}
  400ffa:	b08b      	sub	sp, #44	; 0x2c
  400ffc:	af00      	add	r7, sp, #0
  400ffe:	6078      	str	r0, [r7, #4]
  401000:	687b      	ldr	r3, [r7, #4]
  401002:	627b      	str	r3, [r7, #36]	; 0x24
  401004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401006:	623b      	str	r3, [r7, #32]
  401008:	6a3b      	ldr	r3, [r7, #32]
  40100a:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40100c:	69fb      	ldr	r3, [r7, #28]
  40100e:	095b      	lsrs	r3, r3, #5
  401010:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401012:	69bb      	ldr	r3, [r7, #24]
  401014:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401018:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40101c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  40101e:	617b      	str	r3, [r7, #20]
  401020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401022:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401024:	693b      	ldr	r3, [r7, #16]
  401026:	f003 031f 	and.w	r3, r3, #31
  40102a:	2201      	movs	r2, #1
  40102c:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401030:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401032:	697b      	ldr	r3, [r7, #20]
  401034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401038:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40103a:	68bb      	ldr	r3, [r7, #8]
  40103c:	f003 031f 	and.w	r3, r3, #31
  401040:	2101      	movs	r1, #1
  401042:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401046:	4013      	ands	r3, r2
  401048:	2b00      	cmp	r3, #0
  40104a:	d003      	beq.n	401054 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  40104c:	697b      	ldr	r3, [r7, #20]
  40104e:	68fa      	ldr	r2, [r7, #12]
  401050:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  401052:	e002      	b.n	40105a <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  401054:	697b      	ldr	r3, [r7, #20]
  401056:	68fa      	ldr	r2, [r7, #12]
  401058:	631a      	str	r2, [r3, #48]	; 0x30
  40105a:	bf00      	nop
  40105c:	372c      	adds	r7, #44	; 0x2c
  40105e:	46bd      	mov	sp, r7
  401060:	bc80      	pop	{r7}
  401062:	4770      	bx	lr

00401064 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  401064:	b580      	push	{r7, lr}
  401066:	b082      	sub	sp, #8
  401068:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  40106a:	2300      	movs	r3, #0
  40106c:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  40106e:	2101      	movs	r1, #1
  401070:	4815      	ldr	r0, [pc, #84]	; (4010c8 <USART0_Handler+0x64>)
  401072:	4b16      	ldr	r3, [pc, #88]	; (4010cc <USART0_Handler+0x68>)
  401074:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401076:	4814      	ldr	r0, [pc, #80]	; (4010c8 <USART0_Handler+0x64>)
  401078:	4b15      	ldr	r3, [pc, #84]	; (4010d0 <USART0_Handler+0x6c>)
  40107a:	4798      	blx	r3
  40107c:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  40107e:	4915      	ldr	r1, [pc, #84]	; (4010d4 <USART0_Handler+0x70>)
  401080:	4811      	ldr	r0, [pc, #68]	; (4010c8 <USART0_Handler+0x64>)
  401082:	4b15      	ldr	r3, [pc, #84]	; (4010d8 <USART0_Handler+0x74>)
  401084:	4798      	blx	r3
  401086:	4603      	mov	r3, r0
  401088:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  40108a:	683b      	ldr	r3, [r7, #0]
  40108c:	f003 0301 	and.w	r3, r3, #1
  401090:	2b00      	cmp	r3, #0
  401092:	d011      	beq.n	4010b8 <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401094:	490f      	ldr	r1, [pc, #60]	; (4010d4 <USART0_Handler+0x70>)
  401096:	480c      	ldr	r0, [pc, #48]	; (4010c8 <USART0_Handler+0x64>)
  401098:	4b0f      	ldr	r3, [pc, #60]	; (4010d8 <USART0_Handler+0x74>)
  40109a:	4798      	blx	r3
  40109c:	4603      	mov	r3, r0
  40109e:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  4010a0:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <USART0_Handler+0x78>)
  4010a2:	681b      	ldr	r3, [r3, #0]
  4010a4:	4a0b      	ldr	r2, [pc, #44]	; (4010d4 <USART0_Handler+0x70>)
  4010a6:	6812      	ldr	r2, [r2, #0]
  4010a8:	b2d1      	uxtb	r1, r2
  4010aa:	4a0d      	ldr	r2, [pc, #52]	; (4010e0 <USART0_Handler+0x7c>)
  4010ac:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  4010ae:	4b0b      	ldr	r3, [pc, #44]	; (4010dc <USART0_Handler+0x78>)
  4010b0:	681b      	ldr	r3, [r3, #0]
  4010b2:	3301      	adds	r3, #1
  4010b4:	4a09      	ldr	r2, [pc, #36]	; (4010dc <USART0_Handler+0x78>)
  4010b6:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4010b8:	2101      	movs	r1, #1
  4010ba:	4803      	ldr	r0, [pc, #12]	; (4010c8 <USART0_Handler+0x64>)
  4010bc:	4b09      	ldr	r3, [pc, #36]	; (4010e4 <USART0_Handler+0x80>)
  4010be:	4798      	blx	r3
}
  4010c0:	bf00      	nop
  4010c2:	3708      	adds	r7, #8
  4010c4:	46bd      	mov	sp, r7
  4010c6:	bd80      	pop	{r7, pc}
  4010c8:	40024000 	.word	0x40024000
  4010cc:	00400c33 	.word	0x00400c33
  4010d0:	00400c4d 	.word	0x00400c4d
  4010d4:	20000df0 	.word	0x20000df0
  4010d8:	00400d11 	.word	0x00400d11
  4010dc:	20000de0 	.word	0x20000de0
  4010e0:	20000bec 	.word	0x20000bec
  4010e4:	00400c19 	.word	0x00400c19

004010e8 <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart(void)
{
  4010e8:	b5b0      	push	{r4, r5, r7, lr}
  4010ea:	b086      	sub	sp, #24
  4010ec:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  4010ee:	4b15      	ldr	r3, [pc, #84]	; (401144 <configure_usart+0x5c>)
  4010f0:	463c      	mov	r4, r7
  4010f2:	461d      	mov	r5, r3
  4010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010f8:	e895 0003 	ldmia.w	r5, {r0, r1}
  4010fc:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401100:	4b11      	ldr	r3, [pc, #68]	; (401148 <configure_usart+0x60>)
  401102:	4798      	blx	r3
  401104:	4602      	mov	r2, r0
  401106:	4b11      	ldr	r3, [pc, #68]	; (40114c <configure_usart+0x64>)
  401108:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  40110a:	200e      	movs	r0, #14
  40110c:	4b10      	ldr	r3, [pc, #64]	; (401150 <configure_usart+0x68>)
  40110e:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401110:	4b0e      	ldr	r3, [pc, #56]	; (40114c <configure_usart+0x64>)
  401112:	681a      	ldr	r2, [r3, #0]
  401114:	463b      	mov	r3, r7
  401116:	4619      	mov	r1, r3
  401118:	480e      	ldr	r0, [pc, #56]	; (401154 <configure_usart+0x6c>)
  40111a:	4b0f      	ldr	r3, [pc, #60]	; (401158 <configure_usart+0x70>)
  40111c:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40111e:	f04f 31ff 	mov.w	r1, #4294967295
  401122:	480c      	ldr	r0, [pc, #48]	; (401154 <configure_usart+0x6c>)
  401124:	4b0d      	ldr	r3, [pc, #52]	; (40115c <configure_usart+0x74>)
  401126:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401128:	480a      	ldr	r0, [pc, #40]	; (401154 <configure_usart+0x6c>)
  40112a:	4b0d      	ldr	r3, [pc, #52]	; (401160 <configure_usart+0x78>)
  40112c:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  40112e:	4809      	ldr	r0, [pc, #36]	; (401154 <configure_usart+0x6c>)
  401130:	4b0c      	ldr	r3, [pc, #48]	; (401164 <configure_usart+0x7c>)
  401132:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401134:	200e      	movs	r0, #14
  401136:	4b0c      	ldr	r3, [pc, #48]	; (401168 <configure_usart+0x80>)
  401138:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  40113a:	bf00      	nop
  40113c:	3718      	adds	r7, #24
  40113e:	46bd      	mov	sp, r7
  401140:	bdb0      	pop	{r4, r5, r7, pc}
  401142:	bf00      	nop
  401144:	00407a58 	.word	0x00407a58
  401148:	00400fc9 	.word	0x00400fc9
  40114c:	20000df4 	.word	0x20000df4
  401150:	00400fdd 	.word	0x00400fdd
  401154:	40024000 	.word	0x40024000
  401158:	00400b79 	.word	0x00400b79
  40115c:	00400c33 	.word	0x00400c33
  401160:	00400bb9 	.word	0x00400bb9
  401164:	00400be9 	.word	0x00400be9
  401168:	00400ef5 	.word	0x00400ef5

0040116c <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  40116c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40116e:	b083      	sub	sp, #12
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
  401174:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	//ioport_toggle_pin_level(LED_PIN);
	
	delay_ms(50);
  401176:	4b1f      	ldr	r3, [pc, #124]	; (4011f4 <handler_command_complete+0x88>)
  401178:	4798      	blx	r3
  40117a:	4603      	mov	r3, r0
  40117c:	4619      	mov	r1, r3
  40117e:	f04f 0200 	mov.w	r2, #0
  401182:	460b      	mov	r3, r1
  401184:	4614      	mov	r4, r2
  401186:	18db      	adds	r3, r3, r3
  401188:	eb44 0404 	adc.w	r4, r4, r4
  40118c:	185b      	adds	r3, r3, r1
  40118e:	eb44 0402 	adc.w	r4, r4, r2
  401192:	00e6      	lsls	r6, r4, #3
  401194:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401198:	00dd      	lsls	r5, r3, #3
  40119a:	462b      	mov	r3, r5
  40119c:	4634      	mov	r4, r6
  40119e:	185b      	adds	r3, r3, r1
  4011a0:	eb44 0402 	adc.w	r4, r4, r2
  4011a4:	18db      	adds	r3, r3, r3
  4011a6:	eb44 0404 	adc.w	r4, r4, r4
  4011aa:	4619      	mov	r1, r3
  4011ac:	4622      	mov	r2, r4
  4011ae:	f243 63af 	movw	r3, #13999	; 0x36af
  4011b2:	f04f 0400 	mov.w	r4, #0
  4011b6:	18cd      	adds	r5, r1, r3
  4011b8:	eb42 0604 	adc.w	r6, r2, r4
  4011bc:	4628      	mov	r0, r5
  4011be:	4631      	mov	r1, r6
  4011c0:	4c0d      	ldr	r4, [pc, #52]	; (4011f8 <handler_command_complete+0x8c>)
  4011c2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4011c6:	f04f 0300 	mov.w	r3, #0
  4011ca:	47a0      	blx	r4
  4011cc:	4603      	mov	r3, r0
  4011ce:	460c      	mov	r4, r1
  4011d0:	4618      	mov	r0, r3
  4011d2:	4b0a      	ldr	r3, [pc, #40]	; (4011fc <handler_command_complete+0x90>)
  4011d4:	4798      	blx	r3
	
	input_buffer[buffer_index] = 0;
  4011d6:	4b0a      	ldr	r3, [pc, #40]	; (401200 <handler_command_complete+0x94>)
  4011d8:	681b      	ldr	r3, [r3, #0]
  4011da:	4a0a      	ldr	r2, [pc, #40]	; (401204 <handler_command_complete+0x98>)
  4011dc:	2100      	movs	r1, #0
  4011de:	54d1      	strb	r1, [r2, r3]
	data_recieved = 1;
  4011e0:	4b09      	ldr	r3, [pc, #36]	; (401208 <handler_command_complete+0x9c>)
  4011e2:	2201      	movs	r2, #1
  4011e4:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
  4011e6:	4b06      	ldr	r3, [pc, #24]	; (401200 <handler_command_complete+0x94>)
  4011e8:	2200      	movs	r2, #0
  4011ea:	601a      	str	r2, [r3, #0]
}
  4011ec:	bf00      	nop
  4011ee:	370c      	adds	r7, #12
  4011f0:	46bd      	mov	sp, r7
  4011f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011f4:	00400fb5 	.word	0x00400fb5
  4011f8:	00403311 	.word	0x00403311
  4011fc:	20000001 	.word	0x20000001
  401200:	20000de0 	.word	0x20000de0
  401204:	20000bec 	.word	0x20000bec
  401208:	20000de8 	.word	0x20000de8

0040120c <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(void){
  40120c:	b590      	push	{r4, r7, lr}
  40120e:	b083      	sub	sp, #12
  401210:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  401212:	200c      	movs	r0, #12
  401214:	4b0e      	ldr	r3, [pc, #56]	; (401250 <configure_command_complete+0x44>)
  401216:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401218:	220a      	movs	r2, #10
  40121a:	2101      	movs	r1, #1
  40121c:	480d      	ldr	r0, [pc, #52]	; (401254 <configure_command_complete+0x48>)
  40121e:	4b0e      	ldr	r3, [pc, #56]	; (401258 <configure_command_complete+0x4c>)
  401220:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  401222:	4b0e      	ldr	r3, [pc, #56]	; (40125c <configure_command_complete+0x50>)
  401224:	9300      	str	r3, [sp, #0]
  401226:	2370      	movs	r3, #112	; 0x70
  401228:	2201      	movs	r2, #1
  40122a:	210c      	movs	r1, #12
  40122c:	4809      	ldr	r0, [pc, #36]	; (401254 <configure_command_complete+0x48>)
  40122e:	4c0c      	ldr	r4, [pc, #48]	; (401260 <configure_command_complete+0x54>)
  401230:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401232:	200c      	movs	r0, #12
  401234:	4b0b      	ldr	r3, [pc, #44]	; (401264 <configure_command_complete+0x58>)
  401236:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401238:	2101      	movs	r1, #1
  40123a:	4806      	ldr	r0, [pc, #24]	; (401254 <configure_command_complete+0x48>)
  40123c:	4b0a      	ldr	r3, [pc, #40]	; (401268 <configure_command_complete+0x5c>)
  40123e:	4798      	blx	r3
	data_recieved = 0;
  401240:	4b0a      	ldr	r3, [pc, #40]	; (40126c <configure_command_complete+0x60>)
  401242:	2200      	movs	r2, #0
  401244:	601a      	str	r2, [r3, #0]
}
  401246:	bf00      	nop
  401248:	3704      	adds	r7, #4
  40124a:	46bd      	mov	sp, r7
  40124c:	bd90      	pop	{r4, r7, pc}
  40124e:	bf00      	nop
  401250:	0040239d 	.word	0x0040239d
  401254:	400e1000 	.word	0x400e1000
  401258:	00401c87 	.word	0x00401c87
  40125c:	0040116d 	.word	0x0040116d
  401260:	0040093d 	.word	0x0040093d
  401264:	00400ef5 	.word	0x00400ef5
  401268:	00401f1b 	.word	0x00401f1b
  40126c:	20000de8 	.word	0x20000de8

00401270 <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401270:	b480      	push	{r7}
  401272:	b083      	sub	sp, #12
  401274:	af00      	add	r7, sp, #0
  401276:	6078      	str	r0, [r7, #4]
  401278:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  40127a:	4b04      	ldr	r3, [pc, #16]	; (40128c <handler_web_setup+0x1c>)
  40127c:	2201      	movs	r2, #1
  40127e:	601a      	str	r2, [r3, #0]
}
  401280:	bf00      	nop
  401282:	370c      	adds	r7, #12
  401284:	46bd      	mov	sp, r7
  401286:	bc80      	pop	{r7}
  401288:	4770      	bx	lr
  40128a:	bf00      	nop
  40128c:	20000dec 	.word	0x20000dec

00401290 <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(void){
  401290:	b590      	push	{r4, r7, lr}
  401292:	b083      	sub	sp, #12
  401294:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  401296:	200c      	movs	r0, #12
  401298:	4b0e      	ldr	r3, [pc, #56]	; (4012d4 <configure_web_setup+0x44>)
  40129a:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  40129c:	220a      	movs	r2, #10
  40129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4012a2:	480d      	ldr	r0, [pc, #52]	; (4012d8 <configure_web_setup+0x48>)
  4012a4:	4b0d      	ldr	r3, [pc, #52]	; (4012dc <configure_web_setup+0x4c>)
  4012a6:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  4012a8:	4b0d      	ldr	r3, [pc, #52]	; (4012e0 <configure_web_setup+0x50>)
  4012aa:	9300      	str	r3, [sp, #0]
  4012ac:	2379      	movs	r3, #121	; 0x79
  4012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4012b2:	210c      	movs	r1, #12
  4012b4:	4808      	ldr	r0, [pc, #32]	; (4012d8 <configure_web_setup+0x48>)
  4012b6:	4c0b      	ldr	r4, [pc, #44]	; (4012e4 <configure_web_setup+0x54>)
  4012b8:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  4012ba:	200c      	movs	r0, #12
  4012bc:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <configure_web_setup+0x58>)
  4012be:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  4012c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4012c4:	4804      	ldr	r0, [pc, #16]	; (4012d8 <configure_web_setup+0x48>)
  4012c6:	4b09      	ldr	r3, [pc, #36]	; (4012ec <configure_web_setup+0x5c>)
  4012c8:	4798      	blx	r3
}
  4012ca:	bf00      	nop
  4012cc:	3704      	adds	r7, #4
  4012ce:	46bd      	mov	sp, r7
  4012d0:	bd90      	pop	{r4, r7, pc}
  4012d2:	bf00      	nop
  4012d4:	0040239d 	.word	0x0040239d
  4012d8:	400e1000 	.word	0x400e1000
  4012dc:	00401c87 	.word	0x00401c87
  4012e0:	00401271 	.word	0x00401271
  4012e4:	0040093d 	.word	0x0040093d
  4012e8:	00400ef5 	.word	0x00400ef5
  4012ec:	00401f1b 	.word	0x00401f1b

004012f0 <write_wifi_command>:

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  4012f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4012f4:	b082      	sub	sp, #8
  4012f6:	af00      	add	r7, sp, #0
  4012f8:	6078      	str	r0, [r7, #4]
  4012fa:	460b      	mov	r3, r1
  4012fc:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  4012fe:	4b29      	ldr	r3, [pc, #164]	; (4013a4 <write_wifi_command+0xb4>)
  401300:	2200      	movs	r2, #0
  401302:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  401304:	6879      	ldr	r1, [r7, #4]
  401306:	4828      	ldr	r0, [pc, #160]	; (4013a8 <write_wifi_command+0xb8>)
  401308:	4b28      	ldr	r3, [pc, #160]	; (4013ac <write_wifi_command+0xbc>)
  40130a:	4798      	blx	r3
	
	timeout_counter = 0;
  40130c:	4b28      	ldr	r3, [pc, #160]	; (4013b0 <write_wifi_command+0xc0>)
  40130e:	2200      	movs	r2, #0
  401310:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  401312:	78fb      	ldrb	r3, [r7, #3]
  401314:	461a      	mov	r2, r3
  401316:	0092      	lsls	r2, r2, #2
  401318:	4413      	add	r3, r2
  40131a:	009b      	lsls	r3, r3, #2
  40131c:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  40131e:	e031      	b.n	401384 <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  401320:	4b24      	ldr	r3, [pc, #144]	; (4013b4 <write_wifi_command+0xc4>)
  401322:	4798      	blx	r3
  401324:	4603      	mov	r3, r0
  401326:	4619      	mov	r1, r3
  401328:	f04f 0200 	mov.w	r2, #0
  40132c:	460b      	mov	r3, r1
  40132e:	4614      	mov	r4, r2
  401330:	00a6      	lsls	r6, r4, #2
  401332:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401336:	009d      	lsls	r5, r3, #2
  401338:	462b      	mov	r3, r5
  40133a:	4634      	mov	r4, r6
  40133c:	185b      	adds	r3, r3, r1
  40133e:	eb44 0402 	adc.w	r4, r4, r2
  401342:	18db      	adds	r3, r3, r3
  401344:	eb44 0404 	adc.w	r4, r4, r4
  401348:	4619      	mov	r1, r3
  40134a:	4622      	mov	r2, r4
  40134c:	f243 63af 	movw	r3, #13999	; 0x36af
  401350:	f04f 0400 	mov.w	r4, #0
  401354:	eb11 0b03 	adds.w	fp, r1, r3
  401358:	eb42 0c04 	adc.w	ip, r2, r4
  40135c:	4658      	mov	r0, fp
  40135e:	4661      	mov	r1, ip
  401360:	4c15      	ldr	r4, [pc, #84]	; (4013b8 <write_wifi_command+0xc8>)
  401362:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401366:	f04f 0300 	mov.w	r3, #0
  40136a:	47a0      	blx	r4
  40136c:	4603      	mov	r3, r0
  40136e:	460c      	mov	r4, r1
  401370:	4618      	mov	r0, r3
  401372:	4b12      	ldr	r3, [pc, #72]	; (4013bc <write_wifi_command+0xcc>)
  401374:	4798      	blx	r3
		timeout_counter++;
  401376:	4b0e      	ldr	r3, [pc, #56]	; (4013b0 <write_wifi_command+0xc0>)
  401378:	781b      	ldrb	r3, [r3, #0]
  40137a:	b2db      	uxtb	r3, r3
  40137c:	3301      	adds	r3, #1
  40137e:	b2da      	uxtb	r2, r3
  401380:	4b0b      	ldr	r3, [pc, #44]	; (4013b0 <write_wifi_command+0xc0>)
  401382:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  401384:	4b0a      	ldr	r3, [pc, #40]	; (4013b0 <write_wifi_command+0xc0>)
  401386:	781b      	ldrb	r3, [r3, #0]
  401388:	b2db      	uxtb	r3, r3
  40138a:	78fa      	ldrb	r2, [r7, #3]
  40138c:	429a      	cmp	r2, r3
  40138e:	d903      	bls.n	401398 <write_wifi_command+0xa8>
  401390:	4b04      	ldr	r3, [pc, #16]	; (4013a4 <write_wifi_command+0xb4>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	2b00      	cmp	r3, #0
  401396:	d0c3      	beq.n	401320 <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  401398:	bf00      	nop
  40139a:	3708      	adds	r7, #8
  40139c:	46bd      	mov	sp, r7
  40139e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  4013a2:	bf00      	nop
  4013a4:	20000de8 	.word	0x20000de8
  4013a8:	40024000 	.word	0x40024000
  4013ac:	00400ce1 	.word	0x00400ce1
  4013b0:	20000de4 	.word	0x20000de4
  4013b4:	00400fb5 	.word	0x00400fb5
  4013b8:	00403311 	.word	0x00403311
  4013bc:	20000001 	.word	0x20000001

004013c0 <open_websocket>:
	
	//handle = parse_stream_handle();
	write_wifi_command("http_read_status 0\r\n", 2);
}

uint8_t open_websocket(void) {
  4013c0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4013c4:	b084      	sub	sp, #16
  4013c6:	af00      	add	r7, sp, #0
	// figure out handle
	write_wifi_command("close all\r\n", 2);
  4013c8:	2102      	movs	r1, #2
  4013ca:	482e      	ldr	r0, [pc, #184]	; (401484 <open_websocket+0xc4>)
  4013cc:	4b2e      	ldr	r3, [pc, #184]	; (401488 <open_websocket+0xc8>)
  4013ce:	4798      	blx	r3
	write_wifi_command("websocket_client -f bin wss://bigbrothersees.me/source_audio_socket\r\n", 2);
  4013d0:	2102      	movs	r1, #2
  4013d2:	482e      	ldr	r0, [pc, #184]	; (40148c <open_websocket+0xcc>)
  4013d4:	4b2c      	ldr	r3, [pc, #176]	; (401488 <open_websocket+0xc8>)
  4013d6:	4798      	blx	r3

	int opened = 0;
  4013d8:	2300      	movs	r3, #0
  4013da:	60fb      	str	r3, [r7, #12]
	int handle = 0;
  4013dc:	2300      	movs	r3, #0
  4013de:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  4013e0:	2300      	movs	r3, #0
  4013e2:	60bb      	str	r3, [r7, #8]
			
	while(!opened) {			// waits for association
  4013e4:	e044      	b.n	401470 <open_websocket+0xb0>
		opened = strstr(input_buffer, "[Opened: ");
  4013e6:	492a      	ldr	r1, [pc, #168]	; (401490 <open_websocket+0xd0>)
  4013e8:	482a      	ldr	r0, [pc, #168]	; (401494 <open_websocket+0xd4>)
  4013ea:	4b2b      	ldr	r3, [pc, #172]	; (401498 <open_websocket+0xd8>)
  4013ec:	4798      	blx	r3
  4013ee:	4603      	mov	r3, r0
  4013f0:	60fb      	str	r3, [r7, #12]
		if (seconds > 100){
  4013f2:	68bb      	ldr	r3, [r7, #8]
  4013f4:	2b64      	cmp	r3, #100	; 0x64
  4013f6:	dd02      	ble.n	4013fe <open_websocket+0x3e>
			blink_LED(50);
  4013f8:	2032      	movs	r0, #50	; 0x32
  4013fa:	4b28      	ldr	r3, [pc, #160]	; (40149c <open_websocket+0xdc>)
  4013fc:	4798      	blx	r3
		}
		delay_ms(200);
  4013fe:	4b28      	ldr	r3, [pc, #160]	; (4014a0 <open_websocket+0xe0>)
  401400:	4798      	blx	r3
  401402:	4603      	mov	r3, r0
  401404:	4619      	mov	r1, r3
  401406:	f04f 0200 	mov.w	r2, #0
  40140a:	460b      	mov	r3, r1
  40140c:	4614      	mov	r4, r2
  40140e:	18db      	adds	r3, r3, r3
  401410:	eb44 0404 	adc.w	r4, r4, r4
  401414:	185b      	adds	r3, r3, r1
  401416:	eb44 0402 	adc.w	r4, r4, r2
  40141a:	00e6      	lsls	r6, r4, #3
  40141c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401420:	00dd      	lsls	r5, r3, #3
  401422:	462b      	mov	r3, r5
  401424:	4634      	mov	r4, r6
  401426:	185b      	adds	r3, r3, r1
  401428:	eb44 0402 	adc.w	r4, r4, r2
  40142c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401430:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401434:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401438:	4643      	mov	r3, r8
  40143a:	464c      	mov	r4, r9
  40143c:	4619      	mov	r1, r3
  40143e:	4622      	mov	r2, r4
  401440:	f243 63af 	movw	r3, #13999	; 0x36af
  401444:	f04f 0400 	mov.w	r4, #0
  401448:	eb11 0b03 	adds.w	fp, r1, r3
  40144c:	eb42 0c04 	adc.w	ip, r2, r4
  401450:	4658      	mov	r0, fp
  401452:	4661      	mov	r1, ip
  401454:	4c13      	ldr	r4, [pc, #76]	; (4014a4 <open_websocket+0xe4>)
  401456:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40145a:	f04f 0300 	mov.w	r3, #0
  40145e:	47a0      	blx	r4
  401460:	4603      	mov	r3, r0
  401462:	460c      	mov	r4, r1
  401464:	4618      	mov	r0, r3
  401466:	4b10      	ldr	r3, [pc, #64]	; (4014a8 <open_websocket+0xe8>)
  401468:	4798      	blx	r3
		seconds++;
  40146a:	68bb      	ldr	r3, [r7, #8]
  40146c:	3301      	adds	r3, #1
  40146e:	60bb      	str	r3, [r7, #8]
	while(!opened) {			// waits for association
  401470:	68fb      	ldr	r3, [r7, #12]
  401472:	2b00      	cmp	r3, #0
  401474:	d0b7      	beq.n	4013e6 <open_websocket+0x26>
	}
	
	// should check last thing in input buffer for handle
	return handle;
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	b2db      	uxtb	r3, r3
}
  40147a:	4618      	mov	r0, r3
  40147c:	3710      	adds	r7, #16
  40147e:	46bd      	mov	sp, r7
  401480:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  401484:	00407a94 	.word	0x00407a94
  401488:	004012f1 	.word	0x004012f1
  40148c:	00407b9c 	.word	0x00407b9c
  401490:	00407be4 	.word	0x00407be4
  401494:	20000bec 	.word	0x20000bec
  401498:	00403b0d 	.word	0x00403b0d
  40149c:	00401521 	.word	0x00401521
  4014a0:	00400fb5 	.word	0x00400fb5
  4014a4:	00403311 	.word	0x00403311
  4014a8:	20000001 	.word	0x20000001

004014ac <send_data_ws>:

void send_data_ws(uint16_t* samples_data, uint32_t num_samples, uint8_t handle) {
  4014ac:	b590      	push	{r4, r7, lr}
  4014ae:	b09b      	sub	sp, #108	; 0x6c
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	60f8      	str	r0, [r7, #12]
  4014b4:	60b9      	str	r1, [r7, #8]
  4014b6:	4613      	mov	r3, r2
  4014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t curr_data_point;
	
	char* templated_command[20];
	sprintf(templated_command, "write %d %d\r\n", handle, num_samples);
  4014ba:	79fa      	ldrb	r2, [r7, #7]
  4014bc:	f107 0010 	add.w	r0, r7, #16
  4014c0:	68bb      	ldr	r3, [r7, #8]
  4014c2:	4911      	ldr	r1, [pc, #68]	; (401508 <send_data_ws+0x5c>)
  4014c4:	4c11      	ldr	r4, [pc, #68]	; (40150c <send_data_ws+0x60>)
  4014c6:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  4014c8:	f107 0310 	add.w	r3, r7, #16
  4014cc:	4619      	mov	r1, r3
  4014ce:	4810      	ldr	r0, [pc, #64]	; (401510 <send_data_ws+0x64>)
  4014d0:	4b10      	ldr	r3, [pc, #64]	; (401514 <send_data_ws+0x68>)
  4014d2:	4798      	blx	r3
		
	for (int i = 0; i < num_samples; i++)
  4014d4:	2300      	movs	r3, #0
  4014d6:	667b      	str	r3, [r7, #100]	; 0x64
  4014d8:	e00e      	b.n	4014f8 <send_data_ws+0x4c>
	{
		curr_data_point = ((uint8_t*) samples_data)[i];
  4014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4014dc:	68fa      	ldr	r2, [r7, #12]
  4014de:	4413      	add	r3, r2
  4014e0:	781b      	ldrb	r3, [r3, #0]
  4014e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		
		usart_putchar(BOARD_USART, curr_data_point);
  4014e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
  4014ea:	4619      	mov	r1, r3
  4014ec:	4808      	ldr	r0, [pc, #32]	; (401510 <send_data_ws+0x64>)
  4014ee:	4b0a      	ldr	r3, [pc, #40]	; (401518 <send_data_ws+0x6c>)
  4014f0:	4798      	blx	r3
	for (int i = 0; i < num_samples; i++)
  4014f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  4014f4:	3301      	adds	r3, #1
  4014f6:	667b      	str	r3, [r7, #100]	; 0x64
  4014f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  4014fa:	68bb      	ldr	r3, [r7, #8]
  4014fc:	429a      	cmp	r2, r3
  4014fe:	d3ec      	bcc.n	4014da <send_data_ws+0x2e>
	}
}
  401500:	bf00      	nop
  401502:	376c      	adds	r7, #108	; 0x6c
  401504:	46bd      	mov	sp, r7
  401506:	bd90      	pop	{r4, r7, pc}
  401508:	00407bf0 	.word	0x00407bf0
  40150c:	0040370d 	.word	0x0040370d
  401510:	40024000 	.word	0x40024000
  401514:	00400ce1 	.word	0x00400ce1
  401518:	00400cb1 	.word	0x00400cb1
  40151c:	00000000 	.word	0x00000000

00401520 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  401520:	b5f0      	push	{r4, r5, r6, r7, lr}
  401522:	b083      	sub	sp, #12
  401524:	af00      	add	r7, sp, #0
  401526:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  401528:	687b      	ldr	r3, [r7, #4]
  40152a:	2b00      	cmp	r3, #0
  40152c:	d026      	beq.n	40157c <blink_LED+0x5c>
  40152e:	687b      	ldr	r3, [r7, #4]
  401530:	461d      	mov	r5, r3
  401532:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401536:	4b66      	ldr	r3, [pc, #408]	; (4016d0 <blink_LED+0x1b0>)
  401538:	4798      	blx	r3
  40153a:	4603      	mov	r3, r0
  40153c:	f04f 0400 	mov.w	r4, #0
  401540:	fb03 f106 	mul.w	r1, r3, r6
  401544:	fb05 f204 	mul.w	r2, r5, r4
  401548:	440a      	add	r2, r1
  40154a:	fba5 3403 	umull	r3, r4, r5, r3
  40154e:	4422      	add	r2, r4
  401550:	4614      	mov	r4, r2
  401552:	f243 61af 	movw	r1, #13999	; 0x36af
  401556:	f04f 0200 	mov.w	r2, #0
  40155a:	185d      	adds	r5, r3, r1
  40155c:	eb44 0602 	adc.w	r6, r4, r2
  401560:	4628      	mov	r0, r5
  401562:	4631      	mov	r1, r6
  401564:	4c5b      	ldr	r4, [pc, #364]	; (4016d4 <blink_LED+0x1b4>)
  401566:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40156a:	f04f 0300 	mov.w	r3, #0
  40156e:	47a0      	blx	r4
  401570:	4603      	mov	r3, r0
  401572:	460c      	mov	r4, r1
  401574:	4618      	mov	r0, r3
  401576:	4b58      	ldr	r3, [pc, #352]	; (4016d8 <blink_LED+0x1b8>)
  401578:	4798      	blx	r3
  40157a:	e016      	b.n	4015aa <blink_LED+0x8a>
  40157c:	4b54      	ldr	r3, [pc, #336]	; (4016d0 <blink_LED+0x1b0>)
  40157e:	4798      	blx	r3
  401580:	4603      	mov	r3, r0
  401582:	f04f 0400 	mov.w	r4, #0
  401586:	a250      	add	r2, pc, #320	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401588:	e9d2 1200 	ldrd	r1, r2, [r2]
  40158c:	185d      	adds	r5, r3, r1
  40158e:	eb44 0602 	adc.w	r6, r4, r2
  401592:	4628      	mov	r0, r5
  401594:	4631      	mov	r1, r6
  401596:	4c4f      	ldr	r4, [pc, #316]	; (4016d4 <blink_LED+0x1b4>)
  401598:	4a50      	ldr	r2, [pc, #320]	; (4016dc <blink_LED+0x1bc>)
  40159a:	f04f 0300 	mov.w	r3, #0
  40159e:	47a0      	blx	r4
  4015a0:	4603      	mov	r3, r0
  4015a2:	460c      	mov	r4, r1
  4015a4:	4618      	mov	r0, r3
  4015a6:	4b4c      	ldr	r3, [pc, #304]	; (4016d8 <blink_LED+0x1b8>)
  4015a8:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  4015aa:	2009      	movs	r0, #9
  4015ac:	4b4c      	ldr	r3, [pc, #304]	; (4016e0 <blink_LED+0x1c0>)
  4015ae:	4798      	blx	r3
	delay_ms(ms_blink);
  4015b0:	687b      	ldr	r3, [r7, #4]
  4015b2:	2b00      	cmp	r3, #0
  4015b4:	d026      	beq.n	401604 <blink_LED+0xe4>
  4015b6:	687b      	ldr	r3, [r7, #4]
  4015b8:	461d      	mov	r5, r3
  4015ba:	ea4f 76e5 	mov.w	r6, r5, asr #31
  4015be:	4b44      	ldr	r3, [pc, #272]	; (4016d0 <blink_LED+0x1b0>)
  4015c0:	4798      	blx	r3
  4015c2:	4603      	mov	r3, r0
  4015c4:	f04f 0400 	mov.w	r4, #0
  4015c8:	fb03 f106 	mul.w	r1, r3, r6
  4015cc:	fb05 f204 	mul.w	r2, r5, r4
  4015d0:	440a      	add	r2, r1
  4015d2:	fba5 3403 	umull	r3, r4, r5, r3
  4015d6:	4422      	add	r2, r4
  4015d8:	4614      	mov	r4, r2
  4015da:	f243 61af 	movw	r1, #13999	; 0x36af
  4015de:	f04f 0200 	mov.w	r2, #0
  4015e2:	185d      	adds	r5, r3, r1
  4015e4:	eb44 0602 	adc.w	r6, r4, r2
  4015e8:	4628      	mov	r0, r5
  4015ea:	4631      	mov	r1, r6
  4015ec:	4c39      	ldr	r4, [pc, #228]	; (4016d4 <blink_LED+0x1b4>)
  4015ee:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4015f2:	f04f 0300 	mov.w	r3, #0
  4015f6:	47a0      	blx	r4
  4015f8:	4603      	mov	r3, r0
  4015fa:	460c      	mov	r4, r1
  4015fc:	4618      	mov	r0, r3
  4015fe:	4b36      	ldr	r3, [pc, #216]	; (4016d8 <blink_LED+0x1b8>)
  401600:	4798      	blx	r3
  401602:	e016      	b.n	401632 <blink_LED+0x112>
  401604:	4b32      	ldr	r3, [pc, #200]	; (4016d0 <blink_LED+0x1b0>)
  401606:	4798      	blx	r3
  401608:	4603      	mov	r3, r0
  40160a:	f04f 0400 	mov.w	r4, #0
  40160e:	a22e      	add	r2, pc, #184	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401610:	e9d2 1200 	ldrd	r1, r2, [r2]
  401614:	185d      	adds	r5, r3, r1
  401616:	eb44 0602 	adc.w	r6, r4, r2
  40161a:	4628      	mov	r0, r5
  40161c:	4631      	mov	r1, r6
  40161e:	4c2d      	ldr	r4, [pc, #180]	; (4016d4 <blink_LED+0x1b4>)
  401620:	4a2e      	ldr	r2, [pc, #184]	; (4016dc <blink_LED+0x1bc>)
  401622:	f04f 0300 	mov.w	r3, #0
  401626:	47a0      	blx	r4
  401628:	4603      	mov	r3, r0
  40162a:	460c      	mov	r4, r1
  40162c:	4618      	mov	r0, r3
  40162e:	4b2a      	ldr	r3, [pc, #168]	; (4016d8 <blink_LED+0x1b8>)
  401630:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  401632:	2009      	movs	r0, #9
  401634:	4b2a      	ldr	r3, [pc, #168]	; (4016e0 <blink_LED+0x1c0>)
  401636:	4798      	blx	r3
	delay_ms(ms_blink);
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	2b00      	cmp	r3, #0
  40163c:	d026      	beq.n	40168c <blink_LED+0x16c>
  40163e:	687b      	ldr	r3, [r7, #4]
  401640:	461d      	mov	r5, r3
  401642:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401646:	4b22      	ldr	r3, [pc, #136]	; (4016d0 <blink_LED+0x1b0>)
  401648:	4798      	blx	r3
  40164a:	4603      	mov	r3, r0
  40164c:	f04f 0400 	mov.w	r4, #0
  401650:	fb03 f106 	mul.w	r1, r3, r6
  401654:	fb05 f204 	mul.w	r2, r5, r4
  401658:	440a      	add	r2, r1
  40165a:	fba5 3403 	umull	r3, r4, r5, r3
  40165e:	4422      	add	r2, r4
  401660:	4614      	mov	r4, r2
  401662:	f243 61af 	movw	r1, #13999	; 0x36af
  401666:	f04f 0200 	mov.w	r2, #0
  40166a:	185d      	adds	r5, r3, r1
  40166c:	eb44 0602 	adc.w	r6, r4, r2
  401670:	4628      	mov	r0, r5
  401672:	4631      	mov	r1, r6
  401674:	4c17      	ldr	r4, [pc, #92]	; (4016d4 <blink_LED+0x1b4>)
  401676:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40167a:	f04f 0300 	mov.w	r3, #0
  40167e:	47a0      	blx	r4
  401680:	4603      	mov	r3, r0
  401682:	460c      	mov	r4, r1
  401684:	4618      	mov	r0, r3
  401686:	4b14      	ldr	r3, [pc, #80]	; (4016d8 <blink_LED+0x1b8>)
  401688:	4798      	blx	r3
}
  40168a:	e016      	b.n	4016ba <blink_LED+0x19a>
	delay_ms(ms_blink);
  40168c:	4b10      	ldr	r3, [pc, #64]	; (4016d0 <blink_LED+0x1b0>)
  40168e:	4798      	blx	r3
  401690:	4603      	mov	r3, r0
  401692:	f04f 0400 	mov.w	r4, #0
  401696:	a20c      	add	r2, pc, #48	; (adr r2, 4016c8 <blink_LED+0x1a8>)
  401698:	e9d2 1200 	ldrd	r1, r2, [r2]
  40169c:	185d      	adds	r5, r3, r1
  40169e:	eb44 0602 	adc.w	r6, r4, r2
  4016a2:	4628      	mov	r0, r5
  4016a4:	4631      	mov	r1, r6
  4016a6:	4c0b      	ldr	r4, [pc, #44]	; (4016d4 <blink_LED+0x1b4>)
  4016a8:	4a0c      	ldr	r2, [pc, #48]	; (4016dc <blink_LED+0x1bc>)
  4016aa:	f04f 0300 	mov.w	r3, #0
  4016ae:	47a0      	blx	r4
  4016b0:	4603      	mov	r3, r0
  4016b2:	460c      	mov	r4, r1
  4016b4:	4618      	mov	r0, r3
  4016b6:	4b08      	ldr	r3, [pc, #32]	; (4016d8 <blink_LED+0x1b8>)
  4016b8:	4798      	blx	r3
}
  4016ba:	bf00      	nop
  4016bc:	370c      	adds	r7, #12
  4016be:	46bd      	mov	sp, r7
  4016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016c2:	bf00      	nop
  4016c4:	f3af 8000 	nop.w
  4016c8:	00d59f7f 	.word	0x00d59f7f
  4016cc:	00000000 	.word	0x00000000
  4016d0:	00400fb5 	.word	0x00400fb5
  4016d4:	00403311 	.word	0x00403311
  4016d8:	20000001 	.word	0x20000001
  4016dc:	00d59f80 	.word	0x00d59f80
  4016e0:	00400ff9 	.word	0x00400ff9

004016e4 <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  4016e4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4016e8:	b082      	sub	sp, #8
  4016ea:	af00      	add	r7, sp, #0
	
	int connected = 0;
  4016ec:	2300      	movs	r3, #0
  4016ee:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  4016f0:	2300      	movs	r3, #0
  4016f2:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  4016f4:	21d0      	movs	r1, #208	; 0xd0
  4016f6:	482b      	ldr	r0, [pc, #172]	; (4017a4 <setup_wifi+0xc0>)
  4016f8:	4b2b      	ldr	r3, [pc, #172]	; (4017a8 <setup_wifi+0xc4>)
  4016fa:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  4016fc:	e046      	b.n	40178c <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  4016fe:	492b      	ldr	r1, [pc, #172]	; (4017ac <setup_wifi+0xc8>)
  401700:	482b      	ldr	r0, [pc, #172]	; (4017b0 <setup_wifi+0xcc>)
  401702:	4b2c      	ldr	r3, [pc, #176]	; (4017b4 <setup_wifi+0xd0>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
  401708:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  40170a:	683b      	ldr	r3, [r7, #0]
  40170c:	f240 52dc 	movw	r2, #1500	; 0x5dc
  401710:	4293      	cmp	r3, r2
  401712:	dd02      	ble.n	40171a <setup_wifi+0x36>
			blink_LED(50);
  401714:	2032      	movs	r0, #50	; 0x32
  401716:	4b28      	ldr	r3, [pc, #160]	; (4017b8 <setup_wifi+0xd4>)
  401718:	4798      	blx	r3
		}
		delay_ms(200);
  40171a:	4b28      	ldr	r3, [pc, #160]	; (4017bc <setup_wifi+0xd8>)
  40171c:	4798      	blx	r3
  40171e:	4603      	mov	r3, r0
  401720:	4619      	mov	r1, r3
  401722:	f04f 0200 	mov.w	r2, #0
  401726:	460b      	mov	r3, r1
  401728:	4614      	mov	r4, r2
  40172a:	18db      	adds	r3, r3, r3
  40172c:	eb44 0404 	adc.w	r4, r4, r4
  401730:	185b      	adds	r3, r3, r1
  401732:	eb44 0402 	adc.w	r4, r4, r2
  401736:	00e6      	lsls	r6, r4, #3
  401738:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  40173c:	00dd      	lsls	r5, r3, #3
  40173e:	462b      	mov	r3, r5
  401740:	4634      	mov	r4, r6
  401742:	185b      	adds	r3, r3, r1
  401744:	eb44 0402 	adc.w	r4, r4, r2
  401748:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  40174c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401750:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401754:	4643      	mov	r3, r8
  401756:	464c      	mov	r4, r9
  401758:	4619      	mov	r1, r3
  40175a:	4622      	mov	r2, r4
  40175c:	f243 63af 	movw	r3, #13999	; 0x36af
  401760:	f04f 0400 	mov.w	r4, #0
  401764:	eb11 0b03 	adds.w	fp, r1, r3
  401768:	eb42 0c04 	adc.w	ip, r2, r4
  40176c:	4658      	mov	r0, fp
  40176e:	4661      	mov	r1, ip
  401770:	4c13      	ldr	r4, [pc, #76]	; (4017c0 <setup_wifi+0xdc>)
  401772:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401776:	f04f 0300 	mov.w	r3, #0
  40177a:	47a0      	blx	r4
  40177c:	4603      	mov	r3, r0
  40177e:	460c      	mov	r4, r1
  401780:	4618      	mov	r0, r3
  401782:	4b10      	ldr	r3, [pc, #64]	; (4017c4 <setup_wifi+0xe0>)
  401784:	4798      	blx	r3
		seconds++;
  401786:	683b      	ldr	r3, [r7, #0]
  401788:	3301      	adds	r3, #1
  40178a:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  40178c:	687b      	ldr	r3, [r7, #4]
  40178e:	2b00      	cmp	r3, #0
  401790:	d0b5      	beq.n	4016fe <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  401792:	4b0d      	ldr	r3, [pc, #52]	; (4017c8 <setup_wifi+0xe4>)
  401794:	2200      	movs	r2, #0
  401796:	601a      	str	r2, [r3, #0]
}
  401798:	bf00      	nop
  40179a:	3708      	adds	r7, #8
  40179c:	46bd      	mov	sp, r7
  40179e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4017a2:	bf00      	nop
  4017a4:	00407c28 	.word	0x00407c28
  4017a8:	004012f1 	.word	0x004012f1
  4017ac:	00407c34 	.word	0x00407c34
  4017b0:	20000bec 	.word	0x20000bec
  4017b4:	00403b0d 	.word	0x00403b0d
  4017b8:	00401521 	.word	0x00401521
  4017bc:	00400fb5 	.word	0x00400fb5
  4017c0:	00403311 	.word	0x00403311
  4017c4:	20000001 	.word	0x20000001
  4017c8:	20000dec 	.word	0x20000dec

004017cc <configure_wifi>:

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  4017cc:	b580      	push	{r7, lr}
  4017ce:	af00      	add	r7, sp, #0
	configure_usart();
  4017d0:	4b05      	ldr	r3, [pc, #20]	; (4017e8 <configure_wifi+0x1c>)
  4017d2:	4798      	blx	r3
	configure_command_complete();
  4017d4:	4b05      	ldr	r3, [pc, #20]	; (4017ec <configure_wifi+0x20>)
  4017d6:	4798      	blx	r3
	configure_web_setup();	
  4017d8:	4b05      	ldr	r3, [pc, #20]	; (4017f0 <configure_wifi+0x24>)
  4017da:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4017dc:	2101      	movs	r1, #1
  4017de:	4805      	ldr	r0, [pc, #20]	; (4017f4 <configure_wifi+0x28>)
  4017e0:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <configure_wifi+0x2c>)
  4017e2:	4798      	blx	r3
}
  4017e4:	bf00      	nop
  4017e6:	bd80      	pop	{r7, pc}
  4017e8:	004010e9 	.word	0x004010e9
  4017ec:	0040120d 	.word	0x0040120d
  4017f0:	00401291 	.word	0x00401291
  4017f4:	40024000 	.word	0x40024000
  4017f8:	00400c19 	.word	0x00400c19

004017fc <reboot_wifi>:
}

/**
 *  \brief Reboots the wifi chip.
 */
void reboot_wifi() {
  4017fc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401800:	b082      	sub	sp, #8
  401802:	af00      	add	r7, sp, #0
	write_wifi_command("reboot\r\n", 10);	// commands wifi chip to reboot
  401804:	210a      	movs	r1, #10
  401806:	4832      	ldr	r0, [pc, #200]	; (4018d0 <reboot_wifi+0xd4>)
  401808:	4b32      	ldr	r3, [pc, #200]	; (4018d4 <reboot_wifi+0xd8>)
  40180a:	4798      	blx	r3
	
	int associated = 0;
  40180c:	2300      	movs	r3, #0
  40180e:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  401810:	2300      	movs	r3, #0
  401812:	603b      	str	r3, [r7, #0]
	
	wifi_setup_flag = false;		// resets the wifi setup flag
  401814:	4b30      	ldr	r3, [pc, #192]	; (4018d8 <reboot_wifi+0xdc>)
  401816:	2200      	movs	r2, #0
  401818:	601a      	str	r2, [r3, #0]
		
	while(!associated) {			// waits for association
  40181a:	e04a      	b.n	4018b2 <reboot_wifi+0xb6>
		if(wifi_setup_flag) {		// listens for wifi setup flag (should be pressed shortly after power)
  40181c:	4b2e      	ldr	r3, [pc, #184]	; (4018d8 <reboot_wifi+0xdc>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	2b00      	cmp	r3, #0
  401822:	d001      	beq.n	401828 <reboot_wifi+0x2c>
			setup_wifi();			// sets up wifi on new network
  401824:	4b2d      	ldr	r3, [pc, #180]	; (4018dc <reboot_wifi+0xe0>)
  401826:	4798      	blx	r3
		}
		associated = strstr(input_buffer, "[Associated]\r\n");
  401828:	492d      	ldr	r1, [pc, #180]	; (4018e0 <reboot_wifi+0xe4>)
  40182a:	482e      	ldr	r0, [pc, #184]	; (4018e4 <reboot_wifi+0xe8>)
  40182c:	4b2e      	ldr	r3, [pc, #184]	; (4018e8 <reboot_wifi+0xec>)
  40182e:	4798      	blx	r3
  401830:	4603      	mov	r3, r0
  401832:	607b      	str	r3, [r7, #4]
		if (seconds > 100){
  401834:	683b      	ldr	r3, [r7, #0]
  401836:	2b64      	cmp	r3, #100	; 0x64
  401838:	dd02      	ble.n	401840 <reboot_wifi+0x44>
			blink_LED(50);
  40183a:	2032      	movs	r0, #50	; 0x32
  40183c:	4b2b      	ldr	r3, [pc, #172]	; (4018ec <reboot_wifi+0xf0>)
  40183e:	4798      	blx	r3
		}
		delay_ms(200);
  401840:	4b2b      	ldr	r3, [pc, #172]	; (4018f0 <reboot_wifi+0xf4>)
  401842:	4798      	blx	r3
  401844:	4603      	mov	r3, r0
  401846:	4619      	mov	r1, r3
  401848:	f04f 0200 	mov.w	r2, #0
  40184c:	460b      	mov	r3, r1
  40184e:	4614      	mov	r4, r2
  401850:	18db      	adds	r3, r3, r3
  401852:	eb44 0404 	adc.w	r4, r4, r4
  401856:	185b      	adds	r3, r3, r1
  401858:	eb44 0402 	adc.w	r4, r4, r2
  40185c:	00e6      	lsls	r6, r4, #3
  40185e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401862:	00dd      	lsls	r5, r3, #3
  401864:	462b      	mov	r3, r5
  401866:	4634      	mov	r4, r6
  401868:	185b      	adds	r3, r3, r1
  40186a:	eb44 0402 	adc.w	r4, r4, r2
  40186e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401872:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401876:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40187a:	4643      	mov	r3, r8
  40187c:	464c      	mov	r4, r9
  40187e:	4619      	mov	r1, r3
  401880:	4622      	mov	r2, r4
  401882:	f243 63af 	movw	r3, #13999	; 0x36af
  401886:	f04f 0400 	mov.w	r4, #0
  40188a:	eb11 0b03 	adds.w	fp, r1, r3
  40188e:	eb42 0c04 	adc.w	ip, r2, r4
  401892:	4658      	mov	r0, fp
  401894:	4661      	mov	r1, ip
  401896:	4c17      	ldr	r4, [pc, #92]	; (4018f4 <reboot_wifi+0xf8>)
  401898:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40189c:	f04f 0300 	mov.w	r3, #0
  4018a0:	47a0      	blx	r4
  4018a2:	4603      	mov	r3, r0
  4018a4:	460c      	mov	r4, r1
  4018a6:	4618      	mov	r0, r3
  4018a8:	4b13      	ldr	r3, [pc, #76]	; (4018f8 <reboot_wifi+0xfc>)
  4018aa:	4798      	blx	r3
		seconds++;
  4018ac:	683b      	ldr	r3, [r7, #0]
  4018ae:	3301      	adds	r3, #1
  4018b0:	603b      	str	r3, [r7, #0]
	while(!associated) {			// waits for association
  4018b2:	687b      	ldr	r3, [r7, #4]
  4018b4:	2b00      	cmp	r3, #0
  4018b6:	d0b1      	beq.n	40181c <reboot_wifi+0x20>
	}
	
	buffer_index = 0;
  4018b8:	4b10      	ldr	r3, [pc, #64]	; (4018fc <reboot_wifi+0x100>)
  4018ba:	2200      	movs	r2, #0
  4018bc:	601a      	str	r2, [r3, #0]
	
	//write_wifi_command("set sy c e off\r\n", 5);	// resets a couple of system parameters in case they were changed
	write_wifi_command("set sy c p off\r\n", 5);
  4018be:	2105      	movs	r1, #5
  4018c0:	480f      	ldr	r0, [pc, #60]	; (401900 <reboot_wifi+0x104>)
  4018c2:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <reboot_wifi+0xd8>)
  4018c4:	4798      	blx	r3
	
  4018c6:	bf00      	nop
  4018c8:	3708      	adds	r7, #8
  4018ca:	46bd      	mov	sp, r7
  4018cc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4018d0:	00407c84 	.word	0x00407c84
  4018d4:	004012f1 	.word	0x004012f1
  4018d8:	20000dec 	.word	0x20000dec
  4018dc:	004016e5 	.word	0x004016e5
  4018e0:	00407c34 	.word	0x00407c34
  4018e4:	20000bec 	.word	0x20000bec
  4018e8:	00403b0d 	.word	0x00403b0d
  4018ec:	00401521 	.word	0x00401521
  4018f0:	00400fb5 	.word	0x00400fb5
  4018f4:	00403311 	.word	0x00403311
  4018f8:	20000001 	.word	0x20000001
  4018fc:	20000de0 	.word	0x20000de0
  401900:	00407c90 	.word	0x00407c90

00401904 <osc_enable>:
{
  401904:	b580      	push	{r7, lr}
  401906:	b082      	sub	sp, #8
  401908:	af00      	add	r7, sp, #0
  40190a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	2b07      	cmp	r3, #7
  401910:	d831      	bhi.n	401976 <osc_enable+0x72>
  401912:	a201      	add	r2, pc, #4	; (adr r2, 401918 <osc_enable+0x14>)
  401914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401918:	00401975 	.word	0x00401975
  40191c:	00401939 	.word	0x00401939
  401920:	00401941 	.word	0x00401941
  401924:	00401949 	.word	0x00401949
  401928:	00401951 	.word	0x00401951
  40192c:	00401959 	.word	0x00401959
  401930:	00401961 	.word	0x00401961
  401934:	0040196b 	.word	0x0040196b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401938:	2000      	movs	r0, #0
  40193a:	4b11      	ldr	r3, [pc, #68]	; (401980 <osc_enable+0x7c>)
  40193c:	4798      	blx	r3
		break;
  40193e:	e01a      	b.n	401976 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401940:	2001      	movs	r0, #1
  401942:	4b0f      	ldr	r3, [pc, #60]	; (401980 <osc_enable+0x7c>)
  401944:	4798      	blx	r3
		break;
  401946:	e016      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401948:	2000      	movs	r0, #0
  40194a:	4b0e      	ldr	r3, [pc, #56]	; (401984 <osc_enable+0x80>)
  40194c:	4798      	blx	r3
		break;
  40194e:	e012      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401950:	2010      	movs	r0, #16
  401952:	4b0c      	ldr	r3, [pc, #48]	; (401984 <osc_enable+0x80>)
  401954:	4798      	blx	r3
		break;
  401956:	e00e      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401958:	2020      	movs	r0, #32
  40195a:	4b0a      	ldr	r3, [pc, #40]	; (401984 <osc_enable+0x80>)
  40195c:	4798      	blx	r3
		break;
  40195e:	e00a      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401960:	213e      	movs	r1, #62	; 0x3e
  401962:	2000      	movs	r0, #0
  401964:	4b08      	ldr	r3, [pc, #32]	; (401988 <osc_enable+0x84>)
  401966:	4798      	blx	r3
		break;
  401968:	e005      	b.n	401976 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40196a:	213e      	movs	r1, #62	; 0x3e
  40196c:	2001      	movs	r0, #1
  40196e:	4b06      	ldr	r3, [pc, #24]	; (401988 <osc_enable+0x84>)
  401970:	4798      	blx	r3
		break;
  401972:	e000      	b.n	401976 <osc_enable+0x72>
		break;
  401974:	bf00      	nop
}
  401976:	bf00      	nop
  401978:	3708      	adds	r7, #8
  40197a:	46bd      	mov	sp, r7
  40197c:	bd80      	pop	{r7, pc}
  40197e:	bf00      	nop
  401980:	004021d1 	.word	0x004021d1
  401984:	0040223d 	.word	0x0040223d
  401988:	004022ad 	.word	0x004022ad

0040198c <osc_is_ready>:
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b082      	sub	sp, #8
  401990:	af00      	add	r7, sp, #0
  401992:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401994:	687b      	ldr	r3, [r7, #4]
  401996:	2b07      	cmp	r3, #7
  401998:	d826      	bhi.n	4019e8 <osc_is_ready+0x5c>
  40199a:	a201      	add	r2, pc, #4	; (adr r2, 4019a0 <osc_is_ready+0x14>)
  40199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4019a0:	004019c1 	.word	0x004019c1
  4019a4:	004019c5 	.word	0x004019c5
  4019a8:	004019c5 	.word	0x004019c5
  4019ac:	004019d7 	.word	0x004019d7
  4019b0:	004019d7 	.word	0x004019d7
  4019b4:	004019d7 	.word	0x004019d7
  4019b8:	004019d7 	.word	0x004019d7
  4019bc:	004019d7 	.word	0x004019d7
		return 1;
  4019c0:	2301      	movs	r3, #1
  4019c2:	e012      	b.n	4019ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4019c4:	4b0b      	ldr	r3, [pc, #44]	; (4019f4 <osc_is_ready+0x68>)
  4019c6:	4798      	blx	r3
  4019c8:	4603      	mov	r3, r0
  4019ca:	2b00      	cmp	r3, #0
  4019cc:	bf14      	ite	ne
  4019ce:	2301      	movne	r3, #1
  4019d0:	2300      	moveq	r3, #0
  4019d2:	b2db      	uxtb	r3, r3
  4019d4:	e009      	b.n	4019ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4019d6:	4b08      	ldr	r3, [pc, #32]	; (4019f8 <osc_is_ready+0x6c>)
  4019d8:	4798      	blx	r3
  4019da:	4603      	mov	r3, r0
  4019dc:	2b00      	cmp	r3, #0
  4019de:	bf14      	ite	ne
  4019e0:	2301      	movne	r3, #1
  4019e2:	2300      	moveq	r3, #0
  4019e4:	b2db      	uxtb	r3, r3
  4019e6:	e000      	b.n	4019ea <osc_is_ready+0x5e>
	return 0;
  4019e8:	2300      	movs	r3, #0
}
  4019ea:	4618      	mov	r0, r3
  4019ec:	3708      	adds	r7, #8
  4019ee:	46bd      	mov	sp, r7
  4019f0:	bd80      	pop	{r7, pc}
  4019f2:	bf00      	nop
  4019f4:	00402209 	.word	0x00402209
  4019f8:	00402325 	.word	0x00402325

004019fc <osc_get_rate>:
{
  4019fc:	b480      	push	{r7}
  4019fe:	b083      	sub	sp, #12
  401a00:	af00      	add	r7, sp, #0
  401a02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a04:	687b      	ldr	r3, [r7, #4]
  401a06:	2b07      	cmp	r3, #7
  401a08:	d825      	bhi.n	401a56 <osc_get_rate+0x5a>
  401a0a:	a201      	add	r2, pc, #4	; (adr r2, 401a10 <osc_get_rate+0x14>)
  401a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a10:	00401a31 	.word	0x00401a31
  401a14:	00401a37 	.word	0x00401a37
  401a18:	00401a3d 	.word	0x00401a3d
  401a1c:	00401a43 	.word	0x00401a43
  401a20:	00401a47 	.word	0x00401a47
  401a24:	00401a4b 	.word	0x00401a4b
  401a28:	00401a4f 	.word	0x00401a4f
  401a2c:	00401a53 	.word	0x00401a53
		return OSC_SLCK_32K_RC_HZ;
  401a30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a34:	e010      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a3a:	e00d      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a40:	e00a      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401a42:	4b08      	ldr	r3, [pc, #32]	; (401a64 <osc_get_rate+0x68>)
  401a44:	e008      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401a46:	4b08      	ldr	r3, [pc, #32]	; (401a68 <osc_get_rate+0x6c>)
  401a48:	e006      	b.n	401a58 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401a4a:	4b08      	ldr	r3, [pc, #32]	; (401a6c <osc_get_rate+0x70>)
  401a4c:	e004      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401a4e:	4b07      	ldr	r3, [pc, #28]	; (401a6c <osc_get_rate+0x70>)
  401a50:	e002      	b.n	401a58 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a52:	4b06      	ldr	r3, [pc, #24]	; (401a6c <osc_get_rate+0x70>)
  401a54:	e000      	b.n	401a58 <osc_get_rate+0x5c>
	return 0;
  401a56:	2300      	movs	r3, #0
}
  401a58:	4618      	mov	r0, r3
  401a5a:	370c      	adds	r7, #12
  401a5c:	46bd      	mov	sp, r7
  401a5e:	bc80      	pop	{r7}
  401a60:	4770      	bx	lr
  401a62:	bf00      	nop
  401a64:	003d0900 	.word	0x003d0900
  401a68:	007a1200 	.word	0x007a1200
  401a6c:	00b71b00 	.word	0x00b71b00

00401a70 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401a70:	b580      	push	{r7, lr}
  401a72:	b082      	sub	sp, #8
  401a74:	af00      	add	r7, sp, #0
  401a76:	4603      	mov	r3, r0
  401a78:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401a7a:	bf00      	nop
  401a7c:	79fb      	ldrb	r3, [r7, #7]
  401a7e:	4618      	mov	r0, r3
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <osc_wait_ready+0x28>)
  401a82:	4798      	blx	r3
  401a84:	4603      	mov	r3, r0
  401a86:	f083 0301 	eor.w	r3, r3, #1
  401a8a:	b2db      	uxtb	r3, r3
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	d1f5      	bne.n	401a7c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401a90:	bf00      	nop
  401a92:	3708      	adds	r7, #8
  401a94:	46bd      	mov	sp, r7
  401a96:	bd80      	pop	{r7, pc}
  401a98:	0040198d 	.word	0x0040198d

00401a9c <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401a9c:	b580      	push	{r7, lr}
  401a9e:	b086      	sub	sp, #24
  401aa0:	af00      	add	r7, sp, #0
  401aa2:	60f8      	str	r0, [r7, #12]
  401aa4:	607a      	str	r2, [r7, #4]
  401aa6:	603b      	str	r3, [r7, #0]
  401aa8:	460b      	mov	r3, r1
  401aaa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401aac:	7afb      	ldrb	r3, [r7, #11]
  401aae:	4618      	mov	r0, r3
  401ab0:	4b0d      	ldr	r3, [pc, #52]	; (401ae8 <pll_config_init+0x4c>)
  401ab2:	4798      	blx	r3
  401ab4:	4602      	mov	r2, r0
  401ab6:	687b      	ldr	r3, [r7, #4]
  401ab8:	fbb2 f3f3 	udiv	r3, r2, r3
  401abc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401abe:	697b      	ldr	r3, [r7, #20]
  401ac0:	683a      	ldr	r2, [r7, #0]
  401ac2:	fb02 f303 	mul.w	r3, r2, r3
  401ac6:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401ac8:	683b      	ldr	r3, [r7, #0]
  401aca:	3b01      	subs	r3, #1
  401acc:	041a      	lsls	r2, r3, #16
  401ace:	4b07      	ldr	r3, [pc, #28]	; (401aec <pll_config_init+0x50>)
  401ad0:	4013      	ands	r3, r2
  401ad2:	687a      	ldr	r2, [r7, #4]
  401ad4:	b2d2      	uxtb	r2, r2
  401ad6:	4313      	orrs	r3, r2
  401ad8:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401adc:	68fb      	ldr	r3, [r7, #12]
  401ade:	601a      	str	r2, [r3, #0]
}
  401ae0:	bf00      	nop
  401ae2:	3718      	adds	r7, #24
  401ae4:	46bd      	mov	sp, r7
  401ae6:	bd80      	pop	{r7, pc}
  401ae8:	004019fd 	.word	0x004019fd
  401aec:	07ff0000 	.word	0x07ff0000

00401af0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401af0:	b580      	push	{r7, lr}
  401af2:	b082      	sub	sp, #8
  401af4:	af00      	add	r7, sp, #0
  401af6:	6078      	str	r0, [r7, #4]
  401af8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401afa:	683b      	ldr	r3, [r7, #0]
  401afc:	2b00      	cmp	r3, #0
  401afe:	d108      	bne.n	401b12 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401b00:	4b09      	ldr	r3, [pc, #36]	; (401b28 <pll_enable+0x38>)
  401b02:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b04:	4a09      	ldr	r2, [pc, #36]	; (401b2c <pll_enable+0x3c>)
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	681b      	ldr	r3, [r3, #0]
  401b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401b0e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401b10:	e005      	b.n	401b1e <pll_enable+0x2e>
		pmc_disable_pllbck();
  401b12:	4b07      	ldr	r3, [pc, #28]	; (401b30 <pll_enable+0x40>)
  401b14:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401b16:	4a05      	ldr	r2, [pc, #20]	; (401b2c <pll_enable+0x3c>)
  401b18:	687b      	ldr	r3, [r7, #4]
  401b1a:	681b      	ldr	r3, [r3, #0]
  401b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  401b1e:	bf00      	nop
  401b20:	3708      	adds	r7, #8
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	0040233d 	.word	0x0040233d
  401b2c:	400e0400 	.word	0x400e0400
  401b30:	0040236d 	.word	0x0040236d

00401b34 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401b34:	b580      	push	{r7, lr}
  401b36:	b082      	sub	sp, #8
  401b38:	af00      	add	r7, sp, #0
  401b3a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401b3c:	687b      	ldr	r3, [r7, #4]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d103      	bne.n	401b4a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401b42:	4b05      	ldr	r3, [pc, #20]	; (401b58 <pll_is_locked+0x24>)
  401b44:	4798      	blx	r3
  401b46:	4603      	mov	r3, r0
  401b48:	e002      	b.n	401b50 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401b4a:	4b04      	ldr	r3, [pc, #16]	; (401b5c <pll_is_locked+0x28>)
  401b4c:	4798      	blx	r3
  401b4e:	4603      	mov	r3, r0
	}
}
  401b50:	4618      	mov	r0, r3
  401b52:	3708      	adds	r7, #8
  401b54:	46bd      	mov	sp, r7
  401b56:	bd80      	pop	{r7, pc}
  401b58:	00402355 	.word	0x00402355
  401b5c:	00402385 	.word	0x00402385

00401b60 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401b60:	b580      	push	{r7, lr}
  401b62:	b082      	sub	sp, #8
  401b64:	af00      	add	r7, sp, #0
  401b66:	4603      	mov	r3, r0
  401b68:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401b6a:	79fb      	ldrb	r3, [r7, #7]
  401b6c:	3b03      	subs	r3, #3
  401b6e:	2b04      	cmp	r3, #4
  401b70:	d808      	bhi.n	401b84 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401b72:	79fb      	ldrb	r3, [r7, #7]
  401b74:	4618      	mov	r0, r3
  401b76:	4b06      	ldr	r3, [pc, #24]	; (401b90 <pll_enable_source+0x30>)
  401b78:	4798      	blx	r3
		osc_wait_ready(e_src);
  401b7a:	79fb      	ldrb	r3, [r7, #7]
  401b7c:	4618      	mov	r0, r3
  401b7e:	4b05      	ldr	r3, [pc, #20]	; (401b94 <pll_enable_source+0x34>)
  401b80:	4798      	blx	r3
		break;
  401b82:	e000      	b.n	401b86 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401b84:	bf00      	nop
	}
}
  401b86:	bf00      	nop
  401b88:	3708      	adds	r7, #8
  401b8a:	46bd      	mov	sp, r7
  401b8c:	bd80      	pop	{r7, pc}
  401b8e:	bf00      	nop
  401b90:	00401905 	.word	0x00401905
  401b94:	00401a71 	.word	0x00401a71

00401b98 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401b98:	b580      	push	{r7, lr}
  401b9a:	b082      	sub	sp, #8
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401ba0:	bf00      	nop
  401ba2:	6878      	ldr	r0, [r7, #4]
  401ba4:	4b04      	ldr	r3, [pc, #16]	; (401bb8 <pll_wait_for_lock+0x20>)
  401ba6:	4798      	blx	r3
  401ba8:	4603      	mov	r3, r0
  401baa:	2b00      	cmp	r3, #0
  401bac:	d0f9      	beq.n	401ba2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401bae:	2300      	movs	r3, #0
}
  401bb0:	4618      	mov	r0, r3
  401bb2:	3708      	adds	r7, #8
  401bb4:	46bd      	mov	sp, r7
  401bb6:	bd80      	pop	{r7, pc}
  401bb8:	00401b35 	.word	0x00401b35

00401bbc <sysclk_get_main_hz>:
{
  401bbc:	b580      	push	{r7, lr}
  401bbe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401bc0:	2006      	movs	r0, #6
  401bc2:	4b04      	ldr	r3, [pc, #16]	; (401bd4 <sysclk_get_main_hz+0x18>)
  401bc4:	4798      	blx	r3
  401bc6:	4602      	mov	r2, r0
  401bc8:	4613      	mov	r3, r2
  401bca:	009b      	lsls	r3, r3, #2
  401bcc:	4413      	add	r3, r2
  401bce:	009b      	lsls	r3, r3, #2
}
  401bd0:	4618      	mov	r0, r3
  401bd2:	bd80      	pop	{r7, pc}
  401bd4:	004019fd 	.word	0x004019fd

00401bd8 <sysclk_get_cpu_hz>:
{
  401bd8:	b580      	push	{r7, lr}
  401bda:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401bdc:	4b02      	ldr	r3, [pc, #8]	; (401be8 <sysclk_get_cpu_hz+0x10>)
  401bde:	4798      	blx	r3
  401be0:	4603      	mov	r3, r0
  401be2:	085b      	lsrs	r3, r3, #1
}
  401be4:	4618      	mov	r0, r3
  401be6:	bd80      	pop	{r7, pc}
  401be8:	00401bbd 	.word	0x00401bbd

00401bec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401bec:	b590      	push	{r4, r7, lr}
  401bee:	b083      	sub	sp, #12
  401bf0:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401bf2:	4811      	ldr	r0, [pc, #68]	; (401c38 <sysclk_init+0x4c>)
  401bf4:	4b11      	ldr	r3, [pc, #68]	; (401c3c <sysclk_init+0x50>)
  401bf6:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401bf8:	2006      	movs	r0, #6
  401bfa:	4b11      	ldr	r3, [pc, #68]	; (401c40 <sysclk_init+0x54>)
  401bfc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401bfe:	1d38      	adds	r0, r7, #4
  401c00:	2314      	movs	r3, #20
  401c02:	2201      	movs	r2, #1
  401c04:	2106      	movs	r1, #6
  401c06:	4c0f      	ldr	r4, [pc, #60]	; (401c44 <sysclk_init+0x58>)
  401c08:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401c0a:	1d3b      	adds	r3, r7, #4
  401c0c:	2100      	movs	r1, #0
  401c0e:	4618      	mov	r0, r3
  401c10:	4b0d      	ldr	r3, [pc, #52]	; (401c48 <sysclk_init+0x5c>)
  401c12:	4798      	blx	r3
		pll_wait_for_lock(0);
  401c14:	2000      	movs	r0, #0
  401c16:	4b0d      	ldr	r3, [pc, #52]	; (401c4c <sysclk_init+0x60>)
  401c18:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c1a:	2010      	movs	r0, #16
  401c1c:	4b0c      	ldr	r3, [pc, #48]	; (401c50 <sysclk_init+0x64>)
  401c1e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c20:	4b0c      	ldr	r3, [pc, #48]	; (401c54 <sysclk_init+0x68>)
  401c22:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401c24:	4b0c      	ldr	r3, [pc, #48]	; (401c58 <sysclk_init+0x6c>)
  401c26:	4798      	blx	r3
  401c28:	4603      	mov	r3, r0
  401c2a:	4618      	mov	r0, r3
  401c2c:	4b03      	ldr	r3, [pc, #12]	; (401c3c <sysclk_init+0x50>)
  401c2e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401c30:	bf00      	nop
  401c32:	370c      	adds	r7, #12
  401c34:	46bd      	mov	sp, r7
  401c36:	bd90      	pop	{r4, r7, pc}
  401c38:	07270e00 	.word	0x07270e00
  401c3c:	00402a1d 	.word	0x00402a1d
  401c40:	00401b61 	.word	0x00401b61
  401c44:	00401a9d 	.word	0x00401a9d
  401c48:	00401af1 	.word	0x00401af1
  401c4c:	00401b99 	.word	0x00401b99
  401c50:	00402151 	.word	0x00402151
  401c54:	00402885 	.word	0x00402885
  401c58:	00401bd9 	.word	0x00401bd9

00401c5c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401c5c:	b480      	push	{r7}
  401c5e:	b085      	sub	sp, #20
  401c60:	af00      	add	r7, sp, #0
  401c62:	60f8      	str	r0, [r7, #12]
  401c64:	60b9      	str	r1, [r7, #8]
  401c66:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c68:	687b      	ldr	r3, [r7, #4]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d003      	beq.n	401c76 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401c6e:	68fb      	ldr	r3, [r7, #12]
  401c70:	68ba      	ldr	r2, [r7, #8]
  401c72:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401c74:	e002      	b.n	401c7c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401c76:	68fb      	ldr	r3, [r7, #12]
  401c78:	68ba      	ldr	r2, [r7, #8]
  401c7a:	661a      	str	r2, [r3, #96]	; 0x60
}
  401c7c:	bf00      	nop
  401c7e:	3714      	adds	r7, #20
  401c80:	46bd      	mov	sp, r7
  401c82:	bc80      	pop	{r7}
  401c84:	4770      	bx	lr

00401c86 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401c86:	b480      	push	{r7}
  401c88:	b085      	sub	sp, #20
  401c8a:	af00      	add	r7, sp, #0
  401c8c:	60f8      	str	r0, [r7, #12]
  401c8e:	60b9      	str	r1, [r7, #8]
  401c90:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401c92:	68fb      	ldr	r3, [r7, #12]
  401c94:	68ba      	ldr	r2, [r7, #8]
  401c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401c9a:	687b      	ldr	r3, [r7, #4]
  401c9c:	005b      	lsls	r3, r3, #1
  401c9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ca2:	fbb2 f3f3 	udiv	r3, r2, r3
  401ca6:	3b01      	subs	r3, #1
  401ca8:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401cb2:	bf00      	nop
  401cb4:	3714      	adds	r7, #20
  401cb6:	46bd      	mov	sp, r7
  401cb8:	bc80      	pop	{r7}
  401cba:	4770      	bx	lr

00401cbc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401cbc:	b480      	push	{r7}
  401cbe:	b087      	sub	sp, #28
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	60f8      	str	r0, [r7, #12]
  401cc4:	60b9      	str	r1, [r7, #8]
  401cc6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401cc8:	68fb      	ldr	r3, [r7, #12]
  401cca:	687a      	ldr	r2, [r7, #4]
  401ccc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401cce:	68bb      	ldr	r3, [r7, #8]
  401cd0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cd4:	d04a      	beq.n	401d6c <pio_set_peripheral+0xb0>
  401cd6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cda:	d808      	bhi.n	401cee <pio_set_peripheral+0x32>
  401cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401ce0:	d016      	beq.n	401d10 <pio_set_peripheral+0x54>
  401ce2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401ce6:	d02c      	beq.n	401d42 <pio_set_peripheral+0x86>
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d069      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401cec:	e064      	b.n	401db8 <pio_set_peripheral+0xfc>
  401cee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cf2:	d065      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401cf4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cf8:	d803      	bhi.n	401d02 <pio_set_peripheral+0x46>
  401cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401cfe:	d04a      	beq.n	401d96 <pio_set_peripheral+0xda>
  401d00:	e05a      	b.n	401db8 <pio_set_peripheral+0xfc>
  401d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d06:	d05b      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401d08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d0c:	d058      	beq.n	401dc0 <pio_set_peripheral+0x104>
  401d0e:	e053      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d10:	68fb      	ldr	r3, [r7, #12]
  401d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d14:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401d1a:	687b      	ldr	r3, [r7, #4]
  401d1c:	43d9      	mvns	r1, r3
  401d1e:	697b      	ldr	r3, [r7, #20]
  401d20:	400b      	ands	r3, r1
  401d22:	401a      	ands	r2, r3
  401d24:	68fb      	ldr	r3, [r7, #12]
  401d26:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d2c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d2e:	68fb      	ldr	r3, [r7, #12]
  401d30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401d32:	687b      	ldr	r3, [r7, #4]
  401d34:	43d9      	mvns	r1, r3
  401d36:	697b      	ldr	r3, [r7, #20]
  401d38:	400b      	ands	r3, r1
  401d3a:	401a      	ands	r2, r3
  401d3c:	68fb      	ldr	r3, [r7, #12]
  401d3e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d40:	e03a      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d42:	68fb      	ldr	r3, [r7, #12]
  401d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d46:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d48:	687a      	ldr	r2, [r7, #4]
  401d4a:	697b      	ldr	r3, [r7, #20]
  401d4c:	431a      	orrs	r2, r3
  401d4e:	68fb      	ldr	r3, [r7, #12]
  401d50:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d52:	68fb      	ldr	r3, [r7, #12]
  401d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d56:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401d5c:	687b      	ldr	r3, [r7, #4]
  401d5e:	43d9      	mvns	r1, r3
  401d60:	697b      	ldr	r3, [r7, #20]
  401d62:	400b      	ands	r3, r1
  401d64:	401a      	ands	r2, r3
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d6a:	e025      	b.n	401db8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d6c:	68fb      	ldr	r3, [r7, #12]
  401d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d70:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401d76:	687b      	ldr	r3, [r7, #4]
  401d78:	43d9      	mvns	r1, r3
  401d7a:	697b      	ldr	r3, [r7, #20]
  401d7c:	400b      	ands	r3, r1
  401d7e:	401a      	ands	r2, r3
  401d80:	68fb      	ldr	r3, [r7, #12]
  401d82:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d84:	68fb      	ldr	r3, [r7, #12]
  401d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401d8a:	687a      	ldr	r2, [r7, #4]
  401d8c:	697b      	ldr	r3, [r7, #20]
  401d8e:	431a      	orrs	r2, r3
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401d94:	e010      	b.n	401db8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d96:	68fb      	ldr	r3, [r7, #12]
  401d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d9a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d9c:	687a      	ldr	r2, [r7, #4]
  401d9e:	697b      	ldr	r3, [r7, #20]
  401da0:	431a      	orrs	r2, r3
  401da2:	68fb      	ldr	r3, [r7, #12]
  401da4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401da6:	68fb      	ldr	r3, [r7, #12]
  401da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401daa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dac:	687a      	ldr	r2, [r7, #4]
  401dae:	697b      	ldr	r3, [r7, #20]
  401db0:	431a      	orrs	r2, r3
  401db2:	68fb      	ldr	r3, [r7, #12]
  401db4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401db6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401db8:	68fb      	ldr	r3, [r7, #12]
  401dba:	687a      	ldr	r2, [r7, #4]
  401dbc:	605a      	str	r2, [r3, #4]
  401dbe:	e000      	b.n	401dc2 <pio_set_peripheral+0x106>
		return;
  401dc0:	bf00      	nop
}
  401dc2:	371c      	adds	r7, #28
  401dc4:	46bd      	mov	sp, r7
  401dc6:	bc80      	pop	{r7}
  401dc8:	4770      	bx	lr
	...

00401dcc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401dcc:	b580      	push	{r7, lr}
  401dce:	b084      	sub	sp, #16
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	60f8      	str	r0, [r7, #12]
  401dd4:	60b9      	str	r1, [r7, #8]
  401dd6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401dd8:	68b9      	ldr	r1, [r7, #8]
  401dda:	68f8      	ldr	r0, [r7, #12]
  401ddc:	4b19      	ldr	r3, [pc, #100]	; (401e44 <pio_set_input+0x78>)
  401dde:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401de0:	687b      	ldr	r3, [r7, #4]
  401de2:	f003 0301 	and.w	r3, r3, #1
  401de6:	461a      	mov	r2, r3
  401de8:	68b9      	ldr	r1, [r7, #8]
  401dea:	68f8      	ldr	r0, [r7, #12]
  401dec:	4b16      	ldr	r3, [pc, #88]	; (401e48 <pio_set_input+0x7c>)
  401dee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401df0:	687b      	ldr	r3, [r7, #4]
  401df2:	f003 030a 	and.w	r3, r3, #10
  401df6:	2b00      	cmp	r3, #0
  401df8:	d003      	beq.n	401e02 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401dfa:	68fb      	ldr	r3, [r7, #12]
  401dfc:	68ba      	ldr	r2, [r7, #8]
  401dfe:	621a      	str	r2, [r3, #32]
  401e00:	e002      	b.n	401e08 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401e02:	68fb      	ldr	r3, [r7, #12]
  401e04:	68ba      	ldr	r2, [r7, #8]
  401e06:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401e08:	687b      	ldr	r3, [r7, #4]
  401e0a:	f003 0302 	and.w	r3, r3, #2
  401e0e:	2b00      	cmp	r3, #0
  401e10:	d004      	beq.n	401e1c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401e12:	68fb      	ldr	r3, [r7, #12]
  401e14:	68ba      	ldr	r2, [r7, #8]
  401e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401e1a:	e008      	b.n	401e2e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	f003 0308 	and.w	r3, r3, #8
  401e22:	2b00      	cmp	r3, #0
  401e24:	d003      	beq.n	401e2e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401e26:	68fb      	ldr	r3, [r7, #12]
  401e28:	68ba      	ldr	r2, [r7, #8]
  401e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	68ba      	ldr	r2, [r7, #8]
  401e32:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401e34:	68fb      	ldr	r3, [r7, #12]
  401e36:	68ba      	ldr	r2, [r7, #8]
  401e38:	601a      	str	r2, [r3, #0]
}
  401e3a:	bf00      	nop
  401e3c:	3710      	adds	r7, #16
  401e3e:	46bd      	mov	sp, r7
  401e40:	bd80      	pop	{r7, pc}
  401e42:	bf00      	nop
  401e44:	00401f35 	.word	0x00401f35
  401e48:	00401c5d 	.word	0x00401c5d

00401e4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401e4c:	b580      	push	{r7, lr}
  401e4e:	b084      	sub	sp, #16
  401e50:	af00      	add	r7, sp, #0
  401e52:	60f8      	str	r0, [r7, #12]
  401e54:	60b9      	str	r1, [r7, #8]
  401e56:	607a      	str	r2, [r7, #4]
  401e58:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401e5a:	68b9      	ldr	r1, [r7, #8]
  401e5c:	68f8      	ldr	r0, [r7, #12]
  401e5e:	4b12      	ldr	r3, [pc, #72]	; (401ea8 <pio_set_output+0x5c>)
  401e60:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401e62:	69ba      	ldr	r2, [r7, #24]
  401e64:	68b9      	ldr	r1, [r7, #8]
  401e66:	68f8      	ldr	r0, [r7, #12]
  401e68:	4b10      	ldr	r3, [pc, #64]	; (401eac <pio_set_output+0x60>)
  401e6a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401e6c:	683b      	ldr	r3, [r7, #0]
  401e6e:	2b00      	cmp	r3, #0
  401e70:	d003      	beq.n	401e7a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401e72:	68fb      	ldr	r3, [r7, #12]
  401e74:	68ba      	ldr	r2, [r7, #8]
  401e76:	651a      	str	r2, [r3, #80]	; 0x50
  401e78:	e002      	b.n	401e80 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401e7a:	68fb      	ldr	r3, [r7, #12]
  401e7c:	68ba      	ldr	r2, [r7, #8]
  401e7e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	2b00      	cmp	r3, #0
  401e84:	d003      	beq.n	401e8e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	68ba      	ldr	r2, [r7, #8]
  401e8a:	631a      	str	r2, [r3, #48]	; 0x30
  401e8c:	e002      	b.n	401e94 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	68ba      	ldr	r2, [r7, #8]
  401e92:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401e94:	68fb      	ldr	r3, [r7, #12]
  401e96:	68ba      	ldr	r2, [r7, #8]
  401e98:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	601a      	str	r2, [r3, #0]
}
  401ea0:	bf00      	nop
  401ea2:	3710      	adds	r7, #16
  401ea4:	46bd      	mov	sp, r7
  401ea6:	bd80      	pop	{r7, pc}
  401ea8:	00401f35 	.word	0x00401f35
  401eac:	00401c5d 	.word	0x00401c5d

00401eb0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401eb0:	b480      	push	{r7}
  401eb2:	b085      	sub	sp, #20
  401eb4:	af00      	add	r7, sp, #0
  401eb6:	60f8      	str	r0, [r7, #12]
  401eb8:	60b9      	str	r1, [r7, #8]
  401eba:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401ebc:	687b      	ldr	r3, [r7, #4]
  401ebe:	f003 0310 	and.w	r3, r3, #16
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d020      	beq.n	401f08 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401ec6:	68fb      	ldr	r3, [r7, #12]
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401ece:	687b      	ldr	r3, [r7, #4]
  401ed0:	f003 0320 	and.w	r3, r3, #32
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d004      	beq.n	401ee2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401ed8:	68fb      	ldr	r3, [r7, #12]
  401eda:	68ba      	ldr	r2, [r7, #8]
  401edc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ee0:	e003      	b.n	401eea <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401ee2:	68fb      	ldr	r3, [r7, #12]
  401ee4:	68ba      	ldr	r2, [r7, #8]
  401ee6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d004      	beq.n	401efe <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401ef4:	68fb      	ldr	r3, [r7, #12]
  401ef6:	68ba      	ldr	r2, [r7, #8]
  401ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401efc:	e008      	b.n	401f10 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	68ba      	ldr	r2, [r7, #8]
  401f02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401f06:	e003      	b.n	401f10 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401f08:	68fb      	ldr	r3, [r7, #12]
  401f0a:	68ba      	ldr	r2, [r7, #8]
  401f0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401f10:	bf00      	nop
  401f12:	3714      	adds	r7, #20
  401f14:	46bd      	mov	sp, r7
  401f16:	bc80      	pop	{r7}
  401f18:	4770      	bx	lr

00401f1a <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f1a:	b480      	push	{r7}
  401f1c:	b083      	sub	sp, #12
  401f1e:	af00      	add	r7, sp, #0
  401f20:	6078      	str	r0, [r7, #4]
  401f22:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	683a      	ldr	r2, [r7, #0]
  401f28:	641a      	str	r2, [r3, #64]	; 0x40
}
  401f2a:	bf00      	nop
  401f2c:	370c      	adds	r7, #12
  401f2e:	46bd      	mov	sp, r7
  401f30:	bc80      	pop	{r7}
  401f32:	4770      	bx	lr

00401f34 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f34:	b480      	push	{r7}
  401f36:	b083      	sub	sp, #12
  401f38:	af00      	add	r7, sp, #0
  401f3a:	6078      	str	r0, [r7, #4]
  401f3c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401f3e:	687b      	ldr	r3, [r7, #4]
  401f40:	683a      	ldr	r2, [r7, #0]
  401f42:	645a      	str	r2, [r3, #68]	; 0x44
}
  401f44:	bf00      	nop
  401f46:	370c      	adds	r7, #12
  401f48:	46bd      	mov	sp, r7
  401f4a:	bc80      	pop	{r7}
  401f4c:	4770      	bx	lr

00401f4e <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401f4e:	b480      	push	{r7}
  401f50:	b083      	sub	sp, #12
  401f52:	af00      	add	r7, sp, #0
  401f54:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401f56:	687b      	ldr	r3, [r7, #4]
  401f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401f5a:	4618      	mov	r0, r3
  401f5c:	370c      	adds	r7, #12
  401f5e:	46bd      	mov	sp, r7
  401f60:	bc80      	pop	{r7}
  401f62:	4770      	bx	lr

00401f64 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401f64:	b480      	push	{r7}
  401f66:	b083      	sub	sp, #12
  401f68:	af00      	add	r7, sp, #0
  401f6a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401f6c:	687b      	ldr	r3, [r7, #4]
  401f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401f70:	4618      	mov	r0, r3
  401f72:	370c      	adds	r7, #12
  401f74:	46bd      	mov	sp, r7
  401f76:	bc80      	pop	{r7}
  401f78:	4770      	bx	lr
	...

00401f7c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401f7c:	b590      	push	{r4, r7, lr}
  401f7e:	b087      	sub	sp, #28
  401f80:	af02      	add	r7, sp, #8
  401f82:	6078      	str	r0, [r7, #4]
  401f84:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401f86:	6878      	ldr	r0, [r7, #4]
  401f88:	4b63      	ldr	r3, [pc, #396]	; (402118 <pio_configure_pin+0x19c>)
  401f8a:	4798      	blx	r3
  401f8c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401f8e:	683b      	ldr	r3, [r7, #0]
  401f90:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f98:	d067      	beq.n	40206a <pio_configure_pin+0xee>
  401f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f9e:	d809      	bhi.n	401fb4 <pio_configure_pin+0x38>
  401fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401fa4:	d02b      	beq.n	401ffe <pio_configure_pin+0x82>
  401fa6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401faa:	d043      	beq.n	402034 <pio_configure_pin+0xb8>
  401fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401fb0:	d00a      	beq.n	401fc8 <pio_configure_pin+0x4c>
  401fb2:	e0a9      	b.n	402108 <pio_configure_pin+0x18c>
  401fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401fb8:	d07e      	beq.n	4020b8 <pio_configure_pin+0x13c>
  401fba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401fbe:	d07b      	beq.n	4020b8 <pio_configure_pin+0x13c>
  401fc0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401fc4:	d06c      	beq.n	4020a0 <pio_configure_pin+0x124>
  401fc6:	e09f      	b.n	402108 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401fc8:	687b      	ldr	r3, [r7, #4]
  401fca:	f003 031f 	and.w	r3, r3, #31
  401fce:	2201      	movs	r2, #1
  401fd0:	fa02 f303 	lsl.w	r3, r2, r3
  401fd4:	461a      	mov	r2, r3
  401fd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401fda:	68f8      	ldr	r0, [r7, #12]
  401fdc:	4b4f      	ldr	r3, [pc, #316]	; (40211c <pio_configure_pin+0x1a0>)
  401fde:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401fe0:	687b      	ldr	r3, [r7, #4]
  401fe2:	f003 031f 	and.w	r3, r3, #31
  401fe6:	2201      	movs	r2, #1
  401fe8:	fa02 f303 	lsl.w	r3, r2, r3
  401fec:	4619      	mov	r1, r3
  401fee:	683b      	ldr	r3, [r7, #0]
  401ff0:	f003 0301 	and.w	r3, r3, #1
  401ff4:	461a      	mov	r2, r3
  401ff6:	68f8      	ldr	r0, [r7, #12]
  401ff8:	4b49      	ldr	r3, [pc, #292]	; (402120 <pio_configure_pin+0x1a4>)
  401ffa:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401ffc:	e086      	b.n	40210c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401ffe:	687b      	ldr	r3, [r7, #4]
  402000:	f003 031f 	and.w	r3, r3, #31
  402004:	2201      	movs	r2, #1
  402006:	fa02 f303 	lsl.w	r3, r2, r3
  40200a:	461a      	mov	r2, r3
  40200c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402010:	68f8      	ldr	r0, [r7, #12]
  402012:	4b42      	ldr	r3, [pc, #264]	; (40211c <pio_configure_pin+0x1a0>)
  402014:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402016:	687b      	ldr	r3, [r7, #4]
  402018:	f003 031f 	and.w	r3, r3, #31
  40201c:	2201      	movs	r2, #1
  40201e:	fa02 f303 	lsl.w	r3, r2, r3
  402022:	4619      	mov	r1, r3
  402024:	683b      	ldr	r3, [r7, #0]
  402026:	f003 0301 	and.w	r3, r3, #1
  40202a:	461a      	mov	r2, r3
  40202c:	68f8      	ldr	r0, [r7, #12]
  40202e:	4b3c      	ldr	r3, [pc, #240]	; (402120 <pio_configure_pin+0x1a4>)
  402030:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402032:	e06b      	b.n	40210c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402034:	687b      	ldr	r3, [r7, #4]
  402036:	f003 031f 	and.w	r3, r3, #31
  40203a:	2201      	movs	r2, #1
  40203c:	fa02 f303 	lsl.w	r3, r2, r3
  402040:	461a      	mov	r2, r3
  402042:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402046:	68f8      	ldr	r0, [r7, #12]
  402048:	4b34      	ldr	r3, [pc, #208]	; (40211c <pio_configure_pin+0x1a0>)
  40204a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40204c:	687b      	ldr	r3, [r7, #4]
  40204e:	f003 031f 	and.w	r3, r3, #31
  402052:	2201      	movs	r2, #1
  402054:	fa02 f303 	lsl.w	r3, r2, r3
  402058:	4619      	mov	r1, r3
  40205a:	683b      	ldr	r3, [r7, #0]
  40205c:	f003 0301 	and.w	r3, r3, #1
  402060:	461a      	mov	r2, r3
  402062:	68f8      	ldr	r0, [r7, #12]
  402064:	4b2e      	ldr	r3, [pc, #184]	; (402120 <pio_configure_pin+0x1a4>)
  402066:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402068:	e050      	b.n	40210c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40206a:	687b      	ldr	r3, [r7, #4]
  40206c:	f003 031f 	and.w	r3, r3, #31
  402070:	2201      	movs	r2, #1
  402072:	fa02 f303 	lsl.w	r3, r2, r3
  402076:	461a      	mov	r2, r3
  402078:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40207c:	68f8      	ldr	r0, [r7, #12]
  40207e:	4b27      	ldr	r3, [pc, #156]	; (40211c <pio_configure_pin+0x1a0>)
  402080:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	f003 031f 	and.w	r3, r3, #31
  402088:	2201      	movs	r2, #1
  40208a:	fa02 f303 	lsl.w	r3, r2, r3
  40208e:	4619      	mov	r1, r3
  402090:	683b      	ldr	r3, [r7, #0]
  402092:	f003 0301 	and.w	r3, r3, #1
  402096:	461a      	mov	r2, r3
  402098:	68f8      	ldr	r0, [r7, #12]
  40209a:	4b21      	ldr	r3, [pc, #132]	; (402120 <pio_configure_pin+0x1a4>)
  40209c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40209e:	e035      	b.n	40210c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4020a0:	687b      	ldr	r3, [r7, #4]
  4020a2:	f003 031f 	and.w	r3, r3, #31
  4020a6:	2201      	movs	r2, #1
  4020a8:	fa02 f303 	lsl.w	r3, r2, r3
  4020ac:	683a      	ldr	r2, [r7, #0]
  4020ae:	4619      	mov	r1, r3
  4020b0:	68f8      	ldr	r0, [r7, #12]
  4020b2:	4b1c      	ldr	r3, [pc, #112]	; (402124 <pio_configure_pin+0x1a8>)
  4020b4:	4798      	blx	r3
		break;
  4020b6:	e029      	b.n	40210c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	f003 031f 	and.w	r3, r3, #31
  4020be:	2201      	movs	r2, #1
  4020c0:	fa02 f303 	lsl.w	r3, r2, r3
  4020c4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4020c6:	683b      	ldr	r3, [r7, #0]
  4020c8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020cc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4020d0:	bf0c      	ite	eq
  4020d2:	2301      	moveq	r3, #1
  4020d4:	2300      	movne	r3, #0
  4020d6:	b2db      	uxtb	r3, r3
  4020d8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4020da:	683b      	ldr	r3, [r7, #0]
  4020dc:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020e0:	2b00      	cmp	r3, #0
  4020e2:	bf14      	ite	ne
  4020e4:	2301      	movne	r3, #1
  4020e6:	2300      	moveq	r3, #0
  4020e8:	b2db      	uxtb	r3, r3
  4020ea:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4020ec:	683b      	ldr	r3, [r7, #0]
  4020ee:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4020f2:	2b00      	cmp	r3, #0
  4020f4:	bf14      	ite	ne
  4020f6:	2301      	movne	r3, #1
  4020f8:	2300      	moveq	r3, #0
  4020fa:	b2db      	uxtb	r3, r3
  4020fc:	9300      	str	r3, [sp, #0]
  4020fe:	4603      	mov	r3, r0
  402100:	68f8      	ldr	r0, [r7, #12]
  402102:	4c09      	ldr	r4, [pc, #36]	; (402128 <pio_configure_pin+0x1ac>)
  402104:	47a0      	blx	r4
		break;
  402106:	e001      	b.n	40210c <pio_configure_pin+0x190>

	default:
		return 0;
  402108:	2300      	movs	r3, #0
  40210a:	e000      	b.n	40210e <pio_configure_pin+0x192>
	}

	return 1;
  40210c:	2301      	movs	r3, #1
}
  40210e:	4618      	mov	r0, r3
  402110:	3714      	adds	r7, #20
  402112:	46bd      	mov	sp, r7
  402114:	bd90      	pop	{r4, r7, pc}
  402116:	bf00      	nop
  402118:	0040212d 	.word	0x0040212d
  40211c:	00401cbd 	.word	0x00401cbd
  402120:	00401c5d 	.word	0x00401c5d
  402124:	00401dcd 	.word	0x00401dcd
  402128:	00401e4d 	.word	0x00401e4d

0040212c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40212c:	b480      	push	{r7}
  40212e:	b085      	sub	sp, #20
  402130:	af00      	add	r7, sp, #0
  402132:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402134:	687b      	ldr	r3, [r7, #4]
  402136:	095b      	lsrs	r3, r3, #5
  402138:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40213c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402140:	025b      	lsls	r3, r3, #9
  402142:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  402144:	68fb      	ldr	r3, [r7, #12]
}
  402146:	4618      	mov	r0, r3
  402148:	3714      	adds	r7, #20
  40214a:	46bd      	mov	sp, r7
  40214c:	bc80      	pop	{r7}
  40214e:	4770      	bx	lr

00402150 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402150:	b480      	push	{r7}
  402152:	b085      	sub	sp, #20
  402154:	af00      	add	r7, sp, #0
  402156:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402158:	491c      	ldr	r1, [pc, #112]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40215a:	4b1c      	ldr	r3, [pc, #112]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40215e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402162:	687b      	ldr	r3, [r7, #4]
  402164:	4313      	orrs	r3, r2
  402166:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402168:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40216c:	60fb      	str	r3, [r7, #12]
  40216e:	e007      	b.n	402180 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402170:	68fb      	ldr	r3, [r7, #12]
  402172:	2b00      	cmp	r3, #0
  402174:	d101      	bne.n	40217a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402176:	2301      	movs	r3, #1
  402178:	e023      	b.n	4021c2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40217a:	68fb      	ldr	r3, [r7, #12]
  40217c:	3b01      	subs	r3, #1
  40217e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402180:	4b12      	ldr	r3, [pc, #72]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  402182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402184:	f003 0308 	and.w	r3, r3, #8
  402188:	2b00      	cmp	r3, #0
  40218a:	d0f1      	beq.n	402170 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40218c:	4a0f      	ldr	r2, [pc, #60]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  40218e:	4b0f      	ldr	r3, [pc, #60]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  402190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402192:	f023 0303 	bic.w	r3, r3, #3
  402196:	f043 0302 	orr.w	r3, r3, #2
  40219a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40219c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4021a0:	60fb      	str	r3, [r7, #12]
  4021a2:	e007      	b.n	4021b4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021a4:	68fb      	ldr	r3, [r7, #12]
  4021a6:	2b00      	cmp	r3, #0
  4021a8:	d101      	bne.n	4021ae <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4021aa:	2301      	movs	r3, #1
  4021ac:	e009      	b.n	4021c2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021ae:	68fb      	ldr	r3, [r7, #12]
  4021b0:	3b01      	subs	r3, #1
  4021b2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021b4:	4b05      	ldr	r3, [pc, #20]	; (4021cc <pmc_switch_mck_to_pllack+0x7c>)
  4021b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021b8:	f003 0308 	and.w	r3, r3, #8
  4021bc:	2b00      	cmp	r3, #0
  4021be:	d0f1      	beq.n	4021a4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4021c0:	2300      	movs	r3, #0
}
  4021c2:	4618      	mov	r0, r3
  4021c4:	3714      	adds	r7, #20
  4021c6:	46bd      	mov	sp, r7
  4021c8:	bc80      	pop	{r7}
  4021ca:	4770      	bx	lr
  4021cc:	400e0400 	.word	0x400e0400

004021d0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4021d0:	b480      	push	{r7}
  4021d2:	b083      	sub	sp, #12
  4021d4:	af00      	add	r7, sp, #0
  4021d6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4021d8:	687b      	ldr	r3, [r7, #4]
  4021da:	2b01      	cmp	r3, #1
  4021dc:	d107      	bne.n	4021ee <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4021de:	4a08      	ldr	r2, [pc, #32]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021e0:	4b07      	ldr	r3, [pc, #28]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021e2:	689b      	ldr	r3, [r3, #8]
  4021e4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4021e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4021ec:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4021ee:	4b04      	ldr	r3, [pc, #16]	; (402200 <pmc_switch_sclk_to_32kxtal+0x30>)
  4021f0:	4a04      	ldr	r2, [pc, #16]	; (402204 <pmc_switch_sclk_to_32kxtal+0x34>)
  4021f2:	601a      	str	r2, [r3, #0]
}
  4021f4:	bf00      	nop
  4021f6:	370c      	adds	r7, #12
  4021f8:	46bd      	mov	sp, r7
  4021fa:	bc80      	pop	{r7}
  4021fc:	4770      	bx	lr
  4021fe:	bf00      	nop
  402200:	400e1410 	.word	0x400e1410
  402204:	a5000008 	.word	0xa5000008

00402208 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402208:	b480      	push	{r7}
  40220a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40220c:	4b09      	ldr	r3, [pc, #36]	; (402234 <pmc_osc_is_ready_32kxtal+0x2c>)
  40220e:	695b      	ldr	r3, [r3, #20]
  402210:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402214:	2b00      	cmp	r3, #0
  402216:	d007      	beq.n	402228 <pmc_osc_is_ready_32kxtal+0x20>
  402218:	4b07      	ldr	r3, [pc, #28]	; (402238 <pmc_osc_is_ready_32kxtal+0x30>)
  40221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402220:	2b00      	cmp	r3, #0
  402222:	d001      	beq.n	402228 <pmc_osc_is_ready_32kxtal+0x20>
  402224:	2301      	movs	r3, #1
  402226:	e000      	b.n	40222a <pmc_osc_is_ready_32kxtal+0x22>
  402228:	2300      	movs	r3, #0
}
  40222a:	4618      	mov	r0, r3
  40222c:	46bd      	mov	sp, r7
  40222e:	bc80      	pop	{r7}
  402230:	4770      	bx	lr
  402232:	bf00      	nop
  402234:	400e1410 	.word	0x400e1410
  402238:	400e0400 	.word	0x400e0400

0040223c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40223c:	b480      	push	{r7}
  40223e:	b083      	sub	sp, #12
  402240:	af00      	add	r7, sp, #0
  402242:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402244:	4a18      	ldr	r2, [pc, #96]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402246:	4b18      	ldr	r3, [pc, #96]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402248:	6a1b      	ldr	r3, [r3, #32]
  40224a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40224e:	f043 0308 	orr.w	r3, r3, #8
  402252:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402254:	bf00      	nop
  402256:	4b14      	ldr	r3, [pc, #80]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40225e:	2b00      	cmp	r3, #0
  402260:	d0f9      	beq.n	402256 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402262:	4911      	ldr	r1, [pc, #68]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402264:	4b10      	ldr	r3, [pc, #64]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  402266:	6a1b      	ldr	r3, [r3, #32]
  402268:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40226c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402270:	687a      	ldr	r2, [r7, #4]
  402272:	4313      	orrs	r3, r2
  402274:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402278:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40227a:	bf00      	nop
  40227c:	4b0a      	ldr	r3, [pc, #40]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402284:	2b00      	cmp	r3, #0
  402286:	d0f9      	beq.n	40227c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402288:	4a07      	ldr	r2, [pc, #28]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40228a:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  40228c:	6a1b      	ldr	r3, [r3, #32]
  40228e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402296:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40229a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40229c:	bf00      	nop
  40229e:	370c      	adds	r7, #12
  4022a0:	46bd      	mov	sp, r7
  4022a2:	bc80      	pop	{r7}
  4022a4:	4770      	bx	lr
  4022a6:	bf00      	nop
  4022a8:	400e0400 	.word	0x400e0400

004022ac <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4022ac:	b480      	push	{r7}
  4022ae:	b083      	sub	sp, #12
  4022b0:	af00      	add	r7, sp, #0
  4022b2:	6078      	str	r0, [r7, #4]
  4022b4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4022b6:	687b      	ldr	r3, [r7, #4]
  4022b8:	2b00      	cmp	r3, #0
  4022ba:	d008      	beq.n	4022ce <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022bc:	4916      	ldr	r1, [pc, #88]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022be:	4b16      	ldr	r3, [pc, #88]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022c0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4022c2:	4a16      	ldr	r2, [pc, #88]	; (40231c <pmc_switch_mainck_to_xtal+0x70>)
  4022c4:	401a      	ands	r2, r3
  4022c6:	4b16      	ldr	r3, [pc, #88]	; (402320 <pmc_switch_mainck_to_xtal+0x74>)
  4022c8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022ca:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4022cc:	e01e      	b.n	40230c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022ce:	4912      	ldr	r1, [pc, #72]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022d0:	4b11      	ldr	r3, [pc, #68]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022d2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4022d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4022d8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4022dc:	683a      	ldr	r2, [r7, #0]
  4022de:	0212      	lsls	r2, r2, #8
  4022e0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4022e2:	4313      	orrs	r3, r2
  4022e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022e8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4022ec:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4022ee:	bf00      	nop
  4022f0:	4b09      	ldr	r3, [pc, #36]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022f4:	f003 0301 	and.w	r3, r3, #1
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d0f9      	beq.n	4022f0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4022fc:	4a06      	ldr	r2, [pc, #24]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  4022fe:	4b06      	ldr	r3, [pc, #24]	; (402318 <pmc_switch_mainck_to_xtal+0x6c>)
  402300:	6a1b      	ldr	r3, [r3, #32]
  402302:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40230a:	6213      	str	r3, [r2, #32]
}
  40230c:	bf00      	nop
  40230e:	370c      	adds	r7, #12
  402310:	46bd      	mov	sp, r7
  402312:	bc80      	pop	{r7}
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	400e0400 	.word	0x400e0400
  40231c:	fec8fffc 	.word	0xfec8fffc
  402320:	01370002 	.word	0x01370002

00402324 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402324:	b480      	push	{r7}
  402326:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402328:	4b03      	ldr	r3, [pc, #12]	; (402338 <pmc_osc_is_ready_mainck+0x14>)
  40232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402330:	4618      	mov	r0, r3
  402332:	46bd      	mov	sp, r7
  402334:	bc80      	pop	{r7}
  402336:	4770      	bx	lr
  402338:	400e0400 	.word	0x400e0400

0040233c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40233c:	b480      	push	{r7}
  40233e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402340:	4b03      	ldr	r3, [pc, #12]	; (402350 <pmc_disable_pllack+0x14>)
  402342:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402346:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402348:	bf00      	nop
  40234a:	46bd      	mov	sp, r7
  40234c:	bc80      	pop	{r7}
  40234e:	4770      	bx	lr
  402350:	400e0400 	.word	0x400e0400

00402354 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402354:	b480      	push	{r7}
  402356:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402358:	4b03      	ldr	r3, [pc, #12]	; (402368 <pmc_is_locked_pllack+0x14>)
  40235a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40235c:	f003 0302 	and.w	r3, r3, #2
}
  402360:	4618      	mov	r0, r3
  402362:	46bd      	mov	sp, r7
  402364:	bc80      	pop	{r7}
  402366:	4770      	bx	lr
  402368:	400e0400 	.word	0x400e0400

0040236c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40236c:	b480      	push	{r7}
  40236e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402370:	4b03      	ldr	r3, [pc, #12]	; (402380 <pmc_disable_pllbck+0x14>)
  402372:	2200      	movs	r2, #0
  402374:	62da      	str	r2, [r3, #44]	; 0x2c
}
  402376:	bf00      	nop
  402378:	46bd      	mov	sp, r7
  40237a:	bc80      	pop	{r7}
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop
  402380:	400e0400 	.word	0x400e0400

00402384 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  402384:	b480      	push	{r7}
  402386:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402388:	4b03      	ldr	r3, [pc, #12]	; (402398 <pmc_is_locked_pllbck+0x14>)
  40238a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40238c:	f003 0304 	and.w	r3, r3, #4
}
  402390:	4618      	mov	r0, r3
  402392:	46bd      	mov	sp, r7
  402394:	bc80      	pop	{r7}
  402396:	4770      	bx	lr
  402398:	400e0400 	.word	0x400e0400

0040239c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40239c:	b480      	push	{r7}
  40239e:	b083      	sub	sp, #12
  4023a0:	af00      	add	r7, sp, #0
  4023a2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4023a4:	687b      	ldr	r3, [r7, #4]
  4023a6:	2b22      	cmp	r3, #34	; 0x22
  4023a8:	d901      	bls.n	4023ae <pmc_enable_periph_clk+0x12>
		return 1;
  4023aa:	2301      	movs	r3, #1
  4023ac:	e02f      	b.n	40240e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4023ae:	687b      	ldr	r3, [r7, #4]
  4023b0:	2b1f      	cmp	r3, #31
  4023b2:	d813      	bhi.n	4023dc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4023b4:	4b18      	ldr	r3, [pc, #96]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023b6:	699a      	ldr	r2, [r3, #24]
  4023b8:	2101      	movs	r1, #1
  4023ba:	687b      	ldr	r3, [r7, #4]
  4023bc:	fa01 f303 	lsl.w	r3, r1, r3
  4023c0:	401a      	ands	r2, r3
  4023c2:	2101      	movs	r1, #1
  4023c4:	687b      	ldr	r3, [r7, #4]
  4023c6:	fa01 f303 	lsl.w	r3, r1, r3
  4023ca:	429a      	cmp	r2, r3
  4023cc:	d01e      	beq.n	40240c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4023ce:	4a12      	ldr	r2, [pc, #72]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023d0:	2101      	movs	r1, #1
  4023d2:	687b      	ldr	r3, [r7, #4]
  4023d4:	fa01 f303 	lsl.w	r3, r1, r3
  4023d8:	6113      	str	r3, [r2, #16]
  4023da:	e017      	b.n	40240c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	3b20      	subs	r3, #32
  4023e0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4023e2:	4b0d      	ldr	r3, [pc, #52]	; (402418 <pmc_enable_periph_clk+0x7c>)
  4023e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4023e8:	2101      	movs	r1, #1
  4023ea:	687b      	ldr	r3, [r7, #4]
  4023ec:	fa01 f303 	lsl.w	r3, r1, r3
  4023f0:	401a      	ands	r2, r3
  4023f2:	2101      	movs	r1, #1
  4023f4:	687b      	ldr	r3, [r7, #4]
  4023f6:	fa01 f303 	lsl.w	r3, r1, r3
  4023fa:	429a      	cmp	r2, r3
  4023fc:	d006      	beq.n	40240c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4023fe:	4a06      	ldr	r2, [pc, #24]	; (402418 <pmc_enable_periph_clk+0x7c>)
  402400:	2101      	movs	r1, #1
  402402:	687b      	ldr	r3, [r7, #4]
  402404:	fa01 f303 	lsl.w	r3, r1, r3
  402408:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40240c:	2300      	movs	r3, #0
}
  40240e:	4618      	mov	r0, r3
  402410:	370c      	adds	r7, #12
  402412:	46bd      	mov	sp, r7
  402414:	bc80      	pop	{r7}
  402416:	4770      	bx	lr
  402418:	400e0400 	.word	0x400e0400

0040241c <sysclk_enable_peripheral_clock>:
{
  40241c:	b580      	push	{r7, lr}
  40241e:	b082      	sub	sp, #8
  402420:	af00      	add	r7, sp, #0
  402422:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402424:	6878      	ldr	r0, [r7, #4]
  402426:	4b03      	ldr	r3, [pc, #12]	; (402434 <sysclk_enable_peripheral_clock+0x18>)
  402428:	4798      	blx	r3
}
  40242a:	bf00      	nop
  40242c:	3708      	adds	r7, #8
  40242e:	46bd      	mov	sp, r7
  402430:	bd80      	pop	{r7, pc}
  402432:	bf00      	nop
  402434:	0040239d 	.word	0x0040239d

00402438 <ioport_init>:
{
  402438:	b580      	push	{r7, lr}
  40243a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40243c:	200b      	movs	r0, #11
  40243e:	4b03      	ldr	r3, [pc, #12]	; (40244c <ioport_init+0x14>)
  402440:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  402442:	200c      	movs	r0, #12
  402444:	4b01      	ldr	r3, [pc, #4]	; (40244c <ioport_init+0x14>)
  402446:	4798      	blx	r3
}
  402448:	bf00      	nop
  40244a:	bd80      	pop	{r7, pc}
  40244c:	0040241d 	.word	0x0040241d

00402450 <ioport_set_pin_mode>:
{
  402450:	b480      	push	{r7}
  402452:	b08d      	sub	sp, #52	; 0x34
  402454:	af00      	add	r7, sp, #0
  402456:	6078      	str	r0, [r7, #4]
  402458:	6039      	str	r1, [r7, #0]
  40245a:	687b      	ldr	r3, [r7, #4]
  40245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40245e:	683b      	ldr	r3, [r7, #0]
  402460:	62bb      	str	r3, [r7, #40]	; 0x28
  402462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402464:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402468:	095a      	lsrs	r2, r3, #5
  40246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40246c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40246e:	6a3b      	ldr	r3, [r7, #32]
  402470:	f003 031f 	and.w	r3, r3, #31
  402474:	2101      	movs	r1, #1
  402476:	fa01 f303 	lsl.w	r3, r1, r3
  40247a:	61fa      	str	r2, [r7, #28]
  40247c:	61bb      	str	r3, [r7, #24]
  40247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402480:	617b      	str	r3, [r7, #20]
  402482:	69fb      	ldr	r3, [r7, #28]
  402484:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402486:	693b      	ldr	r3, [r7, #16]
  402488:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40248c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402490:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  402492:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  402494:	697b      	ldr	r3, [r7, #20]
  402496:	f003 0308 	and.w	r3, r3, #8
  40249a:	2b00      	cmp	r3, #0
  40249c:	d003      	beq.n	4024a6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40249e:	68fb      	ldr	r3, [r7, #12]
  4024a0:	69ba      	ldr	r2, [r7, #24]
  4024a2:	665a      	str	r2, [r3, #100]	; 0x64
  4024a4:	e002      	b.n	4024ac <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  4024a6:	68fb      	ldr	r3, [r7, #12]
  4024a8:	69ba      	ldr	r2, [r7, #24]
  4024aa:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4024ac:	697b      	ldr	r3, [r7, #20]
  4024ae:	f003 0310 	and.w	r3, r3, #16
  4024b2:	2b00      	cmp	r3, #0
  4024b4:	d004      	beq.n	4024c0 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4024b6:	68fb      	ldr	r3, [r7, #12]
  4024b8:	69ba      	ldr	r2, [r7, #24]
  4024ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4024be:	e003      	b.n	4024c8 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4024c0:	68fb      	ldr	r3, [r7, #12]
  4024c2:	69ba      	ldr	r2, [r7, #24]
  4024c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4024c8:	697b      	ldr	r3, [r7, #20]
  4024ca:	f003 0320 	and.w	r3, r3, #32
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d003      	beq.n	4024da <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4024d2:	68fb      	ldr	r3, [r7, #12]
  4024d4:	69ba      	ldr	r2, [r7, #24]
  4024d6:	651a      	str	r2, [r3, #80]	; 0x50
  4024d8:	e002      	b.n	4024e0 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4024da:	68fb      	ldr	r3, [r7, #12]
  4024dc:	69ba      	ldr	r2, [r7, #24]
  4024de:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4024e0:	697b      	ldr	r3, [r7, #20]
  4024e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4024e6:	2b00      	cmp	r3, #0
  4024e8:	d003      	beq.n	4024f2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4024ea:	68fb      	ldr	r3, [r7, #12]
  4024ec:	69ba      	ldr	r2, [r7, #24]
  4024ee:	621a      	str	r2, [r3, #32]
  4024f0:	e002      	b.n	4024f8 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4024f2:	68fb      	ldr	r3, [r7, #12]
  4024f4:	69ba      	ldr	r2, [r7, #24]
  4024f6:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4024f8:	697b      	ldr	r3, [r7, #20]
  4024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4024fe:	2b00      	cmp	r3, #0
  402500:	d004      	beq.n	40250c <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  402502:	68fb      	ldr	r3, [r7, #12]
  402504:	69ba      	ldr	r2, [r7, #24]
  402506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40250a:	e003      	b.n	402514 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  40250c:	68fb      	ldr	r3, [r7, #12]
  40250e:	69ba      	ldr	r2, [r7, #24]
  402510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402514:	697b      	ldr	r3, [r7, #20]
  402516:	f003 0301 	and.w	r3, r3, #1
  40251a:	2b00      	cmp	r3, #0
  40251c:	d006      	beq.n	40252c <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40251e:	68fb      	ldr	r3, [r7, #12]
  402520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402522:	69bb      	ldr	r3, [r7, #24]
  402524:	431a      	orrs	r2, r3
  402526:	68fb      	ldr	r3, [r7, #12]
  402528:	671a      	str	r2, [r3, #112]	; 0x70
  40252a:	e006      	b.n	40253a <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  40252c:	68fb      	ldr	r3, [r7, #12]
  40252e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402530:	69bb      	ldr	r3, [r7, #24]
  402532:	43db      	mvns	r3, r3
  402534:	401a      	ands	r2, r3
  402536:	68fb      	ldr	r3, [r7, #12]
  402538:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40253a:	697b      	ldr	r3, [r7, #20]
  40253c:	f003 0302 	and.w	r3, r3, #2
  402540:	2b00      	cmp	r3, #0
  402542:	d006      	beq.n	402552 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402548:	69bb      	ldr	r3, [r7, #24]
  40254a:	431a      	orrs	r2, r3
  40254c:	68fb      	ldr	r3, [r7, #12]
  40254e:	675a      	str	r2, [r3, #116]	; 0x74
}
  402550:	e006      	b.n	402560 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  402552:	68fb      	ldr	r3, [r7, #12]
  402554:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402556:	69bb      	ldr	r3, [r7, #24]
  402558:	43db      	mvns	r3, r3
  40255a:	401a      	ands	r2, r3
  40255c:	68fb      	ldr	r3, [r7, #12]
  40255e:	675a      	str	r2, [r3, #116]	; 0x74
  402560:	bf00      	nop
  402562:	3734      	adds	r7, #52	; 0x34
  402564:	46bd      	mov	sp, r7
  402566:	bc80      	pop	{r7}
  402568:	4770      	bx	lr

0040256a <ioport_set_pin_dir>:
{
  40256a:	b480      	push	{r7}
  40256c:	b08d      	sub	sp, #52	; 0x34
  40256e:	af00      	add	r7, sp, #0
  402570:	6078      	str	r0, [r7, #4]
  402572:	460b      	mov	r3, r1
  402574:	70fb      	strb	r3, [r7, #3]
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	62fb      	str	r3, [r7, #44]	; 0x2c
  40257a:	78fb      	ldrb	r3, [r7, #3]
  40257c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402582:	627b      	str	r3, [r7, #36]	; 0x24
  402584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402586:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402588:	6a3b      	ldr	r3, [r7, #32]
  40258a:	095b      	lsrs	r3, r3, #5
  40258c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40258e:	69fb      	ldr	r3, [r7, #28]
  402590:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402594:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402598:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40259a:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40259c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025a0:	2b01      	cmp	r3, #1
  4025a2:	d109      	bne.n	4025b8 <ioport_set_pin_dir+0x4e>
  4025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025a6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4025a8:	697b      	ldr	r3, [r7, #20]
  4025aa:	f003 031f 	and.w	r3, r3, #31
  4025ae:	2201      	movs	r2, #1
  4025b0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4025b2:	69bb      	ldr	r3, [r7, #24]
  4025b4:	611a      	str	r2, [r3, #16]
  4025b6:	e00c      	b.n	4025d2 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4025b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025bc:	2b00      	cmp	r3, #0
  4025be:	d108      	bne.n	4025d2 <ioport_set_pin_dir+0x68>
  4025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025c2:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4025c4:	693b      	ldr	r3, [r7, #16]
  4025c6:	f003 031f 	and.w	r3, r3, #31
  4025ca:	2201      	movs	r2, #1
  4025cc:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025ce:	69bb      	ldr	r3, [r7, #24]
  4025d0:	615a      	str	r2, [r3, #20]
  4025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025d4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4025d6:	68fb      	ldr	r3, [r7, #12]
  4025d8:	f003 031f 	and.w	r3, r3, #31
  4025dc:	2201      	movs	r2, #1
  4025de:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025e0:	69bb      	ldr	r3, [r7, #24]
  4025e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4025e6:	bf00      	nop
  4025e8:	3734      	adds	r7, #52	; 0x34
  4025ea:	46bd      	mov	sp, r7
  4025ec:	bc80      	pop	{r7}
  4025ee:	4770      	bx	lr

004025f0 <ioport_set_pin_level>:
{
  4025f0:	b480      	push	{r7}
  4025f2:	b08b      	sub	sp, #44	; 0x2c
  4025f4:	af00      	add	r7, sp, #0
  4025f6:	6078      	str	r0, [r7, #4]
  4025f8:	460b      	mov	r3, r1
  4025fa:	70fb      	strb	r3, [r7, #3]
  4025fc:	687b      	ldr	r3, [r7, #4]
  4025fe:	627b      	str	r3, [r7, #36]	; 0x24
  402600:	78fb      	ldrb	r3, [r7, #3]
  402602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402608:	61fb      	str	r3, [r7, #28]
  40260a:	69fb      	ldr	r3, [r7, #28]
  40260c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40260e:	69bb      	ldr	r3, [r7, #24]
  402610:	095b      	lsrs	r3, r3, #5
  402612:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402614:	697b      	ldr	r3, [r7, #20]
  402616:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40261a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40261e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402620:	613b      	str	r3, [r7, #16]
	if (level) {
  402622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402626:	2b00      	cmp	r3, #0
  402628:	d009      	beq.n	40263e <ioport_set_pin_level+0x4e>
  40262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40262c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40262e:	68fb      	ldr	r3, [r7, #12]
  402630:	f003 031f 	and.w	r3, r3, #31
  402634:	2201      	movs	r2, #1
  402636:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402638:	693b      	ldr	r3, [r7, #16]
  40263a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40263c:	e008      	b.n	402650 <ioport_set_pin_level+0x60>
  40263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402640:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402642:	68bb      	ldr	r3, [r7, #8]
  402644:	f003 031f 	and.w	r3, r3, #31
  402648:	2201      	movs	r2, #1
  40264a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40264c:	693b      	ldr	r3, [r7, #16]
  40264e:	635a      	str	r2, [r3, #52]	; 0x34
  402650:	bf00      	nop
  402652:	372c      	adds	r7, #44	; 0x2c
  402654:	46bd      	mov	sp, r7
  402656:	bc80      	pop	{r7}
  402658:	4770      	bx	lr
	...

0040265c <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  40265c:	b580      	push	{r7, lr}
  40265e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  402660:	484b      	ldr	r0, [pc, #300]	; (402790 <board_init+0x134>)
  402662:	4b4c      	ldr	r3, [pc, #304]	; (402794 <board_init+0x138>)
  402664:	4798      	blx	r3
	
	ioport_init();
  402666:	4b4c      	ldr	r3, [pc, #304]	; (402798 <board_init+0x13c>)
  402668:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  40266a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40266e:	2009      	movs	r0, #9
  402670:	4b4a      	ldr	r3, [pc, #296]	; (40279c <board_init+0x140>)
  402672:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  402674:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402678:	2009      	movs	r0, #9
  40267a:	4b48      	ldr	r3, [pc, #288]	; (40279c <board_init+0x140>)
  40267c:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  40267e:	2101      	movs	r1, #1
  402680:	2009      	movs	r0, #9
  402682:	4b47      	ldr	r3, [pc, #284]	; (4027a0 <board_init+0x144>)
  402684:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  402686:	2100      	movs	r1, #0
  402688:	2009      	movs	r0, #9
  40268a:	4b46      	ldr	r3, [pc, #280]	; (4027a4 <board_init+0x148>)
  40268c:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  40268e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402692:	2007      	movs	r0, #7
  402694:	4b41      	ldr	r3, [pc, #260]	; (40279c <board_init+0x140>)
  402696:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  402698:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40269c:	2007      	movs	r0, #7
  40269e:	4b3f      	ldr	r3, [pc, #252]	; (40279c <board_init+0x140>)
  4026a0:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  4026a2:	2101      	movs	r1, #1
  4026a4:	2007      	movs	r0, #7
  4026a6:	4b3e      	ldr	r3, [pc, #248]	; (4027a0 <board_init+0x144>)
  4026a8:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  4026aa:	2100      	movs	r1, #0
  4026ac:	2007      	movs	r0, #7
  4026ae:	4b3d      	ldr	r3, [pc, #244]	; (4027a4 <board_init+0x148>)
  4026b0:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  4026b2:	493d      	ldr	r1, [pc, #244]	; (4027a8 <board_init+0x14c>)
  4026b4:	2021      	movs	r0, #33	; 0x21
  4026b6:	4b39      	ldr	r3, [pc, #228]	; (40279c <board_init+0x140>)
  4026b8:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  4026ba:	2100      	movs	r1, #0
  4026bc:	2021      	movs	r0, #33	; 0x21
  4026be:	4b38      	ldr	r3, [pc, #224]	; (4027a0 <board_init+0x144>)
  4026c0:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  4026c2:	2108      	movs	r1, #8
  4026c4:	2021      	movs	r0, #33	; 0x21
  4026c6:	4b39      	ldr	r3, [pc, #228]	; (4027ac <board_init+0x150>)
  4026c8:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4026ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026ce:	2005      	movs	r0, #5
  4026d0:	4b32      	ldr	r3, [pc, #200]	; (40279c <board_init+0x140>)
  4026d2:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4026d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026d8:	2006      	movs	r0, #6
  4026da:	4b30      	ldr	r3, [pc, #192]	; (40279c <board_init+0x140>)
  4026dc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  4026de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026e2:	2008      	movs	r0, #8
  4026e4:	4b2d      	ldr	r3, [pc, #180]	; (40279c <board_init+0x140>)
  4026e6:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  4026e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4026ec:	2011      	movs	r0, #17
  4026ee:	4b2b      	ldr	r3, [pc, #172]	; (40279c <board_init+0x140>)
  4026f0:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4026f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4026f6:	2003      	movs	r0, #3
  4026f8:	4b28      	ldr	r3, [pc, #160]	; (40279c <board_init+0x140>)
  4026fa:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4026fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402700:	2004      	movs	r0, #4
  402702:	4b26      	ldr	r3, [pc, #152]	; (40279c <board_init+0x140>)
  402704:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  402706:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40270a:	200a      	movs	r0, #10
  40270c:	4b23      	ldr	r3, [pc, #140]	; (40279c <board_init+0x140>)
  40270e:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402710:	2101      	movs	r1, #1
  402712:	200a      	movs	r0, #10
  402714:	4b22      	ldr	r3, [pc, #136]	; (4027a0 <board_init+0x144>)
  402716:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  402718:	2100      	movs	r1, #0
  40271a:	200a      	movs	r0, #10
  40271c:	4b21      	ldr	r3, [pc, #132]	; (4027a4 <board_init+0x148>)
  40271e:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  402720:	2171      	movs	r1, #113	; 0x71
  402722:	2010      	movs	r0, #16
  402724:	4b1d      	ldr	r3, [pc, #116]	; (40279c <board_init+0x140>)
  402726:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  402728:	2171      	movs	r1, #113	; 0x71
  40272a:	200f      	movs	r0, #15
  40272c:	4b1b      	ldr	r3, [pc, #108]	; (40279c <board_init+0x140>)
  40272e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  402730:	491f      	ldr	r1, [pc, #124]	; (4027b0 <board_init+0x154>)
  402732:	2018      	movs	r0, #24
  402734:	4b19      	ldr	r3, [pc, #100]	; (40279c <board_init+0x140>)
  402736:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  402738:	491d      	ldr	r1, [pc, #116]	; (4027b0 <board_init+0x154>)
  40273a:	2019      	movs	r0, #25
  40273c:	4b17      	ldr	r3, [pc, #92]	; (40279c <board_init+0x140>)
  40273e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  402740:	491b      	ldr	r1, [pc, #108]	; (4027b0 <board_init+0x154>)
  402742:	201a      	movs	r0, #26
  402744:	4b15      	ldr	r3, [pc, #84]	; (40279c <board_init+0x140>)
  402746:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  402748:	4919      	ldr	r1, [pc, #100]	; (4027b0 <board_init+0x154>)
  40274a:	201b      	movs	r0, #27
  40274c:	4b13      	ldr	r3, [pc, #76]	; (40279c <board_init+0x140>)
  40274e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  402750:	4917      	ldr	r1, [pc, #92]	; (4027b0 <board_init+0x154>)
  402752:	201c      	movs	r0, #28
  402754:	4b11      	ldr	r3, [pc, #68]	; (40279c <board_init+0x140>)
  402756:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  402758:	4915      	ldr	r1, [pc, #84]	; (4027b0 <board_init+0x154>)
  40275a:	201d      	movs	r0, #29
  40275c:	4b0f      	ldr	r3, [pc, #60]	; (40279c <board_init+0x140>)
  40275e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  402760:	4913      	ldr	r1, [pc, #76]	; (4027b0 <board_init+0x154>)
  402762:	201e      	movs	r0, #30
  402764:	4b0d      	ldr	r3, [pc, #52]	; (40279c <board_init+0x140>)
  402766:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  402768:	4911      	ldr	r1, [pc, #68]	; (4027b0 <board_init+0x154>)
  40276a:	201f      	movs	r0, #31
  40276c:	4b0b      	ldr	r3, [pc, #44]	; (40279c <board_init+0x140>)
  40276e:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  402770:	2171      	movs	r1, #113	; 0x71
  402772:	2012      	movs	r0, #18
  402774:	4b09      	ldr	r3, [pc, #36]	; (40279c <board_init+0x140>)
  402776:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  402778:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40277c:	2013      	movs	r0, #19
  40277e:	4b07      	ldr	r3, [pc, #28]	; (40279c <board_init+0x140>)
  402780:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  402782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402786:	2014      	movs	r0, #20
  402788:	4b04      	ldr	r3, [pc, #16]	; (40279c <board_init+0x140>)
  40278a:	4798      	blx	r3
}
  40278c:	bf00      	nop
  40278e:	bd80      	pop	{r7, pc}
  402790:	400e1450 	.word	0x400e1450
  402794:	00400567 	.word	0x00400567
  402798:	00402439 	.word	0x00402439
  40279c:	00401f7d 	.word	0x00401f7d
  4027a0:	0040256b 	.word	0x0040256b
  4027a4:	004025f1 	.word	0x004025f1
  4027a8:	28000079 	.word	0x28000079
  4027ac:	00402451 	.word	0x00402451
  4027b0:	28000001 	.word	0x28000001

004027b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4027b4:	b580      	push	{r7, lr}
  4027b6:	b084      	sub	sp, #16
  4027b8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4027ba:	4b27      	ldr	r3, [pc, #156]	; (402858 <Reset_Handler+0xa4>)
  4027bc:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4027be:	4b27      	ldr	r3, [pc, #156]	; (40285c <Reset_Handler+0xa8>)
  4027c0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4027c2:	68fa      	ldr	r2, [r7, #12]
  4027c4:	68bb      	ldr	r3, [r7, #8]
  4027c6:	429a      	cmp	r2, r3
  4027c8:	d90d      	bls.n	4027e6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4027ca:	e007      	b.n	4027dc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4027cc:	68bb      	ldr	r3, [r7, #8]
  4027ce:	1d1a      	adds	r2, r3, #4
  4027d0:	60ba      	str	r2, [r7, #8]
  4027d2:	68fa      	ldr	r2, [r7, #12]
  4027d4:	1d11      	adds	r1, r2, #4
  4027d6:	60f9      	str	r1, [r7, #12]
  4027d8:	6812      	ldr	r2, [r2, #0]
  4027da:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4027dc:	68bb      	ldr	r3, [r7, #8]
  4027de:	4a20      	ldr	r2, [pc, #128]	; (402860 <Reset_Handler+0xac>)
  4027e0:	4293      	cmp	r3, r2
  4027e2:	d3f3      	bcc.n	4027cc <Reset_Handler+0x18>
  4027e4:	e020      	b.n	402828 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4027e6:	68fa      	ldr	r2, [r7, #12]
  4027e8:	68bb      	ldr	r3, [r7, #8]
  4027ea:	429a      	cmp	r2, r3
  4027ec:	d21c      	bcs.n	402828 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4027ee:	4a1c      	ldr	r2, [pc, #112]	; (402860 <Reset_Handler+0xac>)
  4027f0:	4b1a      	ldr	r3, [pc, #104]	; (40285c <Reset_Handler+0xa8>)
  4027f2:	1ad3      	subs	r3, r2, r3
  4027f4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4027f6:	68fa      	ldr	r2, [r7, #12]
  4027f8:	687b      	ldr	r3, [r7, #4]
  4027fa:	4413      	add	r3, r2
  4027fc:	3b04      	subs	r3, #4
  4027fe:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402800:	68ba      	ldr	r2, [r7, #8]
  402802:	687b      	ldr	r3, [r7, #4]
  402804:	4413      	add	r3, r2
  402806:	3b04      	subs	r3, #4
  402808:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  40280a:	e00a      	b.n	402822 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  40280c:	68bb      	ldr	r3, [r7, #8]
  40280e:	1f1a      	subs	r2, r3, #4
  402810:	60ba      	str	r2, [r7, #8]
  402812:	68fa      	ldr	r2, [r7, #12]
  402814:	1f11      	subs	r1, r2, #4
  402816:	60f9      	str	r1, [r7, #12]
  402818:	6812      	ldr	r2, [r2, #0]
  40281a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40281c:	687b      	ldr	r3, [r7, #4]
  40281e:	3b04      	subs	r3, #4
  402820:	607b      	str	r3, [r7, #4]
  402822:	687b      	ldr	r3, [r7, #4]
  402824:	2b00      	cmp	r3, #0
  402826:	d1f1      	bne.n	40280c <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402828:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40282a:	4b0e      	ldr	r3, [pc, #56]	; (402864 <Reset_Handler+0xb0>)
  40282c:	60bb      	str	r3, [r7, #8]
  40282e:	e004      	b.n	40283a <Reset_Handler+0x86>
		*pDest++ = 0;
  402830:	68bb      	ldr	r3, [r7, #8]
  402832:	1d1a      	adds	r2, r3, #4
  402834:	60ba      	str	r2, [r7, #8]
  402836:	2200      	movs	r2, #0
  402838:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  40283a:	68bb      	ldr	r3, [r7, #8]
  40283c:	4a0a      	ldr	r2, [pc, #40]	; (402868 <Reset_Handler+0xb4>)
  40283e:	4293      	cmp	r3, r2
  402840:	d3f6      	bcc.n	402830 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  402842:	4b0a      	ldr	r3, [pc, #40]	; (40286c <Reset_Handler+0xb8>)
  402844:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  402846:	4a0a      	ldr	r2, [pc, #40]	; (402870 <Reset_Handler+0xbc>)
  402848:	68fb      	ldr	r3, [r7, #12]
  40284a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40284c:	4b09      	ldr	r3, [pc, #36]	; (402874 <Reset_Handler+0xc0>)
  40284e:	4798      	blx	r3

	/* Branch to main function */
	main();
  402850:	4b09      	ldr	r3, [pc, #36]	; (402878 <Reset_Handler+0xc4>)
  402852:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  402854:	e7fe      	b.n	402854 <Reset_Handler+0xa0>
  402856:	bf00      	nop
  402858:	00407f5c 	.word	0x00407f5c
  40285c:	20000000 	.word	0x20000000
  402860:	200009bc 	.word	0x200009bc
  402864:	200009bc 	.word	0x200009bc
  402868:	20000e3c 	.word	0x20000e3c
  40286c:	00400000 	.word	0x00400000
  402870:	e000ed00 	.word	0xe000ed00
  402874:	00403621 	.word	0x00403621
  402878:	00402b09 	.word	0x00402b09

0040287c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40287c:	b480      	push	{r7}
  40287e:	af00      	add	r7, sp, #0
	while (1) {
  402880:	e7fe      	b.n	402880 <Dummy_Handler+0x4>
	...

00402884 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  402884:	b480      	push	{r7}
  402886:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402888:	4b5d      	ldr	r3, [pc, #372]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  40288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40288c:	f003 0303 	and.w	r3, r3, #3
  402890:	2b03      	cmp	r3, #3
  402892:	f200 8096 	bhi.w	4029c2 <SystemCoreClockUpdate+0x13e>
  402896:	a201      	add	r2, pc, #4	; (adr r2, 40289c <SystemCoreClockUpdate+0x18>)
  402898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40289c:	004028ad 	.word	0x004028ad
  4028a0:	004028cd 	.word	0x004028cd
  4028a4:	00402917 	.word	0x00402917
  4028a8:	00402917 	.word	0x00402917
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4028ac:	4b55      	ldr	r3, [pc, #340]	; (402a04 <SystemCoreClockUpdate+0x180>)
  4028ae:	695b      	ldr	r3, [r3, #20]
  4028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4028b4:	2b00      	cmp	r3, #0
  4028b6:	d004      	beq.n	4028c2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4028b8:	4b53      	ldr	r3, [pc, #332]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4028be:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4028c0:	e080      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4028c2:	4b51      	ldr	r3, [pc, #324]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028c4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4028c8:	601a      	str	r2, [r3, #0]
		break;
  4028ca:	e07b      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028cc:	4b4c      	ldr	r3, [pc, #304]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4028ce:	6a1b      	ldr	r3, [r3, #32]
  4028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d003      	beq.n	4028e0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4028d8:	4b4b      	ldr	r3, [pc, #300]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028da:	4a4c      	ldr	r2, [pc, #304]	; (402a0c <SystemCoreClockUpdate+0x188>)
  4028dc:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4028de:	e071      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028e0:	4b49      	ldr	r3, [pc, #292]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028e2:	4a4b      	ldr	r2, [pc, #300]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  4028e4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028e6:	4b46      	ldr	r3, [pc, #280]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4028e8:	6a1b      	ldr	r3, [r3, #32]
  4028ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028ee:	2b10      	cmp	r3, #16
  4028f0:	d008      	beq.n	402904 <SystemCoreClockUpdate+0x80>
  4028f2:	2b20      	cmp	r3, #32
  4028f4:	d00a      	beq.n	40290c <SystemCoreClockUpdate+0x88>
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d000      	beq.n	4028fc <SystemCoreClockUpdate+0x78>
			break;
  4028fa:	e00b      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028fc:	4b42      	ldr	r3, [pc, #264]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4028fe:	4a44      	ldr	r2, [pc, #272]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  402900:	601a      	str	r2, [r3, #0]
			break;
  402902:	e007      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402904:	4b40      	ldr	r3, [pc, #256]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402906:	4a43      	ldr	r2, [pc, #268]	; (402a14 <SystemCoreClockUpdate+0x190>)
  402908:	601a      	str	r2, [r3, #0]
			break;
  40290a:	e003      	b.n	402914 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40290c:	4b3e      	ldr	r3, [pc, #248]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40290e:	4a3f      	ldr	r2, [pc, #252]	; (402a0c <SystemCoreClockUpdate+0x188>)
  402910:	601a      	str	r2, [r3, #0]
			break;
  402912:	bf00      	nop
		break;
  402914:	e056      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402916:	4b3a      	ldr	r3, [pc, #232]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402918:	6a1b      	ldr	r3, [r3, #32]
  40291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40291e:	2b00      	cmp	r3, #0
  402920:	d003      	beq.n	40292a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402922:	4b39      	ldr	r3, [pc, #228]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402924:	4a39      	ldr	r2, [pc, #228]	; (402a0c <SystemCoreClockUpdate+0x188>)
  402926:	601a      	str	r2, [r3, #0]
  402928:	e019      	b.n	40295e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40292a:	4b37      	ldr	r3, [pc, #220]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40292c:	4a38      	ldr	r2, [pc, #224]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  40292e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402930:	4b33      	ldr	r3, [pc, #204]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402932:	6a1b      	ldr	r3, [r3, #32]
  402934:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402938:	2b10      	cmp	r3, #16
  40293a:	d008      	beq.n	40294e <SystemCoreClockUpdate+0xca>
  40293c:	2b20      	cmp	r3, #32
  40293e:	d00a      	beq.n	402956 <SystemCoreClockUpdate+0xd2>
  402940:	2b00      	cmp	r3, #0
  402942:	d000      	beq.n	402946 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402944:	e00b      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402946:	4b30      	ldr	r3, [pc, #192]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402948:	4a31      	ldr	r2, [pc, #196]	; (402a10 <SystemCoreClockUpdate+0x18c>)
  40294a:	601a      	str	r2, [r3, #0]
					break;
  40294c:	e007      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40294e:	4b2e      	ldr	r3, [pc, #184]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402950:	4a30      	ldr	r2, [pc, #192]	; (402a14 <SystemCoreClockUpdate+0x190>)
  402952:	601a      	str	r2, [r3, #0]
					break;
  402954:	e003      	b.n	40295e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402956:	4b2c      	ldr	r3, [pc, #176]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402958:	4a2c      	ldr	r2, [pc, #176]	; (402a0c <SystemCoreClockUpdate+0x188>)
  40295a:	601a      	str	r2, [r3, #0]
					break;
  40295c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40295e:	4b28      	ldr	r3, [pc, #160]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402962:	f003 0303 	and.w	r3, r3, #3
  402966:	2b02      	cmp	r3, #2
  402968:	d115      	bne.n	402996 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40296a:	4b25      	ldr	r3, [pc, #148]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  40296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40296e:	0c1b      	lsrs	r3, r3, #16
  402970:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402974:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402976:	4a24      	ldr	r2, [pc, #144]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402978:	6812      	ldr	r2, [r2, #0]
  40297a:	fb02 f303 	mul.w	r3, r2, r3
  40297e:	4a22      	ldr	r2, [pc, #136]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402980:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402982:	4b1f      	ldr	r3, [pc, #124]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402986:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402988:	4a1f      	ldr	r2, [pc, #124]	; (402a08 <SystemCoreClockUpdate+0x184>)
  40298a:	6812      	ldr	r2, [r2, #0]
  40298c:	fbb2 f3f3 	udiv	r3, r2, r3
  402990:	4a1d      	ldr	r2, [pc, #116]	; (402a08 <SystemCoreClockUpdate+0x184>)
  402992:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402994:	e016      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402996:	4b1a      	ldr	r3, [pc, #104]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  402998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40299a:	0c1b      	lsrs	r3, r3, #16
  40299c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4029a0:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4029a2:	4a19      	ldr	r2, [pc, #100]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029a4:	6812      	ldr	r2, [r2, #0]
  4029a6:	fb02 f303 	mul.w	r3, r2, r3
  4029aa:	4a17      	ldr	r2, [pc, #92]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029ac:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029ae:	4b14      	ldr	r3, [pc, #80]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4029b2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4029b4:	4a14      	ldr	r2, [pc, #80]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029b6:	6812      	ldr	r2, [r2, #0]
  4029b8:	fbb2 f3f3 	udiv	r3, r2, r3
  4029bc:	4a12      	ldr	r2, [pc, #72]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029be:	6013      	str	r3, [r2, #0]
		break;
  4029c0:	e000      	b.n	4029c4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4029c2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4029c4:	4b0e      	ldr	r3, [pc, #56]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029cc:	2b70      	cmp	r3, #112	; 0x70
  4029ce:	d108      	bne.n	4029e2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4029d0:	4b0d      	ldr	r3, [pc, #52]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029d2:	681b      	ldr	r3, [r3, #0]
  4029d4:	4a10      	ldr	r2, [pc, #64]	; (402a18 <SystemCoreClockUpdate+0x194>)
  4029d6:	fba2 2303 	umull	r2, r3, r2, r3
  4029da:	085b      	lsrs	r3, r3, #1
  4029dc:	4a0a      	ldr	r2, [pc, #40]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029de:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4029e0:	e00a      	b.n	4029f8 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4029e2:	4b07      	ldr	r3, [pc, #28]	; (402a00 <SystemCoreClockUpdate+0x17c>)
  4029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029e6:	091b      	lsrs	r3, r3, #4
  4029e8:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4029ec:	4a06      	ldr	r2, [pc, #24]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029ee:	6812      	ldr	r2, [r2, #0]
  4029f0:	fa22 f303 	lsr.w	r3, r2, r3
  4029f4:	4a04      	ldr	r2, [pc, #16]	; (402a08 <SystemCoreClockUpdate+0x184>)
  4029f6:	6013      	str	r3, [r2, #0]
}
  4029f8:	bf00      	nop
  4029fa:	46bd      	mov	sp, r7
  4029fc:	bc80      	pop	{r7}
  4029fe:	4770      	bx	lr
  402a00:	400e0400 	.word	0x400e0400
  402a04:	400e1410 	.word	0x400e1410
  402a08:	2000000c 	.word	0x2000000c
  402a0c:	00b71b00 	.word	0x00b71b00
  402a10:	003d0900 	.word	0x003d0900
  402a14:	007a1200 	.word	0x007a1200
  402a18:	aaaaaaab 	.word	0xaaaaaaab

00402a1c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402a1c:	b480      	push	{r7}
  402a1e:	b083      	sub	sp, #12
  402a20:	af00      	add	r7, sp, #0
  402a22:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402a24:	687b      	ldr	r3, [r7, #4]
  402a26:	4a18      	ldr	r2, [pc, #96]	; (402a88 <system_init_flash+0x6c>)
  402a28:	4293      	cmp	r3, r2
  402a2a:	d804      	bhi.n	402a36 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a2c:	4b17      	ldr	r3, [pc, #92]	; (402a8c <system_init_flash+0x70>)
  402a2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a32:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402a34:	e023      	b.n	402a7e <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402a36:	687b      	ldr	r3, [r7, #4]
  402a38:	4a15      	ldr	r2, [pc, #84]	; (402a90 <system_init_flash+0x74>)
  402a3a:	4293      	cmp	r3, r2
  402a3c:	d803      	bhi.n	402a46 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a3e:	4b13      	ldr	r3, [pc, #76]	; (402a8c <system_init_flash+0x70>)
  402a40:	4a14      	ldr	r2, [pc, #80]	; (402a94 <system_init_flash+0x78>)
  402a42:	601a      	str	r2, [r3, #0]
}
  402a44:	e01b      	b.n	402a7e <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402a46:	687b      	ldr	r3, [r7, #4]
  402a48:	4a13      	ldr	r2, [pc, #76]	; (402a98 <system_init_flash+0x7c>)
  402a4a:	4293      	cmp	r3, r2
  402a4c:	d803      	bhi.n	402a56 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a4e:	4b0f      	ldr	r3, [pc, #60]	; (402a8c <system_init_flash+0x70>)
  402a50:	4a12      	ldr	r2, [pc, #72]	; (402a9c <system_init_flash+0x80>)
  402a52:	601a      	str	r2, [r3, #0]
}
  402a54:	e013      	b.n	402a7e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402a56:	687b      	ldr	r3, [r7, #4]
  402a58:	4a11      	ldr	r2, [pc, #68]	; (402aa0 <system_init_flash+0x84>)
  402a5a:	4293      	cmp	r3, r2
  402a5c:	d803      	bhi.n	402a66 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a5e:	4b0b      	ldr	r3, [pc, #44]	; (402a8c <system_init_flash+0x70>)
  402a60:	4a10      	ldr	r2, [pc, #64]	; (402aa4 <system_init_flash+0x88>)
  402a62:	601a      	str	r2, [r3, #0]
}
  402a64:	e00b      	b.n	402a7e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	4a0f      	ldr	r2, [pc, #60]	; (402aa8 <system_init_flash+0x8c>)
  402a6a:	4293      	cmp	r3, r2
  402a6c:	d804      	bhi.n	402a78 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a6e:	4b07      	ldr	r3, [pc, #28]	; (402a8c <system_init_flash+0x70>)
  402a70:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402a74:	601a      	str	r2, [r3, #0]
}
  402a76:	e002      	b.n	402a7e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a78:	4b04      	ldr	r3, [pc, #16]	; (402a8c <system_init_flash+0x70>)
  402a7a:	4a0c      	ldr	r2, [pc, #48]	; (402aac <system_init_flash+0x90>)
  402a7c:	601a      	str	r2, [r3, #0]
}
  402a7e:	bf00      	nop
  402a80:	370c      	adds	r7, #12
  402a82:	46bd      	mov	sp, r7
  402a84:	bc80      	pop	{r7}
  402a86:	4770      	bx	lr
  402a88:	01312cff 	.word	0x01312cff
  402a8c:	400e0a00 	.word	0x400e0a00
  402a90:	026259ff 	.word	0x026259ff
  402a94:	04000100 	.word	0x04000100
  402a98:	039386ff 	.word	0x039386ff
  402a9c:	04000200 	.word	0x04000200
  402aa0:	04c4b3ff 	.word	0x04c4b3ff
  402aa4:	04000300 	.word	0x04000300
  402aa8:	05f5e0ff 	.word	0x05f5e0ff
  402aac:	04000500 	.word	0x04000500

00402ab0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402ab0:	b480      	push	{r7}
  402ab2:	b085      	sub	sp, #20
  402ab4:	af00      	add	r7, sp, #0
  402ab6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402ab8:	4b10      	ldr	r3, [pc, #64]	; (402afc <_sbrk+0x4c>)
  402aba:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402abc:	4b10      	ldr	r3, [pc, #64]	; (402b00 <_sbrk+0x50>)
  402abe:	681b      	ldr	r3, [r3, #0]
  402ac0:	2b00      	cmp	r3, #0
  402ac2:	d102      	bne.n	402aca <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402ac4:	4b0e      	ldr	r3, [pc, #56]	; (402b00 <_sbrk+0x50>)
  402ac6:	4a0f      	ldr	r2, [pc, #60]	; (402b04 <_sbrk+0x54>)
  402ac8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402aca:	4b0d      	ldr	r3, [pc, #52]	; (402b00 <_sbrk+0x50>)
  402acc:	681b      	ldr	r3, [r3, #0]
  402ace:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402ad0:	68ba      	ldr	r2, [r7, #8]
  402ad2:	687b      	ldr	r3, [r7, #4]
  402ad4:	441a      	add	r2, r3
  402ad6:	68fb      	ldr	r3, [r7, #12]
  402ad8:	429a      	cmp	r2, r3
  402ada:	dd02      	ble.n	402ae2 <_sbrk+0x32>
		return (caddr_t) -1;	
  402adc:	f04f 33ff 	mov.w	r3, #4294967295
  402ae0:	e006      	b.n	402af0 <_sbrk+0x40>
	}

	heap += incr;
  402ae2:	4b07      	ldr	r3, [pc, #28]	; (402b00 <_sbrk+0x50>)
  402ae4:	681a      	ldr	r2, [r3, #0]
  402ae6:	687b      	ldr	r3, [r7, #4]
  402ae8:	4413      	add	r3, r2
  402aea:	4a05      	ldr	r2, [pc, #20]	; (402b00 <_sbrk+0x50>)
  402aec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402aee:	68bb      	ldr	r3, [r7, #8]
}
  402af0:	4618      	mov	r0, r3
  402af2:	3714      	adds	r7, #20
  402af4:	46bd      	mov	sp, r7
  402af6:	bc80      	pop	{r7}
  402af8:	4770      	bx	lr
  402afa:	bf00      	nop
  402afc:	2001fffc 	.word	0x2001fffc
  402b00:	20000df8 	.word	0x20000df8
  402b04:	20003e40 	.word	0x20003e40

00402b08 <main>:
		}
	}
}

int main (void)
{
  402b08:	b580      	push	{r7, lr}
  402b0a:	b082      	sub	sp, #8
  402b0c:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  402b0e:	4b0f      	ldr	r3, [pc, #60]	; (402b4c <main+0x44>)
  402b10:	4798      	blx	r3
	board_init();
  402b12:	4b0f      	ldr	r3, [pc, #60]	; (402b50 <main+0x48>)
  402b14:	4798      	blx	r3
	configure_tc();
  402b16:	4b0f      	ldr	r3, [pc, #60]	; (402b54 <main+0x4c>)
  402b18:	4798      	blx	r3
	tc_start(TC0, 0);
  402b1a:	2100      	movs	r1, #0
  402b1c:	480e      	ldr	r0, [pc, #56]	; (402b58 <main+0x50>)
  402b1e:	4b0f      	ldr	r3, [pc, #60]	; (402b5c <main+0x54>)
  402b20:	4798      	blx	r3
	
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi module
  402b22:	4b0f      	ldr	r3, [pc, #60]	; (402b60 <main+0x58>)
  402b24:	4798      	blx	r3
	//configure_camera();		// configures and initializes camera module
	reboot_wifi();			// reboots the wifi chip (takes several seconds)
  402b26:	4b0f      	ldr	r3, [pc, #60]	; (402b64 <main+0x5c>)
  402b28:	4798      	blx	r3
	
	configure_i2s(); // microphone configuration
  402b2a:	4b0f      	ldr	r3, [pc, #60]	; (402b68 <main+0x60>)
  402b2c:	4798      	blx	r3
	
	uint8_t handle = open_websocket();
  402b2e:	4b0f      	ldr	r3, [pc, #60]	; (402b6c <main+0x64>)
  402b30:	4798      	blx	r3
  402b32:	4603      	mov	r3, r0
  402b34:	71fb      	strb	r3, [r7, #7]
	while(1) {
		//if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
		//	setup_wifi();		// the wifi chip tries to reassociate to a new network
		//}
		
		i2s_capture();
  402b36:	4b0e      	ldr	r3, [pc, #56]	; (402b70 <main+0x68>)
  402b38:	4798      	blx	r3
		//post_audio_usart((uint8_t *) i2s_rec_buf, 2000);
		send_data_ws(i2s_rec_buf, NUMBER_OF_SAMPLES * 2, handle);
  402b3a:	79fb      	ldrb	r3, [r7, #7]
  402b3c:	461a      	mov	r2, r3
  402b3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
  402b42:	480c      	ldr	r0, [pc, #48]	; (402b74 <main+0x6c>)
  402b44:	4b0c      	ldr	r3, [pc, #48]	; (402b78 <main+0x70>)
  402b46:	4798      	blx	r3
		i2s_capture();
  402b48:	e7f5      	b.n	402b36 <main+0x2e>
  402b4a:	bf00      	nop
  402b4c:	00401bed 	.word	0x00401bed
  402b50:	0040265d 	.word	0x0040265d
  402b54:	00400e75 	.word	0x00400e75
  402b58:	40010000 	.word	0x40010000
  402b5c:	00400437 	.word	0x00400437
  402b60:	004017cd 	.word	0x004017cd
  402b64:	004017fd 	.word	0x004017fd
  402b68:	004007d5 	.word	0x004007d5
  402b6c:	004013c1 	.word	0x004013c1
  402b70:	00400711 	.word	0x00400711
  402b74:	200009d8 	.word	0x200009d8
  402b78:	004014ad 	.word	0x004014ad

00402b7c <__aeabi_drsub>:
  402b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  402b80:	e002      	b.n	402b88 <__adddf3>
  402b82:	bf00      	nop

00402b84 <__aeabi_dsub>:
  402b84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00402b88 <__adddf3>:
  402b88:	b530      	push	{r4, r5, lr}
  402b8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  402b8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  402b92:	ea94 0f05 	teq	r4, r5
  402b96:	bf08      	it	eq
  402b98:	ea90 0f02 	teqeq	r0, r2
  402b9c:	bf1f      	itttt	ne
  402b9e:	ea54 0c00 	orrsne.w	ip, r4, r0
  402ba2:	ea55 0c02 	orrsne.w	ip, r5, r2
  402ba6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  402baa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402bae:	f000 80e2 	beq.w	402d76 <__adddf3+0x1ee>
  402bb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  402bb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  402bba:	bfb8      	it	lt
  402bbc:	426d      	neglt	r5, r5
  402bbe:	dd0c      	ble.n	402bda <__adddf3+0x52>
  402bc0:	442c      	add	r4, r5
  402bc2:	ea80 0202 	eor.w	r2, r0, r2
  402bc6:	ea81 0303 	eor.w	r3, r1, r3
  402bca:	ea82 0000 	eor.w	r0, r2, r0
  402bce:	ea83 0101 	eor.w	r1, r3, r1
  402bd2:	ea80 0202 	eor.w	r2, r0, r2
  402bd6:	ea81 0303 	eor.w	r3, r1, r3
  402bda:	2d36      	cmp	r5, #54	; 0x36
  402bdc:	bf88      	it	hi
  402bde:	bd30      	pophi	{r4, r5, pc}
  402be0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  402be4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  402be8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  402bec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  402bf0:	d002      	beq.n	402bf8 <__adddf3+0x70>
  402bf2:	4240      	negs	r0, r0
  402bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402bf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  402bfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  402c00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  402c04:	d002      	beq.n	402c0c <__adddf3+0x84>
  402c06:	4252      	negs	r2, r2
  402c08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  402c0c:	ea94 0f05 	teq	r4, r5
  402c10:	f000 80a7 	beq.w	402d62 <__adddf3+0x1da>
  402c14:	f1a4 0401 	sub.w	r4, r4, #1
  402c18:	f1d5 0e20 	rsbs	lr, r5, #32
  402c1c:	db0d      	blt.n	402c3a <__adddf3+0xb2>
  402c1e:	fa02 fc0e 	lsl.w	ip, r2, lr
  402c22:	fa22 f205 	lsr.w	r2, r2, r5
  402c26:	1880      	adds	r0, r0, r2
  402c28:	f141 0100 	adc.w	r1, r1, #0
  402c2c:	fa03 f20e 	lsl.w	r2, r3, lr
  402c30:	1880      	adds	r0, r0, r2
  402c32:	fa43 f305 	asr.w	r3, r3, r5
  402c36:	4159      	adcs	r1, r3
  402c38:	e00e      	b.n	402c58 <__adddf3+0xd0>
  402c3a:	f1a5 0520 	sub.w	r5, r5, #32
  402c3e:	f10e 0e20 	add.w	lr, lr, #32
  402c42:	2a01      	cmp	r2, #1
  402c44:	fa03 fc0e 	lsl.w	ip, r3, lr
  402c48:	bf28      	it	cs
  402c4a:	f04c 0c02 	orrcs.w	ip, ip, #2
  402c4e:	fa43 f305 	asr.w	r3, r3, r5
  402c52:	18c0      	adds	r0, r0, r3
  402c54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  402c58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402c5c:	d507      	bpl.n	402c6e <__adddf3+0xe6>
  402c5e:	f04f 0e00 	mov.w	lr, #0
  402c62:	f1dc 0c00 	rsbs	ip, ip, #0
  402c66:	eb7e 0000 	sbcs.w	r0, lr, r0
  402c6a:	eb6e 0101 	sbc.w	r1, lr, r1
  402c6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  402c72:	d31b      	bcc.n	402cac <__adddf3+0x124>
  402c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  402c78:	d30c      	bcc.n	402c94 <__adddf3+0x10c>
  402c7a:	0849      	lsrs	r1, r1, #1
  402c7c:	ea5f 0030 	movs.w	r0, r0, rrx
  402c80:	ea4f 0c3c 	mov.w	ip, ip, rrx
  402c84:	f104 0401 	add.w	r4, r4, #1
  402c88:	ea4f 5244 	mov.w	r2, r4, lsl #21
  402c8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  402c90:	f080 809a 	bcs.w	402dc8 <__adddf3+0x240>
  402c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402c98:	bf08      	it	eq
  402c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  402c9e:	f150 0000 	adcs.w	r0, r0, #0
  402ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402ca6:	ea41 0105 	orr.w	r1, r1, r5
  402caa:	bd30      	pop	{r4, r5, pc}
  402cac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  402cb0:	4140      	adcs	r0, r0
  402cb2:	eb41 0101 	adc.w	r1, r1, r1
  402cb6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402cba:	f1a4 0401 	sub.w	r4, r4, #1
  402cbe:	d1e9      	bne.n	402c94 <__adddf3+0x10c>
  402cc0:	f091 0f00 	teq	r1, #0
  402cc4:	bf04      	itt	eq
  402cc6:	4601      	moveq	r1, r0
  402cc8:	2000      	moveq	r0, #0
  402cca:	fab1 f381 	clz	r3, r1
  402cce:	bf08      	it	eq
  402cd0:	3320      	addeq	r3, #32
  402cd2:	f1a3 030b 	sub.w	r3, r3, #11
  402cd6:	f1b3 0220 	subs.w	r2, r3, #32
  402cda:	da0c      	bge.n	402cf6 <__adddf3+0x16e>
  402cdc:	320c      	adds	r2, #12
  402cde:	dd08      	ble.n	402cf2 <__adddf3+0x16a>
  402ce0:	f102 0c14 	add.w	ip, r2, #20
  402ce4:	f1c2 020c 	rsb	r2, r2, #12
  402ce8:	fa01 f00c 	lsl.w	r0, r1, ip
  402cec:	fa21 f102 	lsr.w	r1, r1, r2
  402cf0:	e00c      	b.n	402d0c <__adddf3+0x184>
  402cf2:	f102 0214 	add.w	r2, r2, #20
  402cf6:	bfd8      	it	le
  402cf8:	f1c2 0c20 	rsble	ip, r2, #32
  402cfc:	fa01 f102 	lsl.w	r1, r1, r2
  402d00:	fa20 fc0c 	lsr.w	ip, r0, ip
  402d04:	bfdc      	itt	le
  402d06:	ea41 010c 	orrle.w	r1, r1, ip
  402d0a:	4090      	lslle	r0, r2
  402d0c:	1ae4      	subs	r4, r4, r3
  402d0e:	bfa2      	ittt	ge
  402d10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  402d14:	4329      	orrge	r1, r5
  402d16:	bd30      	popge	{r4, r5, pc}
  402d18:	ea6f 0404 	mvn.w	r4, r4
  402d1c:	3c1f      	subs	r4, #31
  402d1e:	da1c      	bge.n	402d5a <__adddf3+0x1d2>
  402d20:	340c      	adds	r4, #12
  402d22:	dc0e      	bgt.n	402d42 <__adddf3+0x1ba>
  402d24:	f104 0414 	add.w	r4, r4, #20
  402d28:	f1c4 0220 	rsb	r2, r4, #32
  402d2c:	fa20 f004 	lsr.w	r0, r0, r4
  402d30:	fa01 f302 	lsl.w	r3, r1, r2
  402d34:	ea40 0003 	orr.w	r0, r0, r3
  402d38:	fa21 f304 	lsr.w	r3, r1, r4
  402d3c:	ea45 0103 	orr.w	r1, r5, r3
  402d40:	bd30      	pop	{r4, r5, pc}
  402d42:	f1c4 040c 	rsb	r4, r4, #12
  402d46:	f1c4 0220 	rsb	r2, r4, #32
  402d4a:	fa20 f002 	lsr.w	r0, r0, r2
  402d4e:	fa01 f304 	lsl.w	r3, r1, r4
  402d52:	ea40 0003 	orr.w	r0, r0, r3
  402d56:	4629      	mov	r1, r5
  402d58:	bd30      	pop	{r4, r5, pc}
  402d5a:	fa21 f004 	lsr.w	r0, r1, r4
  402d5e:	4629      	mov	r1, r5
  402d60:	bd30      	pop	{r4, r5, pc}
  402d62:	f094 0f00 	teq	r4, #0
  402d66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  402d6a:	bf06      	itte	eq
  402d6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  402d70:	3401      	addeq	r4, #1
  402d72:	3d01      	subne	r5, #1
  402d74:	e74e      	b.n	402c14 <__adddf3+0x8c>
  402d76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402d7a:	bf18      	it	ne
  402d7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  402d80:	d029      	beq.n	402dd6 <__adddf3+0x24e>
  402d82:	ea94 0f05 	teq	r4, r5
  402d86:	bf08      	it	eq
  402d88:	ea90 0f02 	teqeq	r0, r2
  402d8c:	d005      	beq.n	402d9a <__adddf3+0x212>
  402d8e:	ea54 0c00 	orrs.w	ip, r4, r0
  402d92:	bf04      	itt	eq
  402d94:	4619      	moveq	r1, r3
  402d96:	4610      	moveq	r0, r2
  402d98:	bd30      	pop	{r4, r5, pc}
  402d9a:	ea91 0f03 	teq	r1, r3
  402d9e:	bf1e      	ittt	ne
  402da0:	2100      	movne	r1, #0
  402da2:	2000      	movne	r0, #0
  402da4:	bd30      	popne	{r4, r5, pc}
  402da6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  402daa:	d105      	bne.n	402db8 <__adddf3+0x230>
  402dac:	0040      	lsls	r0, r0, #1
  402dae:	4149      	adcs	r1, r1
  402db0:	bf28      	it	cs
  402db2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  402db6:	bd30      	pop	{r4, r5, pc}
  402db8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  402dbc:	bf3c      	itt	cc
  402dbe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  402dc2:	bd30      	popcc	{r4, r5, pc}
  402dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402dc8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402dd0:	f04f 0000 	mov.w	r0, #0
  402dd4:	bd30      	pop	{r4, r5, pc}
  402dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  402dda:	bf1a      	itte	ne
  402ddc:	4619      	movne	r1, r3
  402dde:	4610      	movne	r0, r2
  402de0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402de4:	bf1c      	itt	ne
  402de6:	460b      	movne	r3, r1
  402de8:	4602      	movne	r2, r0
  402dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402dee:	bf06      	itte	eq
  402df0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402df4:	ea91 0f03 	teqeq	r1, r3
  402df8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402dfc:	bd30      	pop	{r4, r5, pc}
  402dfe:	bf00      	nop

00402e00 <__aeabi_ui2d>:
  402e00:	f090 0f00 	teq	r0, #0
  402e04:	bf04      	itt	eq
  402e06:	2100      	moveq	r1, #0
  402e08:	4770      	bxeq	lr
  402e0a:	b530      	push	{r4, r5, lr}
  402e0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e10:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e14:	f04f 0500 	mov.w	r5, #0
  402e18:	f04f 0100 	mov.w	r1, #0
  402e1c:	e750      	b.n	402cc0 <__adddf3+0x138>
  402e1e:	bf00      	nop

00402e20 <__aeabi_i2d>:
  402e20:	f090 0f00 	teq	r0, #0
  402e24:	bf04      	itt	eq
  402e26:	2100      	moveq	r1, #0
  402e28:	4770      	bxeq	lr
  402e2a:	b530      	push	{r4, r5, lr}
  402e2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402e30:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402e34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  402e38:	bf48      	it	mi
  402e3a:	4240      	negmi	r0, r0
  402e3c:	f04f 0100 	mov.w	r1, #0
  402e40:	e73e      	b.n	402cc0 <__adddf3+0x138>
  402e42:	bf00      	nop

00402e44 <__aeabi_f2d>:
  402e44:	0042      	lsls	r2, r0, #1
  402e46:	ea4f 01e2 	mov.w	r1, r2, asr #3
  402e4a:	ea4f 0131 	mov.w	r1, r1, rrx
  402e4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402e52:	bf1f      	itttt	ne
  402e54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  402e58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402e60:	4770      	bxne	lr
  402e62:	f092 0f00 	teq	r2, #0
  402e66:	bf14      	ite	ne
  402e68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402e6c:	4770      	bxeq	lr
  402e6e:	b530      	push	{r4, r5, lr}
  402e70:	f44f 7460 	mov.w	r4, #896	; 0x380
  402e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  402e78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402e7c:	e720      	b.n	402cc0 <__adddf3+0x138>
  402e7e:	bf00      	nop

00402e80 <__aeabi_ul2d>:
  402e80:	ea50 0201 	orrs.w	r2, r0, r1
  402e84:	bf08      	it	eq
  402e86:	4770      	bxeq	lr
  402e88:	b530      	push	{r4, r5, lr}
  402e8a:	f04f 0500 	mov.w	r5, #0
  402e8e:	e00a      	b.n	402ea6 <__aeabi_l2d+0x16>

00402e90 <__aeabi_l2d>:
  402e90:	ea50 0201 	orrs.w	r2, r0, r1
  402e94:	bf08      	it	eq
  402e96:	4770      	bxeq	lr
  402e98:	b530      	push	{r4, r5, lr}
  402e9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  402e9e:	d502      	bpl.n	402ea6 <__aeabi_l2d+0x16>
  402ea0:	4240      	negs	r0, r0
  402ea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402ea6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402eaa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402eae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  402eb2:	f43f aedc 	beq.w	402c6e <__adddf3+0xe6>
  402eb6:	f04f 0203 	mov.w	r2, #3
  402eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402ebe:	bf18      	it	ne
  402ec0:	3203      	addne	r2, #3
  402ec2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  402ec6:	bf18      	it	ne
  402ec8:	3203      	addne	r2, #3
  402eca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402ece:	f1c2 0320 	rsb	r3, r2, #32
  402ed2:	fa00 fc03 	lsl.w	ip, r0, r3
  402ed6:	fa20 f002 	lsr.w	r0, r0, r2
  402eda:	fa01 fe03 	lsl.w	lr, r1, r3
  402ede:	ea40 000e 	orr.w	r0, r0, lr
  402ee2:	fa21 f102 	lsr.w	r1, r1, r2
  402ee6:	4414      	add	r4, r2
  402ee8:	e6c1      	b.n	402c6e <__adddf3+0xe6>
  402eea:	bf00      	nop

00402eec <__aeabi_dmul>:
  402eec:	b570      	push	{r4, r5, r6, lr}
  402eee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402ef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  402ef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402efa:	bf1d      	ittte	ne
  402efc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402f00:	ea94 0f0c 	teqne	r4, ip
  402f04:	ea95 0f0c 	teqne	r5, ip
  402f08:	f000 f8de 	bleq	4030c8 <__aeabi_dmul+0x1dc>
  402f0c:	442c      	add	r4, r5
  402f0e:	ea81 0603 	eor.w	r6, r1, r3
  402f12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  402f16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  402f1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402f1e:	bf18      	it	ne
  402f20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402f2c:	d038      	beq.n	402fa0 <__aeabi_dmul+0xb4>
  402f2e:	fba0 ce02 	umull	ip, lr, r0, r2
  402f32:	f04f 0500 	mov.w	r5, #0
  402f36:	fbe1 e502 	umlal	lr, r5, r1, r2
  402f3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402f3e:	fbe0 e503 	umlal	lr, r5, r0, r3
  402f42:	f04f 0600 	mov.w	r6, #0
  402f46:	fbe1 5603 	umlal	r5, r6, r1, r3
  402f4a:	f09c 0f00 	teq	ip, #0
  402f4e:	bf18      	it	ne
  402f50:	f04e 0e01 	orrne.w	lr, lr, #1
  402f54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  402f58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402f5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402f60:	d204      	bcs.n	402f6c <__aeabi_dmul+0x80>
  402f62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  402f66:	416d      	adcs	r5, r5
  402f68:	eb46 0606 	adc.w	r6, r6, r6
  402f6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  402f70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  402f74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  402f78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  402f7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  402f80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402f84:	bf88      	it	hi
  402f86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  402f8a:	d81e      	bhi.n	402fca <__aeabi_dmul+0xde>
  402f8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  402f90:	bf08      	it	eq
  402f92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  402f96:	f150 0000 	adcs.w	r0, r0, #0
  402f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402f9e:	bd70      	pop	{r4, r5, r6, pc}
  402fa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  402fa4:	ea46 0101 	orr.w	r1, r6, r1
  402fa8:	ea40 0002 	orr.w	r0, r0, r2
  402fac:	ea81 0103 	eor.w	r1, r1, r3
  402fb0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  402fb4:	bfc2      	ittt	gt
  402fb6:	ebd4 050c 	rsbsgt	r5, r4, ip
  402fba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  402fbe:	bd70      	popgt	{r4, r5, r6, pc}
  402fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402fc4:	f04f 0e00 	mov.w	lr, #0
  402fc8:	3c01      	subs	r4, #1
  402fca:	f300 80ab 	bgt.w	403124 <__aeabi_dmul+0x238>
  402fce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402fd2:	bfde      	ittt	le
  402fd4:	2000      	movle	r0, #0
  402fd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  402fda:	bd70      	pople	{r4, r5, r6, pc}
  402fdc:	f1c4 0400 	rsb	r4, r4, #0
  402fe0:	3c20      	subs	r4, #32
  402fe2:	da35      	bge.n	403050 <__aeabi_dmul+0x164>
  402fe4:	340c      	adds	r4, #12
  402fe6:	dc1b      	bgt.n	403020 <__aeabi_dmul+0x134>
  402fe8:	f104 0414 	add.w	r4, r4, #20
  402fec:	f1c4 0520 	rsb	r5, r4, #32
  402ff0:	fa00 f305 	lsl.w	r3, r0, r5
  402ff4:	fa20 f004 	lsr.w	r0, r0, r4
  402ff8:	fa01 f205 	lsl.w	r2, r1, r5
  402ffc:	ea40 0002 	orr.w	r0, r0, r2
  403000:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403008:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40300c:	fa21 f604 	lsr.w	r6, r1, r4
  403010:	eb42 0106 	adc.w	r1, r2, r6
  403014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403018:	bf08      	it	eq
  40301a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40301e:	bd70      	pop	{r4, r5, r6, pc}
  403020:	f1c4 040c 	rsb	r4, r4, #12
  403024:	f1c4 0520 	rsb	r5, r4, #32
  403028:	fa00 f304 	lsl.w	r3, r0, r4
  40302c:	fa20 f005 	lsr.w	r0, r0, r5
  403030:	fa01 f204 	lsl.w	r2, r1, r4
  403034:	ea40 0002 	orr.w	r0, r0, r2
  403038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40303c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403040:	f141 0100 	adc.w	r1, r1, #0
  403044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403048:	bf08      	it	eq
  40304a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40304e:	bd70      	pop	{r4, r5, r6, pc}
  403050:	f1c4 0520 	rsb	r5, r4, #32
  403054:	fa00 f205 	lsl.w	r2, r0, r5
  403058:	ea4e 0e02 	orr.w	lr, lr, r2
  40305c:	fa20 f304 	lsr.w	r3, r0, r4
  403060:	fa01 f205 	lsl.w	r2, r1, r5
  403064:	ea43 0302 	orr.w	r3, r3, r2
  403068:	fa21 f004 	lsr.w	r0, r1, r4
  40306c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403070:	fa21 f204 	lsr.w	r2, r1, r4
  403074:	ea20 0002 	bic.w	r0, r0, r2
  403078:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40307c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403080:	bf08      	it	eq
  403082:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403086:	bd70      	pop	{r4, r5, r6, pc}
  403088:	f094 0f00 	teq	r4, #0
  40308c:	d10f      	bne.n	4030ae <__aeabi_dmul+0x1c2>
  40308e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403092:	0040      	lsls	r0, r0, #1
  403094:	eb41 0101 	adc.w	r1, r1, r1
  403098:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40309c:	bf08      	it	eq
  40309e:	3c01      	subeq	r4, #1
  4030a0:	d0f7      	beq.n	403092 <__aeabi_dmul+0x1a6>
  4030a2:	ea41 0106 	orr.w	r1, r1, r6
  4030a6:	f095 0f00 	teq	r5, #0
  4030aa:	bf18      	it	ne
  4030ac:	4770      	bxne	lr
  4030ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4030b2:	0052      	lsls	r2, r2, #1
  4030b4:	eb43 0303 	adc.w	r3, r3, r3
  4030b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4030bc:	bf08      	it	eq
  4030be:	3d01      	subeq	r5, #1
  4030c0:	d0f7      	beq.n	4030b2 <__aeabi_dmul+0x1c6>
  4030c2:	ea43 0306 	orr.w	r3, r3, r6
  4030c6:	4770      	bx	lr
  4030c8:	ea94 0f0c 	teq	r4, ip
  4030cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4030d0:	bf18      	it	ne
  4030d2:	ea95 0f0c 	teqne	r5, ip
  4030d6:	d00c      	beq.n	4030f2 <__aeabi_dmul+0x206>
  4030d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030dc:	bf18      	it	ne
  4030de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4030e2:	d1d1      	bne.n	403088 <__aeabi_dmul+0x19c>
  4030e4:	ea81 0103 	eor.w	r1, r1, r3
  4030e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4030ec:	f04f 0000 	mov.w	r0, #0
  4030f0:	bd70      	pop	{r4, r5, r6, pc}
  4030f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4030f6:	bf06      	itte	eq
  4030f8:	4610      	moveq	r0, r2
  4030fa:	4619      	moveq	r1, r3
  4030fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403100:	d019      	beq.n	403136 <__aeabi_dmul+0x24a>
  403102:	ea94 0f0c 	teq	r4, ip
  403106:	d102      	bne.n	40310e <__aeabi_dmul+0x222>
  403108:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40310c:	d113      	bne.n	403136 <__aeabi_dmul+0x24a>
  40310e:	ea95 0f0c 	teq	r5, ip
  403112:	d105      	bne.n	403120 <__aeabi_dmul+0x234>
  403114:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403118:	bf1c      	itt	ne
  40311a:	4610      	movne	r0, r2
  40311c:	4619      	movne	r1, r3
  40311e:	d10a      	bne.n	403136 <__aeabi_dmul+0x24a>
  403120:	ea81 0103 	eor.w	r1, r1, r3
  403124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403128:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40312c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403130:	f04f 0000 	mov.w	r0, #0
  403134:	bd70      	pop	{r4, r5, r6, pc}
  403136:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40313a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40313e:	bd70      	pop	{r4, r5, r6, pc}

00403140 <__aeabi_ddiv>:
  403140:	b570      	push	{r4, r5, r6, lr}
  403142:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403146:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40314a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40314e:	bf1d      	ittte	ne
  403150:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403154:	ea94 0f0c 	teqne	r4, ip
  403158:	ea95 0f0c 	teqne	r5, ip
  40315c:	f000 f8a7 	bleq	4032ae <__aeabi_ddiv+0x16e>
  403160:	eba4 0405 	sub.w	r4, r4, r5
  403164:	ea81 0e03 	eor.w	lr, r1, r3
  403168:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40316c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403170:	f000 8088 	beq.w	403284 <__aeabi_ddiv+0x144>
  403174:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403178:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40317c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403180:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403184:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403188:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40318c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403190:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403194:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403198:	429d      	cmp	r5, r3
  40319a:	bf08      	it	eq
  40319c:	4296      	cmpeq	r6, r2
  40319e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4031a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4031a6:	d202      	bcs.n	4031ae <__aeabi_ddiv+0x6e>
  4031a8:	085b      	lsrs	r3, r3, #1
  4031aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4031ae:	1ab6      	subs	r6, r6, r2
  4031b0:	eb65 0503 	sbc.w	r5, r5, r3
  4031b4:	085b      	lsrs	r3, r3, #1
  4031b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4031ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4031be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4031c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4031c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031ca:	bf22      	ittt	cs
  4031cc:	1ab6      	subcs	r6, r6, r2
  4031ce:	4675      	movcs	r5, lr
  4031d0:	ea40 000c 	orrcs.w	r0, r0, ip
  4031d4:	085b      	lsrs	r3, r3, #1
  4031d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4031da:	ebb6 0e02 	subs.w	lr, r6, r2
  4031de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031e2:	bf22      	ittt	cs
  4031e4:	1ab6      	subcs	r6, r6, r2
  4031e6:	4675      	movcs	r5, lr
  4031e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4031ec:	085b      	lsrs	r3, r3, #1
  4031ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4031f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4031f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4031fa:	bf22      	ittt	cs
  4031fc:	1ab6      	subcs	r6, r6, r2
  4031fe:	4675      	movcs	r5, lr
  403200:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403204:	085b      	lsrs	r3, r3, #1
  403206:	ea4f 0232 	mov.w	r2, r2, rrx
  40320a:	ebb6 0e02 	subs.w	lr, r6, r2
  40320e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403212:	bf22      	ittt	cs
  403214:	1ab6      	subcs	r6, r6, r2
  403216:	4675      	movcs	r5, lr
  403218:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40321c:	ea55 0e06 	orrs.w	lr, r5, r6
  403220:	d018      	beq.n	403254 <__aeabi_ddiv+0x114>
  403222:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403226:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40322a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40322e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403232:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403236:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40323a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40323e:	d1c0      	bne.n	4031c2 <__aeabi_ddiv+0x82>
  403240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403244:	d10b      	bne.n	40325e <__aeabi_ddiv+0x11e>
  403246:	ea41 0100 	orr.w	r1, r1, r0
  40324a:	f04f 0000 	mov.w	r0, #0
  40324e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403252:	e7b6      	b.n	4031c2 <__aeabi_ddiv+0x82>
  403254:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403258:	bf04      	itt	eq
  40325a:	4301      	orreq	r1, r0
  40325c:	2000      	moveq	r0, #0
  40325e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403262:	bf88      	it	hi
  403264:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403268:	f63f aeaf 	bhi.w	402fca <__aeabi_dmul+0xde>
  40326c:	ebb5 0c03 	subs.w	ip, r5, r3
  403270:	bf04      	itt	eq
  403272:	ebb6 0c02 	subseq.w	ip, r6, r2
  403276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40327a:	f150 0000 	adcs.w	r0, r0, #0
  40327e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403282:	bd70      	pop	{r4, r5, r6, pc}
  403284:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403288:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40328c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403290:	bfc2      	ittt	gt
  403292:	ebd4 050c 	rsbsgt	r5, r4, ip
  403296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40329a:	bd70      	popgt	{r4, r5, r6, pc}
  40329c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4032a0:	f04f 0e00 	mov.w	lr, #0
  4032a4:	3c01      	subs	r4, #1
  4032a6:	e690      	b.n	402fca <__aeabi_dmul+0xde>
  4032a8:	ea45 0e06 	orr.w	lr, r5, r6
  4032ac:	e68d      	b.n	402fca <__aeabi_dmul+0xde>
  4032ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4032b2:	ea94 0f0c 	teq	r4, ip
  4032b6:	bf08      	it	eq
  4032b8:	ea95 0f0c 	teqeq	r5, ip
  4032bc:	f43f af3b 	beq.w	403136 <__aeabi_dmul+0x24a>
  4032c0:	ea94 0f0c 	teq	r4, ip
  4032c4:	d10a      	bne.n	4032dc <__aeabi_ddiv+0x19c>
  4032c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4032ca:	f47f af34 	bne.w	403136 <__aeabi_dmul+0x24a>
  4032ce:	ea95 0f0c 	teq	r5, ip
  4032d2:	f47f af25 	bne.w	403120 <__aeabi_dmul+0x234>
  4032d6:	4610      	mov	r0, r2
  4032d8:	4619      	mov	r1, r3
  4032da:	e72c      	b.n	403136 <__aeabi_dmul+0x24a>
  4032dc:	ea95 0f0c 	teq	r5, ip
  4032e0:	d106      	bne.n	4032f0 <__aeabi_ddiv+0x1b0>
  4032e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4032e6:	f43f aefd 	beq.w	4030e4 <__aeabi_dmul+0x1f8>
  4032ea:	4610      	mov	r0, r2
  4032ec:	4619      	mov	r1, r3
  4032ee:	e722      	b.n	403136 <__aeabi_dmul+0x24a>
  4032f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4032f4:	bf18      	it	ne
  4032f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4032fa:	f47f aec5 	bne.w	403088 <__aeabi_dmul+0x19c>
  4032fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403302:	f47f af0d 	bne.w	403120 <__aeabi_dmul+0x234>
  403306:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40330a:	f47f aeeb 	bne.w	4030e4 <__aeabi_dmul+0x1f8>
  40330e:	e712      	b.n	403136 <__aeabi_dmul+0x24a>

00403310 <__aeabi_uldivmod>:
  403310:	b953      	cbnz	r3, 403328 <__aeabi_uldivmod+0x18>
  403312:	b94a      	cbnz	r2, 403328 <__aeabi_uldivmod+0x18>
  403314:	2900      	cmp	r1, #0
  403316:	bf08      	it	eq
  403318:	2800      	cmpeq	r0, #0
  40331a:	bf1c      	itt	ne
  40331c:	f04f 31ff 	movne.w	r1, #4294967295
  403320:	f04f 30ff 	movne.w	r0, #4294967295
  403324:	f000 b97a 	b.w	40361c <__aeabi_idiv0>
  403328:	f1ad 0c08 	sub.w	ip, sp, #8
  40332c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403330:	f000 f806 	bl	403340 <__udivmoddi4>
  403334:	f8dd e004 	ldr.w	lr, [sp, #4]
  403338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40333c:	b004      	add	sp, #16
  40333e:	4770      	bx	lr

00403340 <__udivmoddi4>:
  403340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403344:	468c      	mov	ip, r1
  403346:	460d      	mov	r5, r1
  403348:	4604      	mov	r4, r0
  40334a:	9e08      	ldr	r6, [sp, #32]
  40334c:	2b00      	cmp	r3, #0
  40334e:	d151      	bne.n	4033f4 <__udivmoddi4+0xb4>
  403350:	428a      	cmp	r2, r1
  403352:	4617      	mov	r7, r2
  403354:	d96d      	bls.n	403432 <__udivmoddi4+0xf2>
  403356:	fab2 fe82 	clz	lr, r2
  40335a:	f1be 0f00 	cmp.w	lr, #0
  40335e:	d00b      	beq.n	403378 <__udivmoddi4+0x38>
  403360:	f1ce 0c20 	rsb	ip, lr, #32
  403364:	fa01 f50e 	lsl.w	r5, r1, lr
  403368:	fa20 fc0c 	lsr.w	ip, r0, ip
  40336c:	fa02 f70e 	lsl.w	r7, r2, lr
  403370:	ea4c 0c05 	orr.w	ip, ip, r5
  403374:	fa00 f40e 	lsl.w	r4, r0, lr
  403378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40337c:	0c25      	lsrs	r5, r4, #16
  40337e:	fbbc f8fa 	udiv	r8, ip, sl
  403382:	fa1f f987 	uxth.w	r9, r7
  403386:	fb0a cc18 	mls	ip, sl, r8, ip
  40338a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40338e:	fb08 f309 	mul.w	r3, r8, r9
  403392:	42ab      	cmp	r3, r5
  403394:	d90a      	bls.n	4033ac <__udivmoddi4+0x6c>
  403396:	19ed      	adds	r5, r5, r7
  403398:	f108 32ff 	add.w	r2, r8, #4294967295
  40339c:	f080 8123 	bcs.w	4035e6 <__udivmoddi4+0x2a6>
  4033a0:	42ab      	cmp	r3, r5
  4033a2:	f240 8120 	bls.w	4035e6 <__udivmoddi4+0x2a6>
  4033a6:	f1a8 0802 	sub.w	r8, r8, #2
  4033aa:	443d      	add	r5, r7
  4033ac:	1aed      	subs	r5, r5, r3
  4033ae:	b2a4      	uxth	r4, r4
  4033b0:	fbb5 f0fa 	udiv	r0, r5, sl
  4033b4:	fb0a 5510 	mls	r5, sl, r0, r5
  4033b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4033bc:	fb00 f909 	mul.w	r9, r0, r9
  4033c0:	45a1      	cmp	r9, r4
  4033c2:	d909      	bls.n	4033d8 <__udivmoddi4+0x98>
  4033c4:	19e4      	adds	r4, r4, r7
  4033c6:	f100 33ff 	add.w	r3, r0, #4294967295
  4033ca:	f080 810a 	bcs.w	4035e2 <__udivmoddi4+0x2a2>
  4033ce:	45a1      	cmp	r9, r4
  4033d0:	f240 8107 	bls.w	4035e2 <__udivmoddi4+0x2a2>
  4033d4:	3802      	subs	r0, #2
  4033d6:	443c      	add	r4, r7
  4033d8:	eba4 0409 	sub.w	r4, r4, r9
  4033dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4033e0:	2100      	movs	r1, #0
  4033e2:	2e00      	cmp	r6, #0
  4033e4:	d061      	beq.n	4034aa <__udivmoddi4+0x16a>
  4033e6:	fa24 f40e 	lsr.w	r4, r4, lr
  4033ea:	2300      	movs	r3, #0
  4033ec:	6034      	str	r4, [r6, #0]
  4033ee:	6073      	str	r3, [r6, #4]
  4033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033f4:	428b      	cmp	r3, r1
  4033f6:	d907      	bls.n	403408 <__udivmoddi4+0xc8>
  4033f8:	2e00      	cmp	r6, #0
  4033fa:	d054      	beq.n	4034a6 <__udivmoddi4+0x166>
  4033fc:	2100      	movs	r1, #0
  4033fe:	e886 0021 	stmia.w	r6, {r0, r5}
  403402:	4608      	mov	r0, r1
  403404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403408:	fab3 f183 	clz	r1, r3
  40340c:	2900      	cmp	r1, #0
  40340e:	f040 808e 	bne.w	40352e <__udivmoddi4+0x1ee>
  403412:	42ab      	cmp	r3, r5
  403414:	d302      	bcc.n	40341c <__udivmoddi4+0xdc>
  403416:	4282      	cmp	r2, r0
  403418:	f200 80fa 	bhi.w	403610 <__udivmoddi4+0x2d0>
  40341c:	1a84      	subs	r4, r0, r2
  40341e:	eb65 0503 	sbc.w	r5, r5, r3
  403422:	2001      	movs	r0, #1
  403424:	46ac      	mov	ip, r5
  403426:	2e00      	cmp	r6, #0
  403428:	d03f      	beq.n	4034aa <__udivmoddi4+0x16a>
  40342a:	e886 1010 	stmia.w	r6, {r4, ip}
  40342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403432:	b912      	cbnz	r2, 40343a <__udivmoddi4+0xfa>
  403434:	2701      	movs	r7, #1
  403436:	fbb7 f7f2 	udiv	r7, r7, r2
  40343a:	fab7 fe87 	clz	lr, r7
  40343e:	f1be 0f00 	cmp.w	lr, #0
  403442:	d134      	bne.n	4034ae <__udivmoddi4+0x16e>
  403444:	1beb      	subs	r3, r5, r7
  403446:	0c3a      	lsrs	r2, r7, #16
  403448:	fa1f fc87 	uxth.w	ip, r7
  40344c:	2101      	movs	r1, #1
  40344e:	fbb3 f8f2 	udiv	r8, r3, r2
  403452:	0c25      	lsrs	r5, r4, #16
  403454:	fb02 3318 	mls	r3, r2, r8, r3
  403458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40345c:	fb0c f308 	mul.w	r3, ip, r8
  403460:	42ab      	cmp	r3, r5
  403462:	d907      	bls.n	403474 <__udivmoddi4+0x134>
  403464:	19ed      	adds	r5, r5, r7
  403466:	f108 30ff 	add.w	r0, r8, #4294967295
  40346a:	d202      	bcs.n	403472 <__udivmoddi4+0x132>
  40346c:	42ab      	cmp	r3, r5
  40346e:	f200 80d1 	bhi.w	403614 <__udivmoddi4+0x2d4>
  403472:	4680      	mov	r8, r0
  403474:	1aed      	subs	r5, r5, r3
  403476:	b2a3      	uxth	r3, r4
  403478:	fbb5 f0f2 	udiv	r0, r5, r2
  40347c:	fb02 5510 	mls	r5, r2, r0, r5
  403480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403484:	fb0c fc00 	mul.w	ip, ip, r0
  403488:	45a4      	cmp	ip, r4
  40348a:	d907      	bls.n	40349c <__udivmoddi4+0x15c>
  40348c:	19e4      	adds	r4, r4, r7
  40348e:	f100 33ff 	add.w	r3, r0, #4294967295
  403492:	d202      	bcs.n	40349a <__udivmoddi4+0x15a>
  403494:	45a4      	cmp	ip, r4
  403496:	f200 80b8 	bhi.w	40360a <__udivmoddi4+0x2ca>
  40349a:	4618      	mov	r0, r3
  40349c:	eba4 040c 	sub.w	r4, r4, ip
  4034a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4034a4:	e79d      	b.n	4033e2 <__udivmoddi4+0xa2>
  4034a6:	4631      	mov	r1, r6
  4034a8:	4630      	mov	r0, r6
  4034aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034ae:	f1ce 0420 	rsb	r4, lr, #32
  4034b2:	fa05 f30e 	lsl.w	r3, r5, lr
  4034b6:	fa07 f70e 	lsl.w	r7, r7, lr
  4034ba:	fa20 f804 	lsr.w	r8, r0, r4
  4034be:	0c3a      	lsrs	r2, r7, #16
  4034c0:	fa25 f404 	lsr.w	r4, r5, r4
  4034c4:	ea48 0803 	orr.w	r8, r8, r3
  4034c8:	fbb4 f1f2 	udiv	r1, r4, r2
  4034cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4034d0:	fb02 4411 	mls	r4, r2, r1, r4
  4034d4:	fa1f fc87 	uxth.w	ip, r7
  4034d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4034dc:	fb01 f30c 	mul.w	r3, r1, ip
  4034e0:	42ab      	cmp	r3, r5
  4034e2:	fa00 f40e 	lsl.w	r4, r0, lr
  4034e6:	d909      	bls.n	4034fc <__udivmoddi4+0x1bc>
  4034e8:	19ed      	adds	r5, r5, r7
  4034ea:	f101 30ff 	add.w	r0, r1, #4294967295
  4034ee:	f080 808a 	bcs.w	403606 <__udivmoddi4+0x2c6>
  4034f2:	42ab      	cmp	r3, r5
  4034f4:	f240 8087 	bls.w	403606 <__udivmoddi4+0x2c6>
  4034f8:	3902      	subs	r1, #2
  4034fa:	443d      	add	r5, r7
  4034fc:	1aeb      	subs	r3, r5, r3
  4034fe:	fa1f f588 	uxth.w	r5, r8
  403502:	fbb3 f0f2 	udiv	r0, r3, r2
  403506:	fb02 3310 	mls	r3, r2, r0, r3
  40350a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40350e:	fb00 f30c 	mul.w	r3, r0, ip
  403512:	42ab      	cmp	r3, r5
  403514:	d907      	bls.n	403526 <__udivmoddi4+0x1e6>
  403516:	19ed      	adds	r5, r5, r7
  403518:	f100 38ff 	add.w	r8, r0, #4294967295
  40351c:	d26f      	bcs.n	4035fe <__udivmoddi4+0x2be>
  40351e:	42ab      	cmp	r3, r5
  403520:	d96d      	bls.n	4035fe <__udivmoddi4+0x2be>
  403522:	3802      	subs	r0, #2
  403524:	443d      	add	r5, r7
  403526:	1aeb      	subs	r3, r5, r3
  403528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40352c:	e78f      	b.n	40344e <__udivmoddi4+0x10e>
  40352e:	f1c1 0720 	rsb	r7, r1, #32
  403532:	fa22 f807 	lsr.w	r8, r2, r7
  403536:	408b      	lsls	r3, r1
  403538:	fa05 f401 	lsl.w	r4, r5, r1
  40353c:	ea48 0303 	orr.w	r3, r8, r3
  403540:	fa20 fe07 	lsr.w	lr, r0, r7
  403544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403548:	40fd      	lsrs	r5, r7
  40354a:	ea4e 0e04 	orr.w	lr, lr, r4
  40354e:	fbb5 f9fc 	udiv	r9, r5, ip
  403552:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403556:	fb0c 5519 	mls	r5, ip, r9, r5
  40355a:	fa1f f883 	uxth.w	r8, r3
  40355e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403562:	fb09 f408 	mul.w	r4, r9, r8
  403566:	42ac      	cmp	r4, r5
  403568:	fa02 f201 	lsl.w	r2, r2, r1
  40356c:	fa00 fa01 	lsl.w	sl, r0, r1
  403570:	d908      	bls.n	403584 <__udivmoddi4+0x244>
  403572:	18ed      	adds	r5, r5, r3
  403574:	f109 30ff 	add.w	r0, r9, #4294967295
  403578:	d243      	bcs.n	403602 <__udivmoddi4+0x2c2>
  40357a:	42ac      	cmp	r4, r5
  40357c:	d941      	bls.n	403602 <__udivmoddi4+0x2c2>
  40357e:	f1a9 0902 	sub.w	r9, r9, #2
  403582:	441d      	add	r5, r3
  403584:	1b2d      	subs	r5, r5, r4
  403586:	fa1f fe8e 	uxth.w	lr, lr
  40358a:	fbb5 f0fc 	udiv	r0, r5, ip
  40358e:	fb0c 5510 	mls	r5, ip, r0, r5
  403592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403596:	fb00 f808 	mul.w	r8, r0, r8
  40359a:	45a0      	cmp	r8, r4
  40359c:	d907      	bls.n	4035ae <__udivmoddi4+0x26e>
  40359e:	18e4      	adds	r4, r4, r3
  4035a0:	f100 35ff 	add.w	r5, r0, #4294967295
  4035a4:	d229      	bcs.n	4035fa <__udivmoddi4+0x2ba>
  4035a6:	45a0      	cmp	r8, r4
  4035a8:	d927      	bls.n	4035fa <__udivmoddi4+0x2ba>
  4035aa:	3802      	subs	r0, #2
  4035ac:	441c      	add	r4, r3
  4035ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4035b2:	eba4 0408 	sub.w	r4, r4, r8
  4035b6:	fba0 8902 	umull	r8, r9, r0, r2
  4035ba:	454c      	cmp	r4, r9
  4035bc:	46c6      	mov	lr, r8
  4035be:	464d      	mov	r5, r9
  4035c0:	d315      	bcc.n	4035ee <__udivmoddi4+0x2ae>
  4035c2:	d012      	beq.n	4035ea <__udivmoddi4+0x2aa>
  4035c4:	b156      	cbz	r6, 4035dc <__udivmoddi4+0x29c>
  4035c6:	ebba 030e 	subs.w	r3, sl, lr
  4035ca:	eb64 0405 	sbc.w	r4, r4, r5
  4035ce:	fa04 f707 	lsl.w	r7, r4, r7
  4035d2:	40cb      	lsrs	r3, r1
  4035d4:	431f      	orrs	r7, r3
  4035d6:	40cc      	lsrs	r4, r1
  4035d8:	6037      	str	r7, [r6, #0]
  4035da:	6074      	str	r4, [r6, #4]
  4035dc:	2100      	movs	r1, #0
  4035de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4035e2:	4618      	mov	r0, r3
  4035e4:	e6f8      	b.n	4033d8 <__udivmoddi4+0x98>
  4035e6:	4690      	mov	r8, r2
  4035e8:	e6e0      	b.n	4033ac <__udivmoddi4+0x6c>
  4035ea:	45c2      	cmp	sl, r8
  4035ec:	d2ea      	bcs.n	4035c4 <__udivmoddi4+0x284>
  4035ee:	ebb8 0e02 	subs.w	lr, r8, r2
  4035f2:	eb69 0503 	sbc.w	r5, r9, r3
  4035f6:	3801      	subs	r0, #1
  4035f8:	e7e4      	b.n	4035c4 <__udivmoddi4+0x284>
  4035fa:	4628      	mov	r0, r5
  4035fc:	e7d7      	b.n	4035ae <__udivmoddi4+0x26e>
  4035fe:	4640      	mov	r0, r8
  403600:	e791      	b.n	403526 <__udivmoddi4+0x1e6>
  403602:	4681      	mov	r9, r0
  403604:	e7be      	b.n	403584 <__udivmoddi4+0x244>
  403606:	4601      	mov	r1, r0
  403608:	e778      	b.n	4034fc <__udivmoddi4+0x1bc>
  40360a:	3802      	subs	r0, #2
  40360c:	443c      	add	r4, r7
  40360e:	e745      	b.n	40349c <__udivmoddi4+0x15c>
  403610:	4608      	mov	r0, r1
  403612:	e708      	b.n	403426 <__udivmoddi4+0xe6>
  403614:	f1a8 0802 	sub.w	r8, r8, #2
  403618:	443d      	add	r5, r7
  40361a:	e72b      	b.n	403474 <__udivmoddi4+0x134>

0040361c <__aeabi_idiv0>:
  40361c:	4770      	bx	lr
  40361e:	bf00      	nop

00403620 <__libc_init_array>:
  403620:	b570      	push	{r4, r5, r6, lr}
  403622:	4e0f      	ldr	r6, [pc, #60]	; (403660 <__libc_init_array+0x40>)
  403624:	4d0f      	ldr	r5, [pc, #60]	; (403664 <__libc_init_array+0x44>)
  403626:	1b76      	subs	r6, r6, r5
  403628:	10b6      	asrs	r6, r6, #2
  40362a:	bf18      	it	ne
  40362c:	2400      	movne	r4, #0
  40362e:	d005      	beq.n	40363c <__libc_init_array+0x1c>
  403630:	3401      	adds	r4, #1
  403632:	f855 3b04 	ldr.w	r3, [r5], #4
  403636:	4798      	blx	r3
  403638:	42a6      	cmp	r6, r4
  40363a:	d1f9      	bne.n	403630 <__libc_init_array+0x10>
  40363c:	4e0a      	ldr	r6, [pc, #40]	; (403668 <__libc_init_array+0x48>)
  40363e:	4d0b      	ldr	r5, [pc, #44]	; (40366c <__libc_init_array+0x4c>)
  403640:	1b76      	subs	r6, r6, r5
  403642:	f004 fc75 	bl	407f30 <_init>
  403646:	10b6      	asrs	r6, r6, #2
  403648:	bf18      	it	ne
  40364a:	2400      	movne	r4, #0
  40364c:	d006      	beq.n	40365c <__libc_init_array+0x3c>
  40364e:	3401      	adds	r4, #1
  403650:	f855 3b04 	ldr.w	r3, [r5], #4
  403654:	4798      	blx	r3
  403656:	42a6      	cmp	r6, r4
  403658:	d1f9      	bne.n	40364e <__libc_init_array+0x2e>
  40365a:	bd70      	pop	{r4, r5, r6, pc}
  40365c:	bd70      	pop	{r4, r5, r6, pc}
  40365e:	bf00      	nop
  403660:	00407f3c 	.word	0x00407f3c
  403664:	00407f3c 	.word	0x00407f3c
  403668:	00407f44 	.word	0x00407f44
  40366c:	00407f3c 	.word	0x00407f3c

00403670 <memset>:
  403670:	b470      	push	{r4, r5, r6}
  403672:	0786      	lsls	r6, r0, #30
  403674:	d046      	beq.n	403704 <memset+0x94>
  403676:	1e54      	subs	r4, r2, #1
  403678:	2a00      	cmp	r2, #0
  40367a:	d041      	beq.n	403700 <memset+0x90>
  40367c:	b2ca      	uxtb	r2, r1
  40367e:	4603      	mov	r3, r0
  403680:	e002      	b.n	403688 <memset+0x18>
  403682:	f114 34ff 	adds.w	r4, r4, #4294967295
  403686:	d33b      	bcc.n	403700 <memset+0x90>
  403688:	f803 2b01 	strb.w	r2, [r3], #1
  40368c:	079d      	lsls	r5, r3, #30
  40368e:	d1f8      	bne.n	403682 <memset+0x12>
  403690:	2c03      	cmp	r4, #3
  403692:	d92e      	bls.n	4036f2 <memset+0x82>
  403694:	b2cd      	uxtb	r5, r1
  403696:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40369a:	2c0f      	cmp	r4, #15
  40369c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4036a0:	d919      	bls.n	4036d6 <memset+0x66>
  4036a2:	f103 0210 	add.w	r2, r3, #16
  4036a6:	4626      	mov	r6, r4
  4036a8:	3e10      	subs	r6, #16
  4036aa:	2e0f      	cmp	r6, #15
  4036ac:	f842 5c10 	str.w	r5, [r2, #-16]
  4036b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4036b4:	f842 5c08 	str.w	r5, [r2, #-8]
  4036b8:	f842 5c04 	str.w	r5, [r2, #-4]
  4036bc:	f102 0210 	add.w	r2, r2, #16
  4036c0:	d8f2      	bhi.n	4036a8 <memset+0x38>
  4036c2:	f1a4 0210 	sub.w	r2, r4, #16
  4036c6:	f022 020f 	bic.w	r2, r2, #15
  4036ca:	f004 040f 	and.w	r4, r4, #15
  4036ce:	3210      	adds	r2, #16
  4036d0:	2c03      	cmp	r4, #3
  4036d2:	4413      	add	r3, r2
  4036d4:	d90d      	bls.n	4036f2 <memset+0x82>
  4036d6:	461e      	mov	r6, r3
  4036d8:	4622      	mov	r2, r4
  4036da:	3a04      	subs	r2, #4
  4036dc:	2a03      	cmp	r2, #3
  4036de:	f846 5b04 	str.w	r5, [r6], #4
  4036e2:	d8fa      	bhi.n	4036da <memset+0x6a>
  4036e4:	1f22      	subs	r2, r4, #4
  4036e6:	f022 0203 	bic.w	r2, r2, #3
  4036ea:	3204      	adds	r2, #4
  4036ec:	4413      	add	r3, r2
  4036ee:	f004 0403 	and.w	r4, r4, #3
  4036f2:	b12c      	cbz	r4, 403700 <memset+0x90>
  4036f4:	b2c9      	uxtb	r1, r1
  4036f6:	441c      	add	r4, r3
  4036f8:	f803 1b01 	strb.w	r1, [r3], #1
  4036fc:	429c      	cmp	r4, r3
  4036fe:	d1fb      	bne.n	4036f8 <memset+0x88>
  403700:	bc70      	pop	{r4, r5, r6}
  403702:	4770      	bx	lr
  403704:	4614      	mov	r4, r2
  403706:	4603      	mov	r3, r0
  403708:	e7c2      	b.n	403690 <memset+0x20>
  40370a:	bf00      	nop

0040370c <sprintf>:
  40370c:	b40e      	push	{r1, r2, r3}
  40370e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403710:	b09c      	sub	sp, #112	; 0x70
  403712:	ab21      	add	r3, sp, #132	; 0x84
  403714:	490f      	ldr	r1, [pc, #60]	; (403754 <sprintf+0x48>)
  403716:	f853 2b04 	ldr.w	r2, [r3], #4
  40371a:	9301      	str	r3, [sp, #4]
  40371c:	4605      	mov	r5, r0
  40371e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403722:	6808      	ldr	r0, [r1, #0]
  403724:	9502      	str	r5, [sp, #8]
  403726:	f44f 7702 	mov.w	r7, #520	; 0x208
  40372a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40372e:	a902      	add	r1, sp, #8
  403730:	9506      	str	r5, [sp, #24]
  403732:	f8ad 7014 	strh.w	r7, [sp, #20]
  403736:	9404      	str	r4, [sp, #16]
  403738:	9407      	str	r4, [sp, #28]
  40373a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40373e:	f000 faf1 	bl	403d24 <_svfprintf_r>
  403742:	9b02      	ldr	r3, [sp, #8]
  403744:	2200      	movs	r2, #0
  403746:	701a      	strb	r2, [r3, #0]
  403748:	b01c      	add	sp, #112	; 0x70
  40374a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40374e:	b003      	add	sp, #12
  403750:	4770      	bx	lr
  403752:	bf00      	nop
  403754:	20000010 	.word	0x20000010
	...

00403780 <strlen>:
  403780:	f890 f000 	pld	[r0]
  403784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403788:	f020 0107 	bic.w	r1, r0, #7
  40378c:	f06f 0c00 	mvn.w	ip, #0
  403790:	f010 0407 	ands.w	r4, r0, #7
  403794:	f891 f020 	pld	[r1, #32]
  403798:	f040 8049 	bne.w	40382e <strlen+0xae>
  40379c:	f04f 0400 	mov.w	r4, #0
  4037a0:	f06f 0007 	mvn.w	r0, #7
  4037a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4037a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4037ac:	f100 0008 	add.w	r0, r0, #8
  4037b0:	fa82 f24c 	uadd8	r2, r2, ip
  4037b4:	faa4 f28c 	sel	r2, r4, ip
  4037b8:	fa83 f34c 	uadd8	r3, r3, ip
  4037bc:	faa2 f38c 	sel	r3, r2, ip
  4037c0:	bb4b      	cbnz	r3, 403816 <strlen+0x96>
  4037c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4037c6:	fa82 f24c 	uadd8	r2, r2, ip
  4037ca:	f100 0008 	add.w	r0, r0, #8
  4037ce:	faa4 f28c 	sel	r2, r4, ip
  4037d2:	fa83 f34c 	uadd8	r3, r3, ip
  4037d6:	faa2 f38c 	sel	r3, r2, ip
  4037da:	b9e3      	cbnz	r3, 403816 <strlen+0x96>
  4037dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4037e0:	fa82 f24c 	uadd8	r2, r2, ip
  4037e4:	f100 0008 	add.w	r0, r0, #8
  4037e8:	faa4 f28c 	sel	r2, r4, ip
  4037ec:	fa83 f34c 	uadd8	r3, r3, ip
  4037f0:	faa2 f38c 	sel	r3, r2, ip
  4037f4:	b97b      	cbnz	r3, 403816 <strlen+0x96>
  4037f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4037fa:	f101 0120 	add.w	r1, r1, #32
  4037fe:	fa82 f24c 	uadd8	r2, r2, ip
  403802:	f100 0008 	add.w	r0, r0, #8
  403806:	faa4 f28c 	sel	r2, r4, ip
  40380a:	fa83 f34c 	uadd8	r3, r3, ip
  40380e:	faa2 f38c 	sel	r3, r2, ip
  403812:	2b00      	cmp	r3, #0
  403814:	d0c6      	beq.n	4037a4 <strlen+0x24>
  403816:	2a00      	cmp	r2, #0
  403818:	bf04      	itt	eq
  40381a:	3004      	addeq	r0, #4
  40381c:	461a      	moveq	r2, r3
  40381e:	ba12      	rev	r2, r2
  403820:	fab2 f282 	clz	r2, r2
  403824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40382c:	4770      	bx	lr
  40382e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403832:	f004 0503 	and.w	r5, r4, #3
  403836:	f1c4 0000 	rsb	r0, r4, #0
  40383a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40383e:	f014 0f04 	tst.w	r4, #4
  403842:	f891 f040 	pld	[r1, #64]	; 0x40
  403846:	fa0c f505 	lsl.w	r5, ip, r5
  40384a:	ea62 0205 	orn	r2, r2, r5
  40384e:	bf1c      	itt	ne
  403850:	ea63 0305 	ornne	r3, r3, r5
  403854:	4662      	movne	r2, ip
  403856:	f04f 0400 	mov.w	r4, #0
  40385a:	e7a9      	b.n	4037b0 <strlen+0x30>

0040385c <critical_factorization>:
  40385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403860:	f04f 0e01 	mov.w	lr, #1
  403864:	4674      	mov	r4, lr
  403866:	2500      	movs	r5, #0
  403868:	f04f 36ff 	mov.w	r6, #4294967295
  40386c:	192b      	adds	r3, r5, r4
  40386e:	428b      	cmp	r3, r1
  403870:	eb00 0706 	add.w	r7, r0, r6
  403874:	d20d      	bcs.n	403892 <critical_factorization+0x36>
  403876:	5d3f      	ldrb	r7, [r7, r4]
  403878:	f810 c003 	ldrb.w	ip, [r0, r3]
  40387c:	45bc      	cmp	ip, r7
  40387e:	d22d      	bcs.n	4038dc <critical_factorization+0x80>
  403880:	461d      	mov	r5, r3
  403882:	2401      	movs	r4, #1
  403884:	eba3 0e06 	sub.w	lr, r3, r6
  403888:	192b      	adds	r3, r5, r4
  40388a:	428b      	cmp	r3, r1
  40388c:	eb00 0706 	add.w	r7, r0, r6
  403890:	d3f1      	bcc.n	403876 <critical_factorization+0x1a>
  403892:	f04f 0801 	mov.w	r8, #1
  403896:	f8c2 e000 	str.w	lr, [r2]
  40389a:	4644      	mov	r4, r8
  40389c:	2500      	movs	r5, #0
  40389e:	f04f 37ff 	mov.w	r7, #4294967295
  4038a2:	192b      	adds	r3, r5, r4
  4038a4:	4299      	cmp	r1, r3
  4038a6:	eb00 0e07 	add.w	lr, r0, r7
  4038aa:	d90e      	bls.n	4038ca <critical_factorization+0x6e>
  4038ac:	f81e e004 	ldrb.w	lr, [lr, r4]
  4038b0:	f810 c003 	ldrb.w	ip, [r0, r3]
  4038b4:	45f4      	cmp	ip, lr
  4038b6:	d918      	bls.n	4038ea <critical_factorization+0x8e>
  4038b8:	461d      	mov	r5, r3
  4038ba:	2401      	movs	r4, #1
  4038bc:	eba3 0807 	sub.w	r8, r3, r7
  4038c0:	192b      	adds	r3, r5, r4
  4038c2:	4299      	cmp	r1, r3
  4038c4:	eb00 0e07 	add.w	lr, r0, r7
  4038c8:	d8f0      	bhi.n	4038ac <critical_factorization+0x50>
  4038ca:	3701      	adds	r7, #1
  4038cc:	1c70      	adds	r0, r6, #1
  4038ce:	4287      	cmp	r7, r0
  4038d0:	bf24      	itt	cs
  4038d2:	f8c2 8000 	strcs.w	r8, [r2]
  4038d6:	4638      	movcs	r0, r7
  4038d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038dc:	d00c      	beq.n	4038f8 <critical_factorization+0x9c>
  4038de:	f04f 0e01 	mov.w	lr, #1
  4038e2:	462e      	mov	r6, r5
  4038e4:	4674      	mov	r4, lr
  4038e6:	4475      	add	r5, lr
  4038e8:	e7c0      	b.n	40386c <critical_factorization+0x10>
  4038ea:	d00b      	beq.n	403904 <critical_factorization+0xa8>
  4038ec:	f04f 0801 	mov.w	r8, #1
  4038f0:	462f      	mov	r7, r5
  4038f2:	4644      	mov	r4, r8
  4038f4:	4445      	add	r5, r8
  4038f6:	e7d4      	b.n	4038a2 <critical_factorization+0x46>
  4038f8:	4574      	cmp	r4, lr
  4038fa:	bf12      	itee	ne
  4038fc:	3401      	addne	r4, #1
  4038fe:	461d      	moveq	r5, r3
  403900:	2401      	moveq	r4, #1
  403902:	e7b3      	b.n	40386c <critical_factorization+0x10>
  403904:	4544      	cmp	r4, r8
  403906:	bf12      	itee	ne
  403908:	3401      	addne	r4, #1
  40390a:	461d      	moveq	r5, r3
  40390c:	2401      	moveq	r4, #1
  40390e:	e7c8      	b.n	4038a2 <critical_factorization+0x46>

00403910 <two_way_long_needle>:
  403910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403914:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403918:	4616      	mov	r6, r2
  40391a:	4605      	mov	r5, r0
  40391c:	468b      	mov	fp, r1
  40391e:	4610      	mov	r0, r2
  403920:	4619      	mov	r1, r3
  403922:	aa03      	add	r2, sp, #12
  403924:	461c      	mov	r4, r3
  403926:	f7ff ff99 	bl	40385c <critical_factorization>
  40392a:	ab03      	add	r3, sp, #12
  40392c:	4681      	mov	r9, r0
  40392e:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403932:	f843 4f04 	str.w	r4, [r3, #4]!
  403936:	4293      	cmp	r3, r2
  403938:	d1fb      	bne.n	403932 <two_way_long_needle+0x22>
  40393a:	b14c      	cbz	r4, 403950 <two_way_long_needle+0x40>
  40393c:	1e63      	subs	r3, r4, #1
  40393e:	1e72      	subs	r2, r6, #1
  403940:	a804      	add	r0, sp, #16
  403942:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403946:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40394a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40394e:	d2f8      	bcs.n	403942 <two_way_long_needle+0x32>
  403950:	9903      	ldr	r1, [sp, #12]
  403952:	464a      	mov	r2, r9
  403954:	4431      	add	r1, r6
  403956:	4630      	mov	r0, r6
  403958:	f003 f852 	bl	406a00 <memcmp>
  40395c:	2800      	cmp	r0, #0
  40395e:	d16f      	bne.n	403a40 <two_way_long_needle+0x130>
  403960:	f109 33ff 	add.w	r3, r9, #4294967295
  403964:	9300      	str	r3, [sp, #0]
  403966:	18f3      	adds	r3, r6, r3
  403968:	4682      	mov	sl, r0
  40396a:	9301      	str	r3, [sp, #4]
  40396c:	4623      	mov	r3, r4
  40396e:	4680      	mov	r8, r0
  403970:	4654      	mov	r4, sl
  403972:	4658      	mov	r0, fp
  403974:	469a      	mov	sl, r3
  403976:	eb08 070a 	add.w	r7, r8, sl
  40397a:	1a3a      	subs	r2, r7, r0
  40397c:	2100      	movs	r1, #0
  40397e:	4428      	add	r0, r5
  403980:	f002 ffee 	bl	406960 <memchr>
  403984:	2800      	cmp	r0, #0
  403986:	d156      	bne.n	403a36 <two_way_long_needle+0x126>
  403988:	2f00      	cmp	r7, #0
  40398a:	d054      	beq.n	403a36 <two_way_long_needle+0x126>
  40398c:	19eb      	adds	r3, r5, r7
  40398e:	aa04      	add	r2, sp, #16
  403990:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403998:	b14b      	cbz	r3, 4039ae <two_way_long_needle+0x9e>
  40399a:	b124      	cbz	r4, 4039a6 <two_way_long_needle+0x96>
  40399c:	9a03      	ldr	r2, [sp, #12]
  40399e:	4293      	cmp	r3, r2
  4039a0:	d201      	bcs.n	4039a6 <two_way_long_needle+0x96>
  4039a2:	ebaa 0302 	sub.w	r3, sl, r2
  4039a6:	4498      	add	r8, r3
  4039a8:	2400      	movs	r4, #0
  4039aa:	4638      	mov	r0, r7
  4039ac:	e7e3      	b.n	403976 <two_way_long_needle+0x66>
  4039ae:	454c      	cmp	r4, r9
  4039b0:	4623      	mov	r3, r4
  4039b2:	f10a 3eff 	add.w	lr, sl, #4294967295
  4039b6:	bf38      	it	cc
  4039b8:	464b      	movcc	r3, r9
  4039ba:	4573      	cmp	r3, lr
  4039bc:	d213      	bcs.n	4039e6 <two_way_long_needle+0xd6>
  4039be:	eb08 0203 	add.w	r2, r8, r3
  4039c2:	f816 c003 	ldrb.w	ip, [r6, r3]
  4039c6:	5ca8      	ldrb	r0, [r5, r2]
  4039c8:	4584      	cmp	ip, r0
  4039ca:	442a      	add	r2, r5
  4039cc:	eb06 0103 	add.w	r1, r6, r3
  4039d0:	d006      	beq.n	4039e0 <two_way_long_needle+0xd0>
  4039d2:	e02c      	b.n	403a2e <two_way_long_needle+0x11e>
  4039d4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  4039d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4039dc:	4584      	cmp	ip, r0
  4039de:	d126      	bne.n	403a2e <two_way_long_needle+0x11e>
  4039e0:	3301      	adds	r3, #1
  4039e2:	4573      	cmp	r3, lr
  4039e4:	d3f6      	bcc.n	4039d4 <two_way_long_needle+0xc4>
  4039e6:	454c      	cmp	r4, r9
  4039e8:	9900      	ldr	r1, [sp, #0]
  4039ea:	f080 8089 	bcs.w	403b00 <two_way_long_needle+0x1f0>
  4039ee:	9b00      	ldr	r3, [sp, #0]
  4039f0:	eb08 0203 	add.w	r2, r8, r3
  4039f4:	9b01      	ldr	r3, [sp, #4]
  4039f6:	5ca8      	ldrb	r0, [r5, r2]
  4039f8:	781b      	ldrb	r3, [r3, #0]
  4039fa:	4298      	cmp	r0, r3
  4039fc:	442a      	add	r2, r5
  4039fe:	d17f      	bne.n	403b00 <two_way_long_needle+0x1f0>
  403a00:	9801      	ldr	r0, [sp, #4]
  403a02:	f104 3bff 	add.w	fp, r4, #4294967295
  403a06:	e006      	b.n	403a16 <two_way_long_needle+0x106>
  403a08:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403a0c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403a10:	45f4      	cmp	ip, lr
  403a12:	d103      	bne.n	403a1c <two_way_long_needle+0x10c>
  403a14:	4619      	mov	r1, r3
  403a16:	1e4b      	subs	r3, r1, #1
  403a18:	459b      	cmp	fp, r3
  403a1a:	d1f5      	bne.n	403a08 <two_way_long_needle+0xf8>
  403a1c:	3401      	adds	r4, #1
  403a1e:	428c      	cmp	r4, r1
  403a20:	d870      	bhi.n	403b04 <two_way_long_needle+0x1f4>
  403a22:	9c03      	ldr	r4, [sp, #12]
  403a24:	4638      	mov	r0, r7
  403a26:	44a0      	add	r8, r4
  403a28:	ebaa 0404 	sub.w	r4, sl, r4
  403a2c:	e7a3      	b.n	403976 <two_way_long_needle+0x66>
  403a2e:	f1c9 0201 	rsb	r2, r9, #1
  403a32:	4490      	add	r8, r2
  403a34:	e7b7      	b.n	4039a6 <two_way_long_needle+0x96>
  403a36:	2000      	movs	r0, #0
  403a38:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a40:	eba4 0309 	sub.w	r3, r4, r9
  403a44:	454b      	cmp	r3, r9
  403a46:	bf38      	it	cc
  403a48:	464b      	movcc	r3, r9
  403a4a:	3301      	adds	r3, #1
  403a4c:	f109 38ff 	add.w	r8, r9, #4294967295
  403a50:	9303      	str	r3, [sp, #12]
  403a52:	eb06 0308 	add.w	r3, r6, r8
  403a56:	4658      	mov	r0, fp
  403a58:	f04f 0a00 	mov.w	sl, #0
  403a5c:	46cb      	mov	fp, r9
  403a5e:	4699      	mov	r9, r3
  403a60:	eb0a 0704 	add.w	r7, sl, r4
  403a64:	1a3a      	subs	r2, r7, r0
  403a66:	2100      	movs	r1, #0
  403a68:	4428      	add	r0, r5
  403a6a:	f002 ff79 	bl	406960 <memchr>
  403a6e:	2800      	cmp	r0, #0
  403a70:	d1e1      	bne.n	403a36 <two_way_long_needle+0x126>
  403a72:	2f00      	cmp	r7, #0
  403a74:	d0df      	beq.n	403a36 <two_way_long_needle+0x126>
  403a76:	19eb      	adds	r3, r5, r7
  403a78:	aa04      	add	r2, sp, #16
  403a7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a82:	bba3      	cbnz	r3, 403aee <two_way_long_needle+0x1de>
  403a84:	1e61      	subs	r1, r4, #1
  403a86:	458b      	cmp	fp, r1
  403a88:	d215      	bcs.n	403ab6 <two_way_long_needle+0x1a6>
  403a8a:	eb0a 020b 	add.w	r2, sl, fp
  403a8e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403a92:	f815 e002 	ldrb.w	lr, [r5, r2]
  403a96:	459e      	cmp	lr, r3
  403a98:	442a      	add	r2, r5
  403a9a:	eb06 000b 	add.w	r0, r6, fp
  403a9e:	465b      	mov	r3, fp
  403aa0:	d006      	beq.n	403ab0 <two_way_long_needle+0x1a0>
  403aa2:	e027      	b.n	403af4 <two_way_long_needle+0x1e4>
  403aa4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403aa8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  403aac:	45f4      	cmp	ip, lr
  403aae:	d121      	bne.n	403af4 <two_way_long_needle+0x1e4>
  403ab0:	3301      	adds	r3, #1
  403ab2:	428b      	cmp	r3, r1
  403ab4:	d3f6      	bcc.n	403aa4 <two_way_long_needle+0x194>
  403ab6:	f1b8 3fff 	cmp.w	r8, #4294967295
  403aba:	d011      	beq.n	403ae0 <two_way_long_needle+0x1d0>
  403abc:	eb0a 0208 	add.w	r2, sl, r8
  403ac0:	f899 1000 	ldrb.w	r1, [r9]
  403ac4:	5cab      	ldrb	r3, [r5, r2]
  403ac6:	4299      	cmp	r1, r3
  403ac8:	442a      	add	r2, r5
  403aca:	d10f      	bne.n	403aec <two_way_long_needle+0x1dc>
  403acc:	464b      	mov	r3, r9
  403ace:	e005      	b.n	403adc <two_way_long_needle+0x1cc>
  403ad0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403ad4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403ad8:	4288      	cmp	r0, r1
  403ada:	d107      	bne.n	403aec <two_way_long_needle+0x1dc>
  403adc:	42b3      	cmp	r3, r6
  403ade:	d1f7      	bne.n	403ad0 <two_way_long_needle+0x1c0>
  403ae0:	eb05 000a 	add.w	r0, r5, sl
  403ae4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  403ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aec:	9b03      	ldr	r3, [sp, #12]
  403aee:	449a      	add	sl, r3
  403af0:	4638      	mov	r0, r7
  403af2:	e7b5      	b.n	403a60 <two_way_long_needle+0x150>
  403af4:	f1cb 0201 	rsb	r2, fp, #1
  403af8:	4492      	add	sl, r2
  403afa:	449a      	add	sl, r3
  403afc:	4638      	mov	r0, r7
  403afe:	e7af      	b.n	403a60 <two_way_long_needle+0x150>
  403b00:	4649      	mov	r1, r9
  403b02:	e78b      	b.n	403a1c <two_way_long_needle+0x10c>
  403b04:	eb05 0008 	add.w	r0, r5, r8
  403b08:	e796      	b.n	403a38 <two_way_long_needle+0x128>
  403b0a:	bf00      	nop

00403b0c <strstr>:
  403b0c:	7802      	ldrb	r2, [r0, #0]
  403b0e:	2a00      	cmp	r2, #0
  403b10:	f000 8101 	beq.w	403d16 <strstr+0x20a>
  403b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b18:	f891 8000 	ldrb.w	r8, [r1]
  403b1c:	b085      	sub	sp, #20
  403b1e:	4644      	mov	r4, r8
  403b20:	f1b8 0f00 	cmp.w	r8, #0
  403b24:	d016      	beq.n	403b54 <strstr+0x48>
  403b26:	4686      	mov	lr, r0
  403b28:	f101 0c01 	add.w	ip, r1, #1
  403b2c:	2701      	movs	r7, #1
  403b2e:	e003      	b.n	403b38 <strstr+0x2c>
  403b30:	f813 4b01 	ldrb.w	r4, [r3], #1
  403b34:	b16c      	cbz	r4, 403b52 <strstr+0x46>
  403b36:	469c      	mov	ip, r3
  403b38:	42a2      	cmp	r2, r4
  403b3a:	bf14      	ite	ne
  403b3c:	2700      	movne	r7, #0
  403b3e:	f007 0701 	andeq.w	r7, r7, #1
  403b42:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403b46:	4663      	mov	r3, ip
  403b48:	2a00      	cmp	r2, #0
  403b4a:	d1f1      	bne.n	403b30 <strstr+0x24>
  403b4c:	f89c 3000 	ldrb.w	r3, [ip]
  403b50:	b9fb      	cbnz	r3, 403b92 <strstr+0x86>
  403b52:	b117      	cbz	r7, 403b5a <strstr+0x4e>
  403b54:	b005      	add	sp, #20
  403b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b5a:	460e      	mov	r6, r1
  403b5c:	4605      	mov	r5, r0
  403b5e:	4641      	mov	r1, r8
  403b60:	3001      	adds	r0, #1
  403b62:	ebac 0406 	sub.w	r4, ip, r6
  403b66:	f003 fd2f 	bl	4075c8 <strchr>
  403b6a:	4607      	mov	r7, r0
  403b6c:	b188      	cbz	r0, 403b92 <strstr+0x86>
  403b6e:	2c01      	cmp	r4, #1
  403b70:	d0f0      	beq.n	403b54 <strstr+0x48>
  403b72:	1928      	adds	r0, r5, r4
  403b74:	4287      	cmp	r7, r0
  403b76:	bf94      	ite	ls
  403b78:	1bc1      	subls	r1, r0, r7
  403b7a:	2101      	movhi	r1, #1
  403b7c:	2c1f      	cmp	r4, #31
  403b7e:	468b      	mov	fp, r1
  403b80:	d90b      	bls.n	403b9a <strstr+0x8e>
  403b82:	4623      	mov	r3, r4
  403b84:	4632      	mov	r2, r6
  403b86:	4638      	mov	r0, r7
  403b88:	f7ff fec2 	bl	403910 <two_way_long_needle>
  403b8c:	b005      	add	sp, #20
  403b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b92:	2000      	movs	r0, #0
  403b94:	b005      	add	sp, #20
  403b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b9a:	aa03      	add	r2, sp, #12
  403b9c:	4621      	mov	r1, r4
  403b9e:	4630      	mov	r0, r6
  403ba0:	f7ff fe5c 	bl	40385c <critical_factorization>
  403ba4:	9903      	ldr	r1, [sp, #12]
  403ba6:	4680      	mov	r8, r0
  403ba8:	4602      	mov	r2, r0
  403baa:	4431      	add	r1, r6
  403bac:	4630      	mov	r0, r6
  403bae:	f002 ff27 	bl	406a00 <memcmp>
  403bb2:	2800      	cmp	r0, #0
  403bb4:	d157      	bne.n	403c66 <strstr+0x15a>
  403bb6:	f108 33ff 	add.w	r3, r8, #4294967295
  403bba:	9300      	str	r3, [sp, #0]
  403bbc:	18f3      	adds	r3, r6, r3
  403bbe:	4681      	mov	r9, r0
  403bc0:	4605      	mov	r5, r0
  403bc2:	9301      	str	r3, [sp, #4]
  403bc4:	4658      	mov	r0, fp
  403bc6:	46b2      	mov	sl, r6
  403bc8:	1966      	adds	r6, r4, r5
  403bca:	1a32      	subs	r2, r6, r0
  403bcc:	2100      	movs	r1, #0
  403bce:	4438      	add	r0, r7
  403bd0:	f002 fec6 	bl	406960 <memchr>
  403bd4:	2800      	cmp	r0, #0
  403bd6:	d1dc      	bne.n	403b92 <strstr+0x86>
  403bd8:	2e00      	cmp	r6, #0
  403bda:	d0da      	beq.n	403b92 <strstr+0x86>
  403bdc:	45c8      	cmp	r8, r9
  403bde:	4643      	mov	r3, r8
  403be0:	bf38      	it	cc
  403be2:	464b      	movcc	r3, r9
  403be4:	429c      	cmp	r4, r3
  403be6:	d912      	bls.n	403c0e <strstr+0x102>
  403be8:	195a      	adds	r2, r3, r5
  403bea:	f81a 1003 	ldrb.w	r1, [sl, r3]
  403bee:	5cb8      	ldrb	r0, [r7, r2]
  403bf0:	4281      	cmp	r1, r0
  403bf2:	443a      	add	r2, r7
  403bf4:	eb0a 0e03 	add.w	lr, sl, r3
  403bf8:	d006      	beq.n	403c08 <strstr+0xfc>
  403bfa:	e02c      	b.n	403c56 <strstr+0x14a>
  403bfc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  403c00:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403c04:	4288      	cmp	r0, r1
  403c06:	d126      	bne.n	403c56 <strstr+0x14a>
  403c08:	3301      	adds	r3, #1
  403c0a:	429c      	cmp	r4, r3
  403c0c:	d1f6      	bne.n	403bfc <strstr+0xf0>
  403c0e:	45c8      	cmp	r8, r9
  403c10:	9900      	ldr	r1, [sp, #0]
  403c12:	f240 8083 	bls.w	403d1c <strstr+0x210>
  403c16:	9b00      	ldr	r3, [sp, #0]
  403c18:	18ea      	adds	r2, r5, r3
  403c1a:	9b01      	ldr	r3, [sp, #4]
  403c1c:	5cb8      	ldrb	r0, [r7, r2]
  403c1e:	781b      	ldrb	r3, [r3, #0]
  403c20:	4298      	cmp	r0, r3
  403c22:	443a      	add	r2, r7
  403c24:	d17a      	bne.n	403d1c <strstr+0x210>
  403c26:	9801      	ldr	r0, [sp, #4]
  403c28:	f109 3bff 	add.w	fp, r9, #4294967295
  403c2c:	e006      	b.n	403c3c <strstr+0x130>
  403c2e:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  403c32:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  403c36:	45f4      	cmp	ip, lr
  403c38:	d103      	bne.n	403c42 <strstr+0x136>
  403c3a:	4619      	mov	r1, r3
  403c3c:	1e4b      	subs	r3, r1, #1
  403c3e:	455b      	cmp	r3, fp
  403c40:	d1f5      	bne.n	403c2e <strstr+0x122>
  403c42:	f109 0901 	add.w	r9, r9, #1
  403c46:	4589      	cmp	r9, r1
  403c48:	d857      	bhi.n	403cfa <strstr+0x1ee>
  403c4a:	9b03      	ldr	r3, [sp, #12]
  403c4c:	4630      	mov	r0, r6
  403c4e:	441d      	add	r5, r3
  403c50:	eba4 0903 	sub.w	r9, r4, r3
  403c54:	e7b8      	b.n	403bc8 <strstr+0xbc>
  403c56:	f1c8 0201 	rsb	r2, r8, #1
  403c5a:	4415      	add	r5, r2
  403c5c:	441d      	add	r5, r3
  403c5e:	f04f 0900 	mov.w	r9, #0
  403c62:	4630      	mov	r0, r6
  403c64:	e7b0      	b.n	403bc8 <strstr+0xbc>
  403c66:	eba4 0308 	sub.w	r3, r4, r8
  403c6a:	4543      	cmp	r3, r8
  403c6c:	bf38      	it	cc
  403c6e:	4643      	movcc	r3, r8
  403c70:	3301      	adds	r3, #1
  403c72:	f108 39ff 	add.w	r9, r8, #4294967295
  403c76:	9303      	str	r3, [sp, #12]
  403c78:	eb06 0309 	add.w	r3, r6, r9
  403c7c:	4658      	mov	r0, fp
  403c7e:	2500      	movs	r5, #0
  403c80:	46bb      	mov	fp, r7
  403c82:	469a      	mov	sl, r3
  403c84:	1967      	adds	r7, r4, r5
  403c86:	1a3a      	subs	r2, r7, r0
  403c88:	2100      	movs	r1, #0
  403c8a:	4458      	add	r0, fp
  403c8c:	f002 fe68 	bl	406960 <memchr>
  403c90:	2800      	cmp	r0, #0
  403c92:	f47f af7e 	bne.w	403b92 <strstr+0x86>
  403c96:	2f00      	cmp	r7, #0
  403c98:	f43f af7b 	beq.w	403b92 <strstr+0x86>
  403c9c:	4544      	cmp	r4, r8
  403c9e:	d915      	bls.n	403ccc <strstr+0x1c0>
  403ca0:	eb08 0205 	add.w	r2, r8, r5
  403ca4:	f816 3008 	ldrb.w	r3, [r6, r8]
  403ca8:	f81b 0002 	ldrb.w	r0, [fp, r2]
  403cac:	4298      	cmp	r0, r3
  403cae:	445a      	add	r2, fp
  403cb0:	eb06 0108 	add.w	r1, r6, r8
  403cb4:	4643      	mov	r3, r8
  403cb6:	d006      	beq.n	403cc6 <strstr+0x1ba>
  403cb8:	e023      	b.n	403d02 <strstr+0x1f6>
  403cba:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  403cbe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403cc2:	4586      	cmp	lr, r0
  403cc4:	d11d      	bne.n	403d02 <strstr+0x1f6>
  403cc6:	3301      	adds	r3, #1
  403cc8:	429c      	cmp	r4, r3
  403cca:	d1f6      	bne.n	403cba <strstr+0x1ae>
  403ccc:	f1b9 3fff 	cmp.w	r9, #4294967295
  403cd0:	d012      	beq.n	403cf8 <strstr+0x1ec>
  403cd2:	eb05 0209 	add.w	r2, r5, r9
  403cd6:	f89a 3000 	ldrb.w	r3, [sl]
  403cda:	f81b 1002 	ldrb.w	r1, [fp, r2]
  403cde:	4299      	cmp	r1, r3
  403ce0:	445a      	add	r2, fp
  403ce2:	d114      	bne.n	403d0e <strstr+0x202>
  403ce4:	4653      	mov	r3, sl
  403ce6:	e005      	b.n	403cf4 <strstr+0x1e8>
  403ce8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403cec:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403cf0:	4288      	cmp	r0, r1
  403cf2:	d10c      	bne.n	403d0e <strstr+0x202>
  403cf4:	42b3      	cmp	r3, r6
  403cf6:	d1f7      	bne.n	403ce8 <strstr+0x1dc>
  403cf8:	465f      	mov	r7, fp
  403cfa:	1978      	adds	r0, r7, r5
  403cfc:	b005      	add	sp, #20
  403cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d02:	f1c8 0201 	rsb	r2, r8, #1
  403d06:	4415      	add	r5, r2
  403d08:	441d      	add	r5, r3
  403d0a:	4638      	mov	r0, r7
  403d0c:	e7ba      	b.n	403c84 <strstr+0x178>
  403d0e:	9b03      	ldr	r3, [sp, #12]
  403d10:	4638      	mov	r0, r7
  403d12:	441d      	add	r5, r3
  403d14:	e7b6      	b.n	403c84 <strstr+0x178>
  403d16:	780b      	ldrb	r3, [r1, #0]
  403d18:	b913      	cbnz	r3, 403d20 <strstr+0x214>
  403d1a:	4770      	bx	lr
  403d1c:	4641      	mov	r1, r8
  403d1e:	e790      	b.n	403c42 <strstr+0x136>
  403d20:	2000      	movs	r0, #0
  403d22:	4770      	bx	lr

00403d24 <_svfprintf_r>:
  403d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d28:	b0c3      	sub	sp, #268	; 0x10c
  403d2a:	460c      	mov	r4, r1
  403d2c:	910b      	str	r1, [sp, #44]	; 0x2c
  403d2e:	4692      	mov	sl, r2
  403d30:	930f      	str	r3, [sp, #60]	; 0x3c
  403d32:	900c      	str	r0, [sp, #48]	; 0x30
  403d34:	f002 fb3a 	bl	4063ac <_localeconv_r>
  403d38:	6803      	ldr	r3, [r0, #0]
  403d3a:	931a      	str	r3, [sp, #104]	; 0x68
  403d3c:	4618      	mov	r0, r3
  403d3e:	f7ff fd1f 	bl	403780 <strlen>
  403d42:	89a3      	ldrh	r3, [r4, #12]
  403d44:	9019      	str	r0, [sp, #100]	; 0x64
  403d46:	0619      	lsls	r1, r3, #24
  403d48:	d503      	bpl.n	403d52 <_svfprintf_r+0x2e>
  403d4a:	6923      	ldr	r3, [r4, #16]
  403d4c:	2b00      	cmp	r3, #0
  403d4e:	f001 8001 	beq.w	404d54 <_svfprintf_r+0x1030>
  403d52:	2300      	movs	r3, #0
  403d54:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403d58:	9313      	str	r3, [sp, #76]	; 0x4c
  403d5a:	9314      	str	r3, [sp, #80]	; 0x50
  403d5c:	9315      	str	r3, [sp, #84]	; 0x54
  403d5e:	9327      	str	r3, [sp, #156]	; 0x9c
  403d60:	9326      	str	r3, [sp, #152]	; 0x98
  403d62:	9318      	str	r3, [sp, #96]	; 0x60
  403d64:	931b      	str	r3, [sp, #108]	; 0x6c
  403d66:	9309      	str	r3, [sp, #36]	; 0x24
  403d68:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403d6c:	46c8      	mov	r8, r9
  403d6e:	9316      	str	r3, [sp, #88]	; 0x58
  403d70:	9317      	str	r3, [sp, #92]	; 0x5c
  403d72:	f89a 3000 	ldrb.w	r3, [sl]
  403d76:	4654      	mov	r4, sl
  403d78:	b1e3      	cbz	r3, 403db4 <_svfprintf_r+0x90>
  403d7a:	2b25      	cmp	r3, #37	; 0x25
  403d7c:	d102      	bne.n	403d84 <_svfprintf_r+0x60>
  403d7e:	e019      	b.n	403db4 <_svfprintf_r+0x90>
  403d80:	2b25      	cmp	r3, #37	; 0x25
  403d82:	d003      	beq.n	403d8c <_svfprintf_r+0x68>
  403d84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403d88:	2b00      	cmp	r3, #0
  403d8a:	d1f9      	bne.n	403d80 <_svfprintf_r+0x5c>
  403d8c:	eba4 050a 	sub.w	r5, r4, sl
  403d90:	b185      	cbz	r5, 403db4 <_svfprintf_r+0x90>
  403d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d94:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403d96:	f8c8 a000 	str.w	sl, [r8]
  403d9a:	3301      	adds	r3, #1
  403d9c:	442a      	add	r2, r5
  403d9e:	2b07      	cmp	r3, #7
  403da0:	f8c8 5004 	str.w	r5, [r8, #4]
  403da4:	9227      	str	r2, [sp, #156]	; 0x9c
  403da6:	9326      	str	r3, [sp, #152]	; 0x98
  403da8:	dc7f      	bgt.n	403eaa <_svfprintf_r+0x186>
  403daa:	f108 0808 	add.w	r8, r8, #8
  403dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403db0:	442b      	add	r3, r5
  403db2:	9309      	str	r3, [sp, #36]	; 0x24
  403db4:	7823      	ldrb	r3, [r4, #0]
  403db6:	2b00      	cmp	r3, #0
  403db8:	d07f      	beq.n	403eba <_svfprintf_r+0x196>
  403dba:	2300      	movs	r3, #0
  403dbc:	461a      	mov	r2, r3
  403dbe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403dc2:	4619      	mov	r1, r3
  403dc4:	930d      	str	r3, [sp, #52]	; 0x34
  403dc6:	469b      	mov	fp, r3
  403dc8:	f04f 30ff 	mov.w	r0, #4294967295
  403dcc:	7863      	ldrb	r3, [r4, #1]
  403dce:	900a      	str	r0, [sp, #40]	; 0x28
  403dd0:	f104 0a01 	add.w	sl, r4, #1
  403dd4:	f10a 0a01 	add.w	sl, sl, #1
  403dd8:	f1a3 0020 	sub.w	r0, r3, #32
  403ddc:	2858      	cmp	r0, #88	; 0x58
  403dde:	f200 83c0 	bhi.w	404562 <_svfprintf_r+0x83e>
  403de2:	e8df f010 	tbh	[pc, r0, lsl #1]
  403de6:	0238      	.short	0x0238
  403de8:	03be03be 	.word	0x03be03be
  403dec:	03be0240 	.word	0x03be0240
  403df0:	03be03be 	.word	0x03be03be
  403df4:	03be03be 	.word	0x03be03be
  403df8:	024503be 	.word	0x024503be
  403dfc:	03be0203 	.word	0x03be0203
  403e00:	026b005d 	.word	0x026b005d
  403e04:	028603be 	.word	0x028603be
  403e08:	039c039c 	.word	0x039c039c
  403e0c:	039c039c 	.word	0x039c039c
  403e10:	039c039c 	.word	0x039c039c
  403e14:	039c039c 	.word	0x039c039c
  403e18:	03be039c 	.word	0x03be039c
  403e1c:	03be03be 	.word	0x03be03be
  403e20:	03be03be 	.word	0x03be03be
  403e24:	03be03be 	.word	0x03be03be
  403e28:	03be03be 	.word	0x03be03be
  403e2c:	033703be 	.word	0x033703be
  403e30:	03be0357 	.word	0x03be0357
  403e34:	03be0357 	.word	0x03be0357
  403e38:	03be03be 	.word	0x03be03be
  403e3c:	039703be 	.word	0x039703be
  403e40:	03be03be 	.word	0x03be03be
  403e44:	03be03ac 	.word	0x03be03ac
  403e48:	03be03be 	.word	0x03be03be
  403e4c:	03be03be 	.word	0x03be03be
  403e50:	03be0259 	.word	0x03be0259
  403e54:	031e03be 	.word	0x031e03be
  403e58:	03be03be 	.word	0x03be03be
  403e5c:	03be03be 	.word	0x03be03be
  403e60:	03be03be 	.word	0x03be03be
  403e64:	03be03be 	.word	0x03be03be
  403e68:	03be03be 	.word	0x03be03be
  403e6c:	02db02c6 	.word	0x02db02c6
  403e70:	03570357 	.word	0x03570357
  403e74:	028b0357 	.word	0x028b0357
  403e78:	03be02db 	.word	0x03be02db
  403e7c:	029003be 	.word	0x029003be
  403e80:	029d03be 	.word	0x029d03be
  403e84:	02b401cc 	.word	0x02b401cc
  403e88:	03be0208 	.word	0x03be0208
  403e8c:	03be01e1 	.word	0x03be01e1
  403e90:	03be007e 	.word	0x03be007e
  403e94:	020d03be 	.word	0x020d03be
  403e98:	980d      	ldr	r0, [sp, #52]	; 0x34
  403e9a:	930f      	str	r3, [sp, #60]	; 0x3c
  403e9c:	4240      	negs	r0, r0
  403e9e:	900d      	str	r0, [sp, #52]	; 0x34
  403ea0:	f04b 0b04 	orr.w	fp, fp, #4
  403ea4:	f89a 3000 	ldrb.w	r3, [sl]
  403ea8:	e794      	b.n	403dd4 <_svfprintf_r+0xb0>
  403eaa:	aa25      	add	r2, sp, #148	; 0x94
  403eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403eae:	980c      	ldr	r0, [sp, #48]	; 0x30
  403eb0:	f003 fbfe 	bl	4076b0 <__ssprint_r>
  403eb4:	b940      	cbnz	r0, 403ec8 <_svfprintf_r+0x1a4>
  403eb6:	46c8      	mov	r8, r9
  403eb8:	e779      	b.n	403dae <_svfprintf_r+0x8a>
  403eba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ebc:	b123      	cbz	r3, 403ec8 <_svfprintf_r+0x1a4>
  403ebe:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ec2:	aa25      	add	r2, sp, #148	; 0x94
  403ec4:	f003 fbf4 	bl	4076b0 <__ssprint_r>
  403ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403eca:	899b      	ldrh	r3, [r3, #12]
  403ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
  403ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ed2:	bf18      	it	ne
  403ed4:	f04f 33ff 	movne.w	r3, #4294967295
  403ed8:	9309      	str	r3, [sp, #36]	; 0x24
  403eda:	9809      	ldr	r0, [sp, #36]	; 0x24
  403edc:	b043      	add	sp, #268	; 0x10c
  403ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ee2:	f01b 0f20 	tst.w	fp, #32
  403ee6:	9311      	str	r3, [sp, #68]	; 0x44
  403ee8:	f040 81dd 	bne.w	4042a6 <_svfprintf_r+0x582>
  403eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403eee:	f01b 0f10 	tst.w	fp, #16
  403ef2:	4613      	mov	r3, r2
  403ef4:	f040 856c 	bne.w	4049d0 <_svfprintf_r+0xcac>
  403ef8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403efc:	f000 8568 	beq.w	4049d0 <_svfprintf_r+0xcac>
  403f00:	8814      	ldrh	r4, [r2, #0]
  403f02:	3204      	adds	r2, #4
  403f04:	2500      	movs	r5, #0
  403f06:	2301      	movs	r3, #1
  403f08:	920f      	str	r2, [sp, #60]	; 0x3c
  403f0a:	2700      	movs	r7, #0
  403f0c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403f10:	990a      	ldr	r1, [sp, #40]	; 0x28
  403f12:	1c4a      	adds	r2, r1, #1
  403f14:	f000 8265 	beq.w	4043e2 <_svfprintf_r+0x6be>
  403f18:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403f1c:	9207      	str	r2, [sp, #28]
  403f1e:	ea54 0205 	orrs.w	r2, r4, r5
  403f22:	f040 8264 	bne.w	4043ee <_svfprintf_r+0x6ca>
  403f26:	2900      	cmp	r1, #0
  403f28:	f040 8439 	bne.w	40479e <_svfprintf_r+0xa7a>
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	f040 84d4 	bne.w	4048da <_svfprintf_r+0xbb6>
  403f32:	f01b 0301 	ands.w	r3, fp, #1
  403f36:	930e      	str	r3, [sp, #56]	; 0x38
  403f38:	f000 8602 	beq.w	404b40 <_svfprintf_r+0xe1c>
  403f3c:	ae42      	add	r6, sp, #264	; 0x108
  403f3e:	2330      	movs	r3, #48	; 0x30
  403f40:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403f48:	4293      	cmp	r3, r2
  403f4a:	bfb8      	it	lt
  403f4c:	4613      	movlt	r3, r2
  403f4e:	9308      	str	r3, [sp, #32]
  403f50:	2300      	movs	r3, #0
  403f52:	9312      	str	r3, [sp, #72]	; 0x48
  403f54:	b117      	cbz	r7, 403f5c <_svfprintf_r+0x238>
  403f56:	9b08      	ldr	r3, [sp, #32]
  403f58:	3301      	adds	r3, #1
  403f5a:	9308      	str	r3, [sp, #32]
  403f5c:	9b07      	ldr	r3, [sp, #28]
  403f5e:	f013 0302 	ands.w	r3, r3, #2
  403f62:	9310      	str	r3, [sp, #64]	; 0x40
  403f64:	d002      	beq.n	403f6c <_svfprintf_r+0x248>
  403f66:	9b08      	ldr	r3, [sp, #32]
  403f68:	3302      	adds	r3, #2
  403f6a:	9308      	str	r3, [sp, #32]
  403f6c:	9b07      	ldr	r3, [sp, #28]
  403f6e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403f72:	f040 830d 	bne.w	404590 <_svfprintf_r+0x86c>
  403f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f78:	9a08      	ldr	r2, [sp, #32]
  403f7a:	eba3 0b02 	sub.w	fp, r3, r2
  403f7e:	f1bb 0f00 	cmp.w	fp, #0
  403f82:	f340 8305 	ble.w	404590 <_svfprintf_r+0x86c>
  403f86:	f1bb 0f10 	cmp.w	fp, #16
  403f8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403f8e:	dd29      	ble.n	403fe4 <_svfprintf_r+0x2c0>
  403f90:	4643      	mov	r3, r8
  403f92:	4621      	mov	r1, r4
  403f94:	46a8      	mov	r8, r5
  403f96:	2710      	movs	r7, #16
  403f98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f9c:	e006      	b.n	403fac <_svfprintf_r+0x288>
  403f9e:	f1ab 0b10 	sub.w	fp, fp, #16
  403fa2:	f1bb 0f10 	cmp.w	fp, #16
  403fa6:	f103 0308 	add.w	r3, r3, #8
  403faa:	dd18      	ble.n	403fde <_svfprintf_r+0x2ba>
  403fac:	3201      	adds	r2, #1
  403fae:	48b7      	ldr	r0, [pc, #732]	; (40428c <_svfprintf_r+0x568>)
  403fb0:	9226      	str	r2, [sp, #152]	; 0x98
  403fb2:	3110      	adds	r1, #16
  403fb4:	2a07      	cmp	r2, #7
  403fb6:	9127      	str	r1, [sp, #156]	; 0x9c
  403fb8:	e883 0081 	stmia.w	r3, {r0, r7}
  403fbc:	ddef      	ble.n	403f9e <_svfprintf_r+0x27a>
  403fbe:	aa25      	add	r2, sp, #148	; 0x94
  403fc0:	4629      	mov	r1, r5
  403fc2:	4620      	mov	r0, r4
  403fc4:	f003 fb74 	bl	4076b0 <__ssprint_r>
  403fc8:	2800      	cmp	r0, #0
  403fca:	f47f af7d 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  403fce:	f1ab 0b10 	sub.w	fp, fp, #16
  403fd2:	f1bb 0f10 	cmp.w	fp, #16
  403fd6:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403fd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403fda:	464b      	mov	r3, r9
  403fdc:	dce6      	bgt.n	403fac <_svfprintf_r+0x288>
  403fde:	4645      	mov	r5, r8
  403fe0:	460c      	mov	r4, r1
  403fe2:	4698      	mov	r8, r3
  403fe4:	3201      	adds	r2, #1
  403fe6:	4ba9      	ldr	r3, [pc, #676]	; (40428c <_svfprintf_r+0x568>)
  403fe8:	9226      	str	r2, [sp, #152]	; 0x98
  403fea:	445c      	add	r4, fp
  403fec:	2a07      	cmp	r2, #7
  403fee:	9427      	str	r4, [sp, #156]	; 0x9c
  403ff0:	e888 0808 	stmia.w	r8, {r3, fp}
  403ff4:	f300 8495 	bgt.w	404922 <_svfprintf_r+0xbfe>
  403ff8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403ffc:	f108 0808 	add.w	r8, r8, #8
  404000:	b177      	cbz	r7, 404020 <_svfprintf_r+0x2fc>
  404002:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404004:	3301      	adds	r3, #1
  404006:	3401      	adds	r4, #1
  404008:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40400c:	2201      	movs	r2, #1
  40400e:	2b07      	cmp	r3, #7
  404010:	9427      	str	r4, [sp, #156]	; 0x9c
  404012:	9326      	str	r3, [sp, #152]	; 0x98
  404014:	e888 0006 	stmia.w	r8, {r1, r2}
  404018:	f300 83d8 	bgt.w	4047cc <_svfprintf_r+0xaa8>
  40401c:	f108 0808 	add.w	r8, r8, #8
  404020:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404022:	b16b      	cbz	r3, 404040 <_svfprintf_r+0x31c>
  404024:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404026:	3301      	adds	r3, #1
  404028:	3402      	adds	r4, #2
  40402a:	a91e      	add	r1, sp, #120	; 0x78
  40402c:	2202      	movs	r2, #2
  40402e:	2b07      	cmp	r3, #7
  404030:	9427      	str	r4, [sp, #156]	; 0x9c
  404032:	9326      	str	r3, [sp, #152]	; 0x98
  404034:	e888 0006 	stmia.w	r8, {r1, r2}
  404038:	f300 83d3 	bgt.w	4047e2 <_svfprintf_r+0xabe>
  40403c:	f108 0808 	add.w	r8, r8, #8
  404040:	2d80      	cmp	r5, #128	; 0x80
  404042:	f000 8313 	beq.w	40466c <_svfprintf_r+0x948>
  404046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404048:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40404a:	1a9f      	subs	r7, r3, r2
  40404c:	2f00      	cmp	r7, #0
  40404e:	dd36      	ble.n	4040be <_svfprintf_r+0x39a>
  404050:	2f10      	cmp	r7, #16
  404052:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404054:	4d8e      	ldr	r5, [pc, #568]	; (404290 <_svfprintf_r+0x56c>)
  404056:	dd27      	ble.n	4040a8 <_svfprintf_r+0x384>
  404058:	4642      	mov	r2, r8
  40405a:	4621      	mov	r1, r4
  40405c:	46b0      	mov	r8, r6
  40405e:	f04f 0b10 	mov.w	fp, #16
  404062:	462e      	mov	r6, r5
  404064:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404066:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404068:	e004      	b.n	404074 <_svfprintf_r+0x350>
  40406a:	3f10      	subs	r7, #16
  40406c:	2f10      	cmp	r7, #16
  40406e:	f102 0208 	add.w	r2, r2, #8
  404072:	dd15      	ble.n	4040a0 <_svfprintf_r+0x37c>
  404074:	3301      	adds	r3, #1
  404076:	3110      	adds	r1, #16
  404078:	2b07      	cmp	r3, #7
  40407a:	9127      	str	r1, [sp, #156]	; 0x9c
  40407c:	9326      	str	r3, [sp, #152]	; 0x98
  40407e:	e882 0840 	stmia.w	r2, {r6, fp}
  404082:	ddf2      	ble.n	40406a <_svfprintf_r+0x346>
  404084:	aa25      	add	r2, sp, #148	; 0x94
  404086:	4629      	mov	r1, r5
  404088:	4620      	mov	r0, r4
  40408a:	f003 fb11 	bl	4076b0 <__ssprint_r>
  40408e:	2800      	cmp	r0, #0
  404090:	f47f af1a 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404094:	3f10      	subs	r7, #16
  404096:	2f10      	cmp	r7, #16
  404098:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40409a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40409c:	464a      	mov	r2, r9
  40409e:	dce9      	bgt.n	404074 <_svfprintf_r+0x350>
  4040a0:	4635      	mov	r5, r6
  4040a2:	460c      	mov	r4, r1
  4040a4:	4646      	mov	r6, r8
  4040a6:	4690      	mov	r8, r2
  4040a8:	3301      	adds	r3, #1
  4040aa:	443c      	add	r4, r7
  4040ac:	2b07      	cmp	r3, #7
  4040ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4040b0:	9326      	str	r3, [sp, #152]	; 0x98
  4040b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4040b6:	f300 837e 	bgt.w	4047b6 <_svfprintf_r+0xa92>
  4040ba:	f108 0808 	add.w	r8, r8, #8
  4040be:	9b07      	ldr	r3, [sp, #28]
  4040c0:	05df      	lsls	r7, r3, #23
  4040c2:	f100 8267 	bmi.w	404594 <_svfprintf_r+0x870>
  4040c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040c8:	990e      	ldr	r1, [sp, #56]	; 0x38
  4040ca:	f8c8 6000 	str.w	r6, [r8]
  4040ce:	3301      	adds	r3, #1
  4040d0:	440c      	add	r4, r1
  4040d2:	2b07      	cmp	r3, #7
  4040d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4040d6:	f8c8 1004 	str.w	r1, [r8, #4]
  4040da:	9326      	str	r3, [sp, #152]	; 0x98
  4040dc:	f300 834a 	bgt.w	404774 <_svfprintf_r+0xa50>
  4040e0:	f108 0808 	add.w	r8, r8, #8
  4040e4:	9b07      	ldr	r3, [sp, #28]
  4040e6:	075b      	lsls	r3, r3, #29
  4040e8:	d53a      	bpl.n	404160 <_svfprintf_r+0x43c>
  4040ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040ec:	9a08      	ldr	r2, [sp, #32]
  4040ee:	1a9d      	subs	r5, r3, r2
  4040f0:	2d00      	cmp	r5, #0
  4040f2:	dd35      	ble.n	404160 <_svfprintf_r+0x43c>
  4040f4:	2d10      	cmp	r5, #16
  4040f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f8:	dd20      	ble.n	40413c <_svfprintf_r+0x418>
  4040fa:	2610      	movs	r6, #16
  4040fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4040fe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404102:	e004      	b.n	40410e <_svfprintf_r+0x3ea>
  404104:	3d10      	subs	r5, #16
  404106:	2d10      	cmp	r5, #16
  404108:	f108 0808 	add.w	r8, r8, #8
  40410c:	dd16      	ble.n	40413c <_svfprintf_r+0x418>
  40410e:	3301      	adds	r3, #1
  404110:	4a5e      	ldr	r2, [pc, #376]	; (40428c <_svfprintf_r+0x568>)
  404112:	9326      	str	r3, [sp, #152]	; 0x98
  404114:	3410      	adds	r4, #16
  404116:	2b07      	cmp	r3, #7
  404118:	9427      	str	r4, [sp, #156]	; 0x9c
  40411a:	e888 0044 	stmia.w	r8, {r2, r6}
  40411e:	ddf1      	ble.n	404104 <_svfprintf_r+0x3e0>
  404120:	aa25      	add	r2, sp, #148	; 0x94
  404122:	4659      	mov	r1, fp
  404124:	4638      	mov	r0, r7
  404126:	f003 fac3 	bl	4076b0 <__ssprint_r>
  40412a:	2800      	cmp	r0, #0
  40412c:	f47f aecc 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404130:	3d10      	subs	r5, #16
  404132:	2d10      	cmp	r5, #16
  404134:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404136:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404138:	46c8      	mov	r8, r9
  40413a:	dce8      	bgt.n	40410e <_svfprintf_r+0x3ea>
  40413c:	3301      	adds	r3, #1
  40413e:	4a53      	ldr	r2, [pc, #332]	; (40428c <_svfprintf_r+0x568>)
  404140:	9326      	str	r3, [sp, #152]	; 0x98
  404142:	442c      	add	r4, r5
  404144:	2b07      	cmp	r3, #7
  404146:	9427      	str	r4, [sp, #156]	; 0x9c
  404148:	e888 0024 	stmia.w	r8, {r2, r5}
  40414c:	dd08      	ble.n	404160 <_svfprintf_r+0x43c>
  40414e:	aa25      	add	r2, sp, #148	; 0x94
  404150:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404152:	980c      	ldr	r0, [sp, #48]	; 0x30
  404154:	f003 faac 	bl	4076b0 <__ssprint_r>
  404158:	2800      	cmp	r0, #0
  40415a:	f47f aeb5 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  40415e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404160:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404164:	9908      	ldr	r1, [sp, #32]
  404166:	428a      	cmp	r2, r1
  404168:	bfac      	ite	ge
  40416a:	189b      	addge	r3, r3, r2
  40416c:	185b      	addlt	r3, r3, r1
  40416e:	9309      	str	r3, [sp, #36]	; 0x24
  404170:	2c00      	cmp	r4, #0
  404172:	f040 830a 	bne.w	40478a <_svfprintf_r+0xa66>
  404176:	2300      	movs	r3, #0
  404178:	9326      	str	r3, [sp, #152]	; 0x98
  40417a:	46c8      	mov	r8, r9
  40417c:	e5f9      	b.n	403d72 <_svfprintf_r+0x4e>
  40417e:	9311      	str	r3, [sp, #68]	; 0x44
  404180:	f01b 0320 	ands.w	r3, fp, #32
  404184:	f040 81e2 	bne.w	40454c <_svfprintf_r+0x828>
  404188:	f01b 0210 	ands.w	r2, fp, #16
  40418c:	f040 842c 	bne.w	4049e8 <_svfprintf_r+0xcc4>
  404190:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404194:	f000 8428 	beq.w	4049e8 <_svfprintf_r+0xcc4>
  404198:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40419a:	4613      	mov	r3, r2
  40419c:	460a      	mov	r2, r1
  40419e:	3204      	adds	r2, #4
  4041a0:	880c      	ldrh	r4, [r1, #0]
  4041a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4041a4:	2500      	movs	r5, #0
  4041a6:	e6b0      	b.n	403f0a <_svfprintf_r+0x1e6>
  4041a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4041aa:	9311      	str	r3, [sp, #68]	; 0x44
  4041ac:	6816      	ldr	r6, [r2, #0]
  4041ae:	2400      	movs	r4, #0
  4041b0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4041b4:	1d15      	adds	r5, r2, #4
  4041b6:	2e00      	cmp	r6, #0
  4041b8:	f000 86a5 	beq.w	404f06 <_svfprintf_r+0x11e2>
  4041bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4041be:	1c53      	adds	r3, r2, #1
  4041c0:	f000 8607 	beq.w	404dd2 <_svfprintf_r+0x10ae>
  4041c4:	4621      	mov	r1, r4
  4041c6:	4630      	mov	r0, r6
  4041c8:	f002 fbca 	bl	406960 <memchr>
  4041cc:	2800      	cmp	r0, #0
  4041ce:	f000 86df 	beq.w	404f90 <_svfprintf_r+0x126c>
  4041d2:	1b83      	subs	r3, r0, r6
  4041d4:	930e      	str	r3, [sp, #56]	; 0x38
  4041d6:	940a      	str	r4, [sp, #40]	; 0x28
  4041d8:	950f      	str	r5, [sp, #60]	; 0x3c
  4041da:	f8cd b01c 	str.w	fp, [sp, #28]
  4041de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4041e2:	9308      	str	r3, [sp, #32]
  4041e4:	9412      	str	r4, [sp, #72]	; 0x48
  4041e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041ea:	e6b3      	b.n	403f54 <_svfprintf_r+0x230>
  4041ec:	f89a 3000 	ldrb.w	r3, [sl]
  4041f0:	2201      	movs	r2, #1
  4041f2:	212b      	movs	r1, #43	; 0x2b
  4041f4:	e5ee      	b.n	403dd4 <_svfprintf_r+0xb0>
  4041f6:	f04b 0b20 	orr.w	fp, fp, #32
  4041fa:	f89a 3000 	ldrb.w	r3, [sl]
  4041fe:	e5e9      	b.n	403dd4 <_svfprintf_r+0xb0>
  404200:	9311      	str	r3, [sp, #68]	; 0x44
  404202:	2a00      	cmp	r2, #0
  404204:	f040 878d 	bne.w	405122 <_svfprintf_r+0x13fe>
  404208:	4b22      	ldr	r3, [pc, #136]	; (404294 <_svfprintf_r+0x570>)
  40420a:	9318      	str	r3, [sp, #96]	; 0x60
  40420c:	f01b 0f20 	tst.w	fp, #32
  404210:	f040 8111 	bne.w	404436 <_svfprintf_r+0x712>
  404214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404216:	f01b 0f10 	tst.w	fp, #16
  40421a:	4613      	mov	r3, r2
  40421c:	f040 83df 	bne.w	4049de <_svfprintf_r+0xcba>
  404220:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404224:	f000 83db 	beq.w	4049de <_svfprintf_r+0xcba>
  404228:	3304      	adds	r3, #4
  40422a:	8814      	ldrh	r4, [r2, #0]
  40422c:	930f      	str	r3, [sp, #60]	; 0x3c
  40422e:	2500      	movs	r5, #0
  404230:	f01b 0f01 	tst.w	fp, #1
  404234:	f000 810c 	beq.w	404450 <_svfprintf_r+0x72c>
  404238:	ea54 0305 	orrs.w	r3, r4, r5
  40423c:	f000 8108 	beq.w	404450 <_svfprintf_r+0x72c>
  404240:	2330      	movs	r3, #48	; 0x30
  404242:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404246:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40424a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40424e:	f04b 0b02 	orr.w	fp, fp, #2
  404252:	2302      	movs	r3, #2
  404254:	e659      	b.n	403f0a <_svfprintf_r+0x1e6>
  404256:	f89a 3000 	ldrb.w	r3, [sl]
  40425a:	2900      	cmp	r1, #0
  40425c:	f47f adba 	bne.w	403dd4 <_svfprintf_r+0xb0>
  404260:	2201      	movs	r2, #1
  404262:	2120      	movs	r1, #32
  404264:	e5b6      	b.n	403dd4 <_svfprintf_r+0xb0>
  404266:	f04b 0b01 	orr.w	fp, fp, #1
  40426a:	f89a 3000 	ldrb.w	r3, [sl]
  40426e:	e5b1      	b.n	403dd4 <_svfprintf_r+0xb0>
  404270:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404272:	6823      	ldr	r3, [r4, #0]
  404274:	930d      	str	r3, [sp, #52]	; 0x34
  404276:	4618      	mov	r0, r3
  404278:	2800      	cmp	r0, #0
  40427a:	4623      	mov	r3, r4
  40427c:	f103 0304 	add.w	r3, r3, #4
  404280:	f6ff ae0a 	blt.w	403e98 <_svfprintf_r+0x174>
  404284:	930f      	str	r3, [sp, #60]	; 0x3c
  404286:	f89a 3000 	ldrb.w	r3, [sl]
  40428a:	e5a3      	b.n	403dd4 <_svfprintf_r+0xb0>
  40428c:	00407cec 	.word	0x00407cec
  404290:	00407cfc 	.word	0x00407cfc
  404294:	00407ccc 	.word	0x00407ccc
  404298:	f04b 0b10 	orr.w	fp, fp, #16
  40429c:	f01b 0f20 	tst.w	fp, #32
  4042a0:	9311      	str	r3, [sp, #68]	; 0x44
  4042a2:	f43f ae23 	beq.w	403eec <_svfprintf_r+0x1c8>
  4042a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4042a8:	3507      	adds	r5, #7
  4042aa:	f025 0307 	bic.w	r3, r5, #7
  4042ae:	f103 0208 	add.w	r2, r3, #8
  4042b2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4042b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4042b8:	2301      	movs	r3, #1
  4042ba:	e626      	b.n	403f0a <_svfprintf_r+0x1e6>
  4042bc:	f89a 3000 	ldrb.w	r3, [sl]
  4042c0:	2b2a      	cmp	r3, #42	; 0x2a
  4042c2:	f10a 0401 	add.w	r4, sl, #1
  4042c6:	f000 871f 	beq.w	405108 <_svfprintf_r+0x13e4>
  4042ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042ce:	2809      	cmp	r0, #9
  4042d0:	46a2      	mov	sl, r4
  4042d2:	f200 86ab 	bhi.w	40502c <_svfprintf_r+0x1308>
  4042d6:	2300      	movs	r3, #0
  4042d8:	461c      	mov	r4, r3
  4042da:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4042de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4042e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4042e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042ea:	2809      	cmp	r0, #9
  4042ec:	d9f5      	bls.n	4042da <_svfprintf_r+0x5b6>
  4042ee:	940a      	str	r4, [sp, #40]	; 0x28
  4042f0:	e572      	b.n	403dd8 <_svfprintf_r+0xb4>
  4042f2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4042f6:	f89a 3000 	ldrb.w	r3, [sl]
  4042fa:	e56b      	b.n	403dd4 <_svfprintf_r+0xb0>
  4042fc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404300:	f89a 3000 	ldrb.w	r3, [sl]
  404304:	e566      	b.n	403dd4 <_svfprintf_r+0xb0>
  404306:	f89a 3000 	ldrb.w	r3, [sl]
  40430a:	2b6c      	cmp	r3, #108	; 0x6c
  40430c:	bf03      	ittte	eq
  40430e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404312:	f04b 0b20 	orreq.w	fp, fp, #32
  404316:	f10a 0a01 	addeq.w	sl, sl, #1
  40431a:	f04b 0b10 	orrne.w	fp, fp, #16
  40431e:	e559      	b.n	403dd4 <_svfprintf_r+0xb0>
  404320:	2a00      	cmp	r2, #0
  404322:	f040 8709 	bne.w	405138 <_svfprintf_r+0x1414>
  404326:	f01b 0f20 	tst.w	fp, #32
  40432a:	f040 84f7 	bne.w	404d1c <_svfprintf_r+0xff8>
  40432e:	f01b 0f10 	tst.w	fp, #16
  404332:	f040 84aa 	bne.w	404c8a <_svfprintf_r+0xf66>
  404336:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40433a:	f000 84a6 	beq.w	404c8a <_svfprintf_r+0xf66>
  40433e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404340:	6813      	ldr	r3, [r2, #0]
  404342:	3204      	adds	r2, #4
  404344:	920f      	str	r2, [sp, #60]	; 0x3c
  404346:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40434a:	801a      	strh	r2, [r3, #0]
  40434c:	e511      	b.n	403d72 <_svfprintf_r+0x4e>
  40434e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404350:	4bb2      	ldr	r3, [pc, #712]	; (40461c <_svfprintf_r+0x8f8>)
  404352:	680c      	ldr	r4, [r1, #0]
  404354:	9318      	str	r3, [sp, #96]	; 0x60
  404356:	2230      	movs	r2, #48	; 0x30
  404358:	2378      	movs	r3, #120	; 0x78
  40435a:	3104      	adds	r1, #4
  40435c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404360:	9311      	str	r3, [sp, #68]	; 0x44
  404362:	f04b 0b02 	orr.w	fp, fp, #2
  404366:	910f      	str	r1, [sp, #60]	; 0x3c
  404368:	2500      	movs	r5, #0
  40436a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40436e:	2302      	movs	r3, #2
  404370:	e5cb      	b.n	403f0a <_svfprintf_r+0x1e6>
  404372:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404374:	9311      	str	r3, [sp, #68]	; 0x44
  404376:	680a      	ldr	r2, [r1, #0]
  404378:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40437c:	2300      	movs	r3, #0
  40437e:	460a      	mov	r2, r1
  404380:	461f      	mov	r7, r3
  404382:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404386:	3204      	adds	r2, #4
  404388:	2301      	movs	r3, #1
  40438a:	9308      	str	r3, [sp, #32]
  40438c:	f8cd b01c 	str.w	fp, [sp, #28]
  404390:	970a      	str	r7, [sp, #40]	; 0x28
  404392:	9712      	str	r7, [sp, #72]	; 0x48
  404394:	920f      	str	r2, [sp, #60]	; 0x3c
  404396:	930e      	str	r3, [sp, #56]	; 0x38
  404398:	ae28      	add	r6, sp, #160	; 0xa0
  40439a:	e5df      	b.n	403f5c <_svfprintf_r+0x238>
  40439c:	9311      	str	r3, [sp, #68]	; 0x44
  40439e:	2a00      	cmp	r2, #0
  4043a0:	f040 86e2 	bne.w	405168 <_svfprintf_r+0x1444>
  4043a4:	f01b 0f20 	tst.w	fp, #32
  4043a8:	d15d      	bne.n	404466 <_svfprintf_r+0x742>
  4043aa:	f01b 0f10 	tst.w	fp, #16
  4043ae:	f040 8306 	bne.w	4049be <_svfprintf_r+0xc9a>
  4043b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4043b6:	f000 8302 	beq.w	4049be <_svfprintf_r+0xc9a>
  4043ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4043bc:	f9b1 4000 	ldrsh.w	r4, [r1]
  4043c0:	3104      	adds	r1, #4
  4043c2:	17e5      	asrs	r5, r4, #31
  4043c4:	4622      	mov	r2, r4
  4043c6:	462b      	mov	r3, r5
  4043c8:	910f      	str	r1, [sp, #60]	; 0x3c
  4043ca:	2a00      	cmp	r2, #0
  4043cc:	f173 0300 	sbcs.w	r3, r3, #0
  4043d0:	db58      	blt.n	404484 <_svfprintf_r+0x760>
  4043d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4043d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4043d8:	1c4a      	adds	r2, r1, #1
  4043da:	f04f 0301 	mov.w	r3, #1
  4043de:	f47f ad9b 	bne.w	403f18 <_svfprintf_r+0x1f4>
  4043e2:	ea54 0205 	orrs.w	r2, r4, r5
  4043e6:	f000 81dc 	beq.w	4047a2 <_svfprintf_r+0xa7e>
  4043ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4043ee:	2b01      	cmp	r3, #1
  4043f0:	f000 8278 	beq.w	4048e4 <_svfprintf_r+0xbc0>
  4043f4:	2b02      	cmp	r3, #2
  4043f6:	f040 8203 	bne.w	404800 <_svfprintf_r+0xadc>
  4043fa:	9818      	ldr	r0, [sp, #96]	; 0x60
  4043fc:	464e      	mov	r6, r9
  4043fe:	0923      	lsrs	r3, r4, #4
  404400:	f004 010f 	and.w	r1, r4, #15
  404404:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404408:	092a      	lsrs	r2, r5, #4
  40440a:	461c      	mov	r4, r3
  40440c:	4615      	mov	r5, r2
  40440e:	5c43      	ldrb	r3, [r0, r1]
  404410:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404414:	ea54 0305 	orrs.w	r3, r4, r5
  404418:	d1f1      	bne.n	4043fe <_svfprintf_r+0x6da>
  40441a:	eba9 0306 	sub.w	r3, r9, r6
  40441e:	930e      	str	r3, [sp, #56]	; 0x38
  404420:	e590      	b.n	403f44 <_svfprintf_r+0x220>
  404422:	9311      	str	r3, [sp, #68]	; 0x44
  404424:	2a00      	cmp	r2, #0
  404426:	f040 869b 	bne.w	405160 <_svfprintf_r+0x143c>
  40442a:	4b7d      	ldr	r3, [pc, #500]	; (404620 <_svfprintf_r+0x8fc>)
  40442c:	9318      	str	r3, [sp, #96]	; 0x60
  40442e:	f01b 0f20 	tst.w	fp, #32
  404432:	f43f aeef 	beq.w	404214 <_svfprintf_r+0x4f0>
  404436:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404438:	3507      	adds	r5, #7
  40443a:	f025 0307 	bic.w	r3, r5, #7
  40443e:	f103 0208 	add.w	r2, r3, #8
  404442:	f01b 0f01 	tst.w	fp, #1
  404446:	920f      	str	r2, [sp, #60]	; 0x3c
  404448:	e9d3 4500 	ldrd	r4, r5, [r3]
  40444c:	f47f aef4 	bne.w	404238 <_svfprintf_r+0x514>
  404450:	2302      	movs	r3, #2
  404452:	e55a      	b.n	403f0a <_svfprintf_r+0x1e6>
  404454:	9311      	str	r3, [sp, #68]	; 0x44
  404456:	2a00      	cmp	r2, #0
  404458:	f040 867e 	bne.w	405158 <_svfprintf_r+0x1434>
  40445c:	f04b 0b10 	orr.w	fp, fp, #16
  404460:	f01b 0f20 	tst.w	fp, #32
  404464:	d0a1      	beq.n	4043aa <_svfprintf_r+0x686>
  404466:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404468:	3507      	adds	r5, #7
  40446a:	f025 0507 	bic.w	r5, r5, #7
  40446e:	e9d5 2300 	ldrd	r2, r3, [r5]
  404472:	2a00      	cmp	r2, #0
  404474:	f105 0108 	add.w	r1, r5, #8
  404478:	461d      	mov	r5, r3
  40447a:	f173 0300 	sbcs.w	r3, r3, #0
  40447e:	910f      	str	r1, [sp, #60]	; 0x3c
  404480:	4614      	mov	r4, r2
  404482:	daa6      	bge.n	4043d2 <_svfprintf_r+0x6ae>
  404484:	272d      	movs	r7, #45	; 0x2d
  404486:	4264      	negs	r4, r4
  404488:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40448c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404490:	2301      	movs	r3, #1
  404492:	e53d      	b.n	403f10 <_svfprintf_r+0x1ec>
  404494:	9311      	str	r3, [sp, #68]	; 0x44
  404496:	2a00      	cmp	r2, #0
  404498:	f040 865a 	bne.w	405150 <_svfprintf_r+0x142c>
  40449c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40449e:	3507      	adds	r5, #7
  4044a0:	f025 0307 	bic.w	r3, r5, #7
  4044a4:	f103 0208 	add.w	r2, r3, #8
  4044a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4044aa:	681a      	ldr	r2, [r3, #0]
  4044ac:	9214      	str	r2, [sp, #80]	; 0x50
  4044ae:	685b      	ldr	r3, [r3, #4]
  4044b0:	9315      	str	r3, [sp, #84]	; 0x54
  4044b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4044b6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4044ba:	4628      	mov	r0, r5
  4044bc:	4621      	mov	r1, r4
  4044be:	f04f 32ff 	mov.w	r2, #4294967295
  4044c2:	4b58      	ldr	r3, [pc, #352]	; (404624 <_svfprintf_r+0x900>)
  4044c4:	f003 fa8a 	bl	4079dc <__aeabi_dcmpun>
  4044c8:	2800      	cmp	r0, #0
  4044ca:	f040 8348 	bne.w	404b5e <_svfprintf_r+0xe3a>
  4044ce:	4628      	mov	r0, r5
  4044d0:	4621      	mov	r1, r4
  4044d2:	f04f 32ff 	mov.w	r2, #4294967295
  4044d6:	4b53      	ldr	r3, [pc, #332]	; (404624 <_svfprintf_r+0x900>)
  4044d8:	f003 fa62 	bl	4079a0 <__aeabi_dcmple>
  4044dc:	2800      	cmp	r0, #0
  4044de:	f040 833e 	bne.w	404b5e <_svfprintf_r+0xe3a>
  4044e2:	a814      	add	r0, sp, #80	; 0x50
  4044e4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4044e6:	f003 fa51 	bl	40798c <__aeabi_dcmplt>
  4044ea:	2800      	cmp	r0, #0
  4044ec:	f040 852f 	bne.w	404f4e <_svfprintf_r+0x122a>
  4044f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4044f4:	4e4c      	ldr	r6, [pc, #304]	; (404628 <_svfprintf_r+0x904>)
  4044f6:	4b4d      	ldr	r3, [pc, #308]	; (40462c <_svfprintf_r+0x908>)
  4044f8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4044fc:	9007      	str	r0, [sp, #28]
  4044fe:	9811      	ldr	r0, [sp, #68]	; 0x44
  404500:	2203      	movs	r2, #3
  404502:	2100      	movs	r1, #0
  404504:	9208      	str	r2, [sp, #32]
  404506:	910a      	str	r1, [sp, #40]	; 0x28
  404508:	2847      	cmp	r0, #71	; 0x47
  40450a:	bfd8      	it	le
  40450c:	461e      	movle	r6, r3
  40450e:	920e      	str	r2, [sp, #56]	; 0x38
  404510:	9112      	str	r1, [sp, #72]	; 0x48
  404512:	e51f      	b.n	403f54 <_svfprintf_r+0x230>
  404514:	f04b 0b08 	orr.w	fp, fp, #8
  404518:	f89a 3000 	ldrb.w	r3, [sl]
  40451c:	e45a      	b.n	403dd4 <_svfprintf_r+0xb0>
  40451e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404522:	2300      	movs	r3, #0
  404524:	461c      	mov	r4, r3
  404526:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40452a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40452e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404532:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404536:	2809      	cmp	r0, #9
  404538:	d9f5      	bls.n	404526 <_svfprintf_r+0x802>
  40453a:	940d      	str	r4, [sp, #52]	; 0x34
  40453c:	e44c      	b.n	403dd8 <_svfprintf_r+0xb4>
  40453e:	f04b 0b10 	orr.w	fp, fp, #16
  404542:	9311      	str	r3, [sp, #68]	; 0x44
  404544:	f01b 0320 	ands.w	r3, fp, #32
  404548:	f43f ae1e 	beq.w	404188 <_svfprintf_r+0x464>
  40454c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40454e:	3507      	adds	r5, #7
  404550:	f025 0307 	bic.w	r3, r5, #7
  404554:	f103 0208 	add.w	r2, r3, #8
  404558:	e9d3 4500 	ldrd	r4, r5, [r3]
  40455c:	920f      	str	r2, [sp, #60]	; 0x3c
  40455e:	2300      	movs	r3, #0
  404560:	e4d3      	b.n	403f0a <_svfprintf_r+0x1e6>
  404562:	9311      	str	r3, [sp, #68]	; 0x44
  404564:	2a00      	cmp	r2, #0
  404566:	f040 85e0 	bne.w	40512a <_svfprintf_r+0x1406>
  40456a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40456c:	2a00      	cmp	r2, #0
  40456e:	f43f aca4 	beq.w	403eba <_svfprintf_r+0x196>
  404572:	2300      	movs	r3, #0
  404574:	2101      	movs	r1, #1
  404576:	461f      	mov	r7, r3
  404578:	9108      	str	r1, [sp, #32]
  40457a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40457e:	f8cd b01c 	str.w	fp, [sp, #28]
  404582:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404586:	930a      	str	r3, [sp, #40]	; 0x28
  404588:	9312      	str	r3, [sp, #72]	; 0x48
  40458a:	910e      	str	r1, [sp, #56]	; 0x38
  40458c:	ae28      	add	r6, sp, #160	; 0xa0
  40458e:	e4e5      	b.n	403f5c <_svfprintf_r+0x238>
  404590:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404592:	e535      	b.n	404000 <_svfprintf_r+0x2dc>
  404594:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404596:	2b65      	cmp	r3, #101	; 0x65
  404598:	f340 80a6 	ble.w	4046e8 <_svfprintf_r+0x9c4>
  40459c:	a814      	add	r0, sp, #80	; 0x50
  40459e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4045a0:	f003 f9ea 	bl	407978 <__aeabi_dcmpeq>
  4045a4:	2800      	cmp	r0, #0
  4045a6:	f000 814f 	beq.w	404848 <_svfprintf_r+0xb24>
  4045aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045ac:	4a20      	ldr	r2, [pc, #128]	; (404630 <_svfprintf_r+0x90c>)
  4045ae:	f8c8 2000 	str.w	r2, [r8]
  4045b2:	3301      	adds	r3, #1
  4045b4:	3401      	adds	r4, #1
  4045b6:	2201      	movs	r2, #1
  4045b8:	2b07      	cmp	r3, #7
  4045ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4045bc:	9326      	str	r3, [sp, #152]	; 0x98
  4045be:	f8c8 2004 	str.w	r2, [r8, #4]
  4045c2:	f300 836a 	bgt.w	404c9a <_svfprintf_r+0xf76>
  4045c6:	f108 0808 	add.w	r8, r8, #8
  4045ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4045cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4045ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045d0:	4293      	cmp	r3, r2
  4045d2:	db03      	blt.n	4045dc <_svfprintf_r+0x8b8>
  4045d4:	9b07      	ldr	r3, [sp, #28]
  4045d6:	07dd      	lsls	r5, r3, #31
  4045d8:	f57f ad84 	bpl.w	4040e4 <_svfprintf_r+0x3c0>
  4045dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045de:	9919      	ldr	r1, [sp, #100]	; 0x64
  4045e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4045e2:	f8c8 2000 	str.w	r2, [r8]
  4045e6:	3301      	adds	r3, #1
  4045e8:	440c      	add	r4, r1
  4045ea:	2b07      	cmp	r3, #7
  4045ec:	f8c8 1004 	str.w	r1, [r8, #4]
  4045f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4045f2:	9326      	str	r3, [sp, #152]	; 0x98
  4045f4:	f300 839e 	bgt.w	404d34 <_svfprintf_r+0x1010>
  4045f8:	f108 0808 	add.w	r8, r8, #8
  4045fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045fe:	1e5e      	subs	r6, r3, #1
  404600:	2e00      	cmp	r6, #0
  404602:	f77f ad6f 	ble.w	4040e4 <_svfprintf_r+0x3c0>
  404606:	2e10      	cmp	r6, #16
  404608:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40460a:	4d0a      	ldr	r5, [pc, #40]	; (404634 <_svfprintf_r+0x910>)
  40460c:	f340 81f5 	ble.w	4049fa <_svfprintf_r+0xcd6>
  404610:	4622      	mov	r2, r4
  404612:	2710      	movs	r7, #16
  404614:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404618:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40461a:	e013      	b.n	404644 <_svfprintf_r+0x920>
  40461c:	00407ccc 	.word	0x00407ccc
  404620:	00407cb8 	.word	0x00407cb8
  404624:	7fefffff 	.word	0x7fefffff
  404628:	00407cac 	.word	0x00407cac
  40462c:	00407ca8 	.word	0x00407ca8
  404630:	00407ce8 	.word	0x00407ce8
  404634:	00407cfc 	.word	0x00407cfc
  404638:	f108 0808 	add.w	r8, r8, #8
  40463c:	3e10      	subs	r6, #16
  40463e:	2e10      	cmp	r6, #16
  404640:	f340 81da 	ble.w	4049f8 <_svfprintf_r+0xcd4>
  404644:	3301      	adds	r3, #1
  404646:	3210      	adds	r2, #16
  404648:	2b07      	cmp	r3, #7
  40464a:	9227      	str	r2, [sp, #156]	; 0x9c
  40464c:	9326      	str	r3, [sp, #152]	; 0x98
  40464e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404652:	ddf1      	ble.n	404638 <_svfprintf_r+0x914>
  404654:	aa25      	add	r2, sp, #148	; 0x94
  404656:	4621      	mov	r1, r4
  404658:	4658      	mov	r0, fp
  40465a:	f003 f829 	bl	4076b0 <__ssprint_r>
  40465e:	2800      	cmp	r0, #0
  404660:	f47f ac32 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404664:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404666:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404668:	46c8      	mov	r8, r9
  40466a:	e7e7      	b.n	40463c <_svfprintf_r+0x918>
  40466c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40466e:	9a08      	ldr	r2, [sp, #32]
  404670:	1a9f      	subs	r7, r3, r2
  404672:	2f00      	cmp	r7, #0
  404674:	f77f ace7 	ble.w	404046 <_svfprintf_r+0x322>
  404678:	2f10      	cmp	r7, #16
  40467a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40467c:	4db6      	ldr	r5, [pc, #728]	; (404958 <_svfprintf_r+0xc34>)
  40467e:	dd27      	ble.n	4046d0 <_svfprintf_r+0x9ac>
  404680:	4642      	mov	r2, r8
  404682:	4621      	mov	r1, r4
  404684:	46b0      	mov	r8, r6
  404686:	f04f 0b10 	mov.w	fp, #16
  40468a:	462e      	mov	r6, r5
  40468c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40468e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404690:	e004      	b.n	40469c <_svfprintf_r+0x978>
  404692:	3f10      	subs	r7, #16
  404694:	2f10      	cmp	r7, #16
  404696:	f102 0208 	add.w	r2, r2, #8
  40469a:	dd15      	ble.n	4046c8 <_svfprintf_r+0x9a4>
  40469c:	3301      	adds	r3, #1
  40469e:	3110      	adds	r1, #16
  4046a0:	2b07      	cmp	r3, #7
  4046a2:	9127      	str	r1, [sp, #156]	; 0x9c
  4046a4:	9326      	str	r3, [sp, #152]	; 0x98
  4046a6:	e882 0840 	stmia.w	r2, {r6, fp}
  4046aa:	ddf2      	ble.n	404692 <_svfprintf_r+0x96e>
  4046ac:	aa25      	add	r2, sp, #148	; 0x94
  4046ae:	4629      	mov	r1, r5
  4046b0:	4620      	mov	r0, r4
  4046b2:	f002 fffd 	bl	4076b0 <__ssprint_r>
  4046b6:	2800      	cmp	r0, #0
  4046b8:	f47f ac06 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4046bc:	3f10      	subs	r7, #16
  4046be:	2f10      	cmp	r7, #16
  4046c0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4046c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046c4:	464a      	mov	r2, r9
  4046c6:	dce9      	bgt.n	40469c <_svfprintf_r+0x978>
  4046c8:	4635      	mov	r5, r6
  4046ca:	460c      	mov	r4, r1
  4046cc:	4646      	mov	r6, r8
  4046ce:	4690      	mov	r8, r2
  4046d0:	3301      	adds	r3, #1
  4046d2:	443c      	add	r4, r7
  4046d4:	2b07      	cmp	r3, #7
  4046d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4046d8:	9326      	str	r3, [sp, #152]	; 0x98
  4046da:	e888 00a0 	stmia.w	r8, {r5, r7}
  4046de:	f300 8232 	bgt.w	404b46 <_svfprintf_r+0xe22>
  4046e2:	f108 0808 	add.w	r8, r8, #8
  4046e6:	e4ae      	b.n	404046 <_svfprintf_r+0x322>
  4046e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046ea:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4046ec:	2b01      	cmp	r3, #1
  4046ee:	f340 81fe 	ble.w	404aee <_svfprintf_r+0xdca>
  4046f2:	3701      	adds	r7, #1
  4046f4:	3401      	adds	r4, #1
  4046f6:	2301      	movs	r3, #1
  4046f8:	2f07      	cmp	r7, #7
  4046fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4046fc:	9726      	str	r7, [sp, #152]	; 0x98
  4046fe:	f8c8 6000 	str.w	r6, [r8]
  404702:	f8c8 3004 	str.w	r3, [r8, #4]
  404706:	f300 8203 	bgt.w	404b10 <_svfprintf_r+0xdec>
  40470a:	f108 0808 	add.w	r8, r8, #8
  40470e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404710:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404712:	f8c8 3000 	str.w	r3, [r8]
  404716:	3701      	adds	r7, #1
  404718:	4414      	add	r4, r2
  40471a:	2f07      	cmp	r7, #7
  40471c:	9427      	str	r4, [sp, #156]	; 0x9c
  40471e:	9726      	str	r7, [sp, #152]	; 0x98
  404720:	f8c8 2004 	str.w	r2, [r8, #4]
  404724:	f300 8200 	bgt.w	404b28 <_svfprintf_r+0xe04>
  404728:	f108 0808 	add.w	r8, r8, #8
  40472c:	a814      	add	r0, sp, #80	; 0x50
  40472e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  404730:	f003 f922 	bl	407978 <__aeabi_dcmpeq>
  404734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404736:	2800      	cmp	r0, #0
  404738:	f040 8101 	bne.w	40493e <_svfprintf_r+0xc1a>
  40473c:	3b01      	subs	r3, #1
  40473e:	3701      	adds	r7, #1
  404740:	3601      	adds	r6, #1
  404742:	441c      	add	r4, r3
  404744:	2f07      	cmp	r7, #7
  404746:	9726      	str	r7, [sp, #152]	; 0x98
  404748:	9427      	str	r4, [sp, #156]	; 0x9c
  40474a:	f8c8 6000 	str.w	r6, [r8]
  40474e:	f8c8 3004 	str.w	r3, [r8, #4]
  404752:	f300 8128 	bgt.w	4049a6 <_svfprintf_r+0xc82>
  404756:	f108 0808 	add.w	r8, r8, #8
  40475a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40475c:	f8c8 2004 	str.w	r2, [r8, #4]
  404760:	3701      	adds	r7, #1
  404762:	4414      	add	r4, r2
  404764:	ab21      	add	r3, sp, #132	; 0x84
  404766:	2f07      	cmp	r7, #7
  404768:	9427      	str	r4, [sp, #156]	; 0x9c
  40476a:	9726      	str	r7, [sp, #152]	; 0x98
  40476c:	f8c8 3000 	str.w	r3, [r8]
  404770:	f77f acb6 	ble.w	4040e0 <_svfprintf_r+0x3bc>
  404774:	aa25      	add	r2, sp, #148	; 0x94
  404776:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404778:	980c      	ldr	r0, [sp, #48]	; 0x30
  40477a:	f002 ff99 	bl	4076b0 <__ssprint_r>
  40477e:	2800      	cmp	r0, #0
  404780:	f47f aba2 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404784:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404786:	46c8      	mov	r8, r9
  404788:	e4ac      	b.n	4040e4 <_svfprintf_r+0x3c0>
  40478a:	aa25      	add	r2, sp, #148	; 0x94
  40478c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40478e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404790:	f002 ff8e 	bl	4076b0 <__ssprint_r>
  404794:	2800      	cmp	r0, #0
  404796:	f43f acee 	beq.w	404176 <_svfprintf_r+0x452>
  40479a:	f7ff bb95 	b.w	403ec8 <_svfprintf_r+0x1a4>
  40479e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4047a2:	2b01      	cmp	r3, #1
  4047a4:	f000 8135 	beq.w	404a12 <_svfprintf_r+0xcee>
  4047a8:	2b02      	cmp	r3, #2
  4047aa:	d125      	bne.n	4047f8 <_svfprintf_r+0xad4>
  4047ac:	f8cd b01c 	str.w	fp, [sp, #28]
  4047b0:	2400      	movs	r4, #0
  4047b2:	2500      	movs	r5, #0
  4047b4:	e621      	b.n	4043fa <_svfprintf_r+0x6d6>
  4047b6:	aa25      	add	r2, sp, #148	; 0x94
  4047b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047ba:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047bc:	f002 ff78 	bl	4076b0 <__ssprint_r>
  4047c0:	2800      	cmp	r0, #0
  4047c2:	f47f ab81 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4047c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047c8:	46c8      	mov	r8, r9
  4047ca:	e478      	b.n	4040be <_svfprintf_r+0x39a>
  4047cc:	aa25      	add	r2, sp, #148	; 0x94
  4047ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047d2:	f002 ff6d 	bl	4076b0 <__ssprint_r>
  4047d6:	2800      	cmp	r0, #0
  4047d8:	f47f ab76 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4047dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047de:	46c8      	mov	r8, r9
  4047e0:	e41e      	b.n	404020 <_svfprintf_r+0x2fc>
  4047e2:	aa25      	add	r2, sp, #148	; 0x94
  4047e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047e8:	f002 ff62 	bl	4076b0 <__ssprint_r>
  4047ec:	2800      	cmp	r0, #0
  4047ee:	f47f ab6b 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4047f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047f4:	46c8      	mov	r8, r9
  4047f6:	e423      	b.n	404040 <_svfprintf_r+0x31c>
  4047f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4047fc:	2400      	movs	r4, #0
  4047fe:	2500      	movs	r5, #0
  404800:	4649      	mov	r1, r9
  404802:	e000      	b.n	404806 <_svfprintf_r+0xae2>
  404804:	4631      	mov	r1, r6
  404806:	08e2      	lsrs	r2, r4, #3
  404808:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40480c:	08e8      	lsrs	r0, r5, #3
  40480e:	f004 0307 	and.w	r3, r4, #7
  404812:	4605      	mov	r5, r0
  404814:	4614      	mov	r4, r2
  404816:	3330      	adds	r3, #48	; 0x30
  404818:	ea54 0205 	orrs.w	r2, r4, r5
  40481c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404820:	f101 36ff 	add.w	r6, r1, #4294967295
  404824:	d1ee      	bne.n	404804 <_svfprintf_r+0xae0>
  404826:	9a07      	ldr	r2, [sp, #28]
  404828:	07d2      	lsls	r2, r2, #31
  40482a:	f57f adf6 	bpl.w	40441a <_svfprintf_r+0x6f6>
  40482e:	2b30      	cmp	r3, #48	; 0x30
  404830:	f43f adf3 	beq.w	40441a <_svfprintf_r+0x6f6>
  404834:	3902      	subs	r1, #2
  404836:	2330      	movs	r3, #48	; 0x30
  404838:	f806 3c01 	strb.w	r3, [r6, #-1]
  40483c:	eba9 0301 	sub.w	r3, r9, r1
  404840:	930e      	str	r3, [sp, #56]	; 0x38
  404842:	460e      	mov	r6, r1
  404844:	f7ff bb7e 	b.w	403f44 <_svfprintf_r+0x220>
  404848:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40484a:	2900      	cmp	r1, #0
  40484c:	f340 822f 	ble.w	404cae <_svfprintf_r+0xf8a>
  404850:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404854:	4293      	cmp	r3, r2
  404856:	bfa8      	it	ge
  404858:	4613      	movge	r3, r2
  40485a:	2b00      	cmp	r3, #0
  40485c:	461f      	mov	r7, r3
  40485e:	dd0d      	ble.n	40487c <_svfprintf_r+0xb58>
  404860:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404862:	f8c8 6000 	str.w	r6, [r8]
  404866:	3301      	adds	r3, #1
  404868:	443c      	add	r4, r7
  40486a:	2b07      	cmp	r3, #7
  40486c:	9427      	str	r4, [sp, #156]	; 0x9c
  40486e:	f8c8 7004 	str.w	r7, [r8, #4]
  404872:	9326      	str	r3, [sp, #152]	; 0x98
  404874:	f300 8320 	bgt.w	404eb8 <_svfprintf_r+0x1194>
  404878:	f108 0808 	add.w	r8, r8, #8
  40487c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40487e:	2f00      	cmp	r7, #0
  404880:	bfa8      	it	ge
  404882:	1bdb      	subge	r3, r3, r7
  404884:	2b00      	cmp	r3, #0
  404886:	461f      	mov	r7, r3
  404888:	f340 80d7 	ble.w	404a3a <_svfprintf_r+0xd16>
  40488c:	2f10      	cmp	r7, #16
  40488e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404890:	4d31      	ldr	r5, [pc, #196]	; (404958 <_svfprintf_r+0xc34>)
  404892:	f340 81ee 	ble.w	404c72 <_svfprintf_r+0xf4e>
  404896:	4642      	mov	r2, r8
  404898:	4621      	mov	r1, r4
  40489a:	46b0      	mov	r8, r6
  40489c:	f04f 0b10 	mov.w	fp, #16
  4048a0:	462e      	mov	r6, r5
  4048a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4048a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4048a6:	e004      	b.n	4048b2 <_svfprintf_r+0xb8e>
  4048a8:	3208      	adds	r2, #8
  4048aa:	3f10      	subs	r7, #16
  4048ac:	2f10      	cmp	r7, #16
  4048ae:	f340 81dc 	ble.w	404c6a <_svfprintf_r+0xf46>
  4048b2:	3301      	adds	r3, #1
  4048b4:	3110      	adds	r1, #16
  4048b6:	2b07      	cmp	r3, #7
  4048b8:	9127      	str	r1, [sp, #156]	; 0x9c
  4048ba:	9326      	str	r3, [sp, #152]	; 0x98
  4048bc:	e882 0840 	stmia.w	r2, {r6, fp}
  4048c0:	ddf2      	ble.n	4048a8 <_svfprintf_r+0xb84>
  4048c2:	aa25      	add	r2, sp, #148	; 0x94
  4048c4:	4629      	mov	r1, r5
  4048c6:	4620      	mov	r0, r4
  4048c8:	f002 fef2 	bl	4076b0 <__ssprint_r>
  4048cc:	2800      	cmp	r0, #0
  4048ce:	f47f aafb 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4048d2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4048d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048d6:	464a      	mov	r2, r9
  4048d8:	e7e7      	b.n	4048aa <_svfprintf_r+0xb86>
  4048da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048dc:	930e      	str	r3, [sp, #56]	; 0x38
  4048de:	464e      	mov	r6, r9
  4048e0:	f7ff bb30 	b.w	403f44 <_svfprintf_r+0x220>
  4048e4:	2d00      	cmp	r5, #0
  4048e6:	bf08      	it	eq
  4048e8:	2c0a      	cmpeq	r4, #10
  4048ea:	f0c0 8090 	bcc.w	404a0e <_svfprintf_r+0xcea>
  4048ee:	464e      	mov	r6, r9
  4048f0:	4620      	mov	r0, r4
  4048f2:	4629      	mov	r1, r5
  4048f4:	220a      	movs	r2, #10
  4048f6:	2300      	movs	r3, #0
  4048f8:	f7fe fd0a 	bl	403310 <__aeabi_uldivmod>
  4048fc:	3230      	adds	r2, #48	; 0x30
  4048fe:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404902:	4620      	mov	r0, r4
  404904:	4629      	mov	r1, r5
  404906:	2300      	movs	r3, #0
  404908:	220a      	movs	r2, #10
  40490a:	f7fe fd01 	bl	403310 <__aeabi_uldivmod>
  40490e:	4604      	mov	r4, r0
  404910:	460d      	mov	r5, r1
  404912:	ea54 0305 	orrs.w	r3, r4, r5
  404916:	d1eb      	bne.n	4048f0 <_svfprintf_r+0xbcc>
  404918:	eba9 0306 	sub.w	r3, r9, r6
  40491c:	930e      	str	r3, [sp, #56]	; 0x38
  40491e:	f7ff bb11 	b.w	403f44 <_svfprintf_r+0x220>
  404922:	aa25      	add	r2, sp, #148	; 0x94
  404924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404926:	980c      	ldr	r0, [sp, #48]	; 0x30
  404928:	f002 fec2 	bl	4076b0 <__ssprint_r>
  40492c:	2800      	cmp	r0, #0
  40492e:	f47f aacb 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404932:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404936:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404938:	46c8      	mov	r8, r9
  40493a:	f7ff bb61 	b.w	404000 <_svfprintf_r+0x2dc>
  40493e:	1e5e      	subs	r6, r3, #1
  404940:	2e00      	cmp	r6, #0
  404942:	f77f af0a 	ble.w	40475a <_svfprintf_r+0xa36>
  404946:	2e10      	cmp	r6, #16
  404948:	4d03      	ldr	r5, [pc, #12]	; (404958 <_svfprintf_r+0xc34>)
  40494a:	dd23      	ble.n	404994 <_svfprintf_r+0xc70>
  40494c:	4622      	mov	r2, r4
  40494e:	f04f 0b10 	mov.w	fp, #16
  404952:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404954:	e007      	b.n	404966 <_svfprintf_r+0xc42>
  404956:	bf00      	nop
  404958:	00407cfc 	.word	0x00407cfc
  40495c:	3e10      	subs	r6, #16
  40495e:	2e10      	cmp	r6, #16
  404960:	f108 0808 	add.w	r8, r8, #8
  404964:	dd15      	ble.n	404992 <_svfprintf_r+0xc6e>
  404966:	3701      	adds	r7, #1
  404968:	3210      	adds	r2, #16
  40496a:	2f07      	cmp	r7, #7
  40496c:	9227      	str	r2, [sp, #156]	; 0x9c
  40496e:	9726      	str	r7, [sp, #152]	; 0x98
  404970:	e888 0820 	stmia.w	r8, {r5, fp}
  404974:	ddf2      	ble.n	40495c <_svfprintf_r+0xc38>
  404976:	aa25      	add	r2, sp, #148	; 0x94
  404978:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40497a:	4620      	mov	r0, r4
  40497c:	f002 fe98 	bl	4076b0 <__ssprint_r>
  404980:	2800      	cmp	r0, #0
  404982:	f47f aaa1 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404986:	3e10      	subs	r6, #16
  404988:	2e10      	cmp	r6, #16
  40498a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40498c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40498e:	46c8      	mov	r8, r9
  404990:	dce9      	bgt.n	404966 <_svfprintf_r+0xc42>
  404992:	4614      	mov	r4, r2
  404994:	3701      	adds	r7, #1
  404996:	4434      	add	r4, r6
  404998:	2f07      	cmp	r7, #7
  40499a:	9427      	str	r4, [sp, #156]	; 0x9c
  40499c:	9726      	str	r7, [sp, #152]	; 0x98
  40499e:	e888 0060 	stmia.w	r8, {r5, r6}
  4049a2:	f77f aed8 	ble.w	404756 <_svfprintf_r+0xa32>
  4049a6:	aa25      	add	r2, sp, #148	; 0x94
  4049a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049ac:	f002 fe80 	bl	4076b0 <__ssprint_r>
  4049b0:	2800      	cmp	r0, #0
  4049b2:	f47f aa89 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  4049b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049b8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4049ba:	46c8      	mov	r8, r9
  4049bc:	e6cd      	b.n	40475a <_svfprintf_r+0xa36>
  4049be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049c0:	6814      	ldr	r4, [r2, #0]
  4049c2:	4613      	mov	r3, r2
  4049c4:	3304      	adds	r3, #4
  4049c6:	17e5      	asrs	r5, r4, #31
  4049c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4049ca:	4622      	mov	r2, r4
  4049cc:	462b      	mov	r3, r5
  4049ce:	e4fc      	b.n	4043ca <_svfprintf_r+0x6a6>
  4049d0:	3204      	adds	r2, #4
  4049d2:	681c      	ldr	r4, [r3, #0]
  4049d4:	920f      	str	r2, [sp, #60]	; 0x3c
  4049d6:	2301      	movs	r3, #1
  4049d8:	2500      	movs	r5, #0
  4049da:	f7ff ba96 	b.w	403f0a <_svfprintf_r+0x1e6>
  4049de:	681c      	ldr	r4, [r3, #0]
  4049e0:	3304      	adds	r3, #4
  4049e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4049e4:	2500      	movs	r5, #0
  4049e6:	e423      	b.n	404230 <_svfprintf_r+0x50c>
  4049e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4049ea:	460a      	mov	r2, r1
  4049ec:	3204      	adds	r2, #4
  4049ee:	680c      	ldr	r4, [r1, #0]
  4049f0:	920f      	str	r2, [sp, #60]	; 0x3c
  4049f2:	2500      	movs	r5, #0
  4049f4:	f7ff ba89 	b.w	403f0a <_svfprintf_r+0x1e6>
  4049f8:	4614      	mov	r4, r2
  4049fa:	3301      	adds	r3, #1
  4049fc:	4434      	add	r4, r6
  4049fe:	2b07      	cmp	r3, #7
  404a00:	9427      	str	r4, [sp, #156]	; 0x9c
  404a02:	9326      	str	r3, [sp, #152]	; 0x98
  404a04:	e888 0060 	stmia.w	r8, {r5, r6}
  404a08:	f77f ab6a 	ble.w	4040e0 <_svfprintf_r+0x3bc>
  404a0c:	e6b2      	b.n	404774 <_svfprintf_r+0xa50>
  404a0e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404a12:	f8cd b01c 	str.w	fp, [sp, #28]
  404a16:	ae42      	add	r6, sp, #264	; 0x108
  404a18:	3430      	adds	r4, #48	; 0x30
  404a1a:	2301      	movs	r3, #1
  404a1c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404a20:	930e      	str	r3, [sp, #56]	; 0x38
  404a22:	f7ff ba8f 	b.w	403f44 <_svfprintf_r+0x220>
  404a26:	aa25      	add	r2, sp, #148	; 0x94
  404a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a2c:	f002 fe40 	bl	4076b0 <__ssprint_r>
  404a30:	2800      	cmp	r0, #0
  404a32:	f47f aa49 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404a36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a38:	46c8      	mov	r8, r9
  404a3a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a3e:	429a      	cmp	r2, r3
  404a40:	db44      	blt.n	404acc <_svfprintf_r+0xda8>
  404a42:	9b07      	ldr	r3, [sp, #28]
  404a44:	07d9      	lsls	r1, r3, #31
  404a46:	d441      	bmi.n	404acc <_svfprintf_r+0xda8>
  404a48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a4a:	9812      	ldr	r0, [sp, #72]	; 0x48
  404a4c:	1a9a      	subs	r2, r3, r2
  404a4e:	1a1d      	subs	r5, r3, r0
  404a50:	4295      	cmp	r5, r2
  404a52:	bfa8      	it	ge
  404a54:	4615      	movge	r5, r2
  404a56:	2d00      	cmp	r5, #0
  404a58:	dd0e      	ble.n	404a78 <_svfprintf_r+0xd54>
  404a5a:	9926      	ldr	r1, [sp, #152]	; 0x98
  404a5c:	f8c8 5004 	str.w	r5, [r8, #4]
  404a60:	3101      	adds	r1, #1
  404a62:	4406      	add	r6, r0
  404a64:	442c      	add	r4, r5
  404a66:	2907      	cmp	r1, #7
  404a68:	f8c8 6000 	str.w	r6, [r8]
  404a6c:	9427      	str	r4, [sp, #156]	; 0x9c
  404a6e:	9126      	str	r1, [sp, #152]	; 0x98
  404a70:	f300 823b 	bgt.w	404eea <_svfprintf_r+0x11c6>
  404a74:	f108 0808 	add.w	r8, r8, #8
  404a78:	2d00      	cmp	r5, #0
  404a7a:	bfac      	ite	ge
  404a7c:	1b56      	subge	r6, r2, r5
  404a7e:	4616      	movlt	r6, r2
  404a80:	2e00      	cmp	r6, #0
  404a82:	f77f ab2f 	ble.w	4040e4 <_svfprintf_r+0x3c0>
  404a86:	2e10      	cmp	r6, #16
  404a88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a8a:	4db0      	ldr	r5, [pc, #704]	; (404d4c <_svfprintf_r+0x1028>)
  404a8c:	ddb5      	ble.n	4049fa <_svfprintf_r+0xcd6>
  404a8e:	4622      	mov	r2, r4
  404a90:	2710      	movs	r7, #16
  404a92:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404a96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404a98:	e004      	b.n	404aa4 <_svfprintf_r+0xd80>
  404a9a:	f108 0808 	add.w	r8, r8, #8
  404a9e:	3e10      	subs	r6, #16
  404aa0:	2e10      	cmp	r6, #16
  404aa2:	dda9      	ble.n	4049f8 <_svfprintf_r+0xcd4>
  404aa4:	3301      	adds	r3, #1
  404aa6:	3210      	adds	r2, #16
  404aa8:	2b07      	cmp	r3, #7
  404aaa:	9227      	str	r2, [sp, #156]	; 0x9c
  404aac:	9326      	str	r3, [sp, #152]	; 0x98
  404aae:	e888 00a0 	stmia.w	r8, {r5, r7}
  404ab2:	ddf2      	ble.n	404a9a <_svfprintf_r+0xd76>
  404ab4:	aa25      	add	r2, sp, #148	; 0x94
  404ab6:	4621      	mov	r1, r4
  404ab8:	4658      	mov	r0, fp
  404aba:	f002 fdf9 	bl	4076b0 <__ssprint_r>
  404abe:	2800      	cmp	r0, #0
  404ac0:	f47f aa02 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404ac4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ac6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ac8:	46c8      	mov	r8, r9
  404aca:	e7e8      	b.n	404a9e <_svfprintf_r+0xd7a>
  404acc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ace:	9819      	ldr	r0, [sp, #100]	; 0x64
  404ad0:	991a      	ldr	r1, [sp, #104]	; 0x68
  404ad2:	f8c8 1000 	str.w	r1, [r8]
  404ad6:	3301      	adds	r3, #1
  404ad8:	4404      	add	r4, r0
  404ada:	2b07      	cmp	r3, #7
  404adc:	9427      	str	r4, [sp, #156]	; 0x9c
  404ade:	f8c8 0004 	str.w	r0, [r8, #4]
  404ae2:	9326      	str	r3, [sp, #152]	; 0x98
  404ae4:	f300 81f5 	bgt.w	404ed2 <_svfprintf_r+0x11ae>
  404ae8:	f108 0808 	add.w	r8, r8, #8
  404aec:	e7ac      	b.n	404a48 <_svfprintf_r+0xd24>
  404aee:	9b07      	ldr	r3, [sp, #28]
  404af0:	07da      	lsls	r2, r3, #31
  404af2:	f53f adfe 	bmi.w	4046f2 <_svfprintf_r+0x9ce>
  404af6:	3701      	adds	r7, #1
  404af8:	3401      	adds	r4, #1
  404afa:	2301      	movs	r3, #1
  404afc:	2f07      	cmp	r7, #7
  404afe:	9427      	str	r4, [sp, #156]	; 0x9c
  404b00:	9726      	str	r7, [sp, #152]	; 0x98
  404b02:	f8c8 6000 	str.w	r6, [r8]
  404b06:	f8c8 3004 	str.w	r3, [r8, #4]
  404b0a:	f77f ae24 	ble.w	404756 <_svfprintf_r+0xa32>
  404b0e:	e74a      	b.n	4049a6 <_svfprintf_r+0xc82>
  404b10:	aa25      	add	r2, sp, #148	; 0x94
  404b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b14:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b16:	f002 fdcb 	bl	4076b0 <__ssprint_r>
  404b1a:	2800      	cmp	r0, #0
  404b1c:	f47f a9d4 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404b20:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b22:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b24:	46c8      	mov	r8, r9
  404b26:	e5f2      	b.n	40470e <_svfprintf_r+0x9ea>
  404b28:	aa25      	add	r2, sp, #148	; 0x94
  404b2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b2c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b2e:	f002 fdbf 	bl	4076b0 <__ssprint_r>
  404b32:	2800      	cmp	r0, #0
  404b34:	f47f a9c8 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404b38:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b3a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b3c:	46c8      	mov	r8, r9
  404b3e:	e5f5      	b.n	40472c <_svfprintf_r+0xa08>
  404b40:	464e      	mov	r6, r9
  404b42:	f7ff b9ff 	b.w	403f44 <_svfprintf_r+0x220>
  404b46:	aa25      	add	r2, sp, #148	; 0x94
  404b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b4c:	f002 fdb0 	bl	4076b0 <__ssprint_r>
  404b50:	2800      	cmp	r0, #0
  404b52:	f47f a9b9 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404b56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b58:	46c8      	mov	r8, r9
  404b5a:	f7ff ba74 	b.w	404046 <_svfprintf_r+0x322>
  404b5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404b60:	4622      	mov	r2, r4
  404b62:	4620      	mov	r0, r4
  404b64:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404b66:	4623      	mov	r3, r4
  404b68:	4621      	mov	r1, r4
  404b6a:	f002 ff37 	bl	4079dc <__aeabi_dcmpun>
  404b6e:	2800      	cmp	r0, #0
  404b70:	f040 8286 	bne.w	405080 <_svfprintf_r+0x135c>
  404b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b76:	3301      	adds	r3, #1
  404b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b7a:	f023 0320 	bic.w	r3, r3, #32
  404b7e:	930e      	str	r3, [sp, #56]	; 0x38
  404b80:	f000 81e2 	beq.w	404f48 <_svfprintf_r+0x1224>
  404b84:	2b47      	cmp	r3, #71	; 0x47
  404b86:	f000 811e 	beq.w	404dc6 <_svfprintf_r+0x10a2>
  404b8a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404b8e:	9307      	str	r3, [sp, #28]
  404b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404b92:	1e1f      	subs	r7, r3, #0
  404b94:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404b96:	9308      	str	r3, [sp, #32]
  404b98:	bfbb      	ittet	lt
  404b9a:	463b      	movlt	r3, r7
  404b9c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404ba0:	2300      	movge	r3, #0
  404ba2:	232d      	movlt	r3, #45	; 0x2d
  404ba4:	9310      	str	r3, [sp, #64]	; 0x40
  404ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ba8:	2b66      	cmp	r3, #102	; 0x66
  404baa:	f000 81bb 	beq.w	404f24 <_svfprintf_r+0x1200>
  404bae:	2b46      	cmp	r3, #70	; 0x46
  404bb0:	f000 80df 	beq.w	404d72 <_svfprintf_r+0x104e>
  404bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404bb6:	9a08      	ldr	r2, [sp, #32]
  404bb8:	2b45      	cmp	r3, #69	; 0x45
  404bba:	bf0c      	ite	eq
  404bbc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404bbe:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404bc0:	a823      	add	r0, sp, #140	; 0x8c
  404bc2:	a920      	add	r1, sp, #128	; 0x80
  404bc4:	bf08      	it	eq
  404bc6:	1c5d      	addeq	r5, r3, #1
  404bc8:	9004      	str	r0, [sp, #16]
  404bca:	9103      	str	r1, [sp, #12]
  404bcc:	a81f      	add	r0, sp, #124	; 0x7c
  404bce:	2102      	movs	r1, #2
  404bd0:	463b      	mov	r3, r7
  404bd2:	9002      	str	r0, [sp, #8]
  404bd4:	9501      	str	r5, [sp, #4]
  404bd6:	9100      	str	r1, [sp, #0]
  404bd8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bda:	f000 fb6d 	bl	4052b8 <_dtoa_r>
  404bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404be0:	2b67      	cmp	r3, #103	; 0x67
  404be2:	4606      	mov	r6, r0
  404be4:	f040 81e0 	bne.w	404fa8 <_svfprintf_r+0x1284>
  404be8:	f01b 0f01 	tst.w	fp, #1
  404bec:	f000 8246 	beq.w	40507c <_svfprintf_r+0x1358>
  404bf0:	1974      	adds	r4, r6, r5
  404bf2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404bf4:	9808      	ldr	r0, [sp, #32]
  404bf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404bf8:	4639      	mov	r1, r7
  404bfa:	f002 febd 	bl	407978 <__aeabi_dcmpeq>
  404bfe:	2800      	cmp	r0, #0
  404c00:	f040 8165 	bne.w	404ece <_svfprintf_r+0x11aa>
  404c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404c06:	42a3      	cmp	r3, r4
  404c08:	d206      	bcs.n	404c18 <_svfprintf_r+0xef4>
  404c0a:	2130      	movs	r1, #48	; 0x30
  404c0c:	1c5a      	adds	r2, r3, #1
  404c0e:	9223      	str	r2, [sp, #140]	; 0x8c
  404c10:	7019      	strb	r1, [r3, #0]
  404c12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404c14:	429c      	cmp	r4, r3
  404c16:	d8f9      	bhi.n	404c0c <_svfprintf_r+0xee8>
  404c18:	1b9b      	subs	r3, r3, r6
  404c1a:	9313      	str	r3, [sp, #76]	; 0x4c
  404c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404c1e:	2b47      	cmp	r3, #71	; 0x47
  404c20:	f000 80e9 	beq.w	404df6 <_svfprintf_r+0x10d2>
  404c24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c26:	2b65      	cmp	r3, #101	; 0x65
  404c28:	f340 81cd 	ble.w	404fc6 <_svfprintf_r+0x12a2>
  404c2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c2e:	2b66      	cmp	r3, #102	; 0x66
  404c30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c32:	9312      	str	r3, [sp, #72]	; 0x48
  404c34:	f000 819e 	beq.w	404f74 <_svfprintf_r+0x1250>
  404c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c3c:	4619      	mov	r1, r3
  404c3e:	4291      	cmp	r1, r2
  404c40:	f300 818a 	bgt.w	404f58 <_svfprintf_r+0x1234>
  404c44:	f01b 0f01 	tst.w	fp, #1
  404c48:	f040 8213 	bne.w	405072 <_svfprintf_r+0x134e>
  404c4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404c50:	9308      	str	r3, [sp, #32]
  404c52:	2367      	movs	r3, #103	; 0x67
  404c54:	920e      	str	r2, [sp, #56]	; 0x38
  404c56:	9311      	str	r3, [sp, #68]	; 0x44
  404c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c5a:	2b00      	cmp	r3, #0
  404c5c:	f040 80c4 	bne.w	404de8 <_svfprintf_r+0x10c4>
  404c60:	930a      	str	r3, [sp, #40]	; 0x28
  404c62:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c66:	f7ff b975 	b.w	403f54 <_svfprintf_r+0x230>
  404c6a:	4635      	mov	r5, r6
  404c6c:	460c      	mov	r4, r1
  404c6e:	4646      	mov	r6, r8
  404c70:	4690      	mov	r8, r2
  404c72:	3301      	adds	r3, #1
  404c74:	443c      	add	r4, r7
  404c76:	2b07      	cmp	r3, #7
  404c78:	9427      	str	r4, [sp, #156]	; 0x9c
  404c7a:	9326      	str	r3, [sp, #152]	; 0x98
  404c7c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c80:	f73f aed1 	bgt.w	404a26 <_svfprintf_r+0xd02>
  404c84:	f108 0808 	add.w	r8, r8, #8
  404c88:	e6d7      	b.n	404a3a <_svfprintf_r+0xd16>
  404c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c8c:	6813      	ldr	r3, [r2, #0]
  404c8e:	3204      	adds	r2, #4
  404c90:	920f      	str	r2, [sp, #60]	; 0x3c
  404c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404c94:	601a      	str	r2, [r3, #0]
  404c96:	f7ff b86c 	b.w	403d72 <_svfprintf_r+0x4e>
  404c9a:	aa25      	add	r2, sp, #148	; 0x94
  404c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c9e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ca0:	f002 fd06 	bl	4076b0 <__ssprint_r>
  404ca4:	2800      	cmp	r0, #0
  404ca6:	f47f a90f 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404caa:	46c8      	mov	r8, r9
  404cac:	e48d      	b.n	4045ca <_svfprintf_r+0x8a6>
  404cae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cb0:	4a27      	ldr	r2, [pc, #156]	; (404d50 <_svfprintf_r+0x102c>)
  404cb2:	f8c8 2000 	str.w	r2, [r8]
  404cb6:	3301      	adds	r3, #1
  404cb8:	3401      	adds	r4, #1
  404cba:	2201      	movs	r2, #1
  404cbc:	2b07      	cmp	r3, #7
  404cbe:	9427      	str	r4, [sp, #156]	; 0x9c
  404cc0:	9326      	str	r3, [sp, #152]	; 0x98
  404cc2:	f8c8 2004 	str.w	r2, [r8, #4]
  404cc6:	dc72      	bgt.n	404dae <_svfprintf_r+0x108a>
  404cc8:	f108 0808 	add.w	r8, r8, #8
  404ccc:	b929      	cbnz	r1, 404cda <_svfprintf_r+0xfb6>
  404cce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404cd0:	b91b      	cbnz	r3, 404cda <_svfprintf_r+0xfb6>
  404cd2:	9b07      	ldr	r3, [sp, #28]
  404cd4:	07d8      	lsls	r0, r3, #31
  404cd6:	f57f aa05 	bpl.w	4040e4 <_svfprintf_r+0x3c0>
  404cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cdc:	9819      	ldr	r0, [sp, #100]	; 0x64
  404cde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404ce0:	f8c8 2000 	str.w	r2, [r8]
  404ce4:	3301      	adds	r3, #1
  404ce6:	4602      	mov	r2, r0
  404ce8:	4422      	add	r2, r4
  404cea:	2b07      	cmp	r3, #7
  404cec:	9227      	str	r2, [sp, #156]	; 0x9c
  404cee:	f8c8 0004 	str.w	r0, [r8, #4]
  404cf2:	9326      	str	r3, [sp, #152]	; 0x98
  404cf4:	f300 818d 	bgt.w	405012 <_svfprintf_r+0x12ee>
  404cf8:	f108 0808 	add.w	r8, r8, #8
  404cfc:	2900      	cmp	r1, #0
  404cfe:	f2c0 8165 	blt.w	404fcc <_svfprintf_r+0x12a8>
  404d02:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404d04:	f8c8 6000 	str.w	r6, [r8]
  404d08:	3301      	adds	r3, #1
  404d0a:	188c      	adds	r4, r1, r2
  404d0c:	2b07      	cmp	r3, #7
  404d0e:	9427      	str	r4, [sp, #156]	; 0x9c
  404d10:	9326      	str	r3, [sp, #152]	; 0x98
  404d12:	f8c8 1004 	str.w	r1, [r8, #4]
  404d16:	f77f a9e3 	ble.w	4040e0 <_svfprintf_r+0x3bc>
  404d1a:	e52b      	b.n	404774 <_svfprintf_r+0xa50>
  404d1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d1e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d20:	6813      	ldr	r3, [r2, #0]
  404d22:	17cd      	asrs	r5, r1, #31
  404d24:	4608      	mov	r0, r1
  404d26:	3204      	adds	r2, #4
  404d28:	4629      	mov	r1, r5
  404d2a:	920f      	str	r2, [sp, #60]	; 0x3c
  404d2c:	e9c3 0100 	strd	r0, r1, [r3]
  404d30:	f7ff b81f 	b.w	403d72 <_svfprintf_r+0x4e>
  404d34:	aa25      	add	r2, sp, #148	; 0x94
  404d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d3a:	f002 fcb9 	bl	4076b0 <__ssprint_r>
  404d3e:	2800      	cmp	r0, #0
  404d40:	f47f a8c2 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404d44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d46:	46c8      	mov	r8, r9
  404d48:	e458      	b.n	4045fc <_svfprintf_r+0x8d8>
  404d4a:	bf00      	nop
  404d4c:	00407cfc 	.word	0x00407cfc
  404d50:	00407ce8 	.word	0x00407ce8
  404d54:	2140      	movs	r1, #64	; 0x40
  404d56:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d58:	f001 fb36 	bl	4063c8 <_malloc_r>
  404d5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404d5e:	6010      	str	r0, [r2, #0]
  404d60:	6110      	str	r0, [r2, #16]
  404d62:	2800      	cmp	r0, #0
  404d64:	f000 81ec 	beq.w	405140 <_svfprintf_r+0x141c>
  404d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404d6a:	2340      	movs	r3, #64	; 0x40
  404d6c:	6153      	str	r3, [r2, #20]
  404d6e:	f7fe bff0 	b.w	403d52 <_svfprintf_r+0x2e>
  404d72:	a823      	add	r0, sp, #140	; 0x8c
  404d74:	a920      	add	r1, sp, #128	; 0x80
  404d76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404d78:	9004      	str	r0, [sp, #16]
  404d7a:	9103      	str	r1, [sp, #12]
  404d7c:	a81f      	add	r0, sp, #124	; 0x7c
  404d7e:	2103      	movs	r1, #3
  404d80:	9002      	str	r0, [sp, #8]
  404d82:	9a08      	ldr	r2, [sp, #32]
  404d84:	9401      	str	r4, [sp, #4]
  404d86:	463b      	mov	r3, r7
  404d88:	9100      	str	r1, [sp, #0]
  404d8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d8c:	f000 fa94 	bl	4052b8 <_dtoa_r>
  404d90:	4625      	mov	r5, r4
  404d92:	4606      	mov	r6, r0
  404d94:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d96:	2b46      	cmp	r3, #70	; 0x46
  404d98:	eb06 0405 	add.w	r4, r6, r5
  404d9c:	f47f af29 	bne.w	404bf2 <_svfprintf_r+0xece>
  404da0:	7833      	ldrb	r3, [r6, #0]
  404da2:	2b30      	cmp	r3, #48	; 0x30
  404da4:	f000 8172 	beq.w	40508c <_svfprintf_r+0x1368>
  404da8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404daa:	442c      	add	r4, r5
  404dac:	e721      	b.n	404bf2 <_svfprintf_r+0xece>
  404dae:	aa25      	add	r2, sp, #148	; 0x94
  404db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404db2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404db4:	f002 fc7c 	bl	4076b0 <__ssprint_r>
  404db8:	2800      	cmp	r0, #0
  404dba:	f47f a885 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404dbe:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404dc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404dc2:	46c8      	mov	r8, r9
  404dc4:	e782      	b.n	404ccc <_svfprintf_r+0xfa8>
  404dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dc8:	2b00      	cmp	r3, #0
  404dca:	bf08      	it	eq
  404dcc:	2301      	moveq	r3, #1
  404dce:	930a      	str	r3, [sp, #40]	; 0x28
  404dd0:	e6db      	b.n	404b8a <_svfprintf_r+0xe66>
  404dd2:	4630      	mov	r0, r6
  404dd4:	940a      	str	r4, [sp, #40]	; 0x28
  404dd6:	f7fe fcd3 	bl	403780 <strlen>
  404dda:	950f      	str	r5, [sp, #60]	; 0x3c
  404ddc:	900e      	str	r0, [sp, #56]	; 0x38
  404dde:	f8cd b01c 	str.w	fp, [sp, #28]
  404de2:	4603      	mov	r3, r0
  404de4:	f7ff b9fb 	b.w	4041de <_svfprintf_r+0x4ba>
  404de8:	272d      	movs	r7, #45	; 0x2d
  404dea:	2300      	movs	r3, #0
  404dec:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404df0:	930a      	str	r3, [sp, #40]	; 0x28
  404df2:	f7ff b8b0 	b.w	403f56 <_svfprintf_r+0x232>
  404df6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404df8:	9312      	str	r3, [sp, #72]	; 0x48
  404dfa:	461a      	mov	r2, r3
  404dfc:	3303      	adds	r3, #3
  404dfe:	db04      	blt.n	404e0a <_svfprintf_r+0x10e6>
  404e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e02:	4619      	mov	r1, r3
  404e04:	4291      	cmp	r1, r2
  404e06:	f6bf af17 	bge.w	404c38 <_svfprintf_r+0xf14>
  404e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e0c:	3b02      	subs	r3, #2
  404e0e:	9311      	str	r3, [sp, #68]	; 0x44
  404e10:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404e14:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e1a:	3b01      	subs	r3, #1
  404e1c:	2b00      	cmp	r3, #0
  404e1e:	931f      	str	r3, [sp, #124]	; 0x7c
  404e20:	bfbd      	ittte	lt
  404e22:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404e24:	f1c3 0301 	rsblt	r3, r3, #1
  404e28:	222d      	movlt	r2, #45	; 0x2d
  404e2a:	222b      	movge	r2, #43	; 0x2b
  404e2c:	2b09      	cmp	r3, #9
  404e2e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404e32:	f340 8116 	ble.w	405062 <_svfprintf_r+0x133e>
  404e36:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404e3a:	4620      	mov	r0, r4
  404e3c:	4dad      	ldr	r5, [pc, #692]	; (4050f4 <_svfprintf_r+0x13d0>)
  404e3e:	e000      	b.n	404e42 <_svfprintf_r+0x111e>
  404e40:	4610      	mov	r0, r2
  404e42:	fb85 1203 	smull	r1, r2, r5, r3
  404e46:	17d9      	asrs	r1, r3, #31
  404e48:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404e4c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404e50:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404e54:	3230      	adds	r2, #48	; 0x30
  404e56:	2909      	cmp	r1, #9
  404e58:	f800 2c01 	strb.w	r2, [r0, #-1]
  404e5c:	460b      	mov	r3, r1
  404e5e:	f100 32ff 	add.w	r2, r0, #4294967295
  404e62:	dced      	bgt.n	404e40 <_svfprintf_r+0x111c>
  404e64:	3330      	adds	r3, #48	; 0x30
  404e66:	3802      	subs	r0, #2
  404e68:	b2d9      	uxtb	r1, r3
  404e6a:	4284      	cmp	r4, r0
  404e6c:	f802 1c01 	strb.w	r1, [r2, #-1]
  404e70:	f240 815f 	bls.w	405132 <_svfprintf_r+0x140e>
  404e74:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404e78:	4613      	mov	r3, r2
  404e7a:	e001      	b.n	404e80 <_svfprintf_r+0x115c>
  404e7c:	f813 1b01 	ldrb.w	r1, [r3], #1
  404e80:	f800 1b01 	strb.w	r1, [r0], #1
  404e84:	42a3      	cmp	r3, r4
  404e86:	d1f9      	bne.n	404e7c <_svfprintf_r+0x1158>
  404e88:	3301      	adds	r3, #1
  404e8a:	1a9b      	subs	r3, r3, r2
  404e8c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404e90:	4413      	add	r3, r2
  404e92:	aa21      	add	r2, sp, #132	; 0x84
  404e94:	1a9b      	subs	r3, r3, r2
  404e96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e98:	931b      	str	r3, [sp, #108]	; 0x6c
  404e9a:	2a01      	cmp	r2, #1
  404e9c:	4413      	add	r3, r2
  404e9e:	930e      	str	r3, [sp, #56]	; 0x38
  404ea0:	f340 8113 	ble.w	4050ca <_svfprintf_r+0x13a6>
  404ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ea6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ea8:	4413      	add	r3, r2
  404eaa:	930e      	str	r3, [sp, #56]	; 0x38
  404eac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404eb0:	9308      	str	r3, [sp, #32]
  404eb2:	2300      	movs	r3, #0
  404eb4:	9312      	str	r3, [sp, #72]	; 0x48
  404eb6:	e6cf      	b.n	404c58 <_svfprintf_r+0xf34>
  404eb8:	aa25      	add	r2, sp, #148	; 0x94
  404eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ebc:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ebe:	f002 fbf7 	bl	4076b0 <__ssprint_r>
  404ec2:	2800      	cmp	r0, #0
  404ec4:	f47f a800 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404ec8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404eca:	46c8      	mov	r8, r9
  404ecc:	e4d6      	b.n	40487c <_svfprintf_r+0xb58>
  404ece:	4623      	mov	r3, r4
  404ed0:	e6a2      	b.n	404c18 <_svfprintf_r+0xef4>
  404ed2:	aa25      	add	r2, sp, #148	; 0x94
  404ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ed8:	f002 fbea 	bl	4076b0 <__ssprint_r>
  404edc:	2800      	cmp	r0, #0
  404ede:	f47e aff3 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404ee2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404ee4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ee6:	46c8      	mov	r8, r9
  404ee8:	e5ae      	b.n	404a48 <_svfprintf_r+0xd24>
  404eea:	aa25      	add	r2, sp, #148	; 0x94
  404eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404eee:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ef0:	f002 fbde 	bl	4076b0 <__ssprint_r>
  404ef4:	2800      	cmp	r0, #0
  404ef6:	f47e afe7 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  404efa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404efe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f00:	1a9a      	subs	r2, r3, r2
  404f02:	46c8      	mov	r8, r9
  404f04:	e5b8      	b.n	404a78 <_svfprintf_r+0xd54>
  404f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f08:	9612      	str	r6, [sp, #72]	; 0x48
  404f0a:	2b06      	cmp	r3, #6
  404f0c:	bf28      	it	cs
  404f0e:	2306      	movcs	r3, #6
  404f10:	960a      	str	r6, [sp, #40]	; 0x28
  404f12:	4637      	mov	r7, r6
  404f14:	9308      	str	r3, [sp, #32]
  404f16:	950f      	str	r5, [sp, #60]	; 0x3c
  404f18:	f8cd b01c 	str.w	fp, [sp, #28]
  404f1c:	930e      	str	r3, [sp, #56]	; 0x38
  404f1e:	4e76      	ldr	r6, [pc, #472]	; (4050f8 <_svfprintf_r+0x13d4>)
  404f20:	f7ff b818 	b.w	403f54 <_svfprintf_r+0x230>
  404f24:	a823      	add	r0, sp, #140	; 0x8c
  404f26:	a920      	add	r1, sp, #128	; 0x80
  404f28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404f2a:	9004      	str	r0, [sp, #16]
  404f2c:	9103      	str	r1, [sp, #12]
  404f2e:	a81f      	add	r0, sp, #124	; 0x7c
  404f30:	2103      	movs	r1, #3
  404f32:	9002      	str	r0, [sp, #8]
  404f34:	9a08      	ldr	r2, [sp, #32]
  404f36:	9501      	str	r5, [sp, #4]
  404f38:	463b      	mov	r3, r7
  404f3a:	9100      	str	r1, [sp, #0]
  404f3c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f3e:	f000 f9bb 	bl	4052b8 <_dtoa_r>
  404f42:	4606      	mov	r6, r0
  404f44:	1944      	adds	r4, r0, r5
  404f46:	e72b      	b.n	404da0 <_svfprintf_r+0x107c>
  404f48:	2306      	movs	r3, #6
  404f4a:	930a      	str	r3, [sp, #40]	; 0x28
  404f4c:	e61d      	b.n	404b8a <_svfprintf_r+0xe66>
  404f4e:	272d      	movs	r7, #45	; 0x2d
  404f50:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404f54:	f7ff bace 	b.w	4044f4 <_svfprintf_r+0x7d0>
  404f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f5c:	4413      	add	r3, r2
  404f5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404f60:	930e      	str	r3, [sp, #56]	; 0x38
  404f62:	2a00      	cmp	r2, #0
  404f64:	f340 80aa 	ble.w	4050bc <_svfprintf_r+0x1398>
  404f68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f6c:	9308      	str	r3, [sp, #32]
  404f6e:	2367      	movs	r3, #103	; 0x67
  404f70:	9311      	str	r3, [sp, #68]	; 0x44
  404f72:	e671      	b.n	404c58 <_svfprintf_r+0xf34>
  404f74:	2b00      	cmp	r3, #0
  404f76:	f340 80b2 	ble.w	4050de <_svfprintf_r+0x13ba>
  404f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404f7c:	2a00      	cmp	r2, #0
  404f7e:	f040 8093 	bne.w	4050a8 <_svfprintf_r+0x1384>
  404f82:	f01b 0f01 	tst.w	fp, #1
  404f86:	f040 808f 	bne.w	4050a8 <_svfprintf_r+0x1384>
  404f8a:	9308      	str	r3, [sp, #32]
  404f8c:	930e      	str	r3, [sp, #56]	; 0x38
  404f8e:	e663      	b.n	404c58 <_svfprintf_r+0xf34>
  404f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f92:	9308      	str	r3, [sp, #32]
  404f94:	930e      	str	r3, [sp, #56]	; 0x38
  404f96:	900a      	str	r0, [sp, #40]	; 0x28
  404f98:	950f      	str	r5, [sp, #60]	; 0x3c
  404f9a:	f8cd b01c 	str.w	fp, [sp, #28]
  404f9e:	9012      	str	r0, [sp, #72]	; 0x48
  404fa0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404fa4:	f7fe bfd6 	b.w	403f54 <_svfprintf_r+0x230>
  404fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404faa:	2b47      	cmp	r3, #71	; 0x47
  404fac:	f47f ae20 	bne.w	404bf0 <_svfprintf_r+0xecc>
  404fb0:	f01b 0f01 	tst.w	fp, #1
  404fb4:	f47f aeee 	bne.w	404d94 <_svfprintf_r+0x1070>
  404fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404fba:	1b9b      	subs	r3, r3, r6
  404fbc:	9313      	str	r3, [sp, #76]	; 0x4c
  404fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404fc0:	2b47      	cmp	r3, #71	; 0x47
  404fc2:	f43f af18 	beq.w	404df6 <_svfprintf_r+0x10d2>
  404fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404fc8:	9312      	str	r3, [sp, #72]	; 0x48
  404fca:	e721      	b.n	404e10 <_svfprintf_r+0x10ec>
  404fcc:	424f      	negs	r7, r1
  404fce:	3110      	adds	r1, #16
  404fd0:	4d4a      	ldr	r5, [pc, #296]	; (4050fc <_svfprintf_r+0x13d8>)
  404fd2:	da2f      	bge.n	405034 <_svfprintf_r+0x1310>
  404fd4:	2410      	movs	r4, #16
  404fd6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404fda:	e004      	b.n	404fe6 <_svfprintf_r+0x12c2>
  404fdc:	f108 0808 	add.w	r8, r8, #8
  404fe0:	3f10      	subs	r7, #16
  404fe2:	2f10      	cmp	r7, #16
  404fe4:	dd26      	ble.n	405034 <_svfprintf_r+0x1310>
  404fe6:	3301      	adds	r3, #1
  404fe8:	3210      	adds	r2, #16
  404fea:	2b07      	cmp	r3, #7
  404fec:	9227      	str	r2, [sp, #156]	; 0x9c
  404fee:	9326      	str	r3, [sp, #152]	; 0x98
  404ff0:	f8c8 5000 	str.w	r5, [r8]
  404ff4:	f8c8 4004 	str.w	r4, [r8, #4]
  404ff8:	ddf0      	ble.n	404fdc <_svfprintf_r+0x12b8>
  404ffa:	aa25      	add	r2, sp, #148	; 0x94
  404ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ffe:	4658      	mov	r0, fp
  405000:	f002 fb56 	bl	4076b0 <__ssprint_r>
  405004:	2800      	cmp	r0, #0
  405006:	f47e af5f 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  40500a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40500c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40500e:	46c8      	mov	r8, r9
  405010:	e7e6      	b.n	404fe0 <_svfprintf_r+0x12bc>
  405012:	aa25      	add	r2, sp, #148	; 0x94
  405014:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405016:	980c      	ldr	r0, [sp, #48]	; 0x30
  405018:	f002 fb4a 	bl	4076b0 <__ssprint_r>
  40501c:	2800      	cmp	r0, #0
  40501e:	f47e af53 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  405022:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405024:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405026:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405028:	46c8      	mov	r8, r9
  40502a:	e667      	b.n	404cfc <_svfprintf_r+0xfd8>
  40502c:	2000      	movs	r0, #0
  40502e:	900a      	str	r0, [sp, #40]	; 0x28
  405030:	f7fe bed2 	b.w	403dd8 <_svfprintf_r+0xb4>
  405034:	3301      	adds	r3, #1
  405036:	443a      	add	r2, r7
  405038:	2b07      	cmp	r3, #7
  40503a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40503e:	9227      	str	r2, [sp, #156]	; 0x9c
  405040:	9326      	str	r3, [sp, #152]	; 0x98
  405042:	f108 0808 	add.w	r8, r8, #8
  405046:	f77f ae5c 	ble.w	404d02 <_svfprintf_r+0xfde>
  40504a:	aa25      	add	r2, sp, #148	; 0x94
  40504c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40504e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405050:	f002 fb2e 	bl	4076b0 <__ssprint_r>
  405054:	2800      	cmp	r0, #0
  405056:	f47e af37 	bne.w	403ec8 <_svfprintf_r+0x1a4>
  40505a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40505c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40505e:	46c8      	mov	r8, r9
  405060:	e64f      	b.n	404d02 <_svfprintf_r+0xfde>
  405062:	3330      	adds	r3, #48	; 0x30
  405064:	2230      	movs	r2, #48	; 0x30
  405066:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40506a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40506e:	ab22      	add	r3, sp, #136	; 0x88
  405070:	e70f      	b.n	404e92 <_svfprintf_r+0x116e>
  405072:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405074:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405076:	4413      	add	r3, r2
  405078:	930e      	str	r3, [sp, #56]	; 0x38
  40507a:	e775      	b.n	404f68 <_svfprintf_r+0x1244>
  40507c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40507e:	e5cb      	b.n	404c18 <_svfprintf_r+0xef4>
  405080:	4e1f      	ldr	r6, [pc, #124]	; (405100 <_svfprintf_r+0x13dc>)
  405082:	4b20      	ldr	r3, [pc, #128]	; (405104 <_svfprintf_r+0x13e0>)
  405084:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405088:	f7ff ba36 	b.w	4044f8 <_svfprintf_r+0x7d4>
  40508c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40508e:	9808      	ldr	r0, [sp, #32]
  405090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405092:	4639      	mov	r1, r7
  405094:	f002 fc70 	bl	407978 <__aeabi_dcmpeq>
  405098:	2800      	cmp	r0, #0
  40509a:	f47f ae85 	bne.w	404da8 <_svfprintf_r+0x1084>
  40509e:	f1c5 0501 	rsb	r5, r5, #1
  4050a2:	951f      	str	r5, [sp, #124]	; 0x7c
  4050a4:	442c      	add	r4, r5
  4050a6:	e5a4      	b.n	404bf2 <_svfprintf_r+0xece>
  4050a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4050ac:	4413      	add	r3, r2
  4050ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4050b0:	441a      	add	r2, r3
  4050b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4050b6:	920e      	str	r2, [sp, #56]	; 0x38
  4050b8:	9308      	str	r3, [sp, #32]
  4050ba:	e5cd      	b.n	404c58 <_svfprintf_r+0xf34>
  4050bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4050be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050c0:	f1c3 0301 	rsb	r3, r3, #1
  4050c4:	441a      	add	r2, r3
  4050c6:	4613      	mov	r3, r2
  4050c8:	e7d6      	b.n	405078 <_svfprintf_r+0x1354>
  4050ca:	f01b 0301 	ands.w	r3, fp, #1
  4050ce:	9312      	str	r3, [sp, #72]	; 0x48
  4050d0:	f47f aee8 	bne.w	404ea4 <_svfprintf_r+0x1180>
  4050d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050da:	9308      	str	r3, [sp, #32]
  4050dc:	e5bc      	b.n	404c58 <_svfprintf_r+0xf34>
  4050de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050e0:	b913      	cbnz	r3, 4050e8 <_svfprintf_r+0x13c4>
  4050e2:	f01b 0f01 	tst.w	fp, #1
  4050e6:	d002      	beq.n	4050ee <_svfprintf_r+0x13ca>
  4050e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4050ea:	3301      	adds	r3, #1
  4050ec:	e7df      	b.n	4050ae <_svfprintf_r+0x138a>
  4050ee:	2301      	movs	r3, #1
  4050f0:	e74b      	b.n	404f8a <_svfprintf_r+0x1266>
  4050f2:	bf00      	nop
  4050f4:	66666667 	.word	0x66666667
  4050f8:	00407ce0 	.word	0x00407ce0
  4050fc:	00407cfc 	.word	0x00407cfc
  405100:	00407cb4 	.word	0x00407cb4
  405104:	00407cb0 	.word	0x00407cb0
  405108:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40510a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40510e:	6828      	ldr	r0, [r5, #0]
  405110:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405114:	900a      	str	r0, [sp, #40]	; 0x28
  405116:	4628      	mov	r0, r5
  405118:	3004      	adds	r0, #4
  40511a:	46a2      	mov	sl, r4
  40511c:	900f      	str	r0, [sp, #60]	; 0x3c
  40511e:	f7fe be59 	b.w	403dd4 <_svfprintf_r+0xb0>
  405122:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405126:	f7ff b86f 	b.w	404208 <_svfprintf_r+0x4e4>
  40512a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40512e:	f7ff ba1c 	b.w	40456a <_svfprintf_r+0x846>
  405132:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405136:	e6ac      	b.n	404e92 <_svfprintf_r+0x116e>
  405138:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40513c:	f7ff b8f3 	b.w	404326 <_svfprintf_r+0x602>
  405140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405142:	230c      	movs	r3, #12
  405144:	6013      	str	r3, [r2, #0]
  405146:	f04f 33ff 	mov.w	r3, #4294967295
  40514a:	9309      	str	r3, [sp, #36]	; 0x24
  40514c:	f7fe bec5 	b.w	403eda <_svfprintf_r+0x1b6>
  405150:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405154:	f7ff b9a2 	b.w	40449c <_svfprintf_r+0x778>
  405158:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40515c:	f7ff b97e 	b.w	40445c <_svfprintf_r+0x738>
  405160:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405164:	f7ff b961 	b.w	40442a <_svfprintf_r+0x706>
  405168:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40516c:	f7ff b91a 	b.w	4043a4 <_svfprintf_r+0x680>

00405170 <register_fini>:
  405170:	4b02      	ldr	r3, [pc, #8]	; (40517c <register_fini+0xc>)
  405172:	b113      	cbz	r3, 40517a <register_fini+0xa>
  405174:	4802      	ldr	r0, [pc, #8]	; (405180 <register_fini+0x10>)
  405176:	f000 b805 	b.w	405184 <atexit>
  40517a:	4770      	bx	lr
  40517c:	00000000 	.word	0x00000000
  405180:	0040610d 	.word	0x0040610d

00405184 <atexit>:
  405184:	2300      	movs	r3, #0
  405186:	4601      	mov	r1, r0
  405188:	461a      	mov	r2, r3
  40518a:	4618      	mov	r0, r3
  40518c:	f002 bb1c 	b.w	4077c8 <__register_exitproc>

00405190 <quorem>:
  405190:	6902      	ldr	r2, [r0, #16]
  405192:	690b      	ldr	r3, [r1, #16]
  405194:	4293      	cmp	r3, r2
  405196:	f300 808d 	bgt.w	4052b4 <quorem+0x124>
  40519a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40519e:	f103 38ff 	add.w	r8, r3, #4294967295
  4051a2:	f101 0714 	add.w	r7, r1, #20
  4051a6:	f100 0b14 	add.w	fp, r0, #20
  4051aa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4051ae:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4051b2:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4051b6:	b083      	sub	sp, #12
  4051b8:	3201      	adds	r2, #1
  4051ba:	fbb3 f9f2 	udiv	r9, r3, r2
  4051be:	eb0b 0304 	add.w	r3, fp, r4
  4051c2:	9400      	str	r4, [sp, #0]
  4051c4:	eb07 0a04 	add.w	sl, r7, r4
  4051c8:	9301      	str	r3, [sp, #4]
  4051ca:	f1b9 0f00 	cmp.w	r9, #0
  4051ce:	d039      	beq.n	405244 <quorem+0xb4>
  4051d0:	2500      	movs	r5, #0
  4051d2:	462e      	mov	r6, r5
  4051d4:	46bc      	mov	ip, r7
  4051d6:	46de      	mov	lr, fp
  4051d8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4051dc:	f8de 3000 	ldr.w	r3, [lr]
  4051e0:	b2a2      	uxth	r2, r4
  4051e2:	fb09 5502 	mla	r5, r9, r2, r5
  4051e6:	0c22      	lsrs	r2, r4, #16
  4051e8:	0c2c      	lsrs	r4, r5, #16
  4051ea:	fb09 4202 	mla	r2, r9, r2, r4
  4051ee:	b2ad      	uxth	r5, r5
  4051f0:	1b75      	subs	r5, r6, r5
  4051f2:	b296      	uxth	r6, r2
  4051f4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4051f8:	fa15 f383 	uxtah	r3, r5, r3
  4051fc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405200:	b29b      	uxth	r3, r3
  405202:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405206:	45e2      	cmp	sl, ip
  405208:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40520c:	f84e 3b04 	str.w	r3, [lr], #4
  405210:	ea4f 4626 	mov.w	r6, r6, asr #16
  405214:	d2e0      	bcs.n	4051d8 <quorem+0x48>
  405216:	9b00      	ldr	r3, [sp, #0]
  405218:	f85b 3003 	ldr.w	r3, [fp, r3]
  40521c:	b993      	cbnz	r3, 405244 <quorem+0xb4>
  40521e:	9c01      	ldr	r4, [sp, #4]
  405220:	1f23      	subs	r3, r4, #4
  405222:	459b      	cmp	fp, r3
  405224:	d20c      	bcs.n	405240 <quorem+0xb0>
  405226:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40522a:	b94b      	cbnz	r3, 405240 <quorem+0xb0>
  40522c:	f1a4 0308 	sub.w	r3, r4, #8
  405230:	e002      	b.n	405238 <quorem+0xa8>
  405232:	681a      	ldr	r2, [r3, #0]
  405234:	3b04      	subs	r3, #4
  405236:	b91a      	cbnz	r2, 405240 <quorem+0xb0>
  405238:	459b      	cmp	fp, r3
  40523a:	f108 38ff 	add.w	r8, r8, #4294967295
  40523e:	d3f8      	bcc.n	405232 <quorem+0xa2>
  405240:	f8c0 8010 	str.w	r8, [r0, #16]
  405244:	4604      	mov	r4, r0
  405246:	f001 ff0b 	bl	407060 <__mcmp>
  40524a:	2800      	cmp	r0, #0
  40524c:	db2e      	blt.n	4052ac <quorem+0x11c>
  40524e:	f109 0901 	add.w	r9, r9, #1
  405252:	465d      	mov	r5, fp
  405254:	2300      	movs	r3, #0
  405256:	f857 1b04 	ldr.w	r1, [r7], #4
  40525a:	6828      	ldr	r0, [r5, #0]
  40525c:	b28a      	uxth	r2, r1
  40525e:	1a9a      	subs	r2, r3, r2
  405260:	0c0b      	lsrs	r3, r1, #16
  405262:	fa12 f280 	uxtah	r2, r2, r0
  405266:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40526a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40526e:	b292      	uxth	r2, r2
  405270:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405274:	45ba      	cmp	sl, r7
  405276:	f845 2b04 	str.w	r2, [r5], #4
  40527a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40527e:	d2ea      	bcs.n	405256 <quorem+0xc6>
  405280:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405284:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405288:	b982      	cbnz	r2, 4052ac <quorem+0x11c>
  40528a:	1f1a      	subs	r2, r3, #4
  40528c:	4593      	cmp	fp, r2
  40528e:	d20b      	bcs.n	4052a8 <quorem+0x118>
  405290:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405294:	b942      	cbnz	r2, 4052a8 <quorem+0x118>
  405296:	3b08      	subs	r3, #8
  405298:	e002      	b.n	4052a0 <quorem+0x110>
  40529a:	681a      	ldr	r2, [r3, #0]
  40529c:	3b04      	subs	r3, #4
  40529e:	b91a      	cbnz	r2, 4052a8 <quorem+0x118>
  4052a0:	459b      	cmp	fp, r3
  4052a2:	f108 38ff 	add.w	r8, r8, #4294967295
  4052a6:	d3f8      	bcc.n	40529a <quorem+0x10a>
  4052a8:	f8c4 8010 	str.w	r8, [r4, #16]
  4052ac:	4648      	mov	r0, r9
  4052ae:	b003      	add	sp, #12
  4052b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052b4:	2000      	movs	r0, #0
  4052b6:	4770      	bx	lr

004052b8 <_dtoa_r>:
  4052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4052be:	b09b      	sub	sp, #108	; 0x6c
  4052c0:	4604      	mov	r4, r0
  4052c2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4052c4:	4692      	mov	sl, r2
  4052c6:	469b      	mov	fp, r3
  4052c8:	b141      	cbz	r1, 4052dc <_dtoa_r+0x24>
  4052ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4052cc:	604a      	str	r2, [r1, #4]
  4052ce:	2301      	movs	r3, #1
  4052d0:	4093      	lsls	r3, r2
  4052d2:	608b      	str	r3, [r1, #8]
  4052d4:	f001 fcec 	bl	406cb0 <_Bfree>
  4052d8:	2300      	movs	r3, #0
  4052da:	6423      	str	r3, [r4, #64]	; 0x40
  4052dc:	f1bb 0f00 	cmp.w	fp, #0
  4052e0:	465d      	mov	r5, fp
  4052e2:	db35      	blt.n	405350 <_dtoa_r+0x98>
  4052e4:	2300      	movs	r3, #0
  4052e6:	6033      	str	r3, [r6, #0]
  4052e8:	4b9d      	ldr	r3, [pc, #628]	; (405560 <_dtoa_r+0x2a8>)
  4052ea:	43ab      	bics	r3, r5
  4052ec:	d015      	beq.n	40531a <_dtoa_r+0x62>
  4052ee:	4650      	mov	r0, sl
  4052f0:	4659      	mov	r1, fp
  4052f2:	2200      	movs	r2, #0
  4052f4:	2300      	movs	r3, #0
  4052f6:	f002 fb3f 	bl	407978 <__aeabi_dcmpeq>
  4052fa:	4680      	mov	r8, r0
  4052fc:	2800      	cmp	r0, #0
  4052fe:	d02d      	beq.n	40535c <_dtoa_r+0xa4>
  405300:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405302:	2301      	movs	r3, #1
  405304:	6013      	str	r3, [r2, #0]
  405306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405308:	2b00      	cmp	r3, #0
  40530a:	f000 80bd 	beq.w	405488 <_dtoa_r+0x1d0>
  40530e:	4895      	ldr	r0, [pc, #596]	; (405564 <_dtoa_r+0x2ac>)
  405310:	6018      	str	r0, [r3, #0]
  405312:	3801      	subs	r0, #1
  405314:	b01b      	add	sp, #108	; 0x6c
  405316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40531a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40531c:	f242 730f 	movw	r3, #9999	; 0x270f
  405320:	6013      	str	r3, [r2, #0]
  405322:	f1ba 0f00 	cmp.w	sl, #0
  405326:	d10d      	bne.n	405344 <_dtoa_r+0x8c>
  405328:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40532c:	b955      	cbnz	r5, 405344 <_dtoa_r+0x8c>
  40532e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405330:	488d      	ldr	r0, [pc, #564]	; (405568 <_dtoa_r+0x2b0>)
  405332:	2b00      	cmp	r3, #0
  405334:	d0ee      	beq.n	405314 <_dtoa_r+0x5c>
  405336:	f100 0308 	add.w	r3, r0, #8
  40533a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40533c:	6013      	str	r3, [r2, #0]
  40533e:	b01b      	add	sp, #108	; 0x6c
  405340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405344:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405346:	4889      	ldr	r0, [pc, #548]	; (40556c <_dtoa_r+0x2b4>)
  405348:	2b00      	cmp	r3, #0
  40534a:	d0e3      	beq.n	405314 <_dtoa_r+0x5c>
  40534c:	1cc3      	adds	r3, r0, #3
  40534e:	e7f4      	b.n	40533a <_dtoa_r+0x82>
  405350:	2301      	movs	r3, #1
  405352:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405356:	6033      	str	r3, [r6, #0]
  405358:	46ab      	mov	fp, r5
  40535a:	e7c5      	b.n	4052e8 <_dtoa_r+0x30>
  40535c:	aa18      	add	r2, sp, #96	; 0x60
  40535e:	ab19      	add	r3, sp, #100	; 0x64
  405360:	9201      	str	r2, [sp, #4]
  405362:	9300      	str	r3, [sp, #0]
  405364:	4652      	mov	r2, sl
  405366:	465b      	mov	r3, fp
  405368:	4620      	mov	r0, r4
  40536a:	f001 ff19 	bl	4071a0 <__d2b>
  40536e:	0d2b      	lsrs	r3, r5, #20
  405370:	4681      	mov	r9, r0
  405372:	d071      	beq.n	405458 <_dtoa_r+0x1a0>
  405374:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405378:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40537c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40537e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405382:	4650      	mov	r0, sl
  405384:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405388:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40538c:	2200      	movs	r2, #0
  40538e:	4b78      	ldr	r3, [pc, #480]	; (405570 <_dtoa_r+0x2b8>)
  405390:	f7fd fbf8 	bl	402b84 <__aeabi_dsub>
  405394:	a36c      	add	r3, pc, #432	; (adr r3, 405548 <_dtoa_r+0x290>)
  405396:	e9d3 2300 	ldrd	r2, r3, [r3]
  40539a:	f7fd fda7 	bl	402eec <__aeabi_dmul>
  40539e:	a36c      	add	r3, pc, #432	; (adr r3, 405550 <_dtoa_r+0x298>)
  4053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053a4:	f7fd fbf0 	bl	402b88 <__adddf3>
  4053a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4053ac:	4630      	mov	r0, r6
  4053ae:	f7fd fd37 	bl	402e20 <__aeabi_i2d>
  4053b2:	a369      	add	r3, pc, #420	; (adr r3, 405558 <_dtoa_r+0x2a0>)
  4053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053b8:	f7fd fd98 	bl	402eec <__aeabi_dmul>
  4053bc:	4602      	mov	r2, r0
  4053be:	460b      	mov	r3, r1
  4053c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4053c4:	f7fd fbe0 	bl	402b88 <__adddf3>
  4053c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4053cc:	f002 fb1c 	bl	407a08 <__aeabi_d2iz>
  4053d0:	2200      	movs	r2, #0
  4053d2:	9002      	str	r0, [sp, #8]
  4053d4:	2300      	movs	r3, #0
  4053d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4053da:	f002 fad7 	bl	40798c <__aeabi_dcmplt>
  4053de:	2800      	cmp	r0, #0
  4053e0:	f040 8173 	bne.w	4056ca <_dtoa_r+0x412>
  4053e4:	9d02      	ldr	r5, [sp, #8]
  4053e6:	2d16      	cmp	r5, #22
  4053e8:	f200 815d 	bhi.w	4056a6 <_dtoa_r+0x3ee>
  4053ec:	4b61      	ldr	r3, [pc, #388]	; (405574 <_dtoa_r+0x2bc>)
  4053ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4053f2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4053f6:	4652      	mov	r2, sl
  4053f8:	465b      	mov	r3, fp
  4053fa:	f002 fae5 	bl	4079c8 <__aeabi_dcmpgt>
  4053fe:	2800      	cmp	r0, #0
  405400:	f000 81c5 	beq.w	40578e <_dtoa_r+0x4d6>
  405404:	1e6b      	subs	r3, r5, #1
  405406:	9302      	str	r3, [sp, #8]
  405408:	2300      	movs	r3, #0
  40540a:	930e      	str	r3, [sp, #56]	; 0x38
  40540c:	1bbf      	subs	r7, r7, r6
  40540e:	1e7b      	subs	r3, r7, #1
  405410:	9306      	str	r3, [sp, #24]
  405412:	f100 8154 	bmi.w	4056be <_dtoa_r+0x406>
  405416:	2300      	movs	r3, #0
  405418:	9308      	str	r3, [sp, #32]
  40541a:	9b02      	ldr	r3, [sp, #8]
  40541c:	2b00      	cmp	r3, #0
  40541e:	f2c0 8145 	blt.w	4056ac <_dtoa_r+0x3f4>
  405422:	9a06      	ldr	r2, [sp, #24]
  405424:	930d      	str	r3, [sp, #52]	; 0x34
  405426:	4611      	mov	r1, r2
  405428:	4419      	add	r1, r3
  40542a:	2300      	movs	r3, #0
  40542c:	9106      	str	r1, [sp, #24]
  40542e:	930c      	str	r3, [sp, #48]	; 0x30
  405430:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405432:	2b09      	cmp	r3, #9
  405434:	d82a      	bhi.n	40548c <_dtoa_r+0x1d4>
  405436:	2b05      	cmp	r3, #5
  405438:	f340 865b 	ble.w	4060f2 <_dtoa_r+0xe3a>
  40543c:	3b04      	subs	r3, #4
  40543e:	9324      	str	r3, [sp, #144]	; 0x90
  405440:	2500      	movs	r5, #0
  405442:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405444:	3b02      	subs	r3, #2
  405446:	2b03      	cmp	r3, #3
  405448:	f200 8642 	bhi.w	4060d0 <_dtoa_r+0xe18>
  40544c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405450:	02c903d4 	.word	0x02c903d4
  405454:	046103df 	.word	0x046103df
  405458:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40545a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40545c:	443e      	add	r6, r7
  40545e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405462:	2b20      	cmp	r3, #32
  405464:	f340 818e 	ble.w	405784 <_dtoa_r+0x4cc>
  405468:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40546c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405470:	409d      	lsls	r5, r3
  405472:	fa2a f000 	lsr.w	r0, sl, r0
  405476:	4328      	orrs	r0, r5
  405478:	f7fd fcc2 	bl	402e00 <__aeabi_ui2d>
  40547c:	2301      	movs	r3, #1
  40547e:	3e01      	subs	r6, #1
  405480:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405484:	9314      	str	r3, [sp, #80]	; 0x50
  405486:	e781      	b.n	40538c <_dtoa_r+0xd4>
  405488:	483b      	ldr	r0, [pc, #236]	; (405578 <_dtoa_r+0x2c0>)
  40548a:	e743      	b.n	405314 <_dtoa_r+0x5c>
  40548c:	2100      	movs	r1, #0
  40548e:	6461      	str	r1, [r4, #68]	; 0x44
  405490:	4620      	mov	r0, r4
  405492:	9125      	str	r1, [sp, #148]	; 0x94
  405494:	f001 fbe6 	bl	406c64 <_Balloc>
  405498:	f04f 33ff 	mov.w	r3, #4294967295
  40549c:	930a      	str	r3, [sp, #40]	; 0x28
  40549e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4054a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4054a2:	2301      	movs	r3, #1
  4054a4:	9004      	str	r0, [sp, #16]
  4054a6:	6420      	str	r0, [r4, #64]	; 0x40
  4054a8:	9224      	str	r2, [sp, #144]	; 0x90
  4054aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4054ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4054ae:	2b00      	cmp	r3, #0
  4054b0:	f2c0 80d9 	blt.w	405666 <_dtoa_r+0x3ae>
  4054b4:	9a02      	ldr	r2, [sp, #8]
  4054b6:	2a0e      	cmp	r2, #14
  4054b8:	f300 80d5 	bgt.w	405666 <_dtoa_r+0x3ae>
  4054bc:	4b2d      	ldr	r3, [pc, #180]	; (405574 <_dtoa_r+0x2bc>)
  4054be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4054ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054cc:	2b00      	cmp	r3, #0
  4054ce:	f2c0 83ba 	blt.w	405c46 <_dtoa_r+0x98e>
  4054d2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4054d6:	4650      	mov	r0, sl
  4054d8:	462a      	mov	r2, r5
  4054da:	4633      	mov	r3, r6
  4054dc:	4659      	mov	r1, fp
  4054de:	f7fd fe2f 	bl	403140 <__aeabi_ddiv>
  4054e2:	f002 fa91 	bl	407a08 <__aeabi_d2iz>
  4054e6:	4680      	mov	r8, r0
  4054e8:	f7fd fc9a 	bl	402e20 <__aeabi_i2d>
  4054ec:	462a      	mov	r2, r5
  4054ee:	4633      	mov	r3, r6
  4054f0:	f7fd fcfc 	bl	402eec <__aeabi_dmul>
  4054f4:	460b      	mov	r3, r1
  4054f6:	4602      	mov	r2, r0
  4054f8:	4659      	mov	r1, fp
  4054fa:	4650      	mov	r0, sl
  4054fc:	f7fd fb42 	bl	402b84 <__aeabi_dsub>
  405500:	9d04      	ldr	r5, [sp, #16]
  405502:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405506:	702b      	strb	r3, [r5, #0]
  405508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40550a:	2b01      	cmp	r3, #1
  40550c:	4606      	mov	r6, r0
  40550e:	460f      	mov	r7, r1
  405510:	f105 0501 	add.w	r5, r5, #1
  405514:	d068      	beq.n	4055e8 <_dtoa_r+0x330>
  405516:	2200      	movs	r2, #0
  405518:	4b18      	ldr	r3, [pc, #96]	; (40557c <_dtoa_r+0x2c4>)
  40551a:	f7fd fce7 	bl	402eec <__aeabi_dmul>
  40551e:	2200      	movs	r2, #0
  405520:	2300      	movs	r3, #0
  405522:	4606      	mov	r6, r0
  405524:	460f      	mov	r7, r1
  405526:	f002 fa27 	bl	407978 <__aeabi_dcmpeq>
  40552a:	2800      	cmp	r0, #0
  40552c:	f040 8088 	bne.w	405640 <_dtoa_r+0x388>
  405530:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405534:	f04f 0a00 	mov.w	sl, #0
  405538:	f8df b040 	ldr.w	fp, [pc, #64]	; 40557c <_dtoa_r+0x2c4>
  40553c:	940c      	str	r4, [sp, #48]	; 0x30
  40553e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405542:	e028      	b.n	405596 <_dtoa_r+0x2de>
  405544:	f3af 8000 	nop.w
  405548:	636f4361 	.word	0x636f4361
  40554c:	3fd287a7 	.word	0x3fd287a7
  405550:	8b60c8b3 	.word	0x8b60c8b3
  405554:	3fc68a28 	.word	0x3fc68a28
  405558:	509f79fb 	.word	0x509f79fb
  40555c:	3fd34413 	.word	0x3fd34413
  405560:	7ff00000 	.word	0x7ff00000
  405564:	00407ce9 	.word	0x00407ce9
  405568:	00407d0c 	.word	0x00407d0c
  40556c:	00407d18 	.word	0x00407d18
  405570:	3ff80000 	.word	0x3ff80000
  405574:	00407d58 	.word	0x00407d58
  405578:	00407ce8 	.word	0x00407ce8
  40557c:	40240000 	.word	0x40240000
  405580:	f7fd fcb4 	bl	402eec <__aeabi_dmul>
  405584:	2200      	movs	r2, #0
  405586:	2300      	movs	r3, #0
  405588:	4606      	mov	r6, r0
  40558a:	460f      	mov	r7, r1
  40558c:	f002 f9f4 	bl	407978 <__aeabi_dcmpeq>
  405590:	2800      	cmp	r0, #0
  405592:	f040 83c1 	bne.w	405d18 <_dtoa_r+0xa60>
  405596:	4642      	mov	r2, r8
  405598:	464b      	mov	r3, r9
  40559a:	4630      	mov	r0, r6
  40559c:	4639      	mov	r1, r7
  40559e:	f7fd fdcf 	bl	403140 <__aeabi_ddiv>
  4055a2:	f002 fa31 	bl	407a08 <__aeabi_d2iz>
  4055a6:	4604      	mov	r4, r0
  4055a8:	f7fd fc3a 	bl	402e20 <__aeabi_i2d>
  4055ac:	4642      	mov	r2, r8
  4055ae:	464b      	mov	r3, r9
  4055b0:	f7fd fc9c 	bl	402eec <__aeabi_dmul>
  4055b4:	4602      	mov	r2, r0
  4055b6:	460b      	mov	r3, r1
  4055b8:	4630      	mov	r0, r6
  4055ba:	4639      	mov	r1, r7
  4055bc:	f7fd fae2 	bl	402b84 <__aeabi_dsub>
  4055c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4055c4:	9e04      	ldr	r6, [sp, #16]
  4055c6:	f805 eb01 	strb.w	lr, [r5], #1
  4055ca:	eba5 0e06 	sub.w	lr, r5, r6
  4055ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4055d0:	45b6      	cmp	lr, r6
  4055d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4055d6:	4652      	mov	r2, sl
  4055d8:	465b      	mov	r3, fp
  4055da:	d1d1      	bne.n	405580 <_dtoa_r+0x2c8>
  4055dc:	46a0      	mov	r8, r4
  4055de:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4055e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4055e4:	4606      	mov	r6, r0
  4055e6:	460f      	mov	r7, r1
  4055e8:	4632      	mov	r2, r6
  4055ea:	463b      	mov	r3, r7
  4055ec:	4630      	mov	r0, r6
  4055ee:	4639      	mov	r1, r7
  4055f0:	f7fd faca 	bl	402b88 <__adddf3>
  4055f4:	4606      	mov	r6, r0
  4055f6:	460f      	mov	r7, r1
  4055f8:	4602      	mov	r2, r0
  4055fa:	460b      	mov	r3, r1
  4055fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405600:	f002 f9c4 	bl	40798c <__aeabi_dcmplt>
  405604:	b948      	cbnz	r0, 40561a <_dtoa_r+0x362>
  405606:	4632      	mov	r2, r6
  405608:	463b      	mov	r3, r7
  40560a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40560e:	f002 f9b3 	bl	407978 <__aeabi_dcmpeq>
  405612:	b1a8      	cbz	r0, 405640 <_dtoa_r+0x388>
  405614:	f018 0f01 	tst.w	r8, #1
  405618:	d012      	beq.n	405640 <_dtoa_r+0x388>
  40561a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40561e:	9a04      	ldr	r2, [sp, #16]
  405620:	1e6b      	subs	r3, r5, #1
  405622:	e004      	b.n	40562e <_dtoa_r+0x376>
  405624:	429a      	cmp	r2, r3
  405626:	f000 8401 	beq.w	405e2c <_dtoa_r+0xb74>
  40562a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40562e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405632:	f103 0501 	add.w	r5, r3, #1
  405636:	d0f5      	beq.n	405624 <_dtoa_r+0x36c>
  405638:	f108 0801 	add.w	r8, r8, #1
  40563c:	f883 8000 	strb.w	r8, [r3]
  405640:	4649      	mov	r1, r9
  405642:	4620      	mov	r0, r4
  405644:	f001 fb34 	bl	406cb0 <_Bfree>
  405648:	2200      	movs	r2, #0
  40564a:	9b02      	ldr	r3, [sp, #8]
  40564c:	702a      	strb	r2, [r5, #0]
  40564e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405650:	3301      	adds	r3, #1
  405652:	6013      	str	r3, [r2, #0]
  405654:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405656:	2b00      	cmp	r3, #0
  405658:	f000 839e 	beq.w	405d98 <_dtoa_r+0xae0>
  40565c:	9804      	ldr	r0, [sp, #16]
  40565e:	601d      	str	r5, [r3, #0]
  405660:	b01b      	add	sp, #108	; 0x6c
  405662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405668:	2a00      	cmp	r2, #0
  40566a:	d03e      	beq.n	4056ea <_dtoa_r+0x432>
  40566c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40566e:	2a01      	cmp	r2, #1
  405670:	f340 8311 	ble.w	405c96 <_dtoa_r+0x9de>
  405674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405678:	1e5f      	subs	r7, r3, #1
  40567a:	42ba      	cmp	r2, r7
  40567c:	f2c0 838f 	blt.w	405d9e <_dtoa_r+0xae6>
  405680:	1bd7      	subs	r7, r2, r7
  405682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405684:	2b00      	cmp	r3, #0
  405686:	f2c0 848b 	blt.w	405fa0 <_dtoa_r+0xce8>
  40568a:	9d08      	ldr	r5, [sp, #32]
  40568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40568e:	9a08      	ldr	r2, [sp, #32]
  405690:	441a      	add	r2, r3
  405692:	9208      	str	r2, [sp, #32]
  405694:	9a06      	ldr	r2, [sp, #24]
  405696:	2101      	movs	r1, #1
  405698:	441a      	add	r2, r3
  40569a:	4620      	mov	r0, r4
  40569c:	9206      	str	r2, [sp, #24]
  40569e:	f001 fba1 	bl	406de4 <__i2b>
  4056a2:	4606      	mov	r6, r0
  4056a4:	e024      	b.n	4056f0 <_dtoa_r+0x438>
  4056a6:	2301      	movs	r3, #1
  4056a8:	930e      	str	r3, [sp, #56]	; 0x38
  4056aa:	e6af      	b.n	40540c <_dtoa_r+0x154>
  4056ac:	9a08      	ldr	r2, [sp, #32]
  4056ae:	9b02      	ldr	r3, [sp, #8]
  4056b0:	1ad2      	subs	r2, r2, r3
  4056b2:	425b      	negs	r3, r3
  4056b4:	930c      	str	r3, [sp, #48]	; 0x30
  4056b6:	2300      	movs	r3, #0
  4056b8:	9208      	str	r2, [sp, #32]
  4056ba:	930d      	str	r3, [sp, #52]	; 0x34
  4056bc:	e6b8      	b.n	405430 <_dtoa_r+0x178>
  4056be:	f1c7 0301 	rsb	r3, r7, #1
  4056c2:	9308      	str	r3, [sp, #32]
  4056c4:	2300      	movs	r3, #0
  4056c6:	9306      	str	r3, [sp, #24]
  4056c8:	e6a7      	b.n	40541a <_dtoa_r+0x162>
  4056ca:	9d02      	ldr	r5, [sp, #8]
  4056cc:	4628      	mov	r0, r5
  4056ce:	f7fd fba7 	bl	402e20 <__aeabi_i2d>
  4056d2:	4602      	mov	r2, r0
  4056d4:	460b      	mov	r3, r1
  4056d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4056da:	f002 f94d 	bl	407978 <__aeabi_dcmpeq>
  4056de:	2800      	cmp	r0, #0
  4056e0:	f47f ae80 	bne.w	4053e4 <_dtoa_r+0x12c>
  4056e4:	1e6b      	subs	r3, r5, #1
  4056e6:	9302      	str	r3, [sp, #8]
  4056e8:	e67c      	b.n	4053e4 <_dtoa_r+0x12c>
  4056ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4056ec:	9d08      	ldr	r5, [sp, #32]
  4056ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4056f0:	2d00      	cmp	r5, #0
  4056f2:	dd0c      	ble.n	40570e <_dtoa_r+0x456>
  4056f4:	9906      	ldr	r1, [sp, #24]
  4056f6:	2900      	cmp	r1, #0
  4056f8:	460b      	mov	r3, r1
  4056fa:	dd08      	ble.n	40570e <_dtoa_r+0x456>
  4056fc:	42a9      	cmp	r1, r5
  4056fe:	9a08      	ldr	r2, [sp, #32]
  405700:	bfa8      	it	ge
  405702:	462b      	movge	r3, r5
  405704:	1ad2      	subs	r2, r2, r3
  405706:	1aed      	subs	r5, r5, r3
  405708:	1acb      	subs	r3, r1, r3
  40570a:	9208      	str	r2, [sp, #32]
  40570c:	9306      	str	r3, [sp, #24]
  40570e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405710:	b1d3      	cbz	r3, 405748 <_dtoa_r+0x490>
  405712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405714:	2b00      	cmp	r3, #0
  405716:	f000 82b7 	beq.w	405c88 <_dtoa_r+0x9d0>
  40571a:	2f00      	cmp	r7, #0
  40571c:	dd10      	ble.n	405740 <_dtoa_r+0x488>
  40571e:	4631      	mov	r1, r6
  405720:	463a      	mov	r2, r7
  405722:	4620      	mov	r0, r4
  405724:	f001 fbfa 	bl	406f1c <__pow5mult>
  405728:	464a      	mov	r2, r9
  40572a:	4601      	mov	r1, r0
  40572c:	4606      	mov	r6, r0
  40572e:	4620      	mov	r0, r4
  405730:	f001 fb62 	bl	406df8 <__multiply>
  405734:	4649      	mov	r1, r9
  405736:	4680      	mov	r8, r0
  405738:	4620      	mov	r0, r4
  40573a:	f001 fab9 	bl	406cb0 <_Bfree>
  40573e:	46c1      	mov	r9, r8
  405740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405742:	1bda      	subs	r2, r3, r7
  405744:	f040 82a1 	bne.w	405c8a <_dtoa_r+0x9d2>
  405748:	2101      	movs	r1, #1
  40574a:	4620      	mov	r0, r4
  40574c:	f001 fb4a 	bl	406de4 <__i2b>
  405750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405752:	2b00      	cmp	r3, #0
  405754:	4680      	mov	r8, r0
  405756:	dd1c      	ble.n	405792 <_dtoa_r+0x4da>
  405758:	4601      	mov	r1, r0
  40575a:	461a      	mov	r2, r3
  40575c:	4620      	mov	r0, r4
  40575e:	f001 fbdd 	bl	406f1c <__pow5mult>
  405762:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405764:	2b01      	cmp	r3, #1
  405766:	4680      	mov	r8, r0
  405768:	f340 8254 	ble.w	405c14 <_dtoa_r+0x95c>
  40576c:	2300      	movs	r3, #0
  40576e:	930c      	str	r3, [sp, #48]	; 0x30
  405770:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405774:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405778:	6918      	ldr	r0, [r3, #16]
  40577a:	f001 fae3 	bl	406d44 <__hi0bits>
  40577e:	f1c0 0020 	rsb	r0, r0, #32
  405782:	e010      	b.n	4057a6 <_dtoa_r+0x4ee>
  405784:	f1c3 0520 	rsb	r5, r3, #32
  405788:	fa0a f005 	lsl.w	r0, sl, r5
  40578c:	e674      	b.n	405478 <_dtoa_r+0x1c0>
  40578e:	900e      	str	r0, [sp, #56]	; 0x38
  405790:	e63c      	b.n	40540c <_dtoa_r+0x154>
  405792:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405794:	2b01      	cmp	r3, #1
  405796:	f340 8287 	ble.w	405ca8 <_dtoa_r+0x9f0>
  40579a:	2300      	movs	r3, #0
  40579c:	930c      	str	r3, [sp, #48]	; 0x30
  40579e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4057a0:	2001      	movs	r0, #1
  4057a2:	2b00      	cmp	r3, #0
  4057a4:	d1e4      	bne.n	405770 <_dtoa_r+0x4b8>
  4057a6:	9a06      	ldr	r2, [sp, #24]
  4057a8:	4410      	add	r0, r2
  4057aa:	f010 001f 	ands.w	r0, r0, #31
  4057ae:	f000 80a1 	beq.w	4058f4 <_dtoa_r+0x63c>
  4057b2:	f1c0 0320 	rsb	r3, r0, #32
  4057b6:	2b04      	cmp	r3, #4
  4057b8:	f340 849e 	ble.w	4060f8 <_dtoa_r+0xe40>
  4057bc:	9b08      	ldr	r3, [sp, #32]
  4057be:	f1c0 001c 	rsb	r0, r0, #28
  4057c2:	4403      	add	r3, r0
  4057c4:	9308      	str	r3, [sp, #32]
  4057c6:	4613      	mov	r3, r2
  4057c8:	4403      	add	r3, r0
  4057ca:	4405      	add	r5, r0
  4057cc:	9306      	str	r3, [sp, #24]
  4057ce:	9b08      	ldr	r3, [sp, #32]
  4057d0:	2b00      	cmp	r3, #0
  4057d2:	dd05      	ble.n	4057e0 <_dtoa_r+0x528>
  4057d4:	4649      	mov	r1, r9
  4057d6:	461a      	mov	r2, r3
  4057d8:	4620      	mov	r0, r4
  4057da:	f001 fbef 	bl	406fbc <__lshift>
  4057de:	4681      	mov	r9, r0
  4057e0:	9b06      	ldr	r3, [sp, #24]
  4057e2:	2b00      	cmp	r3, #0
  4057e4:	dd05      	ble.n	4057f2 <_dtoa_r+0x53a>
  4057e6:	4641      	mov	r1, r8
  4057e8:	461a      	mov	r2, r3
  4057ea:	4620      	mov	r0, r4
  4057ec:	f001 fbe6 	bl	406fbc <__lshift>
  4057f0:	4680      	mov	r8, r0
  4057f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4057f4:	2b00      	cmp	r3, #0
  4057f6:	f040 8086 	bne.w	405906 <_dtoa_r+0x64e>
  4057fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057fc:	2b00      	cmp	r3, #0
  4057fe:	f340 8266 	ble.w	405cce <_dtoa_r+0xa16>
  405802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405804:	2b00      	cmp	r3, #0
  405806:	f000 8098 	beq.w	40593a <_dtoa_r+0x682>
  40580a:	2d00      	cmp	r5, #0
  40580c:	dd05      	ble.n	40581a <_dtoa_r+0x562>
  40580e:	4631      	mov	r1, r6
  405810:	462a      	mov	r2, r5
  405812:	4620      	mov	r0, r4
  405814:	f001 fbd2 	bl	406fbc <__lshift>
  405818:	4606      	mov	r6, r0
  40581a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40581c:	2b00      	cmp	r3, #0
  40581e:	f040 8337 	bne.w	405e90 <_dtoa_r+0xbd8>
  405822:	9606      	str	r6, [sp, #24]
  405824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405826:	9a04      	ldr	r2, [sp, #16]
  405828:	f8dd b018 	ldr.w	fp, [sp, #24]
  40582c:	3b01      	subs	r3, #1
  40582e:	18d3      	adds	r3, r2, r3
  405830:	930b      	str	r3, [sp, #44]	; 0x2c
  405832:	f00a 0301 	and.w	r3, sl, #1
  405836:	930c      	str	r3, [sp, #48]	; 0x30
  405838:	4617      	mov	r7, r2
  40583a:	46c2      	mov	sl, r8
  40583c:	4651      	mov	r1, sl
  40583e:	4648      	mov	r0, r9
  405840:	f7ff fca6 	bl	405190 <quorem>
  405844:	4631      	mov	r1, r6
  405846:	4605      	mov	r5, r0
  405848:	4648      	mov	r0, r9
  40584a:	f001 fc09 	bl	407060 <__mcmp>
  40584e:	465a      	mov	r2, fp
  405850:	900a      	str	r0, [sp, #40]	; 0x28
  405852:	4651      	mov	r1, sl
  405854:	4620      	mov	r0, r4
  405856:	f001 fc1f 	bl	407098 <__mdiff>
  40585a:	68c2      	ldr	r2, [r0, #12]
  40585c:	4680      	mov	r8, r0
  40585e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405862:	2a00      	cmp	r2, #0
  405864:	f040 822b 	bne.w	405cbe <_dtoa_r+0xa06>
  405868:	4601      	mov	r1, r0
  40586a:	4648      	mov	r0, r9
  40586c:	9308      	str	r3, [sp, #32]
  40586e:	f001 fbf7 	bl	407060 <__mcmp>
  405872:	4641      	mov	r1, r8
  405874:	9006      	str	r0, [sp, #24]
  405876:	4620      	mov	r0, r4
  405878:	f001 fa1a 	bl	406cb0 <_Bfree>
  40587c:	9a06      	ldr	r2, [sp, #24]
  40587e:	9b08      	ldr	r3, [sp, #32]
  405880:	b932      	cbnz	r2, 405890 <_dtoa_r+0x5d8>
  405882:	9924      	ldr	r1, [sp, #144]	; 0x90
  405884:	b921      	cbnz	r1, 405890 <_dtoa_r+0x5d8>
  405886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405888:	2a00      	cmp	r2, #0
  40588a:	f000 83ef 	beq.w	40606c <_dtoa_r+0xdb4>
  40588e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405890:	990a      	ldr	r1, [sp, #40]	; 0x28
  405892:	2900      	cmp	r1, #0
  405894:	f2c0 829f 	blt.w	405dd6 <_dtoa_r+0xb1e>
  405898:	d105      	bne.n	4058a6 <_dtoa_r+0x5ee>
  40589a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40589c:	b919      	cbnz	r1, 4058a6 <_dtoa_r+0x5ee>
  40589e:	990c      	ldr	r1, [sp, #48]	; 0x30
  4058a0:	2900      	cmp	r1, #0
  4058a2:	f000 8298 	beq.w	405dd6 <_dtoa_r+0xb1e>
  4058a6:	2a00      	cmp	r2, #0
  4058a8:	f300 8306 	bgt.w	405eb8 <_dtoa_r+0xc00>
  4058ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4058ae:	703b      	strb	r3, [r7, #0]
  4058b0:	f107 0801 	add.w	r8, r7, #1
  4058b4:	4297      	cmp	r7, r2
  4058b6:	4645      	mov	r5, r8
  4058b8:	f000 830c 	beq.w	405ed4 <_dtoa_r+0xc1c>
  4058bc:	4649      	mov	r1, r9
  4058be:	2300      	movs	r3, #0
  4058c0:	220a      	movs	r2, #10
  4058c2:	4620      	mov	r0, r4
  4058c4:	f001 f9fe 	bl	406cc4 <__multadd>
  4058c8:	455e      	cmp	r6, fp
  4058ca:	4681      	mov	r9, r0
  4058cc:	4631      	mov	r1, r6
  4058ce:	f04f 0300 	mov.w	r3, #0
  4058d2:	f04f 020a 	mov.w	r2, #10
  4058d6:	4620      	mov	r0, r4
  4058d8:	f000 81eb 	beq.w	405cb2 <_dtoa_r+0x9fa>
  4058dc:	f001 f9f2 	bl	406cc4 <__multadd>
  4058e0:	4659      	mov	r1, fp
  4058e2:	4606      	mov	r6, r0
  4058e4:	2300      	movs	r3, #0
  4058e6:	220a      	movs	r2, #10
  4058e8:	4620      	mov	r0, r4
  4058ea:	f001 f9eb 	bl	406cc4 <__multadd>
  4058ee:	4647      	mov	r7, r8
  4058f0:	4683      	mov	fp, r0
  4058f2:	e7a3      	b.n	40583c <_dtoa_r+0x584>
  4058f4:	201c      	movs	r0, #28
  4058f6:	9b08      	ldr	r3, [sp, #32]
  4058f8:	4403      	add	r3, r0
  4058fa:	9308      	str	r3, [sp, #32]
  4058fc:	9b06      	ldr	r3, [sp, #24]
  4058fe:	4403      	add	r3, r0
  405900:	4405      	add	r5, r0
  405902:	9306      	str	r3, [sp, #24]
  405904:	e763      	b.n	4057ce <_dtoa_r+0x516>
  405906:	4641      	mov	r1, r8
  405908:	4648      	mov	r0, r9
  40590a:	f001 fba9 	bl	407060 <__mcmp>
  40590e:	2800      	cmp	r0, #0
  405910:	f6bf af73 	bge.w	4057fa <_dtoa_r+0x542>
  405914:	9f02      	ldr	r7, [sp, #8]
  405916:	4649      	mov	r1, r9
  405918:	2300      	movs	r3, #0
  40591a:	220a      	movs	r2, #10
  40591c:	4620      	mov	r0, r4
  40591e:	3f01      	subs	r7, #1
  405920:	9702      	str	r7, [sp, #8]
  405922:	f001 f9cf 	bl	406cc4 <__multadd>
  405926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405928:	4681      	mov	r9, r0
  40592a:	2b00      	cmp	r3, #0
  40592c:	f040 83b6 	bne.w	40609c <_dtoa_r+0xde4>
  405930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405932:	2b00      	cmp	r3, #0
  405934:	f340 83bf 	ble.w	4060b6 <_dtoa_r+0xdfe>
  405938:	930a      	str	r3, [sp, #40]	; 0x28
  40593a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40593e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405940:	465d      	mov	r5, fp
  405942:	e002      	b.n	40594a <_dtoa_r+0x692>
  405944:	f001 f9be 	bl	406cc4 <__multadd>
  405948:	4681      	mov	r9, r0
  40594a:	4641      	mov	r1, r8
  40594c:	4648      	mov	r0, r9
  40594e:	f7ff fc1f 	bl	405190 <quorem>
  405952:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405956:	f805 ab01 	strb.w	sl, [r5], #1
  40595a:	eba5 030b 	sub.w	r3, r5, fp
  40595e:	42bb      	cmp	r3, r7
  405960:	f04f 020a 	mov.w	r2, #10
  405964:	f04f 0300 	mov.w	r3, #0
  405968:	4649      	mov	r1, r9
  40596a:	4620      	mov	r0, r4
  40596c:	dbea      	blt.n	405944 <_dtoa_r+0x68c>
  40596e:	9b04      	ldr	r3, [sp, #16]
  405970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405972:	2a01      	cmp	r2, #1
  405974:	bfac      	ite	ge
  405976:	189b      	addge	r3, r3, r2
  405978:	3301      	addlt	r3, #1
  40597a:	461d      	mov	r5, r3
  40597c:	f04f 0b00 	mov.w	fp, #0
  405980:	4649      	mov	r1, r9
  405982:	2201      	movs	r2, #1
  405984:	4620      	mov	r0, r4
  405986:	f001 fb19 	bl	406fbc <__lshift>
  40598a:	4641      	mov	r1, r8
  40598c:	4681      	mov	r9, r0
  40598e:	f001 fb67 	bl	407060 <__mcmp>
  405992:	2800      	cmp	r0, #0
  405994:	f340 823d 	ble.w	405e12 <_dtoa_r+0xb5a>
  405998:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40599c:	9904      	ldr	r1, [sp, #16]
  40599e:	1e6b      	subs	r3, r5, #1
  4059a0:	e004      	b.n	4059ac <_dtoa_r+0x6f4>
  4059a2:	428b      	cmp	r3, r1
  4059a4:	f000 81ae 	beq.w	405d04 <_dtoa_r+0xa4c>
  4059a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4059ac:	2a39      	cmp	r2, #57	; 0x39
  4059ae:	f103 0501 	add.w	r5, r3, #1
  4059b2:	d0f6      	beq.n	4059a2 <_dtoa_r+0x6ea>
  4059b4:	3201      	adds	r2, #1
  4059b6:	701a      	strb	r2, [r3, #0]
  4059b8:	4641      	mov	r1, r8
  4059ba:	4620      	mov	r0, r4
  4059bc:	f001 f978 	bl	406cb0 <_Bfree>
  4059c0:	2e00      	cmp	r6, #0
  4059c2:	f43f ae3d 	beq.w	405640 <_dtoa_r+0x388>
  4059c6:	f1bb 0f00 	cmp.w	fp, #0
  4059ca:	d005      	beq.n	4059d8 <_dtoa_r+0x720>
  4059cc:	45b3      	cmp	fp, r6
  4059ce:	d003      	beq.n	4059d8 <_dtoa_r+0x720>
  4059d0:	4659      	mov	r1, fp
  4059d2:	4620      	mov	r0, r4
  4059d4:	f001 f96c 	bl	406cb0 <_Bfree>
  4059d8:	4631      	mov	r1, r6
  4059da:	4620      	mov	r0, r4
  4059dc:	f001 f968 	bl	406cb0 <_Bfree>
  4059e0:	e62e      	b.n	405640 <_dtoa_r+0x388>
  4059e2:	2300      	movs	r3, #0
  4059e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4059e6:	9b02      	ldr	r3, [sp, #8]
  4059e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4059ea:	4413      	add	r3, r2
  4059ec:	930f      	str	r3, [sp, #60]	; 0x3c
  4059ee:	3301      	adds	r3, #1
  4059f0:	2b01      	cmp	r3, #1
  4059f2:	461f      	mov	r7, r3
  4059f4:	461e      	mov	r6, r3
  4059f6:	930a      	str	r3, [sp, #40]	; 0x28
  4059f8:	bfb8      	it	lt
  4059fa:	2701      	movlt	r7, #1
  4059fc:	2100      	movs	r1, #0
  4059fe:	2f17      	cmp	r7, #23
  405a00:	6461      	str	r1, [r4, #68]	; 0x44
  405a02:	d90a      	bls.n	405a1a <_dtoa_r+0x762>
  405a04:	2201      	movs	r2, #1
  405a06:	2304      	movs	r3, #4
  405a08:	005b      	lsls	r3, r3, #1
  405a0a:	f103 0014 	add.w	r0, r3, #20
  405a0e:	4287      	cmp	r7, r0
  405a10:	4611      	mov	r1, r2
  405a12:	f102 0201 	add.w	r2, r2, #1
  405a16:	d2f7      	bcs.n	405a08 <_dtoa_r+0x750>
  405a18:	6461      	str	r1, [r4, #68]	; 0x44
  405a1a:	4620      	mov	r0, r4
  405a1c:	f001 f922 	bl	406c64 <_Balloc>
  405a20:	2e0e      	cmp	r6, #14
  405a22:	9004      	str	r0, [sp, #16]
  405a24:	6420      	str	r0, [r4, #64]	; 0x40
  405a26:	f63f ad41 	bhi.w	4054ac <_dtoa_r+0x1f4>
  405a2a:	2d00      	cmp	r5, #0
  405a2c:	f43f ad3e 	beq.w	4054ac <_dtoa_r+0x1f4>
  405a30:	9902      	ldr	r1, [sp, #8]
  405a32:	2900      	cmp	r1, #0
  405a34:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405a38:	f340 8202 	ble.w	405e40 <_dtoa_r+0xb88>
  405a3c:	4bb8      	ldr	r3, [pc, #736]	; (405d20 <_dtoa_r+0xa68>)
  405a3e:	f001 020f 	and.w	r2, r1, #15
  405a42:	110d      	asrs	r5, r1, #4
  405a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a48:	06e9      	lsls	r1, r5, #27
  405a4a:	e9d3 6700 	ldrd	r6, r7, [r3]
  405a4e:	f140 81ae 	bpl.w	405dae <_dtoa_r+0xaf6>
  405a52:	4bb4      	ldr	r3, [pc, #720]	; (405d24 <_dtoa_r+0xa6c>)
  405a54:	4650      	mov	r0, sl
  405a56:	4659      	mov	r1, fp
  405a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405a5c:	f7fd fb70 	bl	403140 <__aeabi_ddiv>
  405a60:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405a64:	f005 050f 	and.w	r5, r5, #15
  405a68:	f04f 0a03 	mov.w	sl, #3
  405a6c:	b18d      	cbz	r5, 405a92 <_dtoa_r+0x7da>
  405a6e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405d24 <_dtoa_r+0xa6c>
  405a72:	07ea      	lsls	r2, r5, #31
  405a74:	d509      	bpl.n	405a8a <_dtoa_r+0x7d2>
  405a76:	4630      	mov	r0, r6
  405a78:	4639      	mov	r1, r7
  405a7a:	e9d8 2300 	ldrd	r2, r3, [r8]
  405a7e:	f7fd fa35 	bl	402eec <__aeabi_dmul>
  405a82:	f10a 0a01 	add.w	sl, sl, #1
  405a86:	4606      	mov	r6, r0
  405a88:	460f      	mov	r7, r1
  405a8a:	106d      	asrs	r5, r5, #1
  405a8c:	f108 0808 	add.w	r8, r8, #8
  405a90:	d1ef      	bne.n	405a72 <_dtoa_r+0x7ba>
  405a92:	463b      	mov	r3, r7
  405a94:	4632      	mov	r2, r6
  405a96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405a9a:	f7fd fb51 	bl	403140 <__aeabi_ddiv>
  405a9e:	4607      	mov	r7, r0
  405aa0:	4688      	mov	r8, r1
  405aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405aa4:	b143      	cbz	r3, 405ab8 <_dtoa_r+0x800>
  405aa6:	2200      	movs	r2, #0
  405aa8:	4b9f      	ldr	r3, [pc, #636]	; (405d28 <_dtoa_r+0xa70>)
  405aaa:	4638      	mov	r0, r7
  405aac:	4641      	mov	r1, r8
  405aae:	f001 ff6d 	bl	40798c <__aeabi_dcmplt>
  405ab2:	2800      	cmp	r0, #0
  405ab4:	f040 8286 	bne.w	405fc4 <_dtoa_r+0xd0c>
  405ab8:	4650      	mov	r0, sl
  405aba:	f7fd f9b1 	bl	402e20 <__aeabi_i2d>
  405abe:	463a      	mov	r2, r7
  405ac0:	4643      	mov	r3, r8
  405ac2:	f7fd fa13 	bl	402eec <__aeabi_dmul>
  405ac6:	4b99      	ldr	r3, [pc, #612]	; (405d2c <_dtoa_r+0xa74>)
  405ac8:	2200      	movs	r2, #0
  405aca:	f7fd f85d 	bl	402b88 <__adddf3>
  405ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ad0:	4605      	mov	r5, r0
  405ad2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405ad6:	2b00      	cmp	r3, #0
  405ad8:	f000 813e 	beq.w	405d58 <_dtoa_r+0xaa0>
  405adc:	9b02      	ldr	r3, [sp, #8]
  405ade:	9315      	str	r3, [sp, #84]	; 0x54
  405ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ae2:	9312      	str	r3, [sp, #72]	; 0x48
  405ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ae6:	2b00      	cmp	r3, #0
  405ae8:	f000 81fa 	beq.w	405ee0 <_dtoa_r+0xc28>
  405aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405aee:	4b8c      	ldr	r3, [pc, #560]	; (405d20 <_dtoa_r+0xa68>)
  405af0:	498f      	ldr	r1, [pc, #572]	; (405d30 <_dtoa_r+0xa78>)
  405af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405af6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405afa:	2000      	movs	r0, #0
  405afc:	f7fd fb20 	bl	403140 <__aeabi_ddiv>
  405b00:	462a      	mov	r2, r5
  405b02:	4633      	mov	r3, r6
  405b04:	f7fd f83e 	bl	402b84 <__aeabi_dsub>
  405b08:	4682      	mov	sl, r0
  405b0a:	468b      	mov	fp, r1
  405b0c:	4638      	mov	r0, r7
  405b0e:	4641      	mov	r1, r8
  405b10:	f001 ff7a 	bl	407a08 <__aeabi_d2iz>
  405b14:	4605      	mov	r5, r0
  405b16:	f7fd f983 	bl	402e20 <__aeabi_i2d>
  405b1a:	4602      	mov	r2, r0
  405b1c:	460b      	mov	r3, r1
  405b1e:	4638      	mov	r0, r7
  405b20:	4641      	mov	r1, r8
  405b22:	f7fd f82f 	bl	402b84 <__aeabi_dsub>
  405b26:	3530      	adds	r5, #48	; 0x30
  405b28:	fa5f f885 	uxtb.w	r8, r5
  405b2c:	9d04      	ldr	r5, [sp, #16]
  405b2e:	4606      	mov	r6, r0
  405b30:	460f      	mov	r7, r1
  405b32:	f885 8000 	strb.w	r8, [r5]
  405b36:	4602      	mov	r2, r0
  405b38:	460b      	mov	r3, r1
  405b3a:	4650      	mov	r0, sl
  405b3c:	4659      	mov	r1, fp
  405b3e:	3501      	adds	r5, #1
  405b40:	f001 ff42 	bl	4079c8 <__aeabi_dcmpgt>
  405b44:	2800      	cmp	r0, #0
  405b46:	d154      	bne.n	405bf2 <_dtoa_r+0x93a>
  405b48:	4632      	mov	r2, r6
  405b4a:	463b      	mov	r3, r7
  405b4c:	2000      	movs	r0, #0
  405b4e:	4976      	ldr	r1, [pc, #472]	; (405d28 <_dtoa_r+0xa70>)
  405b50:	f7fd f818 	bl	402b84 <__aeabi_dsub>
  405b54:	4602      	mov	r2, r0
  405b56:	460b      	mov	r3, r1
  405b58:	4650      	mov	r0, sl
  405b5a:	4659      	mov	r1, fp
  405b5c:	f001 ff34 	bl	4079c8 <__aeabi_dcmpgt>
  405b60:	2800      	cmp	r0, #0
  405b62:	f040 8270 	bne.w	406046 <_dtoa_r+0xd8e>
  405b66:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405b68:	2a01      	cmp	r2, #1
  405b6a:	f000 8111 	beq.w	405d90 <_dtoa_r+0xad8>
  405b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b70:	9a04      	ldr	r2, [sp, #16]
  405b72:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405b76:	4413      	add	r3, r2
  405b78:	4699      	mov	r9, r3
  405b7a:	e00d      	b.n	405b98 <_dtoa_r+0x8e0>
  405b7c:	2000      	movs	r0, #0
  405b7e:	496a      	ldr	r1, [pc, #424]	; (405d28 <_dtoa_r+0xa70>)
  405b80:	f7fd f800 	bl	402b84 <__aeabi_dsub>
  405b84:	4652      	mov	r2, sl
  405b86:	465b      	mov	r3, fp
  405b88:	f001 ff00 	bl	40798c <__aeabi_dcmplt>
  405b8c:	2800      	cmp	r0, #0
  405b8e:	f040 8258 	bne.w	406042 <_dtoa_r+0xd8a>
  405b92:	454d      	cmp	r5, r9
  405b94:	f000 80fa 	beq.w	405d8c <_dtoa_r+0xad4>
  405b98:	4650      	mov	r0, sl
  405b9a:	4659      	mov	r1, fp
  405b9c:	2200      	movs	r2, #0
  405b9e:	4b65      	ldr	r3, [pc, #404]	; (405d34 <_dtoa_r+0xa7c>)
  405ba0:	f7fd f9a4 	bl	402eec <__aeabi_dmul>
  405ba4:	2200      	movs	r2, #0
  405ba6:	4b63      	ldr	r3, [pc, #396]	; (405d34 <_dtoa_r+0xa7c>)
  405ba8:	4682      	mov	sl, r0
  405baa:	468b      	mov	fp, r1
  405bac:	4630      	mov	r0, r6
  405bae:	4639      	mov	r1, r7
  405bb0:	f7fd f99c 	bl	402eec <__aeabi_dmul>
  405bb4:	460f      	mov	r7, r1
  405bb6:	4606      	mov	r6, r0
  405bb8:	f001 ff26 	bl	407a08 <__aeabi_d2iz>
  405bbc:	4680      	mov	r8, r0
  405bbe:	f7fd f92f 	bl	402e20 <__aeabi_i2d>
  405bc2:	4602      	mov	r2, r0
  405bc4:	460b      	mov	r3, r1
  405bc6:	4630      	mov	r0, r6
  405bc8:	4639      	mov	r1, r7
  405bca:	f7fc ffdb 	bl	402b84 <__aeabi_dsub>
  405bce:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405bd2:	fa5f f888 	uxtb.w	r8, r8
  405bd6:	4652      	mov	r2, sl
  405bd8:	465b      	mov	r3, fp
  405bda:	f805 8b01 	strb.w	r8, [r5], #1
  405bde:	4606      	mov	r6, r0
  405be0:	460f      	mov	r7, r1
  405be2:	f001 fed3 	bl	40798c <__aeabi_dcmplt>
  405be6:	4632      	mov	r2, r6
  405be8:	463b      	mov	r3, r7
  405bea:	2800      	cmp	r0, #0
  405bec:	d0c6      	beq.n	405b7c <_dtoa_r+0x8c4>
  405bee:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bf4:	9302      	str	r3, [sp, #8]
  405bf6:	e523      	b.n	405640 <_dtoa_r+0x388>
  405bf8:	2300      	movs	r3, #0
  405bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  405bfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405bfe:	2b00      	cmp	r3, #0
  405c00:	f340 80dc 	ble.w	405dbc <_dtoa_r+0xb04>
  405c04:	461f      	mov	r7, r3
  405c06:	461e      	mov	r6, r3
  405c08:	930f      	str	r3, [sp, #60]	; 0x3c
  405c0a:	930a      	str	r3, [sp, #40]	; 0x28
  405c0c:	e6f6      	b.n	4059fc <_dtoa_r+0x744>
  405c0e:	2301      	movs	r3, #1
  405c10:	930b      	str	r3, [sp, #44]	; 0x2c
  405c12:	e7f3      	b.n	405bfc <_dtoa_r+0x944>
  405c14:	f1ba 0f00 	cmp.w	sl, #0
  405c18:	f47f ada8 	bne.w	40576c <_dtoa_r+0x4b4>
  405c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405c20:	2b00      	cmp	r3, #0
  405c22:	f47f adba 	bne.w	40579a <_dtoa_r+0x4e2>
  405c26:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405c2a:	0d3f      	lsrs	r7, r7, #20
  405c2c:	053f      	lsls	r7, r7, #20
  405c2e:	2f00      	cmp	r7, #0
  405c30:	f000 820d 	beq.w	40604e <_dtoa_r+0xd96>
  405c34:	9b08      	ldr	r3, [sp, #32]
  405c36:	3301      	adds	r3, #1
  405c38:	9308      	str	r3, [sp, #32]
  405c3a:	9b06      	ldr	r3, [sp, #24]
  405c3c:	3301      	adds	r3, #1
  405c3e:	9306      	str	r3, [sp, #24]
  405c40:	2301      	movs	r3, #1
  405c42:	930c      	str	r3, [sp, #48]	; 0x30
  405c44:	e5ab      	b.n	40579e <_dtoa_r+0x4e6>
  405c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c48:	2b00      	cmp	r3, #0
  405c4a:	f73f ac42 	bgt.w	4054d2 <_dtoa_r+0x21a>
  405c4e:	f040 8221 	bne.w	406094 <_dtoa_r+0xddc>
  405c52:	2200      	movs	r2, #0
  405c54:	4b38      	ldr	r3, [pc, #224]	; (405d38 <_dtoa_r+0xa80>)
  405c56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405c5a:	f7fd f947 	bl	402eec <__aeabi_dmul>
  405c5e:	4652      	mov	r2, sl
  405c60:	465b      	mov	r3, fp
  405c62:	f001 fea7 	bl	4079b4 <__aeabi_dcmpge>
  405c66:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405c6a:	4646      	mov	r6, r8
  405c6c:	2800      	cmp	r0, #0
  405c6e:	d041      	beq.n	405cf4 <_dtoa_r+0xa3c>
  405c70:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405c72:	9d04      	ldr	r5, [sp, #16]
  405c74:	43db      	mvns	r3, r3
  405c76:	9302      	str	r3, [sp, #8]
  405c78:	4641      	mov	r1, r8
  405c7a:	4620      	mov	r0, r4
  405c7c:	f001 f818 	bl	406cb0 <_Bfree>
  405c80:	2e00      	cmp	r6, #0
  405c82:	f43f acdd 	beq.w	405640 <_dtoa_r+0x388>
  405c86:	e6a7      	b.n	4059d8 <_dtoa_r+0x720>
  405c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c8a:	4649      	mov	r1, r9
  405c8c:	4620      	mov	r0, r4
  405c8e:	f001 f945 	bl	406f1c <__pow5mult>
  405c92:	4681      	mov	r9, r0
  405c94:	e558      	b.n	405748 <_dtoa_r+0x490>
  405c96:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405c98:	2a00      	cmp	r2, #0
  405c9a:	f000 8187 	beq.w	405fac <_dtoa_r+0xcf4>
  405c9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405ca2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ca4:	9d08      	ldr	r5, [sp, #32]
  405ca6:	e4f2      	b.n	40568e <_dtoa_r+0x3d6>
  405ca8:	f1ba 0f00 	cmp.w	sl, #0
  405cac:	f47f ad75 	bne.w	40579a <_dtoa_r+0x4e2>
  405cb0:	e7b4      	b.n	405c1c <_dtoa_r+0x964>
  405cb2:	f001 f807 	bl	406cc4 <__multadd>
  405cb6:	4647      	mov	r7, r8
  405cb8:	4606      	mov	r6, r0
  405cba:	4683      	mov	fp, r0
  405cbc:	e5be      	b.n	40583c <_dtoa_r+0x584>
  405cbe:	4601      	mov	r1, r0
  405cc0:	4620      	mov	r0, r4
  405cc2:	9306      	str	r3, [sp, #24]
  405cc4:	f000 fff4 	bl	406cb0 <_Bfree>
  405cc8:	2201      	movs	r2, #1
  405cca:	9b06      	ldr	r3, [sp, #24]
  405ccc:	e5e0      	b.n	405890 <_dtoa_r+0x5d8>
  405cce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405cd0:	2b02      	cmp	r3, #2
  405cd2:	f77f ad96 	ble.w	405802 <_dtoa_r+0x54a>
  405cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cd8:	2b00      	cmp	r3, #0
  405cda:	d1c9      	bne.n	405c70 <_dtoa_r+0x9b8>
  405cdc:	4641      	mov	r1, r8
  405cde:	2205      	movs	r2, #5
  405ce0:	4620      	mov	r0, r4
  405ce2:	f000 ffef 	bl	406cc4 <__multadd>
  405ce6:	4601      	mov	r1, r0
  405ce8:	4680      	mov	r8, r0
  405cea:	4648      	mov	r0, r9
  405cec:	f001 f9b8 	bl	407060 <__mcmp>
  405cf0:	2800      	cmp	r0, #0
  405cf2:	ddbd      	ble.n	405c70 <_dtoa_r+0x9b8>
  405cf4:	9a02      	ldr	r2, [sp, #8]
  405cf6:	9904      	ldr	r1, [sp, #16]
  405cf8:	2331      	movs	r3, #49	; 0x31
  405cfa:	3201      	adds	r2, #1
  405cfc:	9202      	str	r2, [sp, #8]
  405cfe:	700b      	strb	r3, [r1, #0]
  405d00:	1c4d      	adds	r5, r1, #1
  405d02:	e7b9      	b.n	405c78 <_dtoa_r+0x9c0>
  405d04:	9a02      	ldr	r2, [sp, #8]
  405d06:	3201      	adds	r2, #1
  405d08:	9202      	str	r2, [sp, #8]
  405d0a:	9a04      	ldr	r2, [sp, #16]
  405d0c:	2331      	movs	r3, #49	; 0x31
  405d0e:	7013      	strb	r3, [r2, #0]
  405d10:	e652      	b.n	4059b8 <_dtoa_r+0x700>
  405d12:	2301      	movs	r3, #1
  405d14:	930b      	str	r3, [sp, #44]	; 0x2c
  405d16:	e666      	b.n	4059e6 <_dtoa_r+0x72e>
  405d18:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405d1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405d1e:	e48f      	b.n	405640 <_dtoa_r+0x388>
  405d20:	00407d58 	.word	0x00407d58
  405d24:	00407d30 	.word	0x00407d30
  405d28:	3ff00000 	.word	0x3ff00000
  405d2c:	401c0000 	.word	0x401c0000
  405d30:	3fe00000 	.word	0x3fe00000
  405d34:	40240000 	.word	0x40240000
  405d38:	40140000 	.word	0x40140000
  405d3c:	4650      	mov	r0, sl
  405d3e:	f7fd f86f 	bl	402e20 <__aeabi_i2d>
  405d42:	463a      	mov	r2, r7
  405d44:	4643      	mov	r3, r8
  405d46:	f7fd f8d1 	bl	402eec <__aeabi_dmul>
  405d4a:	2200      	movs	r2, #0
  405d4c:	4bc1      	ldr	r3, [pc, #772]	; (406054 <_dtoa_r+0xd9c>)
  405d4e:	f7fc ff1b 	bl	402b88 <__adddf3>
  405d52:	4605      	mov	r5, r0
  405d54:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405d58:	4641      	mov	r1, r8
  405d5a:	2200      	movs	r2, #0
  405d5c:	4bbe      	ldr	r3, [pc, #760]	; (406058 <_dtoa_r+0xda0>)
  405d5e:	4638      	mov	r0, r7
  405d60:	f7fc ff10 	bl	402b84 <__aeabi_dsub>
  405d64:	462a      	mov	r2, r5
  405d66:	4633      	mov	r3, r6
  405d68:	4682      	mov	sl, r0
  405d6a:	468b      	mov	fp, r1
  405d6c:	f001 fe2c 	bl	4079c8 <__aeabi_dcmpgt>
  405d70:	4680      	mov	r8, r0
  405d72:	2800      	cmp	r0, #0
  405d74:	f040 8110 	bne.w	405f98 <_dtoa_r+0xce0>
  405d78:	462a      	mov	r2, r5
  405d7a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405d7e:	4650      	mov	r0, sl
  405d80:	4659      	mov	r1, fp
  405d82:	f001 fe03 	bl	40798c <__aeabi_dcmplt>
  405d86:	b118      	cbz	r0, 405d90 <_dtoa_r+0xad8>
  405d88:	4646      	mov	r6, r8
  405d8a:	e771      	b.n	405c70 <_dtoa_r+0x9b8>
  405d8c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d90:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405d94:	f7ff bb8a 	b.w	4054ac <_dtoa_r+0x1f4>
  405d98:	9804      	ldr	r0, [sp, #16]
  405d9a:	f7ff babb 	b.w	405314 <_dtoa_r+0x5c>
  405d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405da2:	970c      	str	r7, [sp, #48]	; 0x30
  405da4:	1afb      	subs	r3, r7, r3
  405da6:	441a      	add	r2, r3
  405da8:	920d      	str	r2, [sp, #52]	; 0x34
  405daa:	2700      	movs	r7, #0
  405dac:	e469      	b.n	405682 <_dtoa_r+0x3ca>
  405dae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405db2:	f04f 0a02 	mov.w	sl, #2
  405db6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405dba:	e657      	b.n	405a6c <_dtoa_r+0x7b4>
  405dbc:	2100      	movs	r1, #0
  405dbe:	2301      	movs	r3, #1
  405dc0:	6461      	str	r1, [r4, #68]	; 0x44
  405dc2:	4620      	mov	r0, r4
  405dc4:	9325      	str	r3, [sp, #148]	; 0x94
  405dc6:	f000 ff4d 	bl	406c64 <_Balloc>
  405dca:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405dcc:	9004      	str	r0, [sp, #16]
  405dce:	6420      	str	r0, [r4, #64]	; 0x40
  405dd0:	930a      	str	r3, [sp, #40]	; 0x28
  405dd2:	930f      	str	r3, [sp, #60]	; 0x3c
  405dd4:	e629      	b.n	405a2a <_dtoa_r+0x772>
  405dd6:	2a00      	cmp	r2, #0
  405dd8:	46d0      	mov	r8, sl
  405dda:	f8cd b018 	str.w	fp, [sp, #24]
  405dde:	469a      	mov	sl, r3
  405de0:	dd11      	ble.n	405e06 <_dtoa_r+0xb4e>
  405de2:	4649      	mov	r1, r9
  405de4:	2201      	movs	r2, #1
  405de6:	4620      	mov	r0, r4
  405de8:	f001 f8e8 	bl	406fbc <__lshift>
  405dec:	4641      	mov	r1, r8
  405dee:	4681      	mov	r9, r0
  405df0:	f001 f936 	bl	407060 <__mcmp>
  405df4:	2800      	cmp	r0, #0
  405df6:	f340 8146 	ble.w	406086 <_dtoa_r+0xdce>
  405dfa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405dfe:	f000 8106 	beq.w	40600e <_dtoa_r+0xd56>
  405e02:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405e06:	46b3      	mov	fp, r6
  405e08:	f887 a000 	strb.w	sl, [r7]
  405e0c:	1c7d      	adds	r5, r7, #1
  405e0e:	9e06      	ldr	r6, [sp, #24]
  405e10:	e5d2      	b.n	4059b8 <_dtoa_r+0x700>
  405e12:	d104      	bne.n	405e1e <_dtoa_r+0xb66>
  405e14:	f01a 0f01 	tst.w	sl, #1
  405e18:	d001      	beq.n	405e1e <_dtoa_r+0xb66>
  405e1a:	e5bd      	b.n	405998 <_dtoa_r+0x6e0>
  405e1c:	4615      	mov	r5, r2
  405e1e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405e22:	2b30      	cmp	r3, #48	; 0x30
  405e24:	f105 32ff 	add.w	r2, r5, #4294967295
  405e28:	d0f8      	beq.n	405e1c <_dtoa_r+0xb64>
  405e2a:	e5c5      	b.n	4059b8 <_dtoa_r+0x700>
  405e2c:	9904      	ldr	r1, [sp, #16]
  405e2e:	2230      	movs	r2, #48	; 0x30
  405e30:	700a      	strb	r2, [r1, #0]
  405e32:	9a02      	ldr	r2, [sp, #8]
  405e34:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e38:	3201      	adds	r2, #1
  405e3a:	9202      	str	r2, [sp, #8]
  405e3c:	f7ff bbfc 	b.w	405638 <_dtoa_r+0x380>
  405e40:	f000 80bb 	beq.w	405fba <_dtoa_r+0xd02>
  405e44:	9b02      	ldr	r3, [sp, #8]
  405e46:	425d      	negs	r5, r3
  405e48:	4b84      	ldr	r3, [pc, #528]	; (40605c <_dtoa_r+0xda4>)
  405e4a:	f005 020f 	and.w	r2, r5, #15
  405e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e52:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405e5a:	f7fd f847 	bl	402eec <__aeabi_dmul>
  405e5e:	112d      	asrs	r5, r5, #4
  405e60:	4607      	mov	r7, r0
  405e62:	4688      	mov	r8, r1
  405e64:	f000 812c 	beq.w	4060c0 <_dtoa_r+0xe08>
  405e68:	4e7d      	ldr	r6, [pc, #500]	; (406060 <_dtoa_r+0xda8>)
  405e6a:	f04f 0a02 	mov.w	sl, #2
  405e6e:	07eb      	lsls	r3, r5, #31
  405e70:	d509      	bpl.n	405e86 <_dtoa_r+0xbce>
  405e72:	4638      	mov	r0, r7
  405e74:	4641      	mov	r1, r8
  405e76:	e9d6 2300 	ldrd	r2, r3, [r6]
  405e7a:	f7fd f837 	bl	402eec <__aeabi_dmul>
  405e7e:	f10a 0a01 	add.w	sl, sl, #1
  405e82:	4607      	mov	r7, r0
  405e84:	4688      	mov	r8, r1
  405e86:	106d      	asrs	r5, r5, #1
  405e88:	f106 0608 	add.w	r6, r6, #8
  405e8c:	d1ef      	bne.n	405e6e <_dtoa_r+0xbb6>
  405e8e:	e608      	b.n	405aa2 <_dtoa_r+0x7ea>
  405e90:	6871      	ldr	r1, [r6, #4]
  405e92:	4620      	mov	r0, r4
  405e94:	f000 fee6 	bl	406c64 <_Balloc>
  405e98:	6933      	ldr	r3, [r6, #16]
  405e9a:	3302      	adds	r3, #2
  405e9c:	009a      	lsls	r2, r3, #2
  405e9e:	4605      	mov	r5, r0
  405ea0:	f106 010c 	add.w	r1, r6, #12
  405ea4:	300c      	adds	r0, #12
  405ea6:	f000 fddb 	bl	406a60 <memcpy>
  405eaa:	4629      	mov	r1, r5
  405eac:	2201      	movs	r2, #1
  405eae:	4620      	mov	r0, r4
  405eb0:	f001 f884 	bl	406fbc <__lshift>
  405eb4:	9006      	str	r0, [sp, #24]
  405eb6:	e4b5      	b.n	405824 <_dtoa_r+0x56c>
  405eb8:	2b39      	cmp	r3, #57	; 0x39
  405eba:	f8cd b018 	str.w	fp, [sp, #24]
  405ebe:	46d0      	mov	r8, sl
  405ec0:	f000 80a5 	beq.w	40600e <_dtoa_r+0xd56>
  405ec4:	f103 0a01 	add.w	sl, r3, #1
  405ec8:	46b3      	mov	fp, r6
  405eca:	f887 a000 	strb.w	sl, [r7]
  405ece:	1c7d      	adds	r5, r7, #1
  405ed0:	9e06      	ldr	r6, [sp, #24]
  405ed2:	e571      	b.n	4059b8 <_dtoa_r+0x700>
  405ed4:	465a      	mov	r2, fp
  405ed6:	46d0      	mov	r8, sl
  405ed8:	46b3      	mov	fp, r6
  405eda:	469a      	mov	sl, r3
  405edc:	4616      	mov	r6, r2
  405ede:	e54f      	b.n	405980 <_dtoa_r+0x6c8>
  405ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405ee2:	495e      	ldr	r1, [pc, #376]	; (40605c <_dtoa_r+0xda4>)
  405ee4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405ee8:	462a      	mov	r2, r5
  405eea:	4633      	mov	r3, r6
  405eec:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405ef0:	f7fc fffc 	bl	402eec <__aeabi_dmul>
  405ef4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405ef8:	4638      	mov	r0, r7
  405efa:	4641      	mov	r1, r8
  405efc:	f001 fd84 	bl	407a08 <__aeabi_d2iz>
  405f00:	4605      	mov	r5, r0
  405f02:	f7fc ff8d 	bl	402e20 <__aeabi_i2d>
  405f06:	460b      	mov	r3, r1
  405f08:	4602      	mov	r2, r0
  405f0a:	4641      	mov	r1, r8
  405f0c:	4638      	mov	r0, r7
  405f0e:	f7fc fe39 	bl	402b84 <__aeabi_dsub>
  405f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f14:	460f      	mov	r7, r1
  405f16:	9904      	ldr	r1, [sp, #16]
  405f18:	3530      	adds	r5, #48	; 0x30
  405f1a:	2b01      	cmp	r3, #1
  405f1c:	700d      	strb	r5, [r1, #0]
  405f1e:	4606      	mov	r6, r0
  405f20:	f101 0501 	add.w	r5, r1, #1
  405f24:	d026      	beq.n	405f74 <_dtoa_r+0xcbc>
  405f26:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f28:	9a04      	ldr	r2, [sp, #16]
  405f2a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406068 <_dtoa_r+0xdb0>
  405f2e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405f32:	4413      	add	r3, r2
  405f34:	f04f 0a00 	mov.w	sl, #0
  405f38:	4699      	mov	r9, r3
  405f3a:	4652      	mov	r2, sl
  405f3c:	465b      	mov	r3, fp
  405f3e:	4630      	mov	r0, r6
  405f40:	4639      	mov	r1, r7
  405f42:	f7fc ffd3 	bl	402eec <__aeabi_dmul>
  405f46:	460f      	mov	r7, r1
  405f48:	4606      	mov	r6, r0
  405f4a:	f001 fd5d 	bl	407a08 <__aeabi_d2iz>
  405f4e:	4680      	mov	r8, r0
  405f50:	f7fc ff66 	bl	402e20 <__aeabi_i2d>
  405f54:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405f58:	4602      	mov	r2, r0
  405f5a:	460b      	mov	r3, r1
  405f5c:	4630      	mov	r0, r6
  405f5e:	4639      	mov	r1, r7
  405f60:	f7fc fe10 	bl	402b84 <__aeabi_dsub>
  405f64:	f805 8b01 	strb.w	r8, [r5], #1
  405f68:	454d      	cmp	r5, r9
  405f6a:	4606      	mov	r6, r0
  405f6c:	460f      	mov	r7, r1
  405f6e:	d1e4      	bne.n	405f3a <_dtoa_r+0xc82>
  405f70:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f74:	4b3b      	ldr	r3, [pc, #236]	; (406064 <_dtoa_r+0xdac>)
  405f76:	2200      	movs	r2, #0
  405f78:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405f7c:	f7fc fe04 	bl	402b88 <__adddf3>
  405f80:	4632      	mov	r2, r6
  405f82:	463b      	mov	r3, r7
  405f84:	f001 fd02 	bl	40798c <__aeabi_dcmplt>
  405f88:	2800      	cmp	r0, #0
  405f8a:	d046      	beq.n	40601a <_dtoa_r+0xd62>
  405f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405f8e:	9302      	str	r3, [sp, #8]
  405f90:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405f94:	f7ff bb43 	b.w	40561e <_dtoa_r+0x366>
  405f98:	f04f 0800 	mov.w	r8, #0
  405f9c:	4646      	mov	r6, r8
  405f9e:	e6a9      	b.n	405cf4 <_dtoa_r+0xa3c>
  405fa0:	9b08      	ldr	r3, [sp, #32]
  405fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405fa4:	1a9d      	subs	r5, r3, r2
  405fa6:	2300      	movs	r3, #0
  405fa8:	f7ff bb71 	b.w	40568e <_dtoa_r+0x3d6>
  405fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405fae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405fb0:	9d08      	ldr	r5, [sp, #32]
  405fb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405fb6:	f7ff bb6a 	b.w	40568e <_dtoa_r+0x3d6>
  405fba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405fbe:	f04f 0a02 	mov.w	sl, #2
  405fc2:	e56e      	b.n	405aa2 <_dtoa_r+0x7ea>
  405fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fc6:	2b00      	cmp	r3, #0
  405fc8:	f43f aeb8 	beq.w	405d3c <_dtoa_r+0xa84>
  405fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405fce:	2b00      	cmp	r3, #0
  405fd0:	f77f aede 	ble.w	405d90 <_dtoa_r+0xad8>
  405fd4:	2200      	movs	r2, #0
  405fd6:	4b24      	ldr	r3, [pc, #144]	; (406068 <_dtoa_r+0xdb0>)
  405fd8:	4638      	mov	r0, r7
  405fda:	4641      	mov	r1, r8
  405fdc:	f7fc ff86 	bl	402eec <__aeabi_dmul>
  405fe0:	4607      	mov	r7, r0
  405fe2:	4688      	mov	r8, r1
  405fe4:	f10a 0001 	add.w	r0, sl, #1
  405fe8:	f7fc ff1a 	bl	402e20 <__aeabi_i2d>
  405fec:	463a      	mov	r2, r7
  405fee:	4643      	mov	r3, r8
  405ff0:	f7fc ff7c 	bl	402eec <__aeabi_dmul>
  405ff4:	2200      	movs	r2, #0
  405ff6:	4b17      	ldr	r3, [pc, #92]	; (406054 <_dtoa_r+0xd9c>)
  405ff8:	f7fc fdc6 	bl	402b88 <__adddf3>
  405ffc:	9a02      	ldr	r2, [sp, #8]
  405ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406000:	9312      	str	r3, [sp, #72]	; 0x48
  406002:	3a01      	subs	r2, #1
  406004:	4605      	mov	r5, r0
  406006:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40600a:	9215      	str	r2, [sp, #84]	; 0x54
  40600c:	e56a      	b.n	405ae4 <_dtoa_r+0x82c>
  40600e:	2239      	movs	r2, #57	; 0x39
  406010:	46b3      	mov	fp, r6
  406012:	703a      	strb	r2, [r7, #0]
  406014:	9e06      	ldr	r6, [sp, #24]
  406016:	1c7d      	adds	r5, r7, #1
  406018:	e4c0      	b.n	40599c <_dtoa_r+0x6e4>
  40601a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40601e:	2000      	movs	r0, #0
  406020:	4910      	ldr	r1, [pc, #64]	; (406064 <_dtoa_r+0xdac>)
  406022:	f7fc fdaf 	bl	402b84 <__aeabi_dsub>
  406026:	4632      	mov	r2, r6
  406028:	463b      	mov	r3, r7
  40602a:	f001 fccd 	bl	4079c8 <__aeabi_dcmpgt>
  40602e:	b908      	cbnz	r0, 406034 <_dtoa_r+0xd7c>
  406030:	e6ae      	b.n	405d90 <_dtoa_r+0xad8>
  406032:	4615      	mov	r5, r2
  406034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406038:	2b30      	cmp	r3, #48	; 0x30
  40603a:	f105 32ff 	add.w	r2, r5, #4294967295
  40603e:	d0f8      	beq.n	406032 <_dtoa_r+0xd7a>
  406040:	e5d7      	b.n	405bf2 <_dtoa_r+0x93a>
  406042:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406046:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406048:	9302      	str	r3, [sp, #8]
  40604a:	f7ff bae8 	b.w	40561e <_dtoa_r+0x366>
  40604e:	970c      	str	r7, [sp, #48]	; 0x30
  406050:	f7ff bba5 	b.w	40579e <_dtoa_r+0x4e6>
  406054:	401c0000 	.word	0x401c0000
  406058:	40140000 	.word	0x40140000
  40605c:	00407d58 	.word	0x00407d58
  406060:	00407d30 	.word	0x00407d30
  406064:	3fe00000 	.word	0x3fe00000
  406068:	40240000 	.word	0x40240000
  40606c:	2b39      	cmp	r3, #57	; 0x39
  40606e:	f8cd b018 	str.w	fp, [sp, #24]
  406072:	46d0      	mov	r8, sl
  406074:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406078:	469a      	mov	sl, r3
  40607a:	d0c8      	beq.n	40600e <_dtoa_r+0xd56>
  40607c:	f1bb 0f00 	cmp.w	fp, #0
  406080:	f73f aebf 	bgt.w	405e02 <_dtoa_r+0xb4a>
  406084:	e6bf      	b.n	405e06 <_dtoa_r+0xb4e>
  406086:	f47f aebe 	bne.w	405e06 <_dtoa_r+0xb4e>
  40608a:	f01a 0f01 	tst.w	sl, #1
  40608e:	f43f aeba 	beq.w	405e06 <_dtoa_r+0xb4e>
  406092:	e6b2      	b.n	405dfa <_dtoa_r+0xb42>
  406094:	f04f 0800 	mov.w	r8, #0
  406098:	4646      	mov	r6, r8
  40609a:	e5e9      	b.n	405c70 <_dtoa_r+0x9b8>
  40609c:	4631      	mov	r1, r6
  40609e:	2300      	movs	r3, #0
  4060a0:	220a      	movs	r2, #10
  4060a2:	4620      	mov	r0, r4
  4060a4:	f000 fe0e 	bl	406cc4 <__multadd>
  4060a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060aa:	2b00      	cmp	r3, #0
  4060ac:	4606      	mov	r6, r0
  4060ae:	dd0a      	ble.n	4060c6 <_dtoa_r+0xe0e>
  4060b0:	930a      	str	r3, [sp, #40]	; 0x28
  4060b2:	f7ff bbaa 	b.w	40580a <_dtoa_r+0x552>
  4060b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060b8:	2b02      	cmp	r3, #2
  4060ba:	dc23      	bgt.n	406104 <_dtoa_r+0xe4c>
  4060bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060be:	e43b      	b.n	405938 <_dtoa_r+0x680>
  4060c0:	f04f 0a02 	mov.w	sl, #2
  4060c4:	e4ed      	b.n	405aa2 <_dtoa_r+0x7ea>
  4060c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060c8:	2b02      	cmp	r3, #2
  4060ca:	dc1b      	bgt.n	406104 <_dtoa_r+0xe4c>
  4060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4060ce:	e7ef      	b.n	4060b0 <_dtoa_r+0xdf8>
  4060d0:	2500      	movs	r5, #0
  4060d2:	6465      	str	r5, [r4, #68]	; 0x44
  4060d4:	4629      	mov	r1, r5
  4060d6:	4620      	mov	r0, r4
  4060d8:	f000 fdc4 	bl	406c64 <_Balloc>
  4060dc:	f04f 33ff 	mov.w	r3, #4294967295
  4060e0:	930a      	str	r3, [sp, #40]	; 0x28
  4060e2:	930f      	str	r3, [sp, #60]	; 0x3c
  4060e4:	2301      	movs	r3, #1
  4060e6:	9004      	str	r0, [sp, #16]
  4060e8:	9525      	str	r5, [sp, #148]	; 0x94
  4060ea:	6420      	str	r0, [r4, #64]	; 0x40
  4060ec:	930b      	str	r3, [sp, #44]	; 0x2c
  4060ee:	f7ff b9dd 	b.w	4054ac <_dtoa_r+0x1f4>
  4060f2:	2501      	movs	r5, #1
  4060f4:	f7ff b9a5 	b.w	405442 <_dtoa_r+0x18a>
  4060f8:	f43f ab69 	beq.w	4057ce <_dtoa_r+0x516>
  4060fc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406100:	f7ff bbf9 	b.w	4058f6 <_dtoa_r+0x63e>
  406104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406106:	930a      	str	r3, [sp, #40]	; 0x28
  406108:	e5e5      	b.n	405cd6 <_dtoa_r+0xa1e>
  40610a:	bf00      	nop

0040610c <__libc_fini_array>:
  40610c:	b538      	push	{r3, r4, r5, lr}
  40610e:	4c0a      	ldr	r4, [pc, #40]	; (406138 <__libc_fini_array+0x2c>)
  406110:	4d0a      	ldr	r5, [pc, #40]	; (40613c <__libc_fini_array+0x30>)
  406112:	1b64      	subs	r4, r4, r5
  406114:	10a4      	asrs	r4, r4, #2
  406116:	d00a      	beq.n	40612e <__libc_fini_array+0x22>
  406118:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40611c:	3b01      	subs	r3, #1
  40611e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406122:	3c01      	subs	r4, #1
  406124:	f855 3904 	ldr.w	r3, [r5], #-4
  406128:	4798      	blx	r3
  40612a:	2c00      	cmp	r4, #0
  40612c:	d1f9      	bne.n	406122 <__libc_fini_array+0x16>
  40612e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406132:	f001 bf07 	b.w	407f44 <_fini>
  406136:	bf00      	nop
  406138:	00407f54 	.word	0x00407f54
  40613c:	00407f50 	.word	0x00407f50

00406140 <_malloc_trim_r>:
  406140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406142:	4f24      	ldr	r7, [pc, #144]	; (4061d4 <_malloc_trim_r+0x94>)
  406144:	460c      	mov	r4, r1
  406146:	4606      	mov	r6, r0
  406148:	f000 fd88 	bl	406c5c <__malloc_lock>
  40614c:	68bb      	ldr	r3, [r7, #8]
  40614e:	685d      	ldr	r5, [r3, #4]
  406150:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406154:	310f      	adds	r1, #15
  406156:	f025 0503 	bic.w	r5, r5, #3
  40615a:	4429      	add	r1, r5
  40615c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406160:	f021 010f 	bic.w	r1, r1, #15
  406164:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406168:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40616c:	db07      	blt.n	40617e <_malloc_trim_r+0x3e>
  40616e:	2100      	movs	r1, #0
  406170:	4630      	mov	r0, r6
  406172:	f001 fa17 	bl	4075a4 <_sbrk_r>
  406176:	68bb      	ldr	r3, [r7, #8]
  406178:	442b      	add	r3, r5
  40617a:	4298      	cmp	r0, r3
  40617c:	d004      	beq.n	406188 <_malloc_trim_r+0x48>
  40617e:	4630      	mov	r0, r6
  406180:	f000 fd6e 	bl	406c60 <__malloc_unlock>
  406184:	2000      	movs	r0, #0
  406186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406188:	4261      	negs	r1, r4
  40618a:	4630      	mov	r0, r6
  40618c:	f001 fa0a 	bl	4075a4 <_sbrk_r>
  406190:	3001      	adds	r0, #1
  406192:	d00d      	beq.n	4061b0 <_malloc_trim_r+0x70>
  406194:	4b10      	ldr	r3, [pc, #64]	; (4061d8 <_malloc_trim_r+0x98>)
  406196:	68ba      	ldr	r2, [r7, #8]
  406198:	6819      	ldr	r1, [r3, #0]
  40619a:	1b2d      	subs	r5, r5, r4
  40619c:	f045 0501 	orr.w	r5, r5, #1
  4061a0:	4630      	mov	r0, r6
  4061a2:	1b09      	subs	r1, r1, r4
  4061a4:	6055      	str	r5, [r2, #4]
  4061a6:	6019      	str	r1, [r3, #0]
  4061a8:	f000 fd5a 	bl	406c60 <__malloc_unlock>
  4061ac:	2001      	movs	r0, #1
  4061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061b0:	2100      	movs	r1, #0
  4061b2:	4630      	mov	r0, r6
  4061b4:	f001 f9f6 	bl	4075a4 <_sbrk_r>
  4061b8:	68ba      	ldr	r2, [r7, #8]
  4061ba:	1a83      	subs	r3, r0, r2
  4061bc:	2b0f      	cmp	r3, #15
  4061be:	ddde      	ble.n	40617e <_malloc_trim_r+0x3e>
  4061c0:	4c06      	ldr	r4, [pc, #24]	; (4061dc <_malloc_trim_r+0x9c>)
  4061c2:	4905      	ldr	r1, [pc, #20]	; (4061d8 <_malloc_trim_r+0x98>)
  4061c4:	6824      	ldr	r4, [r4, #0]
  4061c6:	f043 0301 	orr.w	r3, r3, #1
  4061ca:	1b00      	subs	r0, r0, r4
  4061cc:	6053      	str	r3, [r2, #4]
  4061ce:	6008      	str	r0, [r1, #0]
  4061d0:	e7d5      	b.n	40617e <_malloc_trim_r+0x3e>
  4061d2:	bf00      	nop
  4061d4:	200005ac 	.word	0x200005ac
  4061d8:	20000dfc 	.word	0x20000dfc
  4061dc:	200009b4 	.word	0x200009b4

004061e0 <_free_r>:
  4061e0:	2900      	cmp	r1, #0
  4061e2:	d044      	beq.n	40626e <_free_r+0x8e>
  4061e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4061e8:	460d      	mov	r5, r1
  4061ea:	4680      	mov	r8, r0
  4061ec:	f000 fd36 	bl	406c5c <__malloc_lock>
  4061f0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4061f4:	4969      	ldr	r1, [pc, #420]	; (40639c <_free_r+0x1bc>)
  4061f6:	f027 0301 	bic.w	r3, r7, #1
  4061fa:	f1a5 0408 	sub.w	r4, r5, #8
  4061fe:	18e2      	adds	r2, r4, r3
  406200:	688e      	ldr	r6, [r1, #8]
  406202:	6850      	ldr	r0, [r2, #4]
  406204:	42b2      	cmp	r2, r6
  406206:	f020 0003 	bic.w	r0, r0, #3
  40620a:	d05e      	beq.n	4062ca <_free_r+0xea>
  40620c:	07fe      	lsls	r6, r7, #31
  40620e:	6050      	str	r0, [r2, #4]
  406210:	d40b      	bmi.n	40622a <_free_r+0x4a>
  406212:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406216:	1be4      	subs	r4, r4, r7
  406218:	f101 0e08 	add.w	lr, r1, #8
  40621c:	68a5      	ldr	r5, [r4, #8]
  40621e:	4575      	cmp	r5, lr
  406220:	443b      	add	r3, r7
  406222:	d06d      	beq.n	406300 <_free_r+0x120>
  406224:	68e7      	ldr	r7, [r4, #12]
  406226:	60ef      	str	r7, [r5, #12]
  406228:	60bd      	str	r5, [r7, #8]
  40622a:	1815      	adds	r5, r2, r0
  40622c:	686d      	ldr	r5, [r5, #4]
  40622e:	07ed      	lsls	r5, r5, #31
  406230:	d53e      	bpl.n	4062b0 <_free_r+0xd0>
  406232:	f043 0201 	orr.w	r2, r3, #1
  406236:	6062      	str	r2, [r4, #4]
  406238:	50e3      	str	r3, [r4, r3]
  40623a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40623e:	d217      	bcs.n	406270 <_free_r+0x90>
  406240:	08db      	lsrs	r3, r3, #3
  406242:	1c58      	adds	r0, r3, #1
  406244:	109a      	asrs	r2, r3, #2
  406246:	684d      	ldr	r5, [r1, #4]
  406248:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40624c:	60a7      	str	r7, [r4, #8]
  40624e:	2301      	movs	r3, #1
  406250:	4093      	lsls	r3, r2
  406252:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406256:	432b      	orrs	r3, r5
  406258:	3a08      	subs	r2, #8
  40625a:	60e2      	str	r2, [r4, #12]
  40625c:	604b      	str	r3, [r1, #4]
  40625e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406262:	60fc      	str	r4, [r7, #12]
  406264:	4640      	mov	r0, r8
  406266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40626a:	f000 bcf9 	b.w	406c60 <__malloc_unlock>
  40626e:	4770      	bx	lr
  406270:	0a5a      	lsrs	r2, r3, #9
  406272:	2a04      	cmp	r2, #4
  406274:	d852      	bhi.n	40631c <_free_r+0x13c>
  406276:	099a      	lsrs	r2, r3, #6
  406278:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40627c:	00ff      	lsls	r7, r7, #3
  40627e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406282:	19c8      	adds	r0, r1, r7
  406284:	59ca      	ldr	r2, [r1, r7]
  406286:	3808      	subs	r0, #8
  406288:	4290      	cmp	r0, r2
  40628a:	d04f      	beq.n	40632c <_free_r+0x14c>
  40628c:	6851      	ldr	r1, [r2, #4]
  40628e:	f021 0103 	bic.w	r1, r1, #3
  406292:	428b      	cmp	r3, r1
  406294:	d232      	bcs.n	4062fc <_free_r+0x11c>
  406296:	6892      	ldr	r2, [r2, #8]
  406298:	4290      	cmp	r0, r2
  40629a:	d1f7      	bne.n	40628c <_free_r+0xac>
  40629c:	68c3      	ldr	r3, [r0, #12]
  40629e:	60a0      	str	r0, [r4, #8]
  4062a0:	60e3      	str	r3, [r4, #12]
  4062a2:	609c      	str	r4, [r3, #8]
  4062a4:	60c4      	str	r4, [r0, #12]
  4062a6:	4640      	mov	r0, r8
  4062a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4062ac:	f000 bcd8 	b.w	406c60 <__malloc_unlock>
  4062b0:	6895      	ldr	r5, [r2, #8]
  4062b2:	4f3b      	ldr	r7, [pc, #236]	; (4063a0 <_free_r+0x1c0>)
  4062b4:	42bd      	cmp	r5, r7
  4062b6:	4403      	add	r3, r0
  4062b8:	d040      	beq.n	40633c <_free_r+0x15c>
  4062ba:	68d0      	ldr	r0, [r2, #12]
  4062bc:	60e8      	str	r0, [r5, #12]
  4062be:	f043 0201 	orr.w	r2, r3, #1
  4062c2:	6085      	str	r5, [r0, #8]
  4062c4:	6062      	str	r2, [r4, #4]
  4062c6:	50e3      	str	r3, [r4, r3]
  4062c8:	e7b7      	b.n	40623a <_free_r+0x5a>
  4062ca:	07ff      	lsls	r7, r7, #31
  4062cc:	4403      	add	r3, r0
  4062ce:	d407      	bmi.n	4062e0 <_free_r+0x100>
  4062d0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4062d4:	1aa4      	subs	r4, r4, r2
  4062d6:	4413      	add	r3, r2
  4062d8:	68a0      	ldr	r0, [r4, #8]
  4062da:	68e2      	ldr	r2, [r4, #12]
  4062dc:	60c2      	str	r2, [r0, #12]
  4062de:	6090      	str	r0, [r2, #8]
  4062e0:	4a30      	ldr	r2, [pc, #192]	; (4063a4 <_free_r+0x1c4>)
  4062e2:	6812      	ldr	r2, [r2, #0]
  4062e4:	f043 0001 	orr.w	r0, r3, #1
  4062e8:	4293      	cmp	r3, r2
  4062ea:	6060      	str	r0, [r4, #4]
  4062ec:	608c      	str	r4, [r1, #8]
  4062ee:	d3b9      	bcc.n	406264 <_free_r+0x84>
  4062f0:	4b2d      	ldr	r3, [pc, #180]	; (4063a8 <_free_r+0x1c8>)
  4062f2:	4640      	mov	r0, r8
  4062f4:	6819      	ldr	r1, [r3, #0]
  4062f6:	f7ff ff23 	bl	406140 <_malloc_trim_r>
  4062fa:	e7b3      	b.n	406264 <_free_r+0x84>
  4062fc:	4610      	mov	r0, r2
  4062fe:	e7cd      	b.n	40629c <_free_r+0xbc>
  406300:	1811      	adds	r1, r2, r0
  406302:	6849      	ldr	r1, [r1, #4]
  406304:	07c9      	lsls	r1, r1, #31
  406306:	d444      	bmi.n	406392 <_free_r+0x1b2>
  406308:	6891      	ldr	r1, [r2, #8]
  40630a:	68d2      	ldr	r2, [r2, #12]
  40630c:	60ca      	str	r2, [r1, #12]
  40630e:	4403      	add	r3, r0
  406310:	f043 0001 	orr.w	r0, r3, #1
  406314:	6091      	str	r1, [r2, #8]
  406316:	6060      	str	r0, [r4, #4]
  406318:	50e3      	str	r3, [r4, r3]
  40631a:	e7a3      	b.n	406264 <_free_r+0x84>
  40631c:	2a14      	cmp	r2, #20
  40631e:	d816      	bhi.n	40634e <_free_r+0x16e>
  406320:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406324:	00ff      	lsls	r7, r7, #3
  406326:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40632a:	e7aa      	b.n	406282 <_free_r+0xa2>
  40632c:	10aa      	asrs	r2, r5, #2
  40632e:	2301      	movs	r3, #1
  406330:	684d      	ldr	r5, [r1, #4]
  406332:	4093      	lsls	r3, r2
  406334:	432b      	orrs	r3, r5
  406336:	604b      	str	r3, [r1, #4]
  406338:	4603      	mov	r3, r0
  40633a:	e7b0      	b.n	40629e <_free_r+0xbe>
  40633c:	f043 0201 	orr.w	r2, r3, #1
  406340:	614c      	str	r4, [r1, #20]
  406342:	610c      	str	r4, [r1, #16]
  406344:	60e5      	str	r5, [r4, #12]
  406346:	60a5      	str	r5, [r4, #8]
  406348:	6062      	str	r2, [r4, #4]
  40634a:	50e3      	str	r3, [r4, r3]
  40634c:	e78a      	b.n	406264 <_free_r+0x84>
  40634e:	2a54      	cmp	r2, #84	; 0x54
  406350:	d806      	bhi.n	406360 <_free_r+0x180>
  406352:	0b1a      	lsrs	r2, r3, #12
  406354:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406358:	00ff      	lsls	r7, r7, #3
  40635a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40635e:	e790      	b.n	406282 <_free_r+0xa2>
  406360:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406364:	d806      	bhi.n	406374 <_free_r+0x194>
  406366:	0bda      	lsrs	r2, r3, #15
  406368:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40636c:	00ff      	lsls	r7, r7, #3
  40636e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406372:	e786      	b.n	406282 <_free_r+0xa2>
  406374:	f240 5054 	movw	r0, #1364	; 0x554
  406378:	4282      	cmp	r2, r0
  40637a:	d806      	bhi.n	40638a <_free_r+0x1aa>
  40637c:	0c9a      	lsrs	r2, r3, #18
  40637e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406382:	00ff      	lsls	r7, r7, #3
  406384:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406388:	e77b      	b.n	406282 <_free_r+0xa2>
  40638a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40638e:	257e      	movs	r5, #126	; 0x7e
  406390:	e777      	b.n	406282 <_free_r+0xa2>
  406392:	f043 0101 	orr.w	r1, r3, #1
  406396:	6061      	str	r1, [r4, #4]
  406398:	6013      	str	r3, [r2, #0]
  40639a:	e763      	b.n	406264 <_free_r+0x84>
  40639c:	200005ac 	.word	0x200005ac
  4063a0:	200005b4 	.word	0x200005b4
  4063a4:	200009b8 	.word	0x200009b8
  4063a8:	20000e2c 	.word	0x20000e2c

004063ac <_localeconv_r>:
  4063ac:	4a04      	ldr	r2, [pc, #16]	; (4063c0 <_localeconv_r+0x14>)
  4063ae:	4b05      	ldr	r3, [pc, #20]	; (4063c4 <_localeconv_r+0x18>)
  4063b0:	6812      	ldr	r2, [r2, #0]
  4063b2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4063b4:	2800      	cmp	r0, #0
  4063b6:	bf08      	it	eq
  4063b8:	4618      	moveq	r0, r3
  4063ba:	30f0      	adds	r0, #240	; 0xf0
  4063bc:	4770      	bx	lr
  4063be:	bf00      	nop
  4063c0:	20000010 	.word	0x20000010
  4063c4:	20000440 	.word	0x20000440

004063c8 <_malloc_r>:
  4063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063cc:	f101 060b 	add.w	r6, r1, #11
  4063d0:	2e16      	cmp	r6, #22
  4063d2:	b083      	sub	sp, #12
  4063d4:	4605      	mov	r5, r0
  4063d6:	f240 809e 	bls.w	406516 <_malloc_r+0x14e>
  4063da:	f036 0607 	bics.w	r6, r6, #7
  4063de:	f100 80bd 	bmi.w	40655c <_malloc_r+0x194>
  4063e2:	42b1      	cmp	r1, r6
  4063e4:	f200 80ba 	bhi.w	40655c <_malloc_r+0x194>
  4063e8:	f000 fc38 	bl	406c5c <__malloc_lock>
  4063ec:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4063f0:	f0c0 8293 	bcc.w	40691a <_malloc_r+0x552>
  4063f4:	0a73      	lsrs	r3, r6, #9
  4063f6:	f000 80b8 	beq.w	40656a <_malloc_r+0x1a2>
  4063fa:	2b04      	cmp	r3, #4
  4063fc:	f200 8179 	bhi.w	4066f2 <_malloc_r+0x32a>
  406400:	09b3      	lsrs	r3, r6, #6
  406402:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406406:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40640a:	00c3      	lsls	r3, r0, #3
  40640c:	4fbf      	ldr	r7, [pc, #764]	; (40670c <_malloc_r+0x344>)
  40640e:	443b      	add	r3, r7
  406410:	f1a3 0108 	sub.w	r1, r3, #8
  406414:	685c      	ldr	r4, [r3, #4]
  406416:	42a1      	cmp	r1, r4
  406418:	d106      	bne.n	406428 <_malloc_r+0x60>
  40641a:	e00c      	b.n	406436 <_malloc_r+0x6e>
  40641c:	2a00      	cmp	r2, #0
  40641e:	f280 80aa 	bge.w	406576 <_malloc_r+0x1ae>
  406422:	68e4      	ldr	r4, [r4, #12]
  406424:	42a1      	cmp	r1, r4
  406426:	d006      	beq.n	406436 <_malloc_r+0x6e>
  406428:	6863      	ldr	r3, [r4, #4]
  40642a:	f023 0303 	bic.w	r3, r3, #3
  40642e:	1b9a      	subs	r2, r3, r6
  406430:	2a0f      	cmp	r2, #15
  406432:	ddf3      	ble.n	40641c <_malloc_r+0x54>
  406434:	4670      	mov	r0, lr
  406436:	693c      	ldr	r4, [r7, #16]
  406438:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406720 <_malloc_r+0x358>
  40643c:	4574      	cmp	r4, lr
  40643e:	f000 81ab 	beq.w	406798 <_malloc_r+0x3d0>
  406442:	6863      	ldr	r3, [r4, #4]
  406444:	f023 0303 	bic.w	r3, r3, #3
  406448:	1b9a      	subs	r2, r3, r6
  40644a:	2a0f      	cmp	r2, #15
  40644c:	f300 8190 	bgt.w	406770 <_malloc_r+0x3a8>
  406450:	2a00      	cmp	r2, #0
  406452:	f8c7 e014 	str.w	lr, [r7, #20]
  406456:	f8c7 e010 	str.w	lr, [r7, #16]
  40645a:	f280 809d 	bge.w	406598 <_malloc_r+0x1d0>
  40645e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406462:	f080 8161 	bcs.w	406728 <_malloc_r+0x360>
  406466:	08db      	lsrs	r3, r3, #3
  406468:	f103 0c01 	add.w	ip, r3, #1
  40646c:	1099      	asrs	r1, r3, #2
  40646e:	687a      	ldr	r2, [r7, #4]
  406470:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406474:	f8c4 8008 	str.w	r8, [r4, #8]
  406478:	2301      	movs	r3, #1
  40647a:	408b      	lsls	r3, r1
  40647c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406480:	4313      	orrs	r3, r2
  406482:	3908      	subs	r1, #8
  406484:	60e1      	str	r1, [r4, #12]
  406486:	607b      	str	r3, [r7, #4]
  406488:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40648c:	f8c8 400c 	str.w	r4, [r8, #12]
  406490:	1082      	asrs	r2, r0, #2
  406492:	2401      	movs	r4, #1
  406494:	4094      	lsls	r4, r2
  406496:	429c      	cmp	r4, r3
  406498:	f200 808b 	bhi.w	4065b2 <_malloc_r+0x1ea>
  40649c:	421c      	tst	r4, r3
  40649e:	d106      	bne.n	4064ae <_malloc_r+0xe6>
  4064a0:	f020 0003 	bic.w	r0, r0, #3
  4064a4:	0064      	lsls	r4, r4, #1
  4064a6:	421c      	tst	r4, r3
  4064a8:	f100 0004 	add.w	r0, r0, #4
  4064ac:	d0fa      	beq.n	4064a4 <_malloc_r+0xdc>
  4064ae:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4064b2:	46cc      	mov	ip, r9
  4064b4:	4680      	mov	r8, r0
  4064b6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4064ba:	459c      	cmp	ip, r3
  4064bc:	d107      	bne.n	4064ce <_malloc_r+0x106>
  4064be:	e16d      	b.n	40679c <_malloc_r+0x3d4>
  4064c0:	2a00      	cmp	r2, #0
  4064c2:	f280 817b 	bge.w	4067bc <_malloc_r+0x3f4>
  4064c6:	68db      	ldr	r3, [r3, #12]
  4064c8:	459c      	cmp	ip, r3
  4064ca:	f000 8167 	beq.w	40679c <_malloc_r+0x3d4>
  4064ce:	6859      	ldr	r1, [r3, #4]
  4064d0:	f021 0103 	bic.w	r1, r1, #3
  4064d4:	1b8a      	subs	r2, r1, r6
  4064d6:	2a0f      	cmp	r2, #15
  4064d8:	ddf2      	ble.n	4064c0 <_malloc_r+0xf8>
  4064da:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4064de:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4064e2:	9300      	str	r3, [sp, #0]
  4064e4:	199c      	adds	r4, r3, r6
  4064e6:	4628      	mov	r0, r5
  4064e8:	f046 0601 	orr.w	r6, r6, #1
  4064ec:	f042 0501 	orr.w	r5, r2, #1
  4064f0:	605e      	str	r6, [r3, #4]
  4064f2:	f8c8 c00c 	str.w	ip, [r8, #12]
  4064f6:	f8cc 8008 	str.w	r8, [ip, #8]
  4064fa:	617c      	str	r4, [r7, #20]
  4064fc:	613c      	str	r4, [r7, #16]
  4064fe:	f8c4 e00c 	str.w	lr, [r4, #12]
  406502:	f8c4 e008 	str.w	lr, [r4, #8]
  406506:	6065      	str	r5, [r4, #4]
  406508:	505a      	str	r2, [r3, r1]
  40650a:	f000 fba9 	bl	406c60 <__malloc_unlock>
  40650e:	9b00      	ldr	r3, [sp, #0]
  406510:	f103 0408 	add.w	r4, r3, #8
  406514:	e01e      	b.n	406554 <_malloc_r+0x18c>
  406516:	2910      	cmp	r1, #16
  406518:	d820      	bhi.n	40655c <_malloc_r+0x194>
  40651a:	f000 fb9f 	bl	406c5c <__malloc_lock>
  40651e:	2610      	movs	r6, #16
  406520:	2318      	movs	r3, #24
  406522:	2002      	movs	r0, #2
  406524:	4f79      	ldr	r7, [pc, #484]	; (40670c <_malloc_r+0x344>)
  406526:	443b      	add	r3, r7
  406528:	f1a3 0208 	sub.w	r2, r3, #8
  40652c:	685c      	ldr	r4, [r3, #4]
  40652e:	4294      	cmp	r4, r2
  406530:	f000 813d 	beq.w	4067ae <_malloc_r+0x3e6>
  406534:	6863      	ldr	r3, [r4, #4]
  406536:	68e1      	ldr	r1, [r4, #12]
  406538:	68a6      	ldr	r6, [r4, #8]
  40653a:	f023 0303 	bic.w	r3, r3, #3
  40653e:	4423      	add	r3, r4
  406540:	4628      	mov	r0, r5
  406542:	685a      	ldr	r2, [r3, #4]
  406544:	60f1      	str	r1, [r6, #12]
  406546:	f042 0201 	orr.w	r2, r2, #1
  40654a:	608e      	str	r6, [r1, #8]
  40654c:	605a      	str	r2, [r3, #4]
  40654e:	f000 fb87 	bl	406c60 <__malloc_unlock>
  406552:	3408      	adds	r4, #8
  406554:	4620      	mov	r0, r4
  406556:	b003      	add	sp, #12
  406558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40655c:	2400      	movs	r4, #0
  40655e:	230c      	movs	r3, #12
  406560:	4620      	mov	r0, r4
  406562:	602b      	str	r3, [r5, #0]
  406564:	b003      	add	sp, #12
  406566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40656a:	2040      	movs	r0, #64	; 0x40
  40656c:	f44f 7300 	mov.w	r3, #512	; 0x200
  406570:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406574:	e74a      	b.n	40640c <_malloc_r+0x44>
  406576:	4423      	add	r3, r4
  406578:	68e1      	ldr	r1, [r4, #12]
  40657a:	685a      	ldr	r2, [r3, #4]
  40657c:	68a6      	ldr	r6, [r4, #8]
  40657e:	f042 0201 	orr.w	r2, r2, #1
  406582:	60f1      	str	r1, [r6, #12]
  406584:	4628      	mov	r0, r5
  406586:	608e      	str	r6, [r1, #8]
  406588:	605a      	str	r2, [r3, #4]
  40658a:	f000 fb69 	bl	406c60 <__malloc_unlock>
  40658e:	3408      	adds	r4, #8
  406590:	4620      	mov	r0, r4
  406592:	b003      	add	sp, #12
  406594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406598:	4423      	add	r3, r4
  40659a:	4628      	mov	r0, r5
  40659c:	685a      	ldr	r2, [r3, #4]
  40659e:	f042 0201 	orr.w	r2, r2, #1
  4065a2:	605a      	str	r2, [r3, #4]
  4065a4:	f000 fb5c 	bl	406c60 <__malloc_unlock>
  4065a8:	3408      	adds	r4, #8
  4065aa:	4620      	mov	r0, r4
  4065ac:	b003      	add	sp, #12
  4065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065b2:	68bc      	ldr	r4, [r7, #8]
  4065b4:	6863      	ldr	r3, [r4, #4]
  4065b6:	f023 0803 	bic.w	r8, r3, #3
  4065ba:	45b0      	cmp	r8, r6
  4065bc:	d304      	bcc.n	4065c8 <_malloc_r+0x200>
  4065be:	eba8 0306 	sub.w	r3, r8, r6
  4065c2:	2b0f      	cmp	r3, #15
  4065c4:	f300 8085 	bgt.w	4066d2 <_malloc_r+0x30a>
  4065c8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406724 <_malloc_r+0x35c>
  4065cc:	4b50      	ldr	r3, [pc, #320]	; (406710 <_malloc_r+0x348>)
  4065ce:	f8d9 2000 	ldr.w	r2, [r9]
  4065d2:	681b      	ldr	r3, [r3, #0]
  4065d4:	3201      	adds	r2, #1
  4065d6:	4433      	add	r3, r6
  4065d8:	eb04 0a08 	add.w	sl, r4, r8
  4065dc:	f000 8155 	beq.w	40688a <_malloc_r+0x4c2>
  4065e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4065e4:	330f      	adds	r3, #15
  4065e6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4065ea:	f02b 0b0f 	bic.w	fp, fp, #15
  4065ee:	4659      	mov	r1, fp
  4065f0:	4628      	mov	r0, r5
  4065f2:	f000 ffd7 	bl	4075a4 <_sbrk_r>
  4065f6:	1c41      	adds	r1, r0, #1
  4065f8:	4602      	mov	r2, r0
  4065fa:	f000 80fc 	beq.w	4067f6 <_malloc_r+0x42e>
  4065fe:	4582      	cmp	sl, r0
  406600:	f200 80f7 	bhi.w	4067f2 <_malloc_r+0x42a>
  406604:	4b43      	ldr	r3, [pc, #268]	; (406714 <_malloc_r+0x34c>)
  406606:	6819      	ldr	r1, [r3, #0]
  406608:	4459      	add	r1, fp
  40660a:	6019      	str	r1, [r3, #0]
  40660c:	f000 814d 	beq.w	4068aa <_malloc_r+0x4e2>
  406610:	f8d9 0000 	ldr.w	r0, [r9]
  406614:	3001      	adds	r0, #1
  406616:	bf1b      	ittet	ne
  406618:	eba2 0a0a 	subne.w	sl, r2, sl
  40661c:	4451      	addne	r1, sl
  40661e:	f8c9 2000 	streq.w	r2, [r9]
  406622:	6019      	strne	r1, [r3, #0]
  406624:	f012 0107 	ands.w	r1, r2, #7
  406628:	f000 8115 	beq.w	406856 <_malloc_r+0x48e>
  40662c:	f1c1 0008 	rsb	r0, r1, #8
  406630:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406634:	4402      	add	r2, r0
  406636:	3108      	adds	r1, #8
  406638:	eb02 090b 	add.w	r9, r2, fp
  40663c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406640:	eba1 0909 	sub.w	r9, r1, r9
  406644:	4649      	mov	r1, r9
  406646:	4628      	mov	r0, r5
  406648:	9301      	str	r3, [sp, #4]
  40664a:	9200      	str	r2, [sp, #0]
  40664c:	f000 ffaa 	bl	4075a4 <_sbrk_r>
  406650:	1c43      	adds	r3, r0, #1
  406652:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406656:	f000 8143 	beq.w	4068e0 <_malloc_r+0x518>
  40665a:	1a80      	subs	r0, r0, r2
  40665c:	4448      	add	r0, r9
  40665e:	f040 0001 	orr.w	r0, r0, #1
  406662:	6819      	ldr	r1, [r3, #0]
  406664:	60ba      	str	r2, [r7, #8]
  406666:	4449      	add	r1, r9
  406668:	42bc      	cmp	r4, r7
  40666a:	6050      	str	r0, [r2, #4]
  40666c:	6019      	str	r1, [r3, #0]
  40666e:	d017      	beq.n	4066a0 <_malloc_r+0x2d8>
  406670:	f1b8 0f0f 	cmp.w	r8, #15
  406674:	f240 80fb 	bls.w	40686e <_malloc_r+0x4a6>
  406678:	6860      	ldr	r0, [r4, #4]
  40667a:	f1a8 020c 	sub.w	r2, r8, #12
  40667e:	f022 0207 	bic.w	r2, r2, #7
  406682:	eb04 0e02 	add.w	lr, r4, r2
  406686:	f000 0001 	and.w	r0, r0, #1
  40668a:	f04f 0c05 	mov.w	ip, #5
  40668e:	4310      	orrs	r0, r2
  406690:	2a0f      	cmp	r2, #15
  406692:	6060      	str	r0, [r4, #4]
  406694:	f8ce c004 	str.w	ip, [lr, #4]
  406698:	f8ce c008 	str.w	ip, [lr, #8]
  40669c:	f200 8117 	bhi.w	4068ce <_malloc_r+0x506>
  4066a0:	4b1d      	ldr	r3, [pc, #116]	; (406718 <_malloc_r+0x350>)
  4066a2:	68bc      	ldr	r4, [r7, #8]
  4066a4:	681a      	ldr	r2, [r3, #0]
  4066a6:	4291      	cmp	r1, r2
  4066a8:	bf88      	it	hi
  4066aa:	6019      	strhi	r1, [r3, #0]
  4066ac:	4b1b      	ldr	r3, [pc, #108]	; (40671c <_malloc_r+0x354>)
  4066ae:	681a      	ldr	r2, [r3, #0]
  4066b0:	4291      	cmp	r1, r2
  4066b2:	6862      	ldr	r2, [r4, #4]
  4066b4:	bf88      	it	hi
  4066b6:	6019      	strhi	r1, [r3, #0]
  4066b8:	f022 0203 	bic.w	r2, r2, #3
  4066bc:	4296      	cmp	r6, r2
  4066be:	eba2 0306 	sub.w	r3, r2, r6
  4066c2:	d801      	bhi.n	4066c8 <_malloc_r+0x300>
  4066c4:	2b0f      	cmp	r3, #15
  4066c6:	dc04      	bgt.n	4066d2 <_malloc_r+0x30a>
  4066c8:	4628      	mov	r0, r5
  4066ca:	f000 fac9 	bl	406c60 <__malloc_unlock>
  4066ce:	2400      	movs	r4, #0
  4066d0:	e740      	b.n	406554 <_malloc_r+0x18c>
  4066d2:	19a2      	adds	r2, r4, r6
  4066d4:	f043 0301 	orr.w	r3, r3, #1
  4066d8:	f046 0601 	orr.w	r6, r6, #1
  4066dc:	6066      	str	r6, [r4, #4]
  4066de:	4628      	mov	r0, r5
  4066e0:	60ba      	str	r2, [r7, #8]
  4066e2:	6053      	str	r3, [r2, #4]
  4066e4:	f000 fabc 	bl	406c60 <__malloc_unlock>
  4066e8:	3408      	adds	r4, #8
  4066ea:	4620      	mov	r0, r4
  4066ec:	b003      	add	sp, #12
  4066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066f2:	2b14      	cmp	r3, #20
  4066f4:	d971      	bls.n	4067da <_malloc_r+0x412>
  4066f6:	2b54      	cmp	r3, #84	; 0x54
  4066f8:	f200 80a3 	bhi.w	406842 <_malloc_r+0x47a>
  4066fc:	0b33      	lsrs	r3, r6, #12
  4066fe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406702:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406706:	00c3      	lsls	r3, r0, #3
  406708:	e680      	b.n	40640c <_malloc_r+0x44>
  40670a:	bf00      	nop
  40670c:	200005ac 	.word	0x200005ac
  406710:	20000e2c 	.word	0x20000e2c
  406714:	20000dfc 	.word	0x20000dfc
  406718:	20000e24 	.word	0x20000e24
  40671c:	20000e28 	.word	0x20000e28
  406720:	200005b4 	.word	0x200005b4
  406724:	200009b4 	.word	0x200009b4
  406728:	0a5a      	lsrs	r2, r3, #9
  40672a:	2a04      	cmp	r2, #4
  40672c:	d95b      	bls.n	4067e6 <_malloc_r+0x41e>
  40672e:	2a14      	cmp	r2, #20
  406730:	f200 80ae 	bhi.w	406890 <_malloc_r+0x4c8>
  406734:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406738:	00c9      	lsls	r1, r1, #3
  40673a:	325b      	adds	r2, #91	; 0x5b
  40673c:	eb07 0c01 	add.w	ip, r7, r1
  406740:	5879      	ldr	r1, [r7, r1]
  406742:	f1ac 0c08 	sub.w	ip, ip, #8
  406746:	458c      	cmp	ip, r1
  406748:	f000 8088 	beq.w	40685c <_malloc_r+0x494>
  40674c:	684a      	ldr	r2, [r1, #4]
  40674e:	f022 0203 	bic.w	r2, r2, #3
  406752:	4293      	cmp	r3, r2
  406754:	d273      	bcs.n	40683e <_malloc_r+0x476>
  406756:	6889      	ldr	r1, [r1, #8]
  406758:	458c      	cmp	ip, r1
  40675a:	d1f7      	bne.n	40674c <_malloc_r+0x384>
  40675c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406760:	687b      	ldr	r3, [r7, #4]
  406762:	60e2      	str	r2, [r4, #12]
  406764:	f8c4 c008 	str.w	ip, [r4, #8]
  406768:	6094      	str	r4, [r2, #8]
  40676a:	f8cc 400c 	str.w	r4, [ip, #12]
  40676e:	e68f      	b.n	406490 <_malloc_r+0xc8>
  406770:	19a1      	adds	r1, r4, r6
  406772:	f046 0c01 	orr.w	ip, r6, #1
  406776:	f042 0601 	orr.w	r6, r2, #1
  40677a:	f8c4 c004 	str.w	ip, [r4, #4]
  40677e:	4628      	mov	r0, r5
  406780:	6179      	str	r1, [r7, #20]
  406782:	6139      	str	r1, [r7, #16]
  406784:	f8c1 e00c 	str.w	lr, [r1, #12]
  406788:	f8c1 e008 	str.w	lr, [r1, #8]
  40678c:	604e      	str	r6, [r1, #4]
  40678e:	50e2      	str	r2, [r4, r3]
  406790:	f000 fa66 	bl	406c60 <__malloc_unlock>
  406794:	3408      	adds	r4, #8
  406796:	e6dd      	b.n	406554 <_malloc_r+0x18c>
  406798:	687b      	ldr	r3, [r7, #4]
  40679a:	e679      	b.n	406490 <_malloc_r+0xc8>
  40679c:	f108 0801 	add.w	r8, r8, #1
  4067a0:	f018 0f03 	tst.w	r8, #3
  4067a4:	f10c 0c08 	add.w	ip, ip, #8
  4067a8:	f47f ae85 	bne.w	4064b6 <_malloc_r+0xee>
  4067ac:	e02d      	b.n	40680a <_malloc_r+0x442>
  4067ae:	68dc      	ldr	r4, [r3, #12]
  4067b0:	42a3      	cmp	r3, r4
  4067b2:	bf08      	it	eq
  4067b4:	3002      	addeq	r0, #2
  4067b6:	f43f ae3e 	beq.w	406436 <_malloc_r+0x6e>
  4067ba:	e6bb      	b.n	406534 <_malloc_r+0x16c>
  4067bc:	4419      	add	r1, r3
  4067be:	461c      	mov	r4, r3
  4067c0:	684a      	ldr	r2, [r1, #4]
  4067c2:	68db      	ldr	r3, [r3, #12]
  4067c4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4067c8:	f042 0201 	orr.w	r2, r2, #1
  4067cc:	604a      	str	r2, [r1, #4]
  4067ce:	4628      	mov	r0, r5
  4067d0:	60f3      	str	r3, [r6, #12]
  4067d2:	609e      	str	r6, [r3, #8]
  4067d4:	f000 fa44 	bl	406c60 <__malloc_unlock>
  4067d8:	e6bc      	b.n	406554 <_malloc_r+0x18c>
  4067da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4067de:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4067e2:	00c3      	lsls	r3, r0, #3
  4067e4:	e612      	b.n	40640c <_malloc_r+0x44>
  4067e6:	099a      	lsrs	r2, r3, #6
  4067e8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4067ec:	00c9      	lsls	r1, r1, #3
  4067ee:	3238      	adds	r2, #56	; 0x38
  4067f0:	e7a4      	b.n	40673c <_malloc_r+0x374>
  4067f2:	42bc      	cmp	r4, r7
  4067f4:	d054      	beq.n	4068a0 <_malloc_r+0x4d8>
  4067f6:	68bc      	ldr	r4, [r7, #8]
  4067f8:	6862      	ldr	r2, [r4, #4]
  4067fa:	f022 0203 	bic.w	r2, r2, #3
  4067fe:	e75d      	b.n	4066bc <_malloc_r+0x2f4>
  406800:	f859 3908 	ldr.w	r3, [r9], #-8
  406804:	4599      	cmp	r9, r3
  406806:	f040 8086 	bne.w	406916 <_malloc_r+0x54e>
  40680a:	f010 0f03 	tst.w	r0, #3
  40680e:	f100 30ff 	add.w	r0, r0, #4294967295
  406812:	d1f5      	bne.n	406800 <_malloc_r+0x438>
  406814:	687b      	ldr	r3, [r7, #4]
  406816:	ea23 0304 	bic.w	r3, r3, r4
  40681a:	607b      	str	r3, [r7, #4]
  40681c:	0064      	lsls	r4, r4, #1
  40681e:	429c      	cmp	r4, r3
  406820:	f63f aec7 	bhi.w	4065b2 <_malloc_r+0x1ea>
  406824:	2c00      	cmp	r4, #0
  406826:	f43f aec4 	beq.w	4065b2 <_malloc_r+0x1ea>
  40682a:	421c      	tst	r4, r3
  40682c:	4640      	mov	r0, r8
  40682e:	f47f ae3e 	bne.w	4064ae <_malloc_r+0xe6>
  406832:	0064      	lsls	r4, r4, #1
  406834:	421c      	tst	r4, r3
  406836:	f100 0004 	add.w	r0, r0, #4
  40683a:	d0fa      	beq.n	406832 <_malloc_r+0x46a>
  40683c:	e637      	b.n	4064ae <_malloc_r+0xe6>
  40683e:	468c      	mov	ip, r1
  406840:	e78c      	b.n	40675c <_malloc_r+0x394>
  406842:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406846:	d815      	bhi.n	406874 <_malloc_r+0x4ac>
  406848:	0bf3      	lsrs	r3, r6, #15
  40684a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40684e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406852:	00c3      	lsls	r3, r0, #3
  406854:	e5da      	b.n	40640c <_malloc_r+0x44>
  406856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40685a:	e6ed      	b.n	406638 <_malloc_r+0x270>
  40685c:	687b      	ldr	r3, [r7, #4]
  40685e:	1092      	asrs	r2, r2, #2
  406860:	2101      	movs	r1, #1
  406862:	fa01 f202 	lsl.w	r2, r1, r2
  406866:	4313      	orrs	r3, r2
  406868:	607b      	str	r3, [r7, #4]
  40686a:	4662      	mov	r2, ip
  40686c:	e779      	b.n	406762 <_malloc_r+0x39a>
  40686e:	2301      	movs	r3, #1
  406870:	6053      	str	r3, [r2, #4]
  406872:	e729      	b.n	4066c8 <_malloc_r+0x300>
  406874:	f240 5254 	movw	r2, #1364	; 0x554
  406878:	4293      	cmp	r3, r2
  40687a:	d822      	bhi.n	4068c2 <_malloc_r+0x4fa>
  40687c:	0cb3      	lsrs	r3, r6, #18
  40687e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406882:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406886:	00c3      	lsls	r3, r0, #3
  406888:	e5c0      	b.n	40640c <_malloc_r+0x44>
  40688a:	f103 0b10 	add.w	fp, r3, #16
  40688e:	e6ae      	b.n	4065ee <_malloc_r+0x226>
  406890:	2a54      	cmp	r2, #84	; 0x54
  406892:	d829      	bhi.n	4068e8 <_malloc_r+0x520>
  406894:	0b1a      	lsrs	r2, r3, #12
  406896:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40689a:	00c9      	lsls	r1, r1, #3
  40689c:	326e      	adds	r2, #110	; 0x6e
  40689e:	e74d      	b.n	40673c <_malloc_r+0x374>
  4068a0:	4b20      	ldr	r3, [pc, #128]	; (406924 <_malloc_r+0x55c>)
  4068a2:	6819      	ldr	r1, [r3, #0]
  4068a4:	4459      	add	r1, fp
  4068a6:	6019      	str	r1, [r3, #0]
  4068a8:	e6b2      	b.n	406610 <_malloc_r+0x248>
  4068aa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4068ae:	2800      	cmp	r0, #0
  4068b0:	f47f aeae 	bne.w	406610 <_malloc_r+0x248>
  4068b4:	eb08 030b 	add.w	r3, r8, fp
  4068b8:	68ba      	ldr	r2, [r7, #8]
  4068ba:	f043 0301 	orr.w	r3, r3, #1
  4068be:	6053      	str	r3, [r2, #4]
  4068c0:	e6ee      	b.n	4066a0 <_malloc_r+0x2d8>
  4068c2:	207f      	movs	r0, #127	; 0x7f
  4068c4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4068c8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4068cc:	e59e      	b.n	40640c <_malloc_r+0x44>
  4068ce:	f104 0108 	add.w	r1, r4, #8
  4068d2:	4628      	mov	r0, r5
  4068d4:	9300      	str	r3, [sp, #0]
  4068d6:	f7ff fc83 	bl	4061e0 <_free_r>
  4068da:	9b00      	ldr	r3, [sp, #0]
  4068dc:	6819      	ldr	r1, [r3, #0]
  4068de:	e6df      	b.n	4066a0 <_malloc_r+0x2d8>
  4068e0:	2001      	movs	r0, #1
  4068e2:	f04f 0900 	mov.w	r9, #0
  4068e6:	e6bc      	b.n	406662 <_malloc_r+0x29a>
  4068e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4068ec:	d805      	bhi.n	4068fa <_malloc_r+0x532>
  4068ee:	0bda      	lsrs	r2, r3, #15
  4068f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4068f4:	00c9      	lsls	r1, r1, #3
  4068f6:	3277      	adds	r2, #119	; 0x77
  4068f8:	e720      	b.n	40673c <_malloc_r+0x374>
  4068fa:	f240 5154 	movw	r1, #1364	; 0x554
  4068fe:	428a      	cmp	r2, r1
  406900:	d805      	bhi.n	40690e <_malloc_r+0x546>
  406902:	0c9a      	lsrs	r2, r3, #18
  406904:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406908:	00c9      	lsls	r1, r1, #3
  40690a:	327c      	adds	r2, #124	; 0x7c
  40690c:	e716      	b.n	40673c <_malloc_r+0x374>
  40690e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406912:	227e      	movs	r2, #126	; 0x7e
  406914:	e712      	b.n	40673c <_malloc_r+0x374>
  406916:	687b      	ldr	r3, [r7, #4]
  406918:	e780      	b.n	40681c <_malloc_r+0x454>
  40691a:	08f0      	lsrs	r0, r6, #3
  40691c:	f106 0308 	add.w	r3, r6, #8
  406920:	e600      	b.n	406524 <_malloc_r+0x15c>
  406922:	bf00      	nop
  406924:	20000dfc 	.word	0x20000dfc

00406928 <__ascii_mbtowc>:
  406928:	b082      	sub	sp, #8
  40692a:	b149      	cbz	r1, 406940 <__ascii_mbtowc+0x18>
  40692c:	b15a      	cbz	r2, 406946 <__ascii_mbtowc+0x1e>
  40692e:	b16b      	cbz	r3, 40694c <__ascii_mbtowc+0x24>
  406930:	7813      	ldrb	r3, [r2, #0]
  406932:	600b      	str	r3, [r1, #0]
  406934:	7812      	ldrb	r2, [r2, #0]
  406936:	1c10      	adds	r0, r2, #0
  406938:	bf18      	it	ne
  40693a:	2001      	movne	r0, #1
  40693c:	b002      	add	sp, #8
  40693e:	4770      	bx	lr
  406940:	a901      	add	r1, sp, #4
  406942:	2a00      	cmp	r2, #0
  406944:	d1f3      	bne.n	40692e <__ascii_mbtowc+0x6>
  406946:	4610      	mov	r0, r2
  406948:	b002      	add	sp, #8
  40694a:	4770      	bx	lr
  40694c:	f06f 0001 	mvn.w	r0, #1
  406950:	e7f4      	b.n	40693c <__ascii_mbtowc+0x14>
  406952:	bf00      	nop
	...

00406960 <memchr>:
  406960:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406964:	2a10      	cmp	r2, #16
  406966:	db2b      	blt.n	4069c0 <memchr+0x60>
  406968:	f010 0f07 	tst.w	r0, #7
  40696c:	d008      	beq.n	406980 <memchr+0x20>
  40696e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406972:	3a01      	subs	r2, #1
  406974:	428b      	cmp	r3, r1
  406976:	d02d      	beq.n	4069d4 <memchr+0x74>
  406978:	f010 0f07 	tst.w	r0, #7
  40697c:	b342      	cbz	r2, 4069d0 <memchr+0x70>
  40697e:	d1f6      	bne.n	40696e <memchr+0xe>
  406980:	b4f0      	push	{r4, r5, r6, r7}
  406982:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406986:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40698a:	f022 0407 	bic.w	r4, r2, #7
  40698e:	f07f 0700 	mvns.w	r7, #0
  406992:	2300      	movs	r3, #0
  406994:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406998:	3c08      	subs	r4, #8
  40699a:	ea85 0501 	eor.w	r5, r5, r1
  40699e:	ea86 0601 	eor.w	r6, r6, r1
  4069a2:	fa85 f547 	uadd8	r5, r5, r7
  4069a6:	faa3 f587 	sel	r5, r3, r7
  4069aa:	fa86 f647 	uadd8	r6, r6, r7
  4069ae:	faa5 f687 	sel	r6, r5, r7
  4069b2:	b98e      	cbnz	r6, 4069d8 <memchr+0x78>
  4069b4:	d1ee      	bne.n	406994 <memchr+0x34>
  4069b6:	bcf0      	pop	{r4, r5, r6, r7}
  4069b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4069bc:	f002 0207 	and.w	r2, r2, #7
  4069c0:	b132      	cbz	r2, 4069d0 <memchr+0x70>
  4069c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4069c6:	3a01      	subs	r2, #1
  4069c8:	ea83 0301 	eor.w	r3, r3, r1
  4069cc:	b113      	cbz	r3, 4069d4 <memchr+0x74>
  4069ce:	d1f8      	bne.n	4069c2 <memchr+0x62>
  4069d0:	2000      	movs	r0, #0
  4069d2:	4770      	bx	lr
  4069d4:	3801      	subs	r0, #1
  4069d6:	4770      	bx	lr
  4069d8:	2d00      	cmp	r5, #0
  4069da:	bf06      	itte	eq
  4069dc:	4635      	moveq	r5, r6
  4069de:	3803      	subeq	r0, #3
  4069e0:	3807      	subne	r0, #7
  4069e2:	f015 0f01 	tst.w	r5, #1
  4069e6:	d107      	bne.n	4069f8 <memchr+0x98>
  4069e8:	3001      	adds	r0, #1
  4069ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4069ee:	bf02      	ittt	eq
  4069f0:	3001      	addeq	r0, #1
  4069f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4069f6:	3001      	addeq	r0, #1
  4069f8:	bcf0      	pop	{r4, r5, r6, r7}
  4069fa:	3801      	subs	r0, #1
  4069fc:	4770      	bx	lr
  4069fe:	bf00      	nop

00406a00 <memcmp>:
  406a00:	2a03      	cmp	r2, #3
  406a02:	b470      	push	{r4, r5, r6}
  406a04:	d922      	bls.n	406a4c <memcmp+0x4c>
  406a06:	ea40 0301 	orr.w	r3, r0, r1
  406a0a:	079b      	lsls	r3, r3, #30
  406a0c:	d011      	beq.n	406a32 <memcmp+0x32>
  406a0e:	7803      	ldrb	r3, [r0, #0]
  406a10:	780c      	ldrb	r4, [r1, #0]
  406a12:	42a3      	cmp	r3, r4
  406a14:	d11d      	bne.n	406a52 <memcmp+0x52>
  406a16:	440a      	add	r2, r1
  406a18:	3101      	adds	r1, #1
  406a1a:	e005      	b.n	406a28 <memcmp+0x28>
  406a1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406a20:	f811 4b01 	ldrb.w	r4, [r1], #1
  406a24:	42a3      	cmp	r3, r4
  406a26:	d114      	bne.n	406a52 <memcmp+0x52>
  406a28:	4291      	cmp	r1, r2
  406a2a:	d1f7      	bne.n	406a1c <memcmp+0x1c>
  406a2c:	2000      	movs	r0, #0
  406a2e:	bc70      	pop	{r4, r5, r6}
  406a30:	4770      	bx	lr
  406a32:	680d      	ldr	r5, [r1, #0]
  406a34:	6806      	ldr	r6, [r0, #0]
  406a36:	42ae      	cmp	r6, r5
  406a38:	460c      	mov	r4, r1
  406a3a:	4603      	mov	r3, r0
  406a3c:	f101 0104 	add.w	r1, r1, #4
  406a40:	f100 0004 	add.w	r0, r0, #4
  406a44:	d108      	bne.n	406a58 <memcmp+0x58>
  406a46:	3a04      	subs	r2, #4
  406a48:	2a03      	cmp	r2, #3
  406a4a:	d8f2      	bhi.n	406a32 <memcmp+0x32>
  406a4c:	2a00      	cmp	r2, #0
  406a4e:	d1de      	bne.n	406a0e <memcmp+0xe>
  406a50:	e7ec      	b.n	406a2c <memcmp+0x2c>
  406a52:	1b18      	subs	r0, r3, r4
  406a54:	bc70      	pop	{r4, r5, r6}
  406a56:	4770      	bx	lr
  406a58:	4621      	mov	r1, r4
  406a5a:	4618      	mov	r0, r3
  406a5c:	e7d7      	b.n	406a0e <memcmp+0xe>
  406a5e:	bf00      	nop

00406a60 <memcpy>:
  406a60:	4684      	mov	ip, r0
  406a62:	ea41 0300 	orr.w	r3, r1, r0
  406a66:	f013 0303 	ands.w	r3, r3, #3
  406a6a:	d16d      	bne.n	406b48 <memcpy+0xe8>
  406a6c:	3a40      	subs	r2, #64	; 0x40
  406a6e:	d341      	bcc.n	406af4 <memcpy+0x94>
  406a70:	f851 3b04 	ldr.w	r3, [r1], #4
  406a74:	f840 3b04 	str.w	r3, [r0], #4
  406a78:	f851 3b04 	ldr.w	r3, [r1], #4
  406a7c:	f840 3b04 	str.w	r3, [r0], #4
  406a80:	f851 3b04 	ldr.w	r3, [r1], #4
  406a84:	f840 3b04 	str.w	r3, [r0], #4
  406a88:	f851 3b04 	ldr.w	r3, [r1], #4
  406a8c:	f840 3b04 	str.w	r3, [r0], #4
  406a90:	f851 3b04 	ldr.w	r3, [r1], #4
  406a94:	f840 3b04 	str.w	r3, [r0], #4
  406a98:	f851 3b04 	ldr.w	r3, [r1], #4
  406a9c:	f840 3b04 	str.w	r3, [r0], #4
  406aa0:	f851 3b04 	ldr.w	r3, [r1], #4
  406aa4:	f840 3b04 	str.w	r3, [r0], #4
  406aa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aac:	f840 3b04 	str.w	r3, [r0], #4
  406ab0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ab4:	f840 3b04 	str.w	r3, [r0], #4
  406ab8:	f851 3b04 	ldr.w	r3, [r1], #4
  406abc:	f840 3b04 	str.w	r3, [r0], #4
  406ac0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ac4:	f840 3b04 	str.w	r3, [r0], #4
  406ac8:	f851 3b04 	ldr.w	r3, [r1], #4
  406acc:	f840 3b04 	str.w	r3, [r0], #4
  406ad0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ad4:	f840 3b04 	str.w	r3, [r0], #4
  406ad8:	f851 3b04 	ldr.w	r3, [r1], #4
  406adc:	f840 3b04 	str.w	r3, [r0], #4
  406ae0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ae4:	f840 3b04 	str.w	r3, [r0], #4
  406ae8:	f851 3b04 	ldr.w	r3, [r1], #4
  406aec:	f840 3b04 	str.w	r3, [r0], #4
  406af0:	3a40      	subs	r2, #64	; 0x40
  406af2:	d2bd      	bcs.n	406a70 <memcpy+0x10>
  406af4:	3230      	adds	r2, #48	; 0x30
  406af6:	d311      	bcc.n	406b1c <memcpy+0xbc>
  406af8:	f851 3b04 	ldr.w	r3, [r1], #4
  406afc:	f840 3b04 	str.w	r3, [r0], #4
  406b00:	f851 3b04 	ldr.w	r3, [r1], #4
  406b04:	f840 3b04 	str.w	r3, [r0], #4
  406b08:	f851 3b04 	ldr.w	r3, [r1], #4
  406b0c:	f840 3b04 	str.w	r3, [r0], #4
  406b10:	f851 3b04 	ldr.w	r3, [r1], #4
  406b14:	f840 3b04 	str.w	r3, [r0], #4
  406b18:	3a10      	subs	r2, #16
  406b1a:	d2ed      	bcs.n	406af8 <memcpy+0x98>
  406b1c:	320c      	adds	r2, #12
  406b1e:	d305      	bcc.n	406b2c <memcpy+0xcc>
  406b20:	f851 3b04 	ldr.w	r3, [r1], #4
  406b24:	f840 3b04 	str.w	r3, [r0], #4
  406b28:	3a04      	subs	r2, #4
  406b2a:	d2f9      	bcs.n	406b20 <memcpy+0xc0>
  406b2c:	3204      	adds	r2, #4
  406b2e:	d008      	beq.n	406b42 <memcpy+0xe2>
  406b30:	07d2      	lsls	r2, r2, #31
  406b32:	bf1c      	itt	ne
  406b34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b38:	f800 3b01 	strbne.w	r3, [r0], #1
  406b3c:	d301      	bcc.n	406b42 <memcpy+0xe2>
  406b3e:	880b      	ldrh	r3, [r1, #0]
  406b40:	8003      	strh	r3, [r0, #0]
  406b42:	4660      	mov	r0, ip
  406b44:	4770      	bx	lr
  406b46:	bf00      	nop
  406b48:	2a08      	cmp	r2, #8
  406b4a:	d313      	bcc.n	406b74 <memcpy+0x114>
  406b4c:	078b      	lsls	r3, r1, #30
  406b4e:	d08d      	beq.n	406a6c <memcpy+0xc>
  406b50:	f010 0303 	ands.w	r3, r0, #3
  406b54:	d08a      	beq.n	406a6c <memcpy+0xc>
  406b56:	f1c3 0304 	rsb	r3, r3, #4
  406b5a:	1ad2      	subs	r2, r2, r3
  406b5c:	07db      	lsls	r3, r3, #31
  406b5e:	bf1c      	itt	ne
  406b60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406b64:	f800 3b01 	strbne.w	r3, [r0], #1
  406b68:	d380      	bcc.n	406a6c <memcpy+0xc>
  406b6a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406b6e:	f820 3b02 	strh.w	r3, [r0], #2
  406b72:	e77b      	b.n	406a6c <memcpy+0xc>
  406b74:	3a04      	subs	r2, #4
  406b76:	d3d9      	bcc.n	406b2c <memcpy+0xcc>
  406b78:	3a01      	subs	r2, #1
  406b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b7e:	f800 3b01 	strb.w	r3, [r0], #1
  406b82:	d2f9      	bcs.n	406b78 <memcpy+0x118>
  406b84:	780b      	ldrb	r3, [r1, #0]
  406b86:	7003      	strb	r3, [r0, #0]
  406b88:	784b      	ldrb	r3, [r1, #1]
  406b8a:	7043      	strb	r3, [r0, #1]
  406b8c:	788b      	ldrb	r3, [r1, #2]
  406b8e:	7083      	strb	r3, [r0, #2]
  406b90:	4660      	mov	r0, ip
  406b92:	4770      	bx	lr

00406b94 <memmove>:
  406b94:	4288      	cmp	r0, r1
  406b96:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b98:	d90d      	bls.n	406bb6 <memmove+0x22>
  406b9a:	188b      	adds	r3, r1, r2
  406b9c:	4298      	cmp	r0, r3
  406b9e:	d20a      	bcs.n	406bb6 <memmove+0x22>
  406ba0:	1884      	adds	r4, r0, r2
  406ba2:	2a00      	cmp	r2, #0
  406ba4:	d051      	beq.n	406c4a <memmove+0xb6>
  406ba6:	4622      	mov	r2, r4
  406ba8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406bac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406bb0:	4299      	cmp	r1, r3
  406bb2:	d1f9      	bne.n	406ba8 <memmove+0x14>
  406bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bb6:	2a0f      	cmp	r2, #15
  406bb8:	d948      	bls.n	406c4c <memmove+0xb8>
  406bba:	ea41 0300 	orr.w	r3, r1, r0
  406bbe:	079b      	lsls	r3, r3, #30
  406bc0:	d146      	bne.n	406c50 <memmove+0xbc>
  406bc2:	f100 0410 	add.w	r4, r0, #16
  406bc6:	f101 0310 	add.w	r3, r1, #16
  406bca:	4615      	mov	r5, r2
  406bcc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406bd0:	f844 6c10 	str.w	r6, [r4, #-16]
  406bd4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406bd8:	f844 6c0c 	str.w	r6, [r4, #-12]
  406bdc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406be0:	f844 6c08 	str.w	r6, [r4, #-8]
  406be4:	3d10      	subs	r5, #16
  406be6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406bea:	f844 6c04 	str.w	r6, [r4, #-4]
  406bee:	2d0f      	cmp	r5, #15
  406bf0:	f103 0310 	add.w	r3, r3, #16
  406bf4:	f104 0410 	add.w	r4, r4, #16
  406bf8:	d8e8      	bhi.n	406bcc <memmove+0x38>
  406bfa:	f1a2 0310 	sub.w	r3, r2, #16
  406bfe:	f023 030f 	bic.w	r3, r3, #15
  406c02:	f002 0e0f 	and.w	lr, r2, #15
  406c06:	3310      	adds	r3, #16
  406c08:	f1be 0f03 	cmp.w	lr, #3
  406c0c:	4419      	add	r1, r3
  406c0e:	4403      	add	r3, r0
  406c10:	d921      	bls.n	406c56 <memmove+0xc2>
  406c12:	1f1e      	subs	r6, r3, #4
  406c14:	460d      	mov	r5, r1
  406c16:	4674      	mov	r4, lr
  406c18:	3c04      	subs	r4, #4
  406c1a:	f855 7b04 	ldr.w	r7, [r5], #4
  406c1e:	f846 7f04 	str.w	r7, [r6, #4]!
  406c22:	2c03      	cmp	r4, #3
  406c24:	d8f8      	bhi.n	406c18 <memmove+0x84>
  406c26:	f1ae 0404 	sub.w	r4, lr, #4
  406c2a:	f024 0403 	bic.w	r4, r4, #3
  406c2e:	3404      	adds	r4, #4
  406c30:	4421      	add	r1, r4
  406c32:	4423      	add	r3, r4
  406c34:	f002 0203 	and.w	r2, r2, #3
  406c38:	b162      	cbz	r2, 406c54 <memmove+0xc0>
  406c3a:	3b01      	subs	r3, #1
  406c3c:	440a      	add	r2, r1
  406c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406c42:	f803 4f01 	strb.w	r4, [r3, #1]!
  406c46:	428a      	cmp	r2, r1
  406c48:	d1f9      	bne.n	406c3e <memmove+0xaa>
  406c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c4c:	4603      	mov	r3, r0
  406c4e:	e7f3      	b.n	406c38 <memmove+0xa4>
  406c50:	4603      	mov	r3, r0
  406c52:	e7f2      	b.n	406c3a <memmove+0xa6>
  406c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c56:	4672      	mov	r2, lr
  406c58:	e7ee      	b.n	406c38 <memmove+0xa4>
  406c5a:	bf00      	nop

00406c5c <__malloc_lock>:
  406c5c:	4770      	bx	lr
  406c5e:	bf00      	nop

00406c60 <__malloc_unlock>:
  406c60:	4770      	bx	lr
  406c62:	bf00      	nop

00406c64 <_Balloc>:
  406c64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406c66:	b570      	push	{r4, r5, r6, lr}
  406c68:	4605      	mov	r5, r0
  406c6a:	460c      	mov	r4, r1
  406c6c:	b14b      	cbz	r3, 406c82 <_Balloc+0x1e>
  406c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406c72:	b180      	cbz	r0, 406c96 <_Balloc+0x32>
  406c74:	6802      	ldr	r2, [r0, #0]
  406c76:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406c7a:	2300      	movs	r3, #0
  406c7c:	6103      	str	r3, [r0, #16]
  406c7e:	60c3      	str	r3, [r0, #12]
  406c80:	bd70      	pop	{r4, r5, r6, pc}
  406c82:	2221      	movs	r2, #33	; 0x21
  406c84:	2104      	movs	r1, #4
  406c86:	f000 fdf1 	bl	40786c <_calloc_r>
  406c8a:	64e8      	str	r0, [r5, #76]	; 0x4c
  406c8c:	4603      	mov	r3, r0
  406c8e:	2800      	cmp	r0, #0
  406c90:	d1ed      	bne.n	406c6e <_Balloc+0xa>
  406c92:	2000      	movs	r0, #0
  406c94:	bd70      	pop	{r4, r5, r6, pc}
  406c96:	2101      	movs	r1, #1
  406c98:	fa01 f604 	lsl.w	r6, r1, r4
  406c9c:	1d72      	adds	r2, r6, #5
  406c9e:	4628      	mov	r0, r5
  406ca0:	0092      	lsls	r2, r2, #2
  406ca2:	f000 fde3 	bl	40786c <_calloc_r>
  406ca6:	2800      	cmp	r0, #0
  406ca8:	d0f3      	beq.n	406c92 <_Balloc+0x2e>
  406caa:	6044      	str	r4, [r0, #4]
  406cac:	6086      	str	r6, [r0, #8]
  406cae:	e7e4      	b.n	406c7a <_Balloc+0x16>

00406cb0 <_Bfree>:
  406cb0:	b131      	cbz	r1, 406cc0 <_Bfree+0x10>
  406cb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406cb4:	684a      	ldr	r2, [r1, #4]
  406cb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406cba:	6008      	str	r0, [r1, #0]
  406cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406cc0:	4770      	bx	lr
  406cc2:	bf00      	nop

00406cc4 <__multadd>:
  406cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  406cc6:	690c      	ldr	r4, [r1, #16]
  406cc8:	b083      	sub	sp, #12
  406cca:	460d      	mov	r5, r1
  406ccc:	4606      	mov	r6, r0
  406cce:	f101 0e14 	add.w	lr, r1, #20
  406cd2:	2700      	movs	r7, #0
  406cd4:	f8de 0000 	ldr.w	r0, [lr]
  406cd8:	b281      	uxth	r1, r0
  406cda:	fb02 3301 	mla	r3, r2, r1, r3
  406cde:	0c01      	lsrs	r1, r0, #16
  406ce0:	0c18      	lsrs	r0, r3, #16
  406ce2:	fb02 0101 	mla	r1, r2, r1, r0
  406ce6:	b29b      	uxth	r3, r3
  406ce8:	3701      	adds	r7, #1
  406cea:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406cee:	42bc      	cmp	r4, r7
  406cf0:	f84e 3b04 	str.w	r3, [lr], #4
  406cf4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406cf8:	dcec      	bgt.n	406cd4 <__multadd+0x10>
  406cfa:	b13b      	cbz	r3, 406d0c <__multadd+0x48>
  406cfc:	68aa      	ldr	r2, [r5, #8]
  406cfe:	4294      	cmp	r4, r2
  406d00:	da07      	bge.n	406d12 <__multadd+0x4e>
  406d02:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406d06:	3401      	adds	r4, #1
  406d08:	6153      	str	r3, [r2, #20]
  406d0a:	612c      	str	r4, [r5, #16]
  406d0c:	4628      	mov	r0, r5
  406d0e:	b003      	add	sp, #12
  406d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406d12:	6869      	ldr	r1, [r5, #4]
  406d14:	9301      	str	r3, [sp, #4]
  406d16:	3101      	adds	r1, #1
  406d18:	4630      	mov	r0, r6
  406d1a:	f7ff ffa3 	bl	406c64 <_Balloc>
  406d1e:	692a      	ldr	r2, [r5, #16]
  406d20:	3202      	adds	r2, #2
  406d22:	f105 010c 	add.w	r1, r5, #12
  406d26:	4607      	mov	r7, r0
  406d28:	0092      	lsls	r2, r2, #2
  406d2a:	300c      	adds	r0, #12
  406d2c:	f7ff fe98 	bl	406a60 <memcpy>
  406d30:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406d32:	6869      	ldr	r1, [r5, #4]
  406d34:	9b01      	ldr	r3, [sp, #4]
  406d36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406d3a:	6028      	str	r0, [r5, #0]
  406d3c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406d40:	463d      	mov	r5, r7
  406d42:	e7de      	b.n	406d02 <__multadd+0x3e>

00406d44 <__hi0bits>:
  406d44:	0c02      	lsrs	r2, r0, #16
  406d46:	0412      	lsls	r2, r2, #16
  406d48:	4603      	mov	r3, r0
  406d4a:	b9b2      	cbnz	r2, 406d7a <__hi0bits+0x36>
  406d4c:	0403      	lsls	r3, r0, #16
  406d4e:	2010      	movs	r0, #16
  406d50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406d54:	bf04      	itt	eq
  406d56:	021b      	lsleq	r3, r3, #8
  406d58:	3008      	addeq	r0, #8
  406d5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406d5e:	bf04      	itt	eq
  406d60:	011b      	lsleq	r3, r3, #4
  406d62:	3004      	addeq	r0, #4
  406d64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406d68:	bf04      	itt	eq
  406d6a:	009b      	lsleq	r3, r3, #2
  406d6c:	3002      	addeq	r0, #2
  406d6e:	2b00      	cmp	r3, #0
  406d70:	db02      	blt.n	406d78 <__hi0bits+0x34>
  406d72:	005b      	lsls	r3, r3, #1
  406d74:	d403      	bmi.n	406d7e <__hi0bits+0x3a>
  406d76:	2020      	movs	r0, #32
  406d78:	4770      	bx	lr
  406d7a:	2000      	movs	r0, #0
  406d7c:	e7e8      	b.n	406d50 <__hi0bits+0xc>
  406d7e:	3001      	adds	r0, #1
  406d80:	4770      	bx	lr
  406d82:	bf00      	nop

00406d84 <__lo0bits>:
  406d84:	6803      	ldr	r3, [r0, #0]
  406d86:	f013 0207 	ands.w	r2, r3, #7
  406d8a:	4601      	mov	r1, r0
  406d8c:	d007      	beq.n	406d9e <__lo0bits+0x1a>
  406d8e:	07da      	lsls	r2, r3, #31
  406d90:	d421      	bmi.n	406dd6 <__lo0bits+0x52>
  406d92:	0798      	lsls	r0, r3, #30
  406d94:	d421      	bmi.n	406dda <__lo0bits+0x56>
  406d96:	089b      	lsrs	r3, r3, #2
  406d98:	600b      	str	r3, [r1, #0]
  406d9a:	2002      	movs	r0, #2
  406d9c:	4770      	bx	lr
  406d9e:	b298      	uxth	r0, r3
  406da0:	b198      	cbz	r0, 406dca <__lo0bits+0x46>
  406da2:	4610      	mov	r0, r2
  406da4:	f013 0fff 	tst.w	r3, #255	; 0xff
  406da8:	bf04      	itt	eq
  406daa:	0a1b      	lsreq	r3, r3, #8
  406dac:	3008      	addeq	r0, #8
  406dae:	071a      	lsls	r2, r3, #28
  406db0:	bf04      	itt	eq
  406db2:	091b      	lsreq	r3, r3, #4
  406db4:	3004      	addeq	r0, #4
  406db6:	079a      	lsls	r2, r3, #30
  406db8:	bf04      	itt	eq
  406dba:	089b      	lsreq	r3, r3, #2
  406dbc:	3002      	addeq	r0, #2
  406dbe:	07da      	lsls	r2, r3, #31
  406dc0:	d407      	bmi.n	406dd2 <__lo0bits+0x4e>
  406dc2:	085b      	lsrs	r3, r3, #1
  406dc4:	d104      	bne.n	406dd0 <__lo0bits+0x4c>
  406dc6:	2020      	movs	r0, #32
  406dc8:	4770      	bx	lr
  406dca:	0c1b      	lsrs	r3, r3, #16
  406dcc:	2010      	movs	r0, #16
  406dce:	e7e9      	b.n	406da4 <__lo0bits+0x20>
  406dd0:	3001      	adds	r0, #1
  406dd2:	600b      	str	r3, [r1, #0]
  406dd4:	4770      	bx	lr
  406dd6:	2000      	movs	r0, #0
  406dd8:	4770      	bx	lr
  406dda:	085b      	lsrs	r3, r3, #1
  406ddc:	600b      	str	r3, [r1, #0]
  406dde:	2001      	movs	r0, #1
  406de0:	4770      	bx	lr
  406de2:	bf00      	nop

00406de4 <__i2b>:
  406de4:	b510      	push	{r4, lr}
  406de6:	460c      	mov	r4, r1
  406de8:	2101      	movs	r1, #1
  406dea:	f7ff ff3b 	bl	406c64 <_Balloc>
  406dee:	2201      	movs	r2, #1
  406df0:	6144      	str	r4, [r0, #20]
  406df2:	6102      	str	r2, [r0, #16]
  406df4:	bd10      	pop	{r4, pc}
  406df6:	bf00      	nop

00406df8 <__multiply>:
  406df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406dfc:	690c      	ldr	r4, [r1, #16]
  406dfe:	6915      	ldr	r5, [r2, #16]
  406e00:	42ac      	cmp	r4, r5
  406e02:	b083      	sub	sp, #12
  406e04:	468b      	mov	fp, r1
  406e06:	4616      	mov	r6, r2
  406e08:	da04      	bge.n	406e14 <__multiply+0x1c>
  406e0a:	4622      	mov	r2, r4
  406e0c:	46b3      	mov	fp, r6
  406e0e:	462c      	mov	r4, r5
  406e10:	460e      	mov	r6, r1
  406e12:	4615      	mov	r5, r2
  406e14:	f8db 3008 	ldr.w	r3, [fp, #8]
  406e18:	f8db 1004 	ldr.w	r1, [fp, #4]
  406e1c:	eb04 0805 	add.w	r8, r4, r5
  406e20:	4598      	cmp	r8, r3
  406e22:	bfc8      	it	gt
  406e24:	3101      	addgt	r1, #1
  406e26:	f7ff ff1d 	bl	406c64 <_Balloc>
  406e2a:	f100 0914 	add.w	r9, r0, #20
  406e2e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406e32:	45d1      	cmp	r9, sl
  406e34:	9000      	str	r0, [sp, #0]
  406e36:	d205      	bcs.n	406e44 <__multiply+0x4c>
  406e38:	464b      	mov	r3, r9
  406e3a:	2100      	movs	r1, #0
  406e3c:	f843 1b04 	str.w	r1, [r3], #4
  406e40:	459a      	cmp	sl, r3
  406e42:	d8fb      	bhi.n	406e3c <__multiply+0x44>
  406e44:	f106 0c14 	add.w	ip, r6, #20
  406e48:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406e4c:	f10b 0b14 	add.w	fp, fp, #20
  406e50:	459c      	cmp	ip, r3
  406e52:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406e56:	d24c      	bcs.n	406ef2 <__multiply+0xfa>
  406e58:	f8cd a004 	str.w	sl, [sp, #4]
  406e5c:	469a      	mov	sl, r3
  406e5e:	f8dc 5000 	ldr.w	r5, [ip]
  406e62:	b2af      	uxth	r7, r5
  406e64:	b1ef      	cbz	r7, 406ea2 <__multiply+0xaa>
  406e66:	2100      	movs	r1, #0
  406e68:	464d      	mov	r5, r9
  406e6a:	465e      	mov	r6, fp
  406e6c:	460c      	mov	r4, r1
  406e6e:	f856 2b04 	ldr.w	r2, [r6], #4
  406e72:	6828      	ldr	r0, [r5, #0]
  406e74:	b293      	uxth	r3, r2
  406e76:	b281      	uxth	r1, r0
  406e78:	fb07 1303 	mla	r3, r7, r3, r1
  406e7c:	0c12      	lsrs	r2, r2, #16
  406e7e:	0c01      	lsrs	r1, r0, #16
  406e80:	4423      	add	r3, r4
  406e82:	fb07 1102 	mla	r1, r7, r2, r1
  406e86:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406e8a:	b29b      	uxth	r3, r3
  406e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406e90:	45b6      	cmp	lr, r6
  406e92:	f845 3b04 	str.w	r3, [r5], #4
  406e96:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406e9a:	d8e8      	bhi.n	406e6e <__multiply+0x76>
  406e9c:	602c      	str	r4, [r5, #0]
  406e9e:	f8dc 5000 	ldr.w	r5, [ip]
  406ea2:	0c2d      	lsrs	r5, r5, #16
  406ea4:	d01d      	beq.n	406ee2 <__multiply+0xea>
  406ea6:	f8d9 3000 	ldr.w	r3, [r9]
  406eaa:	4648      	mov	r0, r9
  406eac:	461c      	mov	r4, r3
  406eae:	4659      	mov	r1, fp
  406eb0:	2200      	movs	r2, #0
  406eb2:	880e      	ldrh	r6, [r1, #0]
  406eb4:	0c24      	lsrs	r4, r4, #16
  406eb6:	fb05 4406 	mla	r4, r5, r6, r4
  406eba:	4422      	add	r2, r4
  406ebc:	b29b      	uxth	r3, r3
  406ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406ec2:	f840 3b04 	str.w	r3, [r0], #4
  406ec6:	f851 3b04 	ldr.w	r3, [r1], #4
  406eca:	6804      	ldr	r4, [r0, #0]
  406ecc:	0c1b      	lsrs	r3, r3, #16
  406ece:	b2a6      	uxth	r6, r4
  406ed0:	fb05 6303 	mla	r3, r5, r3, r6
  406ed4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406ed8:	458e      	cmp	lr, r1
  406eda:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406ede:	d8e8      	bhi.n	406eb2 <__multiply+0xba>
  406ee0:	6003      	str	r3, [r0, #0]
  406ee2:	f10c 0c04 	add.w	ip, ip, #4
  406ee6:	45e2      	cmp	sl, ip
  406ee8:	f109 0904 	add.w	r9, r9, #4
  406eec:	d8b7      	bhi.n	406e5e <__multiply+0x66>
  406eee:	f8dd a004 	ldr.w	sl, [sp, #4]
  406ef2:	f1b8 0f00 	cmp.w	r8, #0
  406ef6:	dd0b      	ble.n	406f10 <__multiply+0x118>
  406ef8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406efc:	f1aa 0a04 	sub.w	sl, sl, #4
  406f00:	b11b      	cbz	r3, 406f0a <__multiply+0x112>
  406f02:	e005      	b.n	406f10 <__multiply+0x118>
  406f04:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406f08:	b913      	cbnz	r3, 406f10 <__multiply+0x118>
  406f0a:	f1b8 0801 	subs.w	r8, r8, #1
  406f0e:	d1f9      	bne.n	406f04 <__multiply+0x10c>
  406f10:	9800      	ldr	r0, [sp, #0]
  406f12:	f8c0 8010 	str.w	r8, [r0, #16]
  406f16:	b003      	add	sp, #12
  406f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406f1c <__pow5mult>:
  406f1c:	f012 0303 	ands.w	r3, r2, #3
  406f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f24:	4614      	mov	r4, r2
  406f26:	4607      	mov	r7, r0
  406f28:	d12e      	bne.n	406f88 <__pow5mult+0x6c>
  406f2a:	460d      	mov	r5, r1
  406f2c:	10a4      	asrs	r4, r4, #2
  406f2e:	d01c      	beq.n	406f6a <__pow5mult+0x4e>
  406f30:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406f32:	b396      	cbz	r6, 406f9a <__pow5mult+0x7e>
  406f34:	07e3      	lsls	r3, r4, #31
  406f36:	f04f 0800 	mov.w	r8, #0
  406f3a:	d406      	bmi.n	406f4a <__pow5mult+0x2e>
  406f3c:	1064      	asrs	r4, r4, #1
  406f3e:	d014      	beq.n	406f6a <__pow5mult+0x4e>
  406f40:	6830      	ldr	r0, [r6, #0]
  406f42:	b1a8      	cbz	r0, 406f70 <__pow5mult+0x54>
  406f44:	4606      	mov	r6, r0
  406f46:	07e3      	lsls	r3, r4, #31
  406f48:	d5f8      	bpl.n	406f3c <__pow5mult+0x20>
  406f4a:	4632      	mov	r2, r6
  406f4c:	4629      	mov	r1, r5
  406f4e:	4638      	mov	r0, r7
  406f50:	f7ff ff52 	bl	406df8 <__multiply>
  406f54:	b1b5      	cbz	r5, 406f84 <__pow5mult+0x68>
  406f56:	686a      	ldr	r2, [r5, #4]
  406f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406f5a:	1064      	asrs	r4, r4, #1
  406f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406f60:	6029      	str	r1, [r5, #0]
  406f62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406f66:	4605      	mov	r5, r0
  406f68:	d1ea      	bne.n	406f40 <__pow5mult+0x24>
  406f6a:	4628      	mov	r0, r5
  406f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f70:	4632      	mov	r2, r6
  406f72:	4631      	mov	r1, r6
  406f74:	4638      	mov	r0, r7
  406f76:	f7ff ff3f 	bl	406df8 <__multiply>
  406f7a:	6030      	str	r0, [r6, #0]
  406f7c:	f8c0 8000 	str.w	r8, [r0]
  406f80:	4606      	mov	r6, r0
  406f82:	e7e0      	b.n	406f46 <__pow5mult+0x2a>
  406f84:	4605      	mov	r5, r0
  406f86:	e7d9      	b.n	406f3c <__pow5mult+0x20>
  406f88:	1e5a      	subs	r2, r3, #1
  406f8a:	4d0b      	ldr	r5, [pc, #44]	; (406fb8 <__pow5mult+0x9c>)
  406f8c:	2300      	movs	r3, #0
  406f8e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406f92:	f7ff fe97 	bl	406cc4 <__multadd>
  406f96:	4605      	mov	r5, r0
  406f98:	e7c8      	b.n	406f2c <__pow5mult+0x10>
  406f9a:	2101      	movs	r1, #1
  406f9c:	4638      	mov	r0, r7
  406f9e:	f7ff fe61 	bl	406c64 <_Balloc>
  406fa2:	f240 2171 	movw	r1, #625	; 0x271
  406fa6:	2201      	movs	r2, #1
  406fa8:	2300      	movs	r3, #0
  406faa:	6141      	str	r1, [r0, #20]
  406fac:	6102      	str	r2, [r0, #16]
  406fae:	4606      	mov	r6, r0
  406fb0:	64b8      	str	r0, [r7, #72]	; 0x48
  406fb2:	6003      	str	r3, [r0, #0]
  406fb4:	e7be      	b.n	406f34 <__pow5mult+0x18>
  406fb6:	bf00      	nop
  406fb8:	00407e20 	.word	0x00407e20

00406fbc <__lshift>:
  406fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406fc0:	4691      	mov	r9, r2
  406fc2:	690a      	ldr	r2, [r1, #16]
  406fc4:	688b      	ldr	r3, [r1, #8]
  406fc6:	ea4f 1469 	mov.w	r4, r9, asr #5
  406fca:	eb04 0802 	add.w	r8, r4, r2
  406fce:	f108 0501 	add.w	r5, r8, #1
  406fd2:	429d      	cmp	r5, r3
  406fd4:	460e      	mov	r6, r1
  406fd6:	4607      	mov	r7, r0
  406fd8:	6849      	ldr	r1, [r1, #4]
  406fda:	dd04      	ble.n	406fe6 <__lshift+0x2a>
  406fdc:	005b      	lsls	r3, r3, #1
  406fde:	429d      	cmp	r5, r3
  406fe0:	f101 0101 	add.w	r1, r1, #1
  406fe4:	dcfa      	bgt.n	406fdc <__lshift+0x20>
  406fe6:	4638      	mov	r0, r7
  406fe8:	f7ff fe3c 	bl	406c64 <_Balloc>
  406fec:	2c00      	cmp	r4, #0
  406fee:	f100 0314 	add.w	r3, r0, #20
  406ff2:	dd06      	ble.n	407002 <__lshift+0x46>
  406ff4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406ff8:	2100      	movs	r1, #0
  406ffa:	f843 1b04 	str.w	r1, [r3], #4
  406ffe:	429a      	cmp	r2, r3
  407000:	d1fb      	bne.n	406ffa <__lshift+0x3e>
  407002:	6934      	ldr	r4, [r6, #16]
  407004:	f106 0114 	add.w	r1, r6, #20
  407008:	f019 091f 	ands.w	r9, r9, #31
  40700c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407010:	d01d      	beq.n	40704e <__lshift+0x92>
  407012:	f1c9 0c20 	rsb	ip, r9, #32
  407016:	2200      	movs	r2, #0
  407018:	680c      	ldr	r4, [r1, #0]
  40701a:	fa04 f409 	lsl.w	r4, r4, r9
  40701e:	4314      	orrs	r4, r2
  407020:	f843 4b04 	str.w	r4, [r3], #4
  407024:	f851 2b04 	ldr.w	r2, [r1], #4
  407028:	458e      	cmp	lr, r1
  40702a:	fa22 f20c 	lsr.w	r2, r2, ip
  40702e:	d8f3      	bhi.n	407018 <__lshift+0x5c>
  407030:	601a      	str	r2, [r3, #0]
  407032:	b10a      	cbz	r2, 407038 <__lshift+0x7c>
  407034:	f108 0502 	add.w	r5, r8, #2
  407038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40703a:	6872      	ldr	r2, [r6, #4]
  40703c:	3d01      	subs	r5, #1
  40703e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407042:	6105      	str	r5, [r0, #16]
  407044:	6031      	str	r1, [r6, #0]
  407046:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40704e:	3b04      	subs	r3, #4
  407050:	f851 2b04 	ldr.w	r2, [r1], #4
  407054:	f843 2f04 	str.w	r2, [r3, #4]!
  407058:	458e      	cmp	lr, r1
  40705a:	d8f9      	bhi.n	407050 <__lshift+0x94>
  40705c:	e7ec      	b.n	407038 <__lshift+0x7c>
  40705e:	bf00      	nop

00407060 <__mcmp>:
  407060:	b430      	push	{r4, r5}
  407062:	690b      	ldr	r3, [r1, #16]
  407064:	4605      	mov	r5, r0
  407066:	6900      	ldr	r0, [r0, #16]
  407068:	1ac0      	subs	r0, r0, r3
  40706a:	d10f      	bne.n	40708c <__mcmp+0x2c>
  40706c:	009b      	lsls	r3, r3, #2
  40706e:	3514      	adds	r5, #20
  407070:	3114      	adds	r1, #20
  407072:	4419      	add	r1, r3
  407074:	442b      	add	r3, r5
  407076:	e001      	b.n	40707c <__mcmp+0x1c>
  407078:	429d      	cmp	r5, r3
  40707a:	d207      	bcs.n	40708c <__mcmp+0x2c>
  40707c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407084:	4294      	cmp	r4, r2
  407086:	d0f7      	beq.n	407078 <__mcmp+0x18>
  407088:	d302      	bcc.n	407090 <__mcmp+0x30>
  40708a:	2001      	movs	r0, #1
  40708c:	bc30      	pop	{r4, r5}
  40708e:	4770      	bx	lr
  407090:	f04f 30ff 	mov.w	r0, #4294967295
  407094:	e7fa      	b.n	40708c <__mcmp+0x2c>
  407096:	bf00      	nop

00407098 <__mdiff>:
  407098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40709c:	690f      	ldr	r7, [r1, #16]
  40709e:	460e      	mov	r6, r1
  4070a0:	6911      	ldr	r1, [r2, #16]
  4070a2:	1a7f      	subs	r7, r7, r1
  4070a4:	2f00      	cmp	r7, #0
  4070a6:	4690      	mov	r8, r2
  4070a8:	d117      	bne.n	4070da <__mdiff+0x42>
  4070aa:	0089      	lsls	r1, r1, #2
  4070ac:	f106 0514 	add.w	r5, r6, #20
  4070b0:	f102 0e14 	add.w	lr, r2, #20
  4070b4:	186b      	adds	r3, r5, r1
  4070b6:	4471      	add	r1, lr
  4070b8:	e001      	b.n	4070be <__mdiff+0x26>
  4070ba:	429d      	cmp	r5, r3
  4070bc:	d25c      	bcs.n	407178 <__mdiff+0xe0>
  4070be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4070c2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4070c6:	42a2      	cmp	r2, r4
  4070c8:	d0f7      	beq.n	4070ba <__mdiff+0x22>
  4070ca:	d25e      	bcs.n	40718a <__mdiff+0xf2>
  4070cc:	4633      	mov	r3, r6
  4070ce:	462c      	mov	r4, r5
  4070d0:	4646      	mov	r6, r8
  4070d2:	4675      	mov	r5, lr
  4070d4:	4698      	mov	r8, r3
  4070d6:	2701      	movs	r7, #1
  4070d8:	e005      	b.n	4070e6 <__mdiff+0x4e>
  4070da:	db58      	blt.n	40718e <__mdiff+0xf6>
  4070dc:	f106 0514 	add.w	r5, r6, #20
  4070e0:	f108 0414 	add.w	r4, r8, #20
  4070e4:	2700      	movs	r7, #0
  4070e6:	6871      	ldr	r1, [r6, #4]
  4070e8:	f7ff fdbc 	bl	406c64 <_Balloc>
  4070ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4070f0:	6936      	ldr	r6, [r6, #16]
  4070f2:	60c7      	str	r7, [r0, #12]
  4070f4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4070f8:	46a6      	mov	lr, r4
  4070fa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4070fe:	f100 0414 	add.w	r4, r0, #20
  407102:	2300      	movs	r3, #0
  407104:	f85e 1b04 	ldr.w	r1, [lr], #4
  407108:	f855 8b04 	ldr.w	r8, [r5], #4
  40710c:	b28a      	uxth	r2, r1
  40710e:	fa13 f388 	uxtah	r3, r3, r8
  407112:	0c09      	lsrs	r1, r1, #16
  407114:	1a9a      	subs	r2, r3, r2
  407116:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40711a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40711e:	b292      	uxth	r2, r2
  407120:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407124:	45f4      	cmp	ip, lr
  407126:	f844 2b04 	str.w	r2, [r4], #4
  40712a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40712e:	d8e9      	bhi.n	407104 <__mdiff+0x6c>
  407130:	42af      	cmp	r7, r5
  407132:	d917      	bls.n	407164 <__mdiff+0xcc>
  407134:	46a4      	mov	ip, r4
  407136:	46ae      	mov	lr, r5
  407138:	f85e 2b04 	ldr.w	r2, [lr], #4
  40713c:	fa13 f382 	uxtah	r3, r3, r2
  407140:	1419      	asrs	r1, r3, #16
  407142:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407146:	b29b      	uxth	r3, r3
  407148:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40714c:	4577      	cmp	r7, lr
  40714e:	f84c 2b04 	str.w	r2, [ip], #4
  407152:	ea4f 4321 	mov.w	r3, r1, asr #16
  407156:	d8ef      	bhi.n	407138 <__mdiff+0xa0>
  407158:	43ed      	mvns	r5, r5
  40715a:	442f      	add	r7, r5
  40715c:	f027 0703 	bic.w	r7, r7, #3
  407160:	3704      	adds	r7, #4
  407162:	443c      	add	r4, r7
  407164:	3c04      	subs	r4, #4
  407166:	b922      	cbnz	r2, 407172 <__mdiff+0xda>
  407168:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40716c:	3e01      	subs	r6, #1
  40716e:	2b00      	cmp	r3, #0
  407170:	d0fa      	beq.n	407168 <__mdiff+0xd0>
  407172:	6106      	str	r6, [r0, #16]
  407174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407178:	2100      	movs	r1, #0
  40717a:	f7ff fd73 	bl	406c64 <_Balloc>
  40717e:	2201      	movs	r2, #1
  407180:	2300      	movs	r3, #0
  407182:	6102      	str	r2, [r0, #16]
  407184:	6143      	str	r3, [r0, #20]
  407186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40718a:	4674      	mov	r4, lr
  40718c:	e7ab      	b.n	4070e6 <__mdiff+0x4e>
  40718e:	4633      	mov	r3, r6
  407190:	f106 0414 	add.w	r4, r6, #20
  407194:	f102 0514 	add.w	r5, r2, #20
  407198:	4616      	mov	r6, r2
  40719a:	2701      	movs	r7, #1
  40719c:	4698      	mov	r8, r3
  40719e:	e7a2      	b.n	4070e6 <__mdiff+0x4e>

004071a0 <__d2b>:
  4071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4071a4:	b082      	sub	sp, #8
  4071a6:	2101      	movs	r1, #1
  4071a8:	461c      	mov	r4, r3
  4071aa:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4071ae:	4615      	mov	r5, r2
  4071b0:	9e08      	ldr	r6, [sp, #32]
  4071b2:	f7ff fd57 	bl	406c64 <_Balloc>
  4071b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4071ba:	4680      	mov	r8, r0
  4071bc:	b10f      	cbz	r7, 4071c2 <__d2b+0x22>
  4071be:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4071c2:	9401      	str	r4, [sp, #4]
  4071c4:	b31d      	cbz	r5, 40720e <__d2b+0x6e>
  4071c6:	a802      	add	r0, sp, #8
  4071c8:	f840 5d08 	str.w	r5, [r0, #-8]!
  4071cc:	f7ff fdda 	bl	406d84 <__lo0bits>
  4071d0:	2800      	cmp	r0, #0
  4071d2:	d134      	bne.n	40723e <__d2b+0x9e>
  4071d4:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4071d8:	f8c8 2014 	str.w	r2, [r8, #20]
  4071dc:	2b00      	cmp	r3, #0
  4071de:	bf0c      	ite	eq
  4071e0:	2101      	moveq	r1, #1
  4071e2:	2102      	movne	r1, #2
  4071e4:	f8c8 3018 	str.w	r3, [r8, #24]
  4071e8:	f8c8 1010 	str.w	r1, [r8, #16]
  4071ec:	b9df      	cbnz	r7, 407226 <__d2b+0x86>
  4071ee:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4071f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4071f6:	6030      	str	r0, [r6, #0]
  4071f8:	6918      	ldr	r0, [r3, #16]
  4071fa:	f7ff fda3 	bl	406d44 <__hi0bits>
  4071fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407200:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407204:	6018      	str	r0, [r3, #0]
  407206:	4640      	mov	r0, r8
  407208:	b002      	add	sp, #8
  40720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40720e:	a801      	add	r0, sp, #4
  407210:	f7ff fdb8 	bl	406d84 <__lo0bits>
  407214:	9b01      	ldr	r3, [sp, #4]
  407216:	f8c8 3014 	str.w	r3, [r8, #20]
  40721a:	2101      	movs	r1, #1
  40721c:	3020      	adds	r0, #32
  40721e:	f8c8 1010 	str.w	r1, [r8, #16]
  407222:	2f00      	cmp	r7, #0
  407224:	d0e3      	beq.n	4071ee <__d2b+0x4e>
  407226:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407228:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40722c:	4407      	add	r7, r0
  40722e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407232:	6037      	str	r7, [r6, #0]
  407234:	6018      	str	r0, [r3, #0]
  407236:	4640      	mov	r0, r8
  407238:	b002      	add	sp, #8
  40723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40723e:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407242:	f1c0 0220 	rsb	r2, r0, #32
  407246:	fa03 f202 	lsl.w	r2, r3, r2
  40724a:	430a      	orrs	r2, r1
  40724c:	40c3      	lsrs	r3, r0
  40724e:	9301      	str	r3, [sp, #4]
  407250:	f8c8 2014 	str.w	r2, [r8, #20]
  407254:	e7c2      	b.n	4071dc <__d2b+0x3c>
  407256:	bf00      	nop

00407258 <_realloc_r>:
  407258:	2900      	cmp	r1, #0
  40725a:	f000 8095 	beq.w	407388 <_realloc_r+0x130>
  40725e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407262:	460d      	mov	r5, r1
  407264:	4616      	mov	r6, r2
  407266:	b083      	sub	sp, #12
  407268:	4680      	mov	r8, r0
  40726a:	f106 070b 	add.w	r7, r6, #11
  40726e:	f7ff fcf5 	bl	406c5c <__malloc_lock>
  407272:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407276:	2f16      	cmp	r7, #22
  407278:	f02e 0403 	bic.w	r4, lr, #3
  40727c:	f1a5 0908 	sub.w	r9, r5, #8
  407280:	d83c      	bhi.n	4072fc <_realloc_r+0xa4>
  407282:	2210      	movs	r2, #16
  407284:	4617      	mov	r7, r2
  407286:	42be      	cmp	r6, r7
  407288:	d83d      	bhi.n	407306 <_realloc_r+0xae>
  40728a:	4294      	cmp	r4, r2
  40728c:	da43      	bge.n	407316 <_realloc_r+0xbe>
  40728e:	4bc4      	ldr	r3, [pc, #784]	; (4075a0 <_realloc_r+0x348>)
  407290:	6899      	ldr	r1, [r3, #8]
  407292:	eb09 0004 	add.w	r0, r9, r4
  407296:	4288      	cmp	r0, r1
  407298:	f000 80b4 	beq.w	407404 <_realloc_r+0x1ac>
  40729c:	6843      	ldr	r3, [r0, #4]
  40729e:	f023 0101 	bic.w	r1, r3, #1
  4072a2:	4401      	add	r1, r0
  4072a4:	6849      	ldr	r1, [r1, #4]
  4072a6:	07c9      	lsls	r1, r1, #31
  4072a8:	d54c      	bpl.n	407344 <_realloc_r+0xec>
  4072aa:	f01e 0f01 	tst.w	lr, #1
  4072ae:	f000 809b 	beq.w	4073e8 <_realloc_r+0x190>
  4072b2:	4631      	mov	r1, r6
  4072b4:	4640      	mov	r0, r8
  4072b6:	f7ff f887 	bl	4063c8 <_malloc_r>
  4072ba:	4606      	mov	r6, r0
  4072bc:	2800      	cmp	r0, #0
  4072be:	d03a      	beq.n	407336 <_realloc_r+0xde>
  4072c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4072c4:	f023 0301 	bic.w	r3, r3, #1
  4072c8:	444b      	add	r3, r9
  4072ca:	f1a0 0208 	sub.w	r2, r0, #8
  4072ce:	429a      	cmp	r2, r3
  4072d0:	f000 8121 	beq.w	407516 <_realloc_r+0x2be>
  4072d4:	1f22      	subs	r2, r4, #4
  4072d6:	2a24      	cmp	r2, #36	; 0x24
  4072d8:	f200 8107 	bhi.w	4074ea <_realloc_r+0x292>
  4072dc:	2a13      	cmp	r2, #19
  4072de:	f200 80db 	bhi.w	407498 <_realloc_r+0x240>
  4072e2:	4603      	mov	r3, r0
  4072e4:	462a      	mov	r2, r5
  4072e6:	6811      	ldr	r1, [r2, #0]
  4072e8:	6019      	str	r1, [r3, #0]
  4072ea:	6851      	ldr	r1, [r2, #4]
  4072ec:	6059      	str	r1, [r3, #4]
  4072ee:	6892      	ldr	r2, [r2, #8]
  4072f0:	609a      	str	r2, [r3, #8]
  4072f2:	4629      	mov	r1, r5
  4072f4:	4640      	mov	r0, r8
  4072f6:	f7fe ff73 	bl	4061e0 <_free_r>
  4072fa:	e01c      	b.n	407336 <_realloc_r+0xde>
  4072fc:	f027 0707 	bic.w	r7, r7, #7
  407300:	2f00      	cmp	r7, #0
  407302:	463a      	mov	r2, r7
  407304:	dabf      	bge.n	407286 <_realloc_r+0x2e>
  407306:	2600      	movs	r6, #0
  407308:	230c      	movs	r3, #12
  40730a:	4630      	mov	r0, r6
  40730c:	f8c8 3000 	str.w	r3, [r8]
  407310:	b003      	add	sp, #12
  407312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407316:	462e      	mov	r6, r5
  407318:	1be3      	subs	r3, r4, r7
  40731a:	2b0f      	cmp	r3, #15
  40731c:	d81e      	bhi.n	40735c <_realloc_r+0x104>
  40731e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407322:	f003 0301 	and.w	r3, r3, #1
  407326:	4323      	orrs	r3, r4
  407328:	444c      	add	r4, r9
  40732a:	f8c9 3004 	str.w	r3, [r9, #4]
  40732e:	6863      	ldr	r3, [r4, #4]
  407330:	f043 0301 	orr.w	r3, r3, #1
  407334:	6063      	str	r3, [r4, #4]
  407336:	4640      	mov	r0, r8
  407338:	f7ff fc92 	bl	406c60 <__malloc_unlock>
  40733c:	4630      	mov	r0, r6
  40733e:	b003      	add	sp, #12
  407340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407344:	f023 0303 	bic.w	r3, r3, #3
  407348:	18e1      	adds	r1, r4, r3
  40734a:	4291      	cmp	r1, r2
  40734c:	db1f      	blt.n	40738e <_realloc_r+0x136>
  40734e:	68c3      	ldr	r3, [r0, #12]
  407350:	6882      	ldr	r2, [r0, #8]
  407352:	462e      	mov	r6, r5
  407354:	60d3      	str	r3, [r2, #12]
  407356:	460c      	mov	r4, r1
  407358:	609a      	str	r2, [r3, #8]
  40735a:	e7dd      	b.n	407318 <_realloc_r+0xc0>
  40735c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407360:	eb09 0107 	add.w	r1, r9, r7
  407364:	f002 0201 	and.w	r2, r2, #1
  407368:	444c      	add	r4, r9
  40736a:	f043 0301 	orr.w	r3, r3, #1
  40736e:	4317      	orrs	r7, r2
  407370:	f8c9 7004 	str.w	r7, [r9, #4]
  407374:	604b      	str	r3, [r1, #4]
  407376:	6863      	ldr	r3, [r4, #4]
  407378:	f043 0301 	orr.w	r3, r3, #1
  40737c:	3108      	adds	r1, #8
  40737e:	6063      	str	r3, [r4, #4]
  407380:	4640      	mov	r0, r8
  407382:	f7fe ff2d 	bl	4061e0 <_free_r>
  407386:	e7d6      	b.n	407336 <_realloc_r+0xde>
  407388:	4611      	mov	r1, r2
  40738a:	f7ff b81d 	b.w	4063c8 <_malloc_r>
  40738e:	f01e 0f01 	tst.w	lr, #1
  407392:	d18e      	bne.n	4072b2 <_realloc_r+0x5a>
  407394:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407398:	eba9 0a01 	sub.w	sl, r9, r1
  40739c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4073a0:	f021 0103 	bic.w	r1, r1, #3
  4073a4:	440b      	add	r3, r1
  4073a6:	4423      	add	r3, r4
  4073a8:	4293      	cmp	r3, r2
  4073aa:	db25      	blt.n	4073f8 <_realloc_r+0x1a0>
  4073ac:	68c2      	ldr	r2, [r0, #12]
  4073ae:	6881      	ldr	r1, [r0, #8]
  4073b0:	4656      	mov	r6, sl
  4073b2:	60ca      	str	r2, [r1, #12]
  4073b4:	6091      	str	r1, [r2, #8]
  4073b6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4073ba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4073be:	1f22      	subs	r2, r4, #4
  4073c0:	2a24      	cmp	r2, #36	; 0x24
  4073c2:	60c1      	str	r1, [r0, #12]
  4073c4:	6088      	str	r0, [r1, #8]
  4073c6:	f200 8094 	bhi.w	4074f2 <_realloc_r+0x29a>
  4073ca:	2a13      	cmp	r2, #19
  4073cc:	d96f      	bls.n	4074ae <_realloc_r+0x256>
  4073ce:	6829      	ldr	r1, [r5, #0]
  4073d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4073d4:	6869      	ldr	r1, [r5, #4]
  4073d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4073da:	2a1b      	cmp	r2, #27
  4073dc:	f200 80a2 	bhi.w	407524 <_realloc_r+0x2cc>
  4073e0:	3508      	adds	r5, #8
  4073e2:	f10a 0210 	add.w	r2, sl, #16
  4073e6:	e063      	b.n	4074b0 <_realloc_r+0x258>
  4073e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4073ec:	eba9 0a03 	sub.w	sl, r9, r3
  4073f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4073f4:	f021 0103 	bic.w	r1, r1, #3
  4073f8:	1863      	adds	r3, r4, r1
  4073fa:	4293      	cmp	r3, r2
  4073fc:	f6ff af59 	blt.w	4072b2 <_realloc_r+0x5a>
  407400:	4656      	mov	r6, sl
  407402:	e7d8      	b.n	4073b6 <_realloc_r+0x15e>
  407404:	6841      	ldr	r1, [r0, #4]
  407406:	f021 0b03 	bic.w	fp, r1, #3
  40740a:	44a3      	add	fp, r4
  40740c:	f107 0010 	add.w	r0, r7, #16
  407410:	4583      	cmp	fp, r0
  407412:	da56      	bge.n	4074c2 <_realloc_r+0x26a>
  407414:	f01e 0f01 	tst.w	lr, #1
  407418:	f47f af4b 	bne.w	4072b2 <_realloc_r+0x5a>
  40741c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407420:	eba9 0a01 	sub.w	sl, r9, r1
  407424:	f8da 1004 	ldr.w	r1, [sl, #4]
  407428:	f021 0103 	bic.w	r1, r1, #3
  40742c:	448b      	add	fp, r1
  40742e:	4558      	cmp	r0, fp
  407430:	dce2      	bgt.n	4073f8 <_realloc_r+0x1a0>
  407432:	4656      	mov	r6, sl
  407434:	f8da 100c 	ldr.w	r1, [sl, #12]
  407438:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40743c:	1f22      	subs	r2, r4, #4
  40743e:	2a24      	cmp	r2, #36	; 0x24
  407440:	60c1      	str	r1, [r0, #12]
  407442:	6088      	str	r0, [r1, #8]
  407444:	f200 808f 	bhi.w	407566 <_realloc_r+0x30e>
  407448:	2a13      	cmp	r2, #19
  40744a:	f240 808a 	bls.w	407562 <_realloc_r+0x30a>
  40744e:	6829      	ldr	r1, [r5, #0]
  407450:	f8ca 1008 	str.w	r1, [sl, #8]
  407454:	6869      	ldr	r1, [r5, #4]
  407456:	f8ca 100c 	str.w	r1, [sl, #12]
  40745a:	2a1b      	cmp	r2, #27
  40745c:	f200 808a 	bhi.w	407574 <_realloc_r+0x31c>
  407460:	3508      	adds	r5, #8
  407462:	f10a 0210 	add.w	r2, sl, #16
  407466:	6829      	ldr	r1, [r5, #0]
  407468:	6011      	str	r1, [r2, #0]
  40746a:	6869      	ldr	r1, [r5, #4]
  40746c:	6051      	str	r1, [r2, #4]
  40746e:	68a9      	ldr	r1, [r5, #8]
  407470:	6091      	str	r1, [r2, #8]
  407472:	eb0a 0107 	add.w	r1, sl, r7
  407476:	ebab 0207 	sub.w	r2, fp, r7
  40747a:	f042 0201 	orr.w	r2, r2, #1
  40747e:	6099      	str	r1, [r3, #8]
  407480:	604a      	str	r2, [r1, #4]
  407482:	f8da 3004 	ldr.w	r3, [sl, #4]
  407486:	f003 0301 	and.w	r3, r3, #1
  40748a:	431f      	orrs	r7, r3
  40748c:	4640      	mov	r0, r8
  40748e:	f8ca 7004 	str.w	r7, [sl, #4]
  407492:	f7ff fbe5 	bl	406c60 <__malloc_unlock>
  407496:	e751      	b.n	40733c <_realloc_r+0xe4>
  407498:	682b      	ldr	r3, [r5, #0]
  40749a:	6003      	str	r3, [r0, #0]
  40749c:	686b      	ldr	r3, [r5, #4]
  40749e:	6043      	str	r3, [r0, #4]
  4074a0:	2a1b      	cmp	r2, #27
  4074a2:	d82d      	bhi.n	407500 <_realloc_r+0x2a8>
  4074a4:	f100 0308 	add.w	r3, r0, #8
  4074a8:	f105 0208 	add.w	r2, r5, #8
  4074ac:	e71b      	b.n	4072e6 <_realloc_r+0x8e>
  4074ae:	4632      	mov	r2, r6
  4074b0:	6829      	ldr	r1, [r5, #0]
  4074b2:	6011      	str	r1, [r2, #0]
  4074b4:	6869      	ldr	r1, [r5, #4]
  4074b6:	6051      	str	r1, [r2, #4]
  4074b8:	68a9      	ldr	r1, [r5, #8]
  4074ba:	6091      	str	r1, [r2, #8]
  4074bc:	461c      	mov	r4, r3
  4074be:	46d1      	mov	r9, sl
  4074c0:	e72a      	b.n	407318 <_realloc_r+0xc0>
  4074c2:	eb09 0107 	add.w	r1, r9, r7
  4074c6:	ebab 0b07 	sub.w	fp, fp, r7
  4074ca:	f04b 0201 	orr.w	r2, fp, #1
  4074ce:	6099      	str	r1, [r3, #8]
  4074d0:	604a      	str	r2, [r1, #4]
  4074d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4074d6:	f003 0301 	and.w	r3, r3, #1
  4074da:	431f      	orrs	r7, r3
  4074dc:	4640      	mov	r0, r8
  4074de:	f845 7c04 	str.w	r7, [r5, #-4]
  4074e2:	f7ff fbbd 	bl	406c60 <__malloc_unlock>
  4074e6:	462e      	mov	r6, r5
  4074e8:	e728      	b.n	40733c <_realloc_r+0xe4>
  4074ea:	4629      	mov	r1, r5
  4074ec:	f7ff fb52 	bl	406b94 <memmove>
  4074f0:	e6ff      	b.n	4072f2 <_realloc_r+0x9a>
  4074f2:	4629      	mov	r1, r5
  4074f4:	4630      	mov	r0, r6
  4074f6:	461c      	mov	r4, r3
  4074f8:	46d1      	mov	r9, sl
  4074fa:	f7ff fb4b 	bl	406b94 <memmove>
  4074fe:	e70b      	b.n	407318 <_realloc_r+0xc0>
  407500:	68ab      	ldr	r3, [r5, #8]
  407502:	6083      	str	r3, [r0, #8]
  407504:	68eb      	ldr	r3, [r5, #12]
  407506:	60c3      	str	r3, [r0, #12]
  407508:	2a24      	cmp	r2, #36	; 0x24
  40750a:	d017      	beq.n	40753c <_realloc_r+0x2e4>
  40750c:	f100 0310 	add.w	r3, r0, #16
  407510:	f105 0210 	add.w	r2, r5, #16
  407514:	e6e7      	b.n	4072e6 <_realloc_r+0x8e>
  407516:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40751a:	f023 0303 	bic.w	r3, r3, #3
  40751e:	441c      	add	r4, r3
  407520:	462e      	mov	r6, r5
  407522:	e6f9      	b.n	407318 <_realloc_r+0xc0>
  407524:	68a9      	ldr	r1, [r5, #8]
  407526:	f8ca 1010 	str.w	r1, [sl, #16]
  40752a:	68e9      	ldr	r1, [r5, #12]
  40752c:	f8ca 1014 	str.w	r1, [sl, #20]
  407530:	2a24      	cmp	r2, #36	; 0x24
  407532:	d00c      	beq.n	40754e <_realloc_r+0x2f6>
  407534:	3510      	adds	r5, #16
  407536:	f10a 0218 	add.w	r2, sl, #24
  40753a:	e7b9      	b.n	4074b0 <_realloc_r+0x258>
  40753c:	692b      	ldr	r3, [r5, #16]
  40753e:	6103      	str	r3, [r0, #16]
  407540:	696b      	ldr	r3, [r5, #20]
  407542:	6143      	str	r3, [r0, #20]
  407544:	f105 0218 	add.w	r2, r5, #24
  407548:	f100 0318 	add.w	r3, r0, #24
  40754c:	e6cb      	b.n	4072e6 <_realloc_r+0x8e>
  40754e:	692a      	ldr	r2, [r5, #16]
  407550:	f8ca 2018 	str.w	r2, [sl, #24]
  407554:	696a      	ldr	r2, [r5, #20]
  407556:	f8ca 201c 	str.w	r2, [sl, #28]
  40755a:	3518      	adds	r5, #24
  40755c:	f10a 0220 	add.w	r2, sl, #32
  407560:	e7a6      	b.n	4074b0 <_realloc_r+0x258>
  407562:	4632      	mov	r2, r6
  407564:	e77f      	b.n	407466 <_realloc_r+0x20e>
  407566:	4629      	mov	r1, r5
  407568:	4630      	mov	r0, r6
  40756a:	9301      	str	r3, [sp, #4]
  40756c:	f7ff fb12 	bl	406b94 <memmove>
  407570:	9b01      	ldr	r3, [sp, #4]
  407572:	e77e      	b.n	407472 <_realloc_r+0x21a>
  407574:	68a9      	ldr	r1, [r5, #8]
  407576:	f8ca 1010 	str.w	r1, [sl, #16]
  40757a:	68e9      	ldr	r1, [r5, #12]
  40757c:	f8ca 1014 	str.w	r1, [sl, #20]
  407580:	2a24      	cmp	r2, #36	; 0x24
  407582:	d003      	beq.n	40758c <_realloc_r+0x334>
  407584:	3510      	adds	r5, #16
  407586:	f10a 0218 	add.w	r2, sl, #24
  40758a:	e76c      	b.n	407466 <_realloc_r+0x20e>
  40758c:	692a      	ldr	r2, [r5, #16]
  40758e:	f8ca 2018 	str.w	r2, [sl, #24]
  407592:	696a      	ldr	r2, [r5, #20]
  407594:	f8ca 201c 	str.w	r2, [sl, #28]
  407598:	3518      	adds	r5, #24
  40759a:	f10a 0220 	add.w	r2, sl, #32
  40759e:	e762      	b.n	407466 <_realloc_r+0x20e>
  4075a0:	200005ac 	.word	0x200005ac

004075a4 <_sbrk_r>:
  4075a4:	b538      	push	{r3, r4, r5, lr}
  4075a6:	4c07      	ldr	r4, [pc, #28]	; (4075c4 <_sbrk_r+0x20>)
  4075a8:	2300      	movs	r3, #0
  4075aa:	4605      	mov	r5, r0
  4075ac:	4608      	mov	r0, r1
  4075ae:	6023      	str	r3, [r4, #0]
  4075b0:	f7fb fa7e 	bl	402ab0 <_sbrk>
  4075b4:	1c43      	adds	r3, r0, #1
  4075b6:	d000      	beq.n	4075ba <_sbrk_r+0x16>
  4075b8:	bd38      	pop	{r3, r4, r5, pc}
  4075ba:	6823      	ldr	r3, [r4, #0]
  4075bc:	2b00      	cmp	r3, #0
  4075be:	d0fb      	beq.n	4075b8 <_sbrk_r+0x14>
  4075c0:	602b      	str	r3, [r5, #0]
  4075c2:	bd38      	pop	{r3, r4, r5, pc}
  4075c4:	20000e38 	.word	0x20000e38

004075c8 <strchr>:
  4075c8:	b2c9      	uxtb	r1, r1
  4075ca:	2900      	cmp	r1, #0
  4075cc:	d041      	beq.n	407652 <strchr+0x8a>
  4075ce:	0782      	lsls	r2, r0, #30
  4075d0:	b4f0      	push	{r4, r5, r6, r7}
  4075d2:	d067      	beq.n	4076a4 <strchr+0xdc>
  4075d4:	7803      	ldrb	r3, [r0, #0]
  4075d6:	2b00      	cmp	r3, #0
  4075d8:	d068      	beq.n	4076ac <strchr+0xe4>
  4075da:	4299      	cmp	r1, r3
  4075dc:	d037      	beq.n	40764e <strchr+0x86>
  4075de:	1c43      	adds	r3, r0, #1
  4075e0:	e004      	b.n	4075ec <strchr+0x24>
  4075e2:	f813 0b01 	ldrb.w	r0, [r3], #1
  4075e6:	b390      	cbz	r0, 40764e <strchr+0x86>
  4075e8:	4281      	cmp	r1, r0
  4075ea:	d02f      	beq.n	40764c <strchr+0x84>
  4075ec:	079a      	lsls	r2, r3, #30
  4075ee:	461c      	mov	r4, r3
  4075f0:	d1f7      	bne.n	4075e2 <strchr+0x1a>
  4075f2:	6825      	ldr	r5, [r4, #0]
  4075f4:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4075f8:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4075fc:	ea83 0605 	eor.w	r6, r3, r5
  407600:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  407604:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407608:	ea20 0006 	bic.w	r0, r0, r6
  40760c:	ea22 0205 	bic.w	r2, r2, r5
  407610:	4302      	orrs	r2, r0
  407612:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407616:	d111      	bne.n	40763c <strchr+0x74>
  407618:	4620      	mov	r0, r4
  40761a:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40761e:	ea83 0706 	eor.w	r7, r3, r6
  407622:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  407626:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40762a:	ea25 0507 	bic.w	r5, r5, r7
  40762e:	ea22 0206 	bic.w	r2, r2, r6
  407632:	432a      	orrs	r2, r5
  407634:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407638:	d0ef      	beq.n	40761a <strchr+0x52>
  40763a:	4604      	mov	r4, r0
  40763c:	7820      	ldrb	r0, [r4, #0]
  40763e:	b918      	cbnz	r0, 407648 <strchr+0x80>
  407640:	e005      	b.n	40764e <strchr+0x86>
  407642:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  407646:	b110      	cbz	r0, 40764e <strchr+0x86>
  407648:	4281      	cmp	r1, r0
  40764a:	d1fa      	bne.n	407642 <strchr+0x7a>
  40764c:	4620      	mov	r0, r4
  40764e:	bcf0      	pop	{r4, r5, r6, r7}
  407650:	4770      	bx	lr
  407652:	0783      	lsls	r3, r0, #30
  407654:	d024      	beq.n	4076a0 <strchr+0xd8>
  407656:	7803      	ldrb	r3, [r0, #0]
  407658:	2b00      	cmp	r3, #0
  40765a:	d0f9      	beq.n	407650 <strchr+0x88>
  40765c:	1c43      	adds	r3, r0, #1
  40765e:	e003      	b.n	407668 <strchr+0xa0>
  407660:	7802      	ldrb	r2, [r0, #0]
  407662:	3301      	adds	r3, #1
  407664:	2a00      	cmp	r2, #0
  407666:	d0f3      	beq.n	407650 <strchr+0x88>
  407668:	0799      	lsls	r1, r3, #30
  40766a:	4618      	mov	r0, r3
  40766c:	d1f8      	bne.n	407660 <strchr+0x98>
  40766e:	6819      	ldr	r1, [r3, #0]
  407670:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  407674:	ea22 0201 	bic.w	r2, r2, r1
  407678:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40767c:	d108      	bne.n	407690 <strchr+0xc8>
  40767e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  407682:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  407686:	ea22 0201 	bic.w	r2, r2, r1
  40768a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40768e:	d0f6      	beq.n	40767e <strchr+0xb6>
  407690:	781a      	ldrb	r2, [r3, #0]
  407692:	4618      	mov	r0, r3
  407694:	b142      	cbz	r2, 4076a8 <strchr+0xe0>
  407696:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40769a:	2b00      	cmp	r3, #0
  40769c:	d1fb      	bne.n	407696 <strchr+0xce>
  40769e:	4770      	bx	lr
  4076a0:	4603      	mov	r3, r0
  4076a2:	e7e4      	b.n	40766e <strchr+0xa6>
  4076a4:	4604      	mov	r4, r0
  4076a6:	e7a4      	b.n	4075f2 <strchr+0x2a>
  4076a8:	4618      	mov	r0, r3
  4076aa:	4770      	bx	lr
  4076ac:	4618      	mov	r0, r3
  4076ae:	e7ce      	b.n	40764e <strchr+0x86>

004076b0 <__ssprint_r>:
  4076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076b4:	6893      	ldr	r3, [r2, #8]
  4076b6:	b083      	sub	sp, #12
  4076b8:	4690      	mov	r8, r2
  4076ba:	2b00      	cmp	r3, #0
  4076bc:	d070      	beq.n	4077a0 <__ssprint_r+0xf0>
  4076be:	4682      	mov	sl, r0
  4076c0:	460c      	mov	r4, r1
  4076c2:	6817      	ldr	r7, [r2, #0]
  4076c4:	688d      	ldr	r5, [r1, #8]
  4076c6:	6808      	ldr	r0, [r1, #0]
  4076c8:	e042      	b.n	407750 <__ssprint_r+0xa0>
  4076ca:	89a3      	ldrh	r3, [r4, #12]
  4076cc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4076d0:	d02e      	beq.n	407730 <__ssprint_r+0x80>
  4076d2:	6965      	ldr	r5, [r4, #20]
  4076d4:	6921      	ldr	r1, [r4, #16]
  4076d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4076da:	eba0 0b01 	sub.w	fp, r0, r1
  4076de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4076e2:	f10b 0001 	add.w	r0, fp, #1
  4076e6:	106d      	asrs	r5, r5, #1
  4076e8:	4430      	add	r0, r6
  4076ea:	42a8      	cmp	r0, r5
  4076ec:	462a      	mov	r2, r5
  4076ee:	bf84      	itt	hi
  4076f0:	4605      	movhi	r5, r0
  4076f2:	462a      	movhi	r2, r5
  4076f4:	055b      	lsls	r3, r3, #21
  4076f6:	d538      	bpl.n	40776a <__ssprint_r+0xba>
  4076f8:	4611      	mov	r1, r2
  4076fa:	4650      	mov	r0, sl
  4076fc:	f7fe fe64 	bl	4063c8 <_malloc_r>
  407700:	2800      	cmp	r0, #0
  407702:	d03c      	beq.n	40777e <__ssprint_r+0xce>
  407704:	465a      	mov	r2, fp
  407706:	6921      	ldr	r1, [r4, #16]
  407708:	9001      	str	r0, [sp, #4]
  40770a:	f7ff f9a9 	bl	406a60 <memcpy>
  40770e:	89a2      	ldrh	r2, [r4, #12]
  407710:	9b01      	ldr	r3, [sp, #4]
  407712:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40771a:	81a2      	strh	r2, [r4, #12]
  40771c:	eba5 020b 	sub.w	r2, r5, fp
  407720:	eb03 000b 	add.w	r0, r3, fp
  407724:	6165      	str	r5, [r4, #20]
  407726:	6123      	str	r3, [r4, #16]
  407728:	6020      	str	r0, [r4, #0]
  40772a:	60a2      	str	r2, [r4, #8]
  40772c:	4635      	mov	r5, r6
  40772e:	46b3      	mov	fp, r6
  407730:	465a      	mov	r2, fp
  407732:	4649      	mov	r1, r9
  407734:	f7ff fa2e 	bl	406b94 <memmove>
  407738:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40773c:	68a2      	ldr	r2, [r4, #8]
  40773e:	6820      	ldr	r0, [r4, #0]
  407740:	1b55      	subs	r5, r2, r5
  407742:	4458      	add	r0, fp
  407744:	1b9e      	subs	r6, r3, r6
  407746:	60a5      	str	r5, [r4, #8]
  407748:	6020      	str	r0, [r4, #0]
  40774a:	f8c8 6008 	str.w	r6, [r8, #8]
  40774e:	b33e      	cbz	r6, 4077a0 <__ssprint_r+0xf0>
  407750:	687e      	ldr	r6, [r7, #4]
  407752:	463b      	mov	r3, r7
  407754:	3708      	adds	r7, #8
  407756:	2e00      	cmp	r6, #0
  407758:	d0fa      	beq.n	407750 <__ssprint_r+0xa0>
  40775a:	42ae      	cmp	r6, r5
  40775c:	f8d3 9000 	ldr.w	r9, [r3]
  407760:	46ab      	mov	fp, r5
  407762:	d2b2      	bcs.n	4076ca <__ssprint_r+0x1a>
  407764:	4635      	mov	r5, r6
  407766:	46b3      	mov	fp, r6
  407768:	e7e2      	b.n	407730 <__ssprint_r+0x80>
  40776a:	4650      	mov	r0, sl
  40776c:	f7ff fd74 	bl	407258 <_realloc_r>
  407770:	4603      	mov	r3, r0
  407772:	2800      	cmp	r0, #0
  407774:	d1d2      	bne.n	40771c <__ssprint_r+0x6c>
  407776:	6921      	ldr	r1, [r4, #16]
  407778:	4650      	mov	r0, sl
  40777a:	f7fe fd31 	bl	4061e0 <_free_r>
  40777e:	230c      	movs	r3, #12
  407780:	f8ca 3000 	str.w	r3, [sl]
  407784:	89a3      	ldrh	r3, [r4, #12]
  407786:	2200      	movs	r2, #0
  407788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40778c:	f04f 30ff 	mov.w	r0, #4294967295
  407790:	81a3      	strh	r3, [r4, #12]
  407792:	f8c8 2008 	str.w	r2, [r8, #8]
  407796:	f8c8 2004 	str.w	r2, [r8, #4]
  40779a:	b003      	add	sp, #12
  40779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077a0:	2000      	movs	r0, #0
  4077a2:	f8c8 0004 	str.w	r0, [r8, #4]
  4077a6:	b003      	add	sp, #12
  4077a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004077ac <__ascii_wctomb>:
  4077ac:	b121      	cbz	r1, 4077b8 <__ascii_wctomb+0xc>
  4077ae:	2aff      	cmp	r2, #255	; 0xff
  4077b0:	d804      	bhi.n	4077bc <__ascii_wctomb+0x10>
  4077b2:	700a      	strb	r2, [r1, #0]
  4077b4:	2001      	movs	r0, #1
  4077b6:	4770      	bx	lr
  4077b8:	4608      	mov	r0, r1
  4077ba:	4770      	bx	lr
  4077bc:	238a      	movs	r3, #138	; 0x8a
  4077be:	6003      	str	r3, [r0, #0]
  4077c0:	f04f 30ff 	mov.w	r0, #4294967295
  4077c4:	4770      	bx	lr
  4077c6:	bf00      	nop

004077c8 <__register_exitproc>:
  4077c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4077cc:	4c25      	ldr	r4, [pc, #148]	; (407864 <__register_exitproc+0x9c>)
  4077ce:	6825      	ldr	r5, [r4, #0]
  4077d0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4077d4:	4606      	mov	r6, r0
  4077d6:	4688      	mov	r8, r1
  4077d8:	4692      	mov	sl, r2
  4077da:	4699      	mov	r9, r3
  4077dc:	b3c4      	cbz	r4, 407850 <__register_exitproc+0x88>
  4077de:	6860      	ldr	r0, [r4, #4]
  4077e0:	281f      	cmp	r0, #31
  4077e2:	dc17      	bgt.n	407814 <__register_exitproc+0x4c>
  4077e4:	1c43      	adds	r3, r0, #1
  4077e6:	b176      	cbz	r6, 407806 <__register_exitproc+0x3e>
  4077e8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4077ec:	2201      	movs	r2, #1
  4077ee:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4077f2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4077f6:	4082      	lsls	r2, r0
  4077f8:	4311      	orrs	r1, r2
  4077fa:	2e02      	cmp	r6, #2
  4077fc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407800:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407804:	d01e      	beq.n	407844 <__register_exitproc+0x7c>
  407806:	3002      	adds	r0, #2
  407808:	6063      	str	r3, [r4, #4]
  40780a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40780e:	2000      	movs	r0, #0
  407810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407814:	4b14      	ldr	r3, [pc, #80]	; (407868 <__register_exitproc+0xa0>)
  407816:	b303      	cbz	r3, 40785a <__register_exitproc+0x92>
  407818:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40781c:	f3af 8000 	nop.w
  407820:	4604      	mov	r4, r0
  407822:	b1d0      	cbz	r0, 40785a <__register_exitproc+0x92>
  407824:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407828:	2700      	movs	r7, #0
  40782a:	e880 0088 	stmia.w	r0, {r3, r7}
  40782e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407832:	4638      	mov	r0, r7
  407834:	2301      	movs	r3, #1
  407836:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40783a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40783e:	2e00      	cmp	r6, #0
  407840:	d0e1      	beq.n	407806 <__register_exitproc+0x3e>
  407842:	e7d1      	b.n	4077e8 <__register_exitproc+0x20>
  407844:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407848:	430a      	orrs	r2, r1
  40784a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40784e:	e7da      	b.n	407806 <__register_exitproc+0x3e>
  407850:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407854:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407858:	e7c1      	b.n	4077de <__register_exitproc+0x16>
  40785a:	f04f 30ff 	mov.w	r0, #4294967295
  40785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407862:	bf00      	nop
  407864:	00407ca4 	.word	0x00407ca4
  407868:	00000000 	.word	0x00000000

0040786c <_calloc_r>:
  40786c:	b510      	push	{r4, lr}
  40786e:	fb02 f101 	mul.w	r1, r2, r1
  407872:	f7fe fda9 	bl	4063c8 <_malloc_r>
  407876:	4604      	mov	r4, r0
  407878:	b1d8      	cbz	r0, 4078b2 <_calloc_r+0x46>
  40787a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40787e:	f022 0203 	bic.w	r2, r2, #3
  407882:	3a04      	subs	r2, #4
  407884:	2a24      	cmp	r2, #36	; 0x24
  407886:	d818      	bhi.n	4078ba <_calloc_r+0x4e>
  407888:	2a13      	cmp	r2, #19
  40788a:	d914      	bls.n	4078b6 <_calloc_r+0x4a>
  40788c:	2300      	movs	r3, #0
  40788e:	2a1b      	cmp	r2, #27
  407890:	6003      	str	r3, [r0, #0]
  407892:	6043      	str	r3, [r0, #4]
  407894:	d916      	bls.n	4078c4 <_calloc_r+0x58>
  407896:	2a24      	cmp	r2, #36	; 0x24
  407898:	6083      	str	r3, [r0, #8]
  40789a:	60c3      	str	r3, [r0, #12]
  40789c:	bf11      	iteee	ne
  40789e:	f100 0210 	addne.w	r2, r0, #16
  4078a2:	6103      	streq	r3, [r0, #16]
  4078a4:	6143      	streq	r3, [r0, #20]
  4078a6:	f100 0218 	addeq.w	r2, r0, #24
  4078aa:	2300      	movs	r3, #0
  4078ac:	6013      	str	r3, [r2, #0]
  4078ae:	6053      	str	r3, [r2, #4]
  4078b0:	6093      	str	r3, [r2, #8]
  4078b2:	4620      	mov	r0, r4
  4078b4:	bd10      	pop	{r4, pc}
  4078b6:	4602      	mov	r2, r0
  4078b8:	e7f7      	b.n	4078aa <_calloc_r+0x3e>
  4078ba:	2100      	movs	r1, #0
  4078bc:	f7fb fed8 	bl	403670 <memset>
  4078c0:	4620      	mov	r0, r4
  4078c2:	bd10      	pop	{r4, pc}
  4078c4:	f100 0208 	add.w	r2, r0, #8
  4078c8:	e7ef      	b.n	4078aa <_calloc_r+0x3e>
  4078ca:	bf00      	nop

004078cc <__gedf2>:
  4078cc:	f04f 3cff 	mov.w	ip, #4294967295
  4078d0:	e006      	b.n	4078e0 <__cmpdf2+0x4>
  4078d2:	bf00      	nop

004078d4 <__ledf2>:
  4078d4:	f04f 0c01 	mov.w	ip, #1
  4078d8:	e002      	b.n	4078e0 <__cmpdf2+0x4>
  4078da:	bf00      	nop

004078dc <__cmpdf2>:
  4078dc:	f04f 0c01 	mov.w	ip, #1
  4078e0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078f0:	bf18      	it	ne
  4078f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4078f6:	d01b      	beq.n	407930 <__cmpdf2+0x54>
  4078f8:	b001      	add	sp, #4
  4078fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4078fe:	bf0c      	ite	eq
  407900:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407904:	ea91 0f03 	teqne	r1, r3
  407908:	bf02      	ittt	eq
  40790a:	ea90 0f02 	teqeq	r0, r2
  40790e:	2000      	moveq	r0, #0
  407910:	4770      	bxeq	lr
  407912:	f110 0f00 	cmn.w	r0, #0
  407916:	ea91 0f03 	teq	r1, r3
  40791a:	bf58      	it	pl
  40791c:	4299      	cmppl	r1, r3
  40791e:	bf08      	it	eq
  407920:	4290      	cmpeq	r0, r2
  407922:	bf2c      	ite	cs
  407924:	17d8      	asrcs	r0, r3, #31
  407926:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40792a:	f040 0001 	orr.w	r0, r0, #1
  40792e:	4770      	bx	lr
  407930:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407938:	d102      	bne.n	407940 <__cmpdf2+0x64>
  40793a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40793e:	d107      	bne.n	407950 <__cmpdf2+0x74>
  407940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407948:	d1d6      	bne.n	4078f8 <__cmpdf2+0x1c>
  40794a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40794e:	d0d3      	beq.n	4078f8 <__cmpdf2+0x1c>
  407950:	f85d 0b04 	ldr.w	r0, [sp], #4
  407954:	4770      	bx	lr
  407956:	bf00      	nop

00407958 <__aeabi_cdrcmple>:
  407958:	4684      	mov	ip, r0
  40795a:	4610      	mov	r0, r2
  40795c:	4662      	mov	r2, ip
  40795e:	468c      	mov	ip, r1
  407960:	4619      	mov	r1, r3
  407962:	4663      	mov	r3, ip
  407964:	e000      	b.n	407968 <__aeabi_cdcmpeq>
  407966:	bf00      	nop

00407968 <__aeabi_cdcmpeq>:
  407968:	b501      	push	{r0, lr}
  40796a:	f7ff ffb7 	bl	4078dc <__cmpdf2>
  40796e:	2800      	cmp	r0, #0
  407970:	bf48      	it	mi
  407972:	f110 0f00 	cmnmi.w	r0, #0
  407976:	bd01      	pop	{r0, pc}

00407978 <__aeabi_dcmpeq>:
  407978:	f84d ed08 	str.w	lr, [sp, #-8]!
  40797c:	f7ff fff4 	bl	407968 <__aeabi_cdcmpeq>
  407980:	bf0c      	ite	eq
  407982:	2001      	moveq	r0, #1
  407984:	2000      	movne	r0, #0
  407986:	f85d fb08 	ldr.w	pc, [sp], #8
  40798a:	bf00      	nop

0040798c <__aeabi_dcmplt>:
  40798c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407990:	f7ff ffea 	bl	407968 <__aeabi_cdcmpeq>
  407994:	bf34      	ite	cc
  407996:	2001      	movcc	r0, #1
  407998:	2000      	movcs	r0, #0
  40799a:	f85d fb08 	ldr.w	pc, [sp], #8
  40799e:	bf00      	nop

004079a0 <__aeabi_dcmple>:
  4079a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079a4:	f7ff ffe0 	bl	407968 <__aeabi_cdcmpeq>
  4079a8:	bf94      	ite	ls
  4079aa:	2001      	movls	r0, #1
  4079ac:	2000      	movhi	r0, #0
  4079ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4079b2:	bf00      	nop

004079b4 <__aeabi_dcmpge>:
  4079b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079b8:	f7ff ffce 	bl	407958 <__aeabi_cdrcmple>
  4079bc:	bf94      	ite	ls
  4079be:	2001      	movls	r0, #1
  4079c0:	2000      	movhi	r0, #0
  4079c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4079c6:	bf00      	nop

004079c8 <__aeabi_dcmpgt>:
  4079c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079cc:	f7ff ffc4 	bl	407958 <__aeabi_cdrcmple>
  4079d0:	bf34      	ite	cc
  4079d2:	2001      	movcc	r0, #1
  4079d4:	2000      	movcs	r0, #0
  4079d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079da:	bf00      	nop

004079dc <__aeabi_dcmpun>:
  4079dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079e4:	d102      	bne.n	4079ec <__aeabi_dcmpun+0x10>
  4079e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4079ea:	d10a      	bne.n	407a02 <__aeabi_dcmpun+0x26>
  4079ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4079f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079f4:	d102      	bne.n	4079fc <__aeabi_dcmpun+0x20>
  4079f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4079fa:	d102      	bne.n	407a02 <__aeabi_dcmpun+0x26>
  4079fc:	f04f 0000 	mov.w	r0, #0
  407a00:	4770      	bx	lr
  407a02:	f04f 0001 	mov.w	r0, #1
  407a06:	4770      	bx	lr

00407a08 <__aeabi_d2iz>:
  407a08:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407a10:	d215      	bcs.n	407a3e <__aeabi_d2iz+0x36>
  407a12:	d511      	bpl.n	407a38 <__aeabi_d2iz+0x30>
  407a14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407a18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a1c:	d912      	bls.n	407a44 <__aeabi_d2iz+0x3c>
  407a1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a2e:	fa23 f002 	lsr.w	r0, r3, r2
  407a32:	bf18      	it	ne
  407a34:	4240      	negne	r0, r0
  407a36:	4770      	bx	lr
  407a38:	f04f 0000 	mov.w	r0, #0
  407a3c:	4770      	bx	lr
  407a3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a42:	d105      	bne.n	407a50 <__aeabi_d2iz+0x48>
  407a44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a48:	bf08      	it	eq
  407a4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a4e:	4770      	bx	lr
  407a50:	f04f 0000 	mov.w	r0, #0
  407a54:	4770      	bx	lr
  407a56:	bf00      	nop
  407a58:	0001c200 	.word	0x0001c200
  407a5c:	000000c0 	.word	0x000000c0
  407a60:	00000800 	.word	0x00000800
	...
  407a70:	20656466 	.word	0x20656466
  407a74:	67616d69 	.word	0x67616d69
  407a78:	706a2e65 	.word	0x706a2e65
  407a7c:	000a0d67 	.word	0x000a0d67
  407a80:	20726366 	.word	0x20726366
  407a84:	67616d69 	.word	0x67616d69
  407a88:	706a2e65 	.word	0x706a2e65
  407a8c:	64252067 	.word	0x64252067
  407a90:	00000a0d 	.word	0x00000a0d
  407a94:	736f6c63 	.word	0x736f6c63
  407a98:	6c612065 	.word	0x6c612065
  407a9c:	000a0d6c 	.word	0x000a0d6c
  407aa0:	70747468 	.word	0x70747468
  407aa4:	736f705f 	.word	0x736f705f
  407aa8:	6f2d2074 	.word	0x6f2d2074
  407aac:	74746820 	.word	0x74746820
  407ab0:	2f3a7370 	.word	0x2f3a7370
  407ab4:	6769622f 	.word	0x6769622f
  407ab8:	746f7262 	.word	0x746f7262
  407abc:	73726568 	.word	0x73726568
  407ac0:	2e736565 	.word	0x2e736565
  407ac4:	702f656d 	.word	0x702f656d
  407ac8:	5f74736f 	.word	0x5f74736f
  407acc:	67616d69 	.word	0x67616d69
  407ad0:	70612065 	.word	0x70612065
  407ad4:	63696c70 	.word	0x63696c70
  407ad8:	6f697461 	.word	0x6f697461
  407adc:	736a2f6e 	.word	0x736a2f6e
  407ae0:	0a0d6e6f 	.word	0x0a0d6e6f
  407ae4:	00000000 	.word	0x00000000
  407ae8:	70747468 	.word	0x70747468
  407aec:	6464615f 	.word	0x6464615f
  407af0:	6165685f 	.word	0x6165685f
  407af4:	20726564 	.word	0x20726564
  407af8:	656d2030 	.word	0x656d2030
  407afc:	67617373 	.word	0x67617373
  407b00:	79742d65 	.word	0x79742d65
  407b04:	69206570 	.word	0x69206570
  407b08:	6567616d 	.word	0x6567616d
  407b0c:	6e69622d 	.word	0x6e69622d
  407b10:	00000a0d 	.word	0x00000a0d
  407b14:	74697277 	.word	0x74697277
  407b18:	20302065 	.word	0x20302065
  407b1c:	0a0d6425 	.word	0x0a0d6425
  407b20:	00000000 	.word	0x00000000
  407b24:	70747468 	.word	0x70747468
  407b28:	6165725f 	.word	0x6165725f
  407b2c:	74735f64 	.word	0x74735f64
  407b30:	73757461 	.word	0x73757461
  407b34:	0a0d3020 	.word	0x0a0d3020
  407b38:	00000000 	.word	0x00000000
  407b3c:	6e65704f 	.word	0x6e65704f
  407b40:	00006465 	.word	0x00006465
  407b44:	70747468 	.word	0x70747468
  407b48:	6464615f 	.word	0x6464615f
  407b4c:	6165685f 	.word	0x6165685f
  407b50:	20726564 	.word	0x20726564
  407b54:	656d2030 	.word	0x656d2030
  407b58:	67617373 	.word	0x67617373
  407b5c:	79742d65 	.word	0x79742d65
  407b60:	61206570 	.word	0x61206570
  407b64:	6f696475 	.word	0x6f696475
  407b68:	7265742d 	.word	0x7265742d
  407b6c:	000a0d6d 	.word	0x000a0d6d
  407b70:	70747468 	.word	0x70747468
  407b74:	6464615f 	.word	0x6464615f
  407b78:	6165685f 	.word	0x6165685f
  407b7c:	20726564 	.word	0x20726564
  407b80:	656d2030 	.word	0x656d2030
  407b84:	67617373 	.word	0x67617373
  407b88:	79742d65 	.word	0x79742d65
  407b8c:	61206570 	.word	0x61206570
  407b90:	6f696475 	.word	0x6f696475
  407b94:	6e69622d 	.word	0x6e69622d
  407b98:	00000a0d 	.word	0x00000a0d
  407b9c:	73626577 	.word	0x73626577
  407ba0:	656b636f 	.word	0x656b636f
  407ba4:	6c635f74 	.word	0x6c635f74
  407ba8:	746e6569 	.word	0x746e6569
  407bac:	20662d20 	.word	0x20662d20
  407bb0:	206e6962 	.word	0x206e6962
  407bb4:	3a737377 	.word	0x3a737377
  407bb8:	69622f2f 	.word	0x69622f2f
  407bbc:	6f726267 	.word	0x6f726267
  407bc0:	72656874 	.word	0x72656874
  407bc4:	73656573 	.word	0x73656573
  407bc8:	2f656d2e 	.word	0x2f656d2e
  407bcc:	72756f73 	.word	0x72756f73
  407bd0:	615f6563 	.word	0x615f6563
  407bd4:	6f696475 	.word	0x6f696475
  407bd8:	636f735f 	.word	0x636f735f
  407bdc:	0d74656b 	.word	0x0d74656b
  407be0:	0000000a 	.word	0x0000000a
  407be4:	65704f5b 	.word	0x65704f5b
  407be8:	3a64656e 	.word	0x3a64656e
  407bec:	00000020 	.word	0x00000020
  407bf0:	74697277 	.word	0x74697277
  407bf4:	64252065 	.word	0x64252065
  407bf8:	0d642520 	.word	0x0d642520
  407bfc:	0000000a 	.word	0x0000000a
  407c00:	20656466 	.word	0x20656466
  407c04:	6d746162 	.word	0x6d746162
  407c08:	742e6e61 	.word	0x742e6e61
  407c0c:	0a0d7478 	.word	0x0a0d7478
  407c10:	00000000 	.word	0x00000000
  407c14:	20726366 	.word	0x20726366
  407c18:	6d746162 	.word	0x6d746162
  407c1c:	742e6e61 	.word	0x742e6e61
  407c20:	25207478 	.word	0x25207478
  407c24:	000a0d64 	.word	0x000a0d64
  407c28:	75746573 	.word	0x75746573
  407c2c:	65772070 	.word	0x65772070
  407c30:	000a0d62 	.word	0x000a0d62
  407c34:	7373415b 	.word	0x7373415b
  407c38:	6169636f 	.word	0x6169636f
  407c3c:	5d646574 	.word	0x5d646574
  407c40:	00000a0d 	.word	0x00000a0d
  407c44:	20746567 	.word	0x20746567
  407c48:	74737973 	.word	0x74737973
  407c4c:	732e6d65 	.word	0x732e6d65
  407c50:	6d656661 	.word	0x6d656661
  407c54:	2e65646f 	.word	0x2e65646f
  407c58:	74617473 	.word	0x74617473
  407c5c:	0a0d7375 	.word	0x0a0d7375
  407c60:	00000000 	.word	0x00000000
  407c64:	6c756166 	.word	0x6c756166
  407c68:	705f7374 	.word	0x705f7374
  407c6c:	746e6972 	.word	0x746e6972
  407c70:	00000a0d 	.word	0x00000a0d
  407c74:	6c756166 	.word	0x6c756166
  407c78:	725f7374 	.word	0x725f7374
  407c7c:	74657365 	.word	0x74657365
  407c80:	00000a0d 	.word	0x00000a0d
  407c84:	6f626572 	.word	0x6f626572
  407c88:	0a0d746f 	.word	0x0a0d746f
  407c8c:	00000000 	.word	0x00000000
  407c90:	20746573 	.word	0x20746573
  407c94:	63207973 	.word	0x63207973
  407c98:	6f207020 	.word	0x6f207020
  407c9c:	0a0d6666 	.word	0x0a0d6666
  407ca0:	00000000 	.word	0x00000000

00407ca4 <_global_impure_ptr>:
  407ca4:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  407cb4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407cc4:	46454443 00000000 33323130 37363534     CDEF....01234567
  407cd4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407ce4:	0000296c 00000030                       l)..0...

00407cec <blanks.7208>:
  407cec:	20202020 20202020 20202020 20202020                     

00407cfc <zeroes.7209>:
  407cfc:	30303030 30303030 30303030 30303030     0000000000000000
  407d0c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407d1c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  407d2c:	00000000                                ....

00407d30 <__mprec_bigtens>:
  407d30:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407d40:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407d50:	7f73bf3c 75154fdd                       <.s..O.u

00407d58 <__mprec_tens>:
  407d58:	00000000 3ff00000 00000000 40240000     .......?......$@
  407d68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407d78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407d88:	00000000 412e8480 00000000 416312d0     .......A......cA
  407d98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407da8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407db8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407dc8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407dd8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407de8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407df8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407e08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407e18:	79d99db4 44ea7843                       ...yCx.D

00407e20 <p05.6040>:
  407e20:	00000005 00000019 0000007d              ........}...

00407e2c <_ctype_>:
  407e2c:	20202000 20202020 28282020 20282828     .         ((((( 
  407e3c:	20202020 20202020 20202020 20202020                     
  407e4c:	10108820 10101010 10101010 10101010      ...............
  407e5c:	04040410 04040404 10040404 10101010     ................
  407e6c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407e7c:	01010101 01010101 01010101 10101010     ................
  407e8c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407e9c:	02020202 02020202 02020202 10101010     ................
  407eac:	00000020 00000000 00000000 00000000      ...............
	...

00407f30 <_init>:
  407f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f32:	bf00      	nop
  407f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f36:	bc08      	pop	{r3}
  407f38:	469e      	mov	lr, r3
  407f3a:	4770      	bx	lr

00407f3c <__init_array_start>:
  407f3c:	00405171 	.word	0x00405171

00407f40 <__frame_dummy_init_array_entry>:
  407f40:	004000f1                                ..@.

00407f44 <_fini>:
  407f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f46:	bf00      	nop
  407f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f4a:	bc08      	pop	{r3}
  407f4c:	469e      	mov	lr, r3
  407f4e:	4770      	bx	lr

00407f50 <__fini_array_start>:
  407f50:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__global_locale>:
20000440:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000460:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000480:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000500:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000520:	77ad 0040 6929 0040 0000 0000 7e2c 0040     .w@.)i@.....,~@.
20000530:	7d28 0040 7cc8 0040 7cc8 0040 7cc8 0040     (}@..|@..|@..|@.
20000540:	7cc8 0040 7cc8 0040 7cc8 0040 7cc8 0040     .|@..|@..|@..|@.
20000550:	7cc8 0040 7cc8 0040 ffff ffff ffff ffff     .|@..|@.........
20000560:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000588:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005ac <__malloc_av_>:
	...
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 

200009b4 <__malloc_sbrk_base>:
200009b4:	ffff ffff                                   ....

200009b8 <__malloc_trim_threshold>:
200009b8:	0000 0002                                   ....
