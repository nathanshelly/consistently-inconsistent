
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f2c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407f2c  00407f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009bc  20000000  00407f34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00007ff8  200009bc  004088f0  000209bc  2**2
                  ALLOC
  4 .stack        00003004  200089b4  004108e8  000209bc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209bc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000145e9  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ac1  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000070a8  00000000  00000000  00037ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c30  00000000  00000000  0003eb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  0003f7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006a19  00000000  00000000  00040341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000da70  00000000  00000000  00046d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004fe25  00000000  00000000  000547ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004048  00000000  00000000  000a45f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 b9 00 20 1d 28 40 00 e5 28 40 00 e5 28 40 00     ... .(@..(@..(@.
  400010:	e5 28 40 00 e5 28 40 00 e5 28 40 00 00 00 00 00     .(@..(@..(@.....
	...
  40002c:	e5 28 40 00 e5 28 40 00 00 00 00 00 e5 28 40 00     .(@..(@......(@.
  40003c:	e5 28 40 00 e5 28 40 00 e5 28 40 00 e5 28 40 00     .(@..(@..(@..(@.
  40004c:	e5 28 40 00 e5 28 40 00 e5 28 40 00 e5 28 40 00     .(@..(@..(@..(@.
  40005c:	00 00 00 00 e5 28 40 00 e5 28 40 00 00 00 00 00     .....(@..(@.....
  40006c:	c5 09 40 00 dd 09 40 00 00 00 00 00 4d 10 40 00     ..@...@.....M.@.
  40007c:	e5 28 40 00 00 00 00 00 00 00 00 00 e5 28 40 00     .(@..........(@.
  40008c:	e5 28 40 00 e5 28 40 00 e5 28 40 00 11 07 40 00     .(@..(@..(@...@.
  40009c:	21 0e 40 00 e5 28 40 00 e5 28 40 00 00 00 00 00     !.@..(@..(@.....
	...
  4000b4:	e5 28 40 00 e5 28 40 00 e5 28 40 00 e5 28 40 00     .(@..(@..(@..(@.
  4000c4:	e5 28 40 00 e5 28 40 00                             .(@..(@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009bc 	.word	0x200009bc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00407f34 	.word	0x00407f34

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00407f34 	.word	0x00407f34
  40012c:	200009c0 	.word	0x200009c0
  400130:	00407f34 	.word	0x00407f34
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
	...

00400178 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400178:	b580      	push	{r7, lr}
  40017a:	b092      	sub	sp, #72	; 0x48
  40017c:	af00      	add	r7, sp, #0
  40017e:	60f8      	str	r0, [r7, #12]
  400180:	60b9      	str	r1, [r7, #8]
  400182:	607a      	str	r2, [r7, #4]
  400184:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40018a:	221c      	movs	r2, #28
  40018c:	2100      	movs	r1, #0
  40018e:	4618      	mov	r0, r3
  400190:	4b36      	ldr	r3, [pc, #216]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  400192:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400194:	f107 0310 	add.w	r3, r7, #16
  400198:	221c      	movs	r2, #28
  40019a:	2100      	movs	r1, #0
  40019c:	4618      	mov	r0, r3
  40019e:	4b33      	ldr	r3, [pc, #204]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  4001a0:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  4001a2:	683b      	ldr	r3, [r7, #0]
  4001a4:	2b02      	cmp	r3, #2
  4001a6:	d004      	beq.n	4001b2 <ssc_i2s_set_receiver+0x3a>
  4001a8:	2b03      	cmp	r3, #3
  4001aa:	d00a      	beq.n	4001c2 <ssc_i2s_set_receiver+0x4a>
  4001ac:	2b01      	cmp	r3, #1
  4001ae:	d004      	beq.n	4001ba <ssc_i2s_set_receiver+0x42>
  4001b0:	e00b      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	e007      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c0:	e003      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001c6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ca:	68bb      	ldr	r3, [r7, #8]
  4001cc:	f003 0302 	and.w	r3, r3, #2
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d022      	beq.n	40021a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	2b03      	cmp	r3, #3
  4001d8:	d102      	bne.n	4001e0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001da:	2301      	movs	r3, #1
  4001dc:	61bb      	str	r3, [r7, #24]
  4001de:	e001      	b.n	4001e4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001e4:	2300      	movs	r3, #0
  4001e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001e8:	2304      	movs	r3, #4
  4001ea:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001f0:	2300      	movs	r3, #0
  4001f2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400200:	3b01      	subs	r3, #1
  400202:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400204:	2380      	movs	r3, #128	; 0x80
  400206:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  400208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40020a:	3b01      	subs	r3, #1
  40020c:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  40020e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400212:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400214:	2300      	movs	r3, #0
  400216:	62bb      	str	r3, [r7, #40]	; 0x28
  400218:	e01b      	b.n	400252 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40021a:	68bb      	ldr	r3, [r7, #8]
  40021c:	f003 0308 	and.w	r3, r3, #8
  400220:	2b00      	cmp	r3, #0
  400222:	d016      	beq.n	400252 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400228:	2300      	movs	r3, #0
  40022a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40022c:	2300      	movs	r3, #0
  40022e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400230:	2300      	movs	r3, #0
  400232:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400234:	2301      	movs	r3, #1
  400236:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400238:	2300      	movs	r3, #0
  40023a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40023c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40023e:	3b01      	subs	r3, #1
  400240:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400242:	2380      	movs	r3, #128	; 0x80
  400244:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400246:	2300      	movs	r3, #0
  400248:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40024a:	2300      	movs	r3, #0
  40024c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40024e:	2300      	movs	r3, #0
  400250:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400252:	f107 0210 	add.w	r2, r7, #16
  400256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40025a:	4619      	mov	r1, r3
  40025c:	68f8      	ldr	r0, [r7, #12]
  40025e:	4b04      	ldr	r3, [pc, #16]	; (400270 <ssc_i2s_set_receiver+0xf8>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3748      	adds	r7, #72	; 0x48
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	00402f4d 	.word	0x00402f4d
  400270:	004002c5 	.word	0x004002c5

00400274 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400274:	b480      	push	{r7}
  400276:	b083      	sub	sp, #12
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400282:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	2200      	movs	r2, #0
  400288:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40028a:	687b      	ldr	r3, [r7, #4]
  40028c:	2200      	movs	r2, #0
  40028e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	2200      	movs	r2, #0
  400294:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	2200      	movs	r2, #0
  40029a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2200      	movs	r2, #0
  4002a0:	61da      	str	r2, [r3, #28]
}
  4002a2:	bf00      	nop
  4002a4:	370c      	adds	r7, #12
  4002a6:	46bd      	mov	sp, r7
  4002a8:	bc80      	pop	{r7}
  4002aa:	4770      	bx	lr

004002ac <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2201      	movs	r2, #1
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b085      	sub	sp, #20
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	60f8      	str	r0, [r7, #12]
  4002cc:	60b9      	str	r1, [r7, #8]
  4002ce:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002d0:	68bb      	ldr	r3, [r7, #8]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d103      	bne.n	4002de <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	2200      	movs	r2, #0
  4002da:	611a      	str	r2, [r3, #16]
  4002dc:	e01c      	b.n	400318 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	691a      	ldr	r2, [r3, #16]
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ea:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002ec:	68bb      	ldr	r3, [r7, #8]
  4002ee:	689b      	ldr	r3, [r3, #8]
  4002f0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002f6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4002f8:	68bb      	ldr	r3, [r7, #8]
  4002fa:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4002fc:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	691b      	ldr	r3, [r3, #16]
  400302:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400304:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400306:	68bb      	ldr	r3, [r7, #8]
  400308:	695b      	ldr	r3, [r3, #20]
  40030a:	041b      	lsls	r3, r3, #16
  40030c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400310:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400312:	431a      	orrs	r2, r3
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2b00      	cmp	r3, #0
  40031c:	d103      	bne.n	400326 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	2200      	movs	r2, #0
  400322:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400324:	e021      	b.n	40036a <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	695a      	ldr	r2, [r3, #20]
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400336:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	689b      	ldr	r3, [r3, #8]
  40033c:	021b      	lsls	r3, r3, #8
  40033e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400342:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	041b      	lsls	r3, r3, #16
  40034a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40034e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	691b      	ldr	r3, [r3, #16]
  400354:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400356:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40035c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400362:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400364:	431a      	orrs	r2, r3
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	615a      	str	r2, [r3, #20]
}
  40036a:	bf00      	nop
  40036c:	3714      	adds	r7, #20
  40036e:	46bd      	mov	sp, r7
  400370:	bc80      	pop	{r7}
  400372:	4770      	bx	lr

00400374 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400374:	b480      	push	{r7}
  400376:	b083      	sub	sp, #12
  400378:	af00      	add	r7, sp, #0
  40037a:	6078      	str	r0, [r7, #4]
  40037c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	683a      	ldr	r2, [r7, #0]
  400382:	645a      	str	r2, [r3, #68]	; 0x44
}
  400384:	bf00      	nop
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  400396:	687b      	ldr	r3, [r7, #4]
  400398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  40039a:	4618      	mov	r0, r3
  40039c:	370c      	adds	r7, #12
  40039e:	46bd      	mov	sp, r7
  4003a0:	bc80      	pop	{r7}
  4003a2:	4770      	bx	lr

004003a4 <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4003a4:	b480      	push	{r7}
  4003a6:	b085      	sub	sp, #20
  4003a8:	af00      	add	r7, sp, #0
  4003aa:	6078      	str	r0, [r7, #4]
  4003ac:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003ae:	f242 7310 	movw	r3, #10000	; 0x2710
  4003b2:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003b4:	e006      	b.n	4003c4 <ssc_read+0x20>
		if (!ul_timeout--) {
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	1e5a      	subs	r2, r3, #1
  4003ba:	60fa      	str	r2, [r7, #12]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d101      	bne.n	4003c4 <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003c0:	2301      	movs	r3, #1
  4003c2:	e00a      	b.n	4003da <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003c8:	f003 0310 	and.w	r3, r3, #16
  4003cc:	2b00      	cmp	r3, #0
  4003ce:	d0f2      	beq.n	4003b6 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003d0:	687b      	ldr	r3, [r7, #4]
  4003d2:	6a1a      	ldr	r2, [r3, #32]
  4003d4:	683b      	ldr	r3, [r7, #0]
  4003d6:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003d8:	2300      	movs	r3, #0
}
  4003da:	4618      	mov	r0, r3
  4003dc:	3714      	adds	r7, #20
  4003de:	46bd      	mov	sp, r7
  4003e0:	bc80      	pop	{r7}
  4003e2:	4770      	bx	lr

004003e4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003e4:	b480      	push	{r7}
  4003e6:	b087      	sub	sp, #28
  4003e8:	af00      	add	r7, sp, #0
  4003ea:	60f8      	str	r0, [r7, #12]
  4003ec:	60b9      	str	r1, [r7, #8]
  4003ee:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003f0:	68fa      	ldr	r2, [r7, #12]
  4003f2:	68bb      	ldr	r3, [r7, #8]
  4003f4:	019b      	lsls	r3, r3, #6
  4003f6:	4413      	add	r3, r2
  4003f8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003fa:	697b      	ldr	r3, [r7, #20]
  4003fc:	2202      	movs	r2, #2
  4003fe:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400400:	697b      	ldr	r3, [r7, #20]
  400402:	f04f 32ff 	mov.w	r2, #4294967295
  400406:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400408:	697b      	ldr	r3, [r7, #20]
  40040a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40040c:	697b      	ldr	r3, [r7, #20]
  40040e:	687a      	ldr	r2, [r7, #4]
  400410:	605a      	str	r2, [r3, #4]
}
  400412:	bf00      	nop
  400414:	371c      	adds	r7, #28
  400416:	46bd      	mov	sp, r7
  400418:	bc80      	pop	{r7}
  40041a:	4770      	bx	lr

0040041c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40041c:	b480      	push	{r7}
  40041e:	b083      	sub	sp, #12
  400420:	af00      	add	r7, sp, #0
  400422:	6078      	str	r0, [r7, #4]
  400424:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400426:	687a      	ldr	r2, [r7, #4]
  400428:	683b      	ldr	r3, [r7, #0]
  40042a:	019b      	lsls	r3, r3, #6
  40042c:	4413      	add	r3, r2
  40042e:	2205      	movs	r2, #5
  400430:	601a      	str	r2, [r3, #0]
}
  400432:	bf00      	nop
  400434:	370c      	adds	r7, #12
  400436:	46bd      	mov	sp, r7
  400438:	bc80      	pop	{r7}
  40043a:	4770      	bx	lr

0040043c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40043c:	b480      	push	{r7}
  40043e:	b085      	sub	sp, #20
  400440:	af00      	add	r7, sp, #0
  400442:	60f8      	str	r0, [r7, #12]
  400444:	60b9      	str	r1, [r7, #8]
  400446:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400448:	68fa      	ldr	r2, [r7, #12]
  40044a:	68bb      	ldr	r3, [r7, #8]
  40044c:	019b      	lsls	r3, r3, #6
  40044e:	4413      	add	r3, r2
  400450:	331c      	adds	r3, #28
  400452:	687a      	ldr	r2, [r7, #4]
  400454:	601a      	str	r2, [r3, #0]
}
  400456:	bf00      	nop
  400458:	3714      	adds	r7, #20
  40045a:	46bd      	mov	sp, r7
  40045c:	bc80      	pop	{r7}
  40045e:	4770      	bx	lr

00400460 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400460:	b480      	push	{r7}
  400462:	b087      	sub	sp, #28
  400464:	af00      	add	r7, sp, #0
  400466:	60f8      	str	r0, [r7, #12]
  400468:	60b9      	str	r1, [r7, #8]
  40046a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40046c:	68fa      	ldr	r2, [r7, #12]
  40046e:	68bb      	ldr	r3, [r7, #8]
  400470:	019b      	lsls	r3, r3, #6
  400472:	4413      	add	r3, r2
  400474:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400476:	697b      	ldr	r3, [r7, #20]
  400478:	687a      	ldr	r2, [r7, #4]
  40047a:	625a      	str	r2, [r3, #36]	; 0x24
}
  40047c:	bf00      	nop
  40047e:	371c      	adds	r7, #28
  400480:	46bd      	mov	sp, r7
  400482:	bc80      	pop	{r7}
  400484:	4770      	bx	lr

00400486 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400486:	b480      	push	{r7}
  400488:	b085      	sub	sp, #20
  40048a:	af00      	add	r7, sp, #0
  40048c:	6078      	str	r0, [r7, #4]
  40048e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400490:	687a      	ldr	r2, [r7, #4]
  400492:	683b      	ldr	r3, [r7, #0]
  400494:	019b      	lsls	r3, r3, #6
  400496:	4413      	add	r3, r2
  400498:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40049a:	68fb      	ldr	r3, [r7, #12]
  40049c:	6a1b      	ldr	r3, [r3, #32]
}
  40049e:	4618      	mov	r0, r3
  4004a0:	3714      	adds	r7, #20
  4004a2:	46bd      	mov	sp, r7
  4004a4:	bc80      	pop	{r7}
  4004a6:	4770      	bx	lr

004004a8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004a8:	b480      	push	{r7}
  4004aa:	b08d      	sub	sp, #52	; 0x34
  4004ac:	af00      	add	r7, sp, #0
  4004ae:	60f8      	str	r0, [r7, #12]
  4004b0:	60b9      	str	r1, [r7, #8]
  4004b2:	607a      	str	r2, [r7, #4]
  4004b4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004b6:	2302      	movs	r3, #2
  4004b8:	613b      	str	r3, [r7, #16]
  4004ba:	2308      	movs	r3, #8
  4004bc:	617b      	str	r3, [r7, #20]
  4004be:	2320      	movs	r3, #32
  4004c0:	61bb      	str	r3, [r7, #24]
  4004c2:	2380      	movs	r3, #128	; 0x80
  4004c4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004c8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004ca:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004cc:	2300      	movs	r3, #0
  4004ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004d0:	e01a      	b.n	400508 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004d4:	009b      	lsls	r3, r3, #2
  4004d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004da:	4413      	add	r3, r2
  4004dc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004e0:	68ba      	ldr	r2, [r7, #8]
  4004e2:	fbb2 f3f3 	udiv	r3, r2, r3
  4004e6:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4004e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004ea:	0c1b      	lsrs	r3, r3, #16
  4004ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4004ee:	68fa      	ldr	r2, [r7, #12]
  4004f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004f2:	429a      	cmp	r2, r3
  4004f4:	d901      	bls.n	4004fa <tc_find_mck_divisor+0x52>
			return 0;
  4004f6:	2300      	movs	r3, #0
  4004f8:	e023      	b.n	400542 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4004fa:	68fa      	ldr	r2, [r7, #12]
  4004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004fe:	429a      	cmp	r2, r3
  400500:	d206      	bcs.n	400510 <tc_find_mck_divisor+0x68>
			ul_index++) {
  400502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400504:	3301      	adds	r3, #1
  400506:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40050a:	2b04      	cmp	r3, #4
  40050c:	d9e1      	bls.n	4004d2 <tc_find_mck_divisor+0x2a>
  40050e:	e000      	b.n	400512 <tc_find_mck_divisor+0x6a>
			break;
  400510:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400514:	2b04      	cmp	r3, #4
  400516:	d901      	bls.n	40051c <tc_find_mck_divisor+0x74>
		return 0;
  400518:	2300      	movs	r3, #0
  40051a:	e012      	b.n	400542 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40051c:	687b      	ldr	r3, [r7, #4]
  40051e:	2b00      	cmp	r3, #0
  400520:	d008      	beq.n	400534 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  400522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400524:	009b      	lsls	r3, r3, #2
  400526:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40052a:	4413      	add	r3, r2
  40052c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  400534:	683b      	ldr	r3, [r7, #0]
  400536:	2b00      	cmp	r3, #0
  400538:	d002      	beq.n	400540 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40053a:	683b      	ldr	r3, [r7, #0]
  40053c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40053e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400540:	2301      	movs	r3, #1
}
  400542:	4618      	mov	r0, r3
  400544:	3734      	adds	r7, #52	; 0x34
  400546:	46bd      	mov	sp, r7
  400548:	bc80      	pop	{r7}
  40054a:	4770      	bx	lr

0040054c <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  40054c:	b480      	push	{r7}
  40054e:	b083      	sub	sp, #12
  400550:	af00      	add	r7, sp, #0
  400552:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400554:	687b      	ldr	r3, [r7, #4]
  400556:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40055a:	605a      	str	r2, [r3, #4]

}
  40055c:	bf00      	nop
  40055e:	370c      	adds	r7, #12
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr
	...

00400568 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400568:	b480      	push	{r7}
  40056a:	b083      	sub	sp, #12
  40056c:	af00      	add	r7, sp, #0
  40056e:	4603      	mov	r3, r0
  400570:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400572:	4908      	ldr	r1, [pc, #32]	; (400594 <NVIC_EnableIRQ+0x2c>)
  400574:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400578:	095b      	lsrs	r3, r3, #5
  40057a:	79fa      	ldrb	r2, [r7, #7]
  40057c:	f002 021f 	and.w	r2, r2, #31
  400580:	2001      	movs	r0, #1
  400582:	fa00 f202 	lsl.w	r2, r0, r2
  400586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40058a:	bf00      	nop
  40058c:	370c      	adds	r7, #12
  40058e:	46bd      	mov	sp, r7
  400590:	bc80      	pop	{r7}
  400592:	4770      	bx	lr
  400594:	e000e100 	.word	0xe000e100

00400598 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400598:	b480      	push	{r7}
  40059a:	b083      	sub	sp, #12
  40059c:	af00      	add	r7, sp, #0
  40059e:	4603      	mov	r3, r0
  4005a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005a2:	4909      	ldr	r1, [pc, #36]	; (4005c8 <NVIC_DisableIRQ+0x30>)
  4005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005a8:	095b      	lsrs	r3, r3, #5
  4005aa:	79fa      	ldrb	r2, [r7, #7]
  4005ac:	f002 021f 	and.w	r2, r2, #31
  4005b0:	2001      	movs	r0, #1
  4005b2:	fa00 f202 	lsl.w	r2, r0, r2
  4005b6:	3320      	adds	r3, #32
  4005b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005bc:	bf00      	nop
  4005be:	370c      	adds	r7, #12
  4005c0:	46bd      	mov	sp, r7
  4005c2:	bc80      	pop	{r7}
  4005c4:	4770      	bx	lr
  4005c6:	bf00      	nop
  4005c8:	e000e100 	.word	0xe000e100

004005cc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005cc:	b480      	push	{r7}
  4005ce:	b083      	sub	sp, #12
  4005d0:	af00      	add	r7, sp, #0
  4005d2:	4603      	mov	r3, r0
  4005d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005d6:	4909      	ldr	r1, [pc, #36]	; (4005fc <NVIC_ClearPendingIRQ+0x30>)
  4005d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005dc:	095b      	lsrs	r3, r3, #5
  4005de:	79fa      	ldrb	r2, [r7, #7]
  4005e0:	f002 021f 	and.w	r2, r2, #31
  4005e4:	2001      	movs	r0, #1
  4005e6:	fa00 f202 	lsl.w	r2, r0, r2
  4005ea:	3360      	adds	r3, #96	; 0x60
  4005ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005f0:	bf00      	nop
  4005f2:	370c      	adds	r7, #12
  4005f4:	46bd      	mov	sp, r7
  4005f6:	bc80      	pop	{r7}
  4005f8:	4770      	bx	lr
  4005fa:	bf00      	nop
  4005fc:	e000e100 	.word	0xe000e100

00400600 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	4603      	mov	r3, r0
  400608:	6039      	str	r1, [r7, #0]
  40060a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400610:	2b00      	cmp	r3, #0
  400612:	da0b      	bge.n	40062c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400614:	490d      	ldr	r1, [pc, #52]	; (40064c <NVIC_SetPriority+0x4c>)
  400616:	79fb      	ldrb	r3, [r7, #7]
  400618:	f003 030f 	and.w	r3, r3, #15
  40061c:	3b04      	subs	r3, #4
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	b2d2      	uxtb	r2, r2
  400622:	0112      	lsls	r2, r2, #4
  400624:	b2d2      	uxtb	r2, r2
  400626:	440b      	add	r3, r1
  400628:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40062a:	e009      	b.n	400640 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40062c:	4908      	ldr	r1, [pc, #32]	; (400650 <NVIC_SetPriority+0x50>)
  40062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400632:	683a      	ldr	r2, [r7, #0]
  400634:	b2d2      	uxtb	r2, r2
  400636:	0112      	lsls	r2, r2, #4
  400638:	b2d2      	uxtb	r2, r2
  40063a:	440b      	add	r3, r1
  40063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400640:	bf00      	nop
  400642:	370c      	adds	r7, #12
  400644:	46bd      	mov	sp, r7
  400646:	bc80      	pop	{r7}
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	e000ed00 	.word	0xe000ed00
  400650:	e000e100 	.word	0xe000e100

00400654 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400654:	b480      	push	{r7}
  400656:	b083      	sub	sp, #12
  400658:	af00      	add	r7, sp, #0
  40065a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40065c:	687b      	ldr	r3, [r7, #4]
  40065e:	2b07      	cmp	r3, #7
  400660:	d825      	bhi.n	4006ae <osc_get_rate+0x5a>
  400662:	a201      	add	r2, pc, #4	; (adr r2, 400668 <osc_get_rate+0x14>)
  400664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400668:	00400689 	.word	0x00400689
  40066c:	0040068f 	.word	0x0040068f
  400670:	00400695 	.word	0x00400695
  400674:	0040069b 	.word	0x0040069b
  400678:	0040069f 	.word	0x0040069f
  40067c:	004006a3 	.word	0x004006a3
  400680:	004006a7 	.word	0x004006a7
  400684:	004006ab 	.word	0x004006ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400688:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40068c:	e010      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40068e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400692:	e00d      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400698:	e00a      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40069a:	4b08      	ldr	r3, [pc, #32]	; (4006bc <osc_get_rate+0x68>)
  40069c:	e008      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40069e:	4b08      	ldr	r3, [pc, #32]	; (4006c0 <osc_get_rate+0x6c>)
  4006a0:	e006      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006a2:	4b08      	ldr	r3, [pc, #32]	; (4006c4 <osc_get_rate+0x70>)
  4006a4:	e004      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006a6:	4b07      	ldr	r3, [pc, #28]	; (4006c4 <osc_get_rate+0x70>)
  4006a8:	e002      	b.n	4006b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006aa:	4b06      	ldr	r3, [pc, #24]	; (4006c4 <osc_get_rate+0x70>)
  4006ac:	e000      	b.n	4006b0 <osc_get_rate+0x5c>
	}

	return 0;
  4006ae:	2300      	movs	r3, #0
}
  4006b0:	4618      	mov	r0, r3
  4006b2:	370c      	adds	r7, #12
  4006b4:	46bd      	mov	sp, r7
  4006b6:	bc80      	pop	{r7}
  4006b8:	4770      	bx	lr
  4006ba:	bf00      	nop
  4006bc:	003d0900 	.word	0x003d0900
  4006c0:	007a1200 	.word	0x007a1200
  4006c4:	00b71b00 	.word	0x00b71b00

004006c8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006c8:	b580      	push	{r7, lr}
  4006ca:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006cc:	2006      	movs	r0, #6
  4006ce:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <sysclk_get_main_hz+0x18>)
  4006d0:	4798      	blx	r3
  4006d2:	4602      	mov	r2, r0
  4006d4:	4613      	mov	r3, r2
  4006d6:	009b      	lsls	r3, r3, #2
  4006d8:	4413      	add	r3, r2
  4006da:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006dc:	4618      	mov	r0, r3
  4006de:	bd80      	pop	{r7, pc}
  4006e0:	00400655 	.word	0x00400655

004006e4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006e4:	b580      	push	{r7, lr}
  4006e6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006e8:	4b02      	ldr	r3, [pc, #8]	; (4006f4 <sysclk_get_cpu_hz+0x10>)
  4006ea:	4798      	blx	r3
  4006ec:	4603      	mov	r3, r0
  4006ee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006f0:	4618      	mov	r0, r3
  4006f2:	bd80      	pop	{r7, pc}
  4006f4:	004006c9 	.word	0x004006c9

004006f8 <start_i2s_capture>:
/** Receiver buffer content. */
volatile uint16_t i2s_rec_buf[AUDIO_BUFFER_SIZE] = {0};
	
volatile uint8_t capture_toggle = 0;

void start_i2s_capture(void){ ssc_enable_interrupt(SSC, SSC_IDR_RXRDY); }
  4006f8:	b580      	push	{r7, lr}
  4006fa:	af00      	add	r7, sp, #0
  4006fc:	2110      	movs	r1, #16
  4006fe:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400702:	4b02      	ldr	r3, [pc, #8]	; (40070c <start_i2s_capture+0x14>)
  400704:	4798      	blx	r3
  400706:	bf00      	nop
  400708:	bd80      	pop	{r7, pc}
  40070a:	bf00      	nop
  40070c:	00400375 	.word	0x00400375

00400710 <SSC_Handler>:

/**
 * \brief Synchronous Serial Controller Handler.
 */
void SSC_Handler(void)
{
  400710:	b590      	push	{r4, r7, lr}
  400712:	b083      	sub	sp, #12
  400714:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  400716:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40071a:	4b1b      	ldr	r3, [pc, #108]	; (400788 <SSC_Handler+0x78>)
  40071c:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  40071e:	1d3b      	adds	r3, r7, #4
  400720:	4619      	mov	r1, r3
  400722:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400726:	4b19      	ldr	r3, [pc, #100]	; (40078c <SSC_Handler+0x7c>)
  400728:	4798      	blx	r3
	
	if(!(capture_toggle++ % 4) && i2s_receive_index < AUDIO_BUFFER_SIZE)
  40072a:	4b19      	ldr	r3, [pc, #100]	; (400790 <SSC_Handler+0x80>)
  40072c:	781b      	ldrb	r3, [r3, #0]
  40072e:	b2db      	uxtb	r3, r3
  400730:	1c5a      	adds	r2, r3, #1
  400732:	b2d1      	uxtb	r1, r2
  400734:	4a16      	ldr	r2, [pc, #88]	; (400790 <SSC_Handler+0x80>)
  400736:	7011      	strb	r1, [r2, #0]
  400738:	f003 0303 	and.w	r3, r3, #3
  40073c:	b2db      	uxtb	r3, r3
  40073e:	2b00      	cmp	r3, #0
  400740:	d112      	bne.n	400768 <SSC_Handler+0x58>
  400742:	4b14      	ldr	r3, [pc, #80]	; (400794 <SSC_Handler+0x84>)
  400744:	681b      	ldr	r3, [r3, #0]
  400746:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  40074a:	d20d      	bcs.n	400768 <SSC_Handler+0x58>
		i2s_rec_buf[i2s_receive_index++] = modify_data(ul_data);
  40074c:	4b11      	ldr	r3, [pc, #68]	; (400794 <SSC_Handler+0x84>)
  40074e:	681c      	ldr	r4, [r3, #0]
  400750:	1c63      	adds	r3, r4, #1
  400752:	4a10      	ldr	r2, [pc, #64]	; (400794 <SSC_Handler+0x84>)
  400754:	6013      	str	r3, [r2, #0]
  400756:	687b      	ldr	r3, [r7, #4]
  400758:	4618      	mov	r0, r3
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <SSC_Handler+0x88>)
  40075c:	4798      	blx	r3
  40075e:	4603      	mov	r3, r0
  400760:	461a      	mov	r2, r3
  400762:	4b0e      	ldr	r3, [pc, #56]	; (40079c <SSC_Handler+0x8c>)
  400764:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (i2s_receive_index >= AUDIO_BUFFER_SIZE && !buffer_filled)
  400768:	4b0a      	ldr	r3, [pc, #40]	; (400794 <SSC_Handler+0x84>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400770:	d306      	bcc.n	400780 <SSC_Handler+0x70>
  400772:	4b0b      	ldr	r3, [pc, #44]	; (4007a0 <SSC_Handler+0x90>)
  400774:	681b      	ldr	r3, [r3, #0]
  400776:	2b00      	cmp	r3, #0
  400778:	d102      	bne.n	400780 <SSC_Handler+0x70>
		buffer_filled = 1;
  40077a:	4b09      	ldr	r3, [pc, #36]	; (4007a0 <SSC_Handler+0x90>)
  40077c:	2201      	movs	r2, #1
  40077e:	601a      	str	r2, [r3, #0]
		//i2s_receive_index = 0;
}
  400780:	bf00      	nop
  400782:	370c      	adds	r7, #12
  400784:	46bd      	mov	sp, r7
  400786:	bd90      	pop	{r4, r7, pc}
  400788:	0040038f 	.word	0x0040038f
  40078c:	004003a5 	.word	0x004003a5
  400790:	200086e0 	.word	0x200086e0
  400794:	200009d8 	.word	0x200009d8
  400798:	004007a5 	.word	0x004007a5
  40079c:	200009e0 	.word	0x200009e0
  4007a0:	200009dc 	.word	0x200009dc

004007a4 <modify_data>:

// get rid of zero padding and tristated signal
uint16_t modify_data(uint32_t data_to_modify) { return (uint16_t) (data_to_modify >> 16); }
  4007a4:	b480      	push	{r7}
  4007a6:	b083      	sub	sp, #12
  4007a8:	af00      	add	r7, sp, #0
  4007aa:	6078      	str	r0, [r7, #4]
  4007ac:	687b      	ldr	r3, [r7, #4]
  4007ae:	0c1b      	lsrs	r3, r3, #16
  4007b0:	b29b      	uxth	r3, r3
  4007b2:	4618      	mov	r0, r3
  4007b4:	370c      	adds	r7, #12
  4007b6:	46bd      	mov	sp, r7
  4007b8:	bc80      	pop	{r7}
  4007ba:	4770      	bx	lr

004007bc <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void){
  4007bc:	b590      	push	{r4, r7, lr}
  4007be:	b085      	sub	sp, #20
  4007c0:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007c2:	2016      	movs	r0, #22
  4007c4:	4b18      	ldr	r3, [pc, #96]	; (400828 <configure_i2s+0x6c>)
  4007c6:	4798      	blx	r3
	ssc_reset(SSC);
  4007c8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007cc:	4b17      	ldr	r3, [pc, #92]	; (40082c <configure_i2s+0x70>)
  4007ce:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007d0:	4b17      	ldr	r3, [pc, #92]	; (400830 <configure_i2s+0x74>)
  4007d2:	4798      	blx	r3
  4007d4:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007d6:	687a      	ldr	r2, [r7, #4]
  4007d8:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007dc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007e0:	4b14      	ldr	r3, [pc, #80]	; (400834 <configure_i2s+0x78>)
  4007e2:	4798      	blx	r3
  4007e4:	4603      	mov	r3, r0
  4007e6:	2b00      	cmp	r3, #0
  4007e8:	d11a      	bne.n	400820 <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  4007ea:	2320      	movs	r3, #32
  4007ec:	9300      	str	r3, [sp, #0]
  4007ee:	2301      	movs	r3, #1
  4007f0:	2202      	movs	r2, #2
  4007f2:	2102      	movs	r1, #2
  4007f4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007f8:	4c0f      	ldr	r4, [pc, #60]	; (400838 <configure_i2s+0x7c>)
  4007fa:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  4007fc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400800:	4b0e      	ldr	r3, [pc, #56]	; (40083c <configure_i2s+0x80>)
  400802:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  400804:	2016      	movs	r0, #22
  400806:	4b0e      	ldr	r3, [pc, #56]	; (400840 <configure_i2s+0x84>)
  400808:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  40080a:	2016      	movs	r0, #22
  40080c:	4b0d      	ldr	r3, [pc, #52]	; (400844 <configure_i2s+0x88>)
  40080e:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  400810:	2104      	movs	r1, #4
  400812:	2016      	movs	r0, #22
  400814:	4b0c      	ldr	r3, [pc, #48]	; (400848 <configure_i2s+0x8c>)
  400816:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400818:	2016      	movs	r0, #22
  40081a:	4b0c      	ldr	r3, [pc, #48]	; (40084c <configure_i2s+0x90>)
  40081c:	4798      	blx	r3
  40081e:	e000      	b.n	400822 <configure_i2s+0x66>
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  400820:	bf00      	nop
  400822:	370c      	adds	r7, #12
  400824:	46bd      	mov	sp, r7
  400826:	bd90      	pop	{r4, r7, pc}
  400828:	00402405 	.word	0x00402405
  40082c:	00400275 	.word	0x00400275
  400830:	004006e5 	.word	0x004006e5
  400834:	00400139 	.word	0x00400139
  400838:	00400179 	.word	0x00400179
  40083c:	004002ad 	.word	0x004002ad
  400840:	00400599 	.word	0x00400599
  400844:	004005cd 	.word	0x004005cd
  400848:	00400601 	.word	0x00400601
  40084c:	00400569 	.word	0x00400569

00400850 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400850:	b580      	push	{r7, lr}
  400852:	b084      	sub	sp, #16
  400854:	af00      	add	r7, sp, #0
  400856:	6078      	str	r0, [r7, #4]
  400858:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40085a:	6878      	ldr	r0, [r7, #4]
  40085c:	4b2c      	ldr	r3, [pc, #176]	; (400910 <pio_handler_process+0xc0>)
  40085e:	4798      	blx	r3
  400860:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400862:	6878      	ldr	r0, [r7, #4]
  400864:	4b2b      	ldr	r3, [pc, #172]	; (400914 <pio_handler_process+0xc4>)
  400866:	4798      	blx	r3
  400868:	4602      	mov	r2, r0
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	4013      	ands	r3, r2
  40086e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400870:	68fb      	ldr	r3, [r7, #12]
  400872:	2b00      	cmp	r3, #0
  400874:	d03c      	beq.n	4008f0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400876:	2300      	movs	r3, #0
  400878:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40087a:	e034      	b.n	4008e6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40087c:	4a26      	ldr	r2, [pc, #152]	; (400918 <pio_handler_process+0xc8>)
  40087e:	68bb      	ldr	r3, [r7, #8]
  400880:	011b      	lsls	r3, r3, #4
  400882:	4413      	add	r3, r2
  400884:	681a      	ldr	r2, [r3, #0]
  400886:	683b      	ldr	r3, [r7, #0]
  400888:	429a      	cmp	r2, r3
  40088a:	d126      	bne.n	4008da <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40088c:	4a22      	ldr	r2, [pc, #136]	; (400918 <pio_handler_process+0xc8>)
  40088e:	68bb      	ldr	r3, [r7, #8]
  400890:	011b      	lsls	r3, r3, #4
  400892:	4413      	add	r3, r2
  400894:	3304      	adds	r3, #4
  400896:	681a      	ldr	r2, [r3, #0]
  400898:	68fb      	ldr	r3, [r7, #12]
  40089a:	4013      	ands	r3, r2
  40089c:	2b00      	cmp	r3, #0
  40089e:	d01c      	beq.n	4008da <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008a0:	4a1d      	ldr	r2, [pc, #116]	; (400918 <pio_handler_process+0xc8>)
  4008a2:	68bb      	ldr	r3, [r7, #8]
  4008a4:	011b      	lsls	r3, r3, #4
  4008a6:	4413      	add	r3, r2
  4008a8:	330c      	adds	r3, #12
  4008aa:	681b      	ldr	r3, [r3, #0]
  4008ac:	491a      	ldr	r1, [pc, #104]	; (400918 <pio_handler_process+0xc8>)
  4008ae:	68ba      	ldr	r2, [r7, #8]
  4008b0:	0112      	lsls	r2, r2, #4
  4008b2:	440a      	add	r2, r1
  4008b4:	6810      	ldr	r0, [r2, #0]
  4008b6:	4918      	ldr	r1, [pc, #96]	; (400918 <pio_handler_process+0xc8>)
  4008b8:	68ba      	ldr	r2, [r7, #8]
  4008ba:	0112      	lsls	r2, r2, #4
  4008bc:	440a      	add	r2, r1
  4008be:	3204      	adds	r2, #4
  4008c0:	6812      	ldr	r2, [r2, #0]
  4008c2:	4611      	mov	r1, r2
  4008c4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008c6:	4a14      	ldr	r2, [pc, #80]	; (400918 <pio_handler_process+0xc8>)
  4008c8:	68bb      	ldr	r3, [r7, #8]
  4008ca:	011b      	lsls	r3, r3, #4
  4008cc:	4413      	add	r3, r2
  4008ce:	3304      	adds	r3, #4
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	43db      	mvns	r3, r3
  4008d4:	68fa      	ldr	r2, [r7, #12]
  4008d6:	4013      	ands	r3, r2
  4008d8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008da:	68bb      	ldr	r3, [r7, #8]
  4008dc:	3301      	adds	r3, #1
  4008de:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008e0:	68bb      	ldr	r3, [r7, #8]
  4008e2:	2b06      	cmp	r3, #6
  4008e4:	d803      	bhi.n	4008ee <pio_handler_process+0x9e>
		while (status != 0) {
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	2b00      	cmp	r3, #0
  4008ea:	d1c7      	bne.n	40087c <pio_handler_process+0x2c>
  4008ec:	e000      	b.n	4008f0 <pio_handler_process+0xa0>
				break;
  4008ee:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008f0:	4b0a      	ldr	r3, [pc, #40]	; (40091c <pio_handler_process+0xcc>)
  4008f2:	681b      	ldr	r3, [r3, #0]
  4008f4:	2b00      	cmp	r3, #0
  4008f6:	d007      	beq.n	400908 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4008f8:	4b09      	ldr	r3, [pc, #36]	; (400920 <pio_handler_process+0xd0>)
  4008fa:	681b      	ldr	r3, [r3, #0]
  4008fc:	2b00      	cmp	r3, #0
  4008fe:	d003      	beq.n	400908 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400900:	4b07      	ldr	r3, [pc, #28]	; (400920 <pio_handler_process+0xd0>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	6878      	ldr	r0, [r7, #4]
  400906:	4798      	blx	r3
		}
	}
#endif
}
  400908:	bf00      	nop
  40090a:	3710      	adds	r7, #16
  40090c:	46bd      	mov	sp, r7
  40090e:	bd80      	pop	{r7, pc}
  400910:	00401fb7 	.word	0x00401fb7
  400914:	00401fcd 	.word	0x00401fcd
  400918:	200086e4 	.word	0x200086e4
  40091c:	200089ac 	.word	0x200089ac
  400920:	20008758 	.word	0x20008758

00400924 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400924:	b580      	push	{r7, lr}
  400926:	b086      	sub	sp, #24
  400928:	af00      	add	r7, sp, #0
  40092a:	60f8      	str	r0, [r7, #12]
  40092c:	60b9      	str	r1, [r7, #8]
  40092e:	607a      	str	r2, [r7, #4]
  400930:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400932:	4b21      	ldr	r3, [pc, #132]	; (4009b8 <pio_handler_set+0x94>)
  400934:	681b      	ldr	r3, [r3, #0]
  400936:	2b06      	cmp	r3, #6
  400938:	d901      	bls.n	40093e <pio_handler_set+0x1a>
		return 1;
  40093a:	2301      	movs	r3, #1
  40093c:	e038      	b.n	4009b0 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40093e:	2300      	movs	r3, #0
  400940:	75fb      	strb	r3, [r7, #23]
  400942:	e011      	b.n	400968 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400944:	7dfb      	ldrb	r3, [r7, #23]
  400946:	011b      	lsls	r3, r3, #4
  400948:	4a1c      	ldr	r2, [pc, #112]	; (4009bc <pio_handler_set+0x98>)
  40094a:	4413      	add	r3, r2
  40094c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40094e:	693b      	ldr	r3, [r7, #16]
  400950:	681a      	ldr	r2, [r3, #0]
  400952:	68bb      	ldr	r3, [r7, #8]
  400954:	429a      	cmp	r2, r3
  400956:	d104      	bne.n	400962 <pio_handler_set+0x3e>
  400958:	693b      	ldr	r3, [r7, #16]
  40095a:	685a      	ldr	r2, [r3, #4]
  40095c:	687b      	ldr	r3, [r7, #4]
  40095e:	429a      	cmp	r2, r3
  400960:	d008      	beq.n	400974 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400962:	7dfb      	ldrb	r3, [r7, #23]
  400964:	3301      	adds	r3, #1
  400966:	75fb      	strb	r3, [r7, #23]
  400968:	7dfa      	ldrb	r2, [r7, #23]
  40096a:	4b13      	ldr	r3, [pc, #76]	; (4009b8 <pio_handler_set+0x94>)
  40096c:	681b      	ldr	r3, [r3, #0]
  40096e:	429a      	cmp	r2, r3
  400970:	d9e8      	bls.n	400944 <pio_handler_set+0x20>
  400972:	e000      	b.n	400976 <pio_handler_set+0x52>
			break;
  400974:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400976:	693b      	ldr	r3, [r7, #16]
  400978:	68ba      	ldr	r2, [r7, #8]
  40097a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40097c:	693b      	ldr	r3, [r7, #16]
  40097e:	687a      	ldr	r2, [r7, #4]
  400980:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  400982:	693b      	ldr	r3, [r7, #16]
  400984:	683a      	ldr	r2, [r7, #0]
  400986:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400988:	693b      	ldr	r3, [r7, #16]
  40098a:	6a3a      	ldr	r2, [r7, #32]
  40098c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40098e:	7dfa      	ldrb	r2, [r7, #23]
  400990:	4b09      	ldr	r3, [pc, #36]	; (4009b8 <pio_handler_set+0x94>)
  400992:	681b      	ldr	r3, [r3, #0]
  400994:	3301      	adds	r3, #1
  400996:	429a      	cmp	r2, r3
  400998:	d104      	bne.n	4009a4 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40099a:	4b07      	ldr	r3, [pc, #28]	; (4009b8 <pio_handler_set+0x94>)
  40099c:	681b      	ldr	r3, [r3, #0]
  40099e:	3301      	adds	r3, #1
  4009a0:	4a05      	ldr	r2, [pc, #20]	; (4009b8 <pio_handler_set+0x94>)
  4009a2:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009a4:	683a      	ldr	r2, [r7, #0]
  4009a6:	6879      	ldr	r1, [r7, #4]
  4009a8:	68f8      	ldr	r0, [r7, #12]
  4009aa:	4b05      	ldr	r3, [pc, #20]	; (4009c0 <pio_handler_set+0x9c>)
  4009ac:	4798      	blx	r3

	return 0;
  4009ae:	2300      	movs	r3, #0
}
  4009b0:	4618      	mov	r0, r3
  4009b2:	3718      	adds	r7, #24
  4009b4:	46bd      	mov	sp, r7
  4009b6:	bd80      	pop	{r7, pc}
  4009b8:	20008754 	.word	0x20008754
  4009bc:	200086e4 	.word	0x200086e4
  4009c0:	00401f19 	.word	0x00401f19

004009c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009c4:	b580      	push	{r7, lr}
  4009c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009c8:	210b      	movs	r1, #11
  4009ca:	4802      	ldr	r0, [pc, #8]	; (4009d4 <PIOA_Handler+0x10>)
  4009cc:	4b02      	ldr	r3, [pc, #8]	; (4009d8 <PIOA_Handler+0x14>)
  4009ce:	4798      	blx	r3
}
  4009d0:	bf00      	nop
  4009d2:	bd80      	pop	{r7, pc}
  4009d4:	400e0e00 	.word	0x400e0e00
  4009d8:	00400851 	.word	0x00400851

004009dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009dc:	b580      	push	{r7, lr}
  4009de:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009e0:	210c      	movs	r1, #12
  4009e2:	4802      	ldr	r0, [pc, #8]	; (4009ec <PIOB_Handler+0x10>)
  4009e4:	4b02      	ldr	r3, [pc, #8]	; (4009f0 <PIOB_Handler+0x14>)
  4009e6:	4798      	blx	r3
}
  4009e8:	bf00      	nop
  4009ea:	bd80      	pop	{r7, pc}
  4009ec:	400e1000 	.word	0x400e1000
  4009f0:	00400851 	.word	0x00400851

004009f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4009f4:	b480      	push	{r7}
  4009f6:	b089      	sub	sp, #36	; 0x24
  4009f8:	af00      	add	r7, sp, #0
  4009fa:	60f8      	str	r0, [r7, #12]
  4009fc:	60b9      	str	r1, [r7, #8]
  4009fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a00:	68bb      	ldr	r3, [r7, #8]
  400a02:	011a      	lsls	r2, r3, #4
  400a04:	687b      	ldr	r3, [r7, #4]
  400a06:	429a      	cmp	r2, r3
  400a08:	d802      	bhi.n	400a10 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400a0a:	2310      	movs	r3, #16
  400a0c:	61fb      	str	r3, [r7, #28]
  400a0e:	e001      	b.n	400a14 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400a10:	2308      	movs	r3, #8
  400a12:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	00da      	lsls	r2, r3, #3
  400a18:	69fb      	ldr	r3, [r7, #28]
  400a1a:	68b9      	ldr	r1, [r7, #8]
  400a1c:	fb01 f303 	mul.w	r3, r1, r3
  400a20:	085b      	lsrs	r3, r3, #1
  400a22:	441a      	add	r2, r3
  400a24:	69fb      	ldr	r3, [r7, #28]
  400a26:	68b9      	ldr	r1, [r7, #8]
  400a28:	fb01 f303 	mul.w	r3, r1, r3
  400a2c:	fbb2 f3f3 	udiv	r3, r2, r3
  400a30:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400a32:	69bb      	ldr	r3, [r7, #24]
  400a34:	08db      	lsrs	r3, r3, #3
  400a36:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400a38:	69bb      	ldr	r3, [r7, #24]
  400a3a:	f003 0307 	and.w	r3, r3, #7
  400a3e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a40:	697b      	ldr	r3, [r7, #20]
  400a42:	2b00      	cmp	r3, #0
  400a44:	d003      	beq.n	400a4e <usart_set_async_baudrate+0x5a>
  400a46:	697b      	ldr	r3, [r7, #20]
  400a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400a4c:	d301      	bcc.n	400a52 <usart_set_async_baudrate+0x5e>
		return 1;
  400a4e:	2301      	movs	r3, #1
  400a50:	e00f      	b.n	400a72 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400a52:	69fb      	ldr	r3, [r7, #28]
  400a54:	2b08      	cmp	r3, #8
  400a56:	d105      	bne.n	400a64 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400a58:	68fb      	ldr	r3, [r7, #12]
  400a5a:	685b      	ldr	r3, [r3, #4]
  400a5c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400a60:	68fb      	ldr	r3, [r7, #12]
  400a62:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400a64:	693b      	ldr	r3, [r7, #16]
  400a66:	041a      	lsls	r2, r3, #16
  400a68:	697b      	ldr	r3, [r7, #20]
  400a6a:	431a      	orrs	r2, r3
  400a6c:	68fb      	ldr	r3, [r7, #12]
  400a6e:	621a      	str	r2, [r3, #32]

	return 0;
  400a70:	2300      	movs	r3, #0
}
  400a72:	4618      	mov	r0, r3
  400a74:	3724      	adds	r7, #36	; 0x24
  400a76:	46bd      	mov	sp, r7
  400a78:	bc80      	pop	{r7}
  400a7a:	4770      	bx	lr

00400a7c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400a7c:	b580      	push	{r7, lr}
  400a7e:	b082      	sub	sp, #8
  400a80:	af00      	add	r7, sp, #0
  400a82:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400a84:	6878      	ldr	r0, [r7, #4]
  400a86:	4b0f      	ldr	r3, [pc, #60]	; (400ac4 <usart_reset+0x48>)
  400a88:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400a8a:	687b      	ldr	r3, [r7, #4]
  400a8c:	2200      	movs	r2, #0
  400a8e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400a90:	687b      	ldr	r3, [r7, #4]
  400a92:	2200      	movs	r2, #0
  400a94:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400a96:	687b      	ldr	r3, [r7, #4]
  400a98:	2200      	movs	r2, #0
  400a9a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400a9c:	6878      	ldr	r0, [r7, #4]
  400a9e:	4b0a      	ldr	r3, [pc, #40]	; (400ac8 <usart_reset+0x4c>)
  400aa0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400aa2:	6878      	ldr	r0, [r7, #4]
  400aa4:	4b09      	ldr	r3, [pc, #36]	; (400acc <usart_reset+0x50>)
  400aa6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400aa8:	6878      	ldr	r0, [r7, #4]
  400aaa:	4b09      	ldr	r3, [pc, #36]	; (400ad0 <usart_reset+0x54>)
  400aac:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400aae:	6878      	ldr	r0, [r7, #4]
  400ab0:	4b08      	ldr	r3, [pc, #32]	; (400ad4 <usart_reset+0x58>)
  400ab2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400ab4:	6878      	ldr	r0, [r7, #4]
  400ab6:	4b08      	ldr	r3, [pc, #32]	; (400ad8 <usart_reset+0x5c>)
  400ab8:	4798      	blx	r3
#endif
}
  400aba:	bf00      	nop
  400abc:	3708      	adds	r7, #8
  400abe:	46bd      	mov	sp, r7
  400ac0:	bd80      	pop	{r7, pc}
  400ac2:	bf00      	nop
  400ac4:	00400d2d 	.word	0x00400d2d
  400ac8:	00400bb9 	.word	0x00400bb9
  400acc:	00400be9 	.word	0x00400be9
  400ad0:	00400c4b 	.word	0x00400c4b
  400ad4:	00400c7f 	.word	0x00400c7f
  400ad8:	00400c65 	.word	0x00400c65

00400adc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400adc:	b580      	push	{r7, lr}
  400ade:	b084      	sub	sp, #16
  400ae0:	af00      	add	r7, sp, #0
  400ae2:	60f8      	str	r0, [r7, #12]
  400ae4:	60b9      	str	r1, [r7, #8]
  400ae6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400ae8:	68f8      	ldr	r0, [r7, #12]
  400aea:	4b1a      	ldr	r3, [pc, #104]	; (400b54 <usart_init_rs232+0x78>)
  400aec:	4798      	blx	r3

	ul_reg_val = 0;
  400aee:	4b1a      	ldr	r3, [pc, #104]	; (400b58 <usart_init_rs232+0x7c>)
  400af0:	2200      	movs	r2, #0
  400af2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400af4:	68bb      	ldr	r3, [r7, #8]
  400af6:	2b00      	cmp	r3, #0
  400af8:	d009      	beq.n	400b0e <usart_init_rs232+0x32>
  400afa:	68bb      	ldr	r3, [r7, #8]
  400afc:	681b      	ldr	r3, [r3, #0]
  400afe:	687a      	ldr	r2, [r7, #4]
  400b00:	4619      	mov	r1, r3
  400b02:	68f8      	ldr	r0, [r7, #12]
  400b04:	4b15      	ldr	r3, [pc, #84]	; (400b5c <usart_init_rs232+0x80>)
  400b06:	4798      	blx	r3
  400b08:	4603      	mov	r3, r0
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	d001      	beq.n	400b12 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400b0e:	2301      	movs	r3, #1
  400b10:	e01b      	b.n	400b4a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b12:	68bb      	ldr	r3, [r7, #8]
  400b14:	685a      	ldr	r2, [r3, #4]
  400b16:	68bb      	ldr	r3, [r7, #8]
  400b18:	689b      	ldr	r3, [r3, #8]
  400b1a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b1c:	68bb      	ldr	r3, [r7, #8]
  400b1e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b20:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b22:	68bb      	ldr	r3, [r7, #8]
  400b24:	68db      	ldr	r3, [r3, #12]
  400b26:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b28:	4b0b      	ldr	r3, [pc, #44]	; (400b58 <usart_init_rs232+0x7c>)
  400b2a:	681b      	ldr	r3, [r3, #0]
  400b2c:	4313      	orrs	r3, r2
  400b2e:	4a0a      	ldr	r2, [pc, #40]	; (400b58 <usart_init_rs232+0x7c>)
  400b30:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400b32:	4b09      	ldr	r3, [pc, #36]	; (400b58 <usart_init_rs232+0x7c>)
  400b34:	681b      	ldr	r3, [r3, #0]
  400b36:	4a08      	ldr	r2, [pc, #32]	; (400b58 <usart_init_rs232+0x7c>)
  400b38:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400b3a:	68fb      	ldr	r3, [r7, #12]
  400b3c:	685a      	ldr	r2, [r3, #4]
  400b3e:	4b06      	ldr	r3, [pc, #24]	; (400b58 <usart_init_rs232+0x7c>)
  400b40:	681b      	ldr	r3, [r3, #0]
  400b42:	431a      	orrs	r2, r3
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	605a      	str	r2, [r3, #4]

	return 0;
  400b48:	2300      	movs	r3, #0
}
  400b4a:	4618      	mov	r0, r3
  400b4c:	3710      	adds	r7, #16
  400b4e:	46bd      	mov	sp, r7
  400b50:	bd80      	pop	{r7, pc}
  400b52:	bf00      	nop
  400b54:	00400a7d 	.word	0x00400a7d
  400b58:	2000875c 	.word	0x2000875c
  400b5c:	004009f5 	.word	0x004009f5

00400b60 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400b60:	b580      	push	{r7, lr}
  400b62:	b084      	sub	sp, #16
  400b64:	af00      	add	r7, sp, #0
  400b66:	60f8      	str	r0, [r7, #12]
  400b68:	60b9      	str	r1, [r7, #8]
  400b6a:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400b6c:	687a      	ldr	r2, [r7, #4]
  400b6e:	68b9      	ldr	r1, [r7, #8]
  400b70:	68f8      	ldr	r0, [r7, #12]
  400b72:	4b0a      	ldr	r3, [pc, #40]	; (400b9c <usart_init_hw_handshaking+0x3c>)
  400b74:	4798      	blx	r3
  400b76:	4603      	mov	r3, r0
  400b78:	2b00      	cmp	r3, #0
  400b7a:	d001      	beq.n	400b80 <usart_init_hw_handshaking+0x20>
		return 1;
  400b7c:	2301      	movs	r3, #1
  400b7e:	e008      	b.n	400b92 <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400b80:	68fb      	ldr	r3, [r7, #12]
  400b82:	685b      	ldr	r3, [r3, #4]
  400b84:	f023 030f 	bic.w	r3, r3, #15
  400b88:	f043 0202 	orr.w	r2, r3, #2
  400b8c:	68fb      	ldr	r3, [r7, #12]
  400b8e:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400b90:	2300      	movs	r3, #0
}
  400b92:	4618      	mov	r0, r3
  400b94:	3710      	adds	r7, #16
  400b96:	46bd      	mov	sp, r7
  400b98:	bd80      	pop	{r7, pc}
  400b9a:	bf00      	nop
  400b9c:	00400add 	.word	0x00400add

00400ba0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400ba0:	b480      	push	{r7}
  400ba2:	b083      	sub	sp, #12
  400ba4:	af00      	add	r7, sp, #0
  400ba6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	2240      	movs	r2, #64	; 0x40
  400bac:	601a      	str	r2, [r3, #0]
}
  400bae:	bf00      	nop
  400bb0:	370c      	adds	r7, #12
  400bb2:	46bd      	mov	sp, r7
  400bb4:	bc80      	pop	{r7}
  400bb6:	4770      	bx	lr

00400bb8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400bb8:	b480      	push	{r7}
  400bba:	b083      	sub	sp, #12
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400bc0:	687b      	ldr	r3, [r7, #4]
  400bc2:	2288      	movs	r2, #136	; 0x88
  400bc4:	601a      	str	r2, [r3, #0]
}
  400bc6:	bf00      	nop
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	bc80      	pop	{r7}
  400bce:	4770      	bx	lr

00400bd0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400bd0:	b480      	push	{r7}
  400bd2:	b083      	sub	sp, #12
  400bd4:	af00      	add	r7, sp, #0
  400bd6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400bd8:	687b      	ldr	r3, [r7, #4]
  400bda:	2210      	movs	r2, #16
  400bdc:	601a      	str	r2, [r3, #0]
}
  400bde:	bf00      	nop
  400be0:	370c      	adds	r7, #12
  400be2:	46bd      	mov	sp, r7
  400be4:	bc80      	pop	{r7}
  400be6:	4770      	bx	lr

00400be8 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400be8:	b480      	push	{r7}
  400bea:	b083      	sub	sp, #12
  400bec:	af00      	add	r7, sp, #0
  400bee:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400bf0:	687b      	ldr	r3, [r7, #4]
  400bf2:	2224      	movs	r2, #36	; 0x24
  400bf4:	601a      	str	r2, [r3, #0]
}
  400bf6:	bf00      	nop
  400bf8:	370c      	adds	r7, #12
  400bfa:	46bd      	mov	sp, r7
  400bfc:	bc80      	pop	{r7}
  400bfe:	4770      	bx	lr

00400c00 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c00:	b480      	push	{r7}
  400c02:	b083      	sub	sp, #12
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
  400c08:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	683a      	ldr	r2, [r7, #0]
  400c0e:	609a      	str	r2, [r3, #8]
}
  400c10:	bf00      	nop
  400c12:	370c      	adds	r7, #12
  400c14:	46bd      	mov	sp, r7
  400c16:	bc80      	pop	{r7}
  400c18:	4770      	bx	lr

00400c1a <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400c1a:	b480      	push	{r7}
  400c1c:	b083      	sub	sp, #12
  400c1e:	af00      	add	r7, sp, #0
  400c20:	6078      	str	r0, [r7, #4]
  400c22:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400c24:	687b      	ldr	r3, [r7, #4]
  400c26:	683a      	ldr	r2, [r7, #0]
  400c28:	60da      	str	r2, [r3, #12]
}
  400c2a:	bf00      	nop
  400c2c:	370c      	adds	r7, #12
  400c2e:	46bd      	mov	sp, r7
  400c30:	bc80      	pop	{r7}
  400c32:	4770      	bx	lr

00400c34 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400c34:	b480      	push	{r7}
  400c36:	b083      	sub	sp, #12
  400c38:	af00      	add	r7, sp, #0
  400c3a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	695b      	ldr	r3, [r3, #20]
}
  400c40:	4618      	mov	r0, r3
  400c42:	370c      	adds	r7, #12
  400c44:	46bd      	mov	sp, r7
  400c46:	bc80      	pop	{r7}
  400c48:	4770      	bx	lr

00400c4a <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400c4a:	b480      	push	{r7}
  400c4c:	b083      	sub	sp, #12
  400c4e:	af00      	add	r7, sp, #0
  400c50:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400c52:	687b      	ldr	r3, [r7, #4]
  400c54:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c58:	601a      	str	r2, [r3, #0]
}
  400c5a:	bf00      	nop
  400c5c:	370c      	adds	r7, #12
  400c5e:	46bd      	mov	sp, r7
  400c60:	bc80      	pop	{r7}
  400c62:	4770      	bx	lr

00400c64 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400c64:	b480      	push	{r7}
  400c66:	b083      	sub	sp, #12
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400c72:	601a      	str	r2, [r3, #0]
}
  400c74:	bf00      	nop
  400c76:	370c      	adds	r7, #12
  400c78:	46bd      	mov	sp, r7
  400c7a:	bc80      	pop	{r7}
  400c7c:	4770      	bx	lr

00400c7e <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400c7e:	b480      	push	{r7}
  400c80:	b083      	sub	sp, #12
  400c82:	af00      	add	r7, sp, #0
  400c84:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400c8c:	601a      	str	r2, [r3, #0]
}
  400c8e:	bf00      	nop
  400c90:	370c      	adds	r7, #12
  400c92:	46bd      	mov	sp, r7
  400c94:	bc80      	pop	{r7}
  400c96:	4770      	bx	lr

00400c98 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400c98:	b480      	push	{r7}
  400c9a:	b083      	sub	sp, #12
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	6078      	str	r0, [r7, #4]
  400ca0:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400ca2:	bf00      	nop
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	695b      	ldr	r3, [r3, #20]
  400ca8:	f003 0302 	and.w	r3, r3, #2
  400cac:	2b00      	cmp	r3, #0
  400cae:	d0f9      	beq.n	400ca4 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400cb0:	683b      	ldr	r3, [r7, #0]
  400cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400cb6:	687b      	ldr	r3, [r7, #4]
  400cb8:	61da      	str	r2, [r3, #28]

	return 0;
  400cba:	2300      	movs	r3, #0
}
  400cbc:	4618      	mov	r0, r3
  400cbe:	370c      	adds	r7, #12
  400cc0:	46bd      	mov	sp, r7
  400cc2:	bc80      	pop	{r7}
  400cc4:	4770      	bx	lr
	...

00400cc8 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400cc8:	b580      	push	{r7, lr}
  400cca:	b082      	sub	sp, #8
  400ccc:	af00      	add	r7, sp, #0
  400cce:	6078      	str	r0, [r7, #4]
  400cd0:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  400cd2:	e007      	b.n	400ce4 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  400cd4:	683b      	ldr	r3, [r7, #0]
  400cd6:	1c5a      	adds	r2, r3, #1
  400cd8:	603a      	str	r2, [r7, #0]
  400cda:	781b      	ldrb	r3, [r3, #0]
  400cdc:	4619      	mov	r1, r3
  400cde:	6878      	ldr	r0, [r7, #4]
  400ce0:	4b04      	ldr	r3, [pc, #16]	; (400cf4 <usart_write_line+0x2c>)
  400ce2:	4798      	blx	r3
	while (*string != '\0') {
  400ce4:	683b      	ldr	r3, [r7, #0]
  400ce6:	781b      	ldrb	r3, [r3, #0]
  400ce8:	2b00      	cmp	r3, #0
  400cea:	d1f3      	bne.n	400cd4 <usart_write_line+0xc>
	}
}
  400cec:	bf00      	nop
  400cee:	3708      	adds	r7, #8
  400cf0:	46bd      	mov	sp, r7
  400cf2:	bd80      	pop	{r7, pc}
  400cf4:	00400c99 	.word	0x00400c99

00400cf8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400cf8:	b480      	push	{r7}
  400cfa:	b083      	sub	sp, #12
  400cfc:	af00      	add	r7, sp, #0
  400cfe:	6078      	str	r0, [r7, #4]
  400d00:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d02:	687b      	ldr	r3, [r7, #4]
  400d04:	695b      	ldr	r3, [r3, #20]
  400d06:	f003 0301 	and.w	r3, r3, #1
  400d0a:	2b00      	cmp	r3, #0
  400d0c:	d101      	bne.n	400d12 <usart_read+0x1a>
		return 1;
  400d0e:	2301      	movs	r3, #1
  400d10:	e006      	b.n	400d20 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d12:	687b      	ldr	r3, [r7, #4]
  400d14:	699b      	ldr	r3, [r3, #24]
  400d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400d1a:	683b      	ldr	r3, [r7, #0]
  400d1c:	601a      	str	r2, [r3, #0]

	return 0;
  400d1e:	2300      	movs	r3, #0
}
  400d20:	4618      	mov	r0, r3
  400d22:	370c      	adds	r7, #12
  400d24:	46bd      	mov	sp, r7
  400d26:	bc80      	pop	{r7}
  400d28:	4770      	bx	lr
	...

00400d2c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400d2c:	b480      	push	{r7}
  400d2e:	b083      	sub	sp, #12
  400d30:	af00      	add	r7, sp, #0
  400d32:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d34:	687b      	ldr	r3, [r7, #4]
  400d36:	4a04      	ldr	r2, [pc, #16]	; (400d48 <usart_disable_writeprotect+0x1c>)
  400d38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400d3c:	bf00      	nop
  400d3e:	370c      	adds	r7, #12
  400d40:	46bd      	mov	sp, r7
  400d42:	bc80      	pop	{r7}
  400d44:	4770      	bx	lr
  400d46:	bf00      	nop
  400d48:	55534100 	.word	0x55534100

00400d4c <NVIC_EnableIRQ>:
{
  400d4c:	b480      	push	{r7}
  400d4e:	b083      	sub	sp, #12
  400d50:	af00      	add	r7, sp, #0
  400d52:	4603      	mov	r3, r0
  400d54:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400d56:	4908      	ldr	r1, [pc, #32]	; (400d78 <NVIC_EnableIRQ+0x2c>)
  400d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400d5c:	095b      	lsrs	r3, r3, #5
  400d5e:	79fa      	ldrb	r2, [r7, #7]
  400d60:	f002 021f 	and.w	r2, r2, #31
  400d64:	2001      	movs	r0, #1
  400d66:	fa00 f202 	lsl.w	r2, r0, r2
  400d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400d6e:	bf00      	nop
  400d70:	370c      	adds	r7, #12
  400d72:	46bd      	mov	sp, r7
  400d74:	bc80      	pop	{r7}
  400d76:	4770      	bx	lr
  400d78:	e000e100 	.word	0xe000e100

00400d7c <osc_get_rate>:
{
  400d7c:	b480      	push	{r7}
  400d7e:	b083      	sub	sp, #12
  400d80:	af00      	add	r7, sp, #0
  400d82:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400d84:	687b      	ldr	r3, [r7, #4]
  400d86:	2b07      	cmp	r3, #7
  400d88:	d825      	bhi.n	400dd6 <osc_get_rate+0x5a>
  400d8a:	a201      	add	r2, pc, #4	; (adr r2, 400d90 <osc_get_rate+0x14>)
  400d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400d90:	00400db1 	.word	0x00400db1
  400d94:	00400db7 	.word	0x00400db7
  400d98:	00400dbd 	.word	0x00400dbd
  400d9c:	00400dc3 	.word	0x00400dc3
  400da0:	00400dc7 	.word	0x00400dc7
  400da4:	00400dcb 	.word	0x00400dcb
  400da8:	00400dcf 	.word	0x00400dcf
  400dac:	00400dd3 	.word	0x00400dd3
		return OSC_SLCK_32K_RC_HZ;
  400db0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400db4:	e010      	b.n	400dd8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dba:	e00d      	b.n	400dd8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dc0:	e00a      	b.n	400dd8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400dc2:	4b08      	ldr	r3, [pc, #32]	; (400de4 <osc_get_rate+0x68>)
  400dc4:	e008      	b.n	400dd8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400dc6:	4b08      	ldr	r3, [pc, #32]	; (400de8 <osc_get_rate+0x6c>)
  400dc8:	e006      	b.n	400dd8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400dca:	4b08      	ldr	r3, [pc, #32]	; (400dec <osc_get_rate+0x70>)
  400dcc:	e004      	b.n	400dd8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400dce:	4b07      	ldr	r3, [pc, #28]	; (400dec <osc_get_rate+0x70>)
  400dd0:	e002      	b.n	400dd8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400dd2:	4b06      	ldr	r3, [pc, #24]	; (400dec <osc_get_rate+0x70>)
  400dd4:	e000      	b.n	400dd8 <osc_get_rate+0x5c>
	return 0;
  400dd6:	2300      	movs	r3, #0
}
  400dd8:	4618      	mov	r0, r3
  400dda:	370c      	adds	r7, #12
  400ddc:	46bd      	mov	sp, r7
  400dde:	bc80      	pop	{r7}
  400de0:	4770      	bx	lr
  400de2:	bf00      	nop
  400de4:	003d0900 	.word	0x003d0900
  400de8:	007a1200 	.word	0x007a1200
  400dec:	00b71b00 	.word	0x00b71b00

00400df0 <sysclk_get_main_hz>:
{
  400df0:	b580      	push	{r7, lr}
  400df2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400df4:	2006      	movs	r0, #6
  400df6:	4b04      	ldr	r3, [pc, #16]	; (400e08 <sysclk_get_main_hz+0x18>)
  400df8:	4798      	blx	r3
  400dfa:	4602      	mov	r2, r0
  400dfc:	4613      	mov	r3, r2
  400dfe:	009b      	lsls	r3, r3, #2
  400e00:	4413      	add	r3, r2
  400e02:	009b      	lsls	r3, r3, #2
}
  400e04:	4618      	mov	r0, r3
  400e06:	bd80      	pop	{r7, pc}
  400e08:	00400d7d 	.word	0x00400d7d

00400e0c <sysclk_get_cpu_hz>:
{
  400e0c:	b580      	push	{r7, lr}
  400e0e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400e10:	4b02      	ldr	r3, [pc, #8]	; (400e1c <sysclk_get_cpu_hz+0x10>)
  400e12:	4798      	blx	r3
  400e14:	4603      	mov	r3, r0
  400e16:	085b      	lsrs	r3, r3, #1
}
  400e18:	4618      	mov	r0, r3
  400e1a:	bd80      	pop	{r7, pc}
  400e1c:	00400df1 	.word	0x00400df1

00400e20 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400e20:	b580      	push	{r7, lr}
  400e22:	b082      	sub	sp, #8
  400e24:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400e26:	2100      	movs	r1, #0
  400e28:	4809      	ldr	r0, [pc, #36]	; (400e50 <TC0_Handler+0x30>)
  400e2a:	4b0a      	ldr	r3, [pc, #40]	; (400e54 <TC0_Handler+0x34>)
  400e2c:	4798      	blx	r3
  400e2e:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	f003 0310 	and.w	r3, r3, #16
  400e36:	2b00      	cmp	r3, #0
  400e38:	d006      	beq.n	400e48 <TC0_Handler+0x28>
		counts++;
  400e3a:	4b07      	ldr	r3, [pc, #28]	; (400e58 <TC0_Handler+0x38>)
  400e3c:	781b      	ldrb	r3, [r3, #0]
  400e3e:	b2db      	uxtb	r3, r3
  400e40:	3301      	adds	r3, #1
  400e42:	b2da      	uxtb	r2, r3
  400e44:	4b04      	ldr	r3, [pc, #16]	; (400e58 <TC0_Handler+0x38>)
  400e46:	701a      	strb	r2, [r3, #0]
	}
}
  400e48:	bf00      	nop
  400e4a:	3708      	adds	r7, #8
  400e4c:	46bd      	mov	sp, r7
  400e4e:	bd80      	pop	{r7, pc}
  400e50:	40010000 	.word	0x40010000
  400e54:	00400487 	.word	0x00400487
  400e58:	200089a8 	.word	0x200089a8

00400e5c <configure_tc>:

void configure_tc(void)
{
  400e5c:	b590      	push	{r4, r7, lr}
  400e5e:	b087      	sub	sp, #28
  400e60:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400e62:	4b16      	ldr	r3, [pc, #88]	; (400ebc <configure_tc+0x60>)
  400e64:	4798      	blx	r3
  400e66:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400e68:	2017      	movs	r0, #23
  400e6a:	4b15      	ldr	r3, [pc, #84]	; (400ec0 <configure_tc+0x64>)
  400e6c:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400e6e:	1d39      	adds	r1, r7, #4
  400e70:	f107 0208 	add.w	r2, r7, #8
  400e74:	68fb      	ldr	r3, [r7, #12]
  400e76:	9300      	str	r3, [sp, #0]
  400e78:	460b      	mov	r3, r1
  400e7a:	68f9      	ldr	r1, [r7, #12]
  400e7c:	2001      	movs	r0, #1
  400e7e:	4c11      	ldr	r4, [pc, #68]	; (400ec4 <configure_tc+0x68>)
  400e80:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400e82:	687b      	ldr	r3, [r7, #4]
  400e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400e88:	461a      	mov	r2, r3
  400e8a:	2100      	movs	r1, #0
  400e8c:	480e      	ldr	r0, [pc, #56]	; (400ec8 <configure_tc+0x6c>)
  400e8e:	4b0f      	ldr	r3, [pc, #60]	; (400ecc <configure_tc+0x70>)
  400e90:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400e92:	68bb      	ldr	r3, [r7, #8]
  400e94:	68fa      	ldr	r2, [r7, #12]
  400e96:	fbb2 f3f3 	udiv	r3, r2, r3
  400e9a:	461a      	mov	r2, r3
  400e9c:	2100      	movs	r1, #0
  400e9e:	480a      	ldr	r0, [pc, #40]	; (400ec8 <configure_tc+0x6c>)
  400ea0:	4b0b      	ldr	r3, [pc, #44]	; (400ed0 <configure_tc+0x74>)
  400ea2:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400ea4:	2017      	movs	r0, #23
  400ea6:	4b0b      	ldr	r3, [pc, #44]	; (400ed4 <configure_tc+0x78>)
  400ea8:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400eaa:	2210      	movs	r2, #16
  400eac:	2100      	movs	r1, #0
  400eae:	4806      	ldr	r0, [pc, #24]	; (400ec8 <configure_tc+0x6c>)
  400eb0:	4b09      	ldr	r3, [pc, #36]	; (400ed8 <configure_tc+0x7c>)
  400eb2:	4798      	blx	r3
  400eb4:	bf00      	nop
  400eb6:	3714      	adds	r7, #20
  400eb8:	46bd      	mov	sp, r7
  400eba:	bd90      	pop	{r4, r7, pc}
  400ebc:	00400e0d 	.word	0x00400e0d
  400ec0:	00402405 	.word	0x00402405
  400ec4:	004004a9 	.word	0x004004a9
  400ec8:	40010000 	.word	0x40010000
  400ecc:	004003e5 	.word	0x004003e5
  400ed0:	0040043d 	.word	0x0040043d
  400ed4:	00400d4d 	.word	0x00400d4d
  400ed8:	00400461 	.word	0x00400461

00400edc <NVIC_EnableIRQ>:
{
  400edc:	b480      	push	{r7}
  400ede:	b083      	sub	sp, #12
  400ee0:	af00      	add	r7, sp, #0
  400ee2:	4603      	mov	r3, r0
  400ee4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ee6:	4908      	ldr	r1, [pc, #32]	; (400f08 <NVIC_EnableIRQ+0x2c>)
  400ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400eec:	095b      	lsrs	r3, r3, #5
  400eee:	79fa      	ldrb	r2, [r7, #7]
  400ef0:	f002 021f 	and.w	r2, r2, #31
  400ef4:	2001      	movs	r0, #1
  400ef6:	fa00 f202 	lsl.w	r2, r0, r2
  400efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400efe:	bf00      	nop
  400f00:	370c      	adds	r7, #12
  400f02:	46bd      	mov	sp, r7
  400f04:	bc80      	pop	{r7}
  400f06:	4770      	bx	lr
  400f08:	e000e100 	.word	0xe000e100

00400f0c <osc_get_rate>:
{
  400f0c:	b480      	push	{r7}
  400f0e:	b083      	sub	sp, #12
  400f10:	af00      	add	r7, sp, #0
  400f12:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400f14:	687b      	ldr	r3, [r7, #4]
  400f16:	2b07      	cmp	r3, #7
  400f18:	d825      	bhi.n	400f66 <osc_get_rate+0x5a>
  400f1a:	a201      	add	r2, pc, #4	; (adr r2, 400f20 <osc_get_rate+0x14>)
  400f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400f20:	00400f41 	.word	0x00400f41
  400f24:	00400f47 	.word	0x00400f47
  400f28:	00400f4d 	.word	0x00400f4d
  400f2c:	00400f53 	.word	0x00400f53
  400f30:	00400f57 	.word	0x00400f57
  400f34:	00400f5b 	.word	0x00400f5b
  400f38:	00400f5f 	.word	0x00400f5f
  400f3c:	00400f63 	.word	0x00400f63
		return OSC_SLCK_32K_RC_HZ;
  400f40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400f44:	e010      	b.n	400f68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f4a:	e00d      	b.n	400f68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400f50:	e00a      	b.n	400f68 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400f52:	4b08      	ldr	r3, [pc, #32]	; (400f74 <osc_get_rate+0x68>)
  400f54:	e008      	b.n	400f68 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400f56:	4b08      	ldr	r3, [pc, #32]	; (400f78 <osc_get_rate+0x6c>)
  400f58:	e006      	b.n	400f68 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400f5a:	4b08      	ldr	r3, [pc, #32]	; (400f7c <osc_get_rate+0x70>)
  400f5c:	e004      	b.n	400f68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400f5e:	4b07      	ldr	r3, [pc, #28]	; (400f7c <osc_get_rate+0x70>)
  400f60:	e002      	b.n	400f68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400f62:	4b06      	ldr	r3, [pc, #24]	; (400f7c <osc_get_rate+0x70>)
  400f64:	e000      	b.n	400f68 <osc_get_rate+0x5c>
	return 0;
  400f66:	2300      	movs	r3, #0
}
  400f68:	4618      	mov	r0, r3
  400f6a:	370c      	adds	r7, #12
  400f6c:	46bd      	mov	sp, r7
  400f6e:	bc80      	pop	{r7}
  400f70:	4770      	bx	lr
  400f72:	bf00      	nop
  400f74:	003d0900 	.word	0x003d0900
  400f78:	007a1200 	.word	0x007a1200
  400f7c:	00b71b00 	.word	0x00b71b00

00400f80 <sysclk_get_main_hz>:
{
  400f80:	b580      	push	{r7, lr}
  400f82:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400f84:	2006      	movs	r0, #6
  400f86:	4b04      	ldr	r3, [pc, #16]	; (400f98 <sysclk_get_main_hz+0x18>)
  400f88:	4798      	blx	r3
  400f8a:	4602      	mov	r2, r0
  400f8c:	4613      	mov	r3, r2
  400f8e:	009b      	lsls	r3, r3, #2
  400f90:	4413      	add	r3, r2
  400f92:	009b      	lsls	r3, r3, #2
}
  400f94:	4618      	mov	r0, r3
  400f96:	bd80      	pop	{r7, pc}
  400f98:	00400f0d 	.word	0x00400f0d

00400f9c <sysclk_get_cpu_hz>:
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400fa0:	4b02      	ldr	r3, [pc, #8]	; (400fac <sysclk_get_cpu_hz+0x10>)
  400fa2:	4798      	blx	r3
  400fa4:	4603      	mov	r3, r0
  400fa6:	085b      	lsrs	r3, r3, #1
}
  400fa8:	4618      	mov	r0, r3
  400faa:	bd80      	pop	{r7, pc}
  400fac:	00400f81 	.word	0x00400f81

00400fb0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400fb0:	b580      	push	{r7, lr}
  400fb2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fb4:	4b02      	ldr	r3, [pc, #8]	; (400fc0 <sysclk_get_peripheral_hz+0x10>)
  400fb6:	4798      	blx	r3
  400fb8:	4603      	mov	r3, r0
  400fba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fbc:	4618      	mov	r0, r3
  400fbe:	bd80      	pop	{r7, pc}
  400fc0:	00400f81 	.word	0x00400f81

00400fc4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400fc4:	b580      	push	{r7, lr}
  400fc6:	b082      	sub	sp, #8
  400fc8:	af00      	add	r7, sp, #0
  400fca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400fcc:	6878      	ldr	r0, [r7, #4]
  400fce:	4b03      	ldr	r3, [pc, #12]	; (400fdc <sysclk_enable_peripheral_clock+0x18>)
  400fd0:	4798      	blx	r3
}
  400fd2:	bf00      	nop
  400fd4:	3708      	adds	r7, #8
  400fd6:	46bd      	mov	sp, r7
  400fd8:	bd80      	pop	{r7, pc}
  400fda:	bf00      	nop
  400fdc:	00402405 	.word	0x00402405

00400fe0 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400fe0:	b480      	push	{r7}
  400fe2:	b08b      	sub	sp, #44	; 0x2c
  400fe4:	af00      	add	r7, sp, #0
  400fe6:	6078      	str	r0, [r7, #4]
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	627b      	str	r3, [r7, #36]	; 0x24
  400fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fee:	623b      	str	r3, [r7, #32]
  400ff0:	6a3b      	ldr	r3, [r7, #32]
  400ff2:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400ff4:	69fb      	ldr	r3, [r7, #28]
  400ff6:	095b      	lsrs	r3, r3, #5
  400ff8:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400ffa:	69bb      	ldr	r3, [r7, #24]
  400ffc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401000:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401004:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  401006:	617b      	str	r3, [r7, #20]
  401008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40100a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40100c:	693b      	ldr	r3, [r7, #16]
  40100e:	f003 031f 	and.w	r3, r3, #31
  401012:	2201      	movs	r2, #1
  401014:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401018:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40101a:	697b      	ldr	r3, [r7, #20]
  40101c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  40101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401020:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401022:	68bb      	ldr	r3, [r7, #8]
  401024:	f003 031f 	and.w	r3, r3, #31
  401028:	2101      	movs	r1, #1
  40102a:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40102e:	4013      	ands	r3, r2
  401030:	2b00      	cmp	r3, #0
  401032:	d003      	beq.n	40103c <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  401034:	697b      	ldr	r3, [r7, #20]
  401036:	68fa      	ldr	r2, [r7, #12]
  401038:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  40103a:	e002      	b.n	401042 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  40103c:	697b      	ldr	r3, [r7, #20]
  40103e:	68fa      	ldr	r2, [r7, #12]
  401040:	631a      	str	r2, [r3, #48]	; 0x30
  401042:	bf00      	nop
  401044:	372c      	adds	r7, #44	; 0x2c
  401046:	46bd      	mov	sp, r7
  401048:	bc80      	pop	{r7}
  40104a:	4770      	bx	lr

0040104c <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  40104c:	b580      	push	{r7, lr}
  40104e:	b082      	sub	sp, #8
  401050:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  401052:	2300      	movs	r3, #0
  401054:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  401056:	2101      	movs	r1, #1
  401058:	4815      	ldr	r0, [pc, #84]	; (4010b0 <USART0_Handler+0x64>)
  40105a:	4b16      	ldr	r3, [pc, #88]	; (4010b4 <USART0_Handler+0x68>)
  40105c:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  40105e:	4814      	ldr	r0, [pc, #80]	; (4010b0 <USART0_Handler+0x64>)
  401060:	4b15      	ldr	r3, [pc, #84]	; (4010b8 <USART0_Handler+0x6c>)
  401062:	4798      	blx	r3
  401064:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401066:	4915      	ldr	r1, [pc, #84]	; (4010bc <USART0_Handler+0x70>)
  401068:	4811      	ldr	r0, [pc, #68]	; (4010b0 <USART0_Handler+0x64>)
  40106a:	4b15      	ldr	r3, [pc, #84]	; (4010c0 <USART0_Handler+0x74>)
  40106c:	4798      	blx	r3
  40106e:	4603      	mov	r3, r0
  401070:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  401072:	683b      	ldr	r3, [r7, #0]
  401074:	f003 0301 	and.w	r3, r3, #1
  401078:	2b00      	cmp	r3, #0
  40107a:	d011      	beq.n	4010a0 <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  40107c:	490f      	ldr	r1, [pc, #60]	; (4010bc <USART0_Handler+0x70>)
  40107e:	480c      	ldr	r0, [pc, #48]	; (4010b0 <USART0_Handler+0x64>)
  401080:	4b0f      	ldr	r3, [pc, #60]	; (4010c0 <USART0_Handler+0x74>)
  401082:	4798      	blx	r3
  401084:	4603      	mov	r3, r0
  401086:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  401088:	4b0e      	ldr	r3, [pc, #56]	; (4010c4 <USART0_Handler+0x78>)
  40108a:	681b      	ldr	r3, [r3, #0]
  40108c:	4a0b      	ldr	r2, [pc, #44]	; (4010bc <USART0_Handler+0x70>)
  40108e:	6812      	ldr	r2, [r2, #0]
  401090:	b2d1      	uxtb	r1, r2
  401092:	4a0d      	ldr	r2, [pc, #52]	; (4010c8 <USART0_Handler+0x7c>)
  401094:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  401096:	4b0b      	ldr	r3, [pc, #44]	; (4010c4 <USART0_Handler+0x78>)
  401098:	681b      	ldr	r3, [r3, #0]
  40109a:	3301      	adds	r3, #1
  40109c:	4a09      	ldr	r2, [pc, #36]	; (4010c4 <USART0_Handler+0x78>)
  40109e:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4010a0:	2101      	movs	r1, #1
  4010a2:	4803      	ldr	r0, [pc, #12]	; (4010b0 <USART0_Handler+0x64>)
  4010a4:	4b09      	ldr	r3, [pc, #36]	; (4010cc <USART0_Handler+0x80>)
  4010a6:	4798      	blx	r3
}
  4010a8:	bf00      	nop
  4010aa:	3708      	adds	r7, #8
  4010ac:	46bd      	mov	sp, r7
  4010ae:	bd80      	pop	{r7, pc}
  4010b0:	40024000 	.word	0x40024000
  4010b4:	00400c1b 	.word	0x00400c1b
  4010b8:	00400c35 	.word	0x00400c35
  4010bc:	20008964 	.word	0x20008964
  4010c0:	00400cf9 	.word	0x00400cf9
  4010c4:	20008954 	.word	0x20008954
  4010c8:	20008760 	.word	0x20008760
  4010cc:	00400c01 	.word	0x00400c01

004010d0 <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart(void)
{
  4010d0:	b5b0      	push	{r4, r5, r7, lr}
  4010d2:	b086      	sub	sp, #24
  4010d4:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  4010d6:	4b15      	ldr	r3, [pc, #84]	; (40112c <configure_usart+0x5c>)
  4010d8:	463c      	mov	r4, r7
  4010da:	461d      	mov	r5, r3
  4010dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4010de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4010e0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4010e4:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  4010e8:	4b11      	ldr	r3, [pc, #68]	; (401130 <configure_usart+0x60>)
  4010ea:	4798      	blx	r3
  4010ec:	4602      	mov	r2, r0
  4010ee:	4b11      	ldr	r3, [pc, #68]	; (401134 <configure_usart+0x64>)
  4010f0:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  4010f2:	200e      	movs	r0, #14
  4010f4:	4b10      	ldr	r3, [pc, #64]	; (401138 <configure_usart+0x68>)
  4010f6:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  4010f8:	4b0e      	ldr	r3, [pc, #56]	; (401134 <configure_usart+0x64>)
  4010fa:	681a      	ldr	r2, [r3, #0]
  4010fc:	463b      	mov	r3, r7
  4010fe:	4619      	mov	r1, r3
  401100:	480e      	ldr	r0, [pc, #56]	; (40113c <configure_usart+0x6c>)
  401102:	4b0f      	ldr	r3, [pc, #60]	; (401140 <configure_usart+0x70>)
  401104:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401106:	f04f 31ff 	mov.w	r1, #4294967295
  40110a:	480c      	ldr	r0, [pc, #48]	; (40113c <configure_usart+0x6c>)
  40110c:	4b0d      	ldr	r3, [pc, #52]	; (401144 <configure_usart+0x74>)
  40110e:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401110:	480a      	ldr	r0, [pc, #40]	; (40113c <configure_usart+0x6c>)
  401112:	4b0d      	ldr	r3, [pc, #52]	; (401148 <configure_usart+0x78>)
  401114:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401116:	4809      	ldr	r0, [pc, #36]	; (40113c <configure_usart+0x6c>)
  401118:	4b0c      	ldr	r3, [pc, #48]	; (40114c <configure_usart+0x7c>)
  40111a:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  40111c:	200e      	movs	r0, #14
  40111e:	4b0c      	ldr	r3, [pc, #48]	; (401150 <configure_usart+0x80>)
  401120:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  401122:	bf00      	nop
  401124:	3718      	adds	r7, #24
  401126:	46bd      	mov	sp, r7
  401128:	bdb0      	pop	{r4, r5, r7, pc}
  40112a:	bf00      	nop
  40112c:	00407aac 	.word	0x00407aac
  401130:	00400fb1 	.word	0x00400fb1
  401134:	2000896c 	.word	0x2000896c
  401138:	00400fc5 	.word	0x00400fc5
  40113c:	40024000 	.word	0x40024000
  401140:	00400b61 	.word	0x00400b61
  401144:	00400c1b 	.word	0x00400c1b
  401148:	00400ba1 	.word	0x00400ba1
  40114c:	00400bd1 	.word	0x00400bd1
  401150:	00400edd 	.word	0x00400edd

00401154 <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  401154:	b5f0      	push	{r4, r5, r6, r7, lr}
  401156:	b083      	sub	sp, #12
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
  40115c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	delay_ms(50);
  40115e:	4b1f      	ldr	r3, [pc, #124]	; (4011dc <handler_command_complete+0x88>)
  401160:	4798      	blx	r3
  401162:	4603      	mov	r3, r0
  401164:	4619      	mov	r1, r3
  401166:	f04f 0200 	mov.w	r2, #0
  40116a:	460b      	mov	r3, r1
  40116c:	4614      	mov	r4, r2
  40116e:	18db      	adds	r3, r3, r3
  401170:	eb44 0404 	adc.w	r4, r4, r4
  401174:	185b      	adds	r3, r3, r1
  401176:	eb44 0402 	adc.w	r4, r4, r2
  40117a:	00e6      	lsls	r6, r4, #3
  40117c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401180:	00dd      	lsls	r5, r3, #3
  401182:	462b      	mov	r3, r5
  401184:	4634      	mov	r4, r6
  401186:	185b      	adds	r3, r3, r1
  401188:	eb44 0402 	adc.w	r4, r4, r2
  40118c:	18db      	adds	r3, r3, r3
  40118e:	eb44 0404 	adc.w	r4, r4, r4
  401192:	4619      	mov	r1, r3
  401194:	4622      	mov	r2, r4
  401196:	f243 63af 	movw	r3, #13999	; 0x36af
  40119a:	f04f 0400 	mov.w	r4, #0
  40119e:	18cd      	adds	r5, r1, r3
  4011a0:	eb42 0604 	adc.w	r6, r2, r4
  4011a4:	4628      	mov	r0, r5
  4011a6:	4631      	mov	r1, r6
  4011a8:	4c0d      	ldr	r4, [pc, #52]	; (4011e0 <handler_command_complete+0x8c>)
  4011aa:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4011ae:	f04f 0300 	mov.w	r3, #0
  4011b2:	47a0      	blx	r4
  4011b4:	4603      	mov	r3, r0
  4011b6:	460c      	mov	r4, r1
  4011b8:	4618      	mov	r0, r3
  4011ba:	4b0a      	ldr	r3, [pc, #40]	; (4011e4 <handler_command_complete+0x90>)
  4011bc:	4798      	blx	r3
	
	input_buffer[buffer_index] = 0;
  4011be:	4b0a      	ldr	r3, [pc, #40]	; (4011e8 <handler_command_complete+0x94>)
  4011c0:	681b      	ldr	r3, [r3, #0]
  4011c2:	4a0a      	ldr	r2, [pc, #40]	; (4011ec <handler_command_complete+0x98>)
  4011c4:	2100      	movs	r1, #0
  4011c6:	54d1      	strb	r1, [r2, r3]
	data_recieved = 1;
  4011c8:	4b09      	ldr	r3, [pc, #36]	; (4011f0 <handler_command_complete+0x9c>)
  4011ca:	2201      	movs	r2, #1
  4011cc:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
  4011ce:	4b06      	ldr	r3, [pc, #24]	; (4011e8 <handler_command_complete+0x94>)
  4011d0:	2200      	movs	r2, #0
  4011d2:	601a      	str	r2, [r3, #0]
}
  4011d4:	bf00      	nop
  4011d6:	370c      	adds	r7, #12
  4011d8:	46bd      	mov	sp, r7
  4011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4011dc:	00400f9d 	.word	0x00400f9d
  4011e0:	00402bed 	.word	0x00402bed
  4011e4:	20000001 	.word	0x20000001
  4011e8:	20008954 	.word	0x20008954
  4011ec:	20008760 	.word	0x20008760
  4011f0:	2000895c 	.word	0x2000895c

004011f4 <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(void){
  4011f4:	b590      	push	{r4, r7, lr}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  4011fa:	200c      	movs	r0, #12
  4011fc:	4b0e      	ldr	r3, [pc, #56]	; (401238 <configure_command_complete+0x44>)
  4011fe:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401200:	220a      	movs	r2, #10
  401202:	2101      	movs	r1, #1
  401204:	480d      	ldr	r0, [pc, #52]	; (40123c <configure_command_complete+0x48>)
  401206:	4b0e      	ldr	r3, [pc, #56]	; (401240 <configure_command_complete+0x4c>)
  401208:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  40120a:	4b0e      	ldr	r3, [pc, #56]	; (401244 <configure_command_complete+0x50>)
  40120c:	9300      	str	r3, [sp, #0]
  40120e:	2370      	movs	r3, #112	; 0x70
  401210:	2201      	movs	r2, #1
  401212:	210c      	movs	r1, #12
  401214:	4809      	ldr	r0, [pc, #36]	; (40123c <configure_command_complete+0x48>)
  401216:	4c0c      	ldr	r4, [pc, #48]	; (401248 <configure_command_complete+0x54>)
  401218:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  40121a:	200c      	movs	r0, #12
  40121c:	4b0b      	ldr	r3, [pc, #44]	; (40124c <configure_command_complete+0x58>)
  40121e:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401220:	2101      	movs	r1, #1
  401222:	4806      	ldr	r0, [pc, #24]	; (40123c <configure_command_complete+0x48>)
  401224:	4b0a      	ldr	r3, [pc, #40]	; (401250 <configure_command_complete+0x5c>)
  401226:	4798      	blx	r3
	data_recieved = 0;
  401228:	4b0a      	ldr	r3, [pc, #40]	; (401254 <configure_command_complete+0x60>)
  40122a:	2200      	movs	r2, #0
  40122c:	601a      	str	r2, [r3, #0]
}
  40122e:	bf00      	nop
  401230:	3704      	adds	r7, #4
  401232:	46bd      	mov	sp, r7
  401234:	bd90      	pop	{r4, r7, pc}
  401236:	bf00      	nop
  401238:	00402405 	.word	0x00402405
  40123c:	400e1000 	.word	0x400e1000
  401240:	00401cef 	.word	0x00401cef
  401244:	00401155 	.word	0x00401155
  401248:	00400925 	.word	0x00400925
  40124c:	00400edd 	.word	0x00400edd
  401250:	00401f83 	.word	0x00401f83
  401254:	2000895c 	.word	0x2000895c

00401258 <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401258:	b480      	push	{r7}
  40125a:	b083      	sub	sp, #12
  40125c:	af00      	add	r7, sp, #0
  40125e:	6078      	str	r0, [r7, #4]
  401260:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  401262:	4b04      	ldr	r3, [pc, #16]	; (401274 <handler_web_setup+0x1c>)
  401264:	2201      	movs	r2, #1
  401266:	601a      	str	r2, [r3, #0]
}
  401268:	bf00      	nop
  40126a:	370c      	adds	r7, #12
  40126c:	46bd      	mov	sp, r7
  40126e:	bc80      	pop	{r7}
  401270:	4770      	bx	lr
  401272:	bf00      	nop
  401274:	20008960 	.word	0x20008960

00401278 <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(void){
  401278:	b590      	push	{r4, r7, lr}
  40127a:	b083      	sub	sp, #12
  40127c:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  40127e:	200c      	movs	r0, #12
  401280:	4b0e      	ldr	r3, [pc, #56]	; (4012bc <configure_web_setup+0x44>)
  401282:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  401284:	220a      	movs	r2, #10
  401286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40128a:	480d      	ldr	r0, [pc, #52]	; (4012c0 <configure_web_setup+0x48>)
  40128c:	4b0d      	ldr	r3, [pc, #52]	; (4012c4 <configure_web_setup+0x4c>)
  40128e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  401290:	4b0d      	ldr	r3, [pc, #52]	; (4012c8 <configure_web_setup+0x50>)
  401292:	9300      	str	r3, [sp, #0]
  401294:	2379      	movs	r3, #121	; 0x79
  401296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40129a:	210c      	movs	r1, #12
  40129c:	4808      	ldr	r0, [pc, #32]	; (4012c0 <configure_web_setup+0x48>)
  40129e:	4c0b      	ldr	r4, [pc, #44]	; (4012cc <configure_web_setup+0x54>)
  4012a0:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  4012a2:	200c      	movs	r0, #12
  4012a4:	4b0a      	ldr	r3, [pc, #40]	; (4012d0 <configure_web_setup+0x58>)
  4012a6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  4012a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4012ac:	4804      	ldr	r0, [pc, #16]	; (4012c0 <configure_web_setup+0x48>)
  4012ae:	4b09      	ldr	r3, [pc, #36]	; (4012d4 <configure_web_setup+0x5c>)
  4012b0:	4798      	blx	r3
}
  4012b2:	bf00      	nop
  4012b4:	3704      	adds	r7, #4
  4012b6:	46bd      	mov	sp, r7
  4012b8:	bd90      	pop	{r4, r7, pc}
  4012ba:	bf00      	nop
  4012bc:	00402405 	.word	0x00402405
  4012c0:	400e1000 	.word	0x400e1000
  4012c4:	00401cef 	.word	0x00401cef
  4012c8:	00401259 	.word	0x00401259
  4012cc:	00400925 	.word	0x00400925
  4012d0:	00400edd 	.word	0x00400edd
  4012d4:	00401f83 	.word	0x00401f83

004012d8 <write_wifi_command>:

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  4012d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4012dc:	b082      	sub	sp, #8
  4012de:	af00      	add	r7, sp, #0
  4012e0:	6078      	str	r0, [r7, #4]
  4012e2:	460b      	mov	r3, r1
  4012e4:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  4012e6:	4b29      	ldr	r3, [pc, #164]	; (40138c <write_wifi_command+0xb4>)
  4012e8:	2200      	movs	r2, #0
  4012ea:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  4012ec:	6879      	ldr	r1, [r7, #4]
  4012ee:	4828      	ldr	r0, [pc, #160]	; (401390 <write_wifi_command+0xb8>)
  4012f0:	4b28      	ldr	r3, [pc, #160]	; (401394 <write_wifi_command+0xbc>)
  4012f2:	4798      	blx	r3
	
	timeout_counter = 0;
  4012f4:	4b28      	ldr	r3, [pc, #160]	; (401398 <write_wifi_command+0xc0>)
  4012f6:	2200      	movs	r2, #0
  4012f8:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  4012fa:	78fb      	ldrb	r3, [r7, #3]
  4012fc:	461a      	mov	r2, r3
  4012fe:	0092      	lsls	r2, r2, #2
  401300:	4413      	add	r3, r2
  401302:	009b      	lsls	r3, r3, #2
  401304:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  401306:	e031      	b.n	40136c <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  401308:	4b24      	ldr	r3, [pc, #144]	; (40139c <write_wifi_command+0xc4>)
  40130a:	4798      	blx	r3
  40130c:	4603      	mov	r3, r0
  40130e:	4619      	mov	r1, r3
  401310:	f04f 0200 	mov.w	r2, #0
  401314:	460b      	mov	r3, r1
  401316:	4614      	mov	r4, r2
  401318:	00a6      	lsls	r6, r4, #2
  40131a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40131e:	009d      	lsls	r5, r3, #2
  401320:	462b      	mov	r3, r5
  401322:	4634      	mov	r4, r6
  401324:	185b      	adds	r3, r3, r1
  401326:	eb44 0402 	adc.w	r4, r4, r2
  40132a:	18db      	adds	r3, r3, r3
  40132c:	eb44 0404 	adc.w	r4, r4, r4
  401330:	4619      	mov	r1, r3
  401332:	4622      	mov	r2, r4
  401334:	f243 63af 	movw	r3, #13999	; 0x36af
  401338:	f04f 0400 	mov.w	r4, #0
  40133c:	eb11 0b03 	adds.w	fp, r1, r3
  401340:	eb42 0c04 	adc.w	ip, r2, r4
  401344:	4658      	mov	r0, fp
  401346:	4661      	mov	r1, ip
  401348:	4c15      	ldr	r4, [pc, #84]	; (4013a0 <write_wifi_command+0xc8>)
  40134a:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40134e:	f04f 0300 	mov.w	r3, #0
  401352:	47a0      	blx	r4
  401354:	4603      	mov	r3, r0
  401356:	460c      	mov	r4, r1
  401358:	4618      	mov	r0, r3
  40135a:	4b12      	ldr	r3, [pc, #72]	; (4013a4 <write_wifi_command+0xcc>)
  40135c:	4798      	blx	r3
		timeout_counter++;
  40135e:	4b0e      	ldr	r3, [pc, #56]	; (401398 <write_wifi_command+0xc0>)
  401360:	781b      	ldrb	r3, [r3, #0]
  401362:	b2db      	uxtb	r3, r3
  401364:	3301      	adds	r3, #1
  401366:	b2da      	uxtb	r2, r3
  401368:	4b0b      	ldr	r3, [pc, #44]	; (401398 <write_wifi_command+0xc0>)
  40136a:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  40136c:	4b0a      	ldr	r3, [pc, #40]	; (401398 <write_wifi_command+0xc0>)
  40136e:	781b      	ldrb	r3, [r3, #0]
  401370:	b2db      	uxtb	r3, r3
  401372:	78fa      	ldrb	r2, [r7, #3]
  401374:	429a      	cmp	r2, r3
  401376:	d903      	bls.n	401380 <write_wifi_command+0xa8>
  401378:	4b04      	ldr	r3, [pc, #16]	; (40138c <write_wifi_command+0xb4>)
  40137a:	681b      	ldr	r3, [r3, #0]
  40137c:	2b00      	cmp	r3, #0
  40137e:	d0c3      	beq.n	401308 <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  401380:	bf00      	nop
  401382:	3708      	adds	r7, #8
  401384:	46bd      	mov	sp, r7
  401386:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  40138a:	bf00      	nop
  40138c:	2000895c 	.word	0x2000895c
  401390:	40024000 	.word	0x40024000
  401394:	00400cc9 	.word	0x00400cc9
  401398:	20008958 	.word	0x20008958
  40139c:	00400f9d 	.word	0x00400f9d
  4013a0:	00402bed 	.word	0x00402bed
  4013a4:	20000001 	.word	0x20000001

004013a8 <open_websocket>:
		return -1;
	}
	
}

uint8_t open_websocket(void) {
  4013a8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  4013ac:	b084      	sub	sp, #16
  4013ae:	af00      	add	r7, sp, #0
	// figure out handle
	write_wifi_command("close all\r\n", 2);
  4013b0:	2102      	movs	r1, #2
  4013b2:	482e      	ldr	r0, [pc, #184]	; (40146c <open_websocket+0xc4>)
  4013b4:	4b2e      	ldr	r3, [pc, #184]	; (401470 <open_websocket+0xc8>)
  4013b6:	4798      	blx	r3
	write_wifi_command("websocket_client -f bin wss://bigbrothersees.me/source_audio_socket\r\n", 2);
  4013b8:	2102      	movs	r1, #2
  4013ba:	482e      	ldr	r0, [pc, #184]	; (401474 <open_websocket+0xcc>)
  4013bc:	4b2c      	ldr	r3, [pc, #176]	; (401470 <open_websocket+0xc8>)
  4013be:	4798      	blx	r3

	int opened = 0;
  4013c0:	2300      	movs	r3, #0
  4013c2:	60fb      	str	r3, [r7, #12]
	int handle = 0;
  4013c4:	2300      	movs	r3, #0
  4013c6:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  4013c8:	2300      	movs	r3, #0
  4013ca:	60bb      	str	r3, [r7, #8]
			
	while(!opened) {			// waits for association
  4013cc:	e044      	b.n	401458 <open_websocket+0xb0>
		opened = strstr(input_buffer, "[Opened: ");
  4013ce:	492a      	ldr	r1, [pc, #168]	; (401478 <open_websocket+0xd0>)
  4013d0:	482a      	ldr	r0, [pc, #168]	; (40147c <open_websocket+0xd4>)
  4013d2:	4b2b      	ldr	r3, [pc, #172]	; (401480 <open_websocket+0xd8>)
  4013d4:	4798      	blx	r3
  4013d6:	4603      	mov	r3, r0
  4013d8:	60fb      	str	r3, [r7, #12]
		if (seconds > 100){
  4013da:	68bb      	ldr	r3, [r7, #8]
  4013dc:	2b64      	cmp	r3, #100	; 0x64
  4013de:	dd02      	ble.n	4013e6 <open_websocket+0x3e>
			blink_LED(50);
  4013e0:	2032      	movs	r0, #50	; 0x32
  4013e2:	4b28      	ldr	r3, [pc, #160]	; (401484 <open_websocket+0xdc>)
  4013e4:	4798      	blx	r3
		}
		delay_ms(200);
  4013e6:	4b28      	ldr	r3, [pc, #160]	; (401488 <open_websocket+0xe0>)
  4013e8:	4798      	blx	r3
  4013ea:	4603      	mov	r3, r0
  4013ec:	4619      	mov	r1, r3
  4013ee:	f04f 0200 	mov.w	r2, #0
  4013f2:	460b      	mov	r3, r1
  4013f4:	4614      	mov	r4, r2
  4013f6:	18db      	adds	r3, r3, r3
  4013f8:	eb44 0404 	adc.w	r4, r4, r4
  4013fc:	185b      	adds	r3, r3, r1
  4013fe:	eb44 0402 	adc.w	r4, r4, r2
  401402:	00e6      	lsls	r6, r4, #3
  401404:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  401408:	00dd      	lsls	r5, r3, #3
  40140a:	462b      	mov	r3, r5
  40140c:	4634      	mov	r4, r6
  40140e:	185b      	adds	r3, r3, r1
  401410:	eb44 0402 	adc.w	r4, r4, r2
  401414:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401418:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  40141c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401420:	4643      	mov	r3, r8
  401422:	464c      	mov	r4, r9
  401424:	4619      	mov	r1, r3
  401426:	4622      	mov	r2, r4
  401428:	f243 63af 	movw	r3, #13999	; 0x36af
  40142c:	f04f 0400 	mov.w	r4, #0
  401430:	eb11 0b03 	adds.w	fp, r1, r3
  401434:	eb42 0c04 	adc.w	ip, r2, r4
  401438:	4658      	mov	r0, fp
  40143a:	4661      	mov	r1, ip
  40143c:	4c13      	ldr	r4, [pc, #76]	; (40148c <open_websocket+0xe4>)
  40143e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401442:	f04f 0300 	mov.w	r3, #0
  401446:	47a0      	blx	r4
  401448:	4603      	mov	r3, r0
  40144a:	460c      	mov	r4, r1
  40144c:	4618      	mov	r0, r3
  40144e:	4b10      	ldr	r3, [pc, #64]	; (401490 <open_websocket+0xe8>)
  401450:	4798      	blx	r3
		seconds++;
  401452:	68bb      	ldr	r3, [r7, #8]
  401454:	3301      	adds	r3, #1
  401456:	60bb      	str	r3, [r7, #8]
	while(!opened) {			// waits for association
  401458:	68fb      	ldr	r3, [r7, #12]
  40145a:	2b00      	cmp	r3, #0
  40145c:	d0b7      	beq.n	4013ce <open_websocket+0x26>
	}
	
	// should check last thing in input buffer for handle
	return handle;
  40145e:	687b      	ldr	r3, [r7, #4]
  401460:	b2db      	uxtb	r3, r3
}
  401462:	4618      	mov	r0, r3
  401464:	3710      	adds	r7, #16
  401466:	46bd      	mov	sp, r7
  401468:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  40146c:	00407ac4 	.word	0x00407ac4
  401470:	004012d9 	.word	0x004012d9
  401474:	00407b74 	.word	0x00407b74
  401478:	00407bbc 	.word	0x00407bbc
  40147c:	20008760 	.word	0x20008760
  401480:	004033cd 	.word	0x004033cd
  401484:	00401589 	.word	0x00401589
  401488:	00400f9d 	.word	0x00400f9d
  40148c:	00402bed 	.word	0x00402bed
  401490:	20000001 	.word	0x20000001

00401494 <send_data_ws>:

void send_data_ws(uint16_t* samples_data, uint8_t handle) {
  401494:	b590      	push	{r4, r7, lr}
  401496:	b0a5      	sub	sp, #148	; 0x94
  401498:	af00      	add	r7, sp, #0
  40149a:	6078      	str	r0, [r7, #4]
  40149c:	460b      	mov	r3, r1
  40149e:	70fb      	strb	r3, [r7, #3]
	// don't send if there are fewer than PACKET_SIZE samples to send
	uint32_t end_index = (i2s_send_index*2 + PACKET_SIZE*2) % (AUDIO_BUFFER_SIZE*2); // the last uint16 index that will be hit if it sends
  4014a0:	4b31      	ldr	r3, [pc, #196]	; (401568 <send_data_ws+0xd4>)
  4014a2:	681b      	ldr	r3, [r3, #0]
  4014a4:	33c8      	adds	r3, #200	; 0xc8
  4014a6:	005b      	lsls	r3, r3, #1
  4014a8:	4a30      	ldr	r2, [pc, #192]	; (40156c <send_data_ws+0xd8>)
  4014aa:	fba2 1203 	umull	r1, r2, r2, r3
  4014ae:	0ad2      	lsrs	r2, r2, #11
  4014b0:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  4014b4:	fb01 f202 	mul.w	r2, r1, r2
  4014b8:	1a9b      	subs	r3, r3, r2
  4014ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	
	if(end_index > (i2s_receive_index*2)) // make sure that the end index isn't in front of the receive index
  4014be:	4b2c      	ldr	r3, [pc, #176]	; (401570 <send_data_ws+0xdc>)
  4014c0:	681b      	ldr	r3, [r3, #0]
  4014c2:	005a      	lsls	r2, r3, #1
  4014c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
  4014c8:	429a      	cmp	r2, r3
  4014ca:	d348      	bcc.n	40155e <send_data_ws+0xca>
	uint8_t curr_data_point;
	
	// initialize send
	
	char* templated_command[30];
	sprintf(templated_command, "write %d %d\r\n", handle, PACKET_SIZE * 2);
  4014cc:	78fa      	ldrb	r2, [r7, #3]
  4014ce:	f107 000c 	add.w	r0, r7, #12
  4014d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4014d6:	4927      	ldr	r1, [pc, #156]	; (401574 <send_data_ws+0xe0>)
  4014d8:	4c27      	ldr	r4, [pc, #156]	; (401578 <send_data_ws+0xe4>)
  4014da:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  4014dc:	f107 030c 	add.w	r3, r7, #12
  4014e0:	4619      	mov	r1, r3
  4014e2:	4826      	ldr	r0, [pc, #152]	; (40157c <send_data_ws+0xe8>)
  4014e4:	4b26      	ldr	r3, [pc, #152]	; (401580 <send_data_ws+0xec>)
  4014e6:	4798      	blx	r3
	
	// loop starting at the send index, and end PACKET SIZE later
	// i is a uint8 index, so everything is multiplied by two
	// i gets modded inside the loop to wrap around if necessary
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (PACKET_SIZE*2); i++)
  4014e8:	4b1f      	ldr	r3, [pc, #124]	; (401568 <send_data_ws+0xd4>)
  4014ea:	681b      	ldr	r3, [r3, #0]
  4014ec:	005b      	lsls	r3, r3, #1
  4014ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  4014f2:	e01c      	b.n	40152e <send_data_ws+0x9a>
	{
		
		curr_data_point = ((uint8_t*) samples_data)[i % (AUDIO_BUFFER_SIZE*2)];	
  4014f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  4014f8:	4a1c      	ldr	r2, [pc, #112]	; (40156c <send_data_ws+0xd8>)
  4014fa:	fb82 1203 	smull	r1, r2, r2, r3
  4014fe:	12d1      	asrs	r1, r2, #11
  401500:	17da      	asrs	r2, r3, #31
  401502:	1a8a      	subs	r2, r1, r2
  401504:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
  401508:	fb01 f202 	mul.w	r2, r1, r2
  40150c:	1a9a      	subs	r2, r3, r2
  40150e:	687b      	ldr	r3, [r7, #4]
  401510:	4413      	add	r3, r2
  401512:	781b      	ldrb	r3, [r3, #0]
  401514:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		usart_putchar(BOARD_USART, curr_data_point);
  401518:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  40151c:	4619      	mov	r1, r3
  40151e:	4817      	ldr	r0, [pc, #92]	; (40157c <send_data_ws+0xe8>)
  401520:	4b18      	ldr	r3, [pc, #96]	; (401584 <send_data_ws+0xf0>)
  401522:	4798      	blx	r3
	for (int i = i2s_send_index*2; i < i2s_send_index*2 + (PACKET_SIZE*2); i++)
  401524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  401528:	3301      	adds	r3, #1
  40152a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  40152e:	4b0e      	ldr	r3, [pc, #56]	; (401568 <send_data_ws+0xd4>)
  401530:	681b      	ldr	r3, [r3, #0]
  401532:	33c8      	adds	r3, #200	; 0xc8
  401534:	005a      	lsls	r2, r3, #1
  401536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  40153a:	429a      	cmp	r2, r3
  40153c:	d8da      	bhi.n	4014f4 <send_data_ws+0x60>
	}
	
	i2s_send_index = (i2s_send_index + PACKET_SIZE) % AUDIO_BUFFER_SIZE; // recompute send index after loop execution
  40153e:	4b0a      	ldr	r3, [pc, #40]	; (401568 <send_data_ws+0xd4>)
  401540:	681b      	ldr	r3, [r3, #0]
  401542:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
  401546:	4b09      	ldr	r3, [pc, #36]	; (40156c <send_data_ws+0xd8>)
  401548:	fba3 1302 	umull	r1, r3, r3, r2
  40154c:	0a9b      	lsrs	r3, r3, #10
  40154e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  401552:	fb01 f303 	mul.w	r3, r1, r3
  401556:	1ad3      	subs	r3, r2, r3
  401558:	4a03      	ldr	r2, [pc, #12]	; (401568 <send_data_ws+0xd4>)
  40155a:	6013      	str	r3, [r2, #0]
  40155c:	e000      	b.n	401560 <send_data_ws+0xcc>
		return;
  40155e:	bf00      	nop

}
  401560:	3794      	adds	r7, #148	; 0x94
  401562:	46bd      	mov	sp, r7
  401564:	bd90      	pop	{r4, r7, pc}
  401566:	bf00      	nop
  401568:	20008968 	.word	0x20008968
  40156c:	10624dd3 	.word	0x10624dd3
  401570:	200009d8 	.word	0x200009d8
  401574:	00407bc8 	.word	0x00407bc8
  401578:	00402fe9 	.word	0x00402fe9
  40157c:	40024000 	.word	0x40024000
  401580:	00400cc9 	.word	0x00400cc9
  401584:	00400c99 	.word	0x00400c99

00401588 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  401588:	b5f0      	push	{r4, r5, r6, r7, lr}
  40158a:	b083      	sub	sp, #12
  40158c:	af00      	add	r7, sp, #0
  40158e:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  401590:	687b      	ldr	r3, [r7, #4]
  401592:	2b00      	cmp	r3, #0
  401594:	d026      	beq.n	4015e4 <blink_LED+0x5c>
  401596:	687b      	ldr	r3, [r7, #4]
  401598:	461d      	mov	r5, r3
  40159a:	ea4f 76e5 	mov.w	r6, r5, asr #31
  40159e:	4b66      	ldr	r3, [pc, #408]	; (401738 <blink_LED+0x1b0>)
  4015a0:	4798      	blx	r3
  4015a2:	4603      	mov	r3, r0
  4015a4:	f04f 0400 	mov.w	r4, #0
  4015a8:	fb03 f106 	mul.w	r1, r3, r6
  4015ac:	fb05 f204 	mul.w	r2, r5, r4
  4015b0:	440a      	add	r2, r1
  4015b2:	fba5 3403 	umull	r3, r4, r5, r3
  4015b6:	4422      	add	r2, r4
  4015b8:	4614      	mov	r4, r2
  4015ba:	f243 61af 	movw	r1, #13999	; 0x36af
  4015be:	f04f 0200 	mov.w	r2, #0
  4015c2:	185d      	adds	r5, r3, r1
  4015c4:	eb44 0602 	adc.w	r6, r4, r2
  4015c8:	4628      	mov	r0, r5
  4015ca:	4631      	mov	r1, r6
  4015cc:	4c5b      	ldr	r4, [pc, #364]	; (40173c <blink_LED+0x1b4>)
  4015ce:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4015d2:	f04f 0300 	mov.w	r3, #0
  4015d6:	47a0      	blx	r4
  4015d8:	4603      	mov	r3, r0
  4015da:	460c      	mov	r4, r1
  4015dc:	4618      	mov	r0, r3
  4015de:	4b58      	ldr	r3, [pc, #352]	; (401740 <blink_LED+0x1b8>)
  4015e0:	4798      	blx	r3
  4015e2:	e016      	b.n	401612 <blink_LED+0x8a>
  4015e4:	4b54      	ldr	r3, [pc, #336]	; (401738 <blink_LED+0x1b0>)
  4015e6:	4798      	blx	r3
  4015e8:	4603      	mov	r3, r0
  4015ea:	f04f 0400 	mov.w	r4, #0
  4015ee:	a250      	add	r2, pc, #320	; (adr r2, 401730 <blink_LED+0x1a8>)
  4015f0:	e9d2 1200 	ldrd	r1, r2, [r2]
  4015f4:	185d      	adds	r5, r3, r1
  4015f6:	eb44 0602 	adc.w	r6, r4, r2
  4015fa:	4628      	mov	r0, r5
  4015fc:	4631      	mov	r1, r6
  4015fe:	4c4f      	ldr	r4, [pc, #316]	; (40173c <blink_LED+0x1b4>)
  401600:	4a50      	ldr	r2, [pc, #320]	; (401744 <blink_LED+0x1bc>)
  401602:	f04f 0300 	mov.w	r3, #0
  401606:	47a0      	blx	r4
  401608:	4603      	mov	r3, r0
  40160a:	460c      	mov	r4, r1
  40160c:	4618      	mov	r0, r3
  40160e:	4b4c      	ldr	r3, [pc, #304]	; (401740 <blink_LED+0x1b8>)
  401610:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  401612:	2009      	movs	r0, #9
  401614:	4b4c      	ldr	r3, [pc, #304]	; (401748 <blink_LED+0x1c0>)
  401616:	4798      	blx	r3
	delay_ms(ms_blink);
  401618:	687b      	ldr	r3, [r7, #4]
  40161a:	2b00      	cmp	r3, #0
  40161c:	d026      	beq.n	40166c <blink_LED+0xe4>
  40161e:	687b      	ldr	r3, [r7, #4]
  401620:	461d      	mov	r5, r3
  401622:	ea4f 76e5 	mov.w	r6, r5, asr #31
  401626:	4b44      	ldr	r3, [pc, #272]	; (401738 <blink_LED+0x1b0>)
  401628:	4798      	blx	r3
  40162a:	4603      	mov	r3, r0
  40162c:	f04f 0400 	mov.w	r4, #0
  401630:	fb03 f106 	mul.w	r1, r3, r6
  401634:	fb05 f204 	mul.w	r2, r5, r4
  401638:	440a      	add	r2, r1
  40163a:	fba5 3403 	umull	r3, r4, r5, r3
  40163e:	4422      	add	r2, r4
  401640:	4614      	mov	r4, r2
  401642:	f243 61af 	movw	r1, #13999	; 0x36af
  401646:	f04f 0200 	mov.w	r2, #0
  40164a:	185d      	adds	r5, r3, r1
  40164c:	eb44 0602 	adc.w	r6, r4, r2
  401650:	4628      	mov	r0, r5
  401652:	4631      	mov	r1, r6
  401654:	4c39      	ldr	r4, [pc, #228]	; (40173c <blink_LED+0x1b4>)
  401656:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40165a:	f04f 0300 	mov.w	r3, #0
  40165e:	47a0      	blx	r4
  401660:	4603      	mov	r3, r0
  401662:	460c      	mov	r4, r1
  401664:	4618      	mov	r0, r3
  401666:	4b36      	ldr	r3, [pc, #216]	; (401740 <blink_LED+0x1b8>)
  401668:	4798      	blx	r3
  40166a:	e016      	b.n	40169a <blink_LED+0x112>
  40166c:	4b32      	ldr	r3, [pc, #200]	; (401738 <blink_LED+0x1b0>)
  40166e:	4798      	blx	r3
  401670:	4603      	mov	r3, r0
  401672:	f04f 0400 	mov.w	r4, #0
  401676:	a22e      	add	r2, pc, #184	; (adr r2, 401730 <blink_LED+0x1a8>)
  401678:	e9d2 1200 	ldrd	r1, r2, [r2]
  40167c:	185d      	adds	r5, r3, r1
  40167e:	eb44 0602 	adc.w	r6, r4, r2
  401682:	4628      	mov	r0, r5
  401684:	4631      	mov	r1, r6
  401686:	4c2d      	ldr	r4, [pc, #180]	; (40173c <blink_LED+0x1b4>)
  401688:	4a2e      	ldr	r2, [pc, #184]	; (401744 <blink_LED+0x1bc>)
  40168a:	f04f 0300 	mov.w	r3, #0
  40168e:	47a0      	blx	r4
  401690:	4603      	mov	r3, r0
  401692:	460c      	mov	r4, r1
  401694:	4618      	mov	r0, r3
  401696:	4b2a      	ldr	r3, [pc, #168]	; (401740 <blink_LED+0x1b8>)
  401698:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  40169a:	2009      	movs	r0, #9
  40169c:	4b2a      	ldr	r3, [pc, #168]	; (401748 <blink_LED+0x1c0>)
  40169e:	4798      	blx	r3
	delay_ms(ms_blink);
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	2b00      	cmp	r3, #0
  4016a4:	d026      	beq.n	4016f4 <blink_LED+0x16c>
  4016a6:	687b      	ldr	r3, [r7, #4]
  4016a8:	461d      	mov	r5, r3
  4016aa:	ea4f 76e5 	mov.w	r6, r5, asr #31
  4016ae:	4b22      	ldr	r3, [pc, #136]	; (401738 <blink_LED+0x1b0>)
  4016b0:	4798      	blx	r3
  4016b2:	4603      	mov	r3, r0
  4016b4:	f04f 0400 	mov.w	r4, #0
  4016b8:	fb03 f106 	mul.w	r1, r3, r6
  4016bc:	fb05 f204 	mul.w	r2, r5, r4
  4016c0:	440a      	add	r2, r1
  4016c2:	fba5 3403 	umull	r3, r4, r5, r3
  4016c6:	4422      	add	r2, r4
  4016c8:	4614      	mov	r4, r2
  4016ca:	f243 61af 	movw	r1, #13999	; 0x36af
  4016ce:	f04f 0200 	mov.w	r2, #0
  4016d2:	185d      	adds	r5, r3, r1
  4016d4:	eb44 0602 	adc.w	r6, r4, r2
  4016d8:	4628      	mov	r0, r5
  4016da:	4631      	mov	r1, r6
  4016dc:	4c17      	ldr	r4, [pc, #92]	; (40173c <blink_LED+0x1b4>)
  4016de:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4016e2:	f04f 0300 	mov.w	r3, #0
  4016e6:	47a0      	blx	r4
  4016e8:	4603      	mov	r3, r0
  4016ea:	460c      	mov	r4, r1
  4016ec:	4618      	mov	r0, r3
  4016ee:	4b14      	ldr	r3, [pc, #80]	; (401740 <blink_LED+0x1b8>)
  4016f0:	4798      	blx	r3
}
  4016f2:	e016      	b.n	401722 <blink_LED+0x19a>
	delay_ms(ms_blink);
  4016f4:	4b10      	ldr	r3, [pc, #64]	; (401738 <blink_LED+0x1b0>)
  4016f6:	4798      	blx	r3
  4016f8:	4603      	mov	r3, r0
  4016fa:	f04f 0400 	mov.w	r4, #0
  4016fe:	a20c      	add	r2, pc, #48	; (adr r2, 401730 <blink_LED+0x1a8>)
  401700:	e9d2 1200 	ldrd	r1, r2, [r2]
  401704:	185d      	adds	r5, r3, r1
  401706:	eb44 0602 	adc.w	r6, r4, r2
  40170a:	4628      	mov	r0, r5
  40170c:	4631      	mov	r1, r6
  40170e:	4c0b      	ldr	r4, [pc, #44]	; (40173c <blink_LED+0x1b4>)
  401710:	4a0c      	ldr	r2, [pc, #48]	; (401744 <blink_LED+0x1bc>)
  401712:	f04f 0300 	mov.w	r3, #0
  401716:	47a0      	blx	r4
  401718:	4603      	mov	r3, r0
  40171a:	460c      	mov	r4, r1
  40171c:	4618      	mov	r0, r3
  40171e:	4b08      	ldr	r3, [pc, #32]	; (401740 <blink_LED+0x1b8>)
  401720:	4798      	blx	r3
}
  401722:	bf00      	nop
  401724:	370c      	adds	r7, #12
  401726:	46bd      	mov	sp, r7
  401728:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40172a:	bf00      	nop
  40172c:	f3af 8000 	nop.w
  401730:	00d59f7f 	.word	0x00d59f7f
  401734:	00000000 	.word	0x00000000
  401738:	00400f9d 	.word	0x00400f9d
  40173c:	00402bed 	.word	0x00402bed
  401740:	20000001 	.word	0x20000001
  401744:	00d59f80 	.word	0x00d59f80
  401748:	00400fe1 	.word	0x00400fe1

0040174c <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  40174c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401750:	b082      	sub	sp, #8
  401752:	af00      	add	r7, sp, #0
	
	int connected = 0;
  401754:	2300      	movs	r3, #0
  401756:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  401758:	2300      	movs	r3, #0
  40175a:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  40175c:	21d0      	movs	r1, #208	; 0xd0
  40175e:	482b      	ldr	r0, [pc, #172]	; (40180c <setup_wifi+0xc0>)
  401760:	4b2b      	ldr	r3, [pc, #172]	; (401810 <setup_wifi+0xc4>)
  401762:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  401764:	e046      	b.n	4017f4 <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  401766:	492b      	ldr	r1, [pc, #172]	; (401814 <setup_wifi+0xc8>)
  401768:	482b      	ldr	r0, [pc, #172]	; (401818 <setup_wifi+0xcc>)
  40176a:	4b2c      	ldr	r3, [pc, #176]	; (40181c <setup_wifi+0xd0>)
  40176c:	4798      	blx	r3
  40176e:	4603      	mov	r3, r0
  401770:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  401772:	683b      	ldr	r3, [r7, #0]
  401774:	f240 52dc 	movw	r2, #1500	; 0x5dc
  401778:	4293      	cmp	r3, r2
  40177a:	dd02      	ble.n	401782 <setup_wifi+0x36>
			blink_LED(50);
  40177c:	2032      	movs	r0, #50	; 0x32
  40177e:	4b28      	ldr	r3, [pc, #160]	; (401820 <setup_wifi+0xd4>)
  401780:	4798      	blx	r3
		}
		delay_ms(200);
  401782:	4b28      	ldr	r3, [pc, #160]	; (401824 <setup_wifi+0xd8>)
  401784:	4798      	blx	r3
  401786:	4603      	mov	r3, r0
  401788:	4619      	mov	r1, r3
  40178a:	f04f 0200 	mov.w	r2, #0
  40178e:	460b      	mov	r3, r1
  401790:	4614      	mov	r4, r2
  401792:	18db      	adds	r3, r3, r3
  401794:	eb44 0404 	adc.w	r4, r4, r4
  401798:	185b      	adds	r3, r3, r1
  40179a:	eb44 0402 	adc.w	r4, r4, r2
  40179e:	00e6      	lsls	r6, r4, #3
  4017a0:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4017a4:	00dd      	lsls	r5, r3, #3
  4017a6:	462b      	mov	r3, r5
  4017a8:	4634      	mov	r4, r6
  4017aa:	185b      	adds	r3, r3, r1
  4017ac:	eb44 0402 	adc.w	r4, r4, r2
  4017b0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4017b4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4017b8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4017bc:	4643      	mov	r3, r8
  4017be:	464c      	mov	r4, r9
  4017c0:	4619      	mov	r1, r3
  4017c2:	4622      	mov	r2, r4
  4017c4:	f243 63af 	movw	r3, #13999	; 0x36af
  4017c8:	f04f 0400 	mov.w	r4, #0
  4017cc:	eb11 0b03 	adds.w	fp, r1, r3
  4017d0:	eb42 0c04 	adc.w	ip, r2, r4
  4017d4:	4658      	mov	r0, fp
  4017d6:	4661      	mov	r1, ip
  4017d8:	4c13      	ldr	r4, [pc, #76]	; (401828 <setup_wifi+0xdc>)
  4017da:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4017de:	f04f 0300 	mov.w	r3, #0
  4017e2:	47a0      	blx	r4
  4017e4:	4603      	mov	r3, r0
  4017e6:	460c      	mov	r4, r1
  4017e8:	4618      	mov	r0, r3
  4017ea:	4b10      	ldr	r3, [pc, #64]	; (40182c <setup_wifi+0xe0>)
  4017ec:	4798      	blx	r3
		seconds++;
  4017ee:	683b      	ldr	r3, [r7, #0]
  4017f0:	3301      	adds	r3, #1
  4017f2:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  4017f4:	687b      	ldr	r3, [r7, #4]
  4017f6:	2b00      	cmp	r3, #0
  4017f8:	d0b5      	beq.n	401766 <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  4017fa:	4b0d      	ldr	r3, [pc, #52]	; (401830 <setup_wifi+0xe4>)
  4017fc:	2200      	movs	r2, #0
  4017fe:	601a      	str	r2, [r3, #0]
}
  401800:	bf00      	nop
  401802:	3708      	adds	r7, #8
  401804:	46bd      	mov	sp, r7
  401806:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  40180a:	bf00      	nop
  40180c:	00407c00 	.word	0x00407c00
  401810:	004012d9 	.word	0x004012d9
  401814:	00407c0c 	.word	0x00407c0c
  401818:	20008760 	.word	0x20008760
  40181c:	004033cd 	.word	0x004033cd
  401820:	00401589 	.word	0x00401589
  401824:	00400f9d 	.word	0x00400f9d
  401828:	00402bed 	.word	0x00402bed
  40182c:	20000001 	.word	0x20000001
  401830:	20008960 	.word	0x20008960

00401834 <configure_wifi>:

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  401834:	b580      	push	{r7, lr}
  401836:	af00      	add	r7, sp, #0
	configure_usart();
  401838:	4b05      	ldr	r3, [pc, #20]	; (401850 <configure_wifi+0x1c>)
  40183a:	4798      	blx	r3
	configure_command_complete();
  40183c:	4b05      	ldr	r3, [pc, #20]	; (401854 <configure_wifi+0x20>)
  40183e:	4798      	blx	r3
	configure_web_setup();	
  401840:	4b05      	ldr	r3, [pc, #20]	; (401858 <configure_wifi+0x24>)
  401842:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  401844:	2101      	movs	r1, #1
  401846:	4805      	ldr	r0, [pc, #20]	; (40185c <configure_wifi+0x28>)
  401848:	4b05      	ldr	r3, [pc, #20]	; (401860 <configure_wifi+0x2c>)
  40184a:	4798      	blx	r3
}
  40184c:	bf00      	nop
  40184e:	bd80      	pop	{r7, pc}
  401850:	004010d1 	.word	0x004010d1
  401854:	004011f5 	.word	0x004011f5
  401858:	00401279 	.word	0x00401279
  40185c:	40024000 	.word	0x40024000
  401860:	00400c01 	.word	0x00400c01

00401864 <reboot_wifi>:
}

/**
 *  \brief Reboots the wifi chip.
 */
void reboot_wifi() {
  401864:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  401868:	b082      	sub	sp, #8
  40186a:	af00      	add	r7, sp, #0
	write_wifi_command("reboot\r\n", 10);	// commands wifi chip to reboot
  40186c:	210a      	movs	r1, #10
  40186e:	4832      	ldr	r0, [pc, #200]	; (401938 <reboot_wifi+0xd4>)
  401870:	4b32      	ldr	r3, [pc, #200]	; (40193c <reboot_wifi+0xd8>)
  401872:	4798      	blx	r3
	
	int associated = 0;
  401874:	2300      	movs	r3, #0
  401876:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  401878:	2300      	movs	r3, #0
  40187a:	603b      	str	r3, [r7, #0]
	
	wifi_setup_flag = false;		// resets the wifi setup flag
  40187c:	4b30      	ldr	r3, [pc, #192]	; (401940 <reboot_wifi+0xdc>)
  40187e:	2200      	movs	r2, #0
  401880:	601a      	str	r2, [r3, #0]
		
	while(!associated) {			// waits for association
  401882:	e04a      	b.n	40191a <reboot_wifi+0xb6>
		if(wifi_setup_flag) {		// listens for wifi setup flag (should be pressed shortly after power)
  401884:	4b2e      	ldr	r3, [pc, #184]	; (401940 <reboot_wifi+0xdc>)
  401886:	681b      	ldr	r3, [r3, #0]
  401888:	2b00      	cmp	r3, #0
  40188a:	d001      	beq.n	401890 <reboot_wifi+0x2c>
			setup_wifi();			// sets up wifi on new network
  40188c:	4b2d      	ldr	r3, [pc, #180]	; (401944 <reboot_wifi+0xe0>)
  40188e:	4798      	blx	r3
		}
		associated = strstr(input_buffer, "[Associated]\r\n");
  401890:	492d      	ldr	r1, [pc, #180]	; (401948 <reboot_wifi+0xe4>)
  401892:	482e      	ldr	r0, [pc, #184]	; (40194c <reboot_wifi+0xe8>)
  401894:	4b2e      	ldr	r3, [pc, #184]	; (401950 <reboot_wifi+0xec>)
  401896:	4798      	blx	r3
  401898:	4603      	mov	r3, r0
  40189a:	607b      	str	r3, [r7, #4]
		if (seconds > 100){
  40189c:	683b      	ldr	r3, [r7, #0]
  40189e:	2b64      	cmp	r3, #100	; 0x64
  4018a0:	dd02      	ble.n	4018a8 <reboot_wifi+0x44>
			blink_LED(50);
  4018a2:	2032      	movs	r0, #50	; 0x32
  4018a4:	4b2b      	ldr	r3, [pc, #172]	; (401954 <reboot_wifi+0xf0>)
  4018a6:	4798      	blx	r3
		}
		delay_ms(200);
  4018a8:	4b2b      	ldr	r3, [pc, #172]	; (401958 <reboot_wifi+0xf4>)
  4018aa:	4798      	blx	r3
  4018ac:	4603      	mov	r3, r0
  4018ae:	4619      	mov	r1, r3
  4018b0:	f04f 0200 	mov.w	r2, #0
  4018b4:	460b      	mov	r3, r1
  4018b6:	4614      	mov	r4, r2
  4018b8:	18db      	adds	r3, r3, r3
  4018ba:	eb44 0404 	adc.w	r4, r4, r4
  4018be:	185b      	adds	r3, r3, r1
  4018c0:	eb44 0402 	adc.w	r4, r4, r2
  4018c4:	00e6      	lsls	r6, r4, #3
  4018c6:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  4018ca:	00dd      	lsls	r5, r3, #3
  4018cc:	462b      	mov	r3, r5
  4018ce:	4634      	mov	r4, r6
  4018d0:	185b      	adds	r3, r3, r1
  4018d2:	eb44 0402 	adc.w	r4, r4, r2
  4018d6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  4018da:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  4018de:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4018e2:	4643      	mov	r3, r8
  4018e4:	464c      	mov	r4, r9
  4018e6:	4619      	mov	r1, r3
  4018e8:	4622      	mov	r2, r4
  4018ea:	f243 63af 	movw	r3, #13999	; 0x36af
  4018ee:	f04f 0400 	mov.w	r4, #0
  4018f2:	eb11 0b03 	adds.w	fp, r1, r3
  4018f6:	eb42 0c04 	adc.w	ip, r2, r4
  4018fa:	4658      	mov	r0, fp
  4018fc:	4661      	mov	r1, ip
  4018fe:	4c17      	ldr	r4, [pc, #92]	; (40195c <reboot_wifi+0xf8>)
  401900:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401904:	f04f 0300 	mov.w	r3, #0
  401908:	47a0      	blx	r4
  40190a:	4603      	mov	r3, r0
  40190c:	460c      	mov	r4, r1
  40190e:	4618      	mov	r0, r3
  401910:	4b13      	ldr	r3, [pc, #76]	; (401960 <reboot_wifi+0xfc>)
  401912:	4798      	blx	r3
		seconds++;
  401914:	683b      	ldr	r3, [r7, #0]
  401916:	3301      	adds	r3, #1
  401918:	603b      	str	r3, [r7, #0]
	while(!associated) {			// waits for association
  40191a:	687b      	ldr	r3, [r7, #4]
  40191c:	2b00      	cmp	r3, #0
  40191e:	d0b1      	beq.n	401884 <reboot_wifi+0x20>
	}
	
	buffer_index = 0;
  401920:	4b10      	ldr	r3, [pc, #64]	; (401964 <reboot_wifi+0x100>)
  401922:	2200      	movs	r2, #0
  401924:	601a      	str	r2, [r3, #0]
	
	//write_wifi_command("set sy c e off\r\n", 5);	// resets a couple of system parameters in case they were changed
	write_wifi_command("set sy c p off\r\n", 5);
  401926:	2105      	movs	r1, #5
  401928:	480f      	ldr	r0, [pc, #60]	; (401968 <reboot_wifi+0x104>)
  40192a:	4b04      	ldr	r3, [pc, #16]	; (40193c <reboot_wifi+0xd8>)
  40192c:	4798      	blx	r3
	
  40192e:	bf00      	nop
  401930:	3708      	adds	r7, #8
  401932:	46bd      	mov	sp, r7
  401934:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  401938:	00407c5c 	.word	0x00407c5c
  40193c:	004012d9 	.word	0x004012d9
  401940:	20008960 	.word	0x20008960
  401944:	0040174d 	.word	0x0040174d
  401948:	00407c0c 	.word	0x00407c0c
  40194c:	20008760 	.word	0x20008760
  401950:	004033cd 	.word	0x004033cd
  401954:	00401589 	.word	0x00401589
  401958:	00400f9d 	.word	0x00400f9d
  40195c:	00402bed 	.word	0x00402bed
  401960:	20000001 	.word	0x20000001
  401964:	20008954 	.word	0x20008954
  401968:	00407c68 	.word	0x00407c68

0040196c <osc_enable>:
{
  40196c:	b580      	push	{r7, lr}
  40196e:	b082      	sub	sp, #8
  401970:	af00      	add	r7, sp, #0
  401972:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401974:	687b      	ldr	r3, [r7, #4]
  401976:	2b07      	cmp	r3, #7
  401978:	d831      	bhi.n	4019de <osc_enable+0x72>
  40197a:	a201      	add	r2, pc, #4	; (adr r2, 401980 <osc_enable+0x14>)
  40197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401980:	004019dd 	.word	0x004019dd
  401984:	004019a1 	.word	0x004019a1
  401988:	004019a9 	.word	0x004019a9
  40198c:	004019b1 	.word	0x004019b1
  401990:	004019b9 	.word	0x004019b9
  401994:	004019c1 	.word	0x004019c1
  401998:	004019c9 	.word	0x004019c9
  40199c:	004019d3 	.word	0x004019d3
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4019a0:	2000      	movs	r0, #0
  4019a2:	4b11      	ldr	r3, [pc, #68]	; (4019e8 <osc_enable+0x7c>)
  4019a4:	4798      	blx	r3
		break;
  4019a6:	e01a      	b.n	4019de <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4019a8:	2001      	movs	r0, #1
  4019aa:	4b0f      	ldr	r3, [pc, #60]	; (4019e8 <osc_enable+0x7c>)
  4019ac:	4798      	blx	r3
		break;
  4019ae:	e016      	b.n	4019de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4019b0:	2000      	movs	r0, #0
  4019b2:	4b0e      	ldr	r3, [pc, #56]	; (4019ec <osc_enable+0x80>)
  4019b4:	4798      	blx	r3
		break;
  4019b6:	e012      	b.n	4019de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4019b8:	2010      	movs	r0, #16
  4019ba:	4b0c      	ldr	r3, [pc, #48]	; (4019ec <osc_enable+0x80>)
  4019bc:	4798      	blx	r3
		break;
  4019be:	e00e      	b.n	4019de <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4019c0:	2020      	movs	r0, #32
  4019c2:	4b0a      	ldr	r3, [pc, #40]	; (4019ec <osc_enable+0x80>)
  4019c4:	4798      	blx	r3
		break;
  4019c6:	e00a      	b.n	4019de <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4019c8:	213e      	movs	r1, #62	; 0x3e
  4019ca:	2000      	movs	r0, #0
  4019cc:	4b08      	ldr	r3, [pc, #32]	; (4019f0 <osc_enable+0x84>)
  4019ce:	4798      	blx	r3
		break;
  4019d0:	e005      	b.n	4019de <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4019d2:	213e      	movs	r1, #62	; 0x3e
  4019d4:	2001      	movs	r0, #1
  4019d6:	4b06      	ldr	r3, [pc, #24]	; (4019f0 <osc_enable+0x84>)
  4019d8:	4798      	blx	r3
		break;
  4019da:	e000      	b.n	4019de <osc_enable+0x72>
		break;
  4019dc:	bf00      	nop
}
  4019de:	bf00      	nop
  4019e0:	3708      	adds	r7, #8
  4019e2:	46bd      	mov	sp, r7
  4019e4:	bd80      	pop	{r7, pc}
  4019e6:	bf00      	nop
  4019e8:	00402239 	.word	0x00402239
  4019ec:	004022a5 	.word	0x004022a5
  4019f0:	00402315 	.word	0x00402315

004019f4 <osc_is_ready>:
{
  4019f4:	b580      	push	{r7, lr}
  4019f6:	b082      	sub	sp, #8
  4019f8:	af00      	add	r7, sp, #0
  4019fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4019fc:	687b      	ldr	r3, [r7, #4]
  4019fe:	2b07      	cmp	r3, #7
  401a00:	d826      	bhi.n	401a50 <osc_is_ready+0x5c>
  401a02:	a201      	add	r2, pc, #4	; (adr r2, 401a08 <osc_is_ready+0x14>)
  401a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a08:	00401a29 	.word	0x00401a29
  401a0c:	00401a2d 	.word	0x00401a2d
  401a10:	00401a2d 	.word	0x00401a2d
  401a14:	00401a3f 	.word	0x00401a3f
  401a18:	00401a3f 	.word	0x00401a3f
  401a1c:	00401a3f 	.word	0x00401a3f
  401a20:	00401a3f 	.word	0x00401a3f
  401a24:	00401a3f 	.word	0x00401a3f
		return 1;
  401a28:	2301      	movs	r3, #1
  401a2a:	e012      	b.n	401a52 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401a2c:	4b0b      	ldr	r3, [pc, #44]	; (401a5c <osc_is_ready+0x68>)
  401a2e:	4798      	blx	r3
  401a30:	4603      	mov	r3, r0
  401a32:	2b00      	cmp	r3, #0
  401a34:	bf14      	ite	ne
  401a36:	2301      	movne	r3, #1
  401a38:	2300      	moveq	r3, #0
  401a3a:	b2db      	uxtb	r3, r3
  401a3c:	e009      	b.n	401a52 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  401a3e:	4b08      	ldr	r3, [pc, #32]	; (401a60 <osc_is_ready+0x6c>)
  401a40:	4798      	blx	r3
  401a42:	4603      	mov	r3, r0
  401a44:	2b00      	cmp	r3, #0
  401a46:	bf14      	ite	ne
  401a48:	2301      	movne	r3, #1
  401a4a:	2300      	moveq	r3, #0
  401a4c:	b2db      	uxtb	r3, r3
  401a4e:	e000      	b.n	401a52 <osc_is_ready+0x5e>
	return 0;
  401a50:	2300      	movs	r3, #0
}
  401a52:	4618      	mov	r0, r3
  401a54:	3708      	adds	r7, #8
  401a56:	46bd      	mov	sp, r7
  401a58:	bd80      	pop	{r7, pc}
  401a5a:	bf00      	nop
  401a5c:	00402271 	.word	0x00402271
  401a60:	0040238d 	.word	0x0040238d

00401a64 <osc_get_rate>:
{
  401a64:	b480      	push	{r7}
  401a66:	b083      	sub	sp, #12
  401a68:	af00      	add	r7, sp, #0
  401a6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a6c:	687b      	ldr	r3, [r7, #4]
  401a6e:	2b07      	cmp	r3, #7
  401a70:	d825      	bhi.n	401abe <osc_get_rate+0x5a>
  401a72:	a201      	add	r2, pc, #4	; (adr r2, 401a78 <osc_get_rate+0x14>)
  401a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a78:	00401a99 	.word	0x00401a99
  401a7c:	00401a9f 	.word	0x00401a9f
  401a80:	00401aa5 	.word	0x00401aa5
  401a84:	00401aab 	.word	0x00401aab
  401a88:	00401aaf 	.word	0x00401aaf
  401a8c:	00401ab3 	.word	0x00401ab3
  401a90:	00401ab7 	.word	0x00401ab7
  401a94:	00401abb 	.word	0x00401abb
		return OSC_SLCK_32K_RC_HZ;
  401a98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a9c:	e010      	b.n	401ac0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401aa2:	e00d      	b.n	401ac0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401aa8:	e00a      	b.n	401ac0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401aaa:	4b08      	ldr	r3, [pc, #32]	; (401acc <osc_get_rate+0x68>)
  401aac:	e008      	b.n	401ac0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401aae:	4b08      	ldr	r3, [pc, #32]	; (401ad0 <osc_get_rate+0x6c>)
  401ab0:	e006      	b.n	401ac0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401ab2:	4b08      	ldr	r3, [pc, #32]	; (401ad4 <osc_get_rate+0x70>)
  401ab4:	e004      	b.n	401ac0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401ab6:	4b07      	ldr	r3, [pc, #28]	; (401ad4 <osc_get_rate+0x70>)
  401ab8:	e002      	b.n	401ac0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401aba:	4b06      	ldr	r3, [pc, #24]	; (401ad4 <osc_get_rate+0x70>)
  401abc:	e000      	b.n	401ac0 <osc_get_rate+0x5c>
	return 0;
  401abe:	2300      	movs	r3, #0
}
  401ac0:	4618      	mov	r0, r3
  401ac2:	370c      	adds	r7, #12
  401ac4:	46bd      	mov	sp, r7
  401ac6:	bc80      	pop	{r7}
  401ac8:	4770      	bx	lr
  401aca:	bf00      	nop
  401acc:	003d0900 	.word	0x003d0900
  401ad0:	007a1200 	.word	0x007a1200
  401ad4:	00b71b00 	.word	0x00b71b00

00401ad8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401ad8:	b580      	push	{r7, lr}
  401ada:	b082      	sub	sp, #8
  401adc:	af00      	add	r7, sp, #0
  401ade:	4603      	mov	r3, r0
  401ae0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401ae2:	bf00      	nop
  401ae4:	79fb      	ldrb	r3, [r7, #7]
  401ae6:	4618      	mov	r0, r3
  401ae8:	4b05      	ldr	r3, [pc, #20]	; (401b00 <osc_wait_ready+0x28>)
  401aea:	4798      	blx	r3
  401aec:	4603      	mov	r3, r0
  401aee:	f083 0301 	eor.w	r3, r3, #1
  401af2:	b2db      	uxtb	r3, r3
  401af4:	2b00      	cmp	r3, #0
  401af6:	d1f5      	bne.n	401ae4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401af8:	bf00      	nop
  401afa:	3708      	adds	r7, #8
  401afc:	46bd      	mov	sp, r7
  401afe:	bd80      	pop	{r7, pc}
  401b00:	004019f5 	.word	0x004019f5

00401b04 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401b04:	b580      	push	{r7, lr}
  401b06:	b086      	sub	sp, #24
  401b08:	af00      	add	r7, sp, #0
  401b0a:	60f8      	str	r0, [r7, #12]
  401b0c:	607a      	str	r2, [r7, #4]
  401b0e:	603b      	str	r3, [r7, #0]
  401b10:	460b      	mov	r3, r1
  401b12:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401b14:	7afb      	ldrb	r3, [r7, #11]
  401b16:	4618      	mov	r0, r3
  401b18:	4b0d      	ldr	r3, [pc, #52]	; (401b50 <pll_config_init+0x4c>)
  401b1a:	4798      	blx	r3
  401b1c:	4602      	mov	r2, r0
  401b1e:	687b      	ldr	r3, [r7, #4]
  401b20:	fbb2 f3f3 	udiv	r3, r2, r3
  401b24:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401b26:	697b      	ldr	r3, [r7, #20]
  401b28:	683a      	ldr	r2, [r7, #0]
  401b2a:	fb02 f303 	mul.w	r3, r2, r3
  401b2e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401b30:	683b      	ldr	r3, [r7, #0]
  401b32:	3b01      	subs	r3, #1
  401b34:	041a      	lsls	r2, r3, #16
  401b36:	4b07      	ldr	r3, [pc, #28]	; (401b54 <pll_config_init+0x50>)
  401b38:	4013      	ands	r3, r2
  401b3a:	687a      	ldr	r2, [r7, #4]
  401b3c:	b2d2      	uxtb	r2, r2
  401b3e:	4313      	orrs	r3, r2
  401b40:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  401b44:	68fb      	ldr	r3, [r7, #12]
  401b46:	601a      	str	r2, [r3, #0]
}
  401b48:	bf00      	nop
  401b4a:	3718      	adds	r7, #24
  401b4c:	46bd      	mov	sp, r7
  401b4e:	bd80      	pop	{r7, pc}
  401b50:	00401a65 	.word	0x00401a65
  401b54:	07ff0000 	.word	0x07ff0000

00401b58 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401b58:	b580      	push	{r7, lr}
  401b5a:	b082      	sub	sp, #8
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
  401b60:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401b62:	683b      	ldr	r3, [r7, #0]
  401b64:	2b00      	cmp	r3, #0
  401b66:	d108      	bne.n	401b7a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401b68:	4b09      	ldr	r3, [pc, #36]	; (401b90 <pll_enable+0x38>)
  401b6a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401b6c:	4a09      	ldr	r2, [pc, #36]	; (401b94 <pll_enable+0x3c>)
  401b6e:	687b      	ldr	r3, [r7, #4]
  401b70:	681b      	ldr	r3, [r3, #0]
  401b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401b76:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  401b78:	e005      	b.n	401b86 <pll_enable+0x2e>
		pmc_disable_pllbck();
  401b7a:	4b07      	ldr	r3, [pc, #28]	; (401b98 <pll_enable+0x40>)
  401b7c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  401b7e:	4a05      	ldr	r2, [pc, #20]	; (401b94 <pll_enable+0x3c>)
  401b80:	687b      	ldr	r3, [r7, #4]
  401b82:	681b      	ldr	r3, [r3, #0]
  401b84:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  401b86:	bf00      	nop
  401b88:	3708      	adds	r7, #8
  401b8a:	46bd      	mov	sp, r7
  401b8c:	bd80      	pop	{r7, pc}
  401b8e:	bf00      	nop
  401b90:	004023a5 	.word	0x004023a5
  401b94:	400e0400 	.word	0x400e0400
  401b98:	004023d5 	.word	0x004023d5

00401b9c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401b9c:	b580      	push	{r7, lr}
  401b9e:	b082      	sub	sp, #8
  401ba0:	af00      	add	r7, sp, #0
  401ba2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401ba4:	687b      	ldr	r3, [r7, #4]
  401ba6:	2b00      	cmp	r3, #0
  401ba8:	d103      	bne.n	401bb2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  401baa:	4b05      	ldr	r3, [pc, #20]	; (401bc0 <pll_is_locked+0x24>)
  401bac:	4798      	blx	r3
  401bae:	4603      	mov	r3, r0
  401bb0:	e002      	b.n	401bb8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401bb2:	4b04      	ldr	r3, [pc, #16]	; (401bc4 <pll_is_locked+0x28>)
  401bb4:	4798      	blx	r3
  401bb6:	4603      	mov	r3, r0
	}
}
  401bb8:	4618      	mov	r0, r3
  401bba:	3708      	adds	r7, #8
  401bbc:	46bd      	mov	sp, r7
  401bbe:	bd80      	pop	{r7, pc}
  401bc0:	004023bd 	.word	0x004023bd
  401bc4:	004023ed 	.word	0x004023ed

00401bc8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401bc8:	b580      	push	{r7, lr}
  401bca:	b082      	sub	sp, #8
  401bcc:	af00      	add	r7, sp, #0
  401bce:	4603      	mov	r3, r0
  401bd0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401bd2:	79fb      	ldrb	r3, [r7, #7]
  401bd4:	3b03      	subs	r3, #3
  401bd6:	2b04      	cmp	r3, #4
  401bd8:	d808      	bhi.n	401bec <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401bda:	79fb      	ldrb	r3, [r7, #7]
  401bdc:	4618      	mov	r0, r3
  401bde:	4b06      	ldr	r3, [pc, #24]	; (401bf8 <pll_enable_source+0x30>)
  401be0:	4798      	blx	r3
		osc_wait_ready(e_src);
  401be2:	79fb      	ldrb	r3, [r7, #7]
  401be4:	4618      	mov	r0, r3
  401be6:	4b05      	ldr	r3, [pc, #20]	; (401bfc <pll_enable_source+0x34>)
  401be8:	4798      	blx	r3
		break;
  401bea:	e000      	b.n	401bee <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401bec:	bf00      	nop
	}
}
  401bee:	bf00      	nop
  401bf0:	3708      	adds	r7, #8
  401bf2:	46bd      	mov	sp, r7
  401bf4:	bd80      	pop	{r7, pc}
  401bf6:	bf00      	nop
  401bf8:	0040196d 	.word	0x0040196d
  401bfc:	00401ad9 	.word	0x00401ad9

00401c00 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401c00:	b580      	push	{r7, lr}
  401c02:	b082      	sub	sp, #8
  401c04:	af00      	add	r7, sp, #0
  401c06:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401c08:	bf00      	nop
  401c0a:	6878      	ldr	r0, [r7, #4]
  401c0c:	4b04      	ldr	r3, [pc, #16]	; (401c20 <pll_wait_for_lock+0x20>)
  401c0e:	4798      	blx	r3
  401c10:	4603      	mov	r3, r0
  401c12:	2b00      	cmp	r3, #0
  401c14:	d0f9      	beq.n	401c0a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401c16:	2300      	movs	r3, #0
}
  401c18:	4618      	mov	r0, r3
  401c1a:	3708      	adds	r7, #8
  401c1c:	46bd      	mov	sp, r7
  401c1e:	bd80      	pop	{r7, pc}
  401c20:	00401b9d 	.word	0x00401b9d

00401c24 <sysclk_get_main_hz>:
{
  401c24:	b580      	push	{r7, lr}
  401c26:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401c28:	2006      	movs	r0, #6
  401c2a:	4b04      	ldr	r3, [pc, #16]	; (401c3c <sysclk_get_main_hz+0x18>)
  401c2c:	4798      	blx	r3
  401c2e:	4602      	mov	r2, r0
  401c30:	4613      	mov	r3, r2
  401c32:	009b      	lsls	r3, r3, #2
  401c34:	4413      	add	r3, r2
  401c36:	009b      	lsls	r3, r3, #2
}
  401c38:	4618      	mov	r0, r3
  401c3a:	bd80      	pop	{r7, pc}
  401c3c:	00401a65 	.word	0x00401a65

00401c40 <sysclk_get_cpu_hz>:
{
  401c40:	b580      	push	{r7, lr}
  401c42:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401c44:	4b02      	ldr	r3, [pc, #8]	; (401c50 <sysclk_get_cpu_hz+0x10>)
  401c46:	4798      	blx	r3
  401c48:	4603      	mov	r3, r0
  401c4a:	085b      	lsrs	r3, r3, #1
}
  401c4c:	4618      	mov	r0, r3
  401c4e:	bd80      	pop	{r7, pc}
  401c50:	00401c25 	.word	0x00401c25

00401c54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401c54:	b590      	push	{r4, r7, lr}
  401c56:	b083      	sub	sp, #12
  401c58:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401c5a:	4811      	ldr	r0, [pc, #68]	; (401ca0 <sysclk_init+0x4c>)
  401c5c:	4b11      	ldr	r3, [pc, #68]	; (401ca4 <sysclk_init+0x50>)
  401c5e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  401c60:	2006      	movs	r0, #6
  401c62:	4b11      	ldr	r3, [pc, #68]	; (401ca8 <sysclk_init+0x54>)
  401c64:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401c66:	1d38      	adds	r0, r7, #4
  401c68:	2314      	movs	r3, #20
  401c6a:	2201      	movs	r2, #1
  401c6c:	2106      	movs	r1, #6
  401c6e:	4c0f      	ldr	r4, [pc, #60]	; (401cac <sysclk_init+0x58>)
  401c70:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401c72:	1d3b      	adds	r3, r7, #4
  401c74:	2100      	movs	r1, #0
  401c76:	4618      	mov	r0, r3
  401c78:	4b0d      	ldr	r3, [pc, #52]	; (401cb0 <sysclk_init+0x5c>)
  401c7a:	4798      	blx	r3
		pll_wait_for_lock(0);
  401c7c:	2000      	movs	r0, #0
  401c7e:	4b0d      	ldr	r3, [pc, #52]	; (401cb4 <sysclk_init+0x60>)
  401c80:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c82:	2010      	movs	r0, #16
  401c84:	4b0c      	ldr	r3, [pc, #48]	; (401cb8 <sysclk_init+0x64>)
  401c86:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c88:	4b0c      	ldr	r3, [pc, #48]	; (401cbc <sysclk_init+0x68>)
  401c8a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401c8c:	4b0c      	ldr	r3, [pc, #48]	; (401cc0 <sysclk_init+0x6c>)
  401c8e:	4798      	blx	r3
  401c90:	4603      	mov	r3, r0
  401c92:	4618      	mov	r0, r3
  401c94:	4b03      	ldr	r3, [pc, #12]	; (401ca4 <sysclk_init+0x50>)
  401c96:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  401c98:	bf00      	nop
  401c9a:	370c      	adds	r7, #12
  401c9c:	46bd      	mov	sp, r7
  401c9e:	bd90      	pop	{r4, r7, pc}
  401ca0:	07270e00 	.word	0x07270e00
  401ca4:	00402a85 	.word	0x00402a85
  401ca8:	00401bc9 	.word	0x00401bc9
  401cac:	00401b05 	.word	0x00401b05
  401cb0:	00401b59 	.word	0x00401b59
  401cb4:	00401c01 	.word	0x00401c01
  401cb8:	004021b9 	.word	0x004021b9
  401cbc:	004028ed 	.word	0x004028ed
  401cc0:	00401c41 	.word	0x00401c41

00401cc4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401cc4:	b480      	push	{r7}
  401cc6:	b085      	sub	sp, #20
  401cc8:	af00      	add	r7, sp, #0
  401cca:	60f8      	str	r0, [r7, #12]
  401ccc:	60b9      	str	r1, [r7, #8]
  401cce:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cd0:	687b      	ldr	r3, [r7, #4]
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d003      	beq.n	401cde <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401cd6:	68fb      	ldr	r3, [r7, #12]
  401cd8:	68ba      	ldr	r2, [r7, #8]
  401cda:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401cdc:	e002      	b.n	401ce4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401cde:	68fb      	ldr	r3, [r7, #12]
  401ce0:	68ba      	ldr	r2, [r7, #8]
  401ce2:	661a      	str	r2, [r3, #96]	; 0x60
}
  401ce4:	bf00      	nop
  401ce6:	3714      	adds	r7, #20
  401ce8:	46bd      	mov	sp, r7
  401cea:	bc80      	pop	{r7}
  401cec:	4770      	bx	lr

00401cee <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401cee:	b480      	push	{r7}
  401cf0:	b085      	sub	sp, #20
  401cf2:	af00      	add	r7, sp, #0
  401cf4:	60f8      	str	r0, [r7, #12]
  401cf6:	60b9      	str	r1, [r7, #8]
  401cf8:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401cfa:	68fb      	ldr	r3, [r7, #12]
  401cfc:	68ba      	ldr	r2, [r7, #8]
  401cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  401d02:	687b      	ldr	r3, [r7, #4]
  401d04:	005b      	lsls	r3, r3, #1
  401d06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401d0a:	fbb2 f3f3 	udiv	r3, r2, r3
  401d0e:	3b01      	subs	r3, #1
  401d10:	f3c3 020d 	ubfx	r2, r3, #0, #14
  401d14:	68fb      	ldr	r3, [r7, #12]
  401d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  401d1a:	bf00      	nop
  401d1c:	3714      	adds	r7, #20
  401d1e:	46bd      	mov	sp, r7
  401d20:	bc80      	pop	{r7}
  401d22:	4770      	bx	lr

00401d24 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d24:	b480      	push	{r7}
  401d26:	b087      	sub	sp, #28
  401d28:	af00      	add	r7, sp, #0
  401d2a:	60f8      	str	r0, [r7, #12]
  401d2c:	60b9      	str	r1, [r7, #8]
  401d2e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d30:	68fb      	ldr	r3, [r7, #12]
  401d32:	687a      	ldr	r2, [r7, #4]
  401d34:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d36:	68bb      	ldr	r3, [r7, #8]
  401d38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d3c:	d04a      	beq.n	401dd4 <pio_set_peripheral+0xb0>
  401d3e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d42:	d808      	bhi.n	401d56 <pio_set_peripheral+0x32>
  401d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d48:	d016      	beq.n	401d78 <pio_set_peripheral+0x54>
  401d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d4e:	d02c      	beq.n	401daa <pio_set_peripheral+0x86>
  401d50:	2b00      	cmp	r3, #0
  401d52:	d069      	beq.n	401e28 <pio_set_peripheral+0x104>
  401d54:	e064      	b.n	401e20 <pio_set_peripheral+0xfc>
  401d56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d5a:	d065      	beq.n	401e28 <pio_set_peripheral+0x104>
  401d5c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d60:	d803      	bhi.n	401d6a <pio_set_peripheral+0x46>
  401d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d66:	d04a      	beq.n	401dfe <pio_set_peripheral+0xda>
  401d68:	e05a      	b.n	401e20 <pio_set_peripheral+0xfc>
  401d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d6e:	d05b      	beq.n	401e28 <pio_set_peripheral+0x104>
  401d70:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d74:	d058      	beq.n	401e28 <pio_set_peripheral+0x104>
  401d76:	e053      	b.n	401e20 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d78:	68fb      	ldr	r3, [r7, #12]
  401d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401d7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d7e:	68fb      	ldr	r3, [r7, #12]
  401d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	43d9      	mvns	r1, r3
  401d86:	697b      	ldr	r3, [r7, #20]
  401d88:	400b      	ands	r3, r1
  401d8a:	401a      	ands	r2, r3
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401d94:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d96:	68fb      	ldr	r3, [r7, #12]
  401d98:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401d9a:	687b      	ldr	r3, [r7, #4]
  401d9c:	43d9      	mvns	r1, r3
  401d9e:	697b      	ldr	r3, [r7, #20]
  401da0:	400b      	ands	r3, r1
  401da2:	401a      	ands	r2, r3
  401da4:	68fb      	ldr	r3, [r7, #12]
  401da6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401da8:	e03a      	b.n	401e20 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401daa:	68fb      	ldr	r3, [r7, #12]
  401dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dae:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401db0:	687a      	ldr	r2, [r7, #4]
  401db2:	697b      	ldr	r3, [r7, #20]
  401db4:	431a      	orrs	r2, r3
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dba:	68fb      	ldr	r3, [r7, #12]
  401dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dbe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401dc4:	687b      	ldr	r3, [r7, #4]
  401dc6:	43d9      	mvns	r1, r3
  401dc8:	697b      	ldr	r3, [r7, #20]
  401dca:	400b      	ands	r3, r1
  401dcc:	401a      	ands	r2, r3
  401dce:	68fb      	ldr	r3, [r7, #12]
  401dd0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401dd2:	e025      	b.n	401e20 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dd8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dda:	68fb      	ldr	r3, [r7, #12]
  401ddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401dde:	687b      	ldr	r3, [r7, #4]
  401de0:	43d9      	mvns	r1, r3
  401de2:	697b      	ldr	r3, [r7, #20]
  401de4:	400b      	ands	r3, r1
  401de6:	401a      	ands	r2, r3
  401de8:	68fb      	ldr	r3, [r7, #12]
  401dea:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dec:	68fb      	ldr	r3, [r7, #12]
  401dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401df0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401df2:	687a      	ldr	r2, [r7, #4]
  401df4:	697b      	ldr	r3, [r7, #20]
  401df6:	431a      	orrs	r2, r3
  401df8:	68fb      	ldr	r3, [r7, #12]
  401dfa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401dfc:	e010      	b.n	401e20 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dfe:	68fb      	ldr	r3, [r7, #12]
  401e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e02:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e04:	687a      	ldr	r2, [r7, #4]
  401e06:	697b      	ldr	r3, [r7, #20]
  401e08:	431a      	orrs	r2, r3
  401e0a:	68fb      	ldr	r3, [r7, #12]
  401e0c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e0e:	68fb      	ldr	r3, [r7, #12]
  401e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e12:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e14:	687a      	ldr	r2, [r7, #4]
  401e16:	697b      	ldr	r3, [r7, #20]
  401e18:	431a      	orrs	r2, r3
  401e1a:	68fb      	ldr	r3, [r7, #12]
  401e1c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e1e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401e20:	68fb      	ldr	r3, [r7, #12]
  401e22:	687a      	ldr	r2, [r7, #4]
  401e24:	605a      	str	r2, [r3, #4]
  401e26:	e000      	b.n	401e2a <pio_set_peripheral+0x106>
		return;
  401e28:	bf00      	nop
}
  401e2a:	371c      	adds	r7, #28
  401e2c:	46bd      	mov	sp, r7
  401e2e:	bc80      	pop	{r7}
  401e30:	4770      	bx	lr
	...

00401e34 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401e34:	b580      	push	{r7, lr}
  401e36:	b084      	sub	sp, #16
  401e38:	af00      	add	r7, sp, #0
  401e3a:	60f8      	str	r0, [r7, #12]
  401e3c:	60b9      	str	r1, [r7, #8]
  401e3e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401e40:	68b9      	ldr	r1, [r7, #8]
  401e42:	68f8      	ldr	r0, [r7, #12]
  401e44:	4b19      	ldr	r3, [pc, #100]	; (401eac <pio_set_input+0x78>)
  401e46:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401e48:	687b      	ldr	r3, [r7, #4]
  401e4a:	f003 0301 	and.w	r3, r3, #1
  401e4e:	461a      	mov	r2, r3
  401e50:	68b9      	ldr	r1, [r7, #8]
  401e52:	68f8      	ldr	r0, [r7, #12]
  401e54:	4b16      	ldr	r3, [pc, #88]	; (401eb0 <pio_set_input+0x7c>)
  401e56:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e58:	687b      	ldr	r3, [r7, #4]
  401e5a:	f003 030a 	and.w	r3, r3, #10
  401e5e:	2b00      	cmp	r3, #0
  401e60:	d003      	beq.n	401e6a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401e62:	68fb      	ldr	r3, [r7, #12]
  401e64:	68ba      	ldr	r2, [r7, #8]
  401e66:	621a      	str	r2, [r3, #32]
  401e68:	e002      	b.n	401e70 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401e6a:	68fb      	ldr	r3, [r7, #12]
  401e6c:	68ba      	ldr	r2, [r7, #8]
  401e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401e70:	687b      	ldr	r3, [r7, #4]
  401e72:	f003 0302 	and.w	r3, r3, #2
  401e76:	2b00      	cmp	r3, #0
  401e78:	d004      	beq.n	401e84 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401e7a:	68fb      	ldr	r3, [r7, #12]
  401e7c:	68ba      	ldr	r2, [r7, #8]
  401e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401e82:	e008      	b.n	401e96 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	f003 0308 	and.w	r3, r3, #8
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	d003      	beq.n	401e96 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	68ba      	ldr	r2, [r7, #8]
  401e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401e96:	68fb      	ldr	r3, [r7, #12]
  401e98:	68ba      	ldr	r2, [r7, #8]
  401e9a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401e9c:	68fb      	ldr	r3, [r7, #12]
  401e9e:	68ba      	ldr	r2, [r7, #8]
  401ea0:	601a      	str	r2, [r3, #0]
}
  401ea2:	bf00      	nop
  401ea4:	3710      	adds	r7, #16
  401ea6:	46bd      	mov	sp, r7
  401ea8:	bd80      	pop	{r7, pc}
  401eaa:	bf00      	nop
  401eac:	00401f9d 	.word	0x00401f9d
  401eb0:	00401cc5 	.word	0x00401cc5

00401eb4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401eb4:	b580      	push	{r7, lr}
  401eb6:	b084      	sub	sp, #16
  401eb8:	af00      	add	r7, sp, #0
  401eba:	60f8      	str	r0, [r7, #12]
  401ebc:	60b9      	str	r1, [r7, #8]
  401ebe:	607a      	str	r2, [r7, #4]
  401ec0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401ec2:	68b9      	ldr	r1, [r7, #8]
  401ec4:	68f8      	ldr	r0, [r7, #12]
  401ec6:	4b12      	ldr	r3, [pc, #72]	; (401f10 <pio_set_output+0x5c>)
  401ec8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401eca:	69ba      	ldr	r2, [r7, #24]
  401ecc:	68b9      	ldr	r1, [r7, #8]
  401ece:	68f8      	ldr	r0, [r7, #12]
  401ed0:	4b10      	ldr	r3, [pc, #64]	; (401f14 <pio_set_output+0x60>)
  401ed2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401ed4:	683b      	ldr	r3, [r7, #0]
  401ed6:	2b00      	cmp	r3, #0
  401ed8:	d003      	beq.n	401ee2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401eda:	68fb      	ldr	r3, [r7, #12]
  401edc:	68ba      	ldr	r2, [r7, #8]
  401ede:	651a      	str	r2, [r3, #80]	; 0x50
  401ee0:	e002      	b.n	401ee8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401ee2:	68fb      	ldr	r3, [r7, #12]
  401ee4:	68ba      	ldr	r2, [r7, #8]
  401ee6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401ee8:	687b      	ldr	r3, [r7, #4]
  401eea:	2b00      	cmp	r3, #0
  401eec:	d003      	beq.n	401ef6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401eee:	68fb      	ldr	r3, [r7, #12]
  401ef0:	68ba      	ldr	r2, [r7, #8]
  401ef2:	631a      	str	r2, [r3, #48]	; 0x30
  401ef4:	e002      	b.n	401efc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401ef6:	68fb      	ldr	r3, [r7, #12]
  401ef8:	68ba      	ldr	r2, [r7, #8]
  401efa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401efc:	68fb      	ldr	r3, [r7, #12]
  401efe:	68ba      	ldr	r2, [r7, #8]
  401f00:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401f02:	68fb      	ldr	r3, [r7, #12]
  401f04:	68ba      	ldr	r2, [r7, #8]
  401f06:	601a      	str	r2, [r3, #0]
}
  401f08:	bf00      	nop
  401f0a:	3710      	adds	r7, #16
  401f0c:	46bd      	mov	sp, r7
  401f0e:	bd80      	pop	{r7, pc}
  401f10:	00401f9d 	.word	0x00401f9d
  401f14:	00401cc5 	.word	0x00401cc5

00401f18 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401f18:	b480      	push	{r7}
  401f1a:	b085      	sub	sp, #20
  401f1c:	af00      	add	r7, sp, #0
  401f1e:	60f8      	str	r0, [r7, #12]
  401f20:	60b9      	str	r1, [r7, #8]
  401f22:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401f24:	687b      	ldr	r3, [r7, #4]
  401f26:	f003 0310 	and.w	r3, r3, #16
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d020      	beq.n	401f70 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401f2e:	68fb      	ldr	r3, [r7, #12]
  401f30:	68ba      	ldr	r2, [r7, #8]
  401f32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401f36:	687b      	ldr	r3, [r7, #4]
  401f38:	f003 0320 	and.w	r3, r3, #32
  401f3c:	2b00      	cmp	r3, #0
  401f3e:	d004      	beq.n	401f4a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401f40:	68fb      	ldr	r3, [r7, #12]
  401f42:	68ba      	ldr	r2, [r7, #8]
  401f44:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401f48:	e003      	b.n	401f52 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401f4a:	68fb      	ldr	r3, [r7, #12]
  401f4c:	68ba      	ldr	r2, [r7, #8]
  401f4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401f52:	687b      	ldr	r3, [r7, #4]
  401f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401f58:	2b00      	cmp	r3, #0
  401f5a:	d004      	beq.n	401f66 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401f5c:	68fb      	ldr	r3, [r7, #12]
  401f5e:	68ba      	ldr	r2, [r7, #8]
  401f60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401f64:	e008      	b.n	401f78 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401f66:	68fb      	ldr	r3, [r7, #12]
  401f68:	68ba      	ldr	r2, [r7, #8]
  401f6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401f6e:	e003      	b.n	401f78 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401f70:	68fb      	ldr	r3, [r7, #12]
  401f72:	68ba      	ldr	r2, [r7, #8]
  401f74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401f78:	bf00      	nop
  401f7a:	3714      	adds	r7, #20
  401f7c:	46bd      	mov	sp, r7
  401f7e:	bc80      	pop	{r7}
  401f80:	4770      	bx	lr

00401f82 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f82:	b480      	push	{r7}
  401f84:	b083      	sub	sp, #12
  401f86:	af00      	add	r7, sp, #0
  401f88:	6078      	str	r0, [r7, #4]
  401f8a:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401f8c:	687b      	ldr	r3, [r7, #4]
  401f8e:	683a      	ldr	r2, [r7, #0]
  401f90:	641a      	str	r2, [r3, #64]	; 0x40
}
  401f92:	bf00      	nop
  401f94:	370c      	adds	r7, #12
  401f96:	46bd      	mov	sp, r7
  401f98:	bc80      	pop	{r7}
  401f9a:	4770      	bx	lr

00401f9c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401f9c:	b480      	push	{r7}
  401f9e:	b083      	sub	sp, #12
  401fa0:	af00      	add	r7, sp, #0
  401fa2:	6078      	str	r0, [r7, #4]
  401fa4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401fa6:	687b      	ldr	r3, [r7, #4]
  401fa8:	683a      	ldr	r2, [r7, #0]
  401faa:	645a      	str	r2, [r3, #68]	; 0x44
}
  401fac:	bf00      	nop
  401fae:	370c      	adds	r7, #12
  401fb0:	46bd      	mov	sp, r7
  401fb2:	bc80      	pop	{r7}
  401fb4:	4770      	bx	lr

00401fb6 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401fb6:	b480      	push	{r7}
  401fb8:	b083      	sub	sp, #12
  401fba:	af00      	add	r7, sp, #0
  401fbc:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401fbe:	687b      	ldr	r3, [r7, #4]
  401fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401fc2:	4618      	mov	r0, r3
  401fc4:	370c      	adds	r7, #12
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bc80      	pop	{r7}
  401fca:	4770      	bx	lr

00401fcc <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401fcc:	b480      	push	{r7}
  401fce:	b083      	sub	sp, #12
  401fd0:	af00      	add	r7, sp, #0
  401fd2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401fd4:	687b      	ldr	r3, [r7, #4]
  401fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401fd8:	4618      	mov	r0, r3
  401fda:	370c      	adds	r7, #12
  401fdc:	46bd      	mov	sp, r7
  401fde:	bc80      	pop	{r7}
  401fe0:	4770      	bx	lr
	...

00401fe4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401fe4:	b590      	push	{r4, r7, lr}
  401fe6:	b087      	sub	sp, #28
  401fe8:	af02      	add	r7, sp, #8
  401fea:	6078      	str	r0, [r7, #4]
  401fec:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401fee:	6878      	ldr	r0, [r7, #4]
  401ff0:	4b63      	ldr	r3, [pc, #396]	; (402180 <pio_configure_pin+0x19c>)
  401ff2:	4798      	blx	r3
  401ff4:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401ff6:	683b      	ldr	r3, [r7, #0]
  401ff8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402000:	d067      	beq.n	4020d2 <pio_configure_pin+0xee>
  402002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402006:	d809      	bhi.n	40201c <pio_configure_pin+0x38>
  402008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40200c:	d02b      	beq.n	402066 <pio_configure_pin+0x82>
  40200e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402012:	d043      	beq.n	40209c <pio_configure_pin+0xb8>
  402014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402018:	d00a      	beq.n	402030 <pio_configure_pin+0x4c>
  40201a:	e0a9      	b.n	402170 <pio_configure_pin+0x18c>
  40201c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402020:	d07e      	beq.n	402120 <pio_configure_pin+0x13c>
  402022:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402026:	d07b      	beq.n	402120 <pio_configure_pin+0x13c>
  402028:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40202c:	d06c      	beq.n	402108 <pio_configure_pin+0x124>
  40202e:	e09f      	b.n	402170 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402030:	687b      	ldr	r3, [r7, #4]
  402032:	f003 031f 	and.w	r3, r3, #31
  402036:	2201      	movs	r2, #1
  402038:	fa02 f303 	lsl.w	r3, r2, r3
  40203c:	461a      	mov	r2, r3
  40203e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402042:	68f8      	ldr	r0, [r7, #12]
  402044:	4b4f      	ldr	r3, [pc, #316]	; (402184 <pio_configure_pin+0x1a0>)
  402046:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402048:	687b      	ldr	r3, [r7, #4]
  40204a:	f003 031f 	and.w	r3, r3, #31
  40204e:	2201      	movs	r2, #1
  402050:	fa02 f303 	lsl.w	r3, r2, r3
  402054:	4619      	mov	r1, r3
  402056:	683b      	ldr	r3, [r7, #0]
  402058:	f003 0301 	and.w	r3, r3, #1
  40205c:	461a      	mov	r2, r3
  40205e:	68f8      	ldr	r0, [r7, #12]
  402060:	4b49      	ldr	r3, [pc, #292]	; (402188 <pio_configure_pin+0x1a4>)
  402062:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402064:	e086      	b.n	402174 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402066:	687b      	ldr	r3, [r7, #4]
  402068:	f003 031f 	and.w	r3, r3, #31
  40206c:	2201      	movs	r2, #1
  40206e:	fa02 f303 	lsl.w	r3, r2, r3
  402072:	461a      	mov	r2, r3
  402074:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402078:	68f8      	ldr	r0, [r7, #12]
  40207a:	4b42      	ldr	r3, [pc, #264]	; (402184 <pio_configure_pin+0x1a0>)
  40207c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40207e:	687b      	ldr	r3, [r7, #4]
  402080:	f003 031f 	and.w	r3, r3, #31
  402084:	2201      	movs	r2, #1
  402086:	fa02 f303 	lsl.w	r3, r2, r3
  40208a:	4619      	mov	r1, r3
  40208c:	683b      	ldr	r3, [r7, #0]
  40208e:	f003 0301 	and.w	r3, r3, #1
  402092:	461a      	mov	r2, r3
  402094:	68f8      	ldr	r0, [r7, #12]
  402096:	4b3c      	ldr	r3, [pc, #240]	; (402188 <pio_configure_pin+0x1a4>)
  402098:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40209a:	e06b      	b.n	402174 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40209c:	687b      	ldr	r3, [r7, #4]
  40209e:	f003 031f 	and.w	r3, r3, #31
  4020a2:	2201      	movs	r2, #1
  4020a4:	fa02 f303 	lsl.w	r3, r2, r3
  4020a8:	461a      	mov	r2, r3
  4020aa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4020ae:	68f8      	ldr	r0, [r7, #12]
  4020b0:	4b34      	ldr	r3, [pc, #208]	; (402184 <pio_configure_pin+0x1a0>)
  4020b2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4020b4:	687b      	ldr	r3, [r7, #4]
  4020b6:	f003 031f 	and.w	r3, r3, #31
  4020ba:	2201      	movs	r2, #1
  4020bc:	fa02 f303 	lsl.w	r3, r2, r3
  4020c0:	4619      	mov	r1, r3
  4020c2:	683b      	ldr	r3, [r7, #0]
  4020c4:	f003 0301 	and.w	r3, r3, #1
  4020c8:	461a      	mov	r2, r3
  4020ca:	68f8      	ldr	r0, [r7, #12]
  4020cc:	4b2e      	ldr	r3, [pc, #184]	; (402188 <pio_configure_pin+0x1a4>)
  4020ce:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4020d0:	e050      	b.n	402174 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4020d2:	687b      	ldr	r3, [r7, #4]
  4020d4:	f003 031f 	and.w	r3, r3, #31
  4020d8:	2201      	movs	r2, #1
  4020da:	fa02 f303 	lsl.w	r3, r2, r3
  4020de:	461a      	mov	r2, r3
  4020e0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4020e4:	68f8      	ldr	r0, [r7, #12]
  4020e6:	4b27      	ldr	r3, [pc, #156]	; (402184 <pio_configure_pin+0x1a0>)
  4020e8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4020ea:	687b      	ldr	r3, [r7, #4]
  4020ec:	f003 031f 	and.w	r3, r3, #31
  4020f0:	2201      	movs	r2, #1
  4020f2:	fa02 f303 	lsl.w	r3, r2, r3
  4020f6:	4619      	mov	r1, r3
  4020f8:	683b      	ldr	r3, [r7, #0]
  4020fa:	f003 0301 	and.w	r3, r3, #1
  4020fe:	461a      	mov	r2, r3
  402100:	68f8      	ldr	r0, [r7, #12]
  402102:	4b21      	ldr	r3, [pc, #132]	; (402188 <pio_configure_pin+0x1a4>)
  402104:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402106:	e035      	b.n	402174 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402108:	687b      	ldr	r3, [r7, #4]
  40210a:	f003 031f 	and.w	r3, r3, #31
  40210e:	2201      	movs	r2, #1
  402110:	fa02 f303 	lsl.w	r3, r2, r3
  402114:	683a      	ldr	r2, [r7, #0]
  402116:	4619      	mov	r1, r3
  402118:	68f8      	ldr	r0, [r7, #12]
  40211a:	4b1c      	ldr	r3, [pc, #112]	; (40218c <pio_configure_pin+0x1a8>)
  40211c:	4798      	blx	r3
		break;
  40211e:	e029      	b.n	402174 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402120:	687b      	ldr	r3, [r7, #4]
  402122:	f003 031f 	and.w	r3, r3, #31
  402126:	2201      	movs	r2, #1
  402128:	fa02 f303 	lsl.w	r3, r2, r3
  40212c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40212e:	683b      	ldr	r3, [r7, #0]
  402130:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402134:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402138:	bf0c      	ite	eq
  40213a:	2301      	moveq	r3, #1
  40213c:	2300      	movne	r3, #0
  40213e:	b2db      	uxtb	r3, r3
  402140:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402142:	683b      	ldr	r3, [r7, #0]
  402144:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402148:	2b00      	cmp	r3, #0
  40214a:	bf14      	ite	ne
  40214c:	2301      	movne	r3, #1
  40214e:	2300      	moveq	r3, #0
  402150:	b2db      	uxtb	r3, r3
  402152:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  402154:	683b      	ldr	r3, [r7, #0]
  402156:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40215a:	2b00      	cmp	r3, #0
  40215c:	bf14      	ite	ne
  40215e:	2301      	movne	r3, #1
  402160:	2300      	moveq	r3, #0
  402162:	b2db      	uxtb	r3, r3
  402164:	9300      	str	r3, [sp, #0]
  402166:	4603      	mov	r3, r0
  402168:	68f8      	ldr	r0, [r7, #12]
  40216a:	4c09      	ldr	r4, [pc, #36]	; (402190 <pio_configure_pin+0x1ac>)
  40216c:	47a0      	blx	r4
		break;
  40216e:	e001      	b.n	402174 <pio_configure_pin+0x190>

	default:
		return 0;
  402170:	2300      	movs	r3, #0
  402172:	e000      	b.n	402176 <pio_configure_pin+0x192>
	}

	return 1;
  402174:	2301      	movs	r3, #1
}
  402176:	4618      	mov	r0, r3
  402178:	3714      	adds	r7, #20
  40217a:	46bd      	mov	sp, r7
  40217c:	bd90      	pop	{r4, r7, pc}
  40217e:	bf00      	nop
  402180:	00402195 	.word	0x00402195
  402184:	00401d25 	.word	0x00401d25
  402188:	00401cc5 	.word	0x00401cc5
  40218c:	00401e35 	.word	0x00401e35
  402190:	00401eb5 	.word	0x00401eb5

00402194 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  402194:	b480      	push	{r7}
  402196:	b085      	sub	sp, #20
  402198:	af00      	add	r7, sp, #0
  40219a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40219c:	687b      	ldr	r3, [r7, #4]
  40219e:	095b      	lsrs	r3, r3, #5
  4021a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4021a4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4021a8:	025b      	lsls	r3, r3, #9
  4021aa:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4021ac:	68fb      	ldr	r3, [r7, #12]
}
  4021ae:	4618      	mov	r0, r3
  4021b0:	3714      	adds	r7, #20
  4021b2:	46bd      	mov	sp, r7
  4021b4:	bc80      	pop	{r7}
  4021b6:	4770      	bx	lr

004021b8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b085      	sub	sp, #20
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4021c0:	491c      	ldr	r1, [pc, #112]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  4021c2:	4b1c      	ldr	r3, [pc, #112]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  4021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4021ca:	687b      	ldr	r3, [r7, #4]
  4021cc:	4313      	orrs	r3, r2
  4021ce:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4021d4:	60fb      	str	r3, [r7, #12]
  4021d6:	e007      	b.n	4021e8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021d8:	68fb      	ldr	r3, [r7, #12]
  4021da:	2b00      	cmp	r3, #0
  4021dc:	d101      	bne.n	4021e2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4021de:	2301      	movs	r3, #1
  4021e0:	e023      	b.n	40222a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021e2:	68fb      	ldr	r3, [r7, #12]
  4021e4:	3b01      	subs	r3, #1
  4021e6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021e8:	4b12      	ldr	r3, [pc, #72]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  4021ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021ec:	f003 0308 	and.w	r3, r3, #8
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d0f1      	beq.n	4021d8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4021f4:	4a0f      	ldr	r2, [pc, #60]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  4021f6:	4b0f      	ldr	r3, [pc, #60]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  4021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021fa:	f023 0303 	bic.w	r3, r3, #3
  4021fe:	f043 0302 	orr.w	r3, r3, #2
  402202:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402204:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402208:	60fb      	str	r3, [r7, #12]
  40220a:	e007      	b.n	40221c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40220c:	68fb      	ldr	r3, [r7, #12]
  40220e:	2b00      	cmp	r3, #0
  402210:	d101      	bne.n	402216 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  402212:	2301      	movs	r3, #1
  402214:	e009      	b.n	40222a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  402216:	68fb      	ldr	r3, [r7, #12]
  402218:	3b01      	subs	r3, #1
  40221a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40221c:	4b05      	ldr	r3, [pc, #20]	; (402234 <pmc_switch_mck_to_pllack+0x7c>)
  40221e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402220:	f003 0308 	and.w	r3, r3, #8
  402224:	2b00      	cmp	r3, #0
  402226:	d0f1      	beq.n	40220c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402228:	2300      	movs	r3, #0
}
  40222a:	4618      	mov	r0, r3
  40222c:	3714      	adds	r7, #20
  40222e:	46bd      	mov	sp, r7
  402230:	bc80      	pop	{r7}
  402232:	4770      	bx	lr
  402234:	400e0400 	.word	0x400e0400

00402238 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402238:	b480      	push	{r7}
  40223a:	b083      	sub	sp, #12
  40223c:	af00      	add	r7, sp, #0
  40223e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402240:	687b      	ldr	r3, [r7, #4]
  402242:	2b01      	cmp	r3, #1
  402244:	d107      	bne.n	402256 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402246:	4a08      	ldr	r2, [pc, #32]	; (402268 <pmc_switch_sclk_to_32kxtal+0x30>)
  402248:	4b07      	ldr	r3, [pc, #28]	; (402268 <pmc_switch_sclk_to_32kxtal+0x30>)
  40224a:	689b      	ldr	r3, [r3, #8]
  40224c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  402250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402254:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402256:	4b04      	ldr	r3, [pc, #16]	; (402268 <pmc_switch_sclk_to_32kxtal+0x30>)
  402258:	4a04      	ldr	r2, [pc, #16]	; (40226c <pmc_switch_sclk_to_32kxtal+0x34>)
  40225a:	601a      	str	r2, [r3, #0]
}
  40225c:	bf00      	nop
  40225e:	370c      	adds	r7, #12
  402260:	46bd      	mov	sp, r7
  402262:	bc80      	pop	{r7}
  402264:	4770      	bx	lr
  402266:	bf00      	nop
  402268:	400e1410 	.word	0x400e1410
  40226c:	a5000008 	.word	0xa5000008

00402270 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402270:	b480      	push	{r7}
  402272:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402274:	4b09      	ldr	r3, [pc, #36]	; (40229c <pmc_osc_is_ready_32kxtal+0x2c>)
  402276:	695b      	ldr	r3, [r3, #20]
  402278:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40227c:	2b00      	cmp	r3, #0
  40227e:	d007      	beq.n	402290 <pmc_osc_is_ready_32kxtal+0x20>
  402280:	4b07      	ldr	r3, [pc, #28]	; (4022a0 <pmc_osc_is_ready_32kxtal+0x30>)
  402282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402284:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402288:	2b00      	cmp	r3, #0
  40228a:	d001      	beq.n	402290 <pmc_osc_is_ready_32kxtal+0x20>
  40228c:	2301      	movs	r3, #1
  40228e:	e000      	b.n	402292 <pmc_osc_is_ready_32kxtal+0x22>
  402290:	2300      	movs	r3, #0
}
  402292:	4618      	mov	r0, r3
  402294:	46bd      	mov	sp, r7
  402296:	bc80      	pop	{r7}
  402298:	4770      	bx	lr
  40229a:	bf00      	nop
  40229c:	400e1410 	.word	0x400e1410
  4022a0:	400e0400 	.word	0x400e0400

004022a4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4022a4:	b480      	push	{r7}
  4022a6:	b083      	sub	sp, #12
  4022a8:	af00      	add	r7, sp, #0
  4022aa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4022ac:	4a18      	ldr	r2, [pc, #96]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022ae:	4b18      	ldr	r3, [pc, #96]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022b0:	6a1b      	ldr	r3, [r3, #32]
  4022b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022b6:	f043 0308 	orr.w	r3, r3, #8
  4022ba:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022bc:	bf00      	nop
  4022be:	4b14      	ldr	r3, [pc, #80]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	d0f9      	beq.n	4022be <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4022ca:	4911      	ldr	r1, [pc, #68]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022cc:	4b10      	ldr	r3, [pc, #64]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022ce:	6a1b      	ldr	r3, [r3, #32]
  4022d0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4022d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4022d8:	687a      	ldr	r2, [r7, #4]
  4022da:	4313      	orrs	r3, r2
  4022dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4022e0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022e2:	bf00      	nop
  4022e4:	4b0a      	ldr	r3, [pc, #40]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4022ec:	2b00      	cmp	r3, #0
  4022ee:	d0f9      	beq.n	4022e4 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4022f0:	4a07      	ldr	r2, [pc, #28]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022f2:	4b07      	ldr	r3, [pc, #28]	; (402310 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022f4:	6a1b      	ldr	r3, [r3, #32]
  4022f6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4022fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402302:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402304:	bf00      	nop
  402306:	370c      	adds	r7, #12
  402308:	46bd      	mov	sp, r7
  40230a:	bc80      	pop	{r7}
  40230c:	4770      	bx	lr
  40230e:	bf00      	nop
  402310:	400e0400 	.word	0x400e0400

00402314 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402314:	b480      	push	{r7}
  402316:	b083      	sub	sp, #12
  402318:	af00      	add	r7, sp, #0
  40231a:	6078      	str	r0, [r7, #4]
  40231c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40231e:	687b      	ldr	r3, [r7, #4]
  402320:	2b00      	cmp	r3, #0
  402322:	d008      	beq.n	402336 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402324:	4916      	ldr	r1, [pc, #88]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  402326:	4b16      	ldr	r3, [pc, #88]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  402328:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40232a:	4a16      	ldr	r2, [pc, #88]	; (402384 <pmc_switch_mainck_to_xtal+0x70>)
  40232c:	401a      	ands	r2, r3
  40232e:	4b16      	ldr	r3, [pc, #88]	; (402388 <pmc_switch_mainck_to_xtal+0x74>)
  402330:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402332:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402334:	e01e      	b.n	402374 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402336:	4912      	ldr	r1, [pc, #72]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  402338:	4b11      	ldr	r3, [pc, #68]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  40233a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40233c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402340:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402344:	683a      	ldr	r2, [r7, #0]
  402346:	0212      	lsls	r2, r2, #8
  402348:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40234a:	4313      	orrs	r3, r2
  40234c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402350:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402354:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402356:	bf00      	nop
  402358:	4b09      	ldr	r3, [pc, #36]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  40235a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40235c:	f003 0301 	and.w	r3, r3, #1
  402360:	2b00      	cmp	r3, #0
  402362:	d0f9      	beq.n	402358 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402364:	4a06      	ldr	r2, [pc, #24]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  402366:	4b06      	ldr	r3, [pc, #24]	; (402380 <pmc_switch_mainck_to_xtal+0x6c>)
  402368:	6a1b      	ldr	r3, [r3, #32]
  40236a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402372:	6213      	str	r3, [r2, #32]
}
  402374:	bf00      	nop
  402376:	370c      	adds	r7, #12
  402378:	46bd      	mov	sp, r7
  40237a:	bc80      	pop	{r7}
  40237c:	4770      	bx	lr
  40237e:	bf00      	nop
  402380:	400e0400 	.word	0x400e0400
  402384:	fec8fffc 	.word	0xfec8fffc
  402388:	01370002 	.word	0x01370002

0040238c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40238c:	b480      	push	{r7}
  40238e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402390:	4b03      	ldr	r3, [pc, #12]	; (4023a0 <pmc_osc_is_ready_mainck+0x14>)
  402392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402398:	4618      	mov	r0, r3
  40239a:	46bd      	mov	sp, r7
  40239c:	bc80      	pop	{r7}
  40239e:	4770      	bx	lr
  4023a0:	400e0400 	.word	0x400e0400

004023a4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4023a4:	b480      	push	{r7}
  4023a6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4023a8:	4b03      	ldr	r3, [pc, #12]	; (4023b8 <pmc_disable_pllack+0x14>)
  4023aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4023ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4023b0:	bf00      	nop
  4023b2:	46bd      	mov	sp, r7
  4023b4:	bc80      	pop	{r7}
  4023b6:	4770      	bx	lr
  4023b8:	400e0400 	.word	0x400e0400

004023bc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4023bc:	b480      	push	{r7}
  4023be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4023c0:	4b03      	ldr	r3, [pc, #12]	; (4023d0 <pmc_is_locked_pllack+0x14>)
  4023c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023c4:	f003 0302 	and.w	r3, r3, #2
}
  4023c8:	4618      	mov	r0, r3
  4023ca:	46bd      	mov	sp, r7
  4023cc:	bc80      	pop	{r7}
  4023ce:	4770      	bx	lr
  4023d0:	400e0400 	.word	0x400e0400

004023d4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4023d4:	b480      	push	{r7}
  4023d6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4023d8:	4b03      	ldr	r3, [pc, #12]	; (4023e8 <pmc_disable_pllbck+0x14>)
  4023da:	2200      	movs	r2, #0
  4023dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4023de:	bf00      	nop
  4023e0:	46bd      	mov	sp, r7
  4023e2:	bc80      	pop	{r7}
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop
  4023e8:	400e0400 	.word	0x400e0400

004023ec <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4023ec:	b480      	push	{r7}
  4023ee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4023f0:	4b03      	ldr	r3, [pc, #12]	; (402400 <pmc_is_locked_pllbck+0x14>)
  4023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023f4:	f003 0304 	and.w	r3, r3, #4
}
  4023f8:	4618      	mov	r0, r3
  4023fa:	46bd      	mov	sp, r7
  4023fc:	bc80      	pop	{r7}
  4023fe:	4770      	bx	lr
  402400:	400e0400 	.word	0x400e0400

00402404 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402404:	b480      	push	{r7}
  402406:	b083      	sub	sp, #12
  402408:	af00      	add	r7, sp, #0
  40240a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40240c:	687b      	ldr	r3, [r7, #4]
  40240e:	2b22      	cmp	r3, #34	; 0x22
  402410:	d901      	bls.n	402416 <pmc_enable_periph_clk+0x12>
		return 1;
  402412:	2301      	movs	r3, #1
  402414:	e02f      	b.n	402476 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402416:	687b      	ldr	r3, [r7, #4]
  402418:	2b1f      	cmp	r3, #31
  40241a:	d813      	bhi.n	402444 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40241c:	4b18      	ldr	r3, [pc, #96]	; (402480 <pmc_enable_periph_clk+0x7c>)
  40241e:	699a      	ldr	r2, [r3, #24]
  402420:	2101      	movs	r1, #1
  402422:	687b      	ldr	r3, [r7, #4]
  402424:	fa01 f303 	lsl.w	r3, r1, r3
  402428:	401a      	ands	r2, r3
  40242a:	2101      	movs	r1, #1
  40242c:	687b      	ldr	r3, [r7, #4]
  40242e:	fa01 f303 	lsl.w	r3, r1, r3
  402432:	429a      	cmp	r2, r3
  402434:	d01e      	beq.n	402474 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402436:	4a12      	ldr	r2, [pc, #72]	; (402480 <pmc_enable_periph_clk+0x7c>)
  402438:	2101      	movs	r1, #1
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	fa01 f303 	lsl.w	r3, r1, r3
  402440:	6113      	str	r3, [r2, #16]
  402442:	e017      	b.n	402474 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402444:	687b      	ldr	r3, [r7, #4]
  402446:	3b20      	subs	r3, #32
  402448:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40244a:	4b0d      	ldr	r3, [pc, #52]	; (402480 <pmc_enable_periph_clk+0x7c>)
  40244c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402450:	2101      	movs	r1, #1
  402452:	687b      	ldr	r3, [r7, #4]
  402454:	fa01 f303 	lsl.w	r3, r1, r3
  402458:	401a      	ands	r2, r3
  40245a:	2101      	movs	r1, #1
  40245c:	687b      	ldr	r3, [r7, #4]
  40245e:	fa01 f303 	lsl.w	r3, r1, r3
  402462:	429a      	cmp	r2, r3
  402464:	d006      	beq.n	402474 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402466:	4a06      	ldr	r2, [pc, #24]	; (402480 <pmc_enable_periph_clk+0x7c>)
  402468:	2101      	movs	r1, #1
  40246a:	687b      	ldr	r3, [r7, #4]
  40246c:	fa01 f303 	lsl.w	r3, r1, r3
  402470:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402474:	2300      	movs	r3, #0
}
  402476:	4618      	mov	r0, r3
  402478:	370c      	adds	r7, #12
  40247a:	46bd      	mov	sp, r7
  40247c:	bc80      	pop	{r7}
  40247e:	4770      	bx	lr
  402480:	400e0400 	.word	0x400e0400

00402484 <sysclk_enable_peripheral_clock>:
{
  402484:	b580      	push	{r7, lr}
  402486:	b082      	sub	sp, #8
  402488:	af00      	add	r7, sp, #0
  40248a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40248c:	6878      	ldr	r0, [r7, #4]
  40248e:	4b03      	ldr	r3, [pc, #12]	; (40249c <sysclk_enable_peripheral_clock+0x18>)
  402490:	4798      	blx	r3
}
  402492:	bf00      	nop
  402494:	3708      	adds	r7, #8
  402496:	46bd      	mov	sp, r7
  402498:	bd80      	pop	{r7, pc}
  40249a:	bf00      	nop
  40249c:	00402405 	.word	0x00402405

004024a0 <ioport_init>:
{
  4024a0:	b580      	push	{r7, lr}
  4024a2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  4024a4:	200b      	movs	r0, #11
  4024a6:	4b03      	ldr	r3, [pc, #12]	; (4024b4 <ioport_init+0x14>)
  4024a8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4024aa:	200c      	movs	r0, #12
  4024ac:	4b01      	ldr	r3, [pc, #4]	; (4024b4 <ioport_init+0x14>)
  4024ae:	4798      	blx	r3
}
  4024b0:	bf00      	nop
  4024b2:	bd80      	pop	{r7, pc}
  4024b4:	00402485 	.word	0x00402485

004024b8 <ioport_set_pin_mode>:
{
  4024b8:	b480      	push	{r7}
  4024ba:	b08d      	sub	sp, #52	; 0x34
  4024bc:	af00      	add	r7, sp, #0
  4024be:	6078      	str	r0, [r7, #4]
  4024c0:	6039      	str	r1, [r7, #0]
  4024c2:	687b      	ldr	r3, [r7, #4]
  4024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4024c6:	683b      	ldr	r3, [r7, #0]
  4024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  4024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024cc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024d0:	095a      	lsrs	r2, r3, #5
  4024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4024d4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4024d6:	6a3b      	ldr	r3, [r7, #32]
  4024d8:	f003 031f 	and.w	r3, r3, #31
  4024dc:	2101      	movs	r1, #1
  4024de:	fa01 f303 	lsl.w	r3, r1, r3
  4024e2:	61fa      	str	r2, [r7, #28]
  4024e4:	61bb      	str	r3, [r7, #24]
  4024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4024e8:	617b      	str	r3, [r7, #20]
  4024ea:	69fb      	ldr	r3, [r7, #28]
  4024ec:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4024ee:	693b      	ldr	r3, [r7, #16]
  4024f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4024f4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4024f8:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4024fa:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4024fc:	697b      	ldr	r3, [r7, #20]
  4024fe:	f003 0308 	and.w	r3, r3, #8
  402502:	2b00      	cmp	r3, #0
  402504:	d003      	beq.n	40250e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  402506:	68fb      	ldr	r3, [r7, #12]
  402508:	69ba      	ldr	r2, [r7, #24]
  40250a:	665a      	str	r2, [r3, #100]	; 0x64
  40250c:	e002      	b.n	402514 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  40250e:	68fb      	ldr	r3, [r7, #12]
  402510:	69ba      	ldr	r2, [r7, #24]
  402512:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  402514:	697b      	ldr	r3, [r7, #20]
  402516:	f003 0310 	and.w	r3, r3, #16
  40251a:	2b00      	cmp	r3, #0
  40251c:	d004      	beq.n	402528 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40251e:	68fb      	ldr	r3, [r7, #12]
  402520:	69ba      	ldr	r2, [r7, #24]
  402522:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  402526:	e003      	b.n	402530 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  402528:	68fb      	ldr	r3, [r7, #12]
  40252a:	69ba      	ldr	r2, [r7, #24]
  40252c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402530:	697b      	ldr	r3, [r7, #20]
  402532:	f003 0320 	and.w	r3, r3, #32
  402536:	2b00      	cmp	r3, #0
  402538:	d003      	beq.n	402542 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40253a:	68fb      	ldr	r3, [r7, #12]
  40253c:	69ba      	ldr	r2, [r7, #24]
  40253e:	651a      	str	r2, [r3, #80]	; 0x50
  402540:	e002      	b.n	402548 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  402542:	68fb      	ldr	r3, [r7, #12]
  402544:	69ba      	ldr	r2, [r7, #24]
  402546:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  402548:	697b      	ldr	r3, [r7, #20]
  40254a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40254e:	2b00      	cmp	r3, #0
  402550:	d003      	beq.n	40255a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402552:	68fb      	ldr	r3, [r7, #12]
  402554:	69ba      	ldr	r2, [r7, #24]
  402556:	621a      	str	r2, [r3, #32]
  402558:	e002      	b.n	402560 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  40255a:	68fb      	ldr	r3, [r7, #12]
  40255c:	69ba      	ldr	r2, [r7, #24]
  40255e:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  402560:	697b      	ldr	r3, [r7, #20]
  402562:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402566:	2b00      	cmp	r3, #0
  402568:	d004      	beq.n	402574 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  40256a:	68fb      	ldr	r3, [r7, #12]
  40256c:	69ba      	ldr	r2, [r7, #24]
  40256e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402572:	e003      	b.n	40257c <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  402574:	68fb      	ldr	r3, [r7, #12]
  402576:	69ba      	ldr	r2, [r7, #24]
  402578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40257c:	697b      	ldr	r3, [r7, #20]
  40257e:	f003 0301 	and.w	r3, r3, #1
  402582:	2b00      	cmp	r3, #0
  402584:	d006      	beq.n	402594 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402586:	68fb      	ldr	r3, [r7, #12]
  402588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40258a:	69bb      	ldr	r3, [r7, #24]
  40258c:	431a      	orrs	r2, r3
  40258e:	68fb      	ldr	r3, [r7, #12]
  402590:	671a      	str	r2, [r3, #112]	; 0x70
  402592:	e006      	b.n	4025a2 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  402594:	68fb      	ldr	r3, [r7, #12]
  402596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402598:	69bb      	ldr	r3, [r7, #24]
  40259a:	43db      	mvns	r3, r3
  40259c:	401a      	ands	r2, r3
  40259e:	68fb      	ldr	r3, [r7, #12]
  4025a0:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  4025a2:	697b      	ldr	r3, [r7, #20]
  4025a4:	f003 0302 	and.w	r3, r3, #2
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	d006      	beq.n	4025ba <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4025ac:	68fb      	ldr	r3, [r7, #12]
  4025ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4025b0:	69bb      	ldr	r3, [r7, #24]
  4025b2:	431a      	orrs	r2, r3
  4025b4:	68fb      	ldr	r3, [r7, #12]
  4025b6:	675a      	str	r2, [r3, #116]	; 0x74
}
  4025b8:	e006      	b.n	4025c8 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  4025ba:	68fb      	ldr	r3, [r7, #12]
  4025bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4025be:	69bb      	ldr	r3, [r7, #24]
  4025c0:	43db      	mvns	r3, r3
  4025c2:	401a      	ands	r2, r3
  4025c4:	68fb      	ldr	r3, [r7, #12]
  4025c6:	675a      	str	r2, [r3, #116]	; 0x74
  4025c8:	bf00      	nop
  4025ca:	3734      	adds	r7, #52	; 0x34
  4025cc:	46bd      	mov	sp, r7
  4025ce:	bc80      	pop	{r7}
  4025d0:	4770      	bx	lr

004025d2 <ioport_set_pin_dir>:
{
  4025d2:	b480      	push	{r7}
  4025d4:	b08d      	sub	sp, #52	; 0x34
  4025d6:	af00      	add	r7, sp, #0
  4025d8:	6078      	str	r0, [r7, #4]
  4025da:	460b      	mov	r3, r1
  4025dc:	70fb      	strb	r3, [r7, #3]
  4025de:	687b      	ldr	r3, [r7, #4]
  4025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4025e2:	78fb      	ldrb	r3, [r7, #3]
  4025e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025ea:	627b      	str	r3, [r7, #36]	; 0x24
  4025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025ee:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4025f0:	6a3b      	ldr	r3, [r7, #32]
  4025f2:	095b      	lsrs	r3, r3, #5
  4025f4:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4025f6:	69fb      	ldr	r3, [r7, #28]
  4025f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4025fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402600:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402602:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  402604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402608:	2b01      	cmp	r3, #1
  40260a:	d109      	bne.n	402620 <ioport_set_pin_dir+0x4e>
  40260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40260e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402610:	697b      	ldr	r3, [r7, #20]
  402612:	f003 031f 	and.w	r3, r3, #31
  402616:	2201      	movs	r2, #1
  402618:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40261a:	69bb      	ldr	r3, [r7, #24]
  40261c:	611a      	str	r2, [r3, #16]
  40261e:	e00c      	b.n	40263a <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402624:	2b00      	cmp	r3, #0
  402626:	d108      	bne.n	40263a <ioport_set_pin_dir+0x68>
  402628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40262a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40262c:	693b      	ldr	r3, [r7, #16]
  40262e:	f003 031f 	and.w	r3, r3, #31
  402632:	2201      	movs	r2, #1
  402634:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402636:	69bb      	ldr	r3, [r7, #24]
  402638:	615a      	str	r2, [r3, #20]
  40263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40263c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40263e:	68fb      	ldr	r3, [r7, #12]
  402640:	f003 031f 	and.w	r3, r3, #31
  402644:	2201      	movs	r2, #1
  402646:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402648:	69bb      	ldr	r3, [r7, #24]
  40264a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  40264e:	bf00      	nop
  402650:	3734      	adds	r7, #52	; 0x34
  402652:	46bd      	mov	sp, r7
  402654:	bc80      	pop	{r7}
  402656:	4770      	bx	lr

00402658 <ioport_set_pin_level>:
{
  402658:	b480      	push	{r7}
  40265a:	b08b      	sub	sp, #44	; 0x2c
  40265c:	af00      	add	r7, sp, #0
  40265e:	6078      	str	r0, [r7, #4]
  402660:	460b      	mov	r3, r1
  402662:	70fb      	strb	r3, [r7, #3]
  402664:	687b      	ldr	r3, [r7, #4]
  402666:	627b      	str	r3, [r7, #36]	; 0x24
  402668:	78fb      	ldrb	r3, [r7, #3]
  40266a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402670:	61fb      	str	r3, [r7, #28]
  402672:	69fb      	ldr	r3, [r7, #28]
  402674:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402676:	69bb      	ldr	r3, [r7, #24]
  402678:	095b      	lsrs	r3, r3, #5
  40267a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40267c:	697b      	ldr	r3, [r7, #20]
  40267e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402682:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402686:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402688:	613b      	str	r3, [r7, #16]
	if (level) {
  40268a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40268e:	2b00      	cmp	r3, #0
  402690:	d009      	beq.n	4026a6 <ioport_set_pin_level+0x4e>
  402692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402694:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402696:	68fb      	ldr	r3, [r7, #12]
  402698:	f003 031f 	and.w	r3, r3, #31
  40269c:	2201      	movs	r2, #1
  40269e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026a0:	693b      	ldr	r3, [r7, #16]
  4026a2:	631a      	str	r2, [r3, #48]	; 0x30
}
  4026a4:	e008      	b.n	4026b8 <ioport_set_pin_level+0x60>
  4026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4026a8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4026aa:	68bb      	ldr	r3, [r7, #8]
  4026ac:	f003 031f 	and.w	r3, r3, #31
  4026b0:	2201      	movs	r2, #1
  4026b2:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4026b4:	693b      	ldr	r3, [r7, #16]
  4026b6:	635a      	str	r2, [r3, #52]	; 0x34
  4026b8:	bf00      	nop
  4026ba:	372c      	adds	r7, #44	; 0x2c
  4026bc:	46bd      	mov	sp, r7
  4026be:	bc80      	pop	{r7}
  4026c0:	4770      	bx	lr
	...

004026c4 <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  4026c4:	b580      	push	{r7, lr}
  4026c6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  4026c8:	484b      	ldr	r0, [pc, #300]	; (4027f8 <board_init+0x134>)
  4026ca:	4b4c      	ldr	r3, [pc, #304]	; (4027fc <board_init+0x138>)
  4026cc:	4798      	blx	r3
	
	ioport_init();
  4026ce:	4b4c      	ldr	r3, [pc, #304]	; (402800 <board_init+0x13c>)
  4026d0:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  4026d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4026d6:	2009      	movs	r0, #9
  4026d8:	4b4a      	ldr	r3, [pc, #296]	; (402804 <board_init+0x140>)
  4026da:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4026dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4026e0:	2009      	movs	r0, #9
  4026e2:	4b48      	ldr	r3, [pc, #288]	; (402804 <board_init+0x140>)
  4026e4:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  4026e6:	2101      	movs	r1, #1
  4026e8:	2009      	movs	r0, #9
  4026ea:	4b47      	ldr	r3, [pc, #284]	; (402808 <board_init+0x144>)
  4026ec:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  4026ee:	2100      	movs	r1, #0
  4026f0:	2009      	movs	r0, #9
  4026f2:	4b46      	ldr	r3, [pc, #280]	; (40280c <board_init+0x148>)
  4026f4:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  4026f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4026fa:	2007      	movs	r0, #7
  4026fc:	4b41      	ldr	r3, [pc, #260]	; (402804 <board_init+0x140>)
  4026fe:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  402700:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402704:	2007      	movs	r0, #7
  402706:	4b3f      	ldr	r3, [pc, #252]	; (402804 <board_init+0x140>)
  402708:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  40270a:	2101      	movs	r1, #1
  40270c:	2007      	movs	r0, #7
  40270e:	4b3e      	ldr	r3, [pc, #248]	; (402808 <board_init+0x144>)
  402710:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  402712:	2100      	movs	r1, #0
  402714:	2007      	movs	r0, #7
  402716:	4b3d      	ldr	r3, [pc, #244]	; (40280c <board_init+0x148>)
  402718:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  40271a:	493d      	ldr	r1, [pc, #244]	; (402810 <board_init+0x14c>)
  40271c:	2021      	movs	r0, #33	; 0x21
  40271e:	4b39      	ldr	r3, [pc, #228]	; (402804 <board_init+0x140>)
  402720:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  402722:	2100      	movs	r1, #0
  402724:	2021      	movs	r0, #33	; 0x21
  402726:	4b38      	ldr	r3, [pc, #224]	; (402808 <board_init+0x144>)
  402728:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  40272a:	2108      	movs	r1, #8
  40272c:	2021      	movs	r0, #33	; 0x21
  40272e:	4b39      	ldr	r3, [pc, #228]	; (402814 <board_init+0x150>)
  402730:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  402732:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402736:	2005      	movs	r0, #5
  402738:	4b32      	ldr	r3, [pc, #200]	; (402804 <board_init+0x140>)
  40273a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  40273c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402740:	2006      	movs	r0, #6
  402742:	4b30      	ldr	r3, [pc, #192]	; (402804 <board_init+0x140>)
  402744:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  402746:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40274a:	2008      	movs	r0, #8
  40274c:	4b2d      	ldr	r3, [pc, #180]	; (402804 <board_init+0x140>)
  40274e:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  402750:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402754:	2011      	movs	r0, #17
  402756:	4b2b      	ldr	r3, [pc, #172]	; (402804 <board_init+0x140>)
  402758:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40275a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40275e:	2003      	movs	r0, #3
  402760:	4b28      	ldr	r3, [pc, #160]	; (402804 <board_init+0x140>)
  402762:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  402764:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402768:	2004      	movs	r0, #4
  40276a:	4b26      	ldr	r3, [pc, #152]	; (402804 <board_init+0x140>)
  40276c:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  40276e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402772:	200a      	movs	r0, #10
  402774:	4b23      	ldr	r3, [pc, #140]	; (402804 <board_init+0x140>)
  402776:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  402778:	2101      	movs	r1, #1
  40277a:	200a      	movs	r0, #10
  40277c:	4b22      	ldr	r3, [pc, #136]	; (402808 <board_init+0x144>)
  40277e:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  402780:	2100      	movs	r1, #0
  402782:	200a      	movs	r0, #10
  402784:	4b21      	ldr	r3, [pc, #132]	; (40280c <board_init+0x148>)
  402786:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  402788:	2171      	movs	r1, #113	; 0x71
  40278a:	2010      	movs	r0, #16
  40278c:	4b1d      	ldr	r3, [pc, #116]	; (402804 <board_init+0x140>)
  40278e:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  402790:	2171      	movs	r1, #113	; 0x71
  402792:	200f      	movs	r0, #15
  402794:	4b1b      	ldr	r3, [pc, #108]	; (402804 <board_init+0x140>)
  402796:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  402798:	491f      	ldr	r1, [pc, #124]	; (402818 <board_init+0x154>)
  40279a:	2018      	movs	r0, #24
  40279c:	4b19      	ldr	r3, [pc, #100]	; (402804 <board_init+0x140>)
  40279e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  4027a0:	491d      	ldr	r1, [pc, #116]	; (402818 <board_init+0x154>)
  4027a2:	2019      	movs	r0, #25
  4027a4:	4b17      	ldr	r3, [pc, #92]	; (402804 <board_init+0x140>)
  4027a6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  4027a8:	491b      	ldr	r1, [pc, #108]	; (402818 <board_init+0x154>)
  4027aa:	201a      	movs	r0, #26
  4027ac:	4b15      	ldr	r3, [pc, #84]	; (402804 <board_init+0x140>)
  4027ae:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  4027b0:	4919      	ldr	r1, [pc, #100]	; (402818 <board_init+0x154>)
  4027b2:	201b      	movs	r0, #27
  4027b4:	4b13      	ldr	r3, [pc, #76]	; (402804 <board_init+0x140>)
  4027b6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  4027b8:	4917      	ldr	r1, [pc, #92]	; (402818 <board_init+0x154>)
  4027ba:	201c      	movs	r0, #28
  4027bc:	4b11      	ldr	r3, [pc, #68]	; (402804 <board_init+0x140>)
  4027be:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  4027c0:	4915      	ldr	r1, [pc, #84]	; (402818 <board_init+0x154>)
  4027c2:	201d      	movs	r0, #29
  4027c4:	4b0f      	ldr	r3, [pc, #60]	; (402804 <board_init+0x140>)
  4027c6:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  4027c8:	4913      	ldr	r1, [pc, #76]	; (402818 <board_init+0x154>)
  4027ca:	201e      	movs	r0, #30
  4027cc:	4b0d      	ldr	r3, [pc, #52]	; (402804 <board_init+0x140>)
  4027ce:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  4027d0:	4911      	ldr	r1, [pc, #68]	; (402818 <board_init+0x154>)
  4027d2:	201f      	movs	r0, #31
  4027d4:	4b0b      	ldr	r3, [pc, #44]	; (402804 <board_init+0x140>)
  4027d6:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  4027d8:	2171      	movs	r1, #113	; 0x71
  4027da:	2012      	movs	r0, #18
  4027dc:	4b09      	ldr	r3, [pc, #36]	; (402804 <board_init+0x140>)
  4027de:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  4027e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027e4:	2013      	movs	r0, #19
  4027e6:	4b07      	ldr	r3, [pc, #28]	; (402804 <board_init+0x140>)
  4027e8:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  4027ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027ee:	2014      	movs	r0, #20
  4027f0:	4b04      	ldr	r3, [pc, #16]	; (402804 <board_init+0x140>)
  4027f2:	4798      	blx	r3
}
  4027f4:	bf00      	nop
  4027f6:	bd80      	pop	{r7, pc}
  4027f8:	400e1450 	.word	0x400e1450
  4027fc:	0040054d 	.word	0x0040054d
  402800:	004024a1 	.word	0x004024a1
  402804:	00401fe5 	.word	0x00401fe5
  402808:	004025d3 	.word	0x004025d3
  40280c:	00402659 	.word	0x00402659
  402810:	28000079 	.word	0x28000079
  402814:	004024b9 	.word	0x004024b9
  402818:	28000001 	.word	0x28000001

0040281c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40281c:	b580      	push	{r7, lr}
  40281e:	b084      	sub	sp, #16
  402820:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  402822:	4b27      	ldr	r3, [pc, #156]	; (4028c0 <Reset_Handler+0xa4>)
  402824:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  402826:	4b27      	ldr	r3, [pc, #156]	; (4028c4 <Reset_Handler+0xa8>)
  402828:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40282a:	68fa      	ldr	r2, [r7, #12]
  40282c:	68bb      	ldr	r3, [r7, #8]
  40282e:	429a      	cmp	r2, r3
  402830:	d90d      	bls.n	40284e <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  402832:	e007      	b.n	402844 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  402834:	68bb      	ldr	r3, [r7, #8]
  402836:	1d1a      	adds	r2, r3, #4
  402838:	60ba      	str	r2, [r7, #8]
  40283a:	68fa      	ldr	r2, [r7, #12]
  40283c:	1d11      	adds	r1, r2, #4
  40283e:	60f9      	str	r1, [r7, #12]
  402840:	6812      	ldr	r2, [r2, #0]
  402842:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  402844:	68bb      	ldr	r3, [r7, #8]
  402846:	4a20      	ldr	r2, [pc, #128]	; (4028c8 <Reset_Handler+0xac>)
  402848:	4293      	cmp	r3, r2
  40284a:	d3f3      	bcc.n	402834 <Reset_Handler+0x18>
  40284c:	e020      	b.n	402890 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  40284e:	68fa      	ldr	r2, [r7, #12]
  402850:	68bb      	ldr	r3, [r7, #8]
  402852:	429a      	cmp	r2, r3
  402854:	d21c      	bcs.n	402890 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402856:	4a1c      	ldr	r2, [pc, #112]	; (4028c8 <Reset_Handler+0xac>)
  402858:	4b1a      	ldr	r3, [pc, #104]	; (4028c4 <Reset_Handler+0xa8>)
  40285a:	1ad3      	subs	r3, r2, r3
  40285c:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40285e:	68fa      	ldr	r2, [r7, #12]
  402860:	687b      	ldr	r3, [r7, #4]
  402862:	4413      	add	r3, r2
  402864:	3b04      	subs	r3, #4
  402866:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  402868:	68ba      	ldr	r2, [r7, #8]
  40286a:	687b      	ldr	r3, [r7, #4]
  40286c:	4413      	add	r3, r2
  40286e:	3b04      	subs	r3, #4
  402870:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  402872:	e00a      	b.n	40288a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  402874:	68bb      	ldr	r3, [r7, #8]
  402876:	1f1a      	subs	r2, r3, #4
  402878:	60ba      	str	r2, [r7, #8]
  40287a:	68fa      	ldr	r2, [r7, #12]
  40287c:	1f11      	subs	r1, r2, #4
  40287e:	60f9      	str	r1, [r7, #12]
  402880:	6812      	ldr	r2, [r2, #0]
  402882:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  402884:	687b      	ldr	r3, [r7, #4]
  402886:	3b04      	subs	r3, #4
  402888:	607b      	str	r3, [r7, #4]
  40288a:	687b      	ldr	r3, [r7, #4]
  40288c:	2b00      	cmp	r3, #0
  40288e:	d1f1      	bne.n	402874 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402890:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402892:	4b0e      	ldr	r3, [pc, #56]	; (4028cc <Reset_Handler+0xb0>)
  402894:	60bb      	str	r3, [r7, #8]
  402896:	e004      	b.n	4028a2 <Reset_Handler+0x86>
		*pDest++ = 0;
  402898:	68bb      	ldr	r3, [r7, #8]
  40289a:	1d1a      	adds	r2, r3, #4
  40289c:	60ba      	str	r2, [r7, #8]
  40289e:	2200      	movs	r2, #0
  4028a0:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  4028a2:	68bb      	ldr	r3, [r7, #8]
  4028a4:	4a0a      	ldr	r2, [pc, #40]	; (4028d0 <Reset_Handler+0xb4>)
  4028a6:	4293      	cmp	r3, r2
  4028a8:	d3f6      	bcc.n	402898 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4028aa:	4b0a      	ldr	r3, [pc, #40]	; (4028d4 <Reset_Handler+0xb8>)
  4028ac:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  4028ae:	4a0a      	ldr	r2, [pc, #40]	; (4028d8 <Reset_Handler+0xbc>)
  4028b0:	68fb      	ldr	r3, [r7, #12]
  4028b2:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4028b4:	4b09      	ldr	r3, [pc, #36]	; (4028dc <Reset_Handler+0xc0>)
  4028b6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4028b8:	4b09      	ldr	r3, [pc, #36]	; (4028e0 <Reset_Handler+0xc4>)
  4028ba:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4028bc:	e7fe      	b.n	4028bc <Reset_Handler+0xa0>
  4028be:	bf00      	nop
  4028c0:	00407f34 	.word	0x00407f34
  4028c4:	20000000 	.word	0x20000000
  4028c8:	200009bc 	.word	0x200009bc
  4028cc:	200009bc 	.word	0x200009bc
  4028d0:	200089b4 	.word	0x200089b4
  4028d4:	00400000 	.word	0x00400000
  4028d8:	e000ed00 	.word	0xe000ed00
  4028dc:	00402efd 	.word	0x00402efd
  4028e0:	00402b71 	.word	0x00402b71

004028e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4028e4:	b480      	push	{r7}
  4028e6:	af00      	add	r7, sp, #0
	while (1) {
  4028e8:	e7fe      	b.n	4028e8 <Dummy_Handler+0x4>
	...

004028ec <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  4028ec:	b480      	push	{r7}
  4028ee:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4028f0:	4b5d      	ldr	r3, [pc, #372]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  4028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028f4:	f003 0303 	and.w	r3, r3, #3
  4028f8:	2b03      	cmp	r3, #3
  4028fa:	f200 8096 	bhi.w	402a2a <SystemCoreClockUpdate+0x13e>
  4028fe:	a201      	add	r2, pc, #4	; (adr r2, 402904 <SystemCoreClockUpdate+0x18>)
  402900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402904:	00402915 	.word	0x00402915
  402908:	00402935 	.word	0x00402935
  40290c:	0040297f 	.word	0x0040297f
  402910:	0040297f 	.word	0x0040297f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402914:	4b55      	ldr	r3, [pc, #340]	; (402a6c <SystemCoreClockUpdate+0x180>)
  402916:	695b      	ldr	r3, [r3, #20]
  402918:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40291c:	2b00      	cmp	r3, #0
  40291e:	d004      	beq.n	40292a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402920:	4b53      	ldr	r3, [pc, #332]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402922:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402926:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402928:	e080      	b.n	402a2c <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40292a:	4b51      	ldr	r3, [pc, #324]	; (402a70 <SystemCoreClockUpdate+0x184>)
  40292c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402930:	601a      	str	r2, [r3, #0]
		break;
  402932:	e07b      	b.n	402a2c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402934:	4b4c      	ldr	r3, [pc, #304]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402936:	6a1b      	ldr	r3, [r3, #32]
  402938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40293c:	2b00      	cmp	r3, #0
  40293e:	d003      	beq.n	402948 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402940:	4b4b      	ldr	r3, [pc, #300]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402942:	4a4c      	ldr	r2, [pc, #304]	; (402a74 <SystemCoreClockUpdate+0x188>)
  402944:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  402946:	e071      	b.n	402a2c <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402948:	4b49      	ldr	r3, [pc, #292]	; (402a70 <SystemCoreClockUpdate+0x184>)
  40294a:	4a4b      	ldr	r2, [pc, #300]	; (402a78 <SystemCoreClockUpdate+0x18c>)
  40294c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40294e:	4b46      	ldr	r3, [pc, #280]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402950:	6a1b      	ldr	r3, [r3, #32]
  402952:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402956:	2b10      	cmp	r3, #16
  402958:	d008      	beq.n	40296c <SystemCoreClockUpdate+0x80>
  40295a:	2b20      	cmp	r3, #32
  40295c:	d00a      	beq.n	402974 <SystemCoreClockUpdate+0x88>
  40295e:	2b00      	cmp	r3, #0
  402960:	d000      	beq.n	402964 <SystemCoreClockUpdate+0x78>
			break;
  402962:	e00b      	b.n	40297c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402964:	4b42      	ldr	r3, [pc, #264]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402966:	4a44      	ldr	r2, [pc, #272]	; (402a78 <SystemCoreClockUpdate+0x18c>)
  402968:	601a      	str	r2, [r3, #0]
			break;
  40296a:	e007      	b.n	40297c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40296c:	4b40      	ldr	r3, [pc, #256]	; (402a70 <SystemCoreClockUpdate+0x184>)
  40296e:	4a43      	ldr	r2, [pc, #268]	; (402a7c <SystemCoreClockUpdate+0x190>)
  402970:	601a      	str	r2, [r3, #0]
			break;
  402972:	e003      	b.n	40297c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402974:	4b3e      	ldr	r3, [pc, #248]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402976:	4a3f      	ldr	r2, [pc, #252]	; (402a74 <SystemCoreClockUpdate+0x188>)
  402978:	601a      	str	r2, [r3, #0]
			break;
  40297a:	bf00      	nop
		break;
  40297c:	e056      	b.n	402a2c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40297e:	4b3a      	ldr	r3, [pc, #232]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402980:	6a1b      	ldr	r3, [r3, #32]
  402982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402986:	2b00      	cmp	r3, #0
  402988:	d003      	beq.n	402992 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40298a:	4b39      	ldr	r3, [pc, #228]	; (402a70 <SystemCoreClockUpdate+0x184>)
  40298c:	4a39      	ldr	r2, [pc, #228]	; (402a74 <SystemCoreClockUpdate+0x188>)
  40298e:	601a      	str	r2, [r3, #0]
  402990:	e019      	b.n	4029c6 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402992:	4b37      	ldr	r3, [pc, #220]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402994:	4a38      	ldr	r2, [pc, #224]	; (402a78 <SystemCoreClockUpdate+0x18c>)
  402996:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402998:	4b33      	ldr	r3, [pc, #204]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  40299a:	6a1b      	ldr	r3, [r3, #32]
  40299c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029a0:	2b10      	cmp	r3, #16
  4029a2:	d008      	beq.n	4029b6 <SystemCoreClockUpdate+0xca>
  4029a4:	2b20      	cmp	r3, #32
  4029a6:	d00a      	beq.n	4029be <SystemCoreClockUpdate+0xd2>
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d000      	beq.n	4029ae <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4029ac:	e00b      	b.n	4029c6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4029ae:	4b30      	ldr	r3, [pc, #192]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029b0:	4a31      	ldr	r2, [pc, #196]	; (402a78 <SystemCoreClockUpdate+0x18c>)
  4029b2:	601a      	str	r2, [r3, #0]
					break;
  4029b4:	e007      	b.n	4029c6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4029b6:	4b2e      	ldr	r3, [pc, #184]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029b8:	4a30      	ldr	r2, [pc, #192]	; (402a7c <SystemCoreClockUpdate+0x190>)
  4029ba:	601a      	str	r2, [r3, #0]
					break;
  4029bc:	e003      	b.n	4029c6 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4029be:	4b2c      	ldr	r3, [pc, #176]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029c0:	4a2c      	ldr	r2, [pc, #176]	; (402a74 <SystemCoreClockUpdate+0x188>)
  4029c2:	601a      	str	r2, [r3, #0]
					break;
  4029c4:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4029c6:	4b28      	ldr	r3, [pc, #160]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  4029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029ca:	f003 0303 	and.w	r3, r3, #3
  4029ce:	2b02      	cmp	r3, #2
  4029d0:	d115      	bne.n	4029fe <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4029d2:	4b25      	ldr	r3, [pc, #148]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  4029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  4029d6:	0c1b      	lsrs	r3, r3, #16
  4029d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4029dc:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4029de:	4a24      	ldr	r2, [pc, #144]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029e0:	6812      	ldr	r2, [r2, #0]
  4029e2:	fb02 f303 	mul.w	r3, r2, r3
  4029e6:	4a22      	ldr	r2, [pc, #136]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029e8:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4029ea:	4b1f      	ldr	r3, [pc, #124]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  4029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4029ee:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4029f0:	4a1f      	ldr	r2, [pc, #124]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029f2:	6812      	ldr	r2, [r2, #0]
  4029f4:	fbb2 f3f3 	udiv	r3, r2, r3
  4029f8:	4a1d      	ldr	r2, [pc, #116]	; (402a70 <SystemCoreClockUpdate+0x184>)
  4029fa:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4029fc:	e016      	b.n	402a2c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4029fe:	4b1a      	ldr	r3, [pc, #104]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402a02:	0c1b      	lsrs	r3, r3, #16
  402a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402a08:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402a0a:	4a19      	ldr	r2, [pc, #100]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a0c:	6812      	ldr	r2, [r2, #0]
  402a0e:	fb02 f303 	mul.w	r3, r2, r3
  402a12:	4a17      	ldr	r2, [pc, #92]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a14:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402a16:	4b14      	ldr	r3, [pc, #80]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402a1a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402a1c:	4a14      	ldr	r2, [pc, #80]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a1e:	6812      	ldr	r2, [r2, #0]
  402a20:	fbb2 f3f3 	udiv	r3, r2, r3
  402a24:	4a12      	ldr	r2, [pc, #72]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a26:	6013      	str	r3, [r2, #0]
		break;
  402a28:	e000      	b.n	402a2c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  402a2a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402a2c:	4b0e      	ldr	r3, [pc, #56]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402a34:	2b70      	cmp	r3, #112	; 0x70
  402a36:	d108      	bne.n	402a4a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  402a38:	4b0d      	ldr	r3, [pc, #52]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a3a:	681b      	ldr	r3, [r3, #0]
  402a3c:	4a10      	ldr	r2, [pc, #64]	; (402a80 <SystemCoreClockUpdate+0x194>)
  402a3e:	fba2 2303 	umull	r2, r3, r2, r3
  402a42:	085b      	lsrs	r3, r3, #1
  402a44:	4a0a      	ldr	r2, [pc, #40]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a46:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402a48:	e00a      	b.n	402a60 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402a4a:	4b07      	ldr	r3, [pc, #28]	; (402a68 <SystemCoreClockUpdate+0x17c>)
  402a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a4e:	091b      	lsrs	r3, r3, #4
  402a50:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  402a54:	4a06      	ldr	r2, [pc, #24]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a56:	6812      	ldr	r2, [r2, #0]
  402a58:	fa22 f303 	lsr.w	r3, r2, r3
  402a5c:	4a04      	ldr	r2, [pc, #16]	; (402a70 <SystemCoreClockUpdate+0x184>)
  402a5e:	6013      	str	r3, [r2, #0]
}
  402a60:	bf00      	nop
  402a62:	46bd      	mov	sp, r7
  402a64:	bc80      	pop	{r7}
  402a66:	4770      	bx	lr
  402a68:	400e0400 	.word	0x400e0400
  402a6c:	400e1410 	.word	0x400e1410
  402a70:	2000000c 	.word	0x2000000c
  402a74:	00b71b00 	.word	0x00b71b00
  402a78:	003d0900 	.word	0x003d0900
  402a7c:	007a1200 	.word	0x007a1200
  402a80:	aaaaaaab 	.word	0xaaaaaaab

00402a84 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  402a84:	b480      	push	{r7}
  402a86:	b083      	sub	sp, #12
  402a88:	af00      	add	r7, sp, #0
  402a8a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402a8c:	687b      	ldr	r3, [r7, #4]
  402a8e:	4a18      	ldr	r2, [pc, #96]	; (402af0 <system_init_flash+0x6c>)
  402a90:	4293      	cmp	r3, r2
  402a92:	d804      	bhi.n	402a9e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a94:	4b17      	ldr	r3, [pc, #92]	; (402af4 <system_init_flash+0x70>)
  402a96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a9a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402a9c:	e023      	b.n	402ae6 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402a9e:	687b      	ldr	r3, [r7, #4]
  402aa0:	4a15      	ldr	r2, [pc, #84]	; (402af8 <system_init_flash+0x74>)
  402aa2:	4293      	cmp	r3, r2
  402aa4:	d803      	bhi.n	402aae <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402aa6:	4b13      	ldr	r3, [pc, #76]	; (402af4 <system_init_flash+0x70>)
  402aa8:	4a14      	ldr	r2, [pc, #80]	; (402afc <system_init_flash+0x78>)
  402aaa:	601a      	str	r2, [r3, #0]
}
  402aac:	e01b      	b.n	402ae6 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402aae:	687b      	ldr	r3, [r7, #4]
  402ab0:	4a13      	ldr	r2, [pc, #76]	; (402b00 <system_init_flash+0x7c>)
  402ab2:	4293      	cmp	r3, r2
  402ab4:	d803      	bhi.n	402abe <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ab6:	4b0f      	ldr	r3, [pc, #60]	; (402af4 <system_init_flash+0x70>)
  402ab8:	4a12      	ldr	r2, [pc, #72]	; (402b04 <system_init_flash+0x80>)
  402aba:	601a      	str	r2, [r3, #0]
}
  402abc:	e013      	b.n	402ae6 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402abe:	687b      	ldr	r3, [r7, #4]
  402ac0:	4a11      	ldr	r2, [pc, #68]	; (402b08 <system_init_flash+0x84>)
  402ac2:	4293      	cmp	r3, r2
  402ac4:	d803      	bhi.n	402ace <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402ac6:	4b0b      	ldr	r3, [pc, #44]	; (402af4 <system_init_flash+0x70>)
  402ac8:	4a10      	ldr	r2, [pc, #64]	; (402b0c <system_init_flash+0x88>)
  402aca:	601a      	str	r2, [r3, #0]
}
  402acc:	e00b      	b.n	402ae6 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402ace:	687b      	ldr	r3, [r7, #4]
  402ad0:	4a0f      	ldr	r2, [pc, #60]	; (402b10 <system_init_flash+0x8c>)
  402ad2:	4293      	cmp	r3, r2
  402ad4:	d804      	bhi.n	402ae0 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402ad6:	4b07      	ldr	r3, [pc, #28]	; (402af4 <system_init_flash+0x70>)
  402ad8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402adc:	601a      	str	r2, [r3, #0]
}
  402ade:	e002      	b.n	402ae6 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402ae0:	4b04      	ldr	r3, [pc, #16]	; (402af4 <system_init_flash+0x70>)
  402ae2:	4a0c      	ldr	r2, [pc, #48]	; (402b14 <system_init_flash+0x90>)
  402ae4:	601a      	str	r2, [r3, #0]
}
  402ae6:	bf00      	nop
  402ae8:	370c      	adds	r7, #12
  402aea:	46bd      	mov	sp, r7
  402aec:	bc80      	pop	{r7}
  402aee:	4770      	bx	lr
  402af0:	01312cff 	.word	0x01312cff
  402af4:	400e0a00 	.word	0x400e0a00
  402af8:	026259ff 	.word	0x026259ff
  402afc:	04000100 	.word	0x04000100
  402b00:	039386ff 	.word	0x039386ff
  402b04:	04000200 	.word	0x04000200
  402b08:	04c4b3ff 	.word	0x04c4b3ff
  402b0c:	04000300 	.word	0x04000300
  402b10:	05f5e0ff 	.word	0x05f5e0ff
  402b14:	04000500 	.word	0x04000500

00402b18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  402b18:	b480      	push	{r7}
  402b1a:	b085      	sub	sp, #20
  402b1c:	af00      	add	r7, sp, #0
  402b1e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  402b20:	4b10      	ldr	r3, [pc, #64]	; (402b64 <_sbrk+0x4c>)
  402b22:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  402b24:	4b10      	ldr	r3, [pc, #64]	; (402b68 <_sbrk+0x50>)
  402b26:	681b      	ldr	r3, [r3, #0]
  402b28:	2b00      	cmp	r3, #0
  402b2a:	d102      	bne.n	402b32 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  402b2c:	4b0e      	ldr	r3, [pc, #56]	; (402b68 <_sbrk+0x50>)
  402b2e:	4a0f      	ldr	r2, [pc, #60]	; (402b6c <_sbrk+0x54>)
  402b30:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402b32:	4b0d      	ldr	r3, [pc, #52]	; (402b68 <_sbrk+0x50>)
  402b34:	681b      	ldr	r3, [r3, #0]
  402b36:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  402b38:	68ba      	ldr	r2, [r7, #8]
  402b3a:	687b      	ldr	r3, [r7, #4]
  402b3c:	441a      	add	r2, r3
  402b3e:	68fb      	ldr	r3, [r7, #12]
  402b40:	429a      	cmp	r2, r3
  402b42:	dd02      	ble.n	402b4a <_sbrk+0x32>
		return (caddr_t) -1;	
  402b44:	f04f 33ff 	mov.w	r3, #4294967295
  402b48:	e006      	b.n	402b58 <_sbrk+0x40>
	}

	heap += incr;
  402b4a:	4b07      	ldr	r3, [pc, #28]	; (402b68 <_sbrk+0x50>)
  402b4c:	681a      	ldr	r2, [r3, #0]
  402b4e:	687b      	ldr	r3, [r7, #4]
  402b50:	4413      	add	r3, r2
  402b52:	4a05      	ldr	r2, [pc, #20]	; (402b68 <_sbrk+0x50>)
  402b54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402b56:	68bb      	ldr	r3, [r7, #8]
}
  402b58:	4618      	mov	r0, r3
  402b5a:	3714      	adds	r7, #20
  402b5c:	46bd      	mov	sp, r7
  402b5e:	bc80      	pop	{r7}
  402b60:	4770      	bx	lr
  402b62:	bf00      	nop
  402b64:	2001fffc 	.word	0x2001fffc
  402b68:	20008970 	.word	0x20008970
  402b6c:	2000b9b8 	.word	0x2000b9b8

00402b70 <main>:
		}
	}
}

int main (void)
{
  402b70:	b580      	push	{r7, lr}
  402b72:	b082      	sub	sp, #8
  402b74:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  402b76:	4b10      	ldr	r3, [pc, #64]	; (402bb8 <main+0x48>)
  402b78:	4798      	blx	r3
	board_init();
  402b7a:	4b10      	ldr	r3, [pc, #64]	; (402bbc <main+0x4c>)
  402b7c:	4798      	blx	r3
	configure_tc();
  402b7e:	4b10      	ldr	r3, [pc, #64]	; (402bc0 <main+0x50>)
  402b80:	4798      	blx	r3
	tc_start(TC0, 0);
  402b82:	2100      	movs	r1, #0
  402b84:	480f      	ldr	r0, [pc, #60]	; (402bc4 <main+0x54>)
  402b86:	4b10      	ldr	r3, [pc, #64]	; (402bc8 <main+0x58>)
  402b88:	4798      	blx	r3
	
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi 
  402b8a:	4b10      	ldr	r3, [pc, #64]	; (402bcc <main+0x5c>)
  402b8c:	4798      	blx	r3
	//configure_camera();		// configures and initializes camera module
	reboot_wifi();			// reboots the wifi chip (takes several seconds)
  402b8e:	4b10      	ldr	r3, [pc, #64]	; (402bd0 <main+0x60>)
  402b90:	4798      	blx	r3
	
	configure_i2s(); // microphone configuration
  402b92:	4b10      	ldr	r3, [pc, #64]	; (402bd4 <main+0x64>)
  402b94:	4798      	blx	r3
	
	uint8_t handle = open_websocket();
  402b96:	4b10      	ldr	r3, [pc, #64]	; (402bd8 <main+0x68>)
  402b98:	4798      	blx	r3
  402b9a:	4603      	mov	r3, r0
  402b9c:	71fb      	strb	r3, [r7, #7]

	start_i2s_capture();
  402b9e:	4b0f      	ldr	r3, [pc, #60]	; (402bdc <main+0x6c>)
  402ba0:	4798      	blx	r3
	while(!buffer_filled) {};
  402ba2:	bf00      	nop
  402ba4:	4b0e      	ldr	r3, [pc, #56]	; (402be0 <main+0x70>)
  402ba6:	681b      	ldr	r3, [r3, #0]
  402ba8:	2b00      	cmp	r3, #0
  402baa:	d0fb      	beq.n	402ba4 <main+0x34>
	
	while(1) {
		//if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
		//	setup_wifi();		// the wifi chip tries to reassociate to a new network
		//}
		send_data_ws(i2s_rec_buf, handle);	
  402bac:	79fb      	ldrb	r3, [r7, #7]
  402bae:	4619      	mov	r1, r3
  402bb0:	480c      	ldr	r0, [pc, #48]	; (402be4 <main+0x74>)
  402bb2:	4b0d      	ldr	r3, [pc, #52]	; (402be8 <main+0x78>)
  402bb4:	4798      	blx	r3
  402bb6:	e7f9      	b.n	402bac <main+0x3c>
  402bb8:	00401c55 	.word	0x00401c55
  402bbc:	004026c5 	.word	0x004026c5
  402bc0:	00400e5d 	.word	0x00400e5d
  402bc4:	40010000 	.word	0x40010000
  402bc8:	0040041d 	.word	0x0040041d
  402bcc:	00401835 	.word	0x00401835
  402bd0:	00401865 	.word	0x00401865
  402bd4:	004007bd 	.word	0x004007bd
  402bd8:	004013a9 	.word	0x004013a9
  402bdc:	004006f9 	.word	0x004006f9
  402be0:	200009dc 	.word	0x200009dc
  402be4:	200009e0 	.word	0x200009e0
  402be8:	00401495 	.word	0x00401495

00402bec <__aeabi_uldivmod>:
  402bec:	b953      	cbnz	r3, 402c04 <__aeabi_uldivmod+0x18>
  402bee:	b94a      	cbnz	r2, 402c04 <__aeabi_uldivmod+0x18>
  402bf0:	2900      	cmp	r1, #0
  402bf2:	bf08      	it	eq
  402bf4:	2800      	cmpeq	r0, #0
  402bf6:	bf1c      	itt	ne
  402bf8:	f04f 31ff 	movne.w	r1, #4294967295
  402bfc:	f04f 30ff 	movne.w	r0, #4294967295
  402c00:	f000 b97a 	b.w	402ef8 <__aeabi_idiv0>
  402c04:	f1ad 0c08 	sub.w	ip, sp, #8
  402c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402c0c:	f000 f806 	bl	402c1c <__udivmoddi4>
  402c10:	f8dd e004 	ldr.w	lr, [sp, #4]
  402c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402c18:	b004      	add	sp, #16
  402c1a:	4770      	bx	lr

00402c1c <__udivmoddi4>:
  402c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c20:	468c      	mov	ip, r1
  402c22:	460d      	mov	r5, r1
  402c24:	4604      	mov	r4, r0
  402c26:	9e08      	ldr	r6, [sp, #32]
  402c28:	2b00      	cmp	r3, #0
  402c2a:	d151      	bne.n	402cd0 <__udivmoddi4+0xb4>
  402c2c:	428a      	cmp	r2, r1
  402c2e:	4617      	mov	r7, r2
  402c30:	d96d      	bls.n	402d0e <__udivmoddi4+0xf2>
  402c32:	fab2 fe82 	clz	lr, r2
  402c36:	f1be 0f00 	cmp.w	lr, #0
  402c3a:	d00b      	beq.n	402c54 <__udivmoddi4+0x38>
  402c3c:	f1ce 0c20 	rsb	ip, lr, #32
  402c40:	fa01 f50e 	lsl.w	r5, r1, lr
  402c44:	fa20 fc0c 	lsr.w	ip, r0, ip
  402c48:	fa02 f70e 	lsl.w	r7, r2, lr
  402c4c:	ea4c 0c05 	orr.w	ip, ip, r5
  402c50:	fa00 f40e 	lsl.w	r4, r0, lr
  402c54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402c58:	0c25      	lsrs	r5, r4, #16
  402c5a:	fbbc f8fa 	udiv	r8, ip, sl
  402c5e:	fa1f f987 	uxth.w	r9, r7
  402c62:	fb0a cc18 	mls	ip, sl, r8, ip
  402c66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402c6a:	fb08 f309 	mul.w	r3, r8, r9
  402c6e:	42ab      	cmp	r3, r5
  402c70:	d90a      	bls.n	402c88 <__udivmoddi4+0x6c>
  402c72:	19ed      	adds	r5, r5, r7
  402c74:	f108 32ff 	add.w	r2, r8, #4294967295
  402c78:	f080 8123 	bcs.w	402ec2 <__udivmoddi4+0x2a6>
  402c7c:	42ab      	cmp	r3, r5
  402c7e:	f240 8120 	bls.w	402ec2 <__udivmoddi4+0x2a6>
  402c82:	f1a8 0802 	sub.w	r8, r8, #2
  402c86:	443d      	add	r5, r7
  402c88:	1aed      	subs	r5, r5, r3
  402c8a:	b2a4      	uxth	r4, r4
  402c8c:	fbb5 f0fa 	udiv	r0, r5, sl
  402c90:	fb0a 5510 	mls	r5, sl, r0, r5
  402c94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402c98:	fb00 f909 	mul.w	r9, r0, r9
  402c9c:	45a1      	cmp	r9, r4
  402c9e:	d909      	bls.n	402cb4 <__udivmoddi4+0x98>
  402ca0:	19e4      	adds	r4, r4, r7
  402ca2:	f100 33ff 	add.w	r3, r0, #4294967295
  402ca6:	f080 810a 	bcs.w	402ebe <__udivmoddi4+0x2a2>
  402caa:	45a1      	cmp	r9, r4
  402cac:	f240 8107 	bls.w	402ebe <__udivmoddi4+0x2a2>
  402cb0:	3802      	subs	r0, #2
  402cb2:	443c      	add	r4, r7
  402cb4:	eba4 0409 	sub.w	r4, r4, r9
  402cb8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402cbc:	2100      	movs	r1, #0
  402cbe:	2e00      	cmp	r6, #0
  402cc0:	d061      	beq.n	402d86 <__udivmoddi4+0x16a>
  402cc2:	fa24 f40e 	lsr.w	r4, r4, lr
  402cc6:	2300      	movs	r3, #0
  402cc8:	6034      	str	r4, [r6, #0]
  402cca:	6073      	str	r3, [r6, #4]
  402ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cd0:	428b      	cmp	r3, r1
  402cd2:	d907      	bls.n	402ce4 <__udivmoddi4+0xc8>
  402cd4:	2e00      	cmp	r6, #0
  402cd6:	d054      	beq.n	402d82 <__udivmoddi4+0x166>
  402cd8:	2100      	movs	r1, #0
  402cda:	e886 0021 	stmia.w	r6, {r0, r5}
  402cde:	4608      	mov	r0, r1
  402ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ce4:	fab3 f183 	clz	r1, r3
  402ce8:	2900      	cmp	r1, #0
  402cea:	f040 808e 	bne.w	402e0a <__udivmoddi4+0x1ee>
  402cee:	42ab      	cmp	r3, r5
  402cf0:	d302      	bcc.n	402cf8 <__udivmoddi4+0xdc>
  402cf2:	4282      	cmp	r2, r0
  402cf4:	f200 80fa 	bhi.w	402eec <__udivmoddi4+0x2d0>
  402cf8:	1a84      	subs	r4, r0, r2
  402cfa:	eb65 0503 	sbc.w	r5, r5, r3
  402cfe:	2001      	movs	r0, #1
  402d00:	46ac      	mov	ip, r5
  402d02:	2e00      	cmp	r6, #0
  402d04:	d03f      	beq.n	402d86 <__udivmoddi4+0x16a>
  402d06:	e886 1010 	stmia.w	r6, {r4, ip}
  402d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d0e:	b912      	cbnz	r2, 402d16 <__udivmoddi4+0xfa>
  402d10:	2701      	movs	r7, #1
  402d12:	fbb7 f7f2 	udiv	r7, r7, r2
  402d16:	fab7 fe87 	clz	lr, r7
  402d1a:	f1be 0f00 	cmp.w	lr, #0
  402d1e:	d134      	bne.n	402d8a <__udivmoddi4+0x16e>
  402d20:	1beb      	subs	r3, r5, r7
  402d22:	0c3a      	lsrs	r2, r7, #16
  402d24:	fa1f fc87 	uxth.w	ip, r7
  402d28:	2101      	movs	r1, #1
  402d2a:	fbb3 f8f2 	udiv	r8, r3, r2
  402d2e:	0c25      	lsrs	r5, r4, #16
  402d30:	fb02 3318 	mls	r3, r2, r8, r3
  402d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402d38:	fb0c f308 	mul.w	r3, ip, r8
  402d3c:	42ab      	cmp	r3, r5
  402d3e:	d907      	bls.n	402d50 <__udivmoddi4+0x134>
  402d40:	19ed      	adds	r5, r5, r7
  402d42:	f108 30ff 	add.w	r0, r8, #4294967295
  402d46:	d202      	bcs.n	402d4e <__udivmoddi4+0x132>
  402d48:	42ab      	cmp	r3, r5
  402d4a:	f200 80d1 	bhi.w	402ef0 <__udivmoddi4+0x2d4>
  402d4e:	4680      	mov	r8, r0
  402d50:	1aed      	subs	r5, r5, r3
  402d52:	b2a3      	uxth	r3, r4
  402d54:	fbb5 f0f2 	udiv	r0, r5, r2
  402d58:	fb02 5510 	mls	r5, r2, r0, r5
  402d5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402d60:	fb0c fc00 	mul.w	ip, ip, r0
  402d64:	45a4      	cmp	ip, r4
  402d66:	d907      	bls.n	402d78 <__udivmoddi4+0x15c>
  402d68:	19e4      	adds	r4, r4, r7
  402d6a:	f100 33ff 	add.w	r3, r0, #4294967295
  402d6e:	d202      	bcs.n	402d76 <__udivmoddi4+0x15a>
  402d70:	45a4      	cmp	ip, r4
  402d72:	f200 80b8 	bhi.w	402ee6 <__udivmoddi4+0x2ca>
  402d76:	4618      	mov	r0, r3
  402d78:	eba4 040c 	sub.w	r4, r4, ip
  402d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402d80:	e79d      	b.n	402cbe <__udivmoddi4+0xa2>
  402d82:	4631      	mov	r1, r6
  402d84:	4630      	mov	r0, r6
  402d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d8a:	f1ce 0420 	rsb	r4, lr, #32
  402d8e:	fa05 f30e 	lsl.w	r3, r5, lr
  402d92:	fa07 f70e 	lsl.w	r7, r7, lr
  402d96:	fa20 f804 	lsr.w	r8, r0, r4
  402d9a:	0c3a      	lsrs	r2, r7, #16
  402d9c:	fa25 f404 	lsr.w	r4, r5, r4
  402da0:	ea48 0803 	orr.w	r8, r8, r3
  402da4:	fbb4 f1f2 	udiv	r1, r4, r2
  402da8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402dac:	fb02 4411 	mls	r4, r2, r1, r4
  402db0:	fa1f fc87 	uxth.w	ip, r7
  402db4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402db8:	fb01 f30c 	mul.w	r3, r1, ip
  402dbc:	42ab      	cmp	r3, r5
  402dbe:	fa00 f40e 	lsl.w	r4, r0, lr
  402dc2:	d909      	bls.n	402dd8 <__udivmoddi4+0x1bc>
  402dc4:	19ed      	adds	r5, r5, r7
  402dc6:	f101 30ff 	add.w	r0, r1, #4294967295
  402dca:	f080 808a 	bcs.w	402ee2 <__udivmoddi4+0x2c6>
  402dce:	42ab      	cmp	r3, r5
  402dd0:	f240 8087 	bls.w	402ee2 <__udivmoddi4+0x2c6>
  402dd4:	3902      	subs	r1, #2
  402dd6:	443d      	add	r5, r7
  402dd8:	1aeb      	subs	r3, r5, r3
  402dda:	fa1f f588 	uxth.w	r5, r8
  402dde:	fbb3 f0f2 	udiv	r0, r3, r2
  402de2:	fb02 3310 	mls	r3, r2, r0, r3
  402de6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402dea:	fb00 f30c 	mul.w	r3, r0, ip
  402dee:	42ab      	cmp	r3, r5
  402df0:	d907      	bls.n	402e02 <__udivmoddi4+0x1e6>
  402df2:	19ed      	adds	r5, r5, r7
  402df4:	f100 38ff 	add.w	r8, r0, #4294967295
  402df8:	d26f      	bcs.n	402eda <__udivmoddi4+0x2be>
  402dfa:	42ab      	cmp	r3, r5
  402dfc:	d96d      	bls.n	402eda <__udivmoddi4+0x2be>
  402dfe:	3802      	subs	r0, #2
  402e00:	443d      	add	r5, r7
  402e02:	1aeb      	subs	r3, r5, r3
  402e04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402e08:	e78f      	b.n	402d2a <__udivmoddi4+0x10e>
  402e0a:	f1c1 0720 	rsb	r7, r1, #32
  402e0e:	fa22 f807 	lsr.w	r8, r2, r7
  402e12:	408b      	lsls	r3, r1
  402e14:	fa05 f401 	lsl.w	r4, r5, r1
  402e18:	ea48 0303 	orr.w	r3, r8, r3
  402e1c:	fa20 fe07 	lsr.w	lr, r0, r7
  402e20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402e24:	40fd      	lsrs	r5, r7
  402e26:	ea4e 0e04 	orr.w	lr, lr, r4
  402e2a:	fbb5 f9fc 	udiv	r9, r5, ip
  402e2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402e32:	fb0c 5519 	mls	r5, ip, r9, r5
  402e36:	fa1f f883 	uxth.w	r8, r3
  402e3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402e3e:	fb09 f408 	mul.w	r4, r9, r8
  402e42:	42ac      	cmp	r4, r5
  402e44:	fa02 f201 	lsl.w	r2, r2, r1
  402e48:	fa00 fa01 	lsl.w	sl, r0, r1
  402e4c:	d908      	bls.n	402e60 <__udivmoddi4+0x244>
  402e4e:	18ed      	adds	r5, r5, r3
  402e50:	f109 30ff 	add.w	r0, r9, #4294967295
  402e54:	d243      	bcs.n	402ede <__udivmoddi4+0x2c2>
  402e56:	42ac      	cmp	r4, r5
  402e58:	d941      	bls.n	402ede <__udivmoddi4+0x2c2>
  402e5a:	f1a9 0902 	sub.w	r9, r9, #2
  402e5e:	441d      	add	r5, r3
  402e60:	1b2d      	subs	r5, r5, r4
  402e62:	fa1f fe8e 	uxth.w	lr, lr
  402e66:	fbb5 f0fc 	udiv	r0, r5, ip
  402e6a:	fb0c 5510 	mls	r5, ip, r0, r5
  402e6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402e72:	fb00 f808 	mul.w	r8, r0, r8
  402e76:	45a0      	cmp	r8, r4
  402e78:	d907      	bls.n	402e8a <__udivmoddi4+0x26e>
  402e7a:	18e4      	adds	r4, r4, r3
  402e7c:	f100 35ff 	add.w	r5, r0, #4294967295
  402e80:	d229      	bcs.n	402ed6 <__udivmoddi4+0x2ba>
  402e82:	45a0      	cmp	r8, r4
  402e84:	d927      	bls.n	402ed6 <__udivmoddi4+0x2ba>
  402e86:	3802      	subs	r0, #2
  402e88:	441c      	add	r4, r3
  402e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402e8e:	eba4 0408 	sub.w	r4, r4, r8
  402e92:	fba0 8902 	umull	r8, r9, r0, r2
  402e96:	454c      	cmp	r4, r9
  402e98:	46c6      	mov	lr, r8
  402e9a:	464d      	mov	r5, r9
  402e9c:	d315      	bcc.n	402eca <__udivmoddi4+0x2ae>
  402e9e:	d012      	beq.n	402ec6 <__udivmoddi4+0x2aa>
  402ea0:	b156      	cbz	r6, 402eb8 <__udivmoddi4+0x29c>
  402ea2:	ebba 030e 	subs.w	r3, sl, lr
  402ea6:	eb64 0405 	sbc.w	r4, r4, r5
  402eaa:	fa04 f707 	lsl.w	r7, r4, r7
  402eae:	40cb      	lsrs	r3, r1
  402eb0:	431f      	orrs	r7, r3
  402eb2:	40cc      	lsrs	r4, r1
  402eb4:	6037      	str	r7, [r6, #0]
  402eb6:	6074      	str	r4, [r6, #4]
  402eb8:	2100      	movs	r1, #0
  402eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ebe:	4618      	mov	r0, r3
  402ec0:	e6f8      	b.n	402cb4 <__udivmoddi4+0x98>
  402ec2:	4690      	mov	r8, r2
  402ec4:	e6e0      	b.n	402c88 <__udivmoddi4+0x6c>
  402ec6:	45c2      	cmp	sl, r8
  402ec8:	d2ea      	bcs.n	402ea0 <__udivmoddi4+0x284>
  402eca:	ebb8 0e02 	subs.w	lr, r8, r2
  402ece:	eb69 0503 	sbc.w	r5, r9, r3
  402ed2:	3801      	subs	r0, #1
  402ed4:	e7e4      	b.n	402ea0 <__udivmoddi4+0x284>
  402ed6:	4628      	mov	r0, r5
  402ed8:	e7d7      	b.n	402e8a <__udivmoddi4+0x26e>
  402eda:	4640      	mov	r0, r8
  402edc:	e791      	b.n	402e02 <__udivmoddi4+0x1e6>
  402ede:	4681      	mov	r9, r0
  402ee0:	e7be      	b.n	402e60 <__udivmoddi4+0x244>
  402ee2:	4601      	mov	r1, r0
  402ee4:	e778      	b.n	402dd8 <__udivmoddi4+0x1bc>
  402ee6:	3802      	subs	r0, #2
  402ee8:	443c      	add	r4, r7
  402eea:	e745      	b.n	402d78 <__udivmoddi4+0x15c>
  402eec:	4608      	mov	r0, r1
  402eee:	e708      	b.n	402d02 <__udivmoddi4+0xe6>
  402ef0:	f1a8 0802 	sub.w	r8, r8, #2
  402ef4:	443d      	add	r5, r7
  402ef6:	e72b      	b.n	402d50 <__udivmoddi4+0x134>

00402ef8 <__aeabi_idiv0>:
  402ef8:	4770      	bx	lr
  402efa:	bf00      	nop

00402efc <__libc_init_array>:
  402efc:	b570      	push	{r4, r5, r6, lr}
  402efe:	4e0f      	ldr	r6, [pc, #60]	; (402f3c <__libc_init_array+0x40>)
  402f00:	4d0f      	ldr	r5, [pc, #60]	; (402f40 <__libc_init_array+0x44>)
  402f02:	1b76      	subs	r6, r6, r5
  402f04:	10b6      	asrs	r6, r6, #2
  402f06:	bf18      	it	ne
  402f08:	2400      	movne	r4, #0
  402f0a:	d005      	beq.n	402f18 <__libc_init_array+0x1c>
  402f0c:	3401      	adds	r4, #1
  402f0e:	f855 3b04 	ldr.w	r3, [r5], #4
  402f12:	4798      	blx	r3
  402f14:	42a6      	cmp	r6, r4
  402f16:	d1f9      	bne.n	402f0c <__libc_init_array+0x10>
  402f18:	4e0a      	ldr	r6, [pc, #40]	; (402f44 <__libc_init_array+0x48>)
  402f1a:	4d0b      	ldr	r5, [pc, #44]	; (402f48 <__libc_init_array+0x4c>)
  402f1c:	1b76      	subs	r6, r6, r5
  402f1e:	f004 fff3 	bl	407f08 <_init>
  402f22:	10b6      	asrs	r6, r6, #2
  402f24:	bf18      	it	ne
  402f26:	2400      	movne	r4, #0
  402f28:	d006      	beq.n	402f38 <__libc_init_array+0x3c>
  402f2a:	3401      	adds	r4, #1
  402f2c:	f855 3b04 	ldr.w	r3, [r5], #4
  402f30:	4798      	blx	r3
  402f32:	42a6      	cmp	r6, r4
  402f34:	d1f9      	bne.n	402f2a <__libc_init_array+0x2e>
  402f36:	bd70      	pop	{r4, r5, r6, pc}
  402f38:	bd70      	pop	{r4, r5, r6, pc}
  402f3a:	bf00      	nop
  402f3c:	00407f14 	.word	0x00407f14
  402f40:	00407f14 	.word	0x00407f14
  402f44:	00407f1c 	.word	0x00407f1c
  402f48:	00407f14 	.word	0x00407f14

00402f4c <memset>:
  402f4c:	b470      	push	{r4, r5, r6}
  402f4e:	0786      	lsls	r6, r0, #30
  402f50:	d046      	beq.n	402fe0 <memset+0x94>
  402f52:	1e54      	subs	r4, r2, #1
  402f54:	2a00      	cmp	r2, #0
  402f56:	d041      	beq.n	402fdc <memset+0x90>
  402f58:	b2ca      	uxtb	r2, r1
  402f5a:	4603      	mov	r3, r0
  402f5c:	e002      	b.n	402f64 <memset+0x18>
  402f5e:	f114 34ff 	adds.w	r4, r4, #4294967295
  402f62:	d33b      	bcc.n	402fdc <memset+0x90>
  402f64:	f803 2b01 	strb.w	r2, [r3], #1
  402f68:	079d      	lsls	r5, r3, #30
  402f6a:	d1f8      	bne.n	402f5e <memset+0x12>
  402f6c:	2c03      	cmp	r4, #3
  402f6e:	d92e      	bls.n	402fce <memset+0x82>
  402f70:	b2cd      	uxtb	r5, r1
  402f72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402f76:	2c0f      	cmp	r4, #15
  402f78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402f7c:	d919      	bls.n	402fb2 <memset+0x66>
  402f7e:	f103 0210 	add.w	r2, r3, #16
  402f82:	4626      	mov	r6, r4
  402f84:	3e10      	subs	r6, #16
  402f86:	2e0f      	cmp	r6, #15
  402f88:	f842 5c10 	str.w	r5, [r2, #-16]
  402f8c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402f90:	f842 5c08 	str.w	r5, [r2, #-8]
  402f94:	f842 5c04 	str.w	r5, [r2, #-4]
  402f98:	f102 0210 	add.w	r2, r2, #16
  402f9c:	d8f2      	bhi.n	402f84 <memset+0x38>
  402f9e:	f1a4 0210 	sub.w	r2, r4, #16
  402fa2:	f022 020f 	bic.w	r2, r2, #15
  402fa6:	f004 040f 	and.w	r4, r4, #15
  402faa:	3210      	adds	r2, #16
  402fac:	2c03      	cmp	r4, #3
  402fae:	4413      	add	r3, r2
  402fb0:	d90d      	bls.n	402fce <memset+0x82>
  402fb2:	461e      	mov	r6, r3
  402fb4:	4622      	mov	r2, r4
  402fb6:	3a04      	subs	r2, #4
  402fb8:	2a03      	cmp	r2, #3
  402fba:	f846 5b04 	str.w	r5, [r6], #4
  402fbe:	d8fa      	bhi.n	402fb6 <memset+0x6a>
  402fc0:	1f22      	subs	r2, r4, #4
  402fc2:	f022 0203 	bic.w	r2, r2, #3
  402fc6:	3204      	adds	r2, #4
  402fc8:	4413      	add	r3, r2
  402fca:	f004 0403 	and.w	r4, r4, #3
  402fce:	b12c      	cbz	r4, 402fdc <memset+0x90>
  402fd0:	b2c9      	uxtb	r1, r1
  402fd2:	441c      	add	r4, r3
  402fd4:	f803 1b01 	strb.w	r1, [r3], #1
  402fd8:	429c      	cmp	r4, r3
  402fda:	d1fb      	bne.n	402fd4 <memset+0x88>
  402fdc:	bc70      	pop	{r4, r5, r6}
  402fde:	4770      	bx	lr
  402fe0:	4614      	mov	r4, r2
  402fe2:	4603      	mov	r3, r0
  402fe4:	e7c2      	b.n	402f6c <memset+0x20>
  402fe6:	bf00      	nop

00402fe8 <sprintf>:
  402fe8:	b40e      	push	{r1, r2, r3}
  402fea:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fec:	b09c      	sub	sp, #112	; 0x70
  402fee:	ab21      	add	r3, sp, #132	; 0x84
  402ff0:	490f      	ldr	r1, [pc, #60]	; (403030 <sprintf+0x48>)
  402ff2:	f853 2b04 	ldr.w	r2, [r3], #4
  402ff6:	9301      	str	r3, [sp, #4]
  402ff8:	4605      	mov	r5, r0
  402ffa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  402ffe:	6808      	ldr	r0, [r1, #0]
  403000:	9502      	str	r5, [sp, #8]
  403002:	f44f 7702 	mov.w	r7, #520	; 0x208
  403006:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40300a:	a902      	add	r1, sp, #8
  40300c:	9506      	str	r5, [sp, #24]
  40300e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403012:	9404      	str	r4, [sp, #16]
  403014:	9407      	str	r4, [sp, #28]
  403016:	f8ad 6016 	strh.w	r6, [sp, #22]
  40301a:	f000 fae3 	bl	4035e4 <_svfprintf_r>
  40301e:	9b02      	ldr	r3, [sp, #8]
  403020:	2200      	movs	r2, #0
  403022:	701a      	strb	r2, [r3, #0]
  403024:	b01c      	add	sp, #112	; 0x70
  403026:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40302a:	b003      	add	sp, #12
  40302c:	4770      	bx	lr
  40302e:	bf00      	nop
  403030:	20000010 	.word	0x20000010
	...

00403040 <strlen>:
  403040:	f890 f000 	pld	[r0]
  403044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403048:	f020 0107 	bic.w	r1, r0, #7
  40304c:	f06f 0c00 	mvn.w	ip, #0
  403050:	f010 0407 	ands.w	r4, r0, #7
  403054:	f891 f020 	pld	[r1, #32]
  403058:	f040 8049 	bne.w	4030ee <strlen+0xae>
  40305c:	f04f 0400 	mov.w	r4, #0
  403060:	f06f 0007 	mvn.w	r0, #7
  403064:	e9d1 2300 	ldrd	r2, r3, [r1]
  403068:	f891 f040 	pld	[r1, #64]	; 0x40
  40306c:	f100 0008 	add.w	r0, r0, #8
  403070:	fa82 f24c 	uadd8	r2, r2, ip
  403074:	faa4 f28c 	sel	r2, r4, ip
  403078:	fa83 f34c 	uadd8	r3, r3, ip
  40307c:	faa2 f38c 	sel	r3, r2, ip
  403080:	bb4b      	cbnz	r3, 4030d6 <strlen+0x96>
  403082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403086:	fa82 f24c 	uadd8	r2, r2, ip
  40308a:	f100 0008 	add.w	r0, r0, #8
  40308e:	faa4 f28c 	sel	r2, r4, ip
  403092:	fa83 f34c 	uadd8	r3, r3, ip
  403096:	faa2 f38c 	sel	r3, r2, ip
  40309a:	b9e3      	cbnz	r3, 4030d6 <strlen+0x96>
  40309c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4030a0:	fa82 f24c 	uadd8	r2, r2, ip
  4030a4:	f100 0008 	add.w	r0, r0, #8
  4030a8:	faa4 f28c 	sel	r2, r4, ip
  4030ac:	fa83 f34c 	uadd8	r3, r3, ip
  4030b0:	faa2 f38c 	sel	r3, r2, ip
  4030b4:	b97b      	cbnz	r3, 4030d6 <strlen+0x96>
  4030b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4030ba:	f101 0120 	add.w	r1, r1, #32
  4030be:	fa82 f24c 	uadd8	r2, r2, ip
  4030c2:	f100 0008 	add.w	r0, r0, #8
  4030c6:	faa4 f28c 	sel	r2, r4, ip
  4030ca:	fa83 f34c 	uadd8	r3, r3, ip
  4030ce:	faa2 f38c 	sel	r3, r2, ip
  4030d2:	2b00      	cmp	r3, #0
  4030d4:	d0c6      	beq.n	403064 <strlen+0x24>
  4030d6:	2a00      	cmp	r2, #0
  4030d8:	bf04      	itt	eq
  4030da:	3004      	addeq	r0, #4
  4030dc:	461a      	moveq	r2, r3
  4030de:	ba12      	rev	r2, r2
  4030e0:	fab2 f282 	clz	r2, r2
  4030e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4030e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4030ec:	4770      	bx	lr
  4030ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4030f2:	f004 0503 	and.w	r5, r4, #3
  4030f6:	f1c4 0000 	rsb	r0, r4, #0
  4030fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4030fe:	f014 0f04 	tst.w	r4, #4
  403102:	f891 f040 	pld	[r1, #64]	; 0x40
  403106:	fa0c f505 	lsl.w	r5, ip, r5
  40310a:	ea62 0205 	orn	r2, r2, r5
  40310e:	bf1c      	itt	ne
  403110:	ea63 0305 	ornne	r3, r3, r5
  403114:	4662      	movne	r2, ip
  403116:	f04f 0400 	mov.w	r4, #0
  40311a:	e7a9      	b.n	403070 <strlen+0x30>

0040311c <critical_factorization>:
  40311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403120:	f04f 0e01 	mov.w	lr, #1
  403124:	4674      	mov	r4, lr
  403126:	2500      	movs	r5, #0
  403128:	f04f 36ff 	mov.w	r6, #4294967295
  40312c:	192b      	adds	r3, r5, r4
  40312e:	428b      	cmp	r3, r1
  403130:	eb00 0706 	add.w	r7, r0, r6
  403134:	d20d      	bcs.n	403152 <critical_factorization+0x36>
  403136:	5d3f      	ldrb	r7, [r7, r4]
  403138:	f810 c003 	ldrb.w	ip, [r0, r3]
  40313c:	45bc      	cmp	ip, r7
  40313e:	d22d      	bcs.n	40319c <critical_factorization+0x80>
  403140:	461d      	mov	r5, r3
  403142:	2401      	movs	r4, #1
  403144:	eba3 0e06 	sub.w	lr, r3, r6
  403148:	192b      	adds	r3, r5, r4
  40314a:	428b      	cmp	r3, r1
  40314c:	eb00 0706 	add.w	r7, r0, r6
  403150:	d3f1      	bcc.n	403136 <critical_factorization+0x1a>
  403152:	f04f 0801 	mov.w	r8, #1
  403156:	f8c2 e000 	str.w	lr, [r2]
  40315a:	4644      	mov	r4, r8
  40315c:	2500      	movs	r5, #0
  40315e:	f04f 37ff 	mov.w	r7, #4294967295
  403162:	192b      	adds	r3, r5, r4
  403164:	4299      	cmp	r1, r3
  403166:	eb00 0e07 	add.w	lr, r0, r7
  40316a:	d90e      	bls.n	40318a <critical_factorization+0x6e>
  40316c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403170:	f810 c003 	ldrb.w	ip, [r0, r3]
  403174:	45f4      	cmp	ip, lr
  403176:	d918      	bls.n	4031aa <critical_factorization+0x8e>
  403178:	461d      	mov	r5, r3
  40317a:	2401      	movs	r4, #1
  40317c:	eba3 0807 	sub.w	r8, r3, r7
  403180:	192b      	adds	r3, r5, r4
  403182:	4299      	cmp	r1, r3
  403184:	eb00 0e07 	add.w	lr, r0, r7
  403188:	d8f0      	bhi.n	40316c <critical_factorization+0x50>
  40318a:	3701      	adds	r7, #1
  40318c:	1c70      	adds	r0, r6, #1
  40318e:	4287      	cmp	r7, r0
  403190:	bf24      	itt	cs
  403192:	f8c2 8000 	strcs.w	r8, [r2]
  403196:	4638      	movcs	r0, r7
  403198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40319c:	d00c      	beq.n	4031b8 <critical_factorization+0x9c>
  40319e:	f04f 0e01 	mov.w	lr, #1
  4031a2:	462e      	mov	r6, r5
  4031a4:	4674      	mov	r4, lr
  4031a6:	4475      	add	r5, lr
  4031a8:	e7c0      	b.n	40312c <critical_factorization+0x10>
  4031aa:	d00b      	beq.n	4031c4 <critical_factorization+0xa8>
  4031ac:	f04f 0801 	mov.w	r8, #1
  4031b0:	462f      	mov	r7, r5
  4031b2:	4644      	mov	r4, r8
  4031b4:	4445      	add	r5, r8
  4031b6:	e7d4      	b.n	403162 <critical_factorization+0x46>
  4031b8:	4574      	cmp	r4, lr
  4031ba:	bf12      	itee	ne
  4031bc:	3401      	addne	r4, #1
  4031be:	461d      	moveq	r5, r3
  4031c0:	2401      	moveq	r4, #1
  4031c2:	e7b3      	b.n	40312c <critical_factorization+0x10>
  4031c4:	4544      	cmp	r4, r8
  4031c6:	bf12      	itee	ne
  4031c8:	3401      	addne	r4, #1
  4031ca:	461d      	moveq	r5, r3
  4031cc:	2401      	moveq	r4, #1
  4031ce:	e7c8      	b.n	403162 <critical_factorization+0x46>

004031d0 <two_way_long_needle>:
  4031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031d4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4031d8:	4616      	mov	r6, r2
  4031da:	4605      	mov	r5, r0
  4031dc:	468b      	mov	fp, r1
  4031de:	4610      	mov	r0, r2
  4031e0:	4619      	mov	r1, r3
  4031e2:	aa03      	add	r2, sp, #12
  4031e4:	461c      	mov	r4, r3
  4031e6:	f7ff ff99 	bl	40311c <critical_factorization>
  4031ea:	ab03      	add	r3, sp, #12
  4031ec:	4681      	mov	r9, r0
  4031ee:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4031f2:	f843 4f04 	str.w	r4, [r3, #4]!
  4031f6:	4293      	cmp	r3, r2
  4031f8:	d1fb      	bne.n	4031f2 <two_way_long_needle+0x22>
  4031fa:	b14c      	cbz	r4, 403210 <two_way_long_needle+0x40>
  4031fc:	1e63      	subs	r3, r4, #1
  4031fe:	1e72      	subs	r2, r6, #1
  403200:	a804      	add	r0, sp, #16
  403202:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403206:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40320a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40320e:	d2f8      	bcs.n	403202 <two_way_long_needle+0x32>
  403210:	9903      	ldr	r1, [sp, #12]
  403212:	464a      	mov	r2, r9
  403214:	4431      	add	r1, r6
  403216:	4630      	mov	r0, r6
  403218:	f003 f852 	bl	4062c0 <memcmp>
  40321c:	2800      	cmp	r0, #0
  40321e:	d16f      	bne.n	403300 <two_way_long_needle+0x130>
  403220:	f109 33ff 	add.w	r3, r9, #4294967295
  403224:	9300      	str	r3, [sp, #0]
  403226:	18f3      	adds	r3, r6, r3
  403228:	4682      	mov	sl, r0
  40322a:	9301      	str	r3, [sp, #4]
  40322c:	4623      	mov	r3, r4
  40322e:	4680      	mov	r8, r0
  403230:	4654      	mov	r4, sl
  403232:	4658      	mov	r0, fp
  403234:	469a      	mov	sl, r3
  403236:	eb08 070a 	add.w	r7, r8, sl
  40323a:	1a3a      	subs	r2, r7, r0
  40323c:	2100      	movs	r1, #0
  40323e:	4428      	add	r0, r5
  403240:	f002 ffee 	bl	406220 <memchr>
  403244:	2800      	cmp	r0, #0
  403246:	d156      	bne.n	4032f6 <two_way_long_needle+0x126>
  403248:	2f00      	cmp	r7, #0
  40324a:	d054      	beq.n	4032f6 <two_way_long_needle+0x126>
  40324c:	19eb      	adds	r3, r5, r7
  40324e:	aa04      	add	r2, sp, #16
  403250:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  403254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403258:	b14b      	cbz	r3, 40326e <two_way_long_needle+0x9e>
  40325a:	b124      	cbz	r4, 403266 <two_way_long_needle+0x96>
  40325c:	9a03      	ldr	r2, [sp, #12]
  40325e:	4293      	cmp	r3, r2
  403260:	d201      	bcs.n	403266 <two_way_long_needle+0x96>
  403262:	ebaa 0302 	sub.w	r3, sl, r2
  403266:	4498      	add	r8, r3
  403268:	2400      	movs	r4, #0
  40326a:	4638      	mov	r0, r7
  40326c:	e7e3      	b.n	403236 <two_way_long_needle+0x66>
  40326e:	454c      	cmp	r4, r9
  403270:	4623      	mov	r3, r4
  403272:	f10a 3eff 	add.w	lr, sl, #4294967295
  403276:	bf38      	it	cc
  403278:	464b      	movcc	r3, r9
  40327a:	4573      	cmp	r3, lr
  40327c:	d213      	bcs.n	4032a6 <two_way_long_needle+0xd6>
  40327e:	eb08 0203 	add.w	r2, r8, r3
  403282:	f816 c003 	ldrb.w	ip, [r6, r3]
  403286:	5ca8      	ldrb	r0, [r5, r2]
  403288:	4584      	cmp	ip, r0
  40328a:	442a      	add	r2, r5
  40328c:	eb06 0103 	add.w	r1, r6, r3
  403290:	d006      	beq.n	4032a0 <two_way_long_needle+0xd0>
  403292:	e02c      	b.n	4032ee <two_way_long_needle+0x11e>
  403294:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  403298:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40329c:	4584      	cmp	ip, r0
  40329e:	d126      	bne.n	4032ee <two_way_long_needle+0x11e>
  4032a0:	3301      	adds	r3, #1
  4032a2:	4573      	cmp	r3, lr
  4032a4:	d3f6      	bcc.n	403294 <two_way_long_needle+0xc4>
  4032a6:	454c      	cmp	r4, r9
  4032a8:	9900      	ldr	r1, [sp, #0]
  4032aa:	f080 8089 	bcs.w	4033c0 <two_way_long_needle+0x1f0>
  4032ae:	9b00      	ldr	r3, [sp, #0]
  4032b0:	eb08 0203 	add.w	r2, r8, r3
  4032b4:	9b01      	ldr	r3, [sp, #4]
  4032b6:	5ca8      	ldrb	r0, [r5, r2]
  4032b8:	781b      	ldrb	r3, [r3, #0]
  4032ba:	4298      	cmp	r0, r3
  4032bc:	442a      	add	r2, r5
  4032be:	d17f      	bne.n	4033c0 <two_way_long_needle+0x1f0>
  4032c0:	9801      	ldr	r0, [sp, #4]
  4032c2:	f104 3bff 	add.w	fp, r4, #4294967295
  4032c6:	e006      	b.n	4032d6 <two_way_long_needle+0x106>
  4032c8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4032cc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4032d0:	45f4      	cmp	ip, lr
  4032d2:	d103      	bne.n	4032dc <two_way_long_needle+0x10c>
  4032d4:	4619      	mov	r1, r3
  4032d6:	1e4b      	subs	r3, r1, #1
  4032d8:	459b      	cmp	fp, r3
  4032da:	d1f5      	bne.n	4032c8 <two_way_long_needle+0xf8>
  4032dc:	3401      	adds	r4, #1
  4032de:	428c      	cmp	r4, r1
  4032e0:	d870      	bhi.n	4033c4 <two_way_long_needle+0x1f4>
  4032e2:	9c03      	ldr	r4, [sp, #12]
  4032e4:	4638      	mov	r0, r7
  4032e6:	44a0      	add	r8, r4
  4032e8:	ebaa 0404 	sub.w	r4, sl, r4
  4032ec:	e7a3      	b.n	403236 <two_way_long_needle+0x66>
  4032ee:	f1c9 0201 	rsb	r2, r9, #1
  4032f2:	4490      	add	r8, r2
  4032f4:	e7b7      	b.n	403266 <two_way_long_needle+0x96>
  4032f6:	2000      	movs	r0, #0
  4032f8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403300:	eba4 0309 	sub.w	r3, r4, r9
  403304:	454b      	cmp	r3, r9
  403306:	bf38      	it	cc
  403308:	464b      	movcc	r3, r9
  40330a:	3301      	adds	r3, #1
  40330c:	f109 38ff 	add.w	r8, r9, #4294967295
  403310:	9303      	str	r3, [sp, #12]
  403312:	eb06 0308 	add.w	r3, r6, r8
  403316:	4658      	mov	r0, fp
  403318:	f04f 0a00 	mov.w	sl, #0
  40331c:	46cb      	mov	fp, r9
  40331e:	4699      	mov	r9, r3
  403320:	eb0a 0704 	add.w	r7, sl, r4
  403324:	1a3a      	subs	r2, r7, r0
  403326:	2100      	movs	r1, #0
  403328:	4428      	add	r0, r5
  40332a:	f002 ff79 	bl	406220 <memchr>
  40332e:	2800      	cmp	r0, #0
  403330:	d1e1      	bne.n	4032f6 <two_way_long_needle+0x126>
  403332:	2f00      	cmp	r7, #0
  403334:	d0df      	beq.n	4032f6 <two_way_long_needle+0x126>
  403336:	19eb      	adds	r3, r5, r7
  403338:	aa04      	add	r2, sp, #16
  40333a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403342:	bba3      	cbnz	r3, 4033ae <two_way_long_needle+0x1de>
  403344:	1e61      	subs	r1, r4, #1
  403346:	458b      	cmp	fp, r1
  403348:	d215      	bcs.n	403376 <two_way_long_needle+0x1a6>
  40334a:	eb0a 020b 	add.w	r2, sl, fp
  40334e:	f816 300b 	ldrb.w	r3, [r6, fp]
  403352:	f815 e002 	ldrb.w	lr, [r5, r2]
  403356:	459e      	cmp	lr, r3
  403358:	442a      	add	r2, r5
  40335a:	eb06 000b 	add.w	r0, r6, fp
  40335e:	465b      	mov	r3, fp
  403360:	d006      	beq.n	403370 <two_way_long_needle+0x1a0>
  403362:	e027      	b.n	4033b4 <two_way_long_needle+0x1e4>
  403364:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  403368:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40336c:	45f4      	cmp	ip, lr
  40336e:	d121      	bne.n	4033b4 <two_way_long_needle+0x1e4>
  403370:	3301      	adds	r3, #1
  403372:	428b      	cmp	r3, r1
  403374:	d3f6      	bcc.n	403364 <two_way_long_needle+0x194>
  403376:	f1b8 3fff 	cmp.w	r8, #4294967295
  40337a:	d011      	beq.n	4033a0 <two_way_long_needle+0x1d0>
  40337c:	eb0a 0208 	add.w	r2, sl, r8
  403380:	f899 1000 	ldrb.w	r1, [r9]
  403384:	5cab      	ldrb	r3, [r5, r2]
  403386:	4299      	cmp	r1, r3
  403388:	442a      	add	r2, r5
  40338a:	d10f      	bne.n	4033ac <two_way_long_needle+0x1dc>
  40338c:	464b      	mov	r3, r9
  40338e:	e005      	b.n	40339c <two_way_long_needle+0x1cc>
  403390:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  403394:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  403398:	4288      	cmp	r0, r1
  40339a:	d107      	bne.n	4033ac <two_way_long_needle+0x1dc>
  40339c:	42b3      	cmp	r3, r6
  40339e:	d1f7      	bne.n	403390 <two_way_long_needle+0x1c0>
  4033a0:	eb05 000a 	add.w	r0, r5, sl
  4033a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4033a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033ac:	9b03      	ldr	r3, [sp, #12]
  4033ae:	449a      	add	sl, r3
  4033b0:	4638      	mov	r0, r7
  4033b2:	e7b5      	b.n	403320 <two_way_long_needle+0x150>
  4033b4:	f1cb 0201 	rsb	r2, fp, #1
  4033b8:	4492      	add	sl, r2
  4033ba:	449a      	add	sl, r3
  4033bc:	4638      	mov	r0, r7
  4033be:	e7af      	b.n	403320 <two_way_long_needle+0x150>
  4033c0:	4649      	mov	r1, r9
  4033c2:	e78b      	b.n	4032dc <two_way_long_needle+0x10c>
  4033c4:	eb05 0008 	add.w	r0, r5, r8
  4033c8:	e796      	b.n	4032f8 <two_way_long_needle+0x128>
  4033ca:	bf00      	nop

004033cc <strstr>:
  4033cc:	7802      	ldrb	r2, [r0, #0]
  4033ce:	2a00      	cmp	r2, #0
  4033d0:	f000 8101 	beq.w	4035d6 <strstr+0x20a>
  4033d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033d8:	f891 8000 	ldrb.w	r8, [r1]
  4033dc:	b085      	sub	sp, #20
  4033de:	4644      	mov	r4, r8
  4033e0:	f1b8 0f00 	cmp.w	r8, #0
  4033e4:	d016      	beq.n	403414 <strstr+0x48>
  4033e6:	4686      	mov	lr, r0
  4033e8:	f101 0c01 	add.w	ip, r1, #1
  4033ec:	2701      	movs	r7, #1
  4033ee:	e003      	b.n	4033f8 <strstr+0x2c>
  4033f0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4033f4:	b16c      	cbz	r4, 403412 <strstr+0x46>
  4033f6:	469c      	mov	ip, r3
  4033f8:	42a2      	cmp	r2, r4
  4033fa:	bf14      	ite	ne
  4033fc:	2700      	movne	r7, #0
  4033fe:	f007 0701 	andeq.w	r7, r7, #1
  403402:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  403406:	4663      	mov	r3, ip
  403408:	2a00      	cmp	r2, #0
  40340a:	d1f1      	bne.n	4033f0 <strstr+0x24>
  40340c:	f89c 3000 	ldrb.w	r3, [ip]
  403410:	b9fb      	cbnz	r3, 403452 <strstr+0x86>
  403412:	b117      	cbz	r7, 40341a <strstr+0x4e>
  403414:	b005      	add	sp, #20
  403416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40341a:	460e      	mov	r6, r1
  40341c:	4605      	mov	r5, r0
  40341e:	4641      	mov	r1, r8
  403420:	3001      	adds	r0, #1
  403422:	ebac 0406 	sub.w	r4, ip, r6
  403426:	f003 fd2f 	bl	406e88 <strchr>
  40342a:	4607      	mov	r7, r0
  40342c:	b188      	cbz	r0, 403452 <strstr+0x86>
  40342e:	2c01      	cmp	r4, #1
  403430:	d0f0      	beq.n	403414 <strstr+0x48>
  403432:	1928      	adds	r0, r5, r4
  403434:	4287      	cmp	r7, r0
  403436:	bf94      	ite	ls
  403438:	1bc1      	subls	r1, r0, r7
  40343a:	2101      	movhi	r1, #1
  40343c:	2c1f      	cmp	r4, #31
  40343e:	468b      	mov	fp, r1
  403440:	d90b      	bls.n	40345a <strstr+0x8e>
  403442:	4623      	mov	r3, r4
  403444:	4632      	mov	r2, r6
  403446:	4638      	mov	r0, r7
  403448:	f7ff fec2 	bl	4031d0 <two_way_long_needle>
  40344c:	b005      	add	sp, #20
  40344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403452:	2000      	movs	r0, #0
  403454:	b005      	add	sp, #20
  403456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40345a:	aa03      	add	r2, sp, #12
  40345c:	4621      	mov	r1, r4
  40345e:	4630      	mov	r0, r6
  403460:	f7ff fe5c 	bl	40311c <critical_factorization>
  403464:	9903      	ldr	r1, [sp, #12]
  403466:	4680      	mov	r8, r0
  403468:	4602      	mov	r2, r0
  40346a:	4431      	add	r1, r6
  40346c:	4630      	mov	r0, r6
  40346e:	f002 ff27 	bl	4062c0 <memcmp>
  403472:	2800      	cmp	r0, #0
  403474:	d157      	bne.n	403526 <strstr+0x15a>
  403476:	f108 33ff 	add.w	r3, r8, #4294967295
  40347a:	9300      	str	r3, [sp, #0]
  40347c:	18f3      	adds	r3, r6, r3
  40347e:	4681      	mov	r9, r0
  403480:	4605      	mov	r5, r0
  403482:	9301      	str	r3, [sp, #4]
  403484:	4658      	mov	r0, fp
  403486:	46b2      	mov	sl, r6
  403488:	1966      	adds	r6, r4, r5
  40348a:	1a32      	subs	r2, r6, r0
  40348c:	2100      	movs	r1, #0
  40348e:	4438      	add	r0, r7
  403490:	f002 fec6 	bl	406220 <memchr>
  403494:	2800      	cmp	r0, #0
  403496:	d1dc      	bne.n	403452 <strstr+0x86>
  403498:	2e00      	cmp	r6, #0
  40349a:	d0da      	beq.n	403452 <strstr+0x86>
  40349c:	45c8      	cmp	r8, r9
  40349e:	4643      	mov	r3, r8
  4034a0:	bf38      	it	cc
  4034a2:	464b      	movcc	r3, r9
  4034a4:	429c      	cmp	r4, r3
  4034a6:	d912      	bls.n	4034ce <strstr+0x102>
  4034a8:	195a      	adds	r2, r3, r5
  4034aa:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4034ae:	5cb8      	ldrb	r0, [r7, r2]
  4034b0:	4281      	cmp	r1, r0
  4034b2:	443a      	add	r2, r7
  4034b4:	eb0a 0e03 	add.w	lr, sl, r3
  4034b8:	d006      	beq.n	4034c8 <strstr+0xfc>
  4034ba:	e02c      	b.n	403516 <strstr+0x14a>
  4034bc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4034c0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4034c4:	4288      	cmp	r0, r1
  4034c6:	d126      	bne.n	403516 <strstr+0x14a>
  4034c8:	3301      	adds	r3, #1
  4034ca:	429c      	cmp	r4, r3
  4034cc:	d1f6      	bne.n	4034bc <strstr+0xf0>
  4034ce:	45c8      	cmp	r8, r9
  4034d0:	9900      	ldr	r1, [sp, #0]
  4034d2:	f240 8083 	bls.w	4035dc <strstr+0x210>
  4034d6:	9b00      	ldr	r3, [sp, #0]
  4034d8:	18ea      	adds	r2, r5, r3
  4034da:	9b01      	ldr	r3, [sp, #4]
  4034dc:	5cb8      	ldrb	r0, [r7, r2]
  4034de:	781b      	ldrb	r3, [r3, #0]
  4034e0:	4298      	cmp	r0, r3
  4034e2:	443a      	add	r2, r7
  4034e4:	d17a      	bne.n	4035dc <strstr+0x210>
  4034e6:	9801      	ldr	r0, [sp, #4]
  4034e8:	f109 3bff 	add.w	fp, r9, #4294967295
  4034ec:	e006      	b.n	4034fc <strstr+0x130>
  4034ee:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4034f2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4034f6:	45f4      	cmp	ip, lr
  4034f8:	d103      	bne.n	403502 <strstr+0x136>
  4034fa:	4619      	mov	r1, r3
  4034fc:	1e4b      	subs	r3, r1, #1
  4034fe:	455b      	cmp	r3, fp
  403500:	d1f5      	bne.n	4034ee <strstr+0x122>
  403502:	f109 0901 	add.w	r9, r9, #1
  403506:	4589      	cmp	r9, r1
  403508:	d857      	bhi.n	4035ba <strstr+0x1ee>
  40350a:	9b03      	ldr	r3, [sp, #12]
  40350c:	4630      	mov	r0, r6
  40350e:	441d      	add	r5, r3
  403510:	eba4 0903 	sub.w	r9, r4, r3
  403514:	e7b8      	b.n	403488 <strstr+0xbc>
  403516:	f1c8 0201 	rsb	r2, r8, #1
  40351a:	4415      	add	r5, r2
  40351c:	441d      	add	r5, r3
  40351e:	f04f 0900 	mov.w	r9, #0
  403522:	4630      	mov	r0, r6
  403524:	e7b0      	b.n	403488 <strstr+0xbc>
  403526:	eba4 0308 	sub.w	r3, r4, r8
  40352a:	4543      	cmp	r3, r8
  40352c:	bf38      	it	cc
  40352e:	4643      	movcc	r3, r8
  403530:	3301      	adds	r3, #1
  403532:	f108 39ff 	add.w	r9, r8, #4294967295
  403536:	9303      	str	r3, [sp, #12]
  403538:	eb06 0309 	add.w	r3, r6, r9
  40353c:	4658      	mov	r0, fp
  40353e:	2500      	movs	r5, #0
  403540:	46bb      	mov	fp, r7
  403542:	469a      	mov	sl, r3
  403544:	1967      	adds	r7, r4, r5
  403546:	1a3a      	subs	r2, r7, r0
  403548:	2100      	movs	r1, #0
  40354a:	4458      	add	r0, fp
  40354c:	f002 fe68 	bl	406220 <memchr>
  403550:	2800      	cmp	r0, #0
  403552:	f47f af7e 	bne.w	403452 <strstr+0x86>
  403556:	2f00      	cmp	r7, #0
  403558:	f43f af7b 	beq.w	403452 <strstr+0x86>
  40355c:	4544      	cmp	r4, r8
  40355e:	d915      	bls.n	40358c <strstr+0x1c0>
  403560:	eb08 0205 	add.w	r2, r8, r5
  403564:	f816 3008 	ldrb.w	r3, [r6, r8]
  403568:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40356c:	4298      	cmp	r0, r3
  40356e:	445a      	add	r2, fp
  403570:	eb06 0108 	add.w	r1, r6, r8
  403574:	4643      	mov	r3, r8
  403576:	d006      	beq.n	403586 <strstr+0x1ba>
  403578:	e023      	b.n	4035c2 <strstr+0x1f6>
  40357a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40357e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  403582:	4586      	cmp	lr, r0
  403584:	d11d      	bne.n	4035c2 <strstr+0x1f6>
  403586:	3301      	adds	r3, #1
  403588:	429c      	cmp	r4, r3
  40358a:	d1f6      	bne.n	40357a <strstr+0x1ae>
  40358c:	f1b9 3fff 	cmp.w	r9, #4294967295
  403590:	d012      	beq.n	4035b8 <strstr+0x1ec>
  403592:	eb05 0209 	add.w	r2, r5, r9
  403596:	f89a 3000 	ldrb.w	r3, [sl]
  40359a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40359e:	4299      	cmp	r1, r3
  4035a0:	445a      	add	r2, fp
  4035a2:	d114      	bne.n	4035ce <strstr+0x202>
  4035a4:	4653      	mov	r3, sl
  4035a6:	e005      	b.n	4035b4 <strstr+0x1e8>
  4035a8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4035ac:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4035b0:	4288      	cmp	r0, r1
  4035b2:	d10c      	bne.n	4035ce <strstr+0x202>
  4035b4:	42b3      	cmp	r3, r6
  4035b6:	d1f7      	bne.n	4035a8 <strstr+0x1dc>
  4035b8:	465f      	mov	r7, fp
  4035ba:	1978      	adds	r0, r7, r5
  4035bc:	b005      	add	sp, #20
  4035be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035c2:	f1c8 0201 	rsb	r2, r8, #1
  4035c6:	4415      	add	r5, r2
  4035c8:	441d      	add	r5, r3
  4035ca:	4638      	mov	r0, r7
  4035cc:	e7ba      	b.n	403544 <strstr+0x178>
  4035ce:	9b03      	ldr	r3, [sp, #12]
  4035d0:	4638      	mov	r0, r7
  4035d2:	441d      	add	r5, r3
  4035d4:	e7b6      	b.n	403544 <strstr+0x178>
  4035d6:	780b      	ldrb	r3, [r1, #0]
  4035d8:	b913      	cbnz	r3, 4035e0 <strstr+0x214>
  4035da:	4770      	bx	lr
  4035dc:	4641      	mov	r1, r8
  4035de:	e790      	b.n	403502 <strstr+0x136>
  4035e0:	2000      	movs	r0, #0
  4035e2:	4770      	bx	lr

004035e4 <_svfprintf_r>:
  4035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035e8:	b0c3      	sub	sp, #268	; 0x10c
  4035ea:	460c      	mov	r4, r1
  4035ec:	910b      	str	r1, [sp, #44]	; 0x2c
  4035ee:	4692      	mov	sl, r2
  4035f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4035f2:	900c      	str	r0, [sp, #48]	; 0x30
  4035f4:	f002 fb3a 	bl	405c6c <_localeconv_r>
  4035f8:	6803      	ldr	r3, [r0, #0]
  4035fa:	931a      	str	r3, [sp, #104]	; 0x68
  4035fc:	4618      	mov	r0, r3
  4035fe:	f7ff fd1f 	bl	403040 <strlen>
  403602:	89a3      	ldrh	r3, [r4, #12]
  403604:	9019      	str	r0, [sp, #100]	; 0x64
  403606:	0619      	lsls	r1, r3, #24
  403608:	d503      	bpl.n	403612 <_svfprintf_r+0x2e>
  40360a:	6923      	ldr	r3, [r4, #16]
  40360c:	2b00      	cmp	r3, #0
  40360e:	f001 8001 	beq.w	404614 <_svfprintf_r+0x1030>
  403612:	2300      	movs	r3, #0
  403614:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403618:	9313      	str	r3, [sp, #76]	; 0x4c
  40361a:	9314      	str	r3, [sp, #80]	; 0x50
  40361c:	9315      	str	r3, [sp, #84]	; 0x54
  40361e:	9327      	str	r3, [sp, #156]	; 0x9c
  403620:	9326      	str	r3, [sp, #152]	; 0x98
  403622:	9318      	str	r3, [sp, #96]	; 0x60
  403624:	931b      	str	r3, [sp, #108]	; 0x6c
  403626:	9309      	str	r3, [sp, #36]	; 0x24
  403628:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40362c:	46c8      	mov	r8, r9
  40362e:	9316      	str	r3, [sp, #88]	; 0x58
  403630:	9317      	str	r3, [sp, #92]	; 0x5c
  403632:	f89a 3000 	ldrb.w	r3, [sl]
  403636:	4654      	mov	r4, sl
  403638:	b1e3      	cbz	r3, 403674 <_svfprintf_r+0x90>
  40363a:	2b25      	cmp	r3, #37	; 0x25
  40363c:	d102      	bne.n	403644 <_svfprintf_r+0x60>
  40363e:	e019      	b.n	403674 <_svfprintf_r+0x90>
  403640:	2b25      	cmp	r3, #37	; 0x25
  403642:	d003      	beq.n	40364c <_svfprintf_r+0x68>
  403644:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403648:	2b00      	cmp	r3, #0
  40364a:	d1f9      	bne.n	403640 <_svfprintf_r+0x5c>
  40364c:	eba4 050a 	sub.w	r5, r4, sl
  403650:	b185      	cbz	r5, 403674 <_svfprintf_r+0x90>
  403652:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403654:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403656:	f8c8 a000 	str.w	sl, [r8]
  40365a:	3301      	adds	r3, #1
  40365c:	442a      	add	r2, r5
  40365e:	2b07      	cmp	r3, #7
  403660:	f8c8 5004 	str.w	r5, [r8, #4]
  403664:	9227      	str	r2, [sp, #156]	; 0x9c
  403666:	9326      	str	r3, [sp, #152]	; 0x98
  403668:	dc7f      	bgt.n	40376a <_svfprintf_r+0x186>
  40366a:	f108 0808 	add.w	r8, r8, #8
  40366e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403670:	442b      	add	r3, r5
  403672:	9309      	str	r3, [sp, #36]	; 0x24
  403674:	7823      	ldrb	r3, [r4, #0]
  403676:	2b00      	cmp	r3, #0
  403678:	d07f      	beq.n	40377a <_svfprintf_r+0x196>
  40367a:	2300      	movs	r3, #0
  40367c:	461a      	mov	r2, r3
  40367e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403682:	4619      	mov	r1, r3
  403684:	930d      	str	r3, [sp, #52]	; 0x34
  403686:	469b      	mov	fp, r3
  403688:	f04f 30ff 	mov.w	r0, #4294967295
  40368c:	7863      	ldrb	r3, [r4, #1]
  40368e:	900a      	str	r0, [sp, #40]	; 0x28
  403690:	f104 0a01 	add.w	sl, r4, #1
  403694:	f10a 0a01 	add.w	sl, sl, #1
  403698:	f1a3 0020 	sub.w	r0, r3, #32
  40369c:	2858      	cmp	r0, #88	; 0x58
  40369e:	f200 83c0 	bhi.w	403e22 <_svfprintf_r+0x83e>
  4036a2:	e8df f010 	tbh	[pc, r0, lsl #1]
  4036a6:	0238      	.short	0x0238
  4036a8:	03be03be 	.word	0x03be03be
  4036ac:	03be0240 	.word	0x03be0240
  4036b0:	03be03be 	.word	0x03be03be
  4036b4:	03be03be 	.word	0x03be03be
  4036b8:	024503be 	.word	0x024503be
  4036bc:	03be0203 	.word	0x03be0203
  4036c0:	026b005d 	.word	0x026b005d
  4036c4:	028603be 	.word	0x028603be
  4036c8:	039c039c 	.word	0x039c039c
  4036cc:	039c039c 	.word	0x039c039c
  4036d0:	039c039c 	.word	0x039c039c
  4036d4:	039c039c 	.word	0x039c039c
  4036d8:	03be039c 	.word	0x03be039c
  4036dc:	03be03be 	.word	0x03be03be
  4036e0:	03be03be 	.word	0x03be03be
  4036e4:	03be03be 	.word	0x03be03be
  4036e8:	03be03be 	.word	0x03be03be
  4036ec:	033703be 	.word	0x033703be
  4036f0:	03be0357 	.word	0x03be0357
  4036f4:	03be0357 	.word	0x03be0357
  4036f8:	03be03be 	.word	0x03be03be
  4036fc:	039703be 	.word	0x039703be
  403700:	03be03be 	.word	0x03be03be
  403704:	03be03ac 	.word	0x03be03ac
  403708:	03be03be 	.word	0x03be03be
  40370c:	03be03be 	.word	0x03be03be
  403710:	03be0259 	.word	0x03be0259
  403714:	031e03be 	.word	0x031e03be
  403718:	03be03be 	.word	0x03be03be
  40371c:	03be03be 	.word	0x03be03be
  403720:	03be03be 	.word	0x03be03be
  403724:	03be03be 	.word	0x03be03be
  403728:	03be03be 	.word	0x03be03be
  40372c:	02db02c6 	.word	0x02db02c6
  403730:	03570357 	.word	0x03570357
  403734:	028b0357 	.word	0x028b0357
  403738:	03be02db 	.word	0x03be02db
  40373c:	029003be 	.word	0x029003be
  403740:	029d03be 	.word	0x029d03be
  403744:	02b401cc 	.word	0x02b401cc
  403748:	03be0208 	.word	0x03be0208
  40374c:	03be01e1 	.word	0x03be01e1
  403750:	03be007e 	.word	0x03be007e
  403754:	020d03be 	.word	0x020d03be
  403758:	980d      	ldr	r0, [sp, #52]	; 0x34
  40375a:	930f      	str	r3, [sp, #60]	; 0x3c
  40375c:	4240      	negs	r0, r0
  40375e:	900d      	str	r0, [sp, #52]	; 0x34
  403760:	f04b 0b04 	orr.w	fp, fp, #4
  403764:	f89a 3000 	ldrb.w	r3, [sl]
  403768:	e794      	b.n	403694 <_svfprintf_r+0xb0>
  40376a:	aa25      	add	r2, sp, #148	; 0x94
  40376c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40376e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403770:	f003 fbfe 	bl	406f70 <__ssprint_r>
  403774:	b940      	cbnz	r0, 403788 <_svfprintf_r+0x1a4>
  403776:	46c8      	mov	r8, r9
  403778:	e779      	b.n	40366e <_svfprintf_r+0x8a>
  40377a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40377c:	b123      	cbz	r3, 403788 <_svfprintf_r+0x1a4>
  40377e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403780:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403782:	aa25      	add	r2, sp, #148	; 0x94
  403784:	f003 fbf4 	bl	406f70 <__ssprint_r>
  403788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40378a:	899b      	ldrh	r3, [r3, #12]
  40378c:	f013 0f40 	tst.w	r3, #64	; 0x40
  403790:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403792:	bf18      	it	ne
  403794:	f04f 33ff 	movne.w	r3, #4294967295
  403798:	9309      	str	r3, [sp, #36]	; 0x24
  40379a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40379c:	b043      	add	sp, #268	; 0x10c
  40379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037a2:	f01b 0f20 	tst.w	fp, #32
  4037a6:	9311      	str	r3, [sp, #68]	; 0x44
  4037a8:	f040 81dd 	bne.w	403b66 <_svfprintf_r+0x582>
  4037ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4037ae:	f01b 0f10 	tst.w	fp, #16
  4037b2:	4613      	mov	r3, r2
  4037b4:	f040 856c 	bne.w	404290 <_svfprintf_r+0xcac>
  4037b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4037bc:	f000 8568 	beq.w	404290 <_svfprintf_r+0xcac>
  4037c0:	8814      	ldrh	r4, [r2, #0]
  4037c2:	3204      	adds	r2, #4
  4037c4:	2500      	movs	r5, #0
  4037c6:	2301      	movs	r3, #1
  4037c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4037ca:	2700      	movs	r7, #0
  4037cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4037d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4037d2:	1c4a      	adds	r2, r1, #1
  4037d4:	f000 8265 	beq.w	403ca2 <_svfprintf_r+0x6be>
  4037d8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4037dc:	9207      	str	r2, [sp, #28]
  4037de:	ea54 0205 	orrs.w	r2, r4, r5
  4037e2:	f040 8264 	bne.w	403cae <_svfprintf_r+0x6ca>
  4037e6:	2900      	cmp	r1, #0
  4037e8:	f040 8439 	bne.w	40405e <_svfprintf_r+0xa7a>
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	f040 84d4 	bne.w	40419a <_svfprintf_r+0xbb6>
  4037f2:	f01b 0301 	ands.w	r3, fp, #1
  4037f6:	930e      	str	r3, [sp, #56]	; 0x38
  4037f8:	f000 8602 	beq.w	404400 <_svfprintf_r+0xe1c>
  4037fc:	ae42      	add	r6, sp, #264	; 0x108
  4037fe:	2330      	movs	r3, #48	; 0x30
  403800:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403808:	4293      	cmp	r3, r2
  40380a:	bfb8      	it	lt
  40380c:	4613      	movlt	r3, r2
  40380e:	9308      	str	r3, [sp, #32]
  403810:	2300      	movs	r3, #0
  403812:	9312      	str	r3, [sp, #72]	; 0x48
  403814:	b117      	cbz	r7, 40381c <_svfprintf_r+0x238>
  403816:	9b08      	ldr	r3, [sp, #32]
  403818:	3301      	adds	r3, #1
  40381a:	9308      	str	r3, [sp, #32]
  40381c:	9b07      	ldr	r3, [sp, #28]
  40381e:	f013 0302 	ands.w	r3, r3, #2
  403822:	9310      	str	r3, [sp, #64]	; 0x40
  403824:	d002      	beq.n	40382c <_svfprintf_r+0x248>
  403826:	9b08      	ldr	r3, [sp, #32]
  403828:	3302      	adds	r3, #2
  40382a:	9308      	str	r3, [sp, #32]
  40382c:	9b07      	ldr	r3, [sp, #28]
  40382e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403832:	f040 830d 	bne.w	403e50 <_svfprintf_r+0x86c>
  403836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403838:	9a08      	ldr	r2, [sp, #32]
  40383a:	eba3 0b02 	sub.w	fp, r3, r2
  40383e:	f1bb 0f00 	cmp.w	fp, #0
  403842:	f340 8305 	ble.w	403e50 <_svfprintf_r+0x86c>
  403846:	f1bb 0f10 	cmp.w	fp, #16
  40384a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40384c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40384e:	dd29      	ble.n	4038a4 <_svfprintf_r+0x2c0>
  403850:	4643      	mov	r3, r8
  403852:	4621      	mov	r1, r4
  403854:	46a8      	mov	r8, r5
  403856:	2710      	movs	r7, #16
  403858:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40385a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40385c:	e006      	b.n	40386c <_svfprintf_r+0x288>
  40385e:	f1ab 0b10 	sub.w	fp, fp, #16
  403862:	f1bb 0f10 	cmp.w	fp, #16
  403866:	f103 0308 	add.w	r3, r3, #8
  40386a:	dd18      	ble.n	40389e <_svfprintf_r+0x2ba>
  40386c:	3201      	adds	r2, #1
  40386e:	48b7      	ldr	r0, [pc, #732]	; (403b4c <_svfprintf_r+0x568>)
  403870:	9226      	str	r2, [sp, #152]	; 0x98
  403872:	3110      	adds	r1, #16
  403874:	2a07      	cmp	r2, #7
  403876:	9127      	str	r1, [sp, #156]	; 0x9c
  403878:	e883 0081 	stmia.w	r3, {r0, r7}
  40387c:	ddef      	ble.n	40385e <_svfprintf_r+0x27a>
  40387e:	aa25      	add	r2, sp, #148	; 0x94
  403880:	4629      	mov	r1, r5
  403882:	4620      	mov	r0, r4
  403884:	f003 fb74 	bl	406f70 <__ssprint_r>
  403888:	2800      	cmp	r0, #0
  40388a:	f47f af7d 	bne.w	403788 <_svfprintf_r+0x1a4>
  40388e:	f1ab 0b10 	sub.w	fp, fp, #16
  403892:	f1bb 0f10 	cmp.w	fp, #16
  403896:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403898:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40389a:	464b      	mov	r3, r9
  40389c:	dce6      	bgt.n	40386c <_svfprintf_r+0x288>
  40389e:	4645      	mov	r5, r8
  4038a0:	460c      	mov	r4, r1
  4038a2:	4698      	mov	r8, r3
  4038a4:	3201      	adds	r2, #1
  4038a6:	4ba9      	ldr	r3, [pc, #676]	; (403b4c <_svfprintf_r+0x568>)
  4038a8:	9226      	str	r2, [sp, #152]	; 0x98
  4038aa:	445c      	add	r4, fp
  4038ac:	2a07      	cmp	r2, #7
  4038ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4038b0:	e888 0808 	stmia.w	r8, {r3, fp}
  4038b4:	f300 8495 	bgt.w	4041e2 <_svfprintf_r+0xbfe>
  4038b8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4038bc:	f108 0808 	add.w	r8, r8, #8
  4038c0:	b177      	cbz	r7, 4038e0 <_svfprintf_r+0x2fc>
  4038c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038c4:	3301      	adds	r3, #1
  4038c6:	3401      	adds	r4, #1
  4038c8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4038cc:	2201      	movs	r2, #1
  4038ce:	2b07      	cmp	r3, #7
  4038d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4038d2:	9326      	str	r3, [sp, #152]	; 0x98
  4038d4:	e888 0006 	stmia.w	r8, {r1, r2}
  4038d8:	f300 83d8 	bgt.w	40408c <_svfprintf_r+0xaa8>
  4038dc:	f108 0808 	add.w	r8, r8, #8
  4038e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4038e2:	b16b      	cbz	r3, 403900 <_svfprintf_r+0x31c>
  4038e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4038e6:	3301      	adds	r3, #1
  4038e8:	3402      	adds	r4, #2
  4038ea:	a91e      	add	r1, sp, #120	; 0x78
  4038ec:	2202      	movs	r2, #2
  4038ee:	2b07      	cmp	r3, #7
  4038f0:	9427      	str	r4, [sp, #156]	; 0x9c
  4038f2:	9326      	str	r3, [sp, #152]	; 0x98
  4038f4:	e888 0006 	stmia.w	r8, {r1, r2}
  4038f8:	f300 83d3 	bgt.w	4040a2 <_svfprintf_r+0xabe>
  4038fc:	f108 0808 	add.w	r8, r8, #8
  403900:	2d80      	cmp	r5, #128	; 0x80
  403902:	f000 8313 	beq.w	403f2c <_svfprintf_r+0x948>
  403906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40390a:	1a9f      	subs	r7, r3, r2
  40390c:	2f00      	cmp	r7, #0
  40390e:	dd36      	ble.n	40397e <_svfprintf_r+0x39a>
  403910:	2f10      	cmp	r7, #16
  403912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403914:	4d8e      	ldr	r5, [pc, #568]	; (403b50 <_svfprintf_r+0x56c>)
  403916:	dd27      	ble.n	403968 <_svfprintf_r+0x384>
  403918:	4642      	mov	r2, r8
  40391a:	4621      	mov	r1, r4
  40391c:	46b0      	mov	r8, r6
  40391e:	f04f 0b10 	mov.w	fp, #16
  403922:	462e      	mov	r6, r5
  403924:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403926:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403928:	e004      	b.n	403934 <_svfprintf_r+0x350>
  40392a:	3f10      	subs	r7, #16
  40392c:	2f10      	cmp	r7, #16
  40392e:	f102 0208 	add.w	r2, r2, #8
  403932:	dd15      	ble.n	403960 <_svfprintf_r+0x37c>
  403934:	3301      	adds	r3, #1
  403936:	3110      	adds	r1, #16
  403938:	2b07      	cmp	r3, #7
  40393a:	9127      	str	r1, [sp, #156]	; 0x9c
  40393c:	9326      	str	r3, [sp, #152]	; 0x98
  40393e:	e882 0840 	stmia.w	r2, {r6, fp}
  403942:	ddf2      	ble.n	40392a <_svfprintf_r+0x346>
  403944:	aa25      	add	r2, sp, #148	; 0x94
  403946:	4629      	mov	r1, r5
  403948:	4620      	mov	r0, r4
  40394a:	f003 fb11 	bl	406f70 <__ssprint_r>
  40394e:	2800      	cmp	r0, #0
  403950:	f47f af1a 	bne.w	403788 <_svfprintf_r+0x1a4>
  403954:	3f10      	subs	r7, #16
  403956:	2f10      	cmp	r7, #16
  403958:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40395a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40395c:	464a      	mov	r2, r9
  40395e:	dce9      	bgt.n	403934 <_svfprintf_r+0x350>
  403960:	4635      	mov	r5, r6
  403962:	460c      	mov	r4, r1
  403964:	4646      	mov	r6, r8
  403966:	4690      	mov	r8, r2
  403968:	3301      	adds	r3, #1
  40396a:	443c      	add	r4, r7
  40396c:	2b07      	cmp	r3, #7
  40396e:	9427      	str	r4, [sp, #156]	; 0x9c
  403970:	9326      	str	r3, [sp, #152]	; 0x98
  403972:	e888 00a0 	stmia.w	r8, {r5, r7}
  403976:	f300 837e 	bgt.w	404076 <_svfprintf_r+0xa92>
  40397a:	f108 0808 	add.w	r8, r8, #8
  40397e:	9b07      	ldr	r3, [sp, #28]
  403980:	05df      	lsls	r7, r3, #23
  403982:	f100 8267 	bmi.w	403e54 <_svfprintf_r+0x870>
  403986:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403988:	990e      	ldr	r1, [sp, #56]	; 0x38
  40398a:	f8c8 6000 	str.w	r6, [r8]
  40398e:	3301      	adds	r3, #1
  403990:	440c      	add	r4, r1
  403992:	2b07      	cmp	r3, #7
  403994:	9427      	str	r4, [sp, #156]	; 0x9c
  403996:	f8c8 1004 	str.w	r1, [r8, #4]
  40399a:	9326      	str	r3, [sp, #152]	; 0x98
  40399c:	f300 834a 	bgt.w	404034 <_svfprintf_r+0xa50>
  4039a0:	f108 0808 	add.w	r8, r8, #8
  4039a4:	9b07      	ldr	r3, [sp, #28]
  4039a6:	075b      	lsls	r3, r3, #29
  4039a8:	d53a      	bpl.n	403a20 <_svfprintf_r+0x43c>
  4039aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039ac:	9a08      	ldr	r2, [sp, #32]
  4039ae:	1a9d      	subs	r5, r3, r2
  4039b0:	2d00      	cmp	r5, #0
  4039b2:	dd35      	ble.n	403a20 <_svfprintf_r+0x43c>
  4039b4:	2d10      	cmp	r5, #16
  4039b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039b8:	dd20      	ble.n	4039fc <_svfprintf_r+0x418>
  4039ba:	2610      	movs	r6, #16
  4039bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4039be:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4039c2:	e004      	b.n	4039ce <_svfprintf_r+0x3ea>
  4039c4:	3d10      	subs	r5, #16
  4039c6:	2d10      	cmp	r5, #16
  4039c8:	f108 0808 	add.w	r8, r8, #8
  4039cc:	dd16      	ble.n	4039fc <_svfprintf_r+0x418>
  4039ce:	3301      	adds	r3, #1
  4039d0:	4a5e      	ldr	r2, [pc, #376]	; (403b4c <_svfprintf_r+0x568>)
  4039d2:	9326      	str	r3, [sp, #152]	; 0x98
  4039d4:	3410      	adds	r4, #16
  4039d6:	2b07      	cmp	r3, #7
  4039d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4039da:	e888 0044 	stmia.w	r8, {r2, r6}
  4039de:	ddf1      	ble.n	4039c4 <_svfprintf_r+0x3e0>
  4039e0:	aa25      	add	r2, sp, #148	; 0x94
  4039e2:	4659      	mov	r1, fp
  4039e4:	4638      	mov	r0, r7
  4039e6:	f003 fac3 	bl	406f70 <__ssprint_r>
  4039ea:	2800      	cmp	r0, #0
  4039ec:	f47f aecc 	bne.w	403788 <_svfprintf_r+0x1a4>
  4039f0:	3d10      	subs	r5, #16
  4039f2:	2d10      	cmp	r5, #16
  4039f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4039f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039f8:	46c8      	mov	r8, r9
  4039fa:	dce8      	bgt.n	4039ce <_svfprintf_r+0x3ea>
  4039fc:	3301      	adds	r3, #1
  4039fe:	4a53      	ldr	r2, [pc, #332]	; (403b4c <_svfprintf_r+0x568>)
  403a00:	9326      	str	r3, [sp, #152]	; 0x98
  403a02:	442c      	add	r4, r5
  403a04:	2b07      	cmp	r3, #7
  403a06:	9427      	str	r4, [sp, #156]	; 0x9c
  403a08:	e888 0024 	stmia.w	r8, {r2, r5}
  403a0c:	dd08      	ble.n	403a20 <_svfprintf_r+0x43c>
  403a0e:	aa25      	add	r2, sp, #148	; 0x94
  403a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403a12:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a14:	f003 faac 	bl	406f70 <__ssprint_r>
  403a18:	2800      	cmp	r0, #0
  403a1a:	f47f aeb5 	bne.w	403788 <_svfprintf_r+0x1a4>
  403a1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a24:	9908      	ldr	r1, [sp, #32]
  403a26:	428a      	cmp	r2, r1
  403a28:	bfac      	ite	ge
  403a2a:	189b      	addge	r3, r3, r2
  403a2c:	185b      	addlt	r3, r3, r1
  403a2e:	9309      	str	r3, [sp, #36]	; 0x24
  403a30:	2c00      	cmp	r4, #0
  403a32:	f040 830a 	bne.w	40404a <_svfprintf_r+0xa66>
  403a36:	2300      	movs	r3, #0
  403a38:	9326      	str	r3, [sp, #152]	; 0x98
  403a3a:	46c8      	mov	r8, r9
  403a3c:	e5f9      	b.n	403632 <_svfprintf_r+0x4e>
  403a3e:	9311      	str	r3, [sp, #68]	; 0x44
  403a40:	f01b 0320 	ands.w	r3, fp, #32
  403a44:	f040 81e2 	bne.w	403e0c <_svfprintf_r+0x828>
  403a48:	f01b 0210 	ands.w	r2, fp, #16
  403a4c:	f040 842c 	bne.w	4042a8 <_svfprintf_r+0xcc4>
  403a50:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403a54:	f000 8428 	beq.w	4042a8 <_svfprintf_r+0xcc4>
  403a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a5a:	4613      	mov	r3, r2
  403a5c:	460a      	mov	r2, r1
  403a5e:	3204      	adds	r2, #4
  403a60:	880c      	ldrh	r4, [r1, #0]
  403a62:	920f      	str	r2, [sp, #60]	; 0x3c
  403a64:	2500      	movs	r5, #0
  403a66:	e6b0      	b.n	4037ca <_svfprintf_r+0x1e6>
  403a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a6a:	9311      	str	r3, [sp, #68]	; 0x44
  403a6c:	6816      	ldr	r6, [r2, #0]
  403a6e:	2400      	movs	r4, #0
  403a70:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403a74:	1d15      	adds	r5, r2, #4
  403a76:	2e00      	cmp	r6, #0
  403a78:	f000 86a5 	beq.w	4047c6 <_svfprintf_r+0x11e2>
  403a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403a7e:	1c53      	adds	r3, r2, #1
  403a80:	f000 8607 	beq.w	404692 <_svfprintf_r+0x10ae>
  403a84:	4621      	mov	r1, r4
  403a86:	4630      	mov	r0, r6
  403a88:	f002 fbca 	bl	406220 <memchr>
  403a8c:	2800      	cmp	r0, #0
  403a8e:	f000 86df 	beq.w	404850 <_svfprintf_r+0x126c>
  403a92:	1b83      	subs	r3, r0, r6
  403a94:	930e      	str	r3, [sp, #56]	; 0x38
  403a96:	940a      	str	r4, [sp, #40]	; 0x28
  403a98:	950f      	str	r5, [sp, #60]	; 0x3c
  403a9a:	f8cd b01c 	str.w	fp, [sp, #28]
  403a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403aa2:	9308      	str	r3, [sp, #32]
  403aa4:	9412      	str	r4, [sp, #72]	; 0x48
  403aa6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403aaa:	e6b3      	b.n	403814 <_svfprintf_r+0x230>
  403aac:	f89a 3000 	ldrb.w	r3, [sl]
  403ab0:	2201      	movs	r2, #1
  403ab2:	212b      	movs	r1, #43	; 0x2b
  403ab4:	e5ee      	b.n	403694 <_svfprintf_r+0xb0>
  403ab6:	f04b 0b20 	orr.w	fp, fp, #32
  403aba:	f89a 3000 	ldrb.w	r3, [sl]
  403abe:	e5e9      	b.n	403694 <_svfprintf_r+0xb0>
  403ac0:	9311      	str	r3, [sp, #68]	; 0x44
  403ac2:	2a00      	cmp	r2, #0
  403ac4:	f040 878d 	bne.w	4049e2 <_svfprintf_r+0x13fe>
  403ac8:	4b22      	ldr	r3, [pc, #136]	; (403b54 <_svfprintf_r+0x570>)
  403aca:	9318      	str	r3, [sp, #96]	; 0x60
  403acc:	f01b 0f20 	tst.w	fp, #32
  403ad0:	f040 8111 	bne.w	403cf6 <_svfprintf_r+0x712>
  403ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ad6:	f01b 0f10 	tst.w	fp, #16
  403ada:	4613      	mov	r3, r2
  403adc:	f040 83df 	bne.w	40429e <_svfprintf_r+0xcba>
  403ae0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403ae4:	f000 83db 	beq.w	40429e <_svfprintf_r+0xcba>
  403ae8:	3304      	adds	r3, #4
  403aea:	8814      	ldrh	r4, [r2, #0]
  403aec:	930f      	str	r3, [sp, #60]	; 0x3c
  403aee:	2500      	movs	r5, #0
  403af0:	f01b 0f01 	tst.w	fp, #1
  403af4:	f000 810c 	beq.w	403d10 <_svfprintf_r+0x72c>
  403af8:	ea54 0305 	orrs.w	r3, r4, r5
  403afc:	f000 8108 	beq.w	403d10 <_svfprintf_r+0x72c>
  403b00:	2330      	movs	r3, #48	; 0x30
  403b02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403b06:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403b0a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403b0e:	f04b 0b02 	orr.w	fp, fp, #2
  403b12:	2302      	movs	r3, #2
  403b14:	e659      	b.n	4037ca <_svfprintf_r+0x1e6>
  403b16:	f89a 3000 	ldrb.w	r3, [sl]
  403b1a:	2900      	cmp	r1, #0
  403b1c:	f47f adba 	bne.w	403694 <_svfprintf_r+0xb0>
  403b20:	2201      	movs	r2, #1
  403b22:	2120      	movs	r1, #32
  403b24:	e5b6      	b.n	403694 <_svfprintf_r+0xb0>
  403b26:	f04b 0b01 	orr.w	fp, fp, #1
  403b2a:	f89a 3000 	ldrb.w	r3, [sl]
  403b2e:	e5b1      	b.n	403694 <_svfprintf_r+0xb0>
  403b30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403b32:	6823      	ldr	r3, [r4, #0]
  403b34:	930d      	str	r3, [sp, #52]	; 0x34
  403b36:	4618      	mov	r0, r3
  403b38:	2800      	cmp	r0, #0
  403b3a:	4623      	mov	r3, r4
  403b3c:	f103 0304 	add.w	r3, r3, #4
  403b40:	f6ff ae0a 	blt.w	403758 <_svfprintf_r+0x174>
  403b44:	930f      	str	r3, [sp, #60]	; 0x3c
  403b46:	f89a 3000 	ldrb.w	r3, [sl]
  403b4a:	e5a3      	b.n	403694 <_svfprintf_r+0xb0>
  403b4c:	00407cc4 	.word	0x00407cc4
  403b50:	00407cd4 	.word	0x00407cd4
  403b54:	00407ca4 	.word	0x00407ca4
  403b58:	f04b 0b10 	orr.w	fp, fp, #16
  403b5c:	f01b 0f20 	tst.w	fp, #32
  403b60:	9311      	str	r3, [sp, #68]	; 0x44
  403b62:	f43f ae23 	beq.w	4037ac <_svfprintf_r+0x1c8>
  403b66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b68:	3507      	adds	r5, #7
  403b6a:	f025 0307 	bic.w	r3, r5, #7
  403b6e:	f103 0208 	add.w	r2, r3, #8
  403b72:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b76:	920f      	str	r2, [sp, #60]	; 0x3c
  403b78:	2301      	movs	r3, #1
  403b7a:	e626      	b.n	4037ca <_svfprintf_r+0x1e6>
  403b7c:	f89a 3000 	ldrb.w	r3, [sl]
  403b80:	2b2a      	cmp	r3, #42	; 0x2a
  403b82:	f10a 0401 	add.w	r4, sl, #1
  403b86:	f000 871f 	beq.w	4049c8 <_svfprintf_r+0x13e4>
  403b8a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403b8e:	2809      	cmp	r0, #9
  403b90:	46a2      	mov	sl, r4
  403b92:	f200 86ab 	bhi.w	4048ec <_svfprintf_r+0x1308>
  403b96:	2300      	movs	r3, #0
  403b98:	461c      	mov	r4, r3
  403b9a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403b9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403ba2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403ba6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403baa:	2809      	cmp	r0, #9
  403bac:	d9f5      	bls.n	403b9a <_svfprintf_r+0x5b6>
  403bae:	940a      	str	r4, [sp, #40]	; 0x28
  403bb0:	e572      	b.n	403698 <_svfprintf_r+0xb4>
  403bb2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403bb6:	f89a 3000 	ldrb.w	r3, [sl]
  403bba:	e56b      	b.n	403694 <_svfprintf_r+0xb0>
  403bbc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403bc0:	f89a 3000 	ldrb.w	r3, [sl]
  403bc4:	e566      	b.n	403694 <_svfprintf_r+0xb0>
  403bc6:	f89a 3000 	ldrb.w	r3, [sl]
  403bca:	2b6c      	cmp	r3, #108	; 0x6c
  403bcc:	bf03      	ittte	eq
  403bce:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403bd2:	f04b 0b20 	orreq.w	fp, fp, #32
  403bd6:	f10a 0a01 	addeq.w	sl, sl, #1
  403bda:	f04b 0b10 	orrne.w	fp, fp, #16
  403bde:	e559      	b.n	403694 <_svfprintf_r+0xb0>
  403be0:	2a00      	cmp	r2, #0
  403be2:	f040 8709 	bne.w	4049f8 <_svfprintf_r+0x1414>
  403be6:	f01b 0f20 	tst.w	fp, #32
  403bea:	f040 84f7 	bne.w	4045dc <_svfprintf_r+0xff8>
  403bee:	f01b 0f10 	tst.w	fp, #16
  403bf2:	f040 84aa 	bne.w	40454a <_svfprintf_r+0xf66>
  403bf6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bfa:	f000 84a6 	beq.w	40454a <_svfprintf_r+0xf66>
  403bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c00:	6813      	ldr	r3, [r2, #0]
  403c02:	3204      	adds	r2, #4
  403c04:	920f      	str	r2, [sp, #60]	; 0x3c
  403c06:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403c0a:	801a      	strh	r2, [r3, #0]
  403c0c:	e511      	b.n	403632 <_svfprintf_r+0x4e>
  403c0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c10:	4bb2      	ldr	r3, [pc, #712]	; (403edc <_svfprintf_r+0x8f8>)
  403c12:	680c      	ldr	r4, [r1, #0]
  403c14:	9318      	str	r3, [sp, #96]	; 0x60
  403c16:	2230      	movs	r2, #48	; 0x30
  403c18:	2378      	movs	r3, #120	; 0x78
  403c1a:	3104      	adds	r1, #4
  403c1c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403c20:	9311      	str	r3, [sp, #68]	; 0x44
  403c22:	f04b 0b02 	orr.w	fp, fp, #2
  403c26:	910f      	str	r1, [sp, #60]	; 0x3c
  403c28:	2500      	movs	r5, #0
  403c2a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403c2e:	2302      	movs	r3, #2
  403c30:	e5cb      	b.n	4037ca <_svfprintf_r+0x1e6>
  403c32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c34:	9311      	str	r3, [sp, #68]	; 0x44
  403c36:	680a      	ldr	r2, [r1, #0]
  403c38:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403c3c:	2300      	movs	r3, #0
  403c3e:	460a      	mov	r2, r1
  403c40:	461f      	mov	r7, r3
  403c42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403c46:	3204      	adds	r2, #4
  403c48:	2301      	movs	r3, #1
  403c4a:	9308      	str	r3, [sp, #32]
  403c4c:	f8cd b01c 	str.w	fp, [sp, #28]
  403c50:	970a      	str	r7, [sp, #40]	; 0x28
  403c52:	9712      	str	r7, [sp, #72]	; 0x48
  403c54:	920f      	str	r2, [sp, #60]	; 0x3c
  403c56:	930e      	str	r3, [sp, #56]	; 0x38
  403c58:	ae28      	add	r6, sp, #160	; 0xa0
  403c5a:	e5df      	b.n	40381c <_svfprintf_r+0x238>
  403c5c:	9311      	str	r3, [sp, #68]	; 0x44
  403c5e:	2a00      	cmp	r2, #0
  403c60:	f040 86e2 	bne.w	404a28 <_svfprintf_r+0x1444>
  403c64:	f01b 0f20 	tst.w	fp, #32
  403c68:	d15d      	bne.n	403d26 <_svfprintf_r+0x742>
  403c6a:	f01b 0f10 	tst.w	fp, #16
  403c6e:	f040 8306 	bne.w	40427e <_svfprintf_r+0xc9a>
  403c72:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c76:	f000 8302 	beq.w	40427e <_svfprintf_r+0xc9a>
  403c7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c7c:	f9b1 4000 	ldrsh.w	r4, [r1]
  403c80:	3104      	adds	r1, #4
  403c82:	17e5      	asrs	r5, r4, #31
  403c84:	4622      	mov	r2, r4
  403c86:	462b      	mov	r3, r5
  403c88:	910f      	str	r1, [sp, #60]	; 0x3c
  403c8a:	2a00      	cmp	r2, #0
  403c8c:	f173 0300 	sbcs.w	r3, r3, #0
  403c90:	db58      	blt.n	403d44 <_svfprintf_r+0x760>
  403c92:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c98:	1c4a      	adds	r2, r1, #1
  403c9a:	f04f 0301 	mov.w	r3, #1
  403c9e:	f47f ad9b 	bne.w	4037d8 <_svfprintf_r+0x1f4>
  403ca2:	ea54 0205 	orrs.w	r2, r4, r5
  403ca6:	f000 81dc 	beq.w	404062 <_svfprintf_r+0xa7e>
  403caa:	f8cd b01c 	str.w	fp, [sp, #28]
  403cae:	2b01      	cmp	r3, #1
  403cb0:	f000 8278 	beq.w	4041a4 <_svfprintf_r+0xbc0>
  403cb4:	2b02      	cmp	r3, #2
  403cb6:	f040 8203 	bne.w	4040c0 <_svfprintf_r+0xadc>
  403cba:	9818      	ldr	r0, [sp, #96]	; 0x60
  403cbc:	464e      	mov	r6, r9
  403cbe:	0923      	lsrs	r3, r4, #4
  403cc0:	f004 010f 	and.w	r1, r4, #15
  403cc4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403cc8:	092a      	lsrs	r2, r5, #4
  403cca:	461c      	mov	r4, r3
  403ccc:	4615      	mov	r5, r2
  403cce:	5c43      	ldrb	r3, [r0, r1]
  403cd0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403cd4:	ea54 0305 	orrs.w	r3, r4, r5
  403cd8:	d1f1      	bne.n	403cbe <_svfprintf_r+0x6da>
  403cda:	eba9 0306 	sub.w	r3, r9, r6
  403cde:	930e      	str	r3, [sp, #56]	; 0x38
  403ce0:	e590      	b.n	403804 <_svfprintf_r+0x220>
  403ce2:	9311      	str	r3, [sp, #68]	; 0x44
  403ce4:	2a00      	cmp	r2, #0
  403ce6:	f040 869b 	bne.w	404a20 <_svfprintf_r+0x143c>
  403cea:	4b7d      	ldr	r3, [pc, #500]	; (403ee0 <_svfprintf_r+0x8fc>)
  403cec:	9318      	str	r3, [sp, #96]	; 0x60
  403cee:	f01b 0f20 	tst.w	fp, #32
  403cf2:	f43f aeef 	beq.w	403ad4 <_svfprintf_r+0x4f0>
  403cf6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403cf8:	3507      	adds	r5, #7
  403cfa:	f025 0307 	bic.w	r3, r5, #7
  403cfe:	f103 0208 	add.w	r2, r3, #8
  403d02:	f01b 0f01 	tst.w	fp, #1
  403d06:	920f      	str	r2, [sp, #60]	; 0x3c
  403d08:	e9d3 4500 	ldrd	r4, r5, [r3]
  403d0c:	f47f aef4 	bne.w	403af8 <_svfprintf_r+0x514>
  403d10:	2302      	movs	r3, #2
  403d12:	e55a      	b.n	4037ca <_svfprintf_r+0x1e6>
  403d14:	9311      	str	r3, [sp, #68]	; 0x44
  403d16:	2a00      	cmp	r2, #0
  403d18:	f040 867e 	bne.w	404a18 <_svfprintf_r+0x1434>
  403d1c:	f04b 0b10 	orr.w	fp, fp, #16
  403d20:	f01b 0f20 	tst.w	fp, #32
  403d24:	d0a1      	beq.n	403c6a <_svfprintf_r+0x686>
  403d26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d28:	3507      	adds	r5, #7
  403d2a:	f025 0507 	bic.w	r5, r5, #7
  403d2e:	e9d5 2300 	ldrd	r2, r3, [r5]
  403d32:	2a00      	cmp	r2, #0
  403d34:	f105 0108 	add.w	r1, r5, #8
  403d38:	461d      	mov	r5, r3
  403d3a:	f173 0300 	sbcs.w	r3, r3, #0
  403d3e:	910f      	str	r1, [sp, #60]	; 0x3c
  403d40:	4614      	mov	r4, r2
  403d42:	daa6      	bge.n	403c92 <_svfprintf_r+0x6ae>
  403d44:	272d      	movs	r7, #45	; 0x2d
  403d46:	4264      	negs	r4, r4
  403d48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403d4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403d50:	2301      	movs	r3, #1
  403d52:	e53d      	b.n	4037d0 <_svfprintf_r+0x1ec>
  403d54:	9311      	str	r3, [sp, #68]	; 0x44
  403d56:	2a00      	cmp	r2, #0
  403d58:	f040 865a 	bne.w	404a10 <_svfprintf_r+0x142c>
  403d5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d5e:	3507      	adds	r5, #7
  403d60:	f025 0307 	bic.w	r3, r5, #7
  403d64:	f103 0208 	add.w	r2, r3, #8
  403d68:	920f      	str	r2, [sp, #60]	; 0x3c
  403d6a:	681a      	ldr	r2, [r3, #0]
  403d6c:	9214      	str	r2, [sp, #80]	; 0x50
  403d6e:	685b      	ldr	r3, [r3, #4]
  403d70:	9315      	str	r3, [sp, #84]	; 0x54
  403d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403d74:	9d14      	ldr	r5, [sp, #80]	; 0x50
  403d76:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403d7a:	4628      	mov	r0, r5
  403d7c:	4621      	mov	r1, r4
  403d7e:	f04f 32ff 	mov.w	r2, #4294967295
  403d82:	4b58      	ldr	r3, [pc, #352]	; (403ee4 <_svfprintf_r+0x900>)
  403d84:	f003 fe54 	bl	407a30 <__aeabi_dcmpun>
  403d88:	2800      	cmp	r0, #0
  403d8a:	f040 8348 	bne.w	40441e <_svfprintf_r+0xe3a>
  403d8e:	4628      	mov	r0, r5
  403d90:	4621      	mov	r1, r4
  403d92:	f04f 32ff 	mov.w	r2, #4294967295
  403d96:	4b53      	ldr	r3, [pc, #332]	; (403ee4 <_svfprintf_r+0x900>)
  403d98:	f003 fe2c 	bl	4079f4 <__aeabi_dcmple>
  403d9c:	2800      	cmp	r0, #0
  403d9e:	f040 833e 	bne.w	40441e <_svfprintf_r+0xe3a>
  403da2:	a814      	add	r0, sp, #80	; 0x50
  403da4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403da6:	f003 fe1b 	bl	4079e0 <__aeabi_dcmplt>
  403daa:	2800      	cmp	r0, #0
  403dac:	f040 852f 	bne.w	40480e <_svfprintf_r+0x122a>
  403db0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403db4:	4e4c      	ldr	r6, [pc, #304]	; (403ee8 <_svfprintf_r+0x904>)
  403db6:	4b4d      	ldr	r3, [pc, #308]	; (403eec <_svfprintf_r+0x908>)
  403db8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403dbc:	9007      	str	r0, [sp, #28]
  403dbe:	9811      	ldr	r0, [sp, #68]	; 0x44
  403dc0:	2203      	movs	r2, #3
  403dc2:	2100      	movs	r1, #0
  403dc4:	9208      	str	r2, [sp, #32]
  403dc6:	910a      	str	r1, [sp, #40]	; 0x28
  403dc8:	2847      	cmp	r0, #71	; 0x47
  403dca:	bfd8      	it	le
  403dcc:	461e      	movle	r6, r3
  403dce:	920e      	str	r2, [sp, #56]	; 0x38
  403dd0:	9112      	str	r1, [sp, #72]	; 0x48
  403dd2:	e51f      	b.n	403814 <_svfprintf_r+0x230>
  403dd4:	f04b 0b08 	orr.w	fp, fp, #8
  403dd8:	f89a 3000 	ldrb.w	r3, [sl]
  403ddc:	e45a      	b.n	403694 <_svfprintf_r+0xb0>
  403dde:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403de2:	2300      	movs	r3, #0
  403de4:	461c      	mov	r4, r3
  403de6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403dea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403dee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403df2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403df6:	2809      	cmp	r0, #9
  403df8:	d9f5      	bls.n	403de6 <_svfprintf_r+0x802>
  403dfa:	940d      	str	r4, [sp, #52]	; 0x34
  403dfc:	e44c      	b.n	403698 <_svfprintf_r+0xb4>
  403dfe:	f04b 0b10 	orr.w	fp, fp, #16
  403e02:	9311      	str	r3, [sp, #68]	; 0x44
  403e04:	f01b 0320 	ands.w	r3, fp, #32
  403e08:	f43f ae1e 	beq.w	403a48 <_svfprintf_r+0x464>
  403e0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e0e:	3507      	adds	r5, #7
  403e10:	f025 0307 	bic.w	r3, r5, #7
  403e14:	f103 0208 	add.w	r2, r3, #8
  403e18:	e9d3 4500 	ldrd	r4, r5, [r3]
  403e1c:	920f      	str	r2, [sp, #60]	; 0x3c
  403e1e:	2300      	movs	r3, #0
  403e20:	e4d3      	b.n	4037ca <_svfprintf_r+0x1e6>
  403e22:	9311      	str	r3, [sp, #68]	; 0x44
  403e24:	2a00      	cmp	r2, #0
  403e26:	f040 85e0 	bne.w	4049ea <_svfprintf_r+0x1406>
  403e2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e2c:	2a00      	cmp	r2, #0
  403e2e:	f43f aca4 	beq.w	40377a <_svfprintf_r+0x196>
  403e32:	2300      	movs	r3, #0
  403e34:	2101      	movs	r1, #1
  403e36:	461f      	mov	r7, r3
  403e38:	9108      	str	r1, [sp, #32]
  403e3a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403e3e:	f8cd b01c 	str.w	fp, [sp, #28]
  403e42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e46:	930a      	str	r3, [sp, #40]	; 0x28
  403e48:	9312      	str	r3, [sp, #72]	; 0x48
  403e4a:	910e      	str	r1, [sp, #56]	; 0x38
  403e4c:	ae28      	add	r6, sp, #160	; 0xa0
  403e4e:	e4e5      	b.n	40381c <_svfprintf_r+0x238>
  403e50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e52:	e535      	b.n	4038c0 <_svfprintf_r+0x2dc>
  403e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e56:	2b65      	cmp	r3, #101	; 0x65
  403e58:	f340 80a6 	ble.w	403fa8 <_svfprintf_r+0x9c4>
  403e5c:	a814      	add	r0, sp, #80	; 0x50
  403e5e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403e60:	f003 fdb4 	bl	4079cc <__aeabi_dcmpeq>
  403e64:	2800      	cmp	r0, #0
  403e66:	f000 814f 	beq.w	404108 <_svfprintf_r+0xb24>
  403e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e6c:	4a20      	ldr	r2, [pc, #128]	; (403ef0 <_svfprintf_r+0x90c>)
  403e6e:	f8c8 2000 	str.w	r2, [r8]
  403e72:	3301      	adds	r3, #1
  403e74:	3401      	adds	r4, #1
  403e76:	2201      	movs	r2, #1
  403e78:	2b07      	cmp	r3, #7
  403e7a:	9427      	str	r4, [sp, #156]	; 0x9c
  403e7c:	9326      	str	r3, [sp, #152]	; 0x98
  403e7e:	f8c8 2004 	str.w	r2, [r8, #4]
  403e82:	f300 836a 	bgt.w	40455a <_svfprintf_r+0xf76>
  403e86:	f108 0808 	add.w	r8, r8, #8
  403e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403e8e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e90:	4293      	cmp	r3, r2
  403e92:	db03      	blt.n	403e9c <_svfprintf_r+0x8b8>
  403e94:	9b07      	ldr	r3, [sp, #28]
  403e96:	07dd      	lsls	r5, r3, #31
  403e98:	f57f ad84 	bpl.w	4039a4 <_svfprintf_r+0x3c0>
  403e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e9e:	9919      	ldr	r1, [sp, #100]	; 0x64
  403ea0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403ea2:	f8c8 2000 	str.w	r2, [r8]
  403ea6:	3301      	adds	r3, #1
  403ea8:	440c      	add	r4, r1
  403eaa:	2b07      	cmp	r3, #7
  403eac:	f8c8 1004 	str.w	r1, [r8, #4]
  403eb0:	9427      	str	r4, [sp, #156]	; 0x9c
  403eb2:	9326      	str	r3, [sp, #152]	; 0x98
  403eb4:	f300 839e 	bgt.w	4045f4 <_svfprintf_r+0x1010>
  403eb8:	f108 0808 	add.w	r8, r8, #8
  403ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ebe:	1e5e      	subs	r6, r3, #1
  403ec0:	2e00      	cmp	r6, #0
  403ec2:	f77f ad6f 	ble.w	4039a4 <_svfprintf_r+0x3c0>
  403ec6:	2e10      	cmp	r6, #16
  403ec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eca:	4d0a      	ldr	r5, [pc, #40]	; (403ef4 <_svfprintf_r+0x910>)
  403ecc:	f340 81f5 	ble.w	4042ba <_svfprintf_r+0xcd6>
  403ed0:	4622      	mov	r2, r4
  403ed2:	2710      	movs	r7, #16
  403ed4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403eda:	e013      	b.n	403f04 <_svfprintf_r+0x920>
  403edc:	00407ca4 	.word	0x00407ca4
  403ee0:	00407c90 	.word	0x00407c90
  403ee4:	7fefffff 	.word	0x7fefffff
  403ee8:	00407c84 	.word	0x00407c84
  403eec:	00407c80 	.word	0x00407c80
  403ef0:	00407cc0 	.word	0x00407cc0
  403ef4:	00407cd4 	.word	0x00407cd4
  403ef8:	f108 0808 	add.w	r8, r8, #8
  403efc:	3e10      	subs	r6, #16
  403efe:	2e10      	cmp	r6, #16
  403f00:	f340 81da 	ble.w	4042b8 <_svfprintf_r+0xcd4>
  403f04:	3301      	adds	r3, #1
  403f06:	3210      	adds	r2, #16
  403f08:	2b07      	cmp	r3, #7
  403f0a:	9227      	str	r2, [sp, #156]	; 0x9c
  403f0c:	9326      	str	r3, [sp, #152]	; 0x98
  403f0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f12:	ddf1      	ble.n	403ef8 <_svfprintf_r+0x914>
  403f14:	aa25      	add	r2, sp, #148	; 0x94
  403f16:	4621      	mov	r1, r4
  403f18:	4658      	mov	r0, fp
  403f1a:	f003 f829 	bl	406f70 <__ssprint_r>
  403f1e:	2800      	cmp	r0, #0
  403f20:	f47f ac32 	bne.w	403788 <_svfprintf_r+0x1a4>
  403f24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f28:	46c8      	mov	r8, r9
  403f2a:	e7e7      	b.n	403efc <_svfprintf_r+0x918>
  403f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f2e:	9a08      	ldr	r2, [sp, #32]
  403f30:	1a9f      	subs	r7, r3, r2
  403f32:	2f00      	cmp	r7, #0
  403f34:	f77f ace7 	ble.w	403906 <_svfprintf_r+0x322>
  403f38:	2f10      	cmp	r7, #16
  403f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f3c:	4db6      	ldr	r5, [pc, #728]	; (404218 <_svfprintf_r+0xc34>)
  403f3e:	dd27      	ble.n	403f90 <_svfprintf_r+0x9ac>
  403f40:	4642      	mov	r2, r8
  403f42:	4621      	mov	r1, r4
  403f44:	46b0      	mov	r8, r6
  403f46:	f04f 0b10 	mov.w	fp, #16
  403f4a:	462e      	mov	r6, r5
  403f4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403f50:	e004      	b.n	403f5c <_svfprintf_r+0x978>
  403f52:	3f10      	subs	r7, #16
  403f54:	2f10      	cmp	r7, #16
  403f56:	f102 0208 	add.w	r2, r2, #8
  403f5a:	dd15      	ble.n	403f88 <_svfprintf_r+0x9a4>
  403f5c:	3301      	adds	r3, #1
  403f5e:	3110      	adds	r1, #16
  403f60:	2b07      	cmp	r3, #7
  403f62:	9127      	str	r1, [sp, #156]	; 0x9c
  403f64:	9326      	str	r3, [sp, #152]	; 0x98
  403f66:	e882 0840 	stmia.w	r2, {r6, fp}
  403f6a:	ddf2      	ble.n	403f52 <_svfprintf_r+0x96e>
  403f6c:	aa25      	add	r2, sp, #148	; 0x94
  403f6e:	4629      	mov	r1, r5
  403f70:	4620      	mov	r0, r4
  403f72:	f002 fffd 	bl	406f70 <__ssprint_r>
  403f76:	2800      	cmp	r0, #0
  403f78:	f47f ac06 	bne.w	403788 <_svfprintf_r+0x1a4>
  403f7c:	3f10      	subs	r7, #16
  403f7e:	2f10      	cmp	r7, #16
  403f80:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f84:	464a      	mov	r2, r9
  403f86:	dce9      	bgt.n	403f5c <_svfprintf_r+0x978>
  403f88:	4635      	mov	r5, r6
  403f8a:	460c      	mov	r4, r1
  403f8c:	4646      	mov	r6, r8
  403f8e:	4690      	mov	r8, r2
  403f90:	3301      	adds	r3, #1
  403f92:	443c      	add	r4, r7
  403f94:	2b07      	cmp	r3, #7
  403f96:	9427      	str	r4, [sp, #156]	; 0x9c
  403f98:	9326      	str	r3, [sp, #152]	; 0x98
  403f9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f9e:	f300 8232 	bgt.w	404406 <_svfprintf_r+0xe22>
  403fa2:	f108 0808 	add.w	r8, r8, #8
  403fa6:	e4ae      	b.n	403906 <_svfprintf_r+0x322>
  403fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403faa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403fac:	2b01      	cmp	r3, #1
  403fae:	f340 81fe 	ble.w	4043ae <_svfprintf_r+0xdca>
  403fb2:	3701      	adds	r7, #1
  403fb4:	3401      	adds	r4, #1
  403fb6:	2301      	movs	r3, #1
  403fb8:	2f07      	cmp	r7, #7
  403fba:	9427      	str	r4, [sp, #156]	; 0x9c
  403fbc:	9726      	str	r7, [sp, #152]	; 0x98
  403fbe:	f8c8 6000 	str.w	r6, [r8]
  403fc2:	f8c8 3004 	str.w	r3, [r8, #4]
  403fc6:	f300 8203 	bgt.w	4043d0 <_svfprintf_r+0xdec>
  403fca:	f108 0808 	add.w	r8, r8, #8
  403fce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403fd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403fd2:	f8c8 3000 	str.w	r3, [r8]
  403fd6:	3701      	adds	r7, #1
  403fd8:	4414      	add	r4, r2
  403fda:	2f07      	cmp	r7, #7
  403fdc:	9427      	str	r4, [sp, #156]	; 0x9c
  403fde:	9726      	str	r7, [sp, #152]	; 0x98
  403fe0:	f8c8 2004 	str.w	r2, [r8, #4]
  403fe4:	f300 8200 	bgt.w	4043e8 <_svfprintf_r+0xe04>
  403fe8:	f108 0808 	add.w	r8, r8, #8
  403fec:	a814      	add	r0, sp, #80	; 0x50
  403fee:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  403ff0:	f003 fcec 	bl	4079cc <__aeabi_dcmpeq>
  403ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ff6:	2800      	cmp	r0, #0
  403ff8:	f040 8101 	bne.w	4041fe <_svfprintf_r+0xc1a>
  403ffc:	3b01      	subs	r3, #1
  403ffe:	3701      	adds	r7, #1
  404000:	3601      	adds	r6, #1
  404002:	441c      	add	r4, r3
  404004:	2f07      	cmp	r7, #7
  404006:	9726      	str	r7, [sp, #152]	; 0x98
  404008:	9427      	str	r4, [sp, #156]	; 0x9c
  40400a:	f8c8 6000 	str.w	r6, [r8]
  40400e:	f8c8 3004 	str.w	r3, [r8, #4]
  404012:	f300 8128 	bgt.w	404266 <_svfprintf_r+0xc82>
  404016:	f108 0808 	add.w	r8, r8, #8
  40401a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40401c:	f8c8 2004 	str.w	r2, [r8, #4]
  404020:	3701      	adds	r7, #1
  404022:	4414      	add	r4, r2
  404024:	ab21      	add	r3, sp, #132	; 0x84
  404026:	2f07      	cmp	r7, #7
  404028:	9427      	str	r4, [sp, #156]	; 0x9c
  40402a:	9726      	str	r7, [sp, #152]	; 0x98
  40402c:	f8c8 3000 	str.w	r3, [r8]
  404030:	f77f acb6 	ble.w	4039a0 <_svfprintf_r+0x3bc>
  404034:	aa25      	add	r2, sp, #148	; 0x94
  404036:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404038:	980c      	ldr	r0, [sp, #48]	; 0x30
  40403a:	f002 ff99 	bl	406f70 <__ssprint_r>
  40403e:	2800      	cmp	r0, #0
  404040:	f47f aba2 	bne.w	403788 <_svfprintf_r+0x1a4>
  404044:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404046:	46c8      	mov	r8, r9
  404048:	e4ac      	b.n	4039a4 <_svfprintf_r+0x3c0>
  40404a:	aa25      	add	r2, sp, #148	; 0x94
  40404c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40404e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404050:	f002 ff8e 	bl	406f70 <__ssprint_r>
  404054:	2800      	cmp	r0, #0
  404056:	f43f acee 	beq.w	403a36 <_svfprintf_r+0x452>
  40405a:	f7ff bb95 	b.w	403788 <_svfprintf_r+0x1a4>
  40405e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404062:	2b01      	cmp	r3, #1
  404064:	f000 8135 	beq.w	4042d2 <_svfprintf_r+0xcee>
  404068:	2b02      	cmp	r3, #2
  40406a:	d125      	bne.n	4040b8 <_svfprintf_r+0xad4>
  40406c:	f8cd b01c 	str.w	fp, [sp, #28]
  404070:	2400      	movs	r4, #0
  404072:	2500      	movs	r5, #0
  404074:	e621      	b.n	403cba <_svfprintf_r+0x6d6>
  404076:	aa25      	add	r2, sp, #148	; 0x94
  404078:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40407a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40407c:	f002 ff78 	bl	406f70 <__ssprint_r>
  404080:	2800      	cmp	r0, #0
  404082:	f47f ab81 	bne.w	403788 <_svfprintf_r+0x1a4>
  404086:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404088:	46c8      	mov	r8, r9
  40408a:	e478      	b.n	40397e <_svfprintf_r+0x39a>
  40408c:	aa25      	add	r2, sp, #148	; 0x94
  40408e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404090:	980c      	ldr	r0, [sp, #48]	; 0x30
  404092:	f002 ff6d 	bl	406f70 <__ssprint_r>
  404096:	2800      	cmp	r0, #0
  404098:	f47f ab76 	bne.w	403788 <_svfprintf_r+0x1a4>
  40409c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40409e:	46c8      	mov	r8, r9
  4040a0:	e41e      	b.n	4038e0 <_svfprintf_r+0x2fc>
  4040a2:	aa25      	add	r2, sp, #148	; 0x94
  4040a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040a8:	f002 ff62 	bl	406f70 <__ssprint_r>
  4040ac:	2800      	cmp	r0, #0
  4040ae:	f47f ab6b 	bne.w	403788 <_svfprintf_r+0x1a4>
  4040b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040b4:	46c8      	mov	r8, r9
  4040b6:	e423      	b.n	403900 <_svfprintf_r+0x31c>
  4040b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4040bc:	2400      	movs	r4, #0
  4040be:	2500      	movs	r5, #0
  4040c0:	4649      	mov	r1, r9
  4040c2:	e000      	b.n	4040c6 <_svfprintf_r+0xae2>
  4040c4:	4631      	mov	r1, r6
  4040c6:	08e2      	lsrs	r2, r4, #3
  4040c8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4040cc:	08e8      	lsrs	r0, r5, #3
  4040ce:	f004 0307 	and.w	r3, r4, #7
  4040d2:	4605      	mov	r5, r0
  4040d4:	4614      	mov	r4, r2
  4040d6:	3330      	adds	r3, #48	; 0x30
  4040d8:	ea54 0205 	orrs.w	r2, r4, r5
  4040dc:	f801 3c01 	strb.w	r3, [r1, #-1]
  4040e0:	f101 36ff 	add.w	r6, r1, #4294967295
  4040e4:	d1ee      	bne.n	4040c4 <_svfprintf_r+0xae0>
  4040e6:	9a07      	ldr	r2, [sp, #28]
  4040e8:	07d2      	lsls	r2, r2, #31
  4040ea:	f57f adf6 	bpl.w	403cda <_svfprintf_r+0x6f6>
  4040ee:	2b30      	cmp	r3, #48	; 0x30
  4040f0:	f43f adf3 	beq.w	403cda <_svfprintf_r+0x6f6>
  4040f4:	3902      	subs	r1, #2
  4040f6:	2330      	movs	r3, #48	; 0x30
  4040f8:	f806 3c01 	strb.w	r3, [r6, #-1]
  4040fc:	eba9 0301 	sub.w	r3, r9, r1
  404100:	930e      	str	r3, [sp, #56]	; 0x38
  404102:	460e      	mov	r6, r1
  404104:	f7ff bb7e 	b.w	403804 <_svfprintf_r+0x220>
  404108:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40410a:	2900      	cmp	r1, #0
  40410c:	f340 822f 	ble.w	40456e <_svfprintf_r+0xf8a>
  404110:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404112:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404114:	4293      	cmp	r3, r2
  404116:	bfa8      	it	ge
  404118:	4613      	movge	r3, r2
  40411a:	2b00      	cmp	r3, #0
  40411c:	461f      	mov	r7, r3
  40411e:	dd0d      	ble.n	40413c <_svfprintf_r+0xb58>
  404120:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404122:	f8c8 6000 	str.w	r6, [r8]
  404126:	3301      	adds	r3, #1
  404128:	443c      	add	r4, r7
  40412a:	2b07      	cmp	r3, #7
  40412c:	9427      	str	r4, [sp, #156]	; 0x9c
  40412e:	f8c8 7004 	str.w	r7, [r8, #4]
  404132:	9326      	str	r3, [sp, #152]	; 0x98
  404134:	f300 8320 	bgt.w	404778 <_svfprintf_r+0x1194>
  404138:	f108 0808 	add.w	r8, r8, #8
  40413c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40413e:	2f00      	cmp	r7, #0
  404140:	bfa8      	it	ge
  404142:	1bdb      	subge	r3, r3, r7
  404144:	2b00      	cmp	r3, #0
  404146:	461f      	mov	r7, r3
  404148:	f340 80d7 	ble.w	4042fa <_svfprintf_r+0xd16>
  40414c:	2f10      	cmp	r7, #16
  40414e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404150:	4d31      	ldr	r5, [pc, #196]	; (404218 <_svfprintf_r+0xc34>)
  404152:	f340 81ee 	ble.w	404532 <_svfprintf_r+0xf4e>
  404156:	4642      	mov	r2, r8
  404158:	4621      	mov	r1, r4
  40415a:	46b0      	mov	r8, r6
  40415c:	f04f 0b10 	mov.w	fp, #16
  404160:	462e      	mov	r6, r5
  404162:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404164:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404166:	e004      	b.n	404172 <_svfprintf_r+0xb8e>
  404168:	3208      	adds	r2, #8
  40416a:	3f10      	subs	r7, #16
  40416c:	2f10      	cmp	r7, #16
  40416e:	f340 81dc 	ble.w	40452a <_svfprintf_r+0xf46>
  404172:	3301      	adds	r3, #1
  404174:	3110      	adds	r1, #16
  404176:	2b07      	cmp	r3, #7
  404178:	9127      	str	r1, [sp, #156]	; 0x9c
  40417a:	9326      	str	r3, [sp, #152]	; 0x98
  40417c:	e882 0840 	stmia.w	r2, {r6, fp}
  404180:	ddf2      	ble.n	404168 <_svfprintf_r+0xb84>
  404182:	aa25      	add	r2, sp, #148	; 0x94
  404184:	4629      	mov	r1, r5
  404186:	4620      	mov	r0, r4
  404188:	f002 fef2 	bl	406f70 <__ssprint_r>
  40418c:	2800      	cmp	r0, #0
  40418e:	f47f aafb 	bne.w	403788 <_svfprintf_r+0x1a4>
  404192:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404194:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404196:	464a      	mov	r2, r9
  404198:	e7e7      	b.n	40416a <_svfprintf_r+0xb86>
  40419a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40419c:	930e      	str	r3, [sp, #56]	; 0x38
  40419e:	464e      	mov	r6, r9
  4041a0:	f7ff bb30 	b.w	403804 <_svfprintf_r+0x220>
  4041a4:	2d00      	cmp	r5, #0
  4041a6:	bf08      	it	eq
  4041a8:	2c0a      	cmpeq	r4, #10
  4041aa:	f0c0 8090 	bcc.w	4042ce <_svfprintf_r+0xcea>
  4041ae:	464e      	mov	r6, r9
  4041b0:	4620      	mov	r0, r4
  4041b2:	4629      	mov	r1, r5
  4041b4:	220a      	movs	r2, #10
  4041b6:	2300      	movs	r3, #0
  4041b8:	f7fe fd18 	bl	402bec <__aeabi_uldivmod>
  4041bc:	3230      	adds	r2, #48	; 0x30
  4041be:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4041c2:	4620      	mov	r0, r4
  4041c4:	4629      	mov	r1, r5
  4041c6:	2300      	movs	r3, #0
  4041c8:	220a      	movs	r2, #10
  4041ca:	f7fe fd0f 	bl	402bec <__aeabi_uldivmod>
  4041ce:	4604      	mov	r4, r0
  4041d0:	460d      	mov	r5, r1
  4041d2:	ea54 0305 	orrs.w	r3, r4, r5
  4041d6:	d1eb      	bne.n	4041b0 <_svfprintf_r+0xbcc>
  4041d8:	eba9 0306 	sub.w	r3, r9, r6
  4041dc:	930e      	str	r3, [sp, #56]	; 0x38
  4041de:	f7ff bb11 	b.w	403804 <_svfprintf_r+0x220>
  4041e2:	aa25      	add	r2, sp, #148	; 0x94
  4041e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041e8:	f002 fec2 	bl	406f70 <__ssprint_r>
  4041ec:	2800      	cmp	r0, #0
  4041ee:	f47f aacb 	bne.w	403788 <_svfprintf_r+0x1a4>
  4041f2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041f8:	46c8      	mov	r8, r9
  4041fa:	f7ff bb61 	b.w	4038c0 <_svfprintf_r+0x2dc>
  4041fe:	1e5e      	subs	r6, r3, #1
  404200:	2e00      	cmp	r6, #0
  404202:	f77f af0a 	ble.w	40401a <_svfprintf_r+0xa36>
  404206:	2e10      	cmp	r6, #16
  404208:	4d03      	ldr	r5, [pc, #12]	; (404218 <_svfprintf_r+0xc34>)
  40420a:	dd23      	ble.n	404254 <_svfprintf_r+0xc70>
  40420c:	4622      	mov	r2, r4
  40420e:	f04f 0b10 	mov.w	fp, #16
  404212:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404214:	e007      	b.n	404226 <_svfprintf_r+0xc42>
  404216:	bf00      	nop
  404218:	00407cd4 	.word	0x00407cd4
  40421c:	3e10      	subs	r6, #16
  40421e:	2e10      	cmp	r6, #16
  404220:	f108 0808 	add.w	r8, r8, #8
  404224:	dd15      	ble.n	404252 <_svfprintf_r+0xc6e>
  404226:	3701      	adds	r7, #1
  404228:	3210      	adds	r2, #16
  40422a:	2f07      	cmp	r7, #7
  40422c:	9227      	str	r2, [sp, #156]	; 0x9c
  40422e:	9726      	str	r7, [sp, #152]	; 0x98
  404230:	e888 0820 	stmia.w	r8, {r5, fp}
  404234:	ddf2      	ble.n	40421c <_svfprintf_r+0xc38>
  404236:	aa25      	add	r2, sp, #148	; 0x94
  404238:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40423a:	4620      	mov	r0, r4
  40423c:	f002 fe98 	bl	406f70 <__ssprint_r>
  404240:	2800      	cmp	r0, #0
  404242:	f47f aaa1 	bne.w	403788 <_svfprintf_r+0x1a4>
  404246:	3e10      	subs	r6, #16
  404248:	2e10      	cmp	r6, #16
  40424a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40424c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40424e:	46c8      	mov	r8, r9
  404250:	dce9      	bgt.n	404226 <_svfprintf_r+0xc42>
  404252:	4614      	mov	r4, r2
  404254:	3701      	adds	r7, #1
  404256:	4434      	add	r4, r6
  404258:	2f07      	cmp	r7, #7
  40425a:	9427      	str	r4, [sp, #156]	; 0x9c
  40425c:	9726      	str	r7, [sp, #152]	; 0x98
  40425e:	e888 0060 	stmia.w	r8, {r5, r6}
  404262:	f77f aed8 	ble.w	404016 <_svfprintf_r+0xa32>
  404266:	aa25      	add	r2, sp, #148	; 0x94
  404268:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40426a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40426c:	f002 fe80 	bl	406f70 <__ssprint_r>
  404270:	2800      	cmp	r0, #0
  404272:	f47f aa89 	bne.w	403788 <_svfprintf_r+0x1a4>
  404276:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404278:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40427a:	46c8      	mov	r8, r9
  40427c:	e6cd      	b.n	40401a <_svfprintf_r+0xa36>
  40427e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404280:	6814      	ldr	r4, [r2, #0]
  404282:	4613      	mov	r3, r2
  404284:	3304      	adds	r3, #4
  404286:	17e5      	asrs	r5, r4, #31
  404288:	930f      	str	r3, [sp, #60]	; 0x3c
  40428a:	4622      	mov	r2, r4
  40428c:	462b      	mov	r3, r5
  40428e:	e4fc      	b.n	403c8a <_svfprintf_r+0x6a6>
  404290:	3204      	adds	r2, #4
  404292:	681c      	ldr	r4, [r3, #0]
  404294:	920f      	str	r2, [sp, #60]	; 0x3c
  404296:	2301      	movs	r3, #1
  404298:	2500      	movs	r5, #0
  40429a:	f7ff ba96 	b.w	4037ca <_svfprintf_r+0x1e6>
  40429e:	681c      	ldr	r4, [r3, #0]
  4042a0:	3304      	adds	r3, #4
  4042a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4042a4:	2500      	movs	r5, #0
  4042a6:	e423      	b.n	403af0 <_svfprintf_r+0x50c>
  4042a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4042aa:	460a      	mov	r2, r1
  4042ac:	3204      	adds	r2, #4
  4042ae:	680c      	ldr	r4, [r1, #0]
  4042b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4042b2:	2500      	movs	r5, #0
  4042b4:	f7ff ba89 	b.w	4037ca <_svfprintf_r+0x1e6>
  4042b8:	4614      	mov	r4, r2
  4042ba:	3301      	adds	r3, #1
  4042bc:	4434      	add	r4, r6
  4042be:	2b07      	cmp	r3, #7
  4042c0:	9427      	str	r4, [sp, #156]	; 0x9c
  4042c2:	9326      	str	r3, [sp, #152]	; 0x98
  4042c4:	e888 0060 	stmia.w	r8, {r5, r6}
  4042c8:	f77f ab6a 	ble.w	4039a0 <_svfprintf_r+0x3bc>
  4042cc:	e6b2      	b.n	404034 <_svfprintf_r+0xa50>
  4042ce:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4042d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4042d6:	ae42      	add	r6, sp, #264	; 0x108
  4042d8:	3430      	adds	r4, #48	; 0x30
  4042da:	2301      	movs	r3, #1
  4042dc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4042e0:	930e      	str	r3, [sp, #56]	; 0x38
  4042e2:	f7ff ba8f 	b.w	403804 <_svfprintf_r+0x220>
  4042e6:	aa25      	add	r2, sp, #148	; 0x94
  4042e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042ec:	f002 fe40 	bl	406f70 <__ssprint_r>
  4042f0:	2800      	cmp	r0, #0
  4042f2:	f47f aa49 	bne.w	403788 <_svfprintf_r+0x1a4>
  4042f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042f8:	46c8      	mov	r8, r9
  4042fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4042fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042fe:	429a      	cmp	r2, r3
  404300:	db44      	blt.n	40438c <_svfprintf_r+0xda8>
  404302:	9b07      	ldr	r3, [sp, #28]
  404304:	07d9      	lsls	r1, r3, #31
  404306:	d441      	bmi.n	40438c <_svfprintf_r+0xda8>
  404308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40430a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40430c:	1a9a      	subs	r2, r3, r2
  40430e:	1a1d      	subs	r5, r3, r0
  404310:	4295      	cmp	r5, r2
  404312:	bfa8      	it	ge
  404314:	4615      	movge	r5, r2
  404316:	2d00      	cmp	r5, #0
  404318:	dd0e      	ble.n	404338 <_svfprintf_r+0xd54>
  40431a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40431c:	f8c8 5004 	str.w	r5, [r8, #4]
  404320:	3101      	adds	r1, #1
  404322:	4406      	add	r6, r0
  404324:	442c      	add	r4, r5
  404326:	2907      	cmp	r1, #7
  404328:	f8c8 6000 	str.w	r6, [r8]
  40432c:	9427      	str	r4, [sp, #156]	; 0x9c
  40432e:	9126      	str	r1, [sp, #152]	; 0x98
  404330:	f300 823b 	bgt.w	4047aa <_svfprintf_r+0x11c6>
  404334:	f108 0808 	add.w	r8, r8, #8
  404338:	2d00      	cmp	r5, #0
  40433a:	bfac      	ite	ge
  40433c:	1b56      	subge	r6, r2, r5
  40433e:	4616      	movlt	r6, r2
  404340:	2e00      	cmp	r6, #0
  404342:	f77f ab2f 	ble.w	4039a4 <_svfprintf_r+0x3c0>
  404346:	2e10      	cmp	r6, #16
  404348:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40434a:	4db0      	ldr	r5, [pc, #704]	; (40460c <_svfprintf_r+0x1028>)
  40434c:	ddb5      	ble.n	4042ba <_svfprintf_r+0xcd6>
  40434e:	4622      	mov	r2, r4
  404350:	2710      	movs	r7, #16
  404352:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404358:	e004      	b.n	404364 <_svfprintf_r+0xd80>
  40435a:	f108 0808 	add.w	r8, r8, #8
  40435e:	3e10      	subs	r6, #16
  404360:	2e10      	cmp	r6, #16
  404362:	dda9      	ble.n	4042b8 <_svfprintf_r+0xcd4>
  404364:	3301      	adds	r3, #1
  404366:	3210      	adds	r2, #16
  404368:	2b07      	cmp	r3, #7
  40436a:	9227      	str	r2, [sp, #156]	; 0x9c
  40436c:	9326      	str	r3, [sp, #152]	; 0x98
  40436e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404372:	ddf2      	ble.n	40435a <_svfprintf_r+0xd76>
  404374:	aa25      	add	r2, sp, #148	; 0x94
  404376:	4621      	mov	r1, r4
  404378:	4658      	mov	r0, fp
  40437a:	f002 fdf9 	bl	406f70 <__ssprint_r>
  40437e:	2800      	cmp	r0, #0
  404380:	f47f aa02 	bne.w	403788 <_svfprintf_r+0x1a4>
  404384:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404386:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404388:	46c8      	mov	r8, r9
  40438a:	e7e8      	b.n	40435e <_svfprintf_r+0xd7a>
  40438c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40438e:	9819      	ldr	r0, [sp, #100]	; 0x64
  404390:	991a      	ldr	r1, [sp, #104]	; 0x68
  404392:	f8c8 1000 	str.w	r1, [r8]
  404396:	3301      	adds	r3, #1
  404398:	4404      	add	r4, r0
  40439a:	2b07      	cmp	r3, #7
  40439c:	9427      	str	r4, [sp, #156]	; 0x9c
  40439e:	f8c8 0004 	str.w	r0, [r8, #4]
  4043a2:	9326      	str	r3, [sp, #152]	; 0x98
  4043a4:	f300 81f5 	bgt.w	404792 <_svfprintf_r+0x11ae>
  4043a8:	f108 0808 	add.w	r8, r8, #8
  4043ac:	e7ac      	b.n	404308 <_svfprintf_r+0xd24>
  4043ae:	9b07      	ldr	r3, [sp, #28]
  4043b0:	07da      	lsls	r2, r3, #31
  4043b2:	f53f adfe 	bmi.w	403fb2 <_svfprintf_r+0x9ce>
  4043b6:	3701      	adds	r7, #1
  4043b8:	3401      	adds	r4, #1
  4043ba:	2301      	movs	r3, #1
  4043bc:	2f07      	cmp	r7, #7
  4043be:	9427      	str	r4, [sp, #156]	; 0x9c
  4043c0:	9726      	str	r7, [sp, #152]	; 0x98
  4043c2:	f8c8 6000 	str.w	r6, [r8]
  4043c6:	f8c8 3004 	str.w	r3, [r8, #4]
  4043ca:	f77f ae24 	ble.w	404016 <_svfprintf_r+0xa32>
  4043ce:	e74a      	b.n	404266 <_svfprintf_r+0xc82>
  4043d0:	aa25      	add	r2, sp, #148	; 0x94
  4043d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043d6:	f002 fdcb 	bl	406f70 <__ssprint_r>
  4043da:	2800      	cmp	r0, #0
  4043dc:	f47f a9d4 	bne.w	403788 <_svfprintf_r+0x1a4>
  4043e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043e2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043e4:	46c8      	mov	r8, r9
  4043e6:	e5f2      	b.n	403fce <_svfprintf_r+0x9ea>
  4043e8:	aa25      	add	r2, sp, #148	; 0x94
  4043ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043ee:	f002 fdbf 	bl	406f70 <__ssprint_r>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	f47f a9c8 	bne.w	403788 <_svfprintf_r+0x1a4>
  4043f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043fc:	46c8      	mov	r8, r9
  4043fe:	e5f5      	b.n	403fec <_svfprintf_r+0xa08>
  404400:	464e      	mov	r6, r9
  404402:	f7ff b9ff 	b.w	403804 <_svfprintf_r+0x220>
  404406:	aa25      	add	r2, sp, #148	; 0x94
  404408:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40440a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40440c:	f002 fdb0 	bl	406f70 <__ssprint_r>
  404410:	2800      	cmp	r0, #0
  404412:	f47f a9b9 	bne.w	403788 <_svfprintf_r+0x1a4>
  404416:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404418:	46c8      	mov	r8, r9
  40441a:	f7ff ba74 	b.w	403906 <_svfprintf_r+0x322>
  40441e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404420:	4622      	mov	r2, r4
  404422:	4620      	mov	r0, r4
  404424:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404426:	4623      	mov	r3, r4
  404428:	4621      	mov	r1, r4
  40442a:	f003 fb01 	bl	407a30 <__aeabi_dcmpun>
  40442e:	2800      	cmp	r0, #0
  404430:	f040 8286 	bne.w	404940 <_svfprintf_r+0x135c>
  404434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404436:	3301      	adds	r3, #1
  404438:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40443a:	f023 0320 	bic.w	r3, r3, #32
  40443e:	930e      	str	r3, [sp, #56]	; 0x38
  404440:	f000 81e2 	beq.w	404808 <_svfprintf_r+0x1224>
  404444:	2b47      	cmp	r3, #71	; 0x47
  404446:	f000 811e 	beq.w	404686 <_svfprintf_r+0x10a2>
  40444a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40444e:	9307      	str	r3, [sp, #28]
  404450:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404452:	1e1f      	subs	r7, r3, #0
  404454:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404456:	9308      	str	r3, [sp, #32]
  404458:	bfbb      	ittet	lt
  40445a:	463b      	movlt	r3, r7
  40445c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404460:	2300      	movge	r3, #0
  404462:	232d      	movlt	r3, #45	; 0x2d
  404464:	9310      	str	r3, [sp, #64]	; 0x40
  404466:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404468:	2b66      	cmp	r3, #102	; 0x66
  40446a:	f000 81bb 	beq.w	4047e4 <_svfprintf_r+0x1200>
  40446e:	2b46      	cmp	r3, #70	; 0x46
  404470:	f000 80df 	beq.w	404632 <_svfprintf_r+0x104e>
  404474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404476:	9a08      	ldr	r2, [sp, #32]
  404478:	2b45      	cmp	r3, #69	; 0x45
  40447a:	bf0c      	ite	eq
  40447c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40447e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404480:	a823      	add	r0, sp, #140	; 0x8c
  404482:	a920      	add	r1, sp, #128	; 0x80
  404484:	bf08      	it	eq
  404486:	1c5d      	addeq	r5, r3, #1
  404488:	9004      	str	r0, [sp, #16]
  40448a:	9103      	str	r1, [sp, #12]
  40448c:	a81f      	add	r0, sp, #124	; 0x7c
  40448e:	2102      	movs	r1, #2
  404490:	463b      	mov	r3, r7
  404492:	9002      	str	r0, [sp, #8]
  404494:	9501      	str	r5, [sp, #4]
  404496:	9100      	str	r1, [sp, #0]
  404498:	980c      	ldr	r0, [sp, #48]	; 0x30
  40449a:	f000 fb6d 	bl	404b78 <_dtoa_r>
  40449e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a0:	2b67      	cmp	r3, #103	; 0x67
  4044a2:	4606      	mov	r6, r0
  4044a4:	f040 81e0 	bne.w	404868 <_svfprintf_r+0x1284>
  4044a8:	f01b 0f01 	tst.w	fp, #1
  4044ac:	f000 8246 	beq.w	40493c <_svfprintf_r+0x1358>
  4044b0:	1974      	adds	r4, r6, r5
  4044b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4044b4:	9808      	ldr	r0, [sp, #32]
  4044b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4044b8:	4639      	mov	r1, r7
  4044ba:	f003 fa87 	bl	4079cc <__aeabi_dcmpeq>
  4044be:	2800      	cmp	r0, #0
  4044c0:	f040 8165 	bne.w	40478e <_svfprintf_r+0x11aa>
  4044c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4044c6:	42a3      	cmp	r3, r4
  4044c8:	d206      	bcs.n	4044d8 <_svfprintf_r+0xef4>
  4044ca:	2130      	movs	r1, #48	; 0x30
  4044cc:	1c5a      	adds	r2, r3, #1
  4044ce:	9223      	str	r2, [sp, #140]	; 0x8c
  4044d0:	7019      	strb	r1, [r3, #0]
  4044d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4044d4:	429c      	cmp	r4, r3
  4044d6:	d8f9      	bhi.n	4044cc <_svfprintf_r+0xee8>
  4044d8:	1b9b      	subs	r3, r3, r6
  4044da:	9313      	str	r3, [sp, #76]	; 0x4c
  4044dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044de:	2b47      	cmp	r3, #71	; 0x47
  4044e0:	f000 80e9 	beq.w	4046b6 <_svfprintf_r+0x10d2>
  4044e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044e6:	2b65      	cmp	r3, #101	; 0x65
  4044e8:	f340 81cd 	ble.w	404886 <_svfprintf_r+0x12a2>
  4044ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044ee:	2b66      	cmp	r3, #102	; 0x66
  4044f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4044f2:	9312      	str	r3, [sp, #72]	; 0x48
  4044f4:	f000 819e 	beq.w	404834 <_svfprintf_r+0x1250>
  4044f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4044fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4044fc:	4619      	mov	r1, r3
  4044fe:	4291      	cmp	r1, r2
  404500:	f300 818a 	bgt.w	404818 <_svfprintf_r+0x1234>
  404504:	f01b 0f01 	tst.w	fp, #1
  404508:	f040 8213 	bne.w	404932 <_svfprintf_r+0x134e>
  40450c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404510:	9308      	str	r3, [sp, #32]
  404512:	2367      	movs	r3, #103	; 0x67
  404514:	920e      	str	r2, [sp, #56]	; 0x38
  404516:	9311      	str	r3, [sp, #68]	; 0x44
  404518:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40451a:	2b00      	cmp	r3, #0
  40451c:	f040 80c4 	bne.w	4046a8 <_svfprintf_r+0x10c4>
  404520:	930a      	str	r3, [sp, #40]	; 0x28
  404522:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404526:	f7ff b975 	b.w	403814 <_svfprintf_r+0x230>
  40452a:	4635      	mov	r5, r6
  40452c:	460c      	mov	r4, r1
  40452e:	4646      	mov	r6, r8
  404530:	4690      	mov	r8, r2
  404532:	3301      	adds	r3, #1
  404534:	443c      	add	r4, r7
  404536:	2b07      	cmp	r3, #7
  404538:	9427      	str	r4, [sp, #156]	; 0x9c
  40453a:	9326      	str	r3, [sp, #152]	; 0x98
  40453c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404540:	f73f aed1 	bgt.w	4042e6 <_svfprintf_r+0xd02>
  404544:	f108 0808 	add.w	r8, r8, #8
  404548:	e6d7      	b.n	4042fa <_svfprintf_r+0xd16>
  40454a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40454c:	6813      	ldr	r3, [r2, #0]
  40454e:	3204      	adds	r2, #4
  404550:	920f      	str	r2, [sp, #60]	; 0x3c
  404552:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404554:	601a      	str	r2, [r3, #0]
  404556:	f7ff b86c 	b.w	403632 <_svfprintf_r+0x4e>
  40455a:	aa25      	add	r2, sp, #148	; 0x94
  40455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40455e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404560:	f002 fd06 	bl	406f70 <__ssprint_r>
  404564:	2800      	cmp	r0, #0
  404566:	f47f a90f 	bne.w	403788 <_svfprintf_r+0x1a4>
  40456a:	46c8      	mov	r8, r9
  40456c:	e48d      	b.n	403e8a <_svfprintf_r+0x8a6>
  40456e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404570:	4a27      	ldr	r2, [pc, #156]	; (404610 <_svfprintf_r+0x102c>)
  404572:	f8c8 2000 	str.w	r2, [r8]
  404576:	3301      	adds	r3, #1
  404578:	3401      	adds	r4, #1
  40457a:	2201      	movs	r2, #1
  40457c:	2b07      	cmp	r3, #7
  40457e:	9427      	str	r4, [sp, #156]	; 0x9c
  404580:	9326      	str	r3, [sp, #152]	; 0x98
  404582:	f8c8 2004 	str.w	r2, [r8, #4]
  404586:	dc72      	bgt.n	40466e <_svfprintf_r+0x108a>
  404588:	f108 0808 	add.w	r8, r8, #8
  40458c:	b929      	cbnz	r1, 40459a <_svfprintf_r+0xfb6>
  40458e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404590:	b91b      	cbnz	r3, 40459a <_svfprintf_r+0xfb6>
  404592:	9b07      	ldr	r3, [sp, #28]
  404594:	07d8      	lsls	r0, r3, #31
  404596:	f57f aa05 	bpl.w	4039a4 <_svfprintf_r+0x3c0>
  40459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40459c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40459e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4045a0:	f8c8 2000 	str.w	r2, [r8]
  4045a4:	3301      	adds	r3, #1
  4045a6:	4602      	mov	r2, r0
  4045a8:	4422      	add	r2, r4
  4045aa:	2b07      	cmp	r3, #7
  4045ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4045ae:	f8c8 0004 	str.w	r0, [r8, #4]
  4045b2:	9326      	str	r3, [sp, #152]	; 0x98
  4045b4:	f300 818d 	bgt.w	4048d2 <_svfprintf_r+0x12ee>
  4045b8:	f108 0808 	add.w	r8, r8, #8
  4045bc:	2900      	cmp	r1, #0
  4045be:	f2c0 8165 	blt.w	40488c <_svfprintf_r+0x12a8>
  4045c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4045c4:	f8c8 6000 	str.w	r6, [r8]
  4045c8:	3301      	adds	r3, #1
  4045ca:	188c      	adds	r4, r1, r2
  4045cc:	2b07      	cmp	r3, #7
  4045ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4045d0:	9326      	str	r3, [sp, #152]	; 0x98
  4045d2:	f8c8 1004 	str.w	r1, [r8, #4]
  4045d6:	f77f a9e3 	ble.w	4039a0 <_svfprintf_r+0x3bc>
  4045da:	e52b      	b.n	404034 <_svfprintf_r+0xa50>
  4045dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045de:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045e0:	6813      	ldr	r3, [r2, #0]
  4045e2:	17cd      	asrs	r5, r1, #31
  4045e4:	4608      	mov	r0, r1
  4045e6:	3204      	adds	r2, #4
  4045e8:	4629      	mov	r1, r5
  4045ea:	920f      	str	r2, [sp, #60]	; 0x3c
  4045ec:	e9c3 0100 	strd	r0, r1, [r3]
  4045f0:	f7ff b81f 	b.w	403632 <_svfprintf_r+0x4e>
  4045f4:	aa25      	add	r2, sp, #148	; 0x94
  4045f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045fa:	f002 fcb9 	bl	406f70 <__ssprint_r>
  4045fe:	2800      	cmp	r0, #0
  404600:	f47f a8c2 	bne.w	403788 <_svfprintf_r+0x1a4>
  404604:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404606:	46c8      	mov	r8, r9
  404608:	e458      	b.n	403ebc <_svfprintf_r+0x8d8>
  40460a:	bf00      	nop
  40460c:	00407cd4 	.word	0x00407cd4
  404610:	00407cc0 	.word	0x00407cc0
  404614:	2140      	movs	r1, #64	; 0x40
  404616:	980c      	ldr	r0, [sp, #48]	; 0x30
  404618:	f001 fb36 	bl	405c88 <_malloc_r>
  40461c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40461e:	6010      	str	r0, [r2, #0]
  404620:	6110      	str	r0, [r2, #16]
  404622:	2800      	cmp	r0, #0
  404624:	f000 81ec 	beq.w	404a00 <_svfprintf_r+0x141c>
  404628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40462a:	2340      	movs	r3, #64	; 0x40
  40462c:	6153      	str	r3, [r2, #20]
  40462e:	f7fe bff0 	b.w	403612 <_svfprintf_r+0x2e>
  404632:	a823      	add	r0, sp, #140	; 0x8c
  404634:	a920      	add	r1, sp, #128	; 0x80
  404636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404638:	9004      	str	r0, [sp, #16]
  40463a:	9103      	str	r1, [sp, #12]
  40463c:	a81f      	add	r0, sp, #124	; 0x7c
  40463e:	2103      	movs	r1, #3
  404640:	9002      	str	r0, [sp, #8]
  404642:	9a08      	ldr	r2, [sp, #32]
  404644:	9401      	str	r4, [sp, #4]
  404646:	463b      	mov	r3, r7
  404648:	9100      	str	r1, [sp, #0]
  40464a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40464c:	f000 fa94 	bl	404b78 <_dtoa_r>
  404650:	4625      	mov	r5, r4
  404652:	4606      	mov	r6, r0
  404654:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404656:	2b46      	cmp	r3, #70	; 0x46
  404658:	eb06 0405 	add.w	r4, r6, r5
  40465c:	f47f af29 	bne.w	4044b2 <_svfprintf_r+0xece>
  404660:	7833      	ldrb	r3, [r6, #0]
  404662:	2b30      	cmp	r3, #48	; 0x30
  404664:	f000 8172 	beq.w	40494c <_svfprintf_r+0x1368>
  404668:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40466a:	442c      	add	r4, r5
  40466c:	e721      	b.n	4044b2 <_svfprintf_r+0xece>
  40466e:	aa25      	add	r2, sp, #148	; 0x94
  404670:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404672:	980c      	ldr	r0, [sp, #48]	; 0x30
  404674:	f002 fc7c 	bl	406f70 <__ssprint_r>
  404678:	2800      	cmp	r0, #0
  40467a:	f47f a885 	bne.w	403788 <_svfprintf_r+0x1a4>
  40467e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404680:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404682:	46c8      	mov	r8, r9
  404684:	e782      	b.n	40458c <_svfprintf_r+0xfa8>
  404686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404688:	2b00      	cmp	r3, #0
  40468a:	bf08      	it	eq
  40468c:	2301      	moveq	r3, #1
  40468e:	930a      	str	r3, [sp, #40]	; 0x28
  404690:	e6db      	b.n	40444a <_svfprintf_r+0xe66>
  404692:	4630      	mov	r0, r6
  404694:	940a      	str	r4, [sp, #40]	; 0x28
  404696:	f7fe fcd3 	bl	403040 <strlen>
  40469a:	950f      	str	r5, [sp, #60]	; 0x3c
  40469c:	900e      	str	r0, [sp, #56]	; 0x38
  40469e:	f8cd b01c 	str.w	fp, [sp, #28]
  4046a2:	4603      	mov	r3, r0
  4046a4:	f7ff b9fb 	b.w	403a9e <_svfprintf_r+0x4ba>
  4046a8:	272d      	movs	r7, #45	; 0x2d
  4046aa:	2300      	movs	r3, #0
  4046ac:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4046b0:	930a      	str	r3, [sp, #40]	; 0x28
  4046b2:	f7ff b8b0 	b.w	403816 <_svfprintf_r+0x232>
  4046b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4046b8:	9312      	str	r3, [sp, #72]	; 0x48
  4046ba:	461a      	mov	r2, r3
  4046bc:	3303      	adds	r3, #3
  4046be:	db04      	blt.n	4046ca <_svfprintf_r+0x10e6>
  4046c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046c2:	4619      	mov	r1, r3
  4046c4:	4291      	cmp	r1, r2
  4046c6:	f6bf af17 	bge.w	4044f8 <_svfprintf_r+0xf14>
  4046ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046cc:	3b02      	subs	r3, #2
  4046ce:	9311      	str	r3, [sp, #68]	; 0x44
  4046d0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4046d4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4046d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046da:	3b01      	subs	r3, #1
  4046dc:	2b00      	cmp	r3, #0
  4046de:	931f      	str	r3, [sp, #124]	; 0x7c
  4046e0:	bfbd      	ittte	lt
  4046e2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4046e4:	f1c3 0301 	rsblt	r3, r3, #1
  4046e8:	222d      	movlt	r2, #45	; 0x2d
  4046ea:	222b      	movge	r2, #43	; 0x2b
  4046ec:	2b09      	cmp	r3, #9
  4046ee:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4046f2:	f340 8116 	ble.w	404922 <_svfprintf_r+0x133e>
  4046f6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4046fa:	4620      	mov	r0, r4
  4046fc:	4dad      	ldr	r5, [pc, #692]	; (4049b4 <_svfprintf_r+0x13d0>)
  4046fe:	e000      	b.n	404702 <_svfprintf_r+0x111e>
  404700:	4610      	mov	r0, r2
  404702:	fb85 1203 	smull	r1, r2, r5, r3
  404706:	17d9      	asrs	r1, r3, #31
  404708:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40470c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404710:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404714:	3230      	adds	r2, #48	; 0x30
  404716:	2909      	cmp	r1, #9
  404718:	f800 2c01 	strb.w	r2, [r0, #-1]
  40471c:	460b      	mov	r3, r1
  40471e:	f100 32ff 	add.w	r2, r0, #4294967295
  404722:	dced      	bgt.n	404700 <_svfprintf_r+0x111c>
  404724:	3330      	adds	r3, #48	; 0x30
  404726:	3802      	subs	r0, #2
  404728:	b2d9      	uxtb	r1, r3
  40472a:	4284      	cmp	r4, r0
  40472c:	f802 1c01 	strb.w	r1, [r2, #-1]
  404730:	f240 815f 	bls.w	4049f2 <_svfprintf_r+0x140e>
  404734:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404738:	4613      	mov	r3, r2
  40473a:	e001      	b.n	404740 <_svfprintf_r+0x115c>
  40473c:	f813 1b01 	ldrb.w	r1, [r3], #1
  404740:	f800 1b01 	strb.w	r1, [r0], #1
  404744:	42a3      	cmp	r3, r4
  404746:	d1f9      	bne.n	40473c <_svfprintf_r+0x1158>
  404748:	3301      	adds	r3, #1
  40474a:	1a9b      	subs	r3, r3, r2
  40474c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404750:	4413      	add	r3, r2
  404752:	aa21      	add	r2, sp, #132	; 0x84
  404754:	1a9b      	subs	r3, r3, r2
  404756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404758:	931b      	str	r3, [sp, #108]	; 0x6c
  40475a:	2a01      	cmp	r2, #1
  40475c:	4413      	add	r3, r2
  40475e:	930e      	str	r3, [sp, #56]	; 0x38
  404760:	f340 8113 	ble.w	40498a <_svfprintf_r+0x13a6>
  404764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404766:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404768:	4413      	add	r3, r2
  40476a:	930e      	str	r3, [sp, #56]	; 0x38
  40476c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404770:	9308      	str	r3, [sp, #32]
  404772:	2300      	movs	r3, #0
  404774:	9312      	str	r3, [sp, #72]	; 0x48
  404776:	e6cf      	b.n	404518 <_svfprintf_r+0xf34>
  404778:	aa25      	add	r2, sp, #148	; 0x94
  40477a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40477c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40477e:	f002 fbf7 	bl	406f70 <__ssprint_r>
  404782:	2800      	cmp	r0, #0
  404784:	f47f a800 	bne.w	403788 <_svfprintf_r+0x1a4>
  404788:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40478a:	46c8      	mov	r8, r9
  40478c:	e4d6      	b.n	40413c <_svfprintf_r+0xb58>
  40478e:	4623      	mov	r3, r4
  404790:	e6a2      	b.n	4044d8 <_svfprintf_r+0xef4>
  404792:	aa25      	add	r2, sp, #148	; 0x94
  404794:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404796:	980c      	ldr	r0, [sp, #48]	; 0x30
  404798:	f002 fbea 	bl	406f70 <__ssprint_r>
  40479c:	2800      	cmp	r0, #0
  40479e:	f47e aff3 	bne.w	403788 <_svfprintf_r+0x1a4>
  4047a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4047a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047a6:	46c8      	mov	r8, r9
  4047a8:	e5ae      	b.n	404308 <_svfprintf_r+0xd24>
  4047aa:	aa25      	add	r2, sp, #148	; 0x94
  4047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047b0:	f002 fbde 	bl	406f70 <__ssprint_r>
  4047b4:	2800      	cmp	r0, #0
  4047b6:	f47e afe7 	bne.w	403788 <_svfprintf_r+0x1a4>
  4047ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4047bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4047be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047c0:	1a9a      	subs	r2, r3, r2
  4047c2:	46c8      	mov	r8, r9
  4047c4:	e5b8      	b.n	404338 <_svfprintf_r+0xd54>
  4047c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047c8:	9612      	str	r6, [sp, #72]	; 0x48
  4047ca:	2b06      	cmp	r3, #6
  4047cc:	bf28      	it	cs
  4047ce:	2306      	movcs	r3, #6
  4047d0:	960a      	str	r6, [sp, #40]	; 0x28
  4047d2:	4637      	mov	r7, r6
  4047d4:	9308      	str	r3, [sp, #32]
  4047d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4047d8:	f8cd b01c 	str.w	fp, [sp, #28]
  4047dc:	930e      	str	r3, [sp, #56]	; 0x38
  4047de:	4e76      	ldr	r6, [pc, #472]	; (4049b8 <_svfprintf_r+0x13d4>)
  4047e0:	f7ff b818 	b.w	403814 <_svfprintf_r+0x230>
  4047e4:	a823      	add	r0, sp, #140	; 0x8c
  4047e6:	a920      	add	r1, sp, #128	; 0x80
  4047e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047ea:	9004      	str	r0, [sp, #16]
  4047ec:	9103      	str	r1, [sp, #12]
  4047ee:	a81f      	add	r0, sp, #124	; 0x7c
  4047f0:	2103      	movs	r1, #3
  4047f2:	9002      	str	r0, [sp, #8]
  4047f4:	9a08      	ldr	r2, [sp, #32]
  4047f6:	9501      	str	r5, [sp, #4]
  4047f8:	463b      	mov	r3, r7
  4047fa:	9100      	str	r1, [sp, #0]
  4047fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047fe:	f000 f9bb 	bl	404b78 <_dtoa_r>
  404802:	4606      	mov	r6, r0
  404804:	1944      	adds	r4, r0, r5
  404806:	e72b      	b.n	404660 <_svfprintf_r+0x107c>
  404808:	2306      	movs	r3, #6
  40480a:	930a      	str	r3, [sp, #40]	; 0x28
  40480c:	e61d      	b.n	40444a <_svfprintf_r+0xe66>
  40480e:	272d      	movs	r7, #45	; 0x2d
  404810:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404814:	f7ff bace 	b.w	403db4 <_svfprintf_r+0x7d0>
  404818:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40481a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40481c:	4413      	add	r3, r2
  40481e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404820:	930e      	str	r3, [sp, #56]	; 0x38
  404822:	2a00      	cmp	r2, #0
  404824:	f340 80aa 	ble.w	40497c <_svfprintf_r+0x1398>
  404828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40482c:	9308      	str	r3, [sp, #32]
  40482e:	2367      	movs	r3, #103	; 0x67
  404830:	9311      	str	r3, [sp, #68]	; 0x44
  404832:	e671      	b.n	404518 <_svfprintf_r+0xf34>
  404834:	2b00      	cmp	r3, #0
  404836:	f340 80b2 	ble.w	40499e <_svfprintf_r+0x13ba>
  40483a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40483c:	2a00      	cmp	r2, #0
  40483e:	f040 8093 	bne.w	404968 <_svfprintf_r+0x1384>
  404842:	f01b 0f01 	tst.w	fp, #1
  404846:	f040 808f 	bne.w	404968 <_svfprintf_r+0x1384>
  40484a:	9308      	str	r3, [sp, #32]
  40484c:	930e      	str	r3, [sp, #56]	; 0x38
  40484e:	e663      	b.n	404518 <_svfprintf_r+0xf34>
  404850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404852:	9308      	str	r3, [sp, #32]
  404854:	930e      	str	r3, [sp, #56]	; 0x38
  404856:	900a      	str	r0, [sp, #40]	; 0x28
  404858:	950f      	str	r5, [sp, #60]	; 0x3c
  40485a:	f8cd b01c 	str.w	fp, [sp, #28]
  40485e:	9012      	str	r0, [sp, #72]	; 0x48
  404860:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404864:	f7fe bfd6 	b.w	403814 <_svfprintf_r+0x230>
  404868:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40486a:	2b47      	cmp	r3, #71	; 0x47
  40486c:	f47f ae20 	bne.w	4044b0 <_svfprintf_r+0xecc>
  404870:	f01b 0f01 	tst.w	fp, #1
  404874:	f47f aeee 	bne.w	404654 <_svfprintf_r+0x1070>
  404878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40487a:	1b9b      	subs	r3, r3, r6
  40487c:	9313      	str	r3, [sp, #76]	; 0x4c
  40487e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404880:	2b47      	cmp	r3, #71	; 0x47
  404882:	f43f af18 	beq.w	4046b6 <_svfprintf_r+0x10d2>
  404886:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404888:	9312      	str	r3, [sp, #72]	; 0x48
  40488a:	e721      	b.n	4046d0 <_svfprintf_r+0x10ec>
  40488c:	424f      	negs	r7, r1
  40488e:	3110      	adds	r1, #16
  404890:	4d4a      	ldr	r5, [pc, #296]	; (4049bc <_svfprintf_r+0x13d8>)
  404892:	da2f      	bge.n	4048f4 <_svfprintf_r+0x1310>
  404894:	2410      	movs	r4, #16
  404896:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40489a:	e004      	b.n	4048a6 <_svfprintf_r+0x12c2>
  40489c:	f108 0808 	add.w	r8, r8, #8
  4048a0:	3f10      	subs	r7, #16
  4048a2:	2f10      	cmp	r7, #16
  4048a4:	dd26      	ble.n	4048f4 <_svfprintf_r+0x1310>
  4048a6:	3301      	adds	r3, #1
  4048a8:	3210      	adds	r2, #16
  4048aa:	2b07      	cmp	r3, #7
  4048ac:	9227      	str	r2, [sp, #156]	; 0x9c
  4048ae:	9326      	str	r3, [sp, #152]	; 0x98
  4048b0:	f8c8 5000 	str.w	r5, [r8]
  4048b4:	f8c8 4004 	str.w	r4, [r8, #4]
  4048b8:	ddf0      	ble.n	40489c <_svfprintf_r+0x12b8>
  4048ba:	aa25      	add	r2, sp, #148	; 0x94
  4048bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048be:	4658      	mov	r0, fp
  4048c0:	f002 fb56 	bl	406f70 <__ssprint_r>
  4048c4:	2800      	cmp	r0, #0
  4048c6:	f47e af5f 	bne.w	403788 <_svfprintf_r+0x1a4>
  4048ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048ce:	46c8      	mov	r8, r9
  4048d0:	e7e6      	b.n	4048a0 <_svfprintf_r+0x12bc>
  4048d2:	aa25      	add	r2, sp, #148	; 0x94
  4048d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d8:	f002 fb4a 	bl	406f70 <__ssprint_r>
  4048dc:	2800      	cmp	r0, #0
  4048de:	f47e af53 	bne.w	403788 <_svfprintf_r+0x1a4>
  4048e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4048e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4048e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048e8:	46c8      	mov	r8, r9
  4048ea:	e667      	b.n	4045bc <_svfprintf_r+0xfd8>
  4048ec:	2000      	movs	r0, #0
  4048ee:	900a      	str	r0, [sp, #40]	; 0x28
  4048f0:	f7fe bed2 	b.w	403698 <_svfprintf_r+0xb4>
  4048f4:	3301      	adds	r3, #1
  4048f6:	443a      	add	r2, r7
  4048f8:	2b07      	cmp	r3, #7
  4048fa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048fe:	9227      	str	r2, [sp, #156]	; 0x9c
  404900:	9326      	str	r3, [sp, #152]	; 0x98
  404902:	f108 0808 	add.w	r8, r8, #8
  404906:	f77f ae5c 	ble.w	4045c2 <_svfprintf_r+0xfde>
  40490a:	aa25      	add	r2, sp, #148	; 0x94
  40490c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40490e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404910:	f002 fb2e 	bl	406f70 <__ssprint_r>
  404914:	2800      	cmp	r0, #0
  404916:	f47e af37 	bne.w	403788 <_svfprintf_r+0x1a4>
  40491a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40491c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40491e:	46c8      	mov	r8, r9
  404920:	e64f      	b.n	4045c2 <_svfprintf_r+0xfde>
  404922:	3330      	adds	r3, #48	; 0x30
  404924:	2230      	movs	r2, #48	; 0x30
  404926:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40492a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40492e:	ab22      	add	r3, sp, #136	; 0x88
  404930:	e70f      	b.n	404752 <_svfprintf_r+0x116e>
  404932:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404934:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404936:	4413      	add	r3, r2
  404938:	930e      	str	r3, [sp, #56]	; 0x38
  40493a:	e775      	b.n	404828 <_svfprintf_r+0x1244>
  40493c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40493e:	e5cb      	b.n	4044d8 <_svfprintf_r+0xef4>
  404940:	4e1f      	ldr	r6, [pc, #124]	; (4049c0 <_svfprintf_r+0x13dc>)
  404942:	4b20      	ldr	r3, [pc, #128]	; (4049c4 <_svfprintf_r+0x13e0>)
  404944:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404948:	f7ff ba36 	b.w	403db8 <_svfprintf_r+0x7d4>
  40494c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40494e:	9808      	ldr	r0, [sp, #32]
  404950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404952:	4639      	mov	r1, r7
  404954:	f003 f83a 	bl	4079cc <__aeabi_dcmpeq>
  404958:	2800      	cmp	r0, #0
  40495a:	f47f ae85 	bne.w	404668 <_svfprintf_r+0x1084>
  40495e:	f1c5 0501 	rsb	r5, r5, #1
  404962:	951f      	str	r5, [sp, #124]	; 0x7c
  404964:	442c      	add	r4, r5
  404966:	e5a4      	b.n	4044b2 <_svfprintf_r+0xece>
  404968:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40496a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40496c:	4413      	add	r3, r2
  40496e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404970:	441a      	add	r2, r3
  404972:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404976:	920e      	str	r2, [sp, #56]	; 0x38
  404978:	9308      	str	r3, [sp, #32]
  40497a:	e5cd      	b.n	404518 <_svfprintf_r+0xf34>
  40497c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40497e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404980:	f1c3 0301 	rsb	r3, r3, #1
  404984:	441a      	add	r2, r3
  404986:	4613      	mov	r3, r2
  404988:	e7d6      	b.n	404938 <_svfprintf_r+0x1354>
  40498a:	f01b 0301 	ands.w	r3, fp, #1
  40498e:	9312      	str	r3, [sp, #72]	; 0x48
  404990:	f47f aee8 	bne.w	404764 <_svfprintf_r+0x1180>
  404994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40499a:	9308      	str	r3, [sp, #32]
  40499c:	e5bc      	b.n	404518 <_svfprintf_r+0xf34>
  40499e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049a0:	b913      	cbnz	r3, 4049a8 <_svfprintf_r+0x13c4>
  4049a2:	f01b 0f01 	tst.w	fp, #1
  4049a6:	d002      	beq.n	4049ae <_svfprintf_r+0x13ca>
  4049a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4049aa:	3301      	adds	r3, #1
  4049ac:	e7df      	b.n	40496e <_svfprintf_r+0x138a>
  4049ae:	2301      	movs	r3, #1
  4049b0:	e74b      	b.n	40484a <_svfprintf_r+0x1266>
  4049b2:	bf00      	nop
  4049b4:	66666667 	.word	0x66666667
  4049b8:	00407cb8 	.word	0x00407cb8
  4049bc:	00407cd4 	.word	0x00407cd4
  4049c0:	00407c8c 	.word	0x00407c8c
  4049c4:	00407c88 	.word	0x00407c88
  4049c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4049ca:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4049ce:	6828      	ldr	r0, [r5, #0]
  4049d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4049d4:	900a      	str	r0, [sp, #40]	; 0x28
  4049d6:	4628      	mov	r0, r5
  4049d8:	3004      	adds	r0, #4
  4049da:	46a2      	mov	sl, r4
  4049dc:	900f      	str	r0, [sp, #60]	; 0x3c
  4049de:	f7fe be59 	b.w	403694 <_svfprintf_r+0xb0>
  4049e2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049e6:	f7ff b86f 	b.w	403ac8 <_svfprintf_r+0x4e4>
  4049ea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049ee:	f7ff ba1c 	b.w	403e2a <_svfprintf_r+0x846>
  4049f2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4049f6:	e6ac      	b.n	404752 <_svfprintf_r+0x116e>
  4049f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4049fc:	f7ff b8f3 	b.w	403be6 <_svfprintf_r+0x602>
  404a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404a02:	230c      	movs	r3, #12
  404a04:	6013      	str	r3, [r2, #0]
  404a06:	f04f 33ff 	mov.w	r3, #4294967295
  404a0a:	9309      	str	r3, [sp, #36]	; 0x24
  404a0c:	f7fe bec5 	b.w	40379a <_svfprintf_r+0x1b6>
  404a10:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a14:	f7ff b9a2 	b.w	403d5c <_svfprintf_r+0x778>
  404a18:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a1c:	f7ff b97e 	b.w	403d1c <_svfprintf_r+0x738>
  404a20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a24:	f7ff b961 	b.w	403cea <_svfprintf_r+0x706>
  404a28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a2c:	f7ff b91a 	b.w	403c64 <_svfprintf_r+0x680>

00404a30 <register_fini>:
  404a30:	4b02      	ldr	r3, [pc, #8]	; (404a3c <register_fini+0xc>)
  404a32:	b113      	cbz	r3, 404a3a <register_fini+0xa>
  404a34:	4802      	ldr	r0, [pc, #8]	; (404a40 <register_fini+0x10>)
  404a36:	f000 b805 	b.w	404a44 <atexit>
  404a3a:	4770      	bx	lr
  404a3c:	00000000 	.word	0x00000000
  404a40:	004059cd 	.word	0x004059cd

00404a44 <atexit>:
  404a44:	2300      	movs	r3, #0
  404a46:	4601      	mov	r1, r0
  404a48:	461a      	mov	r2, r3
  404a4a:	4618      	mov	r0, r3
  404a4c:	f002 bb1c 	b.w	407088 <__register_exitproc>

00404a50 <quorem>:
  404a50:	6902      	ldr	r2, [r0, #16]
  404a52:	690b      	ldr	r3, [r1, #16]
  404a54:	4293      	cmp	r3, r2
  404a56:	f300 808d 	bgt.w	404b74 <quorem+0x124>
  404a5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a5e:	f103 38ff 	add.w	r8, r3, #4294967295
  404a62:	f101 0714 	add.w	r7, r1, #20
  404a66:	f100 0b14 	add.w	fp, r0, #20
  404a6a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404a6e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404a72:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404a76:	b083      	sub	sp, #12
  404a78:	3201      	adds	r2, #1
  404a7a:	fbb3 f9f2 	udiv	r9, r3, r2
  404a7e:	eb0b 0304 	add.w	r3, fp, r4
  404a82:	9400      	str	r4, [sp, #0]
  404a84:	eb07 0a04 	add.w	sl, r7, r4
  404a88:	9301      	str	r3, [sp, #4]
  404a8a:	f1b9 0f00 	cmp.w	r9, #0
  404a8e:	d039      	beq.n	404b04 <quorem+0xb4>
  404a90:	2500      	movs	r5, #0
  404a92:	462e      	mov	r6, r5
  404a94:	46bc      	mov	ip, r7
  404a96:	46de      	mov	lr, fp
  404a98:	f85c 4b04 	ldr.w	r4, [ip], #4
  404a9c:	f8de 3000 	ldr.w	r3, [lr]
  404aa0:	b2a2      	uxth	r2, r4
  404aa2:	fb09 5502 	mla	r5, r9, r2, r5
  404aa6:	0c22      	lsrs	r2, r4, #16
  404aa8:	0c2c      	lsrs	r4, r5, #16
  404aaa:	fb09 4202 	mla	r2, r9, r2, r4
  404aae:	b2ad      	uxth	r5, r5
  404ab0:	1b75      	subs	r5, r6, r5
  404ab2:	b296      	uxth	r6, r2
  404ab4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404ab8:	fa15 f383 	uxtah	r3, r5, r3
  404abc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404ac0:	b29b      	uxth	r3, r3
  404ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404ac6:	45e2      	cmp	sl, ip
  404ac8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404acc:	f84e 3b04 	str.w	r3, [lr], #4
  404ad0:	ea4f 4626 	mov.w	r6, r6, asr #16
  404ad4:	d2e0      	bcs.n	404a98 <quorem+0x48>
  404ad6:	9b00      	ldr	r3, [sp, #0]
  404ad8:	f85b 3003 	ldr.w	r3, [fp, r3]
  404adc:	b993      	cbnz	r3, 404b04 <quorem+0xb4>
  404ade:	9c01      	ldr	r4, [sp, #4]
  404ae0:	1f23      	subs	r3, r4, #4
  404ae2:	459b      	cmp	fp, r3
  404ae4:	d20c      	bcs.n	404b00 <quorem+0xb0>
  404ae6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404aea:	b94b      	cbnz	r3, 404b00 <quorem+0xb0>
  404aec:	f1a4 0308 	sub.w	r3, r4, #8
  404af0:	e002      	b.n	404af8 <quorem+0xa8>
  404af2:	681a      	ldr	r2, [r3, #0]
  404af4:	3b04      	subs	r3, #4
  404af6:	b91a      	cbnz	r2, 404b00 <quorem+0xb0>
  404af8:	459b      	cmp	fp, r3
  404afa:	f108 38ff 	add.w	r8, r8, #4294967295
  404afe:	d3f8      	bcc.n	404af2 <quorem+0xa2>
  404b00:	f8c0 8010 	str.w	r8, [r0, #16]
  404b04:	4604      	mov	r4, r0
  404b06:	f001 ff0b 	bl	406920 <__mcmp>
  404b0a:	2800      	cmp	r0, #0
  404b0c:	db2e      	blt.n	404b6c <quorem+0x11c>
  404b0e:	f109 0901 	add.w	r9, r9, #1
  404b12:	465d      	mov	r5, fp
  404b14:	2300      	movs	r3, #0
  404b16:	f857 1b04 	ldr.w	r1, [r7], #4
  404b1a:	6828      	ldr	r0, [r5, #0]
  404b1c:	b28a      	uxth	r2, r1
  404b1e:	1a9a      	subs	r2, r3, r2
  404b20:	0c0b      	lsrs	r3, r1, #16
  404b22:	fa12 f280 	uxtah	r2, r2, r0
  404b26:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404b2a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404b2e:	b292      	uxth	r2, r2
  404b30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404b34:	45ba      	cmp	sl, r7
  404b36:	f845 2b04 	str.w	r2, [r5], #4
  404b3a:	ea4f 4323 	mov.w	r3, r3, asr #16
  404b3e:	d2ea      	bcs.n	404b16 <quorem+0xc6>
  404b40:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404b44:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404b48:	b982      	cbnz	r2, 404b6c <quorem+0x11c>
  404b4a:	1f1a      	subs	r2, r3, #4
  404b4c:	4593      	cmp	fp, r2
  404b4e:	d20b      	bcs.n	404b68 <quorem+0x118>
  404b50:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404b54:	b942      	cbnz	r2, 404b68 <quorem+0x118>
  404b56:	3b08      	subs	r3, #8
  404b58:	e002      	b.n	404b60 <quorem+0x110>
  404b5a:	681a      	ldr	r2, [r3, #0]
  404b5c:	3b04      	subs	r3, #4
  404b5e:	b91a      	cbnz	r2, 404b68 <quorem+0x118>
  404b60:	459b      	cmp	fp, r3
  404b62:	f108 38ff 	add.w	r8, r8, #4294967295
  404b66:	d3f8      	bcc.n	404b5a <quorem+0x10a>
  404b68:	f8c4 8010 	str.w	r8, [r4, #16]
  404b6c:	4648      	mov	r0, r9
  404b6e:	b003      	add	sp, #12
  404b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b74:	2000      	movs	r0, #0
  404b76:	4770      	bx	lr

00404b78 <_dtoa_r>:
  404b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404b7e:	b09b      	sub	sp, #108	; 0x6c
  404b80:	4604      	mov	r4, r0
  404b82:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404b84:	4692      	mov	sl, r2
  404b86:	469b      	mov	fp, r3
  404b88:	b141      	cbz	r1, 404b9c <_dtoa_r+0x24>
  404b8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404b8c:	604a      	str	r2, [r1, #4]
  404b8e:	2301      	movs	r3, #1
  404b90:	4093      	lsls	r3, r2
  404b92:	608b      	str	r3, [r1, #8]
  404b94:	f001 fcec 	bl	406570 <_Bfree>
  404b98:	2300      	movs	r3, #0
  404b9a:	6423      	str	r3, [r4, #64]	; 0x40
  404b9c:	f1bb 0f00 	cmp.w	fp, #0
  404ba0:	465d      	mov	r5, fp
  404ba2:	db35      	blt.n	404c10 <_dtoa_r+0x98>
  404ba4:	2300      	movs	r3, #0
  404ba6:	6033      	str	r3, [r6, #0]
  404ba8:	4b9d      	ldr	r3, [pc, #628]	; (404e20 <_dtoa_r+0x2a8>)
  404baa:	43ab      	bics	r3, r5
  404bac:	d015      	beq.n	404bda <_dtoa_r+0x62>
  404bae:	4650      	mov	r0, sl
  404bb0:	4659      	mov	r1, fp
  404bb2:	2200      	movs	r2, #0
  404bb4:	2300      	movs	r3, #0
  404bb6:	f002 ff09 	bl	4079cc <__aeabi_dcmpeq>
  404bba:	4680      	mov	r8, r0
  404bbc:	2800      	cmp	r0, #0
  404bbe:	d02d      	beq.n	404c1c <_dtoa_r+0xa4>
  404bc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bc2:	2301      	movs	r3, #1
  404bc4:	6013      	str	r3, [r2, #0]
  404bc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bc8:	2b00      	cmp	r3, #0
  404bca:	f000 80bd 	beq.w	404d48 <_dtoa_r+0x1d0>
  404bce:	4895      	ldr	r0, [pc, #596]	; (404e24 <_dtoa_r+0x2ac>)
  404bd0:	6018      	str	r0, [r3, #0]
  404bd2:	3801      	subs	r0, #1
  404bd4:	b01b      	add	sp, #108	; 0x6c
  404bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bda:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404bdc:	f242 730f 	movw	r3, #9999	; 0x270f
  404be0:	6013      	str	r3, [r2, #0]
  404be2:	f1ba 0f00 	cmp.w	sl, #0
  404be6:	d10d      	bne.n	404c04 <_dtoa_r+0x8c>
  404be8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404bec:	b955      	cbnz	r5, 404c04 <_dtoa_r+0x8c>
  404bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404bf0:	488d      	ldr	r0, [pc, #564]	; (404e28 <_dtoa_r+0x2b0>)
  404bf2:	2b00      	cmp	r3, #0
  404bf4:	d0ee      	beq.n	404bd4 <_dtoa_r+0x5c>
  404bf6:	f100 0308 	add.w	r3, r0, #8
  404bfa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404bfc:	6013      	str	r3, [r2, #0]
  404bfe:	b01b      	add	sp, #108	; 0x6c
  404c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c06:	4889      	ldr	r0, [pc, #548]	; (404e2c <_dtoa_r+0x2b4>)
  404c08:	2b00      	cmp	r3, #0
  404c0a:	d0e3      	beq.n	404bd4 <_dtoa_r+0x5c>
  404c0c:	1cc3      	adds	r3, r0, #3
  404c0e:	e7f4      	b.n	404bfa <_dtoa_r+0x82>
  404c10:	2301      	movs	r3, #1
  404c12:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404c16:	6033      	str	r3, [r6, #0]
  404c18:	46ab      	mov	fp, r5
  404c1a:	e7c5      	b.n	404ba8 <_dtoa_r+0x30>
  404c1c:	aa18      	add	r2, sp, #96	; 0x60
  404c1e:	ab19      	add	r3, sp, #100	; 0x64
  404c20:	9201      	str	r2, [sp, #4]
  404c22:	9300      	str	r3, [sp, #0]
  404c24:	4652      	mov	r2, sl
  404c26:	465b      	mov	r3, fp
  404c28:	4620      	mov	r0, r4
  404c2a:	f001 ff19 	bl	406a60 <__d2b>
  404c2e:	0d2b      	lsrs	r3, r5, #20
  404c30:	4681      	mov	r9, r0
  404c32:	d071      	beq.n	404d18 <_dtoa_r+0x1a0>
  404c34:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404c38:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404c3c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404c3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404c42:	4650      	mov	r0, sl
  404c44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404c48:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404c4c:	2200      	movs	r2, #0
  404c4e:	4b78      	ldr	r3, [pc, #480]	; (404e30 <_dtoa_r+0x2b8>)
  404c50:	f002 faa0 	bl	407194 <__aeabi_dsub>
  404c54:	a36c      	add	r3, pc, #432	; (adr r3, 404e08 <_dtoa_r+0x290>)
  404c56:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c5a:	f002 fc4f 	bl	4074fc <__aeabi_dmul>
  404c5e:	a36c      	add	r3, pc, #432	; (adr r3, 404e10 <_dtoa_r+0x298>)
  404c60:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c64:	f002 fa98 	bl	407198 <__adddf3>
  404c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c6c:	4630      	mov	r0, r6
  404c6e:	f002 fbdf 	bl	407430 <__aeabi_i2d>
  404c72:	a369      	add	r3, pc, #420	; (adr r3, 404e18 <_dtoa_r+0x2a0>)
  404c74:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c78:	f002 fc40 	bl	4074fc <__aeabi_dmul>
  404c7c:	4602      	mov	r2, r0
  404c7e:	460b      	mov	r3, r1
  404c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c84:	f002 fa88 	bl	407198 <__adddf3>
  404c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c8c:	f002 fee6 	bl	407a5c <__aeabi_d2iz>
  404c90:	2200      	movs	r2, #0
  404c92:	9002      	str	r0, [sp, #8]
  404c94:	2300      	movs	r3, #0
  404c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c9a:	f002 fea1 	bl	4079e0 <__aeabi_dcmplt>
  404c9e:	2800      	cmp	r0, #0
  404ca0:	f040 8173 	bne.w	404f8a <_dtoa_r+0x412>
  404ca4:	9d02      	ldr	r5, [sp, #8]
  404ca6:	2d16      	cmp	r5, #22
  404ca8:	f200 815d 	bhi.w	404f66 <_dtoa_r+0x3ee>
  404cac:	4b61      	ldr	r3, [pc, #388]	; (404e34 <_dtoa_r+0x2bc>)
  404cae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
  404cb6:	4652      	mov	r2, sl
  404cb8:	465b      	mov	r3, fp
  404cba:	f002 feaf 	bl	407a1c <__aeabi_dcmpgt>
  404cbe:	2800      	cmp	r0, #0
  404cc0:	f000 81c5 	beq.w	40504e <_dtoa_r+0x4d6>
  404cc4:	1e6b      	subs	r3, r5, #1
  404cc6:	9302      	str	r3, [sp, #8]
  404cc8:	2300      	movs	r3, #0
  404cca:	930e      	str	r3, [sp, #56]	; 0x38
  404ccc:	1bbf      	subs	r7, r7, r6
  404cce:	1e7b      	subs	r3, r7, #1
  404cd0:	9306      	str	r3, [sp, #24]
  404cd2:	f100 8154 	bmi.w	404f7e <_dtoa_r+0x406>
  404cd6:	2300      	movs	r3, #0
  404cd8:	9308      	str	r3, [sp, #32]
  404cda:	9b02      	ldr	r3, [sp, #8]
  404cdc:	2b00      	cmp	r3, #0
  404cde:	f2c0 8145 	blt.w	404f6c <_dtoa_r+0x3f4>
  404ce2:	9a06      	ldr	r2, [sp, #24]
  404ce4:	930d      	str	r3, [sp, #52]	; 0x34
  404ce6:	4611      	mov	r1, r2
  404ce8:	4419      	add	r1, r3
  404cea:	2300      	movs	r3, #0
  404cec:	9106      	str	r1, [sp, #24]
  404cee:	930c      	str	r3, [sp, #48]	; 0x30
  404cf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cf2:	2b09      	cmp	r3, #9
  404cf4:	d82a      	bhi.n	404d4c <_dtoa_r+0x1d4>
  404cf6:	2b05      	cmp	r3, #5
  404cf8:	f340 865b 	ble.w	4059b2 <_dtoa_r+0xe3a>
  404cfc:	3b04      	subs	r3, #4
  404cfe:	9324      	str	r3, [sp, #144]	; 0x90
  404d00:	2500      	movs	r5, #0
  404d02:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d04:	3b02      	subs	r3, #2
  404d06:	2b03      	cmp	r3, #3
  404d08:	f200 8642 	bhi.w	405990 <_dtoa_r+0xe18>
  404d0c:	e8df f013 	tbh	[pc, r3, lsl #1]
  404d10:	02c903d4 	.word	0x02c903d4
  404d14:	046103df 	.word	0x046103df
  404d18:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404d1a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404d1c:	443e      	add	r6, r7
  404d1e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404d22:	2b20      	cmp	r3, #32
  404d24:	f340 818e 	ble.w	405044 <_dtoa_r+0x4cc>
  404d28:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404d2c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404d30:	409d      	lsls	r5, r3
  404d32:	fa2a f000 	lsr.w	r0, sl, r0
  404d36:	4328      	orrs	r0, r5
  404d38:	f002 fb6a 	bl	407410 <__aeabi_ui2d>
  404d3c:	2301      	movs	r3, #1
  404d3e:	3e01      	subs	r6, #1
  404d40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404d44:	9314      	str	r3, [sp, #80]	; 0x50
  404d46:	e781      	b.n	404c4c <_dtoa_r+0xd4>
  404d48:	483b      	ldr	r0, [pc, #236]	; (404e38 <_dtoa_r+0x2c0>)
  404d4a:	e743      	b.n	404bd4 <_dtoa_r+0x5c>
  404d4c:	2100      	movs	r1, #0
  404d4e:	6461      	str	r1, [r4, #68]	; 0x44
  404d50:	4620      	mov	r0, r4
  404d52:	9125      	str	r1, [sp, #148]	; 0x94
  404d54:	f001 fbe6 	bl	406524 <_Balloc>
  404d58:	f04f 33ff 	mov.w	r3, #4294967295
  404d5c:	930a      	str	r3, [sp, #40]	; 0x28
  404d5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d60:	930f      	str	r3, [sp, #60]	; 0x3c
  404d62:	2301      	movs	r3, #1
  404d64:	9004      	str	r0, [sp, #16]
  404d66:	6420      	str	r0, [r4, #64]	; 0x40
  404d68:	9224      	str	r2, [sp, #144]	; 0x90
  404d6a:	930b      	str	r3, [sp, #44]	; 0x2c
  404d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404d6e:	2b00      	cmp	r3, #0
  404d70:	f2c0 80d9 	blt.w	404f26 <_dtoa_r+0x3ae>
  404d74:	9a02      	ldr	r2, [sp, #8]
  404d76:	2a0e      	cmp	r2, #14
  404d78:	f300 80d5 	bgt.w	404f26 <_dtoa_r+0x3ae>
  404d7c:	4b2d      	ldr	r3, [pc, #180]	; (404e34 <_dtoa_r+0x2bc>)
  404d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d82:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d86:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404d8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404d8c:	2b00      	cmp	r3, #0
  404d8e:	f2c0 83ba 	blt.w	405506 <_dtoa_r+0x98e>
  404d92:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404d96:	4650      	mov	r0, sl
  404d98:	462a      	mov	r2, r5
  404d9a:	4633      	mov	r3, r6
  404d9c:	4659      	mov	r1, fp
  404d9e:	f002 fcd7 	bl	407750 <__aeabi_ddiv>
  404da2:	f002 fe5b 	bl	407a5c <__aeabi_d2iz>
  404da6:	4680      	mov	r8, r0
  404da8:	f002 fb42 	bl	407430 <__aeabi_i2d>
  404dac:	462a      	mov	r2, r5
  404dae:	4633      	mov	r3, r6
  404db0:	f002 fba4 	bl	4074fc <__aeabi_dmul>
  404db4:	460b      	mov	r3, r1
  404db6:	4602      	mov	r2, r0
  404db8:	4659      	mov	r1, fp
  404dba:	4650      	mov	r0, sl
  404dbc:	f002 f9ea 	bl	407194 <__aeabi_dsub>
  404dc0:	9d04      	ldr	r5, [sp, #16]
  404dc2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404dc6:	702b      	strb	r3, [r5, #0]
  404dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dca:	2b01      	cmp	r3, #1
  404dcc:	4606      	mov	r6, r0
  404dce:	460f      	mov	r7, r1
  404dd0:	f105 0501 	add.w	r5, r5, #1
  404dd4:	d068      	beq.n	404ea8 <_dtoa_r+0x330>
  404dd6:	2200      	movs	r2, #0
  404dd8:	4b18      	ldr	r3, [pc, #96]	; (404e3c <_dtoa_r+0x2c4>)
  404dda:	f002 fb8f 	bl	4074fc <__aeabi_dmul>
  404dde:	2200      	movs	r2, #0
  404de0:	2300      	movs	r3, #0
  404de2:	4606      	mov	r6, r0
  404de4:	460f      	mov	r7, r1
  404de6:	f002 fdf1 	bl	4079cc <__aeabi_dcmpeq>
  404dea:	2800      	cmp	r0, #0
  404dec:	f040 8088 	bne.w	404f00 <_dtoa_r+0x388>
  404df0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404df4:	f04f 0a00 	mov.w	sl, #0
  404df8:	f8df b040 	ldr.w	fp, [pc, #64]	; 404e3c <_dtoa_r+0x2c4>
  404dfc:	940c      	str	r4, [sp, #48]	; 0x30
  404dfe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404e02:	e028      	b.n	404e56 <_dtoa_r+0x2de>
  404e04:	f3af 8000 	nop.w
  404e08:	636f4361 	.word	0x636f4361
  404e0c:	3fd287a7 	.word	0x3fd287a7
  404e10:	8b60c8b3 	.word	0x8b60c8b3
  404e14:	3fc68a28 	.word	0x3fc68a28
  404e18:	509f79fb 	.word	0x509f79fb
  404e1c:	3fd34413 	.word	0x3fd34413
  404e20:	7ff00000 	.word	0x7ff00000
  404e24:	00407cc1 	.word	0x00407cc1
  404e28:	00407ce4 	.word	0x00407ce4
  404e2c:	00407cf0 	.word	0x00407cf0
  404e30:	3ff80000 	.word	0x3ff80000
  404e34:	00407d30 	.word	0x00407d30
  404e38:	00407cc0 	.word	0x00407cc0
  404e3c:	40240000 	.word	0x40240000
  404e40:	f002 fb5c 	bl	4074fc <__aeabi_dmul>
  404e44:	2200      	movs	r2, #0
  404e46:	2300      	movs	r3, #0
  404e48:	4606      	mov	r6, r0
  404e4a:	460f      	mov	r7, r1
  404e4c:	f002 fdbe 	bl	4079cc <__aeabi_dcmpeq>
  404e50:	2800      	cmp	r0, #0
  404e52:	f040 83c1 	bne.w	4055d8 <_dtoa_r+0xa60>
  404e56:	4642      	mov	r2, r8
  404e58:	464b      	mov	r3, r9
  404e5a:	4630      	mov	r0, r6
  404e5c:	4639      	mov	r1, r7
  404e5e:	f002 fc77 	bl	407750 <__aeabi_ddiv>
  404e62:	f002 fdfb 	bl	407a5c <__aeabi_d2iz>
  404e66:	4604      	mov	r4, r0
  404e68:	f002 fae2 	bl	407430 <__aeabi_i2d>
  404e6c:	4642      	mov	r2, r8
  404e6e:	464b      	mov	r3, r9
  404e70:	f002 fb44 	bl	4074fc <__aeabi_dmul>
  404e74:	4602      	mov	r2, r0
  404e76:	460b      	mov	r3, r1
  404e78:	4630      	mov	r0, r6
  404e7a:	4639      	mov	r1, r7
  404e7c:	f002 f98a 	bl	407194 <__aeabi_dsub>
  404e80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404e84:	9e04      	ldr	r6, [sp, #16]
  404e86:	f805 eb01 	strb.w	lr, [r5], #1
  404e8a:	eba5 0e06 	sub.w	lr, r5, r6
  404e8e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404e90:	45b6      	cmp	lr, r6
  404e92:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404e96:	4652      	mov	r2, sl
  404e98:	465b      	mov	r3, fp
  404e9a:	d1d1      	bne.n	404e40 <_dtoa_r+0x2c8>
  404e9c:	46a0      	mov	r8, r4
  404e9e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404ea2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ea4:	4606      	mov	r6, r0
  404ea6:	460f      	mov	r7, r1
  404ea8:	4632      	mov	r2, r6
  404eaa:	463b      	mov	r3, r7
  404eac:	4630      	mov	r0, r6
  404eae:	4639      	mov	r1, r7
  404eb0:	f002 f972 	bl	407198 <__adddf3>
  404eb4:	4606      	mov	r6, r0
  404eb6:	460f      	mov	r7, r1
  404eb8:	4602      	mov	r2, r0
  404eba:	460b      	mov	r3, r1
  404ebc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ec0:	f002 fd8e 	bl	4079e0 <__aeabi_dcmplt>
  404ec4:	b948      	cbnz	r0, 404eda <_dtoa_r+0x362>
  404ec6:	4632      	mov	r2, r6
  404ec8:	463b      	mov	r3, r7
  404eca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404ece:	f002 fd7d 	bl	4079cc <__aeabi_dcmpeq>
  404ed2:	b1a8      	cbz	r0, 404f00 <_dtoa_r+0x388>
  404ed4:	f018 0f01 	tst.w	r8, #1
  404ed8:	d012      	beq.n	404f00 <_dtoa_r+0x388>
  404eda:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404ede:	9a04      	ldr	r2, [sp, #16]
  404ee0:	1e6b      	subs	r3, r5, #1
  404ee2:	e004      	b.n	404eee <_dtoa_r+0x376>
  404ee4:	429a      	cmp	r2, r3
  404ee6:	f000 8401 	beq.w	4056ec <_dtoa_r+0xb74>
  404eea:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404eee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404ef2:	f103 0501 	add.w	r5, r3, #1
  404ef6:	d0f5      	beq.n	404ee4 <_dtoa_r+0x36c>
  404ef8:	f108 0801 	add.w	r8, r8, #1
  404efc:	f883 8000 	strb.w	r8, [r3]
  404f00:	4649      	mov	r1, r9
  404f02:	4620      	mov	r0, r4
  404f04:	f001 fb34 	bl	406570 <_Bfree>
  404f08:	2200      	movs	r2, #0
  404f0a:	9b02      	ldr	r3, [sp, #8]
  404f0c:	702a      	strb	r2, [r5, #0]
  404f0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f10:	3301      	adds	r3, #1
  404f12:	6013      	str	r3, [r2, #0]
  404f14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f16:	2b00      	cmp	r3, #0
  404f18:	f000 839e 	beq.w	405658 <_dtoa_r+0xae0>
  404f1c:	9804      	ldr	r0, [sp, #16]
  404f1e:	601d      	str	r5, [r3, #0]
  404f20:	b01b      	add	sp, #108	; 0x6c
  404f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f28:	2a00      	cmp	r2, #0
  404f2a:	d03e      	beq.n	404faa <_dtoa_r+0x432>
  404f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f2e:	2a01      	cmp	r2, #1
  404f30:	f340 8311 	ble.w	405556 <_dtoa_r+0x9de>
  404f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404f38:	1e5f      	subs	r7, r3, #1
  404f3a:	42ba      	cmp	r2, r7
  404f3c:	f2c0 838f 	blt.w	40565e <_dtoa_r+0xae6>
  404f40:	1bd7      	subs	r7, r2, r7
  404f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f44:	2b00      	cmp	r3, #0
  404f46:	f2c0 848b 	blt.w	405860 <_dtoa_r+0xce8>
  404f4a:	9d08      	ldr	r5, [sp, #32]
  404f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f4e:	9a08      	ldr	r2, [sp, #32]
  404f50:	441a      	add	r2, r3
  404f52:	9208      	str	r2, [sp, #32]
  404f54:	9a06      	ldr	r2, [sp, #24]
  404f56:	2101      	movs	r1, #1
  404f58:	441a      	add	r2, r3
  404f5a:	4620      	mov	r0, r4
  404f5c:	9206      	str	r2, [sp, #24]
  404f5e:	f001 fba1 	bl	4066a4 <__i2b>
  404f62:	4606      	mov	r6, r0
  404f64:	e024      	b.n	404fb0 <_dtoa_r+0x438>
  404f66:	2301      	movs	r3, #1
  404f68:	930e      	str	r3, [sp, #56]	; 0x38
  404f6a:	e6af      	b.n	404ccc <_dtoa_r+0x154>
  404f6c:	9a08      	ldr	r2, [sp, #32]
  404f6e:	9b02      	ldr	r3, [sp, #8]
  404f70:	1ad2      	subs	r2, r2, r3
  404f72:	425b      	negs	r3, r3
  404f74:	930c      	str	r3, [sp, #48]	; 0x30
  404f76:	2300      	movs	r3, #0
  404f78:	9208      	str	r2, [sp, #32]
  404f7a:	930d      	str	r3, [sp, #52]	; 0x34
  404f7c:	e6b8      	b.n	404cf0 <_dtoa_r+0x178>
  404f7e:	f1c7 0301 	rsb	r3, r7, #1
  404f82:	9308      	str	r3, [sp, #32]
  404f84:	2300      	movs	r3, #0
  404f86:	9306      	str	r3, [sp, #24]
  404f88:	e6a7      	b.n	404cda <_dtoa_r+0x162>
  404f8a:	9d02      	ldr	r5, [sp, #8]
  404f8c:	4628      	mov	r0, r5
  404f8e:	f002 fa4f 	bl	407430 <__aeabi_i2d>
  404f92:	4602      	mov	r2, r0
  404f94:	460b      	mov	r3, r1
  404f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404f9a:	f002 fd17 	bl	4079cc <__aeabi_dcmpeq>
  404f9e:	2800      	cmp	r0, #0
  404fa0:	f47f ae80 	bne.w	404ca4 <_dtoa_r+0x12c>
  404fa4:	1e6b      	subs	r3, r5, #1
  404fa6:	9302      	str	r3, [sp, #8]
  404fa8:	e67c      	b.n	404ca4 <_dtoa_r+0x12c>
  404faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404fac:	9d08      	ldr	r5, [sp, #32]
  404fae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  404fb0:	2d00      	cmp	r5, #0
  404fb2:	dd0c      	ble.n	404fce <_dtoa_r+0x456>
  404fb4:	9906      	ldr	r1, [sp, #24]
  404fb6:	2900      	cmp	r1, #0
  404fb8:	460b      	mov	r3, r1
  404fba:	dd08      	ble.n	404fce <_dtoa_r+0x456>
  404fbc:	42a9      	cmp	r1, r5
  404fbe:	9a08      	ldr	r2, [sp, #32]
  404fc0:	bfa8      	it	ge
  404fc2:	462b      	movge	r3, r5
  404fc4:	1ad2      	subs	r2, r2, r3
  404fc6:	1aed      	subs	r5, r5, r3
  404fc8:	1acb      	subs	r3, r1, r3
  404fca:	9208      	str	r2, [sp, #32]
  404fcc:	9306      	str	r3, [sp, #24]
  404fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404fd0:	b1d3      	cbz	r3, 405008 <_dtoa_r+0x490>
  404fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fd4:	2b00      	cmp	r3, #0
  404fd6:	f000 82b7 	beq.w	405548 <_dtoa_r+0x9d0>
  404fda:	2f00      	cmp	r7, #0
  404fdc:	dd10      	ble.n	405000 <_dtoa_r+0x488>
  404fde:	4631      	mov	r1, r6
  404fe0:	463a      	mov	r2, r7
  404fe2:	4620      	mov	r0, r4
  404fe4:	f001 fbfa 	bl	4067dc <__pow5mult>
  404fe8:	464a      	mov	r2, r9
  404fea:	4601      	mov	r1, r0
  404fec:	4606      	mov	r6, r0
  404fee:	4620      	mov	r0, r4
  404ff0:	f001 fb62 	bl	4066b8 <__multiply>
  404ff4:	4649      	mov	r1, r9
  404ff6:	4680      	mov	r8, r0
  404ff8:	4620      	mov	r0, r4
  404ffa:	f001 fab9 	bl	406570 <_Bfree>
  404ffe:	46c1      	mov	r9, r8
  405000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405002:	1bda      	subs	r2, r3, r7
  405004:	f040 82a1 	bne.w	40554a <_dtoa_r+0x9d2>
  405008:	2101      	movs	r1, #1
  40500a:	4620      	mov	r0, r4
  40500c:	f001 fb4a 	bl	4066a4 <__i2b>
  405010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405012:	2b00      	cmp	r3, #0
  405014:	4680      	mov	r8, r0
  405016:	dd1c      	ble.n	405052 <_dtoa_r+0x4da>
  405018:	4601      	mov	r1, r0
  40501a:	461a      	mov	r2, r3
  40501c:	4620      	mov	r0, r4
  40501e:	f001 fbdd 	bl	4067dc <__pow5mult>
  405022:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405024:	2b01      	cmp	r3, #1
  405026:	4680      	mov	r8, r0
  405028:	f340 8254 	ble.w	4054d4 <_dtoa_r+0x95c>
  40502c:	2300      	movs	r3, #0
  40502e:	930c      	str	r3, [sp, #48]	; 0x30
  405030:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405034:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405038:	6918      	ldr	r0, [r3, #16]
  40503a:	f001 fae3 	bl	406604 <__hi0bits>
  40503e:	f1c0 0020 	rsb	r0, r0, #32
  405042:	e010      	b.n	405066 <_dtoa_r+0x4ee>
  405044:	f1c3 0520 	rsb	r5, r3, #32
  405048:	fa0a f005 	lsl.w	r0, sl, r5
  40504c:	e674      	b.n	404d38 <_dtoa_r+0x1c0>
  40504e:	900e      	str	r0, [sp, #56]	; 0x38
  405050:	e63c      	b.n	404ccc <_dtoa_r+0x154>
  405052:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405054:	2b01      	cmp	r3, #1
  405056:	f340 8287 	ble.w	405568 <_dtoa_r+0x9f0>
  40505a:	2300      	movs	r3, #0
  40505c:	930c      	str	r3, [sp, #48]	; 0x30
  40505e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405060:	2001      	movs	r0, #1
  405062:	2b00      	cmp	r3, #0
  405064:	d1e4      	bne.n	405030 <_dtoa_r+0x4b8>
  405066:	9a06      	ldr	r2, [sp, #24]
  405068:	4410      	add	r0, r2
  40506a:	f010 001f 	ands.w	r0, r0, #31
  40506e:	f000 80a1 	beq.w	4051b4 <_dtoa_r+0x63c>
  405072:	f1c0 0320 	rsb	r3, r0, #32
  405076:	2b04      	cmp	r3, #4
  405078:	f340 849e 	ble.w	4059b8 <_dtoa_r+0xe40>
  40507c:	9b08      	ldr	r3, [sp, #32]
  40507e:	f1c0 001c 	rsb	r0, r0, #28
  405082:	4403      	add	r3, r0
  405084:	9308      	str	r3, [sp, #32]
  405086:	4613      	mov	r3, r2
  405088:	4403      	add	r3, r0
  40508a:	4405      	add	r5, r0
  40508c:	9306      	str	r3, [sp, #24]
  40508e:	9b08      	ldr	r3, [sp, #32]
  405090:	2b00      	cmp	r3, #0
  405092:	dd05      	ble.n	4050a0 <_dtoa_r+0x528>
  405094:	4649      	mov	r1, r9
  405096:	461a      	mov	r2, r3
  405098:	4620      	mov	r0, r4
  40509a:	f001 fbef 	bl	40687c <__lshift>
  40509e:	4681      	mov	r9, r0
  4050a0:	9b06      	ldr	r3, [sp, #24]
  4050a2:	2b00      	cmp	r3, #0
  4050a4:	dd05      	ble.n	4050b2 <_dtoa_r+0x53a>
  4050a6:	4641      	mov	r1, r8
  4050a8:	461a      	mov	r2, r3
  4050aa:	4620      	mov	r0, r4
  4050ac:	f001 fbe6 	bl	40687c <__lshift>
  4050b0:	4680      	mov	r8, r0
  4050b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4050b4:	2b00      	cmp	r3, #0
  4050b6:	f040 8086 	bne.w	4051c6 <_dtoa_r+0x64e>
  4050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050bc:	2b00      	cmp	r3, #0
  4050be:	f340 8266 	ble.w	40558e <_dtoa_r+0xa16>
  4050c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	f000 8098 	beq.w	4051fa <_dtoa_r+0x682>
  4050ca:	2d00      	cmp	r5, #0
  4050cc:	dd05      	ble.n	4050da <_dtoa_r+0x562>
  4050ce:	4631      	mov	r1, r6
  4050d0:	462a      	mov	r2, r5
  4050d2:	4620      	mov	r0, r4
  4050d4:	f001 fbd2 	bl	40687c <__lshift>
  4050d8:	4606      	mov	r6, r0
  4050da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4050dc:	2b00      	cmp	r3, #0
  4050de:	f040 8337 	bne.w	405750 <_dtoa_r+0xbd8>
  4050e2:	9606      	str	r6, [sp, #24]
  4050e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050e6:	9a04      	ldr	r2, [sp, #16]
  4050e8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4050ec:	3b01      	subs	r3, #1
  4050ee:	18d3      	adds	r3, r2, r3
  4050f0:	930b      	str	r3, [sp, #44]	; 0x2c
  4050f2:	f00a 0301 	and.w	r3, sl, #1
  4050f6:	930c      	str	r3, [sp, #48]	; 0x30
  4050f8:	4617      	mov	r7, r2
  4050fa:	46c2      	mov	sl, r8
  4050fc:	4651      	mov	r1, sl
  4050fe:	4648      	mov	r0, r9
  405100:	f7ff fca6 	bl	404a50 <quorem>
  405104:	4631      	mov	r1, r6
  405106:	4605      	mov	r5, r0
  405108:	4648      	mov	r0, r9
  40510a:	f001 fc09 	bl	406920 <__mcmp>
  40510e:	465a      	mov	r2, fp
  405110:	900a      	str	r0, [sp, #40]	; 0x28
  405112:	4651      	mov	r1, sl
  405114:	4620      	mov	r0, r4
  405116:	f001 fc1f 	bl	406958 <__mdiff>
  40511a:	68c2      	ldr	r2, [r0, #12]
  40511c:	4680      	mov	r8, r0
  40511e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405122:	2a00      	cmp	r2, #0
  405124:	f040 822b 	bne.w	40557e <_dtoa_r+0xa06>
  405128:	4601      	mov	r1, r0
  40512a:	4648      	mov	r0, r9
  40512c:	9308      	str	r3, [sp, #32]
  40512e:	f001 fbf7 	bl	406920 <__mcmp>
  405132:	4641      	mov	r1, r8
  405134:	9006      	str	r0, [sp, #24]
  405136:	4620      	mov	r0, r4
  405138:	f001 fa1a 	bl	406570 <_Bfree>
  40513c:	9a06      	ldr	r2, [sp, #24]
  40513e:	9b08      	ldr	r3, [sp, #32]
  405140:	b932      	cbnz	r2, 405150 <_dtoa_r+0x5d8>
  405142:	9924      	ldr	r1, [sp, #144]	; 0x90
  405144:	b921      	cbnz	r1, 405150 <_dtoa_r+0x5d8>
  405146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405148:	2a00      	cmp	r2, #0
  40514a:	f000 83ef 	beq.w	40592c <_dtoa_r+0xdb4>
  40514e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405150:	990a      	ldr	r1, [sp, #40]	; 0x28
  405152:	2900      	cmp	r1, #0
  405154:	f2c0 829f 	blt.w	405696 <_dtoa_r+0xb1e>
  405158:	d105      	bne.n	405166 <_dtoa_r+0x5ee>
  40515a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40515c:	b919      	cbnz	r1, 405166 <_dtoa_r+0x5ee>
  40515e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405160:	2900      	cmp	r1, #0
  405162:	f000 8298 	beq.w	405696 <_dtoa_r+0xb1e>
  405166:	2a00      	cmp	r2, #0
  405168:	f300 8306 	bgt.w	405778 <_dtoa_r+0xc00>
  40516c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40516e:	703b      	strb	r3, [r7, #0]
  405170:	f107 0801 	add.w	r8, r7, #1
  405174:	4297      	cmp	r7, r2
  405176:	4645      	mov	r5, r8
  405178:	f000 830c 	beq.w	405794 <_dtoa_r+0xc1c>
  40517c:	4649      	mov	r1, r9
  40517e:	2300      	movs	r3, #0
  405180:	220a      	movs	r2, #10
  405182:	4620      	mov	r0, r4
  405184:	f001 f9fe 	bl	406584 <__multadd>
  405188:	455e      	cmp	r6, fp
  40518a:	4681      	mov	r9, r0
  40518c:	4631      	mov	r1, r6
  40518e:	f04f 0300 	mov.w	r3, #0
  405192:	f04f 020a 	mov.w	r2, #10
  405196:	4620      	mov	r0, r4
  405198:	f000 81eb 	beq.w	405572 <_dtoa_r+0x9fa>
  40519c:	f001 f9f2 	bl	406584 <__multadd>
  4051a0:	4659      	mov	r1, fp
  4051a2:	4606      	mov	r6, r0
  4051a4:	2300      	movs	r3, #0
  4051a6:	220a      	movs	r2, #10
  4051a8:	4620      	mov	r0, r4
  4051aa:	f001 f9eb 	bl	406584 <__multadd>
  4051ae:	4647      	mov	r7, r8
  4051b0:	4683      	mov	fp, r0
  4051b2:	e7a3      	b.n	4050fc <_dtoa_r+0x584>
  4051b4:	201c      	movs	r0, #28
  4051b6:	9b08      	ldr	r3, [sp, #32]
  4051b8:	4403      	add	r3, r0
  4051ba:	9308      	str	r3, [sp, #32]
  4051bc:	9b06      	ldr	r3, [sp, #24]
  4051be:	4403      	add	r3, r0
  4051c0:	4405      	add	r5, r0
  4051c2:	9306      	str	r3, [sp, #24]
  4051c4:	e763      	b.n	40508e <_dtoa_r+0x516>
  4051c6:	4641      	mov	r1, r8
  4051c8:	4648      	mov	r0, r9
  4051ca:	f001 fba9 	bl	406920 <__mcmp>
  4051ce:	2800      	cmp	r0, #0
  4051d0:	f6bf af73 	bge.w	4050ba <_dtoa_r+0x542>
  4051d4:	9f02      	ldr	r7, [sp, #8]
  4051d6:	4649      	mov	r1, r9
  4051d8:	2300      	movs	r3, #0
  4051da:	220a      	movs	r2, #10
  4051dc:	4620      	mov	r0, r4
  4051de:	3f01      	subs	r7, #1
  4051e0:	9702      	str	r7, [sp, #8]
  4051e2:	f001 f9cf 	bl	406584 <__multadd>
  4051e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051e8:	4681      	mov	r9, r0
  4051ea:	2b00      	cmp	r3, #0
  4051ec:	f040 83b6 	bne.w	40595c <_dtoa_r+0xde4>
  4051f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4051f2:	2b00      	cmp	r3, #0
  4051f4:	f340 83bf 	ble.w	405976 <_dtoa_r+0xdfe>
  4051f8:	930a      	str	r3, [sp, #40]	; 0x28
  4051fa:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405200:	465d      	mov	r5, fp
  405202:	e002      	b.n	40520a <_dtoa_r+0x692>
  405204:	f001 f9be 	bl	406584 <__multadd>
  405208:	4681      	mov	r9, r0
  40520a:	4641      	mov	r1, r8
  40520c:	4648      	mov	r0, r9
  40520e:	f7ff fc1f 	bl	404a50 <quorem>
  405212:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405216:	f805 ab01 	strb.w	sl, [r5], #1
  40521a:	eba5 030b 	sub.w	r3, r5, fp
  40521e:	42bb      	cmp	r3, r7
  405220:	f04f 020a 	mov.w	r2, #10
  405224:	f04f 0300 	mov.w	r3, #0
  405228:	4649      	mov	r1, r9
  40522a:	4620      	mov	r0, r4
  40522c:	dbea      	blt.n	405204 <_dtoa_r+0x68c>
  40522e:	9b04      	ldr	r3, [sp, #16]
  405230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405232:	2a01      	cmp	r2, #1
  405234:	bfac      	ite	ge
  405236:	189b      	addge	r3, r3, r2
  405238:	3301      	addlt	r3, #1
  40523a:	461d      	mov	r5, r3
  40523c:	f04f 0b00 	mov.w	fp, #0
  405240:	4649      	mov	r1, r9
  405242:	2201      	movs	r2, #1
  405244:	4620      	mov	r0, r4
  405246:	f001 fb19 	bl	40687c <__lshift>
  40524a:	4641      	mov	r1, r8
  40524c:	4681      	mov	r9, r0
  40524e:	f001 fb67 	bl	406920 <__mcmp>
  405252:	2800      	cmp	r0, #0
  405254:	f340 823d 	ble.w	4056d2 <_dtoa_r+0xb5a>
  405258:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40525c:	9904      	ldr	r1, [sp, #16]
  40525e:	1e6b      	subs	r3, r5, #1
  405260:	e004      	b.n	40526c <_dtoa_r+0x6f4>
  405262:	428b      	cmp	r3, r1
  405264:	f000 81ae 	beq.w	4055c4 <_dtoa_r+0xa4c>
  405268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40526c:	2a39      	cmp	r2, #57	; 0x39
  40526e:	f103 0501 	add.w	r5, r3, #1
  405272:	d0f6      	beq.n	405262 <_dtoa_r+0x6ea>
  405274:	3201      	adds	r2, #1
  405276:	701a      	strb	r2, [r3, #0]
  405278:	4641      	mov	r1, r8
  40527a:	4620      	mov	r0, r4
  40527c:	f001 f978 	bl	406570 <_Bfree>
  405280:	2e00      	cmp	r6, #0
  405282:	f43f ae3d 	beq.w	404f00 <_dtoa_r+0x388>
  405286:	f1bb 0f00 	cmp.w	fp, #0
  40528a:	d005      	beq.n	405298 <_dtoa_r+0x720>
  40528c:	45b3      	cmp	fp, r6
  40528e:	d003      	beq.n	405298 <_dtoa_r+0x720>
  405290:	4659      	mov	r1, fp
  405292:	4620      	mov	r0, r4
  405294:	f001 f96c 	bl	406570 <_Bfree>
  405298:	4631      	mov	r1, r6
  40529a:	4620      	mov	r0, r4
  40529c:	f001 f968 	bl	406570 <_Bfree>
  4052a0:	e62e      	b.n	404f00 <_dtoa_r+0x388>
  4052a2:	2300      	movs	r3, #0
  4052a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4052a6:	9b02      	ldr	r3, [sp, #8]
  4052a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4052aa:	4413      	add	r3, r2
  4052ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4052ae:	3301      	adds	r3, #1
  4052b0:	2b01      	cmp	r3, #1
  4052b2:	461f      	mov	r7, r3
  4052b4:	461e      	mov	r6, r3
  4052b6:	930a      	str	r3, [sp, #40]	; 0x28
  4052b8:	bfb8      	it	lt
  4052ba:	2701      	movlt	r7, #1
  4052bc:	2100      	movs	r1, #0
  4052be:	2f17      	cmp	r7, #23
  4052c0:	6461      	str	r1, [r4, #68]	; 0x44
  4052c2:	d90a      	bls.n	4052da <_dtoa_r+0x762>
  4052c4:	2201      	movs	r2, #1
  4052c6:	2304      	movs	r3, #4
  4052c8:	005b      	lsls	r3, r3, #1
  4052ca:	f103 0014 	add.w	r0, r3, #20
  4052ce:	4287      	cmp	r7, r0
  4052d0:	4611      	mov	r1, r2
  4052d2:	f102 0201 	add.w	r2, r2, #1
  4052d6:	d2f7      	bcs.n	4052c8 <_dtoa_r+0x750>
  4052d8:	6461      	str	r1, [r4, #68]	; 0x44
  4052da:	4620      	mov	r0, r4
  4052dc:	f001 f922 	bl	406524 <_Balloc>
  4052e0:	2e0e      	cmp	r6, #14
  4052e2:	9004      	str	r0, [sp, #16]
  4052e4:	6420      	str	r0, [r4, #64]	; 0x40
  4052e6:	f63f ad41 	bhi.w	404d6c <_dtoa_r+0x1f4>
  4052ea:	2d00      	cmp	r5, #0
  4052ec:	f43f ad3e 	beq.w	404d6c <_dtoa_r+0x1f4>
  4052f0:	9902      	ldr	r1, [sp, #8]
  4052f2:	2900      	cmp	r1, #0
  4052f4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4052f8:	f340 8202 	ble.w	405700 <_dtoa_r+0xb88>
  4052fc:	4bb8      	ldr	r3, [pc, #736]	; (4055e0 <_dtoa_r+0xa68>)
  4052fe:	f001 020f 	and.w	r2, r1, #15
  405302:	110d      	asrs	r5, r1, #4
  405304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405308:	06e9      	lsls	r1, r5, #27
  40530a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40530e:	f140 81ae 	bpl.w	40566e <_dtoa_r+0xaf6>
  405312:	4bb4      	ldr	r3, [pc, #720]	; (4055e4 <_dtoa_r+0xa6c>)
  405314:	4650      	mov	r0, sl
  405316:	4659      	mov	r1, fp
  405318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40531c:	f002 fa18 	bl	407750 <__aeabi_ddiv>
  405320:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405324:	f005 050f 	and.w	r5, r5, #15
  405328:	f04f 0a03 	mov.w	sl, #3
  40532c:	b18d      	cbz	r5, 405352 <_dtoa_r+0x7da>
  40532e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4055e4 <_dtoa_r+0xa6c>
  405332:	07ea      	lsls	r2, r5, #31
  405334:	d509      	bpl.n	40534a <_dtoa_r+0x7d2>
  405336:	4630      	mov	r0, r6
  405338:	4639      	mov	r1, r7
  40533a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40533e:	f002 f8dd 	bl	4074fc <__aeabi_dmul>
  405342:	f10a 0a01 	add.w	sl, sl, #1
  405346:	4606      	mov	r6, r0
  405348:	460f      	mov	r7, r1
  40534a:	106d      	asrs	r5, r5, #1
  40534c:	f108 0808 	add.w	r8, r8, #8
  405350:	d1ef      	bne.n	405332 <_dtoa_r+0x7ba>
  405352:	463b      	mov	r3, r7
  405354:	4632      	mov	r2, r6
  405356:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40535a:	f002 f9f9 	bl	407750 <__aeabi_ddiv>
  40535e:	4607      	mov	r7, r0
  405360:	4688      	mov	r8, r1
  405362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405364:	b143      	cbz	r3, 405378 <_dtoa_r+0x800>
  405366:	2200      	movs	r2, #0
  405368:	4b9f      	ldr	r3, [pc, #636]	; (4055e8 <_dtoa_r+0xa70>)
  40536a:	4638      	mov	r0, r7
  40536c:	4641      	mov	r1, r8
  40536e:	f002 fb37 	bl	4079e0 <__aeabi_dcmplt>
  405372:	2800      	cmp	r0, #0
  405374:	f040 8286 	bne.w	405884 <_dtoa_r+0xd0c>
  405378:	4650      	mov	r0, sl
  40537a:	f002 f859 	bl	407430 <__aeabi_i2d>
  40537e:	463a      	mov	r2, r7
  405380:	4643      	mov	r3, r8
  405382:	f002 f8bb 	bl	4074fc <__aeabi_dmul>
  405386:	4b99      	ldr	r3, [pc, #612]	; (4055ec <_dtoa_r+0xa74>)
  405388:	2200      	movs	r2, #0
  40538a:	f001 ff05 	bl	407198 <__adddf3>
  40538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405390:	4605      	mov	r5, r0
  405392:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405396:	2b00      	cmp	r3, #0
  405398:	f000 813e 	beq.w	405618 <_dtoa_r+0xaa0>
  40539c:	9b02      	ldr	r3, [sp, #8]
  40539e:	9315      	str	r3, [sp, #84]	; 0x54
  4053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053a2:	9312      	str	r3, [sp, #72]	; 0x48
  4053a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4053a6:	2b00      	cmp	r3, #0
  4053a8:	f000 81fa 	beq.w	4057a0 <_dtoa_r+0xc28>
  4053ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053ae:	4b8c      	ldr	r3, [pc, #560]	; (4055e0 <_dtoa_r+0xa68>)
  4053b0:	498f      	ldr	r1, [pc, #572]	; (4055f0 <_dtoa_r+0xa78>)
  4053b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4053b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4053ba:	2000      	movs	r0, #0
  4053bc:	f002 f9c8 	bl	407750 <__aeabi_ddiv>
  4053c0:	462a      	mov	r2, r5
  4053c2:	4633      	mov	r3, r6
  4053c4:	f001 fee6 	bl	407194 <__aeabi_dsub>
  4053c8:	4682      	mov	sl, r0
  4053ca:	468b      	mov	fp, r1
  4053cc:	4638      	mov	r0, r7
  4053ce:	4641      	mov	r1, r8
  4053d0:	f002 fb44 	bl	407a5c <__aeabi_d2iz>
  4053d4:	4605      	mov	r5, r0
  4053d6:	f002 f82b 	bl	407430 <__aeabi_i2d>
  4053da:	4602      	mov	r2, r0
  4053dc:	460b      	mov	r3, r1
  4053de:	4638      	mov	r0, r7
  4053e0:	4641      	mov	r1, r8
  4053e2:	f001 fed7 	bl	407194 <__aeabi_dsub>
  4053e6:	3530      	adds	r5, #48	; 0x30
  4053e8:	fa5f f885 	uxtb.w	r8, r5
  4053ec:	9d04      	ldr	r5, [sp, #16]
  4053ee:	4606      	mov	r6, r0
  4053f0:	460f      	mov	r7, r1
  4053f2:	f885 8000 	strb.w	r8, [r5]
  4053f6:	4602      	mov	r2, r0
  4053f8:	460b      	mov	r3, r1
  4053fa:	4650      	mov	r0, sl
  4053fc:	4659      	mov	r1, fp
  4053fe:	3501      	adds	r5, #1
  405400:	f002 fb0c 	bl	407a1c <__aeabi_dcmpgt>
  405404:	2800      	cmp	r0, #0
  405406:	d154      	bne.n	4054b2 <_dtoa_r+0x93a>
  405408:	4632      	mov	r2, r6
  40540a:	463b      	mov	r3, r7
  40540c:	2000      	movs	r0, #0
  40540e:	4976      	ldr	r1, [pc, #472]	; (4055e8 <_dtoa_r+0xa70>)
  405410:	f001 fec0 	bl	407194 <__aeabi_dsub>
  405414:	4602      	mov	r2, r0
  405416:	460b      	mov	r3, r1
  405418:	4650      	mov	r0, sl
  40541a:	4659      	mov	r1, fp
  40541c:	f002 fafe 	bl	407a1c <__aeabi_dcmpgt>
  405420:	2800      	cmp	r0, #0
  405422:	f040 8270 	bne.w	405906 <_dtoa_r+0xd8e>
  405426:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405428:	2a01      	cmp	r2, #1
  40542a:	f000 8111 	beq.w	405650 <_dtoa_r+0xad8>
  40542e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405430:	9a04      	ldr	r2, [sp, #16]
  405432:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405436:	4413      	add	r3, r2
  405438:	4699      	mov	r9, r3
  40543a:	e00d      	b.n	405458 <_dtoa_r+0x8e0>
  40543c:	2000      	movs	r0, #0
  40543e:	496a      	ldr	r1, [pc, #424]	; (4055e8 <_dtoa_r+0xa70>)
  405440:	f001 fea8 	bl	407194 <__aeabi_dsub>
  405444:	4652      	mov	r2, sl
  405446:	465b      	mov	r3, fp
  405448:	f002 faca 	bl	4079e0 <__aeabi_dcmplt>
  40544c:	2800      	cmp	r0, #0
  40544e:	f040 8258 	bne.w	405902 <_dtoa_r+0xd8a>
  405452:	454d      	cmp	r5, r9
  405454:	f000 80fa 	beq.w	40564c <_dtoa_r+0xad4>
  405458:	4650      	mov	r0, sl
  40545a:	4659      	mov	r1, fp
  40545c:	2200      	movs	r2, #0
  40545e:	4b65      	ldr	r3, [pc, #404]	; (4055f4 <_dtoa_r+0xa7c>)
  405460:	f002 f84c 	bl	4074fc <__aeabi_dmul>
  405464:	2200      	movs	r2, #0
  405466:	4b63      	ldr	r3, [pc, #396]	; (4055f4 <_dtoa_r+0xa7c>)
  405468:	4682      	mov	sl, r0
  40546a:	468b      	mov	fp, r1
  40546c:	4630      	mov	r0, r6
  40546e:	4639      	mov	r1, r7
  405470:	f002 f844 	bl	4074fc <__aeabi_dmul>
  405474:	460f      	mov	r7, r1
  405476:	4606      	mov	r6, r0
  405478:	f002 faf0 	bl	407a5c <__aeabi_d2iz>
  40547c:	4680      	mov	r8, r0
  40547e:	f001 ffd7 	bl	407430 <__aeabi_i2d>
  405482:	4602      	mov	r2, r0
  405484:	460b      	mov	r3, r1
  405486:	4630      	mov	r0, r6
  405488:	4639      	mov	r1, r7
  40548a:	f001 fe83 	bl	407194 <__aeabi_dsub>
  40548e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405492:	fa5f f888 	uxtb.w	r8, r8
  405496:	4652      	mov	r2, sl
  405498:	465b      	mov	r3, fp
  40549a:	f805 8b01 	strb.w	r8, [r5], #1
  40549e:	4606      	mov	r6, r0
  4054a0:	460f      	mov	r7, r1
  4054a2:	f002 fa9d 	bl	4079e0 <__aeabi_dcmplt>
  4054a6:	4632      	mov	r2, r6
  4054a8:	463b      	mov	r3, r7
  4054aa:	2800      	cmp	r0, #0
  4054ac:	d0c6      	beq.n	40543c <_dtoa_r+0x8c4>
  4054ae:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4054b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4054b4:	9302      	str	r3, [sp, #8]
  4054b6:	e523      	b.n	404f00 <_dtoa_r+0x388>
  4054b8:	2300      	movs	r3, #0
  4054ba:	930b      	str	r3, [sp, #44]	; 0x2c
  4054bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4054be:	2b00      	cmp	r3, #0
  4054c0:	f340 80dc 	ble.w	40567c <_dtoa_r+0xb04>
  4054c4:	461f      	mov	r7, r3
  4054c6:	461e      	mov	r6, r3
  4054c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4054ca:	930a      	str	r3, [sp, #40]	; 0x28
  4054cc:	e6f6      	b.n	4052bc <_dtoa_r+0x744>
  4054ce:	2301      	movs	r3, #1
  4054d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4054d2:	e7f3      	b.n	4054bc <_dtoa_r+0x944>
  4054d4:	f1ba 0f00 	cmp.w	sl, #0
  4054d8:	f47f ada8 	bne.w	40502c <_dtoa_r+0x4b4>
  4054dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4054e0:	2b00      	cmp	r3, #0
  4054e2:	f47f adba 	bne.w	40505a <_dtoa_r+0x4e2>
  4054e6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4054ea:	0d3f      	lsrs	r7, r7, #20
  4054ec:	053f      	lsls	r7, r7, #20
  4054ee:	2f00      	cmp	r7, #0
  4054f0:	f000 820d 	beq.w	40590e <_dtoa_r+0xd96>
  4054f4:	9b08      	ldr	r3, [sp, #32]
  4054f6:	3301      	adds	r3, #1
  4054f8:	9308      	str	r3, [sp, #32]
  4054fa:	9b06      	ldr	r3, [sp, #24]
  4054fc:	3301      	adds	r3, #1
  4054fe:	9306      	str	r3, [sp, #24]
  405500:	2301      	movs	r3, #1
  405502:	930c      	str	r3, [sp, #48]	; 0x30
  405504:	e5ab      	b.n	40505e <_dtoa_r+0x4e6>
  405506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405508:	2b00      	cmp	r3, #0
  40550a:	f73f ac42 	bgt.w	404d92 <_dtoa_r+0x21a>
  40550e:	f040 8221 	bne.w	405954 <_dtoa_r+0xddc>
  405512:	2200      	movs	r2, #0
  405514:	4b38      	ldr	r3, [pc, #224]	; (4055f8 <_dtoa_r+0xa80>)
  405516:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40551a:	f001 ffef 	bl	4074fc <__aeabi_dmul>
  40551e:	4652      	mov	r2, sl
  405520:	465b      	mov	r3, fp
  405522:	f002 fa71 	bl	407a08 <__aeabi_dcmpge>
  405526:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40552a:	4646      	mov	r6, r8
  40552c:	2800      	cmp	r0, #0
  40552e:	d041      	beq.n	4055b4 <_dtoa_r+0xa3c>
  405530:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405532:	9d04      	ldr	r5, [sp, #16]
  405534:	43db      	mvns	r3, r3
  405536:	9302      	str	r3, [sp, #8]
  405538:	4641      	mov	r1, r8
  40553a:	4620      	mov	r0, r4
  40553c:	f001 f818 	bl	406570 <_Bfree>
  405540:	2e00      	cmp	r6, #0
  405542:	f43f acdd 	beq.w	404f00 <_dtoa_r+0x388>
  405546:	e6a7      	b.n	405298 <_dtoa_r+0x720>
  405548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40554a:	4649      	mov	r1, r9
  40554c:	4620      	mov	r0, r4
  40554e:	f001 f945 	bl	4067dc <__pow5mult>
  405552:	4681      	mov	r9, r0
  405554:	e558      	b.n	405008 <_dtoa_r+0x490>
  405556:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405558:	2a00      	cmp	r2, #0
  40555a:	f000 8187 	beq.w	40586c <_dtoa_r+0xcf4>
  40555e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405562:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405564:	9d08      	ldr	r5, [sp, #32]
  405566:	e4f2      	b.n	404f4e <_dtoa_r+0x3d6>
  405568:	f1ba 0f00 	cmp.w	sl, #0
  40556c:	f47f ad75 	bne.w	40505a <_dtoa_r+0x4e2>
  405570:	e7b4      	b.n	4054dc <_dtoa_r+0x964>
  405572:	f001 f807 	bl	406584 <__multadd>
  405576:	4647      	mov	r7, r8
  405578:	4606      	mov	r6, r0
  40557a:	4683      	mov	fp, r0
  40557c:	e5be      	b.n	4050fc <_dtoa_r+0x584>
  40557e:	4601      	mov	r1, r0
  405580:	4620      	mov	r0, r4
  405582:	9306      	str	r3, [sp, #24]
  405584:	f000 fff4 	bl	406570 <_Bfree>
  405588:	2201      	movs	r2, #1
  40558a:	9b06      	ldr	r3, [sp, #24]
  40558c:	e5e0      	b.n	405150 <_dtoa_r+0x5d8>
  40558e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405590:	2b02      	cmp	r3, #2
  405592:	f77f ad96 	ble.w	4050c2 <_dtoa_r+0x54a>
  405596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405598:	2b00      	cmp	r3, #0
  40559a:	d1c9      	bne.n	405530 <_dtoa_r+0x9b8>
  40559c:	4641      	mov	r1, r8
  40559e:	2205      	movs	r2, #5
  4055a0:	4620      	mov	r0, r4
  4055a2:	f000 ffef 	bl	406584 <__multadd>
  4055a6:	4601      	mov	r1, r0
  4055a8:	4680      	mov	r8, r0
  4055aa:	4648      	mov	r0, r9
  4055ac:	f001 f9b8 	bl	406920 <__mcmp>
  4055b0:	2800      	cmp	r0, #0
  4055b2:	ddbd      	ble.n	405530 <_dtoa_r+0x9b8>
  4055b4:	9a02      	ldr	r2, [sp, #8]
  4055b6:	9904      	ldr	r1, [sp, #16]
  4055b8:	2331      	movs	r3, #49	; 0x31
  4055ba:	3201      	adds	r2, #1
  4055bc:	9202      	str	r2, [sp, #8]
  4055be:	700b      	strb	r3, [r1, #0]
  4055c0:	1c4d      	adds	r5, r1, #1
  4055c2:	e7b9      	b.n	405538 <_dtoa_r+0x9c0>
  4055c4:	9a02      	ldr	r2, [sp, #8]
  4055c6:	3201      	adds	r2, #1
  4055c8:	9202      	str	r2, [sp, #8]
  4055ca:	9a04      	ldr	r2, [sp, #16]
  4055cc:	2331      	movs	r3, #49	; 0x31
  4055ce:	7013      	strb	r3, [r2, #0]
  4055d0:	e652      	b.n	405278 <_dtoa_r+0x700>
  4055d2:	2301      	movs	r3, #1
  4055d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4055d6:	e666      	b.n	4052a6 <_dtoa_r+0x72e>
  4055d8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4055dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4055de:	e48f      	b.n	404f00 <_dtoa_r+0x388>
  4055e0:	00407d30 	.word	0x00407d30
  4055e4:	00407d08 	.word	0x00407d08
  4055e8:	3ff00000 	.word	0x3ff00000
  4055ec:	401c0000 	.word	0x401c0000
  4055f0:	3fe00000 	.word	0x3fe00000
  4055f4:	40240000 	.word	0x40240000
  4055f8:	40140000 	.word	0x40140000
  4055fc:	4650      	mov	r0, sl
  4055fe:	f001 ff17 	bl	407430 <__aeabi_i2d>
  405602:	463a      	mov	r2, r7
  405604:	4643      	mov	r3, r8
  405606:	f001 ff79 	bl	4074fc <__aeabi_dmul>
  40560a:	2200      	movs	r2, #0
  40560c:	4bc1      	ldr	r3, [pc, #772]	; (405914 <_dtoa_r+0xd9c>)
  40560e:	f001 fdc3 	bl	407198 <__adddf3>
  405612:	4605      	mov	r5, r0
  405614:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405618:	4641      	mov	r1, r8
  40561a:	2200      	movs	r2, #0
  40561c:	4bbe      	ldr	r3, [pc, #760]	; (405918 <_dtoa_r+0xda0>)
  40561e:	4638      	mov	r0, r7
  405620:	f001 fdb8 	bl	407194 <__aeabi_dsub>
  405624:	462a      	mov	r2, r5
  405626:	4633      	mov	r3, r6
  405628:	4682      	mov	sl, r0
  40562a:	468b      	mov	fp, r1
  40562c:	f002 f9f6 	bl	407a1c <__aeabi_dcmpgt>
  405630:	4680      	mov	r8, r0
  405632:	2800      	cmp	r0, #0
  405634:	f040 8110 	bne.w	405858 <_dtoa_r+0xce0>
  405638:	462a      	mov	r2, r5
  40563a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40563e:	4650      	mov	r0, sl
  405640:	4659      	mov	r1, fp
  405642:	f002 f9cd 	bl	4079e0 <__aeabi_dcmplt>
  405646:	b118      	cbz	r0, 405650 <_dtoa_r+0xad8>
  405648:	4646      	mov	r6, r8
  40564a:	e771      	b.n	405530 <_dtoa_r+0x9b8>
  40564c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405650:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405654:	f7ff bb8a 	b.w	404d6c <_dtoa_r+0x1f4>
  405658:	9804      	ldr	r0, [sp, #16]
  40565a:	f7ff babb 	b.w	404bd4 <_dtoa_r+0x5c>
  40565e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405662:	970c      	str	r7, [sp, #48]	; 0x30
  405664:	1afb      	subs	r3, r7, r3
  405666:	441a      	add	r2, r3
  405668:	920d      	str	r2, [sp, #52]	; 0x34
  40566a:	2700      	movs	r7, #0
  40566c:	e469      	b.n	404f42 <_dtoa_r+0x3ca>
  40566e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405672:	f04f 0a02 	mov.w	sl, #2
  405676:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40567a:	e657      	b.n	40532c <_dtoa_r+0x7b4>
  40567c:	2100      	movs	r1, #0
  40567e:	2301      	movs	r3, #1
  405680:	6461      	str	r1, [r4, #68]	; 0x44
  405682:	4620      	mov	r0, r4
  405684:	9325      	str	r3, [sp, #148]	; 0x94
  405686:	f000 ff4d 	bl	406524 <_Balloc>
  40568a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40568c:	9004      	str	r0, [sp, #16]
  40568e:	6420      	str	r0, [r4, #64]	; 0x40
  405690:	930a      	str	r3, [sp, #40]	; 0x28
  405692:	930f      	str	r3, [sp, #60]	; 0x3c
  405694:	e629      	b.n	4052ea <_dtoa_r+0x772>
  405696:	2a00      	cmp	r2, #0
  405698:	46d0      	mov	r8, sl
  40569a:	f8cd b018 	str.w	fp, [sp, #24]
  40569e:	469a      	mov	sl, r3
  4056a0:	dd11      	ble.n	4056c6 <_dtoa_r+0xb4e>
  4056a2:	4649      	mov	r1, r9
  4056a4:	2201      	movs	r2, #1
  4056a6:	4620      	mov	r0, r4
  4056a8:	f001 f8e8 	bl	40687c <__lshift>
  4056ac:	4641      	mov	r1, r8
  4056ae:	4681      	mov	r9, r0
  4056b0:	f001 f936 	bl	406920 <__mcmp>
  4056b4:	2800      	cmp	r0, #0
  4056b6:	f340 8146 	ble.w	405946 <_dtoa_r+0xdce>
  4056ba:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4056be:	f000 8106 	beq.w	4058ce <_dtoa_r+0xd56>
  4056c2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4056c6:	46b3      	mov	fp, r6
  4056c8:	f887 a000 	strb.w	sl, [r7]
  4056cc:	1c7d      	adds	r5, r7, #1
  4056ce:	9e06      	ldr	r6, [sp, #24]
  4056d0:	e5d2      	b.n	405278 <_dtoa_r+0x700>
  4056d2:	d104      	bne.n	4056de <_dtoa_r+0xb66>
  4056d4:	f01a 0f01 	tst.w	sl, #1
  4056d8:	d001      	beq.n	4056de <_dtoa_r+0xb66>
  4056da:	e5bd      	b.n	405258 <_dtoa_r+0x6e0>
  4056dc:	4615      	mov	r5, r2
  4056de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4056e2:	2b30      	cmp	r3, #48	; 0x30
  4056e4:	f105 32ff 	add.w	r2, r5, #4294967295
  4056e8:	d0f8      	beq.n	4056dc <_dtoa_r+0xb64>
  4056ea:	e5c5      	b.n	405278 <_dtoa_r+0x700>
  4056ec:	9904      	ldr	r1, [sp, #16]
  4056ee:	2230      	movs	r2, #48	; 0x30
  4056f0:	700a      	strb	r2, [r1, #0]
  4056f2:	9a02      	ldr	r2, [sp, #8]
  4056f4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4056f8:	3201      	adds	r2, #1
  4056fa:	9202      	str	r2, [sp, #8]
  4056fc:	f7ff bbfc 	b.w	404ef8 <_dtoa_r+0x380>
  405700:	f000 80bb 	beq.w	40587a <_dtoa_r+0xd02>
  405704:	9b02      	ldr	r3, [sp, #8]
  405706:	425d      	negs	r5, r3
  405708:	4b84      	ldr	r3, [pc, #528]	; (40591c <_dtoa_r+0xda4>)
  40570a:	f005 020f 	and.w	r2, r5, #15
  40570e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405712:	e9d3 2300 	ldrd	r2, r3, [r3]
  405716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40571a:	f001 feef 	bl	4074fc <__aeabi_dmul>
  40571e:	112d      	asrs	r5, r5, #4
  405720:	4607      	mov	r7, r0
  405722:	4688      	mov	r8, r1
  405724:	f000 812c 	beq.w	405980 <_dtoa_r+0xe08>
  405728:	4e7d      	ldr	r6, [pc, #500]	; (405920 <_dtoa_r+0xda8>)
  40572a:	f04f 0a02 	mov.w	sl, #2
  40572e:	07eb      	lsls	r3, r5, #31
  405730:	d509      	bpl.n	405746 <_dtoa_r+0xbce>
  405732:	4638      	mov	r0, r7
  405734:	4641      	mov	r1, r8
  405736:	e9d6 2300 	ldrd	r2, r3, [r6]
  40573a:	f001 fedf 	bl	4074fc <__aeabi_dmul>
  40573e:	f10a 0a01 	add.w	sl, sl, #1
  405742:	4607      	mov	r7, r0
  405744:	4688      	mov	r8, r1
  405746:	106d      	asrs	r5, r5, #1
  405748:	f106 0608 	add.w	r6, r6, #8
  40574c:	d1ef      	bne.n	40572e <_dtoa_r+0xbb6>
  40574e:	e608      	b.n	405362 <_dtoa_r+0x7ea>
  405750:	6871      	ldr	r1, [r6, #4]
  405752:	4620      	mov	r0, r4
  405754:	f000 fee6 	bl	406524 <_Balloc>
  405758:	6933      	ldr	r3, [r6, #16]
  40575a:	3302      	adds	r3, #2
  40575c:	009a      	lsls	r2, r3, #2
  40575e:	4605      	mov	r5, r0
  405760:	f106 010c 	add.w	r1, r6, #12
  405764:	300c      	adds	r0, #12
  405766:	f000 fddb 	bl	406320 <memcpy>
  40576a:	4629      	mov	r1, r5
  40576c:	2201      	movs	r2, #1
  40576e:	4620      	mov	r0, r4
  405770:	f001 f884 	bl	40687c <__lshift>
  405774:	9006      	str	r0, [sp, #24]
  405776:	e4b5      	b.n	4050e4 <_dtoa_r+0x56c>
  405778:	2b39      	cmp	r3, #57	; 0x39
  40577a:	f8cd b018 	str.w	fp, [sp, #24]
  40577e:	46d0      	mov	r8, sl
  405780:	f000 80a5 	beq.w	4058ce <_dtoa_r+0xd56>
  405784:	f103 0a01 	add.w	sl, r3, #1
  405788:	46b3      	mov	fp, r6
  40578a:	f887 a000 	strb.w	sl, [r7]
  40578e:	1c7d      	adds	r5, r7, #1
  405790:	9e06      	ldr	r6, [sp, #24]
  405792:	e571      	b.n	405278 <_dtoa_r+0x700>
  405794:	465a      	mov	r2, fp
  405796:	46d0      	mov	r8, sl
  405798:	46b3      	mov	fp, r6
  40579a:	469a      	mov	sl, r3
  40579c:	4616      	mov	r6, r2
  40579e:	e54f      	b.n	405240 <_dtoa_r+0x6c8>
  4057a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057a2:	495e      	ldr	r1, [pc, #376]	; (40591c <_dtoa_r+0xda4>)
  4057a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4057a8:	462a      	mov	r2, r5
  4057aa:	4633      	mov	r3, r6
  4057ac:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4057b0:	f001 fea4 	bl	4074fc <__aeabi_dmul>
  4057b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4057b8:	4638      	mov	r0, r7
  4057ba:	4641      	mov	r1, r8
  4057bc:	f002 f94e 	bl	407a5c <__aeabi_d2iz>
  4057c0:	4605      	mov	r5, r0
  4057c2:	f001 fe35 	bl	407430 <__aeabi_i2d>
  4057c6:	460b      	mov	r3, r1
  4057c8:	4602      	mov	r2, r0
  4057ca:	4641      	mov	r1, r8
  4057cc:	4638      	mov	r0, r7
  4057ce:	f001 fce1 	bl	407194 <__aeabi_dsub>
  4057d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057d4:	460f      	mov	r7, r1
  4057d6:	9904      	ldr	r1, [sp, #16]
  4057d8:	3530      	adds	r5, #48	; 0x30
  4057da:	2b01      	cmp	r3, #1
  4057dc:	700d      	strb	r5, [r1, #0]
  4057de:	4606      	mov	r6, r0
  4057e0:	f101 0501 	add.w	r5, r1, #1
  4057e4:	d026      	beq.n	405834 <_dtoa_r+0xcbc>
  4057e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057e8:	9a04      	ldr	r2, [sp, #16]
  4057ea:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405928 <_dtoa_r+0xdb0>
  4057ee:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4057f2:	4413      	add	r3, r2
  4057f4:	f04f 0a00 	mov.w	sl, #0
  4057f8:	4699      	mov	r9, r3
  4057fa:	4652      	mov	r2, sl
  4057fc:	465b      	mov	r3, fp
  4057fe:	4630      	mov	r0, r6
  405800:	4639      	mov	r1, r7
  405802:	f001 fe7b 	bl	4074fc <__aeabi_dmul>
  405806:	460f      	mov	r7, r1
  405808:	4606      	mov	r6, r0
  40580a:	f002 f927 	bl	407a5c <__aeabi_d2iz>
  40580e:	4680      	mov	r8, r0
  405810:	f001 fe0e 	bl	407430 <__aeabi_i2d>
  405814:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405818:	4602      	mov	r2, r0
  40581a:	460b      	mov	r3, r1
  40581c:	4630      	mov	r0, r6
  40581e:	4639      	mov	r1, r7
  405820:	f001 fcb8 	bl	407194 <__aeabi_dsub>
  405824:	f805 8b01 	strb.w	r8, [r5], #1
  405828:	454d      	cmp	r5, r9
  40582a:	4606      	mov	r6, r0
  40582c:	460f      	mov	r7, r1
  40582e:	d1e4      	bne.n	4057fa <_dtoa_r+0xc82>
  405830:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405834:	4b3b      	ldr	r3, [pc, #236]	; (405924 <_dtoa_r+0xdac>)
  405836:	2200      	movs	r2, #0
  405838:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40583c:	f001 fcac 	bl	407198 <__adddf3>
  405840:	4632      	mov	r2, r6
  405842:	463b      	mov	r3, r7
  405844:	f002 f8cc 	bl	4079e0 <__aeabi_dcmplt>
  405848:	2800      	cmp	r0, #0
  40584a:	d046      	beq.n	4058da <_dtoa_r+0xd62>
  40584c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40584e:	9302      	str	r3, [sp, #8]
  405850:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405854:	f7ff bb43 	b.w	404ede <_dtoa_r+0x366>
  405858:	f04f 0800 	mov.w	r8, #0
  40585c:	4646      	mov	r6, r8
  40585e:	e6a9      	b.n	4055b4 <_dtoa_r+0xa3c>
  405860:	9b08      	ldr	r3, [sp, #32]
  405862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405864:	1a9d      	subs	r5, r3, r2
  405866:	2300      	movs	r3, #0
  405868:	f7ff bb71 	b.w	404f4e <_dtoa_r+0x3d6>
  40586c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40586e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405870:	9d08      	ldr	r5, [sp, #32]
  405872:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405876:	f7ff bb6a 	b.w	404f4e <_dtoa_r+0x3d6>
  40587a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40587e:	f04f 0a02 	mov.w	sl, #2
  405882:	e56e      	b.n	405362 <_dtoa_r+0x7ea>
  405884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405886:	2b00      	cmp	r3, #0
  405888:	f43f aeb8 	beq.w	4055fc <_dtoa_r+0xa84>
  40588c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40588e:	2b00      	cmp	r3, #0
  405890:	f77f aede 	ble.w	405650 <_dtoa_r+0xad8>
  405894:	2200      	movs	r2, #0
  405896:	4b24      	ldr	r3, [pc, #144]	; (405928 <_dtoa_r+0xdb0>)
  405898:	4638      	mov	r0, r7
  40589a:	4641      	mov	r1, r8
  40589c:	f001 fe2e 	bl	4074fc <__aeabi_dmul>
  4058a0:	4607      	mov	r7, r0
  4058a2:	4688      	mov	r8, r1
  4058a4:	f10a 0001 	add.w	r0, sl, #1
  4058a8:	f001 fdc2 	bl	407430 <__aeabi_i2d>
  4058ac:	463a      	mov	r2, r7
  4058ae:	4643      	mov	r3, r8
  4058b0:	f001 fe24 	bl	4074fc <__aeabi_dmul>
  4058b4:	2200      	movs	r2, #0
  4058b6:	4b17      	ldr	r3, [pc, #92]	; (405914 <_dtoa_r+0xd9c>)
  4058b8:	f001 fc6e 	bl	407198 <__adddf3>
  4058bc:	9a02      	ldr	r2, [sp, #8]
  4058be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4058c0:	9312      	str	r3, [sp, #72]	; 0x48
  4058c2:	3a01      	subs	r2, #1
  4058c4:	4605      	mov	r5, r0
  4058c6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4058ca:	9215      	str	r2, [sp, #84]	; 0x54
  4058cc:	e56a      	b.n	4053a4 <_dtoa_r+0x82c>
  4058ce:	2239      	movs	r2, #57	; 0x39
  4058d0:	46b3      	mov	fp, r6
  4058d2:	703a      	strb	r2, [r7, #0]
  4058d4:	9e06      	ldr	r6, [sp, #24]
  4058d6:	1c7d      	adds	r5, r7, #1
  4058d8:	e4c0      	b.n	40525c <_dtoa_r+0x6e4>
  4058da:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4058de:	2000      	movs	r0, #0
  4058e0:	4910      	ldr	r1, [pc, #64]	; (405924 <_dtoa_r+0xdac>)
  4058e2:	f001 fc57 	bl	407194 <__aeabi_dsub>
  4058e6:	4632      	mov	r2, r6
  4058e8:	463b      	mov	r3, r7
  4058ea:	f002 f897 	bl	407a1c <__aeabi_dcmpgt>
  4058ee:	b908      	cbnz	r0, 4058f4 <_dtoa_r+0xd7c>
  4058f0:	e6ae      	b.n	405650 <_dtoa_r+0xad8>
  4058f2:	4615      	mov	r5, r2
  4058f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4058f8:	2b30      	cmp	r3, #48	; 0x30
  4058fa:	f105 32ff 	add.w	r2, r5, #4294967295
  4058fe:	d0f8      	beq.n	4058f2 <_dtoa_r+0xd7a>
  405900:	e5d7      	b.n	4054b2 <_dtoa_r+0x93a>
  405902:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405906:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405908:	9302      	str	r3, [sp, #8]
  40590a:	f7ff bae8 	b.w	404ede <_dtoa_r+0x366>
  40590e:	970c      	str	r7, [sp, #48]	; 0x30
  405910:	f7ff bba5 	b.w	40505e <_dtoa_r+0x4e6>
  405914:	401c0000 	.word	0x401c0000
  405918:	40140000 	.word	0x40140000
  40591c:	00407d30 	.word	0x00407d30
  405920:	00407d08 	.word	0x00407d08
  405924:	3fe00000 	.word	0x3fe00000
  405928:	40240000 	.word	0x40240000
  40592c:	2b39      	cmp	r3, #57	; 0x39
  40592e:	f8cd b018 	str.w	fp, [sp, #24]
  405932:	46d0      	mov	r8, sl
  405934:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405938:	469a      	mov	sl, r3
  40593a:	d0c8      	beq.n	4058ce <_dtoa_r+0xd56>
  40593c:	f1bb 0f00 	cmp.w	fp, #0
  405940:	f73f aebf 	bgt.w	4056c2 <_dtoa_r+0xb4a>
  405944:	e6bf      	b.n	4056c6 <_dtoa_r+0xb4e>
  405946:	f47f aebe 	bne.w	4056c6 <_dtoa_r+0xb4e>
  40594a:	f01a 0f01 	tst.w	sl, #1
  40594e:	f43f aeba 	beq.w	4056c6 <_dtoa_r+0xb4e>
  405952:	e6b2      	b.n	4056ba <_dtoa_r+0xb42>
  405954:	f04f 0800 	mov.w	r8, #0
  405958:	4646      	mov	r6, r8
  40595a:	e5e9      	b.n	405530 <_dtoa_r+0x9b8>
  40595c:	4631      	mov	r1, r6
  40595e:	2300      	movs	r3, #0
  405960:	220a      	movs	r2, #10
  405962:	4620      	mov	r0, r4
  405964:	f000 fe0e 	bl	406584 <__multadd>
  405968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40596a:	2b00      	cmp	r3, #0
  40596c:	4606      	mov	r6, r0
  40596e:	dd0a      	ble.n	405986 <_dtoa_r+0xe0e>
  405970:	930a      	str	r3, [sp, #40]	; 0x28
  405972:	f7ff bbaa 	b.w	4050ca <_dtoa_r+0x552>
  405976:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405978:	2b02      	cmp	r3, #2
  40597a:	dc23      	bgt.n	4059c4 <_dtoa_r+0xe4c>
  40597c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40597e:	e43b      	b.n	4051f8 <_dtoa_r+0x680>
  405980:	f04f 0a02 	mov.w	sl, #2
  405984:	e4ed      	b.n	405362 <_dtoa_r+0x7ea>
  405986:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405988:	2b02      	cmp	r3, #2
  40598a:	dc1b      	bgt.n	4059c4 <_dtoa_r+0xe4c>
  40598c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40598e:	e7ef      	b.n	405970 <_dtoa_r+0xdf8>
  405990:	2500      	movs	r5, #0
  405992:	6465      	str	r5, [r4, #68]	; 0x44
  405994:	4629      	mov	r1, r5
  405996:	4620      	mov	r0, r4
  405998:	f000 fdc4 	bl	406524 <_Balloc>
  40599c:	f04f 33ff 	mov.w	r3, #4294967295
  4059a0:	930a      	str	r3, [sp, #40]	; 0x28
  4059a2:	930f      	str	r3, [sp, #60]	; 0x3c
  4059a4:	2301      	movs	r3, #1
  4059a6:	9004      	str	r0, [sp, #16]
  4059a8:	9525      	str	r5, [sp, #148]	; 0x94
  4059aa:	6420      	str	r0, [r4, #64]	; 0x40
  4059ac:	930b      	str	r3, [sp, #44]	; 0x2c
  4059ae:	f7ff b9dd 	b.w	404d6c <_dtoa_r+0x1f4>
  4059b2:	2501      	movs	r5, #1
  4059b4:	f7ff b9a5 	b.w	404d02 <_dtoa_r+0x18a>
  4059b8:	f43f ab69 	beq.w	40508e <_dtoa_r+0x516>
  4059bc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4059c0:	f7ff bbf9 	b.w	4051b6 <_dtoa_r+0x63e>
  4059c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059c6:	930a      	str	r3, [sp, #40]	; 0x28
  4059c8:	e5e5      	b.n	405596 <_dtoa_r+0xa1e>
  4059ca:	bf00      	nop

004059cc <__libc_fini_array>:
  4059cc:	b538      	push	{r3, r4, r5, lr}
  4059ce:	4c0a      	ldr	r4, [pc, #40]	; (4059f8 <__libc_fini_array+0x2c>)
  4059d0:	4d0a      	ldr	r5, [pc, #40]	; (4059fc <__libc_fini_array+0x30>)
  4059d2:	1b64      	subs	r4, r4, r5
  4059d4:	10a4      	asrs	r4, r4, #2
  4059d6:	d00a      	beq.n	4059ee <__libc_fini_array+0x22>
  4059d8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4059dc:	3b01      	subs	r3, #1
  4059de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4059e2:	3c01      	subs	r4, #1
  4059e4:	f855 3904 	ldr.w	r3, [r5], #-4
  4059e8:	4798      	blx	r3
  4059ea:	2c00      	cmp	r4, #0
  4059ec:	d1f9      	bne.n	4059e2 <__libc_fini_array+0x16>
  4059ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4059f2:	f002 ba93 	b.w	407f1c <_fini>
  4059f6:	bf00      	nop
  4059f8:	00407f2c 	.word	0x00407f2c
  4059fc:	00407f28 	.word	0x00407f28

00405a00 <_malloc_trim_r>:
  405a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a02:	4f24      	ldr	r7, [pc, #144]	; (405a94 <_malloc_trim_r+0x94>)
  405a04:	460c      	mov	r4, r1
  405a06:	4606      	mov	r6, r0
  405a08:	f000 fd88 	bl	40651c <__malloc_lock>
  405a0c:	68bb      	ldr	r3, [r7, #8]
  405a0e:	685d      	ldr	r5, [r3, #4]
  405a10:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405a14:	310f      	adds	r1, #15
  405a16:	f025 0503 	bic.w	r5, r5, #3
  405a1a:	4429      	add	r1, r5
  405a1c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405a20:	f021 010f 	bic.w	r1, r1, #15
  405a24:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405a28:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405a2c:	db07      	blt.n	405a3e <_malloc_trim_r+0x3e>
  405a2e:	2100      	movs	r1, #0
  405a30:	4630      	mov	r0, r6
  405a32:	f001 fa17 	bl	406e64 <_sbrk_r>
  405a36:	68bb      	ldr	r3, [r7, #8]
  405a38:	442b      	add	r3, r5
  405a3a:	4298      	cmp	r0, r3
  405a3c:	d004      	beq.n	405a48 <_malloc_trim_r+0x48>
  405a3e:	4630      	mov	r0, r6
  405a40:	f000 fd6e 	bl	406520 <__malloc_unlock>
  405a44:	2000      	movs	r0, #0
  405a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a48:	4261      	negs	r1, r4
  405a4a:	4630      	mov	r0, r6
  405a4c:	f001 fa0a 	bl	406e64 <_sbrk_r>
  405a50:	3001      	adds	r0, #1
  405a52:	d00d      	beq.n	405a70 <_malloc_trim_r+0x70>
  405a54:	4b10      	ldr	r3, [pc, #64]	; (405a98 <_malloc_trim_r+0x98>)
  405a56:	68ba      	ldr	r2, [r7, #8]
  405a58:	6819      	ldr	r1, [r3, #0]
  405a5a:	1b2d      	subs	r5, r5, r4
  405a5c:	f045 0501 	orr.w	r5, r5, #1
  405a60:	4630      	mov	r0, r6
  405a62:	1b09      	subs	r1, r1, r4
  405a64:	6055      	str	r5, [r2, #4]
  405a66:	6019      	str	r1, [r3, #0]
  405a68:	f000 fd5a 	bl	406520 <__malloc_unlock>
  405a6c:	2001      	movs	r0, #1
  405a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a70:	2100      	movs	r1, #0
  405a72:	4630      	mov	r0, r6
  405a74:	f001 f9f6 	bl	406e64 <_sbrk_r>
  405a78:	68ba      	ldr	r2, [r7, #8]
  405a7a:	1a83      	subs	r3, r0, r2
  405a7c:	2b0f      	cmp	r3, #15
  405a7e:	ddde      	ble.n	405a3e <_malloc_trim_r+0x3e>
  405a80:	4c06      	ldr	r4, [pc, #24]	; (405a9c <_malloc_trim_r+0x9c>)
  405a82:	4905      	ldr	r1, [pc, #20]	; (405a98 <_malloc_trim_r+0x98>)
  405a84:	6824      	ldr	r4, [r4, #0]
  405a86:	f043 0301 	orr.w	r3, r3, #1
  405a8a:	1b00      	subs	r0, r0, r4
  405a8c:	6053      	str	r3, [r2, #4]
  405a8e:	6008      	str	r0, [r1, #0]
  405a90:	e7d5      	b.n	405a3e <_malloc_trim_r+0x3e>
  405a92:	bf00      	nop
  405a94:	200005ac 	.word	0x200005ac
  405a98:	20008974 	.word	0x20008974
  405a9c:	200009b4 	.word	0x200009b4

00405aa0 <_free_r>:
  405aa0:	2900      	cmp	r1, #0
  405aa2:	d044      	beq.n	405b2e <_free_r+0x8e>
  405aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405aa8:	460d      	mov	r5, r1
  405aaa:	4680      	mov	r8, r0
  405aac:	f000 fd36 	bl	40651c <__malloc_lock>
  405ab0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405ab4:	4969      	ldr	r1, [pc, #420]	; (405c5c <_free_r+0x1bc>)
  405ab6:	f027 0301 	bic.w	r3, r7, #1
  405aba:	f1a5 0408 	sub.w	r4, r5, #8
  405abe:	18e2      	adds	r2, r4, r3
  405ac0:	688e      	ldr	r6, [r1, #8]
  405ac2:	6850      	ldr	r0, [r2, #4]
  405ac4:	42b2      	cmp	r2, r6
  405ac6:	f020 0003 	bic.w	r0, r0, #3
  405aca:	d05e      	beq.n	405b8a <_free_r+0xea>
  405acc:	07fe      	lsls	r6, r7, #31
  405ace:	6050      	str	r0, [r2, #4]
  405ad0:	d40b      	bmi.n	405aea <_free_r+0x4a>
  405ad2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405ad6:	1be4      	subs	r4, r4, r7
  405ad8:	f101 0e08 	add.w	lr, r1, #8
  405adc:	68a5      	ldr	r5, [r4, #8]
  405ade:	4575      	cmp	r5, lr
  405ae0:	443b      	add	r3, r7
  405ae2:	d06d      	beq.n	405bc0 <_free_r+0x120>
  405ae4:	68e7      	ldr	r7, [r4, #12]
  405ae6:	60ef      	str	r7, [r5, #12]
  405ae8:	60bd      	str	r5, [r7, #8]
  405aea:	1815      	adds	r5, r2, r0
  405aec:	686d      	ldr	r5, [r5, #4]
  405aee:	07ed      	lsls	r5, r5, #31
  405af0:	d53e      	bpl.n	405b70 <_free_r+0xd0>
  405af2:	f043 0201 	orr.w	r2, r3, #1
  405af6:	6062      	str	r2, [r4, #4]
  405af8:	50e3      	str	r3, [r4, r3]
  405afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405afe:	d217      	bcs.n	405b30 <_free_r+0x90>
  405b00:	08db      	lsrs	r3, r3, #3
  405b02:	1c58      	adds	r0, r3, #1
  405b04:	109a      	asrs	r2, r3, #2
  405b06:	684d      	ldr	r5, [r1, #4]
  405b08:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405b0c:	60a7      	str	r7, [r4, #8]
  405b0e:	2301      	movs	r3, #1
  405b10:	4093      	lsls	r3, r2
  405b12:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405b16:	432b      	orrs	r3, r5
  405b18:	3a08      	subs	r2, #8
  405b1a:	60e2      	str	r2, [r4, #12]
  405b1c:	604b      	str	r3, [r1, #4]
  405b1e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405b22:	60fc      	str	r4, [r7, #12]
  405b24:	4640      	mov	r0, r8
  405b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b2a:	f000 bcf9 	b.w	406520 <__malloc_unlock>
  405b2e:	4770      	bx	lr
  405b30:	0a5a      	lsrs	r2, r3, #9
  405b32:	2a04      	cmp	r2, #4
  405b34:	d852      	bhi.n	405bdc <_free_r+0x13c>
  405b36:	099a      	lsrs	r2, r3, #6
  405b38:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405b3c:	00ff      	lsls	r7, r7, #3
  405b3e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405b42:	19c8      	adds	r0, r1, r7
  405b44:	59ca      	ldr	r2, [r1, r7]
  405b46:	3808      	subs	r0, #8
  405b48:	4290      	cmp	r0, r2
  405b4a:	d04f      	beq.n	405bec <_free_r+0x14c>
  405b4c:	6851      	ldr	r1, [r2, #4]
  405b4e:	f021 0103 	bic.w	r1, r1, #3
  405b52:	428b      	cmp	r3, r1
  405b54:	d232      	bcs.n	405bbc <_free_r+0x11c>
  405b56:	6892      	ldr	r2, [r2, #8]
  405b58:	4290      	cmp	r0, r2
  405b5a:	d1f7      	bne.n	405b4c <_free_r+0xac>
  405b5c:	68c3      	ldr	r3, [r0, #12]
  405b5e:	60a0      	str	r0, [r4, #8]
  405b60:	60e3      	str	r3, [r4, #12]
  405b62:	609c      	str	r4, [r3, #8]
  405b64:	60c4      	str	r4, [r0, #12]
  405b66:	4640      	mov	r0, r8
  405b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b6c:	f000 bcd8 	b.w	406520 <__malloc_unlock>
  405b70:	6895      	ldr	r5, [r2, #8]
  405b72:	4f3b      	ldr	r7, [pc, #236]	; (405c60 <_free_r+0x1c0>)
  405b74:	42bd      	cmp	r5, r7
  405b76:	4403      	add	r3, r0
  405b78:	d040      	beq.n	405bfc <_free_r+0x15c>
  405b7a:	68d0      	ldr	r0, [r2, #12]
  405b7c:	60e8      	str	r0, [r5, #12]
  405b7e:	f043 0201 	orr.w	r2, r3, #1
  405b82:	6085      	str	r5, [r0, #8]
  405b84:	6062      	str	r2, [r4, #4]
  405b86:	50e3      	str	r3, [r4, r3]
  405b88:	e7b7      	b.n	405afa <_free_r+0x5a>
  405b8a:	07ff      	lsls	r7, r7, #31
  405b8c:	4403      	add	r3, r0
  405b8e:	d407      	bmi.n	405ba0 <_free_r+0x100>
  405b90:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405b94:	1aa4      	subs	r4, r4, r2
  405b96:	4413      	add	r3, r2
  405b98:	68a0      	ldr	r0, [r4, #8]
  405b9a:	68e2      	ldr	r2, [r4, #12]
  405b9c:	60c2      	str	r2, [r0, #12]
  405b9e:	6090      	str	r0, [r2, #8]
  405ba0:	4a30      	ldr	r2, [pc, #192]	; (405c64 <_free_r+0x1c4>)
  405ba2:	6812      	ldr	r2, [r2, #0]
  405ba4:	f043 0001 	orr.w	r0, r3, #1
  405ba8:	4293      	cmp	r3, r2
  405baa:	6060      	str	r0, [r4, #4]
  405bac:	608c      	str	r4, [r1, #8]
  405bae:	d3b9      	bcc.n	405b24 <_free_r+0x84>
  405bb0:	4b2d      	ldr	r3, [pc, #180]	; (405c68 <_free_r+0x1c8>)
  405bb2:	4640      	mov	r0, r8
  405bb4:	6819      	ldr	r1, [r3, #0]
  405bb6:	f7ff ff23 	bl	405a00 <_malloc_trim_r>
  405bba:	e7b3      	b.n	405b24 <_free_r+0x84>
  405bbc:	4610      	mov	r0, r2
  405bbe:	e7cd      	b.n	405b5c <_free_r+0xbc>
  405bc0:	1811      	adds	r1, r2, r0
  405bc2:	6849      	ldr	r1, [r1, #4]
  405bc4:	07c9      	lsls	r1, r1, #31
  405bc6:	d444      	bmi.n	405c52 <_free_r+0x1b2>
  405bc8:	6891      	ldr	r1, [r2, #8]
  405bca:	68d2      	ldr	r2, [r2, #12]
  405bcc:	60ca      	str	r2, [r1, #12]
  405bce:	4403      	add	r3, r0
  405bd0:	f043 0001 	orr.w	r0, r3, #1
  405bd4:	6091      	str	r1, [r2, #8]
  405bd6:	6060      	str	r0, [r4, #4]
  405bd8:	50e3      	str	r3, [r4, r3]
  405bda:	e7a3      	b.n	405b24 <_free_r+0x84>
  405bdc:	2a14      	cmp	r2, #20
  405bde:	d816      	bhi.n	405c0e <_free_r+0x16e>
  405be0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405be4:	00ff      	lsls	r7, r7, #3
  405be6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405bea:	e7aa      	b.n	405b42 <_free_r+0xa2>
  405bec:	10aa      	asrs	r2, r5, #2
  405bee:	2301      	movs	r3, #1
  405bf0:	684d      	ldr	r5, [r1, #4]
  405bf2:	4093      	lsls	r3, r2
  405bf4:	432b      	orrs	r3, r5
  405bf6:	604b      	str	r3, [r1, #4]
  405bf8:	4603      	mov	r3, r0
  405bfa:	e7b0      	b.n	405b5e <_free_r+0xbe>
  405bfc:	f043 0201 	orr.w	r2, r3, #1
  405c00:	614c      	str	r4, [r1, #20]
  405c02:	610c      	str	r4, [r1, #16]
  405c04:	60e5      	str	r5, [r4, #12]
  405c06:	60a5      	str	r5, [r4, #8]
  405c08:	6062      	str	r2, [r4, #4]
  405c0a:	50e3      	str	r3, [r4, r3]
  405c0c:	e78a      	b.n	405b24 <_free_r+0x84>
  405c0e:	2a54      	cmp	r2, #84	; 0x54
  405c10:	d806      	bhi.n	405c20 <_free_r+0x180>
  405c12:	0b1a      	lsrs	r2, r3, #12
  405c14:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405c18:	00ff      	lsls	r7, r7, #3
  405c1a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405c1e:	e790      	b.n	405b42 <_free_r+0xa2>
  405c20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405c24:	d806      	bhi.n	405c34 <_free_r+0x194>
  405c26:	0bda      	lsrs	r2, r3, #15
  405c28:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405c2c:	00ff      	lsls	r7, r7, #3
  405c2e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405c32:	e786      	b.n	405b42 <_free_r+0xa2>
  405c34:	f240 5054 	movw	r0, #1364	; 0x554
  405c38:	4282      	cmp	r2, r0
  405c3a:	d806      	bhi.n	405c4a <_free_r+0x1aa>
  405c3c:	0c9a      	lsrs	r2, r3, #18
  405c3e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405c42:	00ff      	lsls	r7, r7, #3
  405c44:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405c48:	e77b      	b.n	405b42 <_free_r+0xa2>
  405c4a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405c4e:	257e      	movs	r5, #126	; 0x7e
  405c50:	e777      	b.n	405b42 <_free_r+0xa2>
  405c52:	f043 0101 	orr.w	r1, r3, #1
  405c56:	6061      	str	r1, [r4, #4]
  405c58:	6013      	str	r3, [r2, #0]
  405c5a:	e763      	b.n	405b24 <_free_r+0x84>
  405c5c:	200005ac 	.word	0x200005ac
  405c60:	200005b4 	.word	0x200005b4
  405c64:	200009b8 	.word	0x200009b8
  405c68:	200089a4 	.word	0x200089a4

00405c6c <_localeconv_r>:
  405c6c:	4a04      	ldr	r2, [pc, #16]	; (405c80 <_localeconv_r+0x14>)
  405c6e:	4b05      	ldr	r3, [pc, #20]	; (405c84 <_localeconv_r+0x18>)
  405c70:	6812      	ldr	r2, [r2, #0]
  405c72:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405c74:	2800      	cmp	r0, #0
  405c76:	bf08      	it	eq
  405c78:	4618      	moveq	r0, r3
  405c7a:	30f0      	adds	r0, #240	; 0xf0
  405c7c:	4770      	bx	lr
  405c7e:	bf00      	nop
  405c80:	20000010 	.word	0x20000010
  405c84:	20000440 	.word	0x20000440

00405c88 <_malloc_r>:
  405c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c8c:	f101 060b 	add.w	r6, r1, #11
  405c90:	2e16      	cmp	r6, #22
  405c92:	b083      	sub	sp, #12
  405c94:	4605      	mov	r5, r0
  405c96:	f240 809e 	bls.w	405dd6 <_malloc_r+0x14e>
  405c9a:	f036 0607 	bics.w	r6, r6, #7
  405c9e:	f100 80bd 	bmi.w	405e1c <_malloc_r+0x194>
  405ca2:	42b1      	cmp	r1, r6
  405ca4:	f200 80ba 	bhi.w	405e1c <_malloc_r+0x194>
  405ca8:	f000 fc38 	bl	40651c <__malloc_lock>
  405cac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405cb0:	f0c0 8293 	bcc.w	4061da <_malloc_r+0x552>
  405cb4:	0a73      	lsrs	r3, r6, #9
  405cb6:	f000 80b8 	beq.w	405e2a <_malloc_r+0x1a2>
  405cba:	2b04      	cmp	r3, #4
  405cbc:	f200 8179 	bhi.w	405fb2 <_malloc_r+0x32a>
  405cc0:	09b3      	lsrs	r3, r6, #6
  405cc2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405cc6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405cca:	00c3      	lsls	r3, r0, #3
  405ccc:	4fbf      	ldr	r7, [pc, #764]	; (405fcc <_malloc_r+0x344>)
  405cce:	443b      	add	r3, r7
  405cd0:	f1a3 0108 	sub.w	r1, r3, #8
  405cd4:	685c      	ldr	r4, [r3, #4]
  405cd6:	42a1      	cmp	r1, r4
  405cd8:	d106      	bne.n	405ce8 <_malloc_r+0x60>
  405cda:	e00c      	b.n	405cf6 <_malloc_r+0x6e>
  405cdc:	2a00      	cmp	r2, #0
  405cde:	f280 80aa 	bge.w	405e36 <_malloc_r+0x1ae>
  405ce2:	68e4      	ldr	r4, [r4, #12]
  405ce4:	42a1      	cmp	r1, r4
  405ce6:	d006      	beq.n	405cf6 <_malloc_r+0x6e>
  405ce8:	6863      	ldr	r3, [r4, #4]
  405cea:	f023 0303 	bic.w	r3, r3, #3
  405cee:	1b9a      	subs	r2, r3, r6
  405cf0:	2a0f      	cmp	r2, #15
  405cf2:	ddf3      	ble.n	405cdc <_malloc_r+0x54>
  405cf4:	4670      	mov	r0, lr
  405cf6:	693c      	ldr	r4, [r7, #16]
  405cf8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405fe0 <_malloc_r+0x358>
  405cfc:	4574      	cmp	r4, lr
  405cfe:	f000 81ab 	beq.w	406058 <_malloc_r+0x3d0>
  405d02:	6863      	ldr	r3, [r4, #4]
  405d04:	f023 0303 	bic.w	r3, r3, #3
  405d08:	1b9a      	subs	r2, r3, r6
  405d0a:	2a0f      	cmp	r2, #15
  405d0c:	f300 8190 	bgt.w	406030 <_malloc_r+0x3a8>
  405d10:	2a00      	cmp	r2, #0
  405d12:	f8c7 e014 	str.w	lr, [r7, #20]
  405d16:	f8c7 e010 	str.w	lr, [r7, #16]
  405d1a:	f280 809d 	bge.w	405e58 <_malloc_r+0x1d0>
  405d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405d22:	f080 8161 	bcs.w	405fe8 <_malloc_r+0x360>
  405d26:	08db      	lsrs	r3, r3, #3
  405d28:	f103 0c01 	add.w	ip, r3, #1
  405d2c:	1099      	asrs	r1, r3, #2
  405d2e:	687a      	ldr	r2, [r7, #4]
  405d30:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405d34:	f8c4 8008 	str.w	r8, [r4, #8]
  405d38:	2301      	movs	r3, #1
  405d3a:	408b      	lsls	r3, r1
  405d3c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405d40:	4313      	orrs	r3, r2
  405d42:	3908      	subs	r1, #8
  405d44:	60e1      	str	r1, [r4, #12]
  405d46:	607b      	str	r3, [r7, #4]
  405d48:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405d4c:	f8c8 400c 	str.w	r4, [r8, #12]
  405d50:	1082      	asrs	r2, r0, #2
  405d52:	2401      	movs	r4, #1
  405d54:	4094      	lsls	r4, r2
  405d56:	429c      	cmp	r4, r3
  405d58:	f200 808b 	bhi.w	405e72 <_malloc_r+0x1ea>
  405d5c:	421c      	tst	r4, r3
  405d5e:	d106      	bne.n	405d6e <_malloc_r+0xe6>
  405d60:	f020 0003 	bic.w	r0, r0, #3
  405d64:	0064      	lsls	r4, r4, #1
  405d66:	421c      	tst	r4, r3
  405d68:	f100 0004 	add.w	r0, r0, #4
  405d6c:	d0fa      	beq.n	405d64 <_malloc_r+0xdc>
  405d6e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405d72:	46cc      	mov	ip, r9
  405d74:	4680      	mov	r8, r0
  405d76:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405d7a:	459c      	cmp	ip, r3
  405d7c:	d107      	bne.n	405d8e <_malloc_r+0x106>
  405d7e:	e16d      	b.n	40605c <_malloc_r+0x3d4>
  405d80:	2a00      	cmp	r2, #0
  405d82:	f280 817b 	bge.w	40607c <_malloc_r+0x3f4>
  405d86:	68db      	ldr	r3, [r3, #12]
  405d88:	459c      	cmp	ip, r3
  405d8a:	f000 8167 	beq.w	40605c <_malloc_r+0x3d4>
  405d8e:	6859      	ldr	r1, [r3, #4]
  405d90:	f021 0103 	bic.w	r1, r1, #3
  405d94:	1b8a      	subs	r2, r1, r6
  405d96:	2a0f      	cmp	r2, #15
  405d98:	ddf2      	ble.n	405d80 <_malloc_r+0xf8>
  405d9a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405d9e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405da2:	9300      	str	r3, [sp, #0]
  405da4:	199c      	adds	r4, r3, r6
  405da6:	4628      	mov	r0, r5
  405da8:	f046 0601 	orr.w	r6, r6, #1
  405dac:	f042 0501 	orr.w	r5, r2, #1
  405db0:	605e      	str	r6, [r3, #4]
  405db2:	f8c8 c00c 	str.w	ip, [r8, #12]
  405db6:	f8cc 8008 	str.w	r8, [ip, #8]
  405dba:	617c      	str	r4, [r7, #20]
  405dbc:	613c      	str	r4, [r7, #16]
  405dbe:	f8c4 e00c 	str.w	lr, [r4, #12]
  405dc2:	f8c4 e008 	str.w	lr, [r4, #8]
  405dc6:	6065      	str	r5, [r4, #4]
  405dc8:	505a      	str	r2, [r3, r1]
  405dca:	f000 fba9 	bl	406520 <__malloc_unlock>
  405dce:	9b00      	ldr	r3, [sp, #0]
  405dd0:	f103 0408 	add.w	r4, r3, #8
  405dd4:	e01e      	b.n	405e14 <_malloc_r+0x18c>
  405dd6:	2910      	cmp	r1, #16
  405dd8:	d820      	bhi.n	405e1c <_malloc_r+0x194>
  405dda:	f000 fb9f 	bl	40651c <__malloc_lock>
  405dde:	2610      	movs	r6, #16
  405de0:	2318      	movs	r3, #24
  405de2:	2002      	movs	r0, #2
  405de4:	4f79      	ldr	r7, [pc, #484]	; (405fcc <_malloc_r+0x344>)
  405de6:	443b      	add	r3, r7
  405de8:	f1a3 0208 	sub.w	r2, r3, #8
  405dec:	685c      	ldr	r4, [r3, #4]
  405dee:	4294      	cmp	r4, r2
  405df0:	f000 813d 	beq.w	40606e <_malloc_r+0x3e6>
  405df4:	6863      	ldr	r3, [r4, #4]
  405df6:	68e1      	ldr	r1, [r4, #12]
  405df8:	68a6      	ldr	r6, [r4, #8]
  405dfa:	f023 0303 	bic.w	r3, r3, #3
  405dfe:	4423      	add	r3, r4
  405e00:	4628      	mov	r0, r5
  405e02:	685a      	ldr	r2, [r3, #4]
  405e04:	60f1      	str	r1, [r6, #12]
  405e06:	f042 0201 	orr.w	r2, r2, #1
  405e0a:	608e      	str	r6, [r1, #8]
  405e0c:	605a      	str	r2, [r3, #4]
  405e0e:	f000 fb87 	bl	406520 <__malloc_unlock>
  405e12:	3408      	adds	r4, #8
  405e14:	4620      	mov	r0, r4
  405e16:	b003      	add	sp, #12
  405e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e1c:	2400      	movs	r4, #0
  405e1e:	230c      	movs	r3, #12
  405e20:	4620      	mov	r0, r4
  405e22:	602b      	str	r3, [r5, #0]
  405e24:	b003      	add	sp, #12
  405e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e2a:	2040      	movs	r0, #64	; 0x40
  405e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  405e30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405e34:	e74a      	b.n	405ccc <_malloc_r+0x44>
  405e36:	4423      	add	r3, r4
  405e38:	68e1      	ldr	r1, [r4, #12]
  405e3a:	685a      	ldr	r2, [r3, #4]
  405e3c:	68a6      	ldr	r6, [r4, #8]
  405e3e:	f042 0201 	orr.w	r2, r2, #1
  405e42:	60f1      	str	r1, [r6, #12]
  405e44:	4628      	mov	r0, r5
  405e46:	608e      	str	r6, [r1, #8]
  405e48:	605a      	str	r2, [r3, #4]
  405e4a:	f000 fb69 	bl	406520 <__malloc_unlock>
  405e4e:	3408      	adds	r4, #8
  405e50:	4620      	mov	r0, r4
  405e52:	b003      	add	sp, #12
  405e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e58:	4423      	add	r3, r4
  405e5a:	4628      	mov	r0, r5
  405e5c:	685a      	ldr	r2, [r3, #4]
  405e5e:	f042 0201 	orr.w	r2, r2, #1
  405e62:	605a      	str	r2, [r3, #4]
  405e64:	f000 fb5c 	bl	406520 <__malloc_unlock>
  405e68:	3408      	adds	r4, #8
  405e6a:	4620      	mov	r0, r4
  405e6c:	b003      	add	sp, #12
  405e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e72:	68bc      	ldr	r4, [r7, #8]
  405e74:	6863      	ldr	r3, [r4, #4]
  405e76:	f023 0803 	bic.w	r8, r3, #3
  405e7a:	45b0      	cmp	r8, r6
  405e7c:	d304      	bcc.n	405e88 <_malloc_r+0x200>
  405e7e:	eba8 0306 	sub.w	r3, r8, r6
  405e82:	2b0f      	cmp	r3, #15
  405e84:	f300 8085 	bgt.w	405f92 <_malloc_r+0x30a>
  405e88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405fe4 <_malloc_r+0x35c>
  405e8c:	4b50      	ldr	r3, [pc, #320]	; (405fd0 <_malloc_r+0x348>)
  405e8e:	f8d9 2000 	ldr.w	r2, [r9]
  405e92:	681b      	ldr	r3, [r3, #0]
  405e94:	3201      	adds	r2, #1
  405e96:	4433      	add	r3, r6
  405e98:	eb04 0a08 	add.w	sl, r4, r8
  405e9c:	f000 8155 	beq.w	40614a <_malloc_r+0x4c2>
  405ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405ea4:	330f      	adds	r3, #15
  405ea6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405eaa:	f02b 0b0f 	bic.w	fp, fp, #15
  405eae:	4659      	mov	r1, fp
  405eb0:	4628      	mov	r0, r5
  405eb2:	f000 ffd7 	bl	406e64 <_sbrk_r>
  405eb6:	1c41      	adds	r1, r0, #1
  405eb8:	4602      	mov	r2, r0
  405eba:	f000 80fc 	beq.w	4060b6 <_malloc_r+0x42e>
  405ebe:	4582      	cmp	sl, r0
  405ec0:	f200 80f7 	bhi.w	4060b2 <_malloc_r+0x42a>
  405ec4:	4b43      	ldr	r3, [pc, #268]	; (405fd4 <_malloc_r+0x34c>)
  405ec6:	6819      	ldr	r1, [r3, #0]
  405ec8:	4459      	add	r1, fp
  405eca:	6019      	str	r1, [r3, #0]
  405ecc:	f000 814d 	beq.w	40616a <_malloc_r+0x4e2>
  405ed0:	f8d9 0000 	ldr.w	r0, [r9]
  405ed4:	3001      	adds	r0, #1
  405ed6:	bf1b      	ittet	ne
  405ed8:	eba2 0a0a 	subne.w	sl, r2, sl
  405edc:	4451      	addne	r1, sl
  405ede:	f8c9 2000 	streq.w	r2, [r9]
  405ee2:	6019      	strne	r1, [r3, #0]
  405ee4:	f012 0107 	ands.w	r1, r2, #7
  405ee8:	f000 8115 	beq.w	406116 <_malloc_r+0x48e>
  405eec:	f1c1 0008 	rsb	r0, r1, #8
  405ef0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405ef4:	4402      	add	r2, r0
  405ef6:	3108      	adds	r1, #8
  405ef8:	eb02 090b 	add.w	r9, r2, fp
  405efc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405f00:	eba1 0909 	sub.w	r9, r1, r9
  405f04:	4649      	mov	r1, r9
  405f06:	4628      	mov	r0, r5
  405f08:	9301      	str	r3, [sp, #4]
  405f0a:	9200      	str	r2, [sp, #0]
  405f0c:	f000 ffaa 	bl	406e64 <_sbrk_r>
  405f10:	1c43      	adds	r3, r0, #1
  405f12:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405f16:	f000 8143 	beq.w	4061a0 <_malloc_r+0x518>
  405f1a:	1a80      	subs	r0, r0, r2
  405f1c:	4448      	add	r0, r9
  405f1e:	f040 0001 	orr.w	r0, r0, #1
  405f22:	6819      	ldr	r1, [r3, #0]
  405f24:	60ba      	str	r2, [r7, #8]
  405f26:	4449      	add	r1, r9
  405f28:	42bc      	cmp	r4, r7
  405f2a:	6050      	str	r0, [r2, #4]
  405f2c:	6019      	str	r1, [r3, #0]
  405f2e:	d017      	beq.n	405f60 <_malloc_r+0x2d8>
  405f30:	f1b8 0f0f 	cmp.w	r8, #15
  405f34:	f240 80fb 	bls.w	40612e <_malloc_r+0x4a6>
  405f38:	6860      	ldr	r0, [r4, #4]
  405f3a:	f1a8 020c 	sub.w	r2, r8, #12
  405f3e:	f022 0207 	bic.w	r2, r2, #7
  405f42:	eb04 0e02 	add.w	lr, r4, r2
  405f46:	f000 0001 	and.w	r0, r0, #1
  405f4a:	f04f 0c05 	mov.w	ip, #5
  405f4e:	4310      	orrs	r0, r2
  405f50:	2a0f      	cmp	r2, #15
  405f52:	6060      	str	r0, [r4, #4]
  405f54:	f8ce c004 	str.w	ip, [lr, #4]
  405f58:	f8ce c008 	str.w	ip, [lr, #8]
  405f5c:	f200 8117 	bhi.w	40618e <_malloc_r+0x506>
  405f60:	4b1d      	ldr	r3, [pc, #116]	; (405fd8 <_malloc_r+0x350>)
  405f62:	68bc      	ldr	r4, [r7, #8]
  405f64:	681a      	ldr	r2, [r3, #0]
  405f66:	4291      	cmp	r1, r2
  405f68:	bf88      	it	hi
  405f6a:	6019      	strhi	r1, [r3, #0]
  405f6c:	4b1b      	ldr	r3, [pc, #108]	; (405fdc <_malloc_r+0x354>)
  405f6e:	681a      	ldr	r2, [r3, #0]
  405f70:	4291      	cmp	r1, r2
  405f72:	6862      	ldr	r2, [r4, #4]
  405f74:	bf88      	it	hi
  405f76:	6019      	strhi	r1, [r3, #0]
  405f78:	f022 0203 	bic.w	r2, r2, #3
  405f7c:	4296      	cmp	r6, r2
  405f7e:	eba2 0306 	sub.w	r3, r2, r6
  405f82:	d801      	bhi.n	405f88 <_malloc_r+0x300>
  405f84:	2b0f      	cmp	r3, #15
  405f86:	dc04      	bgt.n	405f92 <_malloc_r+0x30a>
  405f88:	4628      	mov	r0, r5
  405f8a:	f000 fac9 	bl	406520 <__malloc_unlock>
  405f8e:	2400      	movs	r4, #0
  405f90:	e740      	b.n	405e14 <_malloc_r+0x18c>
  405f92:	19a2      	adds	r2, r4, r6
  405f94:	f043 0301 	orr.w	r3, r3, #1
  405f98:	f046 0601 	orr.w	r6, r6, #1
  405f9c:	6066      	str	r6, [r4, #4]
  405f9e:	4628      	mov	r0, r5
  405fa0:	60ba      	str	r2, [r7, #8]
  405fa2:	6053      	str	r3, [r2, #4]
  405fa4:	f000 fabc 	bl	406520 <__malloc_unlock>
  405fa8:	3408      	adds	r4, #8
  405faa:	4620      	mov	r0, r4
  405fac:	b003      	add	sp, #12
  405fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fb2:	2b14      	cmp	r3, #20
  405fb4:	d971      	bls.n	40609a <_malloc_r+0x412>
  405fb6:	2b54      	cmp	r3, #84	; 0x54
  405fb8:	f200 80a3 	bhi.w	406102 <_malloc_r+0x47a>
  405fbc:	0b33      	lsrs	r3, r6, #12
  405fbe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405fc2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405fc6:	00c3      	lsls	r3, r0, #3
  405fc8:	e680      	b.n	405ccc <_malloc_r+0x44>
  405fca:	bf00      	nop
  405fcc:	200005ac 	.word	0x200005ac
  405fd0:	200089a4 	.word	0x200089a4
  405fd4:	20008974 	.word	0x20008974
  405fd8:	2000899c 	.word	0x2000899c
  405fdc:	200089a0 	.word	0x200089a0
  405fe0:	200005b4 	.word	0x200005b4
  405fe4:	200009b4 	.word	0x200009b4
  405fe8:	0a5a      	lsrs	r2, r3, #9
  405fea:	2a04      	cmp	r2, #4
  405fec:	d95b      	bls.n	4060a6 <_malloc_r+0x41e>
  405fee:	2a14      	cmp	r2, #20
  405ff0:	f200 80ae 	bhi.w	406150 <_malloc_r+0x4c8>
  405ff4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405ff8:	00c9      	lsls	r1, r1, #3
  405ffa:	325b      	adds	r2, #91	; 0x5b
  405ffc:	eb07 0c01 	add.w	ip, r7, r1
  406000:	5879      	ldr	r1, [r7, r1]
  406002:	f1ac 0c08 	sub.w	ip, ip, #8
  406006:	458c      	cmp	ip, r1
  406008:	f000 8088 	beq.w	40611c <_malloc_r+0x494>
  40600c:	684a      	ldr	r2, [r1, #4]
  40600e:	f022 0203 	bic.w	r2, r2, #3
  406012:	4293      	cmp	r3, r2
  406014:	d273      	bcs.n	4060fe <_malloc_r+0x476>
  406016:	6889      	ldr	r1, [r1, #8]
  406018:	458c      	cmp	ip, r1
  40601a:	d1f7      	bne.n	40600c <_malloc_r+0x384>
  40601c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406020:	687b      	ldr	r3, [r7, #4]
  406022:	60e2      	str	r2, [r4, #12]
  406024:	f8c4 c008 	str.w	ip, [r4, #8]
  406028:	6094      	str	r4, [r2, #8]
  40602a:	f8cc 400c 	str.w	r4, [ip, #12]
  40602e:	e68f      	b.n	405d50 <_malloc_r+0xc8>
  406030:	19a1      	adds	r1, r4, r6
  406032:	f046 0c01 	orr.w	ip, r6, #1
  406036:	f042 0601 	orr.w	r6, r2, #1
  40603a:	f8c4 c004 	str.w	ip, [r4, #4]
  40603e:	4628      	mov	r0, r5
  406040:	6179      	str	r1, [r7, #20]
  406042:	6139      	str	r1, [r7, #16]
  406044:	f8c1 e00c 	str.w	lr, [r1, #12]
  406048:	f8c1 e008 	str.w	lr, [r1, #8]
  40604c:	604e      	str	r6, [r1, #4]
  40604e:	50e2      	str	r2, [r4, r3]
  406050:	f000 fa66 	bl	406520 <__malloc_unlock>
  406054:	3408      	adds	r4, #8
  406056:	e6dd      	b.n	405e14 <_malloc_r+0x18c>
  406058:	687b      	ldr	r3, [r7, #4]
  40605a:	e679      	b.n	405d50 <_malloc_r+0xc8>
  40605c:	f108 0801 	add.w	r8, r8, #1
  406060:	f018 0f03 	tst.w	r8, #3
  406064:	f10c 0c08 	add.w	ip, ip, #8
  406068:	f47f ae85 	bne.w	405d76 <_malloc_r+0xee>
  40606c:	e02d      	b.n	4060ca <_malloc_r+0x442>
  40606e:	68dc      	ldr	r4, [r3, #12]
  406070:	42a3      	cmp	r3, r4
  406072:	bf08      	it	eq
  406074:	3002      	addeq	r0, #2
  406076:	f43f ae3e 	beq.w	405cf6 <_malloc_r+0x6e>
  40607a:	e6bb      	b.n	405df4 <_malloc_r+0x16c>
  40607c:	4419      	add	r1, r3
  40607e:	461c      	mov	r4, r3
  406080:	684a      	ldr	r2, [r1, #4]
  406082:	68db      	ldr	r3, [r3, #12]
  406084:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406088:	f042 0201 	orr.w	r2, r2, #1
  40608c:	604a      	str	r2, [r1, #4]
  40608e:	4628      	mov	r0, r5
  406090:	60f3      	str	r3, [r6, #12]
  406092:	609e      	str	r6, [r3, #8]
  406094:	f000 fa44 	bl	406520 <__malloc_unlock>
  406098:	e6bc      	b.n	405e14 <_malloc_r+0x18c>
  40609a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40609e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4060a2:	00c3      	lsls	r3, r0, #3
  4060a4:	e612      	b.n	405ccc <_malloc_r+0x44>
  4060a6:	099a      	lsrs	r2, r3, #6
  4060a8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4060ac:	00c9      	lsls	r1, r1, #3
  4060ae:	3238      	adds	r2, #56	; 0x38
  4060b0:	e7a4      	b.n	405ffc <_malloc_r+0x374>
  4060b2:	42bc      	cmp	r4, r7
  4060b4:	d054      	beq.n	406160 <_malloc_r+0x4d8>
  4060b6:	68bc      	ldr	r4, [r7, #8]
  4060b8:	6862      	ldr	r2, [r4, #4]
  4060ba:	f022 0203 	bic.w	r2, r2, #3
  4060be:	e75d      	b.n	405f7c <_malloc_r+0x2f4>
  4060c0:	f859 3908 	ldr.w	r3, [r9], #-8
  4060c4:	4599      	cmp	r9, r3
  4060c6:	f040 8086 	bne.w	4061d6 <_malloc_r+0x54e>
  4060ca:	f010 0f03 	tst.w	r0, #3
  4060ce:	f100 30ff 	add.w	r0, r0, #4294967295
  4060d2:	d1f5      	bne.n	4060c0 <_malloc_r+0x438>
  4060d4:	687b      	ldr	r3, [r7, #4]
  4060d6:	ea23 0304 	bic.w	r3, r3, r4
  4060da:	607b      	str	r3, [r7, #4]
  4060dc:	0064      	lsls	r4, r4, #1
  4060de:	429c      	cmp	r4, r3
  4060e0:	f63f aec7 	bhi.w	405e72 <_malloc_r+0x1ea>
  4060e4:	2c00      	cmp	r4, #0
  4060e6:	f43f aec4 	beq.w	405e72 <_malloc_r+0x1ea>
  4060ea:	421c      	tst	r4, r3
  4060ec:	4640      	mov	r0, r8
  4060ee:	f47f ae3e 	bne.w	405d6e <_malloc_r+0xe6>
  4060f2:	0064      	lsls	r4, r4, #1
  4060f4:	421c      	tst	r4, r3
  4060f6:	f100 0004 	add.w	r0, r0, #4
  4060fa:	d0fa      	beq.n	4060f2 <_malloc_r+0x46a>
  4060fc:	e637      	b.n	405d6e <_malloc_r+0xe6>
  4060fe:	468c      	mov	ip, r1
  406100:	e78c      	b.n	40601c <_malloc_r+0x394>
  406102:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406106:	d815      	bhi.n	406134 <_malloc_r+0x4ac>
  406108:	0bf3      	lsrs	r3, r6, #15
  40610a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40610e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406112:	00c3      	lsls	r3, r0, #3
  406114:	e5da      	b.n	405ccc <_malloc_r+0x44>
  406116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40611a:	e6ed      	b.n	405ef8 <_malloc_r+0x270>
  40611c:	687b      	ldr	r3, [r7, #4]
  40611e:	1092      	asrs	r2, r2, #2
  406120:	2101      	movs	r1, #1
  406122:	fa01 f202 	lsl.w	r2, r1, r2
  406126:	4313      	orrs	r3, r2
  406128:	607b      	str	r3, [r7, #4]
  40612a:	4662      	mov	r2, ip
  40612c:	e779      	b.n	406022 <_malloc_r+0x39a>
  40612e:	2301      	movs	r3, #1
  406130:	6053      	str	r3, [r2, #4]
  406132:	e729      	b.n	405f88 <_malloc_r+0x300>
  406134:	f240 5254 	movw	r2, #1364	; 0x554
  406138:	4293      	cmp	r3, r2
  40613a:	d822      	bhi.n	406182 <_malloc_r+0x4fa>
  40613c:	0cb3      	lsrs	r3, r6, #18
  40613e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406142:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406146:	00c3      	lsls	r3, r0, #3
  406148:	e5c0      	b.n	405ccc <_malloc_r+0x44>
  40614a:	f103 0b10 	add.w	fp, r3, #16
  40614e:	e6ae      	b.n	405eae <_malloc_r+0x226>
  406150:	2a54      	cmp	r2, #84	; 0x54
  406152:	d829      	bhi.n	4061a8 <_malloc_r+0x520>
  406154:	0b1a      	lsrs	r2, r3, #12
  406156:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40615a:	00c9      	lsls	r1, r1, #3
  40615c:	326e      	adds	r2, #110	; 0x6e
  40615e:	e74d      	b.n	405ffc <_malloc_r+0x374>
  406160:	4b20      	ldr	r3, [pc, #128]	; (4061e4 <_malloc_r+0x55c>)
  406162:	6819      	ldr	r1, [r3, #0]
  406164:	4459      	add	r1, fp
  406166:	6019      	str	r1, [r3, #0]
  406168:	e6b2      	b.n	405ed0 <_malloc_r+0x248>
  40616a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40616e:	2800      	cmp	r0, #0
  406170:	f47f aeae 	bne.w	405ed0 <_malloc_r+0x248>
  406174:	eb08 030b 	add.w	r3, r8, fp
  406178:	68ba      	ldr	r2, [r7, #8]
  40617a:	f043 0301 	orr.w	r3, r3, #1
  40617e:	6053      	str	r3, [r2, #4]
  406180:	e6ee      	b.n	405f60 <_malloc_r+0x2d8>
  406182:	207f      	movs	r0, #127	; 0x7f
  406184:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406188:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40618c:	e59e      	b.n	405ccc <_malloc_r+0x44>
  40618e:	f104 0108 	add.w	r1, r4, #8
  406192:	4628      	mov	r0, r5
  406194:	9300      	str	r3, [sp, #0]
  406196:	f7ff fc83 	bl	405aa0 <_free_r>
  40619a:	9b00      	ldr	r3, [sp, #0]
  40619c:	6819      	ldr	r1, [r3, #0]
  40619e:	e6df      	b.n	405f60 <_malloc_r+0x2d8>
  4061a0:	2001      	movs	r0, #1
  4061a2:	f04f 0900 	mov.w	r9, #0
  4061a6:	e6bc      	b.n	405f22 <_malloc_r+0x29a>
  4061a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4061ac:	d805      	bhi.n	4061ba <_malloc_r+0x532>
  4061ae:	0bda      	lsrs	r2, r3, #15
  4061b0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4061b4:	00c9      	lsls	r1, r1, #3
  4061b6:	3277      	adds	r2, #119	; 0x77
  4061b8:	e720      	b.n	405ffc <_malloc_r+0x374>
  4061ba:	f240 5154 	movw	r1, #1364	; 0x554
  4061be:	428a      	cmp	r2, r1
  4061c0:	d805      	bhi.n	4061ce <_malloc_r+0x546>
  4061c2:	0c9a      	lsrs	r2, r3, #18
  4061c4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4061c8:	00c9      	lsls	r1, r1, #3
  4061ca:	327c      	adds	r2, #124	; 0x7c
  4061cc:	e716      	b.n	405ffc <_malloc_r+0x374>
  4061ce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4061d2:	227e      	movs	r2, #126	; 0x7e
  4061d4:	e712      	b.n	405ffc <_malloc_r+0x374>
  4061d6:	687b      	ldr	r3, [r7, #4]
  4061d8:	e780      	b.n	4060dc <_malloc_r+0x454>
  4061da:	08f0      	lsrs	r0, r6, #3
  4061dc:	f106 0308 	add.w	r3, r6, #8
  4061e0:	e600      	b.n	405de4 <_malloc_r+0x15c>
  4061e2:	bf00      	nop
  4061e4:	20008974 	.word	0x20008974

004061e8 <__ascii_mbtowc>:
  4061e8:	b082      	sub	sp, #8
  4061ea:	b149      	cbz	r1, 406200 <__ascii_mbtowc+0x18>
  4061ec:	b15a      	cbz	r2, 406206 <__ascii_mbtowc+0x1e>
  4061ee:	b16b      	cbz	r3, 40620c <__ascii_mbtowc+0x24>
  4061f0:	7813      	ldrb	r3, [r2, #0]
  4061f2:	600b      	str	r3, [r1, #0]
  4061f4:	7812      	ldrb	r2, [r2, #0]
  4061f6:	1c10      	adds	r0, r2, #0
  4061f8:	bf18      	it	ne
  4061fa:	2001      	movne	r0, #1
  4061fc:	b002      	add	sp, #8
  4061fe:	4770      	bx	lr
  406200:	a901      	add	r1, sp, #4
  406202:	2a00      	cmp	r2, #0
  406204:	d1f3      	bne.n	4061ee <__ascii_mbtowc+0x6>
  406206:	4610      	mov	r0, r2
  406208:	b002      	add	sp, #8
  40620a:	4770      	bx	lr
  40620c:	f06f 0001 	mvn.w	r0, #1
  406210:	e7f4      	b.n	4061fc <__ascii_mbtowc+0x14>
  406212:	bf00      	nop
	...

00406220 <memchr>:
  406220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406224:	2a10      	cmp	r2, #16
  406226:	db2b      	blt.n	406280 <memchr+0x60>
  406228:	f010 0f07 	tst.w	r0, #7
  40622c:	d008      	beq.n	406240 <memchr+0x20>
  40622e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406232:	3a01      	subs	r2, #1
  406234:	428b      	cmp	r3, r1
  406236:	d02d      	beq.n	406294 <memchr+0x74>
  406238:	f010 0f07 	tst.w	r0, #7
  40623c:	b342      	cbz	r2, 406290 <memchr+0x70>
  40623e:	d1f6      	bne.n	40622e <memchr+0xe>
  406240:	b4f0      	push	{r4, r5, r6, r7}
  406242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40624a:	f022 0407 	bic.w	r4, r2, #7
  40624e:	f07f 0700 	mvns.w	r7, #0
  406252:	2300      	movs	r3, #0
  406254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406258:	3c08      	subs	r4, #8
  40625a:	ea85 0501 	eor.w	r5, r5, r1
  40625e:	ea86 0601 	eor.w	r6, r6, r1
  406262:	fa85 f547 	uadd8	r5, r5, r7
  406266:	faa3 f587 	sel	r5, r3, r7
  40626a:	fa86 f647 	uadd8	r6, r6, r7
  40626e:	faa5 f687 	sel	r6, r5, r7
  406272:	b98e      	cbnz	r6, 406298 <memchr+0x78>
  406274:	d1ee      	bne.n	406254 <memchr+0x34>
  406276:	bcf0      	pop	{r4, r5, r6, r7}
  406278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40627c:	f002 0207 	and.w	r2, r2, #7
  406280:	b132      	cbz	r2, 406290 <memchr+0x70>
  406282:	f810 3b01 	ldrb.w	r3, [r0], #1
  406286:	3a01      	subs	r2, #1
  406288:	ea83 0301 	eor.w	r3, r3, r1
  40628c:	b113      	cbz	r3, 406294 <memchr+0x74>
  40628e:	d1f8      	bne.n	406282 <memchr+0x62>
  406290:	2000      	movs	r0, #0
  406292:	4770      	bx	lr
  406294:	3801      	subs	r0, #1
  406296:	4770      	bx	lr
  406298:	2d00      	cmp	r5, #0
  40629a:	bf06      	itte	eq
  40629c:	4635      	moveq	r5, r6
  40629e:	3803      	subeq	r0, #3
  4062a0:	3807      	subne	r0, #7
  4062a2:	f015 0f01 	tst.w	r5, #1
  4062a6:	d107      	bne.n	4062b8 <memchr+0x98>
  4062a8:	3001      	adds	r0, #1
  4062aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4062ae:	bf02      	ittt	eq
  4062b0:	3001      	addeq	r0, #1
  4062b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4062b6:	3001      	addeq	r0, #1
  4062b8:	bcf0      	pop	{r4, r5, r6, r7}
  4062ba:	3801      	subs	r0, #1
  4062bc:	4770      	bx	lr
  4062be:	bf00      	nop

004062c0 <memcmp>:
  4062c0:	2a03      	cmp	r2, #3
  4062c2:	b470      	push	{r4, r5, r6}
  4062c4:	d922      	bls.n	40630c <memcmp+0x4c>
  4062c6:	ea40 0301 	orr.w	r3, r0, r1
  4062ca:	079b      	lsls	r3, r3, #30
  4062cc:	d011      	beq.n	4062f2 <memcmp+0x32>
  4062ce:	7803      	ldrb	r3, [r0, #0]
  4062d0:	780c      	ldrb	r4, [r1, #0]
  4062d2:	42a3      	cmp	r3, r4
  4062d4:	d11d      	bne.n	406312 <memcmp+0x52>
  4062d6:	440a      	add	r2, r1
  4062d8:	3101      	adds	r1, #1
  4062da:	e005      	b.n	4062e8 <memcmp+0x28>
  4062dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4062e0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4062e4:	42a3      	cmp	r3, r4
  4062e6:	d114      	bne.n	406312 <memcmp+0x52>
  4062e8:	4291      	cmp	r1, r2
  4062ea:	d1f7      	bne.n	4062dc <memcmp+0x1c>
  4062ec:	2000      	movs	r0, #0
  4062ee:	bc70      	pop	{r4, r5, r6}
  4062f0:	4770      	bx	lr
  4062f2:	680d      	ldr	r5, [r1, #0]
  4062f4:	6806      	ldr	r6, [r0, #0]
  4062f6:	42ae      	cmp	r6, r5
  4062f8:	460c      	mov	r4, r1
  4062fa:	4603      	mov	r3, r0
  4062fc:	f101 0104 	add.w	r1, r1, #4
  406300:	f100 0004 	add.w	r0, r0, #4
  406304:	d108      	bne.n	406318 <memcmp+0x58>
  406306:	3a04      	subs	r2, #4
  406308:	2a03      	cmp	r2, #3
  40630a:	d8f2      	bhi.n	4062f2 <memcmp+0x32>
  40630c:	2a00      	cmp	r2, #0
  40630e:	d1de      	bne.n	4062ce <memcmp+0xe>
  406310:	e7ec      	b.n	4062ec <memcmp+0x2c>
  406312:	1b18      	subs	r0, r3, r4
  406314:	bc70      	pop	{r4, r5, r6}
  406316:	4770      	bx	lr
  406318:	4621      	mov	r1, r4
  40631a:	4618      	mov	r0, r3
  40631c:	e7d7      	b.n	4062ce <memcmp+0xe>
  40631e:	bf00      	nop

00406320 <memcpy>:
  406320:	4684      	mov	ip, r0
  406322:	ea41 0300 	orr.w	r3, r1, r0
  406326:	f013 0303 	ands.w	r3, r3, #3
  40632a:	d16d      	bne.n	406408 <memcpy+0xe8>
  40632c:	3a40      	subs	r2, #64	; 0x40
  40632e:	d341      	bcc.n	4063b4 <memcpy+0x94>
  406330:	f851 3b04 	ldr.w	r3, [r1], #4
  406334:	f840 3b04 	str.w	r3, [r0], #4
  406338:	f851 3b04 	ldr.w	r3, [r1], #4
  40633c:	f840 3b04 	str.w	r3, [r0], #4
  406340:	f851 3b04 	ldr.w	r3, [r1], #4
  406344:	f840 3b04 	str.w	r3, [r0], #4
  406348:	f851 3b04 	ldr.w	r3, [r1], #4
  40634c:	f840 3b04 	str.w	r3, [r0], #4
  406350:	f851 3b04 	ldr.w	r3, [r1], #4
  406354:	f840 3b04 	str.w	r3, [r0], #4
  406358:	f851 3b04 	ldr.w	r3, [r1], #4
  40635c:	f840 3b04 	str.w	r3, [r0], #4
  406360:	f851 3b04 	ldr.w	r3, [r1], #4
  406364:	f840 3b04 	str.w	r3, [r0], #4
  406368:	f851 3b04 	ldr.w	r3, [r1], #4
  40636c:	f840 3b04 	str.w	r3, [r0], #4
  406370:	f851 3b04 	ldr.w	r3, [r1], #4
  406374:	f840 3b04 	str.w	r3, [r0], #4
  406378:	f851 3b04 	ldr.w	r3, [r1], #4
  40637c:	f840 3b04 	str.w	r3, [r0], #4
  406380:	f851 3b04 	ldr.w	r3, [r1], #4
  406384:	f840 3b04 	str.w	r3, [r0], #4
  406388:	f851 3b04 	ldr.w	r3, [r1], #4
  40638c:	f840 3b04 	str.w	r3, [r0], #4
  406390:	f851 3b04 	ldr.w	r3, [r1], #4
  406394:	f840 3b04 	str.w	r3, [r0], #4
  406398:	f851 3b04 	ldr.w	r3, [r1], #4
  40639c:	f840 3b04 	str.w	r3, [r0], #4
  4063a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063a4:	f840 3b04 	str.w	r3, [r0], #4
  4063a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063ac:	f840 3b04 	str.w	r3, [r0], #4
  4063b0:	3a40      	subs	r2, #64	; 0x40
  4063b2:	d2bd      	bcs.n	406330 <memcpy+0x10>
  4063b4:	3230      	adds	r2, #48	; 0x30
  4063b6:	d311      	bcc.n	4063dc <memcpy+0xbc>
  4063b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063bc:	f840 3b04 	str.w	r3, [r0], #4
  4063c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063c4:	f840 3b04 	str.w	r3, [r0], #4
  4063c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063cc:	f840 3b04 	str.w	r3, [r0], #4
  4063d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d4:	f840 3b04 	str.w	r3, [r0], #4
  4063d8:	3a10      	subs	r2, #16
  4063da:	d2ed      	bcs.n	4063b8 <memcpy+0x98>
  4063dc:	320c      	adds	r2, #12
  4063de:	d305      	bcc.n	4063ec <memcpy+0xcc>
  4063e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e4:	f840 3b04 	str.w	r3, [r0], #4
  4063e8:	3a04      	subs	r2, #4
  4063ea:	d2f9      	bcs.n	4063e0 <memcpy+0xc0>
  4063ec:	3204      	adds	r2, #4
  4063ee:	d008      	beq.n	406402 <memcpy+0xe2>
  4063f0:	07d2      	lsls	r2, r2, #31
  4063f2:	bf1c      	itt	ne
  4063f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4063f8:	f800 3b01 	strbne.w	r3, [r0], #1
  4063fc:	d301      	bcc.n	406402 <memcpy+0xe2>
  4063fe:	880b      	ldrh	r3, [r1, #0]
  406400:	8003      	strh	r3, [r0, #0]
  406402:	4660      	mov	r0, ip
  406404:	4770      	bx	lr
  406406:	bf00      	nop
  406408:	2a08      	cmp	r2, #8
  40640a:	d313      	bcc.n	406434 <memcpy+0x114>
  40640c:	078b      	lsls	r3, r1, #30
  40640e:	d08d      	beq.n	40632c <memcpy+0xc>
  406410:	f010 0303 	ands.w	r3, r0, #3
  406414:	d08a      	beq.n	40632c <memcpy+0xc>
  406416:	f1c3 0304 	rsb	r3, r3, #4
  40641a:	1ad2      	subs	r2, r2, r3
  40641c:	07db      	lsls	r3, r3, #31
  40641e:	bf1c      	itt	ne
  406420:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406424:	f800 3b01 	strbne.w	r3, [r0], #1
  406428:	d380      	bcc.n	40632c <memcpy+0xc>
  40642a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40642e:	f820 3b02 	strh.w	r3, [r0], #2
  406432:	e77b      	b.n	40632c <memcpy+0xc>
  406434:	3a04      	subs	r2, #4
  406436:	d3d9      	bcc.n	4063ec <memcpy+0xcc>
  406438:	3a01      	subs	r2, #1
  40643a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40643e:	f800 3b01 	strb.w	r3, [r0], #1
  406442:	d2f9      	bcs.n	406438 <memcpy+0x118>
  406444:	780b      	ldrb	r3, [r1, #0]
  406446:	7003      	strb	r3, [r0, #0]
  406448:	784b      	ldrb	r3, [r1, #1]
  40644a:	7043      	strb	r3, [r0, #1]
  40644c:	788b      	ldrb	r3, [r1, #2]
  40644e:	7083      	strb	r3, [r0, #2]
  406450:	4660      	mov	r0, ip
  406452:	4770      	bx	lr

00406454 <memmove>:
  406454:	4288      	cmp	r0, r1
  406456:	b5f0      	push	{r4, r5, r6, r7, lr}
  406458:	d90d      	bls.n	406476 <memmove+0x22>
  40645a:	188b      	adds	r3, r1, r2
  40645c:	4298      	cmp	r0, r3
  40645e:	d20a      	bcs.n	406476 <memmove+0x22>
  406460:	1884      	adds	r4, r0, r2
  406462:	2a00      	cmp	r2, #0
  406464:	d051      	beq.n	40650a <memmove+0xb6>
  406466:	4622      	mov	r2, r4
  406468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40646c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406470:	4299      	cmp	r1, r3
  406472:	d1f9      	bne.n	406468 <memmove+0x14>
  406474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406476:	2a0f      	cmp	r2, #15
  406478:	d948      	bls.n	40650c <memmove+0xb8>
  40647a:	ea41 0300 	orr.w	r3, r1, r0
  40647e:	079b      	lsls	r3, r3, #30
  406480:	d146      	bne.n	406510 <memmove+0xbc>
  406482:	f100 0410 	add.w	r4, r0, #16
  406486:	f101 0310 	add.w	r3, r1, #16
  40648a:	4615      	mov	r5, r2
  40648c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406490:	f844 6c10 	str.w	r6, [r4, #-16]
  406494:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406498:	f844 6c0c 	str.w	r6, [r4, #-12]
  40649c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4064a0:	f844 6c08 	str.w	r6, [r4, #-8]
  4064a4:	3d10      	subs	r5, #16
  4064a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4064aa:	f844 6c04 	str.w	r6, [r4, #-4]
  4064ae:	2d0f      	cmp	r5, #15
  4064b0:	f103 0310 	add.w	r3, r3, #16
  4064b4:	f104 0410 	add.w	r4, r4, #16
  4064b8:	d8e8      	bhi.n	40648c <memmove+0x38>
  4064ba:	f1a2 0310 	sub.w	r3, r2, #16
  4064be:	f023 030f 	bic.w	r3, r3, #15
  4064c2:	f002 0e0f 	and.w	lr, r2, #15
  4064c6:	3310      	adds	r3, #16
  4064c8:	f1be 0f03 	cmp.w	lr, #3
  4064cc:	4419      	add	r1, r3
  4064ce:	4403      	add	r3, r0
  4064d0:	d921      	bls.n	406516 <memmove+0xc2>
  4064d2:	1f1e      	subs	r6, r3, #4
  4064d4:	460d      	mov	r5, r1
  4064d6:	4674      	mov	r4, lr
  4064d8:	3c04      	subs	r4, #4
  4064da:	f855 7b04 	ldr.w	r7, [r5], #4
  4064de:	f846 7f04 	str.w	r7, [r6, #4]!
  4064e2:	2c03      	cmp	r4, #3
  4064e4:	d8f8      	bhi.n	4064d8 <memmove+0x84>
  4064e6:	f1ae 0404 	sub.w	r4, lr, #4
  4064ea:	f024 0403 	bic.w	r4, r4, #3
  4064ee:	3404      	adds	r4, #4
  4064f0:	4421      	add	r1, r4
  4064f2:	4423      	add	r3, r4
  4064f4:	f002 0203 	and.w	r2, r2, #3
  4064f8:	b162      	cbz	r2, 406514 <memmove+0xc0>
  4064fa:	3b01      	subs	r3, #1
  4064fc:	440a      	add	r2, r1
  4064fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  406502:	f803 4f01 	strb.w	r4, [r3, #1]!
  406506:	428a      	cmp	r2, r1
  406508:	d1f9      	bne.n	4064fe <memmove+0xaa>
  40650a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40650c:	4603      	mov	r3, r0
  40650e:	e7f3      	b.n	4064f8 <memmove+0xa4>
  406510:	4603      	mov	r3, r0
  406512:	e7f2      	b.n	4064fa <memmove+0xa6>
  406514:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406516:	4672      	mov	r2, lr
  406518:	e7ee      	b.n	4064f8 <memmove+0xa4>
  40651a:	bf00      	nop

0040651c <__malloc_lock>:
  40651c:	4770      	bx	lr
  40651e:	bf00      	nop

00406520 <__malloc_unlock>:
  406520:	4770      	bx	lr
  406522:	bf00      	nop

00406524 <_Balloc>:
  406524:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406526:	b570      	push	{r4, r5, r6, lr}
  406528:	4605      	mov	r5, r0
  40652a:	460c      	mov	r4, r1
  40652c:	b14b      	cbz	r3, 406542 <_Balloc+0x1e>
  40652e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406532:	b180      	cbz	r0, 406556 <_Balloc+0x32>
  406534:	6802      	ldr	r2, [r0, #0]
  406536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40653a:	2300      	movs	r3, #0
  40653c:	6103      	str	r3, [r0, #16]
  40653e:	60c3      	str	r3, [r0, #12]
  406540:	bd70      	pop	{r4, r5, r6, pc}
  406542:	2221      	movs	r2, #33	; 0x21
  406544:	2104      	movs	r1, #4
  406546:	f000 fdf1 	bl	40712c <_calloc_r>
  40654a:	64e8      	str	r0, [r5, #76]	; 0x4c
  40654c:	4603      	mov	r3, r0
  40654e:	2800      	cmp	r0, #0
  406550:	d1ed      	bne.n	40652e <_Balloc+0xa>
  406552:	2000      	movs	r0, #0
  406554:	bd70      	pop	{r4, r5, r6, pc}
  406556:	2101      	movs	r1, #1
  406558:	fa01 f604 	lsl.w	r6, r1, r4
  40655c:	1d72      	adds	r2, r6, #5
  40655e:	4628      	mov	r0, r5
  406560:	0092      	lsls	r2, r2, #2
  406562:	f000 fde3 	bl	40712c <_calloc_r>
  406566:	2800      	cmp	r0, #0
  406568:	d0f3      	beq.n	406552 <_Balloc+0x2e>
  40656a:	6044      	str	r4, [r0, #4]
  40656c:	6086      	str	r6, [r0, #8]
  40656e:	e7e4      	b.n	40653a <_Balloc+0x16>

00406570 <_Bfree>:
  406570:	b131      	cbz	r1, 406580 <_Bfree+0x10>
  406572:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406574:	684a      	ldr	r2, [r1, #4]
  406576:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40657a:	6008      	str	r0, [r1, #0]
  40657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406580:	4770      	bx	lr
  406582:	bf00      	nop

00406584 <__multadd>:
  406584:	b5f0      	push	{r4, r5, r6, r7, lr}
  406586:	690c      	ldr	r4, [r1, #16]
  406588:	b083      	sub	sp, #12
  40658a:	460d      	mov	r5, r1
  40658c:	4606      	mov	r6, r0
  40658e:	f101 0e14 	add.w	lr, r1, #20
  406592:	2700      	movs	r7, #0
  406594:	f8de 0000 	ldr.w	r0, [lr]
  406598:	b281      	uxth	r1, r0
  40659a:	fb02 3301 	mla	r3, r2, r1, r3
  40659e:	0c01      	lsrs	r1, r0, #16
  4065a0:	0c18      	lsrs	r0, r3, #16
  4065a2:	fb02 0101 	mla	r1, r2, r1, r0
  4065a6:	b29b      	uxth	r3, r3
  4065a8:	3701      	adds	r7, #1
  4065aa:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4065ae:	42bc      	cmp	r4, r7
  4065b0:	f84e 3b04 	str.w	r3, [lr], #4
  4065b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4065b8:	dcec      	bgt.n	406594 <__multadd+0x10>
  4065ba:	b13b      	cbz	r3, 4065cc <__multadd+0x48>
  4065bc:	68aa      	ldr	r2, [r5, #8]
  4065be:	4294      	cmp	r4, r2
  4065c0:	da07      	bge.n	4065d2 <__multadd+0x4e>
  4065c2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4065c6:	3401      	adds	r4, #1
  4065c8:	6153      	str	r3, [r2, #20]
  4065ca:	612c      	str	r4, [r5, #16]
  4065cc:	4628      	mov	r0, r5
  4065ce:	b003      	add	sp, #12
  4065d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065d2:	6869      	ldr	r1, [r5, #4]
  4065d4:	9301      	str	r3, [sp, #4]
  4065d6:	3101      	adds	r1, #1
  4065d8:	4630      	mov	r0, r6
  4065da:	f7ff ffa3 	bl	406524 <_Balloc>
  4065de:	692a      	ldr	r2, [r5, #16]
  4065e0:	3202      	adds	r2, #2
  4065e2:	f105 010c 	add.w	r1, r5, #12
  4065e6:	4607      	mov	r7, r0
  4065e8:	0092      	lsls	r2, r2, #2
  4065ea:	300c      	adds	r0, #12
  4065ec:	f7ff fe98 	bl	406320 <memcpy>
  4065f0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4065f2:	6869      	ldr	r1, [r5, #4]
  4065f4:	9b01      	ldr	r3, [sp, #4]
  4065f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4065fa:	6028      	str	r0, [r5, #0]
  4065fc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406600:	463d      	mov	r5, r7
  406602:	e7de      	b.n	4065c2 <__multadd+0x3e>

00406604 <__hi0bits>:
  406604:	0c02      	lsrs	r2, r0, #16
  406606:	0412      	lsls	r2, r2, #16
  406608:	4603      	mov	r3, r0
  40660a:	b9b2      	cbnz	r2, 40663a <__hi0bits+0x36>
  40660c:	0403      	lsls	r3, r0, #16
  40660e:	2010      	movs	r0, #16
  406610:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406614:	bf04      	itt	eq
  406616:	021b      	lsleq	r3, r3, #8
  406618:	3008      	addeq	r0, #8
  40661a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40661e:	bf04      	itt	eq
  406620:	011b      	lsleq	r3, r3, #4
  406622:	3004      	addeq	r0, #4
  406624:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406628:	bf04      	itt	eq
  40662a:	009b      	lsleq	r3, r3, #2
  40662c:	3002      	addeq	r0, #2
  40662e:	2b00      	cmp	r3, #0
  406630:	db02      	blt.n	406638 <__hi0bits+0x34>
  406632:	005b      	lsls	r3, r3, #1
  406634:	d403      	bmi.n	40663e <__hi0bits+0x3a>
  406636:	2020      	movs	r0, #32
  406638:	4770      	bx	lr
  40663a:	2000      	movs	r0, #0
  40663c:	e7e8      	b.n	406610 <__hi0bits+0xc>
  40663e:	3001      	adds	r0, #1
  406640:	4770      	bx	lr
  406642:	bf00      	nop

00406644 <__lo0bits>:
  406644:	6803      	ldr	r3, [r0, #0]
  406646:	f013 0207 	ands.w	r2, r3, #7
  40664a:	4601      	mov	r1, r0
  40664c:	d007      	beq.n	40665e <__lo0bits+0x1a>
  40664e:	07da      	lsls	r2, r3, #31
  406650:	d421      	bmi.n	406696 <__lo0bits+0x52>
  406652:	0798      	lsls	r0, r3, #30
  406654:	d421      	bmi.n	40669a <__lo0bits+0x56>
  406656:	089b      	lsrs	r3, r3, #2
  406658:	600b      	str	r3, [r1, #0]
  40665a:	2002      	movs	r0, #2
  40665c:	4770      	bx	lr
  40665e:	b298      	uxth	r0, r3
  406660:	b198      	cbz	r0, 40668a <__lo0bits+0x46>
  406662:	4610      	mov	r0, r2
  406664:	f013 0fff 	tst.w	r3, #255	; 0xff
  406668:	bf04      	itt	eq
  40666a:	0a1b      	lsreq	r3, r3, #8
  40666c:	3008      	addeq	r0, #8
  40666e:	071a      	lsls	r2, r3, #28
  406670:	bf04      	itt	eq
  406672:	091b      	lsreq	r3, r3, #4
  406674:	3004      	addeq	r0, #4
  406676:	079a      	lsls	r2, r3, #30
  406678:	bf04      	itt	eq
  40667a:	089b      	lsreq	r3, r3, #2
  40667c:	3002      	addeq	r0, #2
  40667e:	07da      	lsls	r2, r3, #31
  406680:	d407      	bmi.n	406692 <__lo0bits+0x4e>
  406682:	085b      	lsrs	r3, r3, #1
  406684:	d104      	bne.n	406690 <__lo0bits+0x4c>
  406686:	2020      	movs	r0, #32
  406688:	4770      	bx	lr
  40668a:	0c1b      	lsrs	r3, r3, #16
  40668c:	2010      	movs	r0, #16
  40668e:	e7e9      	b.n	406664 <__lo0bits+0x20>
  406690:	3001      	adds	r0, #1
  406692:	600b      	str	r3, [r1, #0]
  406694:	4770      	bx	lr
  406696:	2000      	movs	r0, #0
  406698:	4770      	bx	lr
  40669a:	085b      	lsrs	r3, r3, #1
  40669c:	600b      	str	r3, [r1, #0]
  40669e:	2001      	movs	r0, #1
  4066a0:	4770      	bx	lr
  4066a2:	bf00      	nop

004066a4 <__i2b>:
  4066a4:	b510      	push	{r4, lr}
  4066a6:	460c      	mov	r4, r1
  4066a8:	2101      	movs	r1, #1
  4066aa:	f7ff ff3b 	bl	406524 <_Balloc>
  4066ae:	2201      	movs	r2, #1
  4066b0:	6144      	str	r4, [r0, #20]
  4066b2:	6102      	str	r2, [r0, #16]
  4066b4:	bd10      	pop	{r4, pc}
  4066b6:	bf00      	nop

004066b8 <__multiply>:
  4066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066bc:	690c      	ldr	r4, [r1, #16]
  4066be:	6915      	ldr	r5, [r2, #16]
  4066c0:	42ac      	cmp	r4, r5
  4066c2:	b083      	sub	sp, #12
  4066c4:	468b      	mov	fp, r1
  4066c6:	4616      	mov	r6, r2
  4066c8:	da04      	bge.n	4066d4 <__multiply+0x1c>
  4066ca:	4622      	mov	r2, r4
  4066cc:	46b3      	mov	fp, r6
  4066ce:	462c      	mov	r4, r5
  4066d0:	460e      	mov	r6, r1
  4066d2:	4615      	mov	r5, r2
  4066d4:	f8db 3008 	ldr.w	r3, [fp, #8]
  4066d8:	f8db 1004 	ldr.w	r1, [fp, #4]
  4066dc:	eb04 0805 	add.w	r8, r4, r5
  4066e0:	4598      	cmp	r8, r3
  4066e2:	bfc8      	it	gt
  4066e4:	3101      	addgt	r1, #1
  4066e6:	f7ff ff1d 	bl	406524 <_Balloc>
  4066ea:	f100 0914 	add.w	r9, r0, #20
  4066ee:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4066f2:	45d1      	cmp	r9, sl
  4066f4:	9000      	str	r0, [sp, #0]
  4066f6:	d205      	bcs.n	406704 <__multiply+0x4c>
  4066f8:	464b      	mov	r3, r9
  4066fa:	2100      	movs	r1, #0
  4066fc:	f843 1b04 	str.w	r1, [r3], #4
  406700:	459a      	cmp	sl, r3
  406702:	d8fb      	bhi.n	4066fc <__multiply+0x44>
  406704:	f106 0c14 	add.w	ip, r6, #20
  406708:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40670c:	f10b 0b14 	add.w	fp, fp, #20
  406710:	459c      	cmp	ip, r3
  406712:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406716:	d24c      	bcs.n	4067b2 <__multiply+0xfa>
  406718:	f8cd a004 	str.w	sl, [sp, #4]
  40671c:	469a      	mov	sl, r3
  40671e:	f8dc 5000 	ldr.w	r5, [ip]
  406722:	b2af      	uxth	r7, r5
  406724:	b1ef      	cbz	r7, 406762 <__multiply+0xaa>
  406726:	2100      	movs	r1, #0
  406728:	464d      	mov	r5, r9
  40672a:	465e      	mov	r6, fp
  40672c:	460c      	mov	r4, r1
  40672e:	f856 2b04 	ldr.w	r2, [r6], #4
  406732:	6828      	ldr	r0, [r5, #0]
  406734:	b293      	uxth	r3, r2
  406736:	b281      	uxth	r1, r0
  406738:	fb07 1303 	mla	r3, r7, r3, r1
  40673c:	0c12      	lsrs	r2, r2, #16
  40673e:	0c01      	lsrs	r1, r0, #16
  406740:	4423      	add	r3, r4
  406742:	fb07 1102 	mla	r1, r7, r2, r1
  406746:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40674a:	b29b      	uxth	r3, r3
  40674c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406750:	45b6      	cmp	lr, r6
  406752:	f845 3b04 	str.w	r3, [r5], #4
  406756:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40675a:	d8e8      	bhi.n	40672e <__multiply+0x76>
  40675c:	602c      	str	r4, [r5, #0]
  40675e:	f8dc 5000 	ldr.w	r5, [ip]
  406762:	0c2d      	lsrs	r5, r5, #16
  406764:	d01d      	beq.n	4067a2 <__multiply+0xea>
  406766:	f8d9 3000 	ldr.w	r3, [r9]
  40676a:	4648      	mov	r0, r9
  40676c:	461c      	mov	r4, r3
  40676e:	4659      	mov	r1, fp
  406770:	2200      	movs	r2, #0
  406772:	880e      	ldrh	r6, [r1, #0]
  406774:	0c24      	lsrs	r4, r4, #16
  406776:	fb05 4406 	mla	r4, r5, r6, r4
  40677a:	4422      	add	r2, r4
  40677c:	b29b      	uxth	r3, r3
  40677e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406782:	f840 3b04 	str.w	r3, [r0], #4
  406786:	f851 3b04 	ldr.w	r3, [r1], #4
  40678a:	6804      	ldr	r4, [r0, #0]
  40678c:	0c1b      	lsrs	r3, r3, #16
  40678e:	b2a6      	uxth	r6, r4
  406790:	fb05 6303 	mla	r3, r5, r3, r6
  406794:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406798:	458e      	cmp	lr, r1
  40679a:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40679e:	d8e8      	bhi.n	406772 <__multiply+0xba>
  4067a0:	6003      	str	r3, [r0, #0]
  4067a2:	f10c 0c04 	add.w	ip, ip, #4
  4067a6:	45e2      	cmp	sl, ip
  4067a8:	f109 0904 	add.w	r9, r9, #4
  4067ac:	d8b7      	bhi.n	40671e <__multiply+0x66>
  4067ae:	f8dd a004 	ldr.w	sl, [sp, #4]
  4067b2:	f1b8 0f00 	cmp.w	r8, #0
  4067b6:	dd0b      	ble.n	4067d0 <__multiply+0x118>
  4067b8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4067bc:	f1aa 0a04 	sub.w	sl, sl, #4
  4067c0:	b11b      	cbz	r3, 4067ca <__multiply+0x112>
  4067c2:	e005      	b.n	4067d0 <__multiply+0x118>
  4067c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4067c8:	b913      	cbnz	r3, 4067d0 <__multiply+0x118>
  4067ca:	f1b8 0801 	subs.w	r8, r8, #1
  4067ce:	d1f9      	bne.n	4067c4 <__multiply+0x10c>
  4067d0:	9800      	ldr	r0, [sp, #0]
  4067d2:	f8c0 8010 	str.w	r8, [r0, #16]
  4067d6:	b003      	add	sp, #12
  4067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004067dc <__pow5mult>:
  4067dc:	f012 0303 	ands.w	r3, r2, #3
  4067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067e4:	4614      	mov	r4, r2
  4067e6:	4607      	mov	r7, r0
  4067e8:	d12e      	bne.n	406848 <__pow5mult+0x6c>
  4067ea:	460d      	mov	r5, r1
  4067ec:	10a4      	asrs	r4, r4, #2
  4067ee:	d01c      	beq.n	40682a <__pow5mult+0x4e>
  4067f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4067f2:	b396      	cbz	r6, 40685a <__pow5mult+0x7e>
  4067f4:	07e3      	lsls	r3, r4, #31
  4067f6:	f04f 0800 	mov.w	r8, #0
  4067fa:	d406      	bmi.n	40680a <__pow5mult+0x2e>
  4067fc:	1064      	asrs	r4, r4, #1
  4067fe:	d014      	beq.n	40682a <__pow5mult+0x4e>
  406800:	6830      	ldr	r0, [r6, #0]
  406802:	b1a8      	cbz	r0, 406830 <__pow5mult+0x54>
  406804:	4606      	mov	r6, r0
  406806:	07e3      	lsls	r3, r4, #31
  406808:	d5f8      	bpl.n	4067fc <__pow5mult+0x20>
  40680a:	4632      	mov	r2, r6
  40680c:	4629      	mov	r1, r5
  40680e:	4638      	mov	r0, r7
  406810:	f7ff ff52 	bl	4066b8 <__multiply>
  406814:	b1b5      	cbz	r5, 406844 <__pow5mult+0x68>
  406816:	686a      	ldr	r2, [r5, #4]
  406818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40681a:	1064      	asrs	r4, r4, #1
  40681c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406820:	6029      	str	r1, [r5, #0]
  406822:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406826:	4605      	mov	r5, r0
  406828:	d1ea      	bne.n	406800 <__pow5mult+0x24>
  40682a:	4628      	mov	r0, r5
  40682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406830:	4632      	mov	r2, r6
  406832:	4631      	mov	r1, r6
  406834:	4638      	mov	r0, r7
  406836:	f7ff ff3f 	bl	4066b8 <__multiply>
  40683a:	6030      	str	r0, [r6, #0]
  40683c:	f8c0 8000 	str.w	r8, [r0]
  406840:	4606      	mov	r6, r0
  406842:	e7e0      	b.n	406806 <__pow5mult+0x2a>
  406844:	4605      	mov	r5, r0
  406846:	e7d9      	b.n	4067fc <__pow5mult+0x20>
  406848:	1e5a      	subs	r2, r3, #1
  40684a:	4d0b      	ldr	r5, [pc, #44]	; (406878 <__pow5mult+0x9c>)
  40684c:	2300      	movs	r3, #0
  40684e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406852:	f7ff fe97 	bl	406584 <__multadd>
  406856:	4605      	mov	r5, r0
  406858:	e7c8      	b.n	4067ec <__pow5mult+0x10>
  40685a:	2101      	movs	r1, #1
  40685c:	4638      	mov	r0, r7
  40685e:	f7ff fe61 	bl	406524 <_Balloc>
  406862:	f240 2171 	movw	r1, #625	; 0x271
  406866:	2201      	movs	r2, #1
  406868:	2300      	movs	r3, #0
  40686a:	6141      	str	r1, [r0, #20]
  40686c:	6102      	str	r2, [r0, #16]
  40686e:	4606      	mov	r6, r0
  406870:	64b8      	str	r0, [r7, #72]	; 0x48
  406872:	6003      	str	r3, [r0, #0]
  406874:	e7be      	b.n	4067f4 <__pow5mult+0x18>
  406876:	bf00      	nop
  406878:	00407df8 	.word	0x00407df8

0040687c <__lshift>:
  40687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406880:	4691      	mov	r9, r2
  406882:	690a      	ldr	r2, [r1, #16]
  406884:	688b      	ldr	r3, [r1, #8]
  406886:	ea4f 1469 	mov.w	r4, r9, asr #5
  40688a:	eb04 0802 	add.w	r8, r4, r2
  40688e:	f108 0501 	add.w	r5, r8, #1
  406892:	429d      	cmp	r5, r3
  406894:	460e      	mov	r6, r1
  406896:	4607      	mov	r7, r0
  406898:	6849      	ldr	r1, [r1, #4]
  40689a:	dd04      	ble.n	4068a6 <__lshift+0x2a>
  40689c:	005b      	lsls	r3, r3, #1
  40689e:	429d      	cmp	r5, r3
  4068a0:	f101 0101 	add.w	r1, r1, #1
  4068a4:	dcfa      	bgt.n	40689c <__lshift+0x20>
  4068a6:	4638      	mov	r0, r7
  4068a8:	f7ff fe3c 	bl	406524 <_Balloc>
  4068ac:	2c00      	cmp	r4, #0
  4068ae:	f100 0314 	add.w	r3, r0, #20
  4068b2:	dd06      	ble.n	4068c2 <__lshift+0x46>
  4068b4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4068b8:	2100      	movs	r1, #0
  4068ba:	f843 1b04 	str.w	r1, [r3], #4
  4068be:	429a      	cmp	r2, r3
  4068c0:	d1fb      	bne.n	4068ba <__lshift+0x3e>
  4068c2:	6934      	ldr	r4, [r6, #16]
  4068c4:	f106 0114 	add.w	r1, r6, #20
  4068c8:	f019 091f 	ands.w	r9, r9, #31
  4068cc:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4068d0:	d01d      	beq.n	40690e <__lshift+0x92>
  4068d2:	f1c9 0c20 	rsb	ip, r9, #32
  4068d6:	2200      	movs	r2, #0
  4068d8:	680c      	ldr	r4, [r1, #0]
  4068da:	fa04 f409 	lsl.w	r4, r4, r9
  4068de:	4314      	orrs	r4, r2
  4068e0:	f843 4b04 	str.w	r4, [r3], #4
  4068e4:	f851 2b04 	ldr.w	r2, [r1], #4
  4068e8:	458e      	cmp	lr, r1
  4068ea:	fa22 f20c 	lsr.w	r2, r2, ip
  4068ee:	d8f3      	bhi.n	4068d8 <__lshift+0x5c>
  4068f0:	601a      	str	r2, [r3, #0]
  4068f2:	b10a      	cbz	r2, 4068f8 <__lshift+0x7c>
  4068f4:	f108 0502 	add.w	r5, r8, #2
  4068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4068fa:	6872      	ldr	r2, [r6, #4]
  4068fc:	3d01      	subs	r5, #1
  4068fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406902:	6105      	str	r5, [r0, #16]
  406904:	6031      	str	r1, [r6, #0]
  406906:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40690e:	3b04      	subs	r3, #4
  406910:	f851 2b04 	ldr.w	r2, [r1], #4
  406914:	f843 2f04 	str.w	r2, [r3, #4]!
  406918:	458e      	cmp	lr, r1
  40691a:	d8f9      	bhi.n	406910 <__lshift+0x94>
  40691c:	e7ec      	b.n	4068f8 <__lshift+0x7c>
  40691e:	bf00      	nop

00406920 <__mcmp>:
  406920:	b430      	push	{r4, r5}
  406922:	690b      	ldr	r3, [r1, #16]
  406924:	4605      	mov	r5, r0
  406926:	6900      	ldr	r0, [r0, #16]
  406928:	1ac0      	subs	r0, r0, r3
  40692a:	d10f      	bne.n	40694c <__mcmp+0x2c>
  40692c:	009b      	lsls	r3, r3, #2
  40692e:	3514      	adds	r5, #20
  406930:	3114      	adds	r1, #20
  406932:	4419      	add	r1, r3
  406934:	442b      	add	r3, r5
  406936:	e001      	b.n	40693c <__mcmp+0x1c>
  406938:	429d      	cmp	r5, r3
  40693a:	d207      	bcs.n	40694c <__mcmp+0x2c>
  40693c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406944:	4294      	cmp	r4, r2
  406946:	d0f7      	beq.n	406938 <__mcmp+0x18>
  406948:	d302      	bcc.n	406950 <__mcmp+0x30>
  40694a:	2001      	movs	r0, #1
  40694c:	bc30      	pop	{r4, r5}
  40694e:	4770      	bx	lr
  406950:	f04f 30ff 	mov.w	r0, #4294967295
  406954:	e7fa      	b.n	40694c <__mcmp+0x2c>
  406956:	bf00      	nop

00406958 <__mdiff>:
  406958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40695c:	690f      	ldr	r7, [r1, #16]
  40695e:	460e      	mov	r6, r1
  406960:	6911      	ldr	r1, [r2, #16]
  406962:	1a7f      	subs	r7, r7, r1
  406964:	2f00      	cmp	r7, #0
  406966:	4690      	mov	r8, r2
  406968:	d117      	bne.n	40699a <__mdiff+0x42>
  40696a:	0089      	lsls	r1, r1, #2
  40696c:	f106 0514 	add.w	r5, r6, #20
  406970:	f102 0e14 	add.w	lr, r2, #20
  406974:	186b      	adds	r3, r5, r1
  406976:	4471      	add	r1, lr
  406978:	e001      	b.n	40697e <__mdiff+0x26>
  40697a:	429d      	cmp	r5, r3
  40697c:	d25c      	bcs.n	406a38 <__mdiff+0xe0>
  40697e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406982:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406986:	42a2      	cmp	r2, r4
  406988:	d0f7      	beq.n	40697a <__mdiff+0x22>
  40698a:	d25e      	bcs.n	406a4a <__mdiff+0xf2>
  40698c:	4633      	mov	r3, r6
  40698e:	462c      	mov	r4, r5
  406990:	4646      	mov	r6, r8
  406992:	4675      	mov	r5, lr
  406994:	4698      	mov	r8, r3
  406996:	2701      	movs	r7, #1
  406998:	e005      	b.n	4069a6 <__mdiff+0x4e>
  40699a:	db58      	blt.n	406a4e <__mdiff+0xf6>
  40699c:	f106 0514 	add.w	r5, r6, #20
  4069a0:	f108 0414 	add.w	r4, r8, #20
  4069a4:	2700      	movs	r7, #0
  4069a6:	6871      	ldr	r1, [r6, #4]
  4069a8:	f7ff fdbc 	bl	406524 <_Balloc>
  4069ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4069b0:	6936      	ldr	r6, [r6, #16]
  4069b2:	60c7      	str	r7, [r0, #12]
  4069b4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4069b8:	46a6      	mov	lr, r4
  4069ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4069be:	f100 0414 	add.w	r4, r0, #20
  4069c2:	2300      	movs	r3, #0
  4069c4:	f85e 1b04 	ldr.w	r1, [lr], #4
  4069c8:	f855 8b04 	ldr.w	r8, [r5], #4
  4069cc:	b28a      	uxth	r2, r1
  4069ce:	fa13 f388 	uxtah	r3, r3, r8
  4069d2:	0c09      	lsrs	r1, r1, #16
  4069d4:	1a9a      	subs	r2, r3, r2
  4069d6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4069da:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4069de:	b292      	uxth	r2, r2
  4069e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4069e4:	45f4      	cmp	ip, lr
  4069e6:	f844 2b04 	str.w	r2, [r4], #4
  4069ea:	ea4f 4323 	mov.w	r3, r3, asr #16
  4069ee:	d8e9      	bhi.n	4069c4 <__mdiff+0x6c>
  4069f0:	42af      	cmp	r7, r5
  4069f2:	d917      	bls.n	406a24 <__mdiff+0xcc>
  4069f4:	46a4      	mov	ip, r4
  4069f6:	46ae      	mov	lr, r5
  4069f8:	f85e 2b04 	ldr.w	r2, [lr], #4
  4069fc:	fa13 f382 	uxtah	r3, r3, r2
  406a00:	1419      	asrs	r1, r3, #16
  406a02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406a06:	b29b      	uxth	r3, r3
  406a08:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406a0c:	4577      	cmp	r7, lr
  406a0e:	f84c 2b04 	str.w	r2, [ip], #4
  406a12:	ea4f 4321 	mov.w	r3, r1, asr #16
  406a16:	d8ef      	bhi.n	4069f8 <__mdiff+0xa0>
  406a18:	43ed      	mvns	r5, r5
  406a1a:	442f      	add	r7, r5
  406a1c:	f027 0703 	bic.w	r7, r7, #3
  406a20:	3704      	adds	r7, #4
  406a22:	443c      	add	r4, r7
  406a24:	3c04      	subs	r4, #4
  406a26:	b922      	cbnz	r2, 406a32 <__mdiff+0xda>
  406a28:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406a2c:	3e01      	subs	r6, #1
  406a2e:	2b00      	cmp	r3, #0
  406a30:	d0fa      	beq.n	406a28 <__mdiff+0xd0>
  406a32:	6106      	str	r6, [r0, #16]
  406a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a38:	2100      	movs	r1, #0
  406a3a:	f7ff fd73 	bl	406524 <_Balloc>
  406a3e:	2201      	movs	r2, #1
  406a40:	2300      	movs	r3, #0
  406a42:	6102      	str	r2, [r0, #16]
  406a44:	6143      	str	r3, [r0, #20]
  406a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a4a:	4674      	mov	r4, lr
  406a4c:	e7ab      	b.n	4069a6 <__mdiff+0x4e>
  406a4e:	4633      	mov	r3, r6
  406a50:	f106 0414 	add.w	r4, r6, #20
  406a54:	f102 0514 	add.w	r5, r2, #20
  406a58:	4616      	mov	r6, r2
  406a5a:	2701      	movs	r7, #1
  406a5c:	4698      	mov	r8, r3
  406a5e:	e7a2      	b.n	4069a6 <__mdiff+0x4e>

00406a60 <__d2b>:
  406a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a64:	b082      	sub	sp, #8
  406a66:	2101      	movs	r1, #1
  406a68:	461c      	mov	r4, r3
  406a6a:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406a6e:	4615      	mov	r5, r2
  406a70:	9e08      	ldr	r6, [sp, #32]
  406a72:	f7ff fd57 	bl	406524 <_Balloc>
  406a76:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406a7a:	4680      	mov	r8, r0
  406a7c:	b10f      	cbz	r7, 406a82 <__d2b+0x22>
  406a7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406a82:	9401      	str	r4, [sp, #4]
  406a84:	b31d      	cbz	r5, 406ace <__d2b+0x6e>
  406a86:	a802      	add	r0, sp, #8
  406a88:	f840 5d08 	str.w	r5, [r0, #-8]!
  406a8c:	f7ff fdda 	bl	406644 <__lo0bits>
  406a90:	2800      	cmp	r0, #0
  406a92:	d134      	bne.n	406afe <__d2b+0x9e>
  406a94:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406a98:	f8c8 2014 	str.w	r2, [r8, #20]
  406a9c:	2b00      	cmp	r3, #0
  406a9e:	bf0c      	ite	eq
  406aa0:	2101      	moveq	r1, #1
  406aa2:	2102      	movne	r1, #2
  406aa4:	f8c8 3018 	str.w	r3, [r8, #24]
  406aa8:	f8c8 1010 	str.w	r1, [r8, #16]
  406aac:	b9df      	cbnz	r7, 406ae6 <__d2b+0x86>
  406aae:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406ab2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406ab6:	6030      	str	r0, [r6, #0]
  406ab8:	6918      	ldr	r0, [r3, #16]
  406aba:	f7ff fda3 	bl	406604 <__hi0bits>
  406abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ac0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406ac4:	6018      	str	r0, [r3, #0]
  406ac6:	4640      	mov	r0, r8
  406ac8:	b002      	add	sp, #8
  406aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ace:	a801      	add	r0, sp, #4
  406ad0:	f7ff fdb8 	bl	406644 <__lo0bits>
  406ad4:	9b01      	ldr	r3, [sp, #4]
  406ad6:	f8c8 3014 	str.w	r3, [r8, #20]
  406ada:	2101      	movs	r1, #1
  406adc:	3020      	adds	r0, #32
  406ade:	f8c8 1010 	str.w	r1, [r8, #16]
  406ae2:	2f00      	cmp	r7, #0
  406ae4:	d0e3      	beq.n	406aae <__d2b+0x4e>
  406ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ae8:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406aec:	4407      	add	r7, r0
  406aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406af2:	6037      	str	r7, [r6, #0]
  406af4:	6018      	str	r0, [r3, #0]
  406af6:	4640      	mov	r0, r8
  406af8:	b002      	add	sp, #8
  406afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406afe:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406b02:	f1c0 0220 	rsb	r2, r0, #32
  406b06:	fa03 f202 	lsl.w	r2, r3, r2
  406b0a:	430a      	orrs	r2, r1
  406b0c:	40c3      	lsrs	r3, r0
  406b0e:	9301      	str	r3, [sp, #4]
  406b10:	f8c8 2014 	str.w	r2, [r8, #20]
  406b14:	e7c2      	b.n	406a9c <__d2b+0x3c>
  406b16:	bf00      	nop

00406b18 <_realloc_r>:
  406b18:	2900      	cmp	r1, #0
  406b1a:	f000 8095 	beq.w	406c48 <_realloc_r+0x130>
  406b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b22:	460d      	mov	r5, r1
  406b24:	4616      	mov	r6, r2
  406b26:	b083      	sub	sp, #12
  406b28:	4680      	mov	r8, r0
  406b2a:	f106 070b 	add.w	r7, r6, #11
  406b2e:	f7ff fcf5 	bl	40651c <__malloc_lock>
  406b32:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406b36:	2f16      	cmp	r7, #22
  406b38:	f02e 0403 	bic.w	r4, lr, #3
  406b3c:	f1a5 0908 	sub.w	r9, r5, #8
  406b40:	d83c      	bhi.n	406bbc <_realloc_r+0xa4>
  406b42:	2210      	movs	r2, #16
  406b44:	4617      	mov	r7, r2
  406b46:	42be      	cmp	r6, r7
  406b48:	d83d      	bhi.n	406bc6 <_realloc_r+0xae>
  406b4a:	4294      	cmp	r4, r2
  406b4c:	da43      	bge.n	406bd6 <_realloc_r+0xbe>
  406b4e:	4bc4      	ldr	r3, [pc, #784]	; (406e60 <_realloc_r+0x348>)
  406b50:	6899      	ldr	r1, [r3, #8]
  406b52:	eb09 0004 	add.w	r0, r9, r4
  406b56:	4288      	cmp	r0, r1
  406b58:	f000 80b4 	beq.w	406cc4 <_realloc_r+0x1ac>
  406b5c:	6843      	ldr	r3, [r0, #4]
  406b5e:	f023 0101 	bic.w	r1, r3, #1
  406b62:	4401      	add	r1, r0
  406b64:	6849      	ldr	r1, [r1, #4]
  406b66:	07c9      	lsls	r1, r1, #31
  406b68:	d54c      	bpl.n	406c04 <_realloc_r+0xec>
  406b6a:	f01e 0f01 	tst.w	lr, #1
  406b6e:	f000 809b 	beq.w	406ca8 <_realloc_r+0x190>
  406b72:	4631      	mov	r1, r6
  406b74:	4640      	mov	r0, r8
  406b76:	f7ff f887 	bl	405c88 <_malloc_r>
  406b7a:	4606      	mov	r6, r0
  406b7c:	2800      	cmp	r0, #0
  406b7e:	d03a      	beq.n	406bf6 <_realloc_r+0xde>
  406b80:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406b84:	f023 0301 	bic.w	r3, r3, #1
  406b88:	444b      	add	r3, r9
  406b8a:	f1a0 0208 	sub.w	r2, r0, #8
  406b8e:	429a      	cmp	r2, r3
  406b90:	f000 8121 	beq.w	406dd6 <_realloc_r+0x2be>
  406b94:	1f22      	subs	r2, r4, #4
  406b96:	2a24      	cmp	r2, #36	; 0x24
  406b98:	f200 8107 	bhi.w	406daa <_realloc_r+0x292>
  406b9c:	2a13      	cmp	r2, #19
  406b9e:	f200 80db 	bhi.w	406d58 <_realloc_r+0x240>
  406ba2:	4603      	mov	r3, r0
  406ba4:	462a      	mov	r2, r5
  406ba6:	6811      	ldr	r1, [r2, #0]
  406ba8:	6019      	str	r1, [r3, #0]
  406baa:	6851      	ldr	r1, [r2, #4]
  406bac:	6059      	str	r1, [r3, #4]
  406bae:	6892      	ldr	r2, [r2, #8]
  406bb0:	609a      	str	r2, [r3, #8]
  406bb2:	4629      	mov	r1, r5
  406bb4:	4640      	mov	r0, r8
  406bb6:	f7fe ff73 	bl	405aa0 <_free_r>
  406bba:	e01c      	b.n	406bf6 <_realloc_r+0xde>
  406bbc:	f027 0707 	bic.w	r7, r7, #7
  406bc0:	2f00      	cmp	r7, #0
  406bc2:	463a      	mov	r2, r7
  406bc4:	dabf      	bge.n	406b46 <_realloc_r+0x2e>
  406bc6:	2600      	movs	r6, #0
  406bc8:	230c      	movs	r3, #12
  406bca:	4630      	mov	r0, r6
  406bcc:	f8c8 3000 	str.w	r3, [r8]
  406bd0:	b003      	add	sp, #12
  406bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bd6:	462e      	mov	r6, r5
  406bd8:	1be3      	subs	r3, r4, r7
  406bda:	2b0f      	cmp	r3, #15
  406bdc:	d81e      	bhi.n	406c1c <_realloc_r+0x104>
  406bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406be2:	f003 0301 	and.w	r3, r3, #1
  406be6:	4323      	orrs	r3, r4
  406be8:	444c      	add	r4, r9
  406bea:	f8c9 3004 	str.w	r3, [r9, #4]
  406bee:	6863      	ldr	r3, [r4, #4]
  406bf0:	f043 0301 	orr.w	r3, r3, #1
  406bf4:	6063      	str	r3, [r4, #4]
  406bf6:	4640      	mov	r0, r8
  406bf8:	f7ff fc92 	bl	406520 <__malloc_unlock>
  406bfc:	4630      	mov	r0, r6
  406bfe:	b003      	add	sp, #12
  406c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c04:	f023 0303 	bic.w	r3, r3, #3
  406c08:	18e1      	adds	r1, r4, r3
  406c0a:	4291      	cmp	r1, r2
  406c0c:	db1f      	blt.n	406c4e <_realloc_r+0x136>
  406c0e:	68c3      	ldr	r3, [r0, #12]
  406c10:	6882      	ldr	r2, [r0, #8]
  406c12:	462e      	mov	r6, r5
  406c14:	60d3      	str	r3, [r2, #12]
  406c16:	460c      	mov	r4, r1
  406c18:	609a      	str	r2, [r3, #8]
  406c1a:	e7dd      	b.n	406bd8 <_realloc_r+0xc0>
  406c1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406c20:	eb09 0107 	add.w	r1, r9, r7
  406c24:	f002 0201 	and.w	r2, r2, #1
  406c28:	444c      	add	r4, r9
  406c2a:	f043 0301 	orr.w	r3, r3, #1
  406c2e:	4317      	orrs	r7, r2
  406c30:	f8c9 7004 	str.w	r7, [r9, #4]
  406c34:	604b      	str	r3, [r1, #4]
  406c36:	6863      	ldr	r3, [r4, #4]
  406c38:	f043 0301 	orr.w	r3, r3, #1
  406c3c:	3108      	adds	r1, #8
  406c3e:	6063      	str	r3, [r4, #4]
  406c40:	4640      	mov	r0, r8
  406c42:	f7fe ff2d 	bl	405aa0 <_free_r>
  406c46:	e7d6      	b.n	406bf6 <_realloc_r+0xde>
  406c48:	4611      	mov	r1, r2
  406c4a:	f7ff b81d 	b.w	405c88 <_malloc_r>
  406c4e:	f01e 0f01 	tst.w	lr, #1
  406c52:	d18e      	bne.n	406b72 <_realloc_r+0x5a>
  406c54:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406c58:	eba9 0a01 	sub.w	sl, r9, r1
  406c5c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406c60:	f021 0103 	bic.w	r1, r1, #3
  406c64:	440b      	add	r3, r1
  406c66:	4423      	add	r3, r4
  406c68:	4293      	cmp	r3, r2
  406c6a:	db25      	blt.n	406cb8 <_realloc_r+0x1a0>
  406c6c:	68c2      	ldr	r2, [r0, #12]
  406c6e:	6881      	ldr	r1, [r0, #8]
  406c70:	4656      	mov	r6, sl
  406c72:	60ca      	str	r2, [r1, #12]
  406c74:	6091      	str	r1, [r2, #8]
  406c76:	f8da 100c 	ldr.w	r1, [sl, #12]
  406c7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406c7e:	1f22      	subs	r2, r4, #4
  406c80:	2a24      	cmp	r2, #36	; 0x24
  406c82:	60c1      	str	r1, [r0, #12]
  406c84:	6088      	str	r0, [r1, #8]
  406c86:	f200 8094 	bhi.w	406db2 <_realloc_r+0x29a>
  406c8a:	2a13      	cmp	r2, #19
  406c8c:	d96f      	bls.n	406d6e <_realloc_r+0x256>
  406c8e:	6829      	ldr	r1, [r5, #0]
  406c90:	f8ca 1008 	str.w	r1, [sl, #8]
  406c94:	6869      	ldr	r1, [r5, #4]
  406c96:	f8ca 100c 	str.w	r1, [sl, #12]
  406c9a:	2a1b      	cmp	r2, #27
  406c9c:	f200 80a2 	bhi.w	406de4 <_realloc_r+0x2cc>
  406ca0:	3508      	adds	r5, #8
  406ca2:	f10a 0210 	add.w	r2, sl, #16
  406ca6:	e063      	b.n	406d70 <_realloc_r+0x258>
  406ca8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  406cac:	eba9 0a03 	sub.w	sl, r9, r3
  406cb0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406cb4:	f021 0103 	bic.w	r1, r1, #3
  406cb8:	1863      	adds	r3, r4, r1
  406cba:	4293      	cmp	r3, r2
  406cbc:	f6ff af59 	blt.w	406b72 <_realloc_r+0x5a>
  406cc0:	4656      	mov	r6, sl
  406cc2:	e7d8      	b.n	406c76 <_realloc_r+0x15e>
  406cc4:	6841      	ldr	r1, [r0, #4]
  406cc6:	f021 0b03 	bic.w	fp, r1, #3
  406cca:	44a3      	add	fp, r4
  406ccc:	f107 0010 	add.w	r0, r7, #16
  406cd0:	4583      	cmp	fp, r0
  406cd2:	da56      	bge.n	406d82 <_realloc_r+0x26a>
  406cd4:	f01e 0f01 	tst.w	lr, #1
  406cd8:	f47f af4b 	bne.w	406b72 <_realloc_r+0x5a>
  406cdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406ce0:	eba9 0a01 	sub.w	sl, r9, r1
  406ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
  406ce8:	f021 0103 	bic.w	r1, r1, #3
  406cec:	448b      	add	fp, r1
  406cee:	4558      	cmp	r0, fp
  406cf0:	dce2      	bgt.n	406cb8 <_realloc_r+0x1a0>
  406cf2:	4656      	mov	r6, sl
  406cf4:	f8da 100c 	ldr.w	r1, [sl, #12]
  406cf8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  406cfc:	1f22      	subs	r2, r4, #4
  406cfe:	2a24      	cmp	r2, #36	; 0x24
  406d00:	60c1      	str	r1, [r0, #12]
  406d02:	6088      	str	r0, [r1, #8]
  406d04:	f200 808f 	bhi.w	406e26 <_realloc_r+0x30e>
  406d08:	2a13      	cmp	r2, #19
  406d0a:	f240 808a 	bls.w	406e22 <_realloc_r+0x30a>
  406d0e:	6829      	ldr	r1, [r5, #0]
  406d10:	f8ca 1008 	str.w	r1, [sl, #8]
  406d14:	6869      	ldr	r1, [r5, #4]
  406d16:	f8ca 100c 	str.w	r1, [sl, #12]
  406d1a:	2a1b      	cmp	r2, #27
  406d1c:	f200 808a 	bhi.w	406e34 <_realloc_r+0x31c>
  406d20:	3508      	adds	r5, #8
  406d22:	f10a 0210 	add.w	r2, sl, #16
  406d26:	6829      	ldr	r1, [r5, #0]
  406d28:	6011      	str	r1, [r2, #0]
  406d2a:	6869      	ldr	r1, [r5, #4]
  406d2c:	6051      	str	r1, [r2, #4]
  406d2e:	68a9      	ldr	r1, [r5, #8]
  406d30:	6091      	str	r1, [r2, #8]
  406d32:	eb0a 0107 	add.w	r1, sl, r7
  406d36:	ebab 0207 	sub.w	r2, fp, r7
  406d3a:	f042 0201 	orr.w	r2, r2, #1
  406d3e:	6099      	str	r1, [r3, #8]
  406d40:	604a      	str	r2, [r1, #4]
  406d42:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d46:	f003 0301 	and.w	r3, r3, #1
  406d4a:	431f      	orrs	r7, r3
  406d4c:	4640      	mov	r0, r8
  406d4e:	f8ca 7004 	str.w	r7, [sl, #4]
  406d52:	f7ff fbe5 	bl	406520 <__malloc_unlock>
  406d56:	e751      	b.n	406bfc <_realloc_r+0xe4>
  406d58:	682b      	ldr	r3, [r5, #0]
  406d5a:	6003      	str	r3, [r0, #0]
  406d5c:	686b      	ldr	r3, [r5, #4]
  406d5e:	6043      	str	r3, [r0, #4]
  406d60:	2a1b      	cmp	r2, #27
  406d62:	d82d      	bhi.n	406dc0 <_realloc_r+0x2a8>
  406d64:	f100 0308 	add.w	r3, r0, #8
  406d68:	f105 0208 	add.w	r2, r5, #8
  406d6c:	e71b      	b.n	406ba6 <_realloc_r+0x8e>
  406d6e:	4632      	mov	r2, r6
  406d70:	6829      	ldr	r1, [r5, #0]
  406d72:	6011      	str	r1, [r2, #0]
  406d74:	6869      	ldr	r1, [r5, #4]
  406d76:	6051      	str	r1, [r2, #4]
  406d78:	68a9      	ldr	r1, [r5, #8]
  406d7a:	6091      	str	r1, [r2, #8]
  406d7c:	461c      	mov	r4, r3
  406d7e:	46d1      	mov	r9, sl
  406d80:	e72a      	b.n	406bd8 <_realloc_r+0xc0>
  406d82:	eb09 0107 	add.w	r1, r9, r7
  406d86:	ebab 0b07 	sub.w	fp, fp, r7
  406d8a:	f04b 0201 	orr.w	r2, fp, #1
  406d8e:	6099      	str	r1, [r3, #8]
  406d90:	604a      	str	r2, [r1, #4]
  406d92:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406d96:	f003 0301 	and.w	r3, r3, #1
  406d9a:	431f      	orrs	r7, r3
  406d9c:	4640      	mov	r0, r8
  406d9e:	f845 7c04 	str.w	r7, [r5, #-4]
  406da2:	f7ff fbbd 	bl	406520 <__malloc_unlock>
  406da6:	462e      	mov	r6, r5
  406da8:	e728      	b.n	406bfc <_realloc_r+0xe4>
  406daa:	4629      	mov	r1, r5
  406dac:	f7ff fb52 	bl	406454 <memmove>
  406db0:	e6ff      	b.n	406bb2 <_realloc_r+0x9a>
  406db2:	4629      	mov	r1, r5
  406db4:	4630      	mov	r0, r6
  406db6:	461c      	mov	r4, r3
  406db8:	46d1      	mov	r9, sl
  406dba:	f7ff fb4b 	bl	406454 <memmove>
  406dbe:	e70b      	b.n	406bd8 <_realloc_r+0xc0>
  406dc0:	68ab      	ldr	r3, [r5, #8]
  406dc2:	6083      	str	r3, [r0, #8]
  406dc4:	68eb      	ldr	r3, [r5, #12]
  406dc6:	60c3      	str	r3, [r0, #12]
  406dc8:	2a24      	cmp	r2, #36	; 0x24
  406dca:	d017      	beq.n	406dfc <_realloc_r+0x2e4>
  406dcc:	f100 0310 	add.w	r3, r0, #16
  406dd0:	f105 0210 	add.w	r2, r5, #16
  406dd4:	e6e7      	b.n	406ba6 <_realloc_r+0x8e>
  406dd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406dda:	f023 0303 	bic.w	r3, r3, #3
  406dde:	441c      	add	r4, r3
  406de0:	462e      	mov	r6, r5
  406de2:	e6f9      	b.n	406bd8 <_realloc_r+0xc0>
  406de4:	68a9      	ldr	r1, [r5, #8]
  406de6:	f8ca 1010 	str.w	r1, [sl, #16]
  406dea:	68e9      	ldr	r1, [r5, #12]
  406dec:	f8ca 1014 	str.w	r1, [sl, #20]
  406df0:	2a24      	cmp	r2, #36	; 0x24
  406df2:	d00c      	beq.n	406e0e <_realloc_r+0x2f6>
  406df4:	3510      	adds	r5, #16
  406df6:	f10a 0218 	add.w	r2, sl, #24
  406dfa:	e7b9      	b.n	406d70 <_realloc_r+0x258>
  406dfc:	692b      	ldr	r3, [r5, #16]
  406dfe:	6103      	str	r3, [r0, #16]
  406e00:	696b      	ldr	r3, [r5, #20]
  406e02:	6143      	str	r3, [r0, #20]
  406e04:	f105 0218 	add.w	r2, r5, #24
  406e08:	f100 0318 	add.w	r3, r0, #24
  406e0c:	e6cb      	b.n	406ba6 <_realloc_r+0x8e>
  406e0e:	692a      	ldr	r2, [r5, #16]
  406e10:	f8ca 2018 	str.w	r2, [sl, #24]
  406e14:	696a      	ldr	r2, [r5, #20]
  406e16:	f8ca 201c 	str.w	r2, [sl, #28]
  406e1a:	3518      	adds	r5, #24
  406e1c:	f10a 0220 	add.w	r2, sl, #32
  406e20:	e7a6      	b.n	406d70 <_realloc_r+0x258>
  406e22:	4632      	mov	r2, r6
  406e24:	e77f      	b.n	406d26 <_realloc_r+0x20e>
  406e26:	4629      	mov	r1, r5
  406e28:	4630      	mov	r0, r6
  406e2a:	9301      	str	r3, [sp, #4]
  406e2c:	f7ff fb12 	bl	406454 <memmove>
  406e30:	9b01      	ldr	r3, [sp, #4]
  406e32:	e77e      	b.n	406d32 <_realloc_r+0x21a>
  406e34:	68a9      	ldr	r1, [r5, #8]
  406e36:	f8ca 1010 	str.w	r1, [sl, #16]
  406e3a:	68e9      	ldr	r1, [r5, #12]
  406e3c:	f8ca 1014 	str.w	r1, [sl, #20]
  406e40:	2a24      	cmp	r2, #36	; 0x24
  406e42:	d003      	beq.n	406e4c <_realloc_r+0x334>
  406e44:	3510      	adds	r5, #16
  406e46:	f10a 0218 	add.w	r2, sl, #24
  406e4a:	e76c      	b.n	406d26 <_realloc_r+0x20e>
  406e4c:	692a      	ldr	r2, [r5, #16]
  406e4e:	f8ca 2018 	str.w	r2, [sl, #24]
  406e52:	696a      	ldr	r2, [r5, #20]
  406e54:	f8ca 201c 	str.w	r2, [sl, #28]
  406e58:	3518      	adds	r5, #24
  406e5a:	f10a 0220 	add.w	r2, sl, #32
  406e5e:	e762      	b.n	406d26 <_realloc_r+0x20e>
  406e60:	200005ac 	.word	0x200005ac

00406e64 <_sbrk_r>:
  406e64:	b538      	push	{r3, r4, r5, lr}
  406e66:	4c07      	ldr	r4, [pc, #28]	; (406e84 <_sbrk_r+0x20>)
  406e68:	2300      	movs	r3, #0
  406e6a:	4605      	mov	r5, r0
  406e6c:	4608      	mov	r0, r1
  406e6e:	6023      	str	r3, [r4, #0]
  406e70:	f7fb fe52 	bl	402b18 <_sbrk>
  406e74:	1c43      	adds	r3, r0, #1
  406e76:	d000      	beq.n	406e7a <_sbrk_r+0x16>
  406e78:	bd38      	pop	{r3, r4, r5, pc}
  406e7a:	6823      	ldr	r3, [r4, #0]
  406e7c:	2b00      	cmp	r3, #0
  406e7e:	d0fb      	beq.n	406e78 <_sbrk_r+0x14>
  406e80:	602b      	str	r3, [r5, #0]
  406e82:	bd38      	pop	{r3, r4, r5, pc}
  406e84:	200089b0 	.word	0x200089b0

00406e88 <strchr>:
  406e88:	b2c9      	uxtb	r1, r1
  406e8a:	2900      	cmp	r1, #0
  406e8c:	d041      	beq.n	406f12 <strchr+0x8a>
  406e8e:	0782      	lsls	r2, r0, #30
  406e90:	b4f0      	push	{r4, r5, r6, r7}
  406e92:	d067      	beq.n	406f64 <strchr+0xdc>
  406e94:	7803      	ldrb	r3, [r0, #0]
  406e96:	2b00      	cmp	r3, #0
  406e98:	d068      	beq.n	406f6c <strchr+0xe4>
  406e9a:	4299      	cmp	r1, r3
  406e9c:	d037      	beq.n	406f0e <strchr+0x86>
  406e9e:	1c43      	adds	r3, r0, #1
  406ea0:	e004      	b.n	406eac <strchr+0x24>
  406ea2:	f813 0b01 	ldrb.w	r0, [r3], #1
  406ea6:	b390      	cbz	r0, 406f0e <strchr+0x86>
  406ea8:	4281      	cmp	r1, r0
  406eaa:	d02f      	beq.n	406f0c <strchr+0x84>
  406eac:	079a      	lsls	r2, r3, #30
  406eae:	461c      	mov	r4, r3
  406eb0:	d1f7      	bne.n	406ea2 <strchr+0x1a>
  406eb2:	6825      	ldr	r5, [r4, #0]
  406eb4:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  406eb8:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  406ebc:	ea83 0605 	eor.w	r6, r3, r5
  406ec0:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  406ec4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  406ec8:	ea20 0006 	bic.w	r0, r0, r6
  406ecc:	ea22 0205 	bic.w	r2, r2, r5
  406ed0:	4302      	orrs	r2, r0
  406ed2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406ed6:	d111      	bne.n	406efc <strchr+0x74>
  406ed8:	4620      	mov	r0, r4
  406eda:	f850 6f04 	ldr.w	r6, [r0, #4]!
  406ede:	ea83 0706 	eor.w	r7, r3, r6
  406ee2:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  406ee6:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  406eea:	ea25 0507 	bic.w	r5, r5, r7
  406eee:	ea22 0206 	bic.w	r2, r2, r6
  406ef2:	432a      	orrs	r2, r5
  406ef4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406ef8:	d0ef      	beq.n	406eda <strchr+0x52>
  406efa:	4604      	mov	r4, r0
  406efc:	7820      	ldrb	r0, [r4, #0]
  406efe:	b918      	cbnz	r0, 406f08 <strchr+0x80>
  406f00:	e005      	b.n	406f0e <strchr+0x86>
  406f02:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  406f06:	b110      	cbz	r0, 406f0e <strchr+0x86>
  406f08:	4281      	cmp	r1, r0
  406f0a:	d1fa      	bne.n	406f02 <strchr+0x7a>
  406f0c:	4620      	mov	r0, r4
  406f0e:	bcf0      	pop	{r4, r5, r6, r7}
  406f10:	4770      	bx	lr
  406f12:	0783      	lsls	r3, r0, #30
  406f14:	d024      	beq.n	406f60 <strchr+0xd8>
  406f16:	7803      	ldrb	r3, [r0, #0]
  406f18:	2b00      	cmp	r3, #0
  406f1a:	d0f9      	beq.n	406f10 <strchr+0x88>
  406f1c:	1c43      	adds	r3, r0, #1
  406f1e:	e003      	b.n	406f28 <strchr+0xa0>
  406f20:	7802      	ldrb	r2, [r0, #0]
  406f22:	3301      	adds	r3, #1
  406f24:	2a00      	cmp	r2, #0
  406f26:	d0f3      	beq.n	406f10 <strchr+0x88>
  406f28:	0799      	lsls	r1, r3, #30
  406f2a:	4618      	mov	r0, r3
  406f2c:	d1f8      	bne.n	406f20 <strchr+0x98>
  406f2e:	6819      	ldr	r1, [r3, #0]
  406f30:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406f34:	ea22 0201 	bic.w	r2, r2, r1
  406f38:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f3c:	d108      	bne.n	406f50 <strchr+0xc8>
  406f3e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  406f42:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  406f46:	ea22 0201 	bic.w	r2, r2, r1
  406f4a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406f4e:	d0f6      	beq.n	406f3e <strchr+0xb6>
  406f50:	781a      	ldrb	r2, [r3, #0]
  406f52:	4618      	mov	r0, r3
  406f54:	b142      	cbz	r2, 406f68 <strchr+0xe0>
  406f56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  406f5a:	2b00      	cmp	r3, #0
  406f5c:	d1fb      	bne.n	406f56 <strchr+0xce>
  406f5e:	4770      	bx	lr
  406f60:	4603      	mov	r3, r0
  406f62:	e7e4      	b.n	406f2e <strchr+0xa6>
  406f64:	4604      	mov	r4, r0
  406f66:	e7a4      	b.n	406eb2 <strchr+0x2a>
  406f68:	4618      	mov	r0, r3
  406f6a:	4770      	bx	lr
  406f6c:	4618      	mov	r0, r3
  406f6e:	e7ce      	b.n	406f0e <strchr+0x86>

00406f70 <__ssprint_r>:
  406f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f74:	6893      	ldr	r3, [r2, #8]
  406f76:	b083      	sub	sp, #12
  406f78:	4690      	mov	r8, r2
  406f7a:	2b00      	cmp	r3, #0
  406f7c:	d070      	beq.n	407060 <__ssprint_r+0xf0>
  406f7e:	4682      	mov	sl, r0
  406f80:	460c      	mov	r4, r1
  406f82:	6817      	ldr	r7, [r2, #0]
  406f84:	688d      	ldr	r5, [r1, #8]
  406f86:	6808      	ldr	r0, [r1, #0]
  406f88:	e042      	b.n	407010 <__ssprint_r+0xa0>
  406f8a:	89a3      	ldrh	r3, [r4, #12]
  406f8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f90:	d02e      	beq.n	406ff0 <__ssprint_r+0x80>
  406f92:	6965      	ldr	r5, [r4, #20]
  406f94:	6921      	ldr	r1, [r4, #16]
  406f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406f9a:	eba0 0b01 	sub.w	fp, r0, r1
  406f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406fa2:	f10b 0001 	add.w	r0, fp, #1
  406fa6:	106d      	asrs	r5, r5, #1
  406fa8:	4430      	add	r0, r6
  406faa:	42a8      	cmp	r0, r5
  406fac:	462a      	mov	r2, r5
  406fae:	bf84      	itt	hi
  406fb0:	4605      	movhi	r5, r0
  406fb2:	462a      	movhi	r2, r5
  406fb4:	055b      	lsls	r3, r3, #21
  406fb6:	d538      	bpl.n	40702a <__ssprint_r+0xba>
  406fb8:	4611      	mov	r1, r2
  406fba:	4650      	mov	r0, sl
  406fbc:	f7fe fe64 	bl	405c88 <_malloc_r>
  406fc0:	2800      	cmp	r0, #0
  406fc2:	d03c      	beq.n	40703e <__ssprint_r+0xce>
  406fc4:	465a      	mov	r2, fp
  406fc6:	6921      	ldr	r1, [r4, #16]
  406fc8:	9001      	str	r0, [sp, #4]
  406fca:	f7ff f9a9 	bl	406320 <memcpy>
  406fce:	89a2      	ldrh	r2, [r4, #12]
  406fd0:	9b01      	ldr	r3, [sp, #4]
  406fd2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406fda:	81a2      	strh	r2, [r4, #12]
  406fdc:	eba5 020b 	sub.w	r2, r5, fp
  406fe0:	eb03 000b 	add.w	r0, r3, fp
  406fe4:	6165      	str	r5, [r4, #20]
  406fe6:	6123      	str	r3, [r4, #16]
  406fe8:	6020      	str	r0, [r4, #0]
  406fea:	60a2      	str	r2, [r4, #8]
  406fec:	4635      	mov	r5, r6
  406fee:	46b3      	mov	fp, r6
  406ff0:	465a      	mov	r2, fp
  406ff2:	4649      	mov	r1, r9
  406ff4:	f7ff fa2e 	bl	406454 <memmove>
  406ff8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406ffc:	68a2      	ldr	r2, [r4, #8]
  406ffe:	6820      	ldr	r0, [r4, #0]
  407000:	1b55      	subs	r5, r2, r5
  407002:	4458      	add	r0, fp
  407004:	1b9e      	subs	r6, r3, r6
  407006:	60a5      	str	r5, [r4, #8]
  407008:	6020      	str	r0, [r4, #0]
  40700a:	f8c8 6008 	str.w	r6, [r8, #8]
  40700e:	b33e      	cbz	r6, 407060 <__ssprint_r+0xf0>
  407010:	687e      	ldr	r6, [r7, #4]
  407012:	463b      	mov	r3, r7
  407014:	3708      	adds	r7, #8
  407016:	2e00      	cmp	r6, #0
  407018:	d0fa      	beq.n	407010 <__ssprint_r+0xa0>
  40701a:	42ae      	cmp	r6, r5
  40701c:	f8d3 9000 	ldr.w	r9, [r3]
  407020:	46ab      	mov	fp, r5
  407022:	d2b2      	bcs.n	406f8a <__ssprint_r+0x1a>
  407024:	4635      	mov	r5, r6
  407026:	46b3      	mov	fp, r6
  407028:	e7e2      	b.n	406ff0 <__ssprint_r+0x80>
  40702a:	4650      	mov	r0, sl
  40702c:	f7ff fd74 	bl	406b18 <_realloc_r>
  407030:	4603      	mov	r3, r0
  407032:	2800      	cmp	r0, #0
  407034:	d1d2      	bne.n	406fdc <__ssprint_r+0x6c>
  407036:	6921      	ldr	r1, [r4, #16]
  407038:	4650      	mov	r0, sl
  40703a:	f7fe fd31 	bl	405aa0 <_free_r>
  40703e:	230c      	movs	r3, #12
  407040:	f8ca 3000 	str.w	r3, [sl]
  407044:	89a3      	ldrh	r3, [r4, #12]
  407046:	2200      	movs	r2, #0
  407048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40704c:	f04f 30ff 	mov.w	r0, #4294967295
  407050:	81a3      	strh	r3, [r4, #12]
  407052:	f8c8 2008 	str.w	r2, [r8, #8]
  407056:	f8c8 2004 	str.w	r2, [r8, #4]
  40705a:	b003      	add	sp, #12
  40705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407060:	2000      	movs	r0, #0
  407062:	f8c8 0004 	str.w	r0, [r8, #4]
  407066:	b003      	add	sp, #12
  407068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040706c <__ascii_wctomb>:
  40706c:	b121      	cbz	r1, 407078 <__ascii_wctomb+0xc>
  40706e:	2aff      	cmp	r2, #255	; 0xff
  407070:	d804      	bhi.n	40707c <__ascii_wctomb+0x10>
  407072:	700a      	strb	r2, [r1, #0]
  407074:	2001      	movs	r0, #1
  407076:	4770      	bx	lr
  407078:	4608      	mov	r0, r1
  40707a:	4770      	bx	lr
  40707c:	238a      	movs	r3, #138	; 0x8a
  40707e:	6003      	str	r3, [r0, #0]
  407080:	f04f 30ff 	mov.w	r0, #4294967295
  407084:	4770      	bx	lr
  407086:	bf00      	nop

00407088 <__register_exitproc>:
  407088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40708c:	4c25      	ldr	r4, [pc, #148]	; (407124 <__register_exitproc+0x9c>)
  40708e:	6825      	ldr	r5, [r4, #0]
  407090:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407094:	4606      	mov	r6, r0
  407096:	4688      	mov	r8, r1
  407098:	4692      	mov	sl, r2
  40709a:	4699      	mov	r9, r3
  40709c:	b3c4      	cbz	r4, 407110 <__register_exitproc+0x88>
  40709e:	6860      	ldr	r0, [r4, #4]
  4070a0:	281f      	cmp	r0, #31
  4070a2:	dc17      	bgt.n	4070d4 <__register_exitproc+0x4c>
  4070a4:	1c43      	adds	r3, r0, #1
  4070a6:	b176      	cbz	r6, 4070c6 <__register_exitproc+0x3e>
  4070a8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4070ac:	2201      	movs	r2, #1
  4070ae:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4070b2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4070b6:	4082      	lsls	r2, r0
  4070b8:	4311      	orrs	r1, r2
  4070ba:	2e02      	cmp	r6, #2
  4070bc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4070c0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4070c4:	d01e      	beq.n	407104 <__register_exitproc+0x7c>
  4070c6:	3002      	adds	r0, #2
  4070c8:	6063      	str	r3, [r4, #4]
  4070ca:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4070ce:	2000      	movs	r0, #0
  4070d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4070d4:	4b14      	ldr	r3, [pc, #80]	; (407128 <__register_exitproc+0xa0>)
  4070d6:	b303      	cbz	r3, 40711a <__register_exitproc+0x92>
  4070d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4070dc:	f3af 8000 	nop.w
  4070e0:	4604      	mov	r4, r0
  4070e2:	b1d0      	cbz	r0, 40711a <__register_exitproc+0x92>
  4070e4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4070e8:	2700      	movs	r7, #0
  4070ea:	e880 0088 	stmia.w	r0, {r3, r7}
  4070ee:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4070f2:	4638      	mov	r0, r7
  4070f4:	2301      	movs	r3, #1
  4070f6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4070fa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4070fe:	2e00      	cmp	r6, #0
  407100:	d0e1      	beq.n	4070c6 <__register_exitproc+0x3e>
  407102:	e7d1      	b.n	4070a8 <__register_exitproc+0x20>
  407104:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407108:	430a      	orrs	r2, r1
  40710a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40710e:	e7da      	b.n	4070c6 <__register_exitproc+0x3e>
  407110:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407114:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407118:	e7c1      	b.n	40709e <__register_exitproc+0x16>
  40711a:	f04f 30ff 	mov.w	r0, #4294967295
  40711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407122:	bf00      	nop
  407124:	00407c7c 	.word	0x00407c7c
  407128:	00000000 	.word	0x00000000

0040712c <_calloc_r>:
  40712c:	b510      	push	{r4, lr}
  40712e:	fb02 f101 	mul.w	r1, r2, r1
  407132:	f7fe fda9 	bl	405c88 <_malloc_r>
  407136:	4604      	mov	r4, r0
  407138:	b1d8      	cbz	r0, 407172 <_calloc_r+0x46>
  40713a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40713e:	f022 0203 	bic.w	r2, r2, #3
  407142:	3a04      	subs	r2, #4
  407144:	2a24      	cmp	r2, #36	; 0x24
  407146:	d818      	bhi.n	40717a <_calloc_r+0x4e>
  407148:	2a13      	cmp	r2, #19
  40714a:	d914      	bls.n	407176 <_calloc_r+0x4a>
  40714c:	2300      	movs	r3, #0
  40714e:	2a1b      	cmp	r2, #27
  407150:	6003      	str	r3, [r0, #0]
  407152:	6043      	str	r3, [r0, #4]
  407154:	d916      	bls.n	407184 <_calloc_r+0x58>
  407156:	2a24      	cmp	r2, #36	; 0x24
  407158:	6083      	str	r3, [r0, #8]
  40715a:	60c3      	str	r3, [r0, #12]
  40715c:	bf11      	iteee	ne
  40715e:	f100 0210 	addne.w	r2, r0, #16
  407162:	6103      	streq	r3, [r0, #16]
  407164:	6143      	streq	r3, [r0, #20]
  407166:	f100 0218 	addeq.w	r2, r0, #24
  40716a:	2300      	movs	r3, #0
  40716c:	6013      	str	r3, [r2, #0]
  40716e:	6053      	str	r3, [r2, #4]
  407170:	6093      	str	r3, [r2, #8]
  407172:	4620      	mov	r0, r4
  407174:	bd10      	pop	{r4, pc}
  407176:	4602      	mov	r2, r0
  407178:	e7f7      	b.n	40716a <_calloc_r+0x3e>
  40717a:	2100      	movs	r1, #0
  40717c:	f7fb fee6 	bl	402f4c <memset>
  407180:	4620      	mov	r0, r4
  407182:	bd10      	pop	{r4, pc}
  407184:	f100 0208 	add.w	r2, r0, #8
  407188:	e7ef      	b.n	40716a <_calloc_r+0x3e>
  40718a:	bf00      	nop

0040718c <__aeabi_drsub>:
  40718c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407190:	e002      	b.n	407198 <__adddf3>
  407192:	bf00      	nop

00407194 <__aeabi_dsub>:
  407194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407198 <__adddf3>:
  407198:	b530      	push	{r4, r5, lr}
  40719a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40719e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4071a2:	ea94 0f05 	teq	r4, r5
  4071a6:	bf08      	it	eq
  4071a8:	ea90 0f02 	teqeq	r0, r2
  4071ac:	bf1f      	itttt	ne
  4071ae:	ea54 0c00 	orrsne.w	ip, r4, r0
  4071b2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4071b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4071ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4071be:	f000 80e2 	beq.w	407386 <__adddf3+0x1ee>
  4071c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4071c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4071ca:	bfb8      	it	lt
  4071cc:	426d      	neglt	r5, r5
  4071ce:	dd0c      	ble.n	4071ea <__adddf3+0x52>
  4071d0:	442c      	add	r4, r5
  4071d2:	ea80 0202 	eor.w	r2, r0, r2
  4071d6:	ea81 0303 	eor.w	r3, r1, r3
  4071da:	ea82 0000 	eor.w	r0, r2, r0
  4071de:	ea83 0101 	eor.w	r1, r3, r1
  4071e2:	ea80 0202 	eor.w	r2, r0, r2
  4071e6:	ea81 0303 	eor.w	r3, r1, r3
  4071ea:	2d36      	cmp	r5, #54	; 0x36
  4071ec:	bf88      	it	hi
  4071ee:	bd30      	pophi	{r4, r5, pc}
  4071f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4071f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4071f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4071fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407200:	d002      	beq.n	407208 <__adddf3+0x70>
  407202:	4240      	negs	r0, r0
  407204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40720c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407214:	d002      	beq.n	40721c <__adddf3+0x84>
  407216:	4252      	negs	r2, r2
  407218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40721c:	ea94 0f05 	teq	r4, r5
  407220:	f000 80a7 	beq.w	407372 <__adddf3+0x1da>
  407224:	f1a4 0401 	sub.w	r4, r4, #1
  407228:	f1d5 0e20 	rsbs	lr, r5, #32
  40722c:	db0d      	blt.n	40724a <__adddf3+0xb2>
  40722e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407232:	fa22 f205 	lsr.w	r2, r2, r5
  407236:	1880      	adds	r0, r0, r2
  407238:	f141 0100 	adc.w	r1, r1, #0
  40723c:	fa03 f20e 	lsl.w	r2, r3, lr
  407240:	1880      	adds	r0, r0, r2
  407242:	fa43 f305 	asr.w	r3, r3, r5
  407246:	4159      	adcs	r1, r3
  407248:	e00e      	b.n	407268 <__adddf3+0xd0>
  40724a:	f1a5 0520 	sub.w	r5, r5, #32
  40724e:	f10e 0e20 	add.w	lr, lr, #32
  407252:	2a01      	cmp	r2, #1
  407254:	fa03 fc0e 	lsl.w	ip, r3, lr
  407258:	bf28      	it	cs
  40725a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40725e:	fa43 f305 	asr.w	r3, r3, r5
  407262:	18c0      	adds	r0, r0, r3
  407264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40726c:	d507      	bpl.n	40727e <__adddf3+0xe6>
  40726e:	f04f 0e00 	mov.w	lr, #0
  407272:	f1dc 0c00 	rsbs	ip, ip, #0
  407276:	eb7e 0000 	sbcs.w	r0, lr, r0
  40727a:	eb6e 0101 	sbc.w	r1, lr, r1
  40727e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407282:	d31b      	bcc.n	4072bc <__adddf3+0x124>
  407284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407288:	d30c      	bcc.n	4072a4 <__adddf3+0x10c>
  40728a:	0849      	lsrs	r1, r1, #1
  40728c:	ea5f 0030 	movs.w	r0, r0, rrx
  407290:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407294:	f104 0401 	add.w	r4, r4, #1
  407298:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40729c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4072a0:	f080 809a 	bcs.w	4073d8 <__adddf3+0x240>
  4072a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4072a8:	bf08      	it	eq
  4072aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4072ae:	f150 0000 	adcs.w	r0, r0, #0
  4072b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4072b6:	ea41 0105 	orr.w	r1, r1, r5
  4072ba:	bd30      	pop	{r4, r5, pc}
  4072bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4072c0:	4140      	adcs	r0, r0
  4072c2:	eb41 0101 	adc.w	r1, r1, r1
  4072c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4072ca:	f1a4 0401 	sub.w	r4, r4, #1
  4072ce:	d1e9      	bne.n	4072a4 <__adddf3+0x10c>
  4072d0:	f091 0f00 	teq	r1, #0
  4072d4:	bf04      	itt	eq
  4072d6:	4601      	moveq	r1, r0
  4072d8:	2000      	moveq	r0, #0
  4072da:	fab1 f381 	clz	r3, r1
  4072de:	bf08      	it	eq
  4072e0:	3320      	addeq	r3, #32
  4072e2:	f1a3 030b 	sub.w	r3, r3, #11
  4072e6:	f1b3 0220 	subs.w	r2, r3, #32
  4072ea:	da0c      	bge.n	407306 <__adddf3+0x16e>
  4072ec:	320c      	adds	r2, #12
  4072ee:	dd08      	ble.n	407302 <__adddf3+0x16a>
  4072f0:	f102 0c14 	add.w	ip, r2, #20
  4072f4:	f1c2 020c 	rsb	r2, r2, #12
  4072f8:	fa01 f00c 	lsl.w	r0, r1, ip
  4072fc:	fa21 f102 	lsr.w	r1, r1, r2
  407300:	e00c      	b.n	40731c <__adddf3+0x184>
  407302:	f102 0214 	add.w	r2, r2, #20
  407306:	bfd8      	it	le
  407308:	f1c2 0c20 	rsble	ip, r2, #32
  40730c:	fa01 f102 	lsl.w	r1, r1, r2
  407310:	fa20 fc0c 	lsr.w	ip, r0, ip
  407314:	bfdc      	itt	le
  407316:	ea41 010c 	orrle.w	r1, r1, ip
  40731a:	4090      	lslle	r0, r2
  40731c:	1ae4      	subs	r4, r4, r3
  40731e:	bfa2      	ittt	ge
  407320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407324:	4329      	orrge	r1, r5
  407326:	bd30      	popge	{r4, r5, pc}
  407328:	ea6f 0404 	mvn.w	r4, r4
  40732c:	3c1f      	subs	r4, #31
  40732e:	da1c      	bge.n	40736a <__adddf3+0x1d2>
  407330:	340c      	adds	r4, #12
  407332:	dc0e      	bgt.n	407352 <__adddf3+0x1ba>
  407334:	f104 0414 	add.w	r4, r4, #20
  407338:	f1c4 0220 	rsb	r2, r4, #32
  40733c:	fa20 f004 	lsr.w	r0, r0, r4
  407340:	fa01 f302 	lsl.w	r3, r1, r2
  407344:	ea40 0003 	orr.w	r0, r0, r3
  407348:	fa21 f304 	lsr.w	r3, r1, r4
  40734c:	ea45 0103 	orr.w	r1, r5, r3
  407350:	bd30      	pop	{r4, r5, pc}
  407352:	f1c4 040c 	rsb	r4, r4, #12
  407356:	f1c4 0220 	rsb	r2, r4, #32
  40735a:	fa20 f002 	lsr.w	r0, r0, r2
  40735e:	fa01 f304 	lsl.w	r3, r1, r4
  407362:	ea40 0003 	orr.w	r0, r0, r3
  407366:	4629      	mov	r1, r5
  407368:	bd30      	pop	{r4, r5, pc}
  40736a:	fa21 f004 	lsr.w	r0, r1, r4
  40736e:	4629      	mov	r1, r5
  407370:	bd30      	pop	{r4, r5, pc}
  407372:	f094 0f00 	teq	r4, #0
  407376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40737a:	bf06      	itte	eq
  40737c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407380:	3401      	addeq	r4, #1
  407382:	3d01      	subne	r5, #1
  407384:	e74e      	b.n	407224 <__adddf3+0x8c>
  407386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40738a:	bf18      	it	ne
  40738c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407390:	d029      	beq.n	4073e6 <__adddf3+0x24e>
  407392:	ea94 0f05 	teq	r4, r5
  407396:	bf08      	it	eq
  407398:	ea90 0f02 	teqeq	r0, r2
  40739c:	d005      	beq.n	4073aa <__adddf3+0x212>
  40739e:	ea54 0c00 	orrs.w	ip, r4, r0
  4073a2:	bf04      	itt	eq
  4073a4:	4619      	moveq	r1, r3
  4073a6:	4610      	moveq	r0, r2
  4073a8:	bd30      	pop	{r4, r5, pc}
  4073aa:	ea91 0f03 	teq	r1, r3
  4073ae:	bf1e      	ittt	ne
  4073b0:	2100      	movne	r1, #0
  4073b2:	2000      	movne	r0, #0
  4073b4:	bd30      	popne	{r4, r5, pc}
  4073b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4073ba:	d105      	bne.n	4073c8 <__adddf3+0x230>
  4073bc:	0040      	lsls	r0, r0, #1
  4073be:	4149      	adcs	r1, r1
  4073c0:	bf28      	it	cs
  4073c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4073c6:	bd30      	pop	{r4, r5, pc}
  4073c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4073cc:	bf3c      	itt	cc
  4073ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4073d2:	bd30      	popcc	{r4, r5, pc}
  4073d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4073d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4073dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4073e0:	f04f 0000 	mov.w	r0, #0
  4073e4:	bd30      	pop	{r4, r5, pc}
  4073e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4073ea:	bf1a      	itte	ne
  4073ec:	4619      	movne	r1, r3
  4073ee:	4610      	movne	r0, r2
  4073f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4073f4:	bf1c      	itt	ne
  4073f6:	460b      	movne	r3, r1
  4073f8:	4602      	movne	r2, r0
  4073fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4073fe:	bf06      	itte	eq
  407400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407404:	ea91 0f03 	teqeq	r1, r3
  407408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40740c:	bd30      	pop	{r4, r5, pc}
  40740e:	bf00      	nop

00407410 <__aeabi_ui2d>:
  407410:	f090 0f00 	teq	r0, #0
  407414:	bf04      	itt	eq
  407416:	2100      	moveq	r1, #0
  407418:	4770      	bxeq	lr
  40741a:	b530      	push	{r4, r5, lr}
  40741c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407420:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407424:	f04f 0500 	mov.w	r5, #0
  407428:	f04f 0100 	mov.w	r1, #0
  40742c:	e750      	b.n	4072d0 <__adddf3+0x138>
  40742e:	bf00      	nop

00407430 <__aeabi_i2d>:
  407430:	f090 0f00 	teq	r0, #0
  407434:	bf04      	itt	eq
  407436:	2100      	moveq	r1, #0
  407438:	4770      	bxeq	lr
  40743a:	b530      	push	{r4, r5, lr}
  40743c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407440:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407448:	bf48      	it	mi
  40744a:	4240      	negmi	r0, r0
  40744c:	f04f 0100 	mov.w	r1, #0
  407450:	e73e      	b.n	4072d0 <__adddf3+0x138>
  407452:	bf00      	nop

00407454 <__aeabi_f2d>:
  407454:	0042      	lsls	r2, r0, #1
  407456:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40745a:	ea4f 0131 	mov.w	r1, r1, rrx
  40745e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407462:	bf1f      	itttt	ne
  407464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40746c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407470:	4770      	bxne	lr
  407472:	f092 0f00 	teq	r2, #0
  407476:	bf14      	ite	ne
  407478:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40747c:	4770      	bxeq	lr
  40747e:	b530      	push	{r4, r5, lr}
  407480:	f44f 7460 	mov.w	r4, #896	; 0x380
  407484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40748c:	e720      	b.n	4072d0 <__adddf3+0x138>
  40748e:	bf00      	nop

00407490 <__aeabi_ul2d>:
  407490:	ea50 0201 	orrs.w	r2, r0, r1
  407494:	bf08      	it	eq
  407496:	4770      	bxeq	lr
  407498:	b530      	push	{r4, r5, lr}
  40749a:	f04f 0500 	mov.w	r5, #0
  40749e:	e00a      	b.n	4074b6 <__aeabi_l2d+0x16>

004074a0 <__aeabi_l2d>:
  4074a0:	ea50 0201 	orrs.w	r2, r0, r1
  4074a4:	bf08      	it	eq
  4074a6:	4770      	bxeq	lr
  4074a8:	b530      	push	{r4, r5, lr}
  4074aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4074ae:	d502      	bpl.n	4074b6 <__aeabi_l2d+0x16>
  4074b0:	4240      	negs	r0, r0
  4074b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4074b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4074ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4074be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4074c2:	f43f aedc 	beq.w	40727e <__adddf3+0xe6>
  4074c6:	f04f 0203 	mov.w	r2, #3
  4074ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4074ce:	bf18      	it	ne
  4074d0:	3203      	addne	r2, #3
  4074d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4074d6:	bf18      	it	ne
  4074d8:	3203      	addne	r2, #3
  4074da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4074de:	f1c2 0320 	rsb	r3, r2, #32
  4074e2:	fa00 fc03 	lsl.w	ip, r0, r3
  4074e6:	fa20 f002 	lsr.w	r0, r0, r2
  4074ea:	fa01 fe03 	lsl.w	lr, r1, r3
  4074ee:	ea40 000e 	orr.w	r0, r0, lr
  4074f2:	fa21 f102 	lsr.w	r1, r1, r2
  4074f6:	4414      	add	r4, r2
  4074f8:	e6c1      	b.n	40727e <__adddf3+0xe6>
  4074fa:	bf00      	nop

004074fc <__aeabi_dmul>:
  4074fc:	b570      	push	{r4, r5, r6, lr}
  4074fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40750a:	bf1d      	ittte	ne
  40750c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407510:	ea94 0f0c 	teqne	r4, ip
  407514:	ea95 0f0c 	teqne	r5, ip
  407518:	f000 f8de 	bleq	4076d8 <__aeabi_dmul+0x1dc>
  40751c:	442c      	add	r4, r5
  40751e:	ea81 0603 	eor.w	r6, r1, r3
  407522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40752a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40752e:	bf18      	it	ne
  407530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40753c:	d038      	beq.n	4075b0 <__aeabi_dmul+0xb4>
  40753e:	fba0 ce02 	umull	ip, lr, r0, r2
  407542:	f04f 0500 	mov.w	r5, #0
  407546:	fbe1 e502 	umlal	lr, r5, r1, r2
  40754a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40754e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407552:	f04f 0600 	mov.w	r6, #0
  407556:	fbe1 5603 	umlal	r5, r6, r1, r3
  40755a:	f09c 0f00 	teq	ip, #0
  40755e:	bf18      	it	ne
  407560:	f04e 0e01 	orrne.w	lr, lr, #1
  407564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40756c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407570:	d204      	bcs.n	40757c <__aeabi_dmul+0x80>
  407572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407576:	416d      	adcs	r5, r5
  407578:	eb46 0606 	adc.w	r6, r6, r6
  40757c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40758c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407594:	bf88      	it	hi
  407596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40759a:	d81e      	bhi.n	4075da <__aeabi_dmul+0xde>
  40759c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4075a0:	bf08      	it	eq
  4075a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4075a6:	f150 0000 	adcs.w	r0, r0, #0
  4075aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4075ae:	bd70      	pop	{r4, r5, r6, pc}
  4075b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4075b4:	ea46 0101 	orr.w	r1, r6, r1
  4075b8:	ea40 0002 	orr.w	r0, r0, r2
  4075bc:	ea81 0103 	eor.w	r1, r1, r3
  4075c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4075c4:	bfc2      	ittt	gt
  4075c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4075ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4075ce:	bd70      	popgt	{r4, r5, r6, pc}
  4075d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4075d4:	f04f 0e00 	mov.w	lr, #0
  4075d8:	3c01      	subs	r4, #1
  4075da:	f300 80ab 	bgt.w	407734 <__aeabi_dmul+0x238>
  4075de:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4075e2:	bfde      	ittt	le
  4075e4:	2000      	movle	r0, #0
  4075e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4075ea:	bd70      	pople	{r4, r5, r6, pc}
  4075ec:	f1c4 0400 	rsb	r4, r4, #0
  4075f0:	3c20      	subs	r4, #32
  4075f2:	da35      	bge.n	407660 <__aeabi_dmul+0x164>
  4075f4:	340c      	adds	r4, #12
  4075f6:	dc1b      	bgt.n	407630 <__aeabi_dmul+0x134>
  4075f8:	f104 0414 	add.w	r4, r4, #20
  4075fc:	f1c4 0520 	rsb	r5, r4, #32
  407600:	fa00 f305 	lsl.w	r3, r0, r5
  407604:	fa20 f004 	lsr.w	r0, r0, r4
  407608:	fa01 f205 	lsl.w	r2, r1, r5
  40760c:	ea40 0002 	orr.w	r0, r0, r2
  407610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40761c:	fa21 f604 	lsr.w	r6, r1, r4
  407620:	eb42 0106 	adc.w	r1, r2, r6
  407624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407628:	bf08      	it	eq
  40762a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40762e:	bd70      	pop	{r4, r5, r6, pc}
  407630:	f1c4 040c 	rsb	r4, r4, #12
  407634:	f1c4 0520 	rsb	r5, r4, #32
  407638:	fa00 f304 	lsl.w	r3, r0, r4
  40763c:	fa20 f005 	lsr.w	r0, r0, r5
  407640:	fa01 f204 	lsl.w	r2, r1, r4
  407644:	ea40 0002 	orr.w	r0, r0, r2
  407648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40764c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407650:	f141 0100 	adc.w	r1, r1, #0
  407654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407658:	bf08      	it	eq
  40765a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40765e:	bd70      	pop	{r4, r5, r6, pc}
  407660:	f1c4 0520 	rsb	r5, r4, #32
  407664:	fa00 f205 	lsl.w	r2, r0, r5
  407668:	ea4e 0e02 	orr.w	lr, lr, r2
  40766c:	fa20 f304 	lsr.w	r3, r0, r4
  407670:	fa01 f205 	lsl.w	r2, r1, r5
  407674:	ea43 0302 	orr.w	r3, r3, r2
  407678:	fa21 f004 	lsr.w	r0, r1, r4
  40767c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407680:	fa21 f204 	lsr.w	r2, r1, r4
  407684:	ea20 0002 	bic.w	r0, r0, r2
  407688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40768c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407690:	bf08      	it	eq
  407692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407696:	bd70      	pop	{r4, r5, r6, pc}
  407698:	f094 0f00 	teq	r4, #0
  40769c:	d10f      	bne.n	4076be <__aeabi_dmul+0x1c2>
  40769e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4076a2:	0040      	lsls	r0, r0, #1
  4076a4:	eb41 0101 	adc.w	r1, r1, r1
  4076a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4076ac:	bf08      	it	eq
  4076ae:	3c01      	subeq	r4, #1
  4076b0:	d0f7      	beq.n	4076a2 <__aeabi_dmul+0x1a6>
  4076b2:	ea41 0106 	orr.w	r1, r1, r6
  4076b6:	f095 0f00 	teq	r5, #0
  4076ba:	bf18      	it	ne
  4076bc:	4770      	bxne	lr
  4076be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4076c2:	0052      	lsls	r2, r2, #1
  4076c4:	eb43 0303 	adc.w	r3, r3, r3
  4076c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4076cc:	bf08      	it	eq
  4076ce:	3d01      	subeq	r5, #1
  4076d0:	d0f7      	beq.n	4076c2 <__aeabi_dmul+0x1c6>
  4076d2:	ea43 0306 	orr.w	r3, r3, r6
  4076d6:	4770      	bx	lr
  4076d8:	ea94 0f0c 	teq	r4, ip
  4076dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4076e0:	bf18      	it	ne
  4076e2:	ea95 0f0c 	teqne	r5, ip
  4076e6:	d00c      	beq.n	407702 <__aeabi_dmul+0x206>
  4076e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076ec:	bf18      	it	ne
  4076ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076f2:	d1d1      	bne.n	407698 <__aeabi_dmul+0x19c>
  4076f4:	ea81 0103 	eor.w	r1, r1, r3
  4076f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076fc:	f04f 0000 	mov.w	r0, #0
  407700:	bd70      	pop	{r4, r5, r6, pc}
  407702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407706:	bf06      	itte	eq
  407708:	4610      	moveq	r0, r2
  40770a:	4619      	moveq	r1, r3
  40770c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407710:	d019      	beq.n	407746 <__aeabi_dmul+0x24a>
  407712:	ea94 0f0c 	teq	r4, ip
  407716:	d102      	bne.n	40771e <__aeabi_dmul+0x222>
  407718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40771c:	d113      	bne.n	407746 <__aeabi_dmul+0x24a>
  40771e:	ea95 0f0c 	teq	r5, ip
  407722:	d105      	bne.n	407730 <__aeabi_dmul+0x234>
  407724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407728:	bf1c      	itt	ne
  40772a:	4610      	movne	r0, r2
  40772c:	4619      	movne	r1, r3
  40772e:	d10a      	bne.n	407746 <__aeabi_dmul+0x24a>
  407730:	ea81 0103 	eor.w	r1, r1, r3
  407734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40773c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407740:	f04f 0000 	mov.w	r0, #0
  407744:	bd70      	pop	{r4, r5, r6, pc}
  407746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40774a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40774e:	bd70      	pop	{r4, r5, r6, pc}

00407750 <__aeabi_ddiv>:
  407750:	b570      	push	{r4, r5, r6, lr}
  407752:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40775a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40775e:	bf1d      	ittte	ne
  407760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407764:	ea94 0f0c 	teqne	r4, ip
  407768:	ea95 0f0c 	teqne	r5, ip
  40776c:	f000 f8a7 	bleq	4078be <__aeabi_ddiv+0x16e>
  407770:	eba4 0405 	sub.w	r4, r4, r5
  407774:	ea81 0e03 	eor.w	lr, r1, r3
  407778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40777c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407780:	f000 8088 	beq.w	407894 <__aeabi_ddiv+0x144>
  407784:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40778c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407794:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40779c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4077a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4077a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4077a8:	429d      	cmp	r5, r3
  4077aa:	bf08      	it	eq
  4077ac:	4296      	cmpeq	r6, r2
  4077ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4077b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4077b6:	d202      	bcs.n	4077be <__aeabi_ddiv+0x6e>
  4077b8:	085b      	lsrs	r3, r3, #1
  4077ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4077be:	1ab6      	subs	r6, r6, r2
  4077c0:	eb65 0503 	sbc.w	r5, r5, r3
  4077c4:	085b      	lsrs	r3, r3, #1
  4077c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4077ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4077d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077da:	bf22      	ittt	cs
  4077dc:	1ab6      	subcs	r6, r6, r2
  4077de:	4675      	movcs	r5, lr
  4077e0:	ea40 000c 	orrcs.w	r0, r0, ip
  4077e4:	085b      	lsrs	r3, r3, #1
  4077e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4077ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077f2:	bf22      	ittt	cs
  4077f4:	1ab6      	subcs	r6, r6, r2
  4077f6:	4675      	movcs	r5, lr
  4077f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4077fc:	085b      	lsrs	r3, r3, #1
  4077fe:	ea4f 0232 	mov.w	r2, r2, rrx
  407802:	ebb6 0e02 	subs.w	lr, r6, r2
  407806:	eb75 0e03 	sbcs.w	lr, r5, r3
  40780a:	bf22      	ittt	cs
  40780c:	1ab6      	subcs	r6, r6, r2
  40780e:	4675      	movcs	r5, lr
  407810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407814:	085b      	lsrs	r3, r3, #1
  407816:	ea4f 0232 	mov.w	r2, r2, rrx
  40781a:	ebb6 0e02 	subs.w	lr, r6, r2
  40781e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407822:	bf22      	ittt	cs
  407824:	1ab6      	subcs	r6, r6, r2
  407826:	4675      	movcs	r5, lr
  407828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40782c:	ea55 0e06 	orrs.w	lr, r5, r6
  407830:	d018      	beq.n	407864 <__aeabi_ddiv+0x114>
  407832:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40783a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40783e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40784a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40784e:	d1c0      	bne.n	4077d2 <__aeabi_ddiv+0x82>
  407850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407854:	d10b      	bne.n	40786e <__aeabi_ddiv+0x11e>
  407856:	ea41 0100 	orr.w	r1, r1, r0
  40785a:	f04f 0000 	mov.w	r0, #0
  40785e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407862:	e7b6      	b.n	4077d2 <__aeabi_ddiv+0x82>
  407864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407868:	bf04      	itt	eq
  40786a:	4301      	orreq	r1, r0
  40786c:	2000      	moveq	r0, #0
  40786e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407872:	bf88      	it	hi
  407874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407878:	f63f aeaf 	bhi.w	4075da <__aeabi_dmul+0xde>
  40787c:	ebb5 0c03 	subs.w	ip, r5, r3
  407880:	bf04      	itt	eq
  407882:	ebb6 0c02 	subseq.w	ip, r6, r2
  407886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40788a:	f150 0000 	adcs.w	r0, r0, #0
  40788e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407892:	bd70      	pop	{r4, r5, r6, pc}
  407894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40789c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4078a0:	bfc2      	ittt	gt
  4078a2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4078a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4078aa:	bd70      	popgt	{r4, r5, r6, pc}
  4078ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4078b0:	f04f 0e00 	mov.w	lr, #0
  4078b4:	3c01      	subs	r4, #1
  4078b6:	e690      	b.n	4075da <__aeabi_dmul+0xde>
  4078b8:	ea45 0e06 	orr.w	lr, r5, r6
  4078bc:	e68d      	b.n	4075da <__aeabi_dmul+0xde>
  4078be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4078c2:	ea94 0f0c 	teq	r4, ip
  4078c6:	bf08      	it	eq
  4078c8:	ea95 0f0c 	teqeq	r5, ip
  4078cc:	f43f af3b 	beq.w	407746 <__aeabi_dmul+0x24a>
  4078d0:	ea94 0f0c 	teq	r4, ip
  4078d4:	d10a      	bne.n	4078ec <__aeabi_ddiv+0x19c>
  4078d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4078da:	f47f af34 	bne.w	407746 <__aeabi_dmul+0x24a>
  4078de:	ea95 0f0c 	teq	r5, ip
  4078e2:	f47f af25 	bne.w	407730 <__aeabi_dmul+0x234>
  4078e6:	4610      	mov	r0, r2
  4078e8:	4619      	mov	r1, r3
  4078ea:	e72c      	b.n	407746 <__aeabi_dmul+0x24a>
  4078ec:	ea95 0f0c 	teq	r5, ip
  4078f0:	d106      	bne.n	407900 <__aeabi_ddiv+0x1b0>
  4078f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4078f6:	f43f aefd 	beq.w	4076f4 <__aeabi_dmul+0x1f8>
  4078fa:	4610      	mov	r0, r2
  4078fc:	4619      	mov	r1, r3
  4078fe:	e722      	b.n	407746 <__aeabi_dmul+0x24a>
  407900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407904:	bf18      	it	ne
  407906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40790a:	f47f aec5 	bne.w	407698 <__aeabi_dmul+0x19c>
  40790e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407912:	f47f af0d 	bne.w	407730 <__aeabi_dmul+0x234>
  407916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40791a:	f47f aeeb 	bne.w	4076f4 <__aeabi_dmul+0x1f8>
  40791e:	e712      	b.n	407746 <__aeabi_dmul+0x24a>

00407920 <__gedf2>:
  407920:	f04f 3cff 	mov.w	ip, #4294967295
  407924:	e006      	b.n	407934 <__cmpdf2+0x4>
  407926:	bf00      	nop

00407928 <__ledf2>:
  407928:	f04f 0c01 	mov.w	ip, #1
  40792c:	e002      	b.n	407934 <__cmpdf2+0x4>
  40792e:	bf00      	nop

00407930 <__cmpdf2>:
  407930:	f04f 0c01 	mov.w	ip, #1
  407934:	f84d cd04 	str.w	ip, [sp, #-4]!
  407938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40793c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407940:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407944:	bf18      	it	ne
  407946:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40794a:	d01b      	beq.n	407984 <__cmpdf2+0x54>
  40794c:	b001      	add	sp, #4
  40794e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407952:	bf0c      	ite	eq
  407954:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407958:	ea91 0f03 	teqne	r1, r3
  40795c:	bf02      	ittt	eq
  40795e:	ea90 0f02 	teqeq	r0, r2
  407962:	2000      	moveq	r0, #0
  407964:	4770      	bxeq	lr
  407966:	f110 0f00 	cmn.w	r0, #0
  40796a:	ea91 0f03 	teq	r1, r3
  40796e:	bf58      	it	pl
  407970:	4299      	cmppl	r1, r3
  407972:	bf08      	it	eq
  407974:	4290      	cmpeq	r0, r2
  407976:	bf2c      	ite	cs
  407978:	17d8      	asrcs	r0, r3, #31
  40797a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40797e:	f040 0001 	orr.w	r0, r0, #1
  407982:	4770      	bx	lr
  407984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40798c:	d102      	bne.n	407994 <__cmpdf2+0x64>
  40798e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407992:	d107      	bne.n	4079a4 <__cmpdf2+0x74>
  407994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40799c:	d1d6      	bne.n	40794c <__cmpdf2+0x1c>
  40799e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4079a2:	d0d3      	beq.n	40794c <__cmpdf2+0x1c>
  4079a4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4079a8:	4770      	bx	lr
  4079aa:	bf00      	nop

004079ac <__aeabi_cdrcmple>:
  4079ac:	4684      	mov	ip, r0
  4079ae:	4610      	mov	r0, r2
  4079b0:	4662      	mov	r2, ip
  4079b2:	468c      	mov	ip, r1
  4079b4:	4619      	mov	r1, r3
  4079b6:	4663      	mov	r3, ip
  4079b8:	e000      	b.n	4079bc <__aeabi_cdcmpeq>
  4079ba:	bf00      	nop

004079bc <__aeabi_cdcmpeq>:
  4079bc:	b501      	push	{r0, lr}
  4079be:	f7ff ffb7 	bl	407930 <__cmpdf2>
  4079c2:	2800      	cmp	r0, #0
  4079c4:	bf48      	it	mi
  4079c6:	f110 0f00 	cmnmi.w	r0, #0
  4079ca:	bd01      	pop	{r0, pc}

004079cc <__aeabi_dcmpeq>:
  4079cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079d0:	f7ff fff4 	bl	4079bc <__aeabi_cdcmpeq>
  4079d4:	bf0c      	ite	eq
  4079d6:	2001      	moveq	r0, #1
  4079d8:	2000      	movne	r0, #0
  4079da:	f85d fb08 	ldr.w	pc, [sp], #8
  4079de:	bf00      	nop

004079e0 <__aeabi_dcmplt>:
  4079e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079e4:	f7ff ffea 	bl	4079bc <__aeabi_cdcmpeq>
  4079e8:	bf34      	ite	cc
  4079ea:	2001      	movcc	r0, #1
  4079ec:	2000      	movcs	r0, #0
  4079ee:	f85d fb08 	ldr.w	pc, [sp], #8
  4079f2:	bf00      	nop

004079f4 <__aeabi_dcmple>:
  4079f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079f8:	f7ff ffe0 	bl	4079bc <__aeabi_cdcmpeq>
  4079fc:	bf94      	ite	ls
  4079fe:	2001      	movls	r0, #1
  407a00:	2000      	movhi	r0, #0
  407a02:	f85d fb08 	ldr.w	pc, [sp], #8
  407a06:	bf00      	nop

00407a08 <__aeabi_dcmpge>:
  407a08:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a0c:	f7ff ffce 	bl	4079ac <__aeabi_cdrcmple>
  407a10:	bf94      	ite	ls
  407a12:	2001      	movls	r0, #1
  407a14:	2000      	movhi	r0, #0
  407a16:	f85d fb08 	ldr.w	pc, [sp], #8
  407a1a:	bf00      	nop

00407a1c <__aeabi_dcmpgt>:
  407a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a20:	f7ff ffc4 	bl	4079ac <__aeabi_cdrcmple>
  407a24:	bf34      	ite	cc
  407a26:	2001      	movcc	r0, #1
  407a28:	2000      	movcs	r0, #0
  407a2a:	f85d fb08 	ldr.w	pc, [sp], #8
  407a2e:	bf00      	nop

00407a30 <__aeabi_dcmpun>:
  407a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a38:	d102      	bne.n	407a40 <__aeabi_dcmpun+0x10>
  407a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407a3e:	d10a      	bne.n	407a56 <__aeabi_dcmpun+0x26>
  407a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a48:	d102      	bne.n	407a50 <__aeabi_dcmpun+0x20>
  407a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407a4e:	d102      	bne.n	407a56 <__aeabi_dcmpun+0x26>
  407a50:	f04f 0000 	mov.w	r0, #0
  407a54:	4770      	bx	lr
  407a56:	f04f 0001 	mov.w	r0, #1
  407a5a:	4770      	bx	lr

00407a5c <__aeabi_d2iz>:
  407a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407a64:	d215      	bcs.n	407a92 <__aeabi_d2iz+0x36>
  407a66:	d511      	bpl.n	407a8c <__aeabi_d2iz+0x30>
  407a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407a70:	d912      	bls.n	407a98 <__aeabi_d2iz+0x3c>
  407a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407a82:	fa23 f002 	lsr.w	r0, r3, r2
  407a86:	bf18      	it	ne
  407a88:	4240      	negne	r0, r0
  407a8a:	4770      	bx	lr
  407a8c:	f04f 0000 	mov.w	r0, #0
  407a90:	4770      	bx	lr
  407a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a96:	d105      	bne.n	407aa4 <__aeabi_d2iz+0x48>
  407a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a9c:	bf08      	it	eq
  407a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407aa2:	4770      	bx	lr
  407aa4:	f04f 0000 	mov.w	r0, #0
  407aa8:	4770      	bx	lr
  407aaa:	bf00      	nop
  407aac:	0001c200 	.word	0x0001c200
  407ab0:	000000c0 	.word	0x000000c0
  407ab4:	00000800 	.word	0x00000800
	...
  407ac4:	736f6c63 	.word	0x736f6c63
  407ac8:	6c612065 	.word	0x6c612065
  407acc:	000a0d6c 	.word	0x000a0d6c
  407ad0:	70747468 	.word	0x70747468
  407ad4:	736f705f 	.word	0x736f705f
  407ad8:	6f2d2074 	.word	0x6f2d2074
  407adc:	74746820 	.word	0x74746820
  407ae0:	2f3a7370 	.word	0x2f3a7370
  407ae4:	6769622f 	.word	0x6769622f
  407ae8:	746f7262 	.word	0x746f7262
  407aec:	73726568 	.word	0x73726568
  407af0:	2e736565 	.word	0x2e736565
  407af4:	702f656d 	.word	0x702f656d
  407af8:	5f74736f 	.word	0x5f74736f
  407afc:	67616d69 	.word	0x67616d69
  407b00:	70612065 	.word	0x70612065
  407b04:	63696c70 	.word	0x63696c70
  407b08:	6f697461 	.word	0x6f697461
  407b0c:	736a2f6e 	.word	0x736a2f6e
  407b10:	0a0d6e6f 	.word	0x0a0d6e6f
  407b14:	00000000 	.word	0x00000000
  407b18:	70747468 	.word	0x70747468
  407b1c:	6464615f 	.word	0x6464615f
  407b20:	6165685f 	.word	0x6165685f
  407b24:	20726564 	.word	0x20726564
  407b28:	656d2030 	.word	0x656d2030
  407b2c:	67617373 	.word	0x67617373
  407b30:	79742d65 	.word	0x79742d65
  407b34:	69206570 	.word	0x69206570
  407b38:	6567616d 	.word	0x6567616d
  407b3c:	6e69622d 	.word	0x6e69622d
  407b40:	00000a0d 	.word	0x00000a0d
  407b44:	74697277 	.word	0x74697277
  407b48:	20302065 	.word	0x20302065
  407b4c:	0a0d6425 	.word	0x0a0d6425
  407b50:	00000000 	.word	0x00000000
  407b54:	70747468 	.word	0x70747468
  407b58:	6165725f 	.word	0x6165725f
  407b5c:	74735f64 	.word	0x74735f64
  407b60:	73757461 	.word	0x73757461
  407b64:	0a0d3020 	.word	0x0a0d3020
  407b68:	00000000 	.word	0x00000000
  407b6c:	6e65704f 	.word	0x6e65704f
  407b70:	00006465 	.word	0x00006465
  407b74:	73626577 	.word	0x73626577
  407b78:	656b636f 	.word	0x656b636f
  407b7c:	6c635f74 	.word	0x6c635f74
  407b80:	746e6569 	.word	0x746e6569
  407b84:	20662d20 	.word	0x20662d20
  407b88:	206e6962 	.word	0x206e6962
  407b8c:	3a737377 	.word	0x3a737377
  407b90:	69622f2f 	.word	0x69622f2f
  407b94:	6f726267 	.word	0x6f726267
  407b98:	72656874 	.word	0x72656874
  407b9c:	73656573 	.word	0x73656573
  407ba0:	2f656d2e 	.word	0x2f656d2e
  407ba4:	72756f73 	.word	0x72756f73
  407ba8:	615f6563 	.word	0x615f6563
  407bac:	6f696475 	.word	0x6f696475
  407bb0:	636f735f 	.word	0x636f735f
  407bb4:	0d74656b 	.word	0x0d74656b
  407bb8:	0000000a 	.word	0x0000000a
  407bbc:	65704f5b 	.word	0x65704f5b
  407bc0:	3a64656e 	.word	0x3a64656e
  407bc4:	00000020 	.word	0x00000020
  407bc8:	74697277 	.word	0x74697277
  407bcc:	64252065 	.word	0x64252065
  407bd0:	0d642520 	.word	0x0d642520
  407bd4:	0000000a 	.word	0x0000000a
  407bd8:	20656466 	.word	0x20656466
  407bdc:	6d746162 	.word	0x6d746162
  407be0:	742e6e61 	.word	0x742e6e61
  407be4:	0a0d7478 	.word	0x0a0d7478
  407be8:	00000000 	.word	0x00000000
  407bec:	20726366 	.word	0x20726366
  407bf0:	6d746162 	.word	0x6d746162
  407bf4:	742e6e61 	.word	0x742e6e61
  407bf8:	25207478 	.word	0x25207478
  407bfc:	000a0d64 	.word	0x000a0d64
  407c00:	75746573 	.word	0x75746573
  407c04:	65772070 	.word	0x65772070
  407c08:	000a0d62 	.word	0x000a0d62
  407c0c:	7373415b 	.word	0x7373415b
  407c10:	6169636f 	.word	0x6169636f
  407c14:	5d646574 	.word	0x5d646574
  407c18:	00000a0d 	.word	0x00000a0d
  407c1c:	20746567 	.word	0x20746567
  407c20:	74737973 	.word	0x74737973
  407c24:	732e6d65 	.word	0x732e6d65
  407c28:	6d656661 	.word	0x6d656661
  407c2c:	2e65646f 	.word	0x2e65646f
  407c30:	74617473 	.word	0x74617473
  407c34:	0a0d7375 	.word	0x0a0d7375
  407c38:	00000000 	.word	0x00000000
  407c3c:	6c756166 	.word	0x6c756166
  407c40:	705f7374 	.word	0x705f7374
  407c44:	746e6972 	.word	0x746e6972
  407c48:	00000a0d 	.word	0x00000a0d
  407c4c:	6c756166 	.word	0x6c756166
  407c50:	725f7374 	.word	0x725f7374
  407c54:	74657365 	.word	0x74657365
  407c58:	00000a0d 	.word	0x00000a0d
  407c5c:	6f626572 	.word	0x6f626572
  407c60:	0a0d746f 	.word	0x0a0d746f
  407c64:	00000000 	.word	0x00000000
  407c68:	20746573 	.word	0x20746573
  407c6c:	63207973 	.word	0x63207973
  407c70:	6f207020 	.word	0x6f207020
  407c74:	0a0d6666 	.word	0x0a0d6666
  407c78:	00000000 	.word	0x00000000

00407c7c <_global_impure_ptr>:
  407c7c:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  407c8c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  407c9c:	46454443 00000000 33323130 37363534     CDEF....01234567
  407cac:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407cbc:	0000296c 00000030                       l)..0...

00407cc4 <blanks.7208>:
  407cc4:	20202020 20202020 20202020 20202020                     

00407cd4 <zeroes.7209>:
  407cd4:	30303030 30303030 30303030 30303030     0000000000000000
  407ce4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  407cf4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  407d04:	00000000                                ....

00407d08 <__mprec_bigtens>:
  407d08:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407d18:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407d28:	7f73bf3c 75154fdd                       <.s..O.u

00407d30 <__mprec_tens>:
  407d30:	00000000 3ff00000 00000000 40240000     .......?......$@
  407d40:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407d50:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407d60:	00000000 412e8480 00000000 416312d0     .......A......cA
  407d70:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407d80:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407d90:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407da0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407db0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407dc0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407dd0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407de0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407df0:	79d99db4 44ea7843                       ...yCx.D

00407df8 <p05.6040>:
  407df8:	00000005 00000019 0000007d              ........}...

00407e04 <_ctype_>:
  407e04:	20202000 20202020 28282020 20282828     .         ((((( 
  407e14:	20202020 20202020 20202020 20202020                     
  407e24:	10108820 10101010 10101010 10101010      ...............
  407e34:	04040410 04040404 10040404 10101010     ................
  407e44:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407e54:	01010101 01010101 01010101 10101010     ................
  407e64:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407e74:	02020202 02020202 02020202 10101010     ................
  407e84:	00000020 00000000 00000000 00000000      ...............
	...

00407f08 <_init>:
  407f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f0a:	bf00      	nop
  407f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f0e:	bc08      	pop	{r3}
  407f10:	469e      	mov	lr, r3
  407f12:	4770      	bx	lr

00407f14 <__init_array_start>:
  407f14:	00404a31 	.word	0x00404a31

00407f18 <__frame_dummy_init_array_entry>:
  407f18:	004000f1                                ..@.

00407f1c <_fini>:
  407f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f1e:	bf00      	nop
  407f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407f22:	bc08      	pop	{r3}
  407f24:	469e      	mov	lr, r3
  407f26:	4770      	bx	lr

00407f28 <__fini_array_start>:
  407f28:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__global_locale>:
20000440:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000460:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000480:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004a0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004c0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004e0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000500:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000520:	706d 0040 61e9 0040 0000 0000 7e04 0040     mp@..a@......~@.
20000530:	7d00 0040 7ca0 0040 7ca0 0040 7ca0 0040     .}@..|@..|@..|@.
20000540:	7ca0 0040 7ca0 0040 7ca0 0040 7ca0 0040     .|@..|@..|@..|@.
20000550:	7ca0 0040 7ca0 0040 ffff ffff ffff ffff     .|@..|@.........
20000560:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000588:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005ac <__malloc_av_>:
	...
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 

200009b4 <__malloc_sbrk_base>:
200009b4:	ffff ffff                                   ....

200009b8 <__malloc_trim_threshold>:
200009b8:	0000 0002                                   ....
