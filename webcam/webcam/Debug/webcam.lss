
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009b50  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409b50  00409b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000884  20000000  00409b58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ce18  20000884  0040a3dc  00020884  2**2
                  ALLOC
  4 .stack        00003004  2000d69c  004171f4  00020884  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ae  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000e48f  00000000  00000000  00020907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002499  00000000  00000000  0002ed96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000084b6  00000000  00000000  0003122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e88  00000000  00000000  000396e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d90  00000000  00000000  0003a56d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000897d  00000000  00000000  0003b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010f4c  00000000  00000000  00043c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004fe73  00000000  00000000  00054bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004708  00000000  00000000  000a4a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200106a0 	.word	0x200106a0
  400004:	00403591 	.word	0x00403591
  400008:	00403659 	.word	0x00403659
  40000c:	00403659 	.word	0x00403659
  400010:	00403659 	.word	0x00403659
  400014:	00403659 	.word	0x00403659
  400018:	00403659 	.word	0x00403659
	...
  40002c:	00403659 	.word	0x00403659
  400030:	00403659 	.word	0x00403659
  400034:	00000000 	.word	0x00000000
  400038:	00403659 	.word	0x00403659
  40003c:	00403659 	.word	0x00403659
  400040:	00403659 	.word	0x00403659
  400044:	00403659 	.word	0x00403659
  400048:	00403659 	.word	0x00403659
  40004c:	00403659 	.word	0x00403659
  400050:	00403659 	.word	0x00403659
  400054:	00403659 	.word	0x00403659
  400058:	00403659 	.word	0x00403659
  40005c:	00000000 	.word	0x00000000
  400060:	00403659 	.word	0x00403659
  400064:	00403659 	.word	0x00403659
  400068:	00000000 	.word	0x00000000
  40006c:	004009b1 	.word	0x004009b1
  400070:	004009c9 	.word	0x004009c9
  400074:	00000000 	.word	0x00000000
  400078:	00401de9 	.word	0x00401de9
  40007c:	00403659 	.word	0x00403659
	...
  400088:	00403659 	.word	0x00403659
  40008c:	00403659 	.word	0x00403659
  400090:	00403659 	.word	0x00403659
  400094:	00403659 	.word	0x00403659
  400098:	00400709 	.word	0x00400709
  40009c:	00401c29 	.word	0x00401c29
  4000a0:	00403659 	.word	0x00403659
  4000a4:	00403659 	.word	0x00403659
	...
  4000b4:	00403659 	.word	0x00403659
  4000b8:	00403659 	.word	0x00403659
  4000bc:	00403659 	.word	0x00403659
  4000c0:	00403659 	.word	0x00403659
  4000c4:	00403659 	.word	0x00403659
  4000c8:	00403659 	.word	0x00403659

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000884 	.word	0x20000884
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409b58 	.word	0x00409b58

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000888 	.word	0x20000888
  40011c:	00409b58 	.word	0x00409b58
  400120:	00409b58 	.word	0x00409b58
  400124:	00000000 	.word	0x00000000

00400128 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400128:	b480      	push	{r7}
  40012a:	b085      	sub	sp, #20
  40012c:	af00      	add	r7, sp, #0
  40012e:	60f8      	str	r0, [r7, #12]
  400130:	60b9      	str	r1, [r7, #8]
  400132:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400134:	687b      	ldr	r3, [r7, #4]
  400136:	2b00      	cmp	r3, #0
  400138:	d00f      	beq.n	40015a <ssc_set_clock_divider+0x32>
  40013a:	68bb      	ldr	r3, [r7, #8]
  40013c:	2b00      	cmp	r3, #0
  40013e:	d00c      	beq.n	40015a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400140:	687a      	ldr	r2, [r7, #4]
  400142:	68bb      	ldr	r3, [r7, #8]
  400144:	441a      	add	r2, r3
  400146:	68bb      	ldr	r3, [r7, #8]
  400148:	fbb2 f3f3 	udiv	r3, r2, r3
  40014c:	085b      	lsrs	r3, r3, #1
  40014e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400156:	2300      	movs	r3, #0
  400158:	e000      	b.n	40015c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40015a:	2301      	movs	r3, #1
	}
}
  40015c:	4618      	mov	r0, r3
  40015e:	3714      	adds	r7, #20
  400160:	46bd      	mov	sp, r7
  400162:	bc80      	pop	{r7}
  400164:	4770      	bx	lr
  400166:	bf00      	nop

00400168 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400168:	b580      	push	{r7, lr}
  40016a:	b092      	sub	sp, #72	; 0x48
  40016c:	af00      	add	r7, sp, #0
  40016e:	60f8      	str	r0, [r7, #12]
  400170:	60b9      	str	r1, [r7, #8]
  400172:	607a      	str	r2, [r7, #4]
  400174:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40017a:	221c      	movs	r2, #28
  40017c:	2100      	movs	r1, #0
  40017e:	4618      	mov	r0, r3
  400180:	4b36      	ldr	r3, [pc, #216]	; (40025c <ssc_i2s_set_receiver+0xf4>)
  400182:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400184:	f107 0310 	add.w	r3, r7, #16
  400188:	221c      	movs	r2, #28
  40018a:	2100      	movs	r1, #0
  40018c:	4618      	mov	r0, r3
  40018e:	4b33      	ldr	r3, [pc, #204]	; (40025c <ssc_i2s_set_receiver+0xf4>)
  400190:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  400192:	683b      	ldr	r3, [r7, #0]
  400194:	2b02      	cmp	r3, #2
  400196:	d004      	beq.n	4001a2 <ssc_i2s_set_receiver+0x3a>
  400198:	2b03      	cmp	r3, #3
  40019a:	d00a      	beq.n	4001b2 <ssc_i2s_set_receiver+0x4a>
  40019c:	2b01      	cmp	r3, #1
  40019e:	d004      	beq.n	4001aa <ssc_i2s_set_receiver+0x42>
  4001a0:	e00b      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001a6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001a8:	e007      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001ae:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b0:	e003      	b.n	4001ba <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ba:	68bb      	ldr	r3, [r7, #8]
  4001bc:	f003 0302 	and.w	r3, r3, #2
  4001c0:	2b00      	cmp	r3, #0
  4001c2:	d022      	beq.n	40020a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001c4:	683b      	ldr	r3, [r7, #0]
  4001c6:	2b03      	cmp	r3, #3
  4001c8:	d102      	bne.n	4001d0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001ca:	2301      	movs	r3, #1
  4001cc:	61bb      	str	r3, [r7, #24]
  4001ce:	e001      	b.n	4001d4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001d0:	2300      	movs	r3, #0
  4001d2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001d4:	2300      	movs	r3, #0
  4001d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001d8:	2304      	movs	r3, #4
  4001da:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001dc:	2300      	movs	r3, #0
  4001de:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001e4:	2301      	movs	r3, #1
  4001e6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001ea:	3b01      	subs	r3, #1
  4001ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001f0:	3b01      	subs	r3, #1
  4001f2:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  4001f4:	2380      	movs	r3, #128	; 0x80
  4001f6:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  4001fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400202:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400204:	2300      	movs	r3, #0
  400206:	62bb      	str	r3, [r7, #40]	; 0x28
  400208:	e01b      	b.n	400242 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40020a:	68bb      	ldr	r3, [r7, #8]
  40020c:	f003 0308 	and.w	r3, r3, #8
  400210:	2b00      	cmp	r3, #0
  400212:	d016      	beq.n	400242 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400214:	687b      	ldr	r3, [r7, #4]
  400216:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400218:	2300      	movs	r3, #0
  40021a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40021c:	2300      	movs	r3, #0
  40021e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400220:	2300      	movs	r3, #0
  400222:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400224:	2301      	movs	r3, #1
  400226:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400228:	2300      	movs	r3, #0
  40022a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40022c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40022e:	3b01      	subs	r3, #1
  400230:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400232:	2380      	movs	r3, #128	; 0x80
  400234:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400236:	2300      	movs	r3, #0
  400238:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40023a:	2300      	movs	r3, #0
  40023c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40023e:	2300      	movs	r3, #0
  400240:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400242:	f107 0210 	add.w	r2, r7, #16
  400246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40024a:	4619      	mov	r1, r3
  40024c:	68f8      	ldr	r0, [r7, #12]
  40024e:	4b04      	ldr	r3, [pc, #16]	; (400260 <ssc_i2s_set_receiver+0xf8>)
  400250:	4798      	blx	r3
}
  400252:	bf00      	nop
  400254:	3748      	adds	r7, #72	; 0x48
  400256:	46bd      	mov	sp, r7
  400258:	bd80      	pop	{r7, pc}
  40025a:	bf00      	nop
  40025c:	00403d09 	.word	0x00403d09
  400260:	004002b5 	.word	0x004002b5

00400264 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400264:	b480      	push	{r7}
  400266:	b083      	sub	sp, #12
  400268:	af00      	add	r7, sp, #0
  40026a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40026c:	687b      	ldr	r3, [r7, #4]
  40026e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400272:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400274:	687b      	ldr	r3, [r7, #4]
  400276:	2200      	movs	r2, #0
  400278:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	2200      	movs	r2, #0
  40027e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400280:	687b      	ldr	r3, [r7, #4]
  400282:	2200      	movs	r2, #0
  400284:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400286:	687b      	ldr	r3, [r7, #4]
  400288:	2200      	movs	r2, #0
  40028a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40028c:	687b      	ldr	r3, [r7, #4]
  40028e:	2200      	movs	r2, #0
  400290:	61da      	str	r2, [r3, #28]
}
  400292:	bf00      	nop
  400294:	370c      	adds	r7, #12
  400296:	46bd      	mov	sp, r7
  400298:	bc80      	pop	{r7}
  40029a:	4770      	bx	lr

0040029c <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  40029c:	b480      	push	{r7}
  40029e:	b083      	sub	sp, #12
  4002a0:	af00      	add	r7, sp, #0
  4002a2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002a4:	687b      	ldr	r3, [r7, #4]
  4002a6:	2201      	movs	r2, #1
  4002a8:	601a      	str	r2, [r3, #0]
}
  4002aa:	bf00      	nop
  4002ac:	370c      	adds	r7, #12
  4002ae:	46bd      	mov	sp, r7
  4002b0:	bc80      	pop	{r7}
  4002b2:	4770      	bx	lr

004002b4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002b4:	b480      	push	{r7}
  4002b6:	b085      	sub	sp, #20
  4002b8:	af00      	add	r7, sp, #0
  4002ba:	60f8      	str	r0, [r7, #12]
  4002bc:	60b9      	str	r1, [r7, #8]
  4002be:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002c0:	68bb      	ldr	r3, [r7, #8]
  4002c2:	2b00      	cmp	r3, #0
  4002c4:	d103      	bne.n	4002ce <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	2200      	movs	r2, #0
  4002ca:	611a      	str	r2, [r3, #16]
  4002cc:	e01c      	b.n	400308 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ce:	68fb      	ldr	r3, [r7, #12]
  4002d0:	691a      	ldr	r2, [r3, #16]
  4002d2:	68bb      	ldr	r3, [r7, #8]
  4002d4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002d6:	68bb      	ldr	r3, [r7, #8]
  4002d8:	685b      	ldr	r3, [r3, #4]
		data_frame_opt_t *p_rx_data_frame)
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002da:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002dc:	68bb      	ldr	r3, [r7, #8]
  4002de:	689b      	ldr	r3, [r3, #8]
  4002e0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	68db      	ldr	r3, [r3, #12]
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
  4002e8:	68bb      	ldr	r3, [r7, #8]
  4002ea:	699b      	ldr	r3, [r3, #24]
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
  4002ec:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002ee:	68bb      	ldr	r3, [r7, #8]
  4002f0:	691b      	ldr	r3, [r3, #16]
  4002f2:	061b      	lsls	r3, r3, #24
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
  4002f4:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  4002f6:	68bb      	ldr	r3, [r7, #8]
  4002f8:	695b      	ldr	r3, [r3, #20]
  4002fa:	041b      	lsls	r3, r3, #16
  4002fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
				p_rx_clk_opt->ul_ckg |
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400300:	430b      	orrs	r3, r1
		data_frame_opt_t *p_rx_data_frame)
{
	if (p_rx_clk_opt == NULL) {
		p_ssc->SSC_RCMR = 0;
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400302:	431a      	orrs	r2, r3
  400304:	68fb      	ldr	r3, [r7, #12]
  400306:	611a      	str	r2, [r3, #16]
				p_rx_clk_opt->ul_start_sel |
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
	}

	if (p_rx_data_frame == NULL) {
  400308:	687b      	ldr	r3, [r7, #4]
  40030a:	2b00      	cmp	r3, #0
  40030c:	d103      	bne.n	400316 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40030e:	68fb      	ldr	r3, [r7, #12]
  400310:	2200      	movs	r2, #0
  400312:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400314:	e021      	b.n	40035a <ssc_set_receiver+0xa6>
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400316:	68fb      	ldr	r3, [r7, #12]
  400318:	695a      	ldr	r2, [r3, #20]
  40031a:	687b      	ldr	r3, [r7, #4]
  40031c:	681b      	ldr	r3, [r3, #0]
  40031e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400322:	687b      	ldr	r3, [r7, #4]
  400324:	685b      	ldr	r3, [r3, #4]
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400328:	687b      	ldr	r3, [r7, #4]
  40032a:	689b      	ldr	r3, [r3, #8]
  40032c:	021b      	lsls	r3, r3, #8
  40032e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
  400332:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400334:	687b      	ldr	r3, [r7, #4]
  400336:	68db      	ldr	r3, [r3, #12]
  400338:	041b      	lsls	r3, r3, #16
  40033a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40033e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400340:	687b      	ldr	r3, [r7, #4]
  400342:	691b      	ldr	r3, [r3, #16]
  400344:	071b      	lsls	r3, r3, #28
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400346:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	695b      	ldr	r3, [r3, #20]
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40034c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
  40034e:	687b      	ldr	r3, [r7, #4]
  400350:	699b      	ldr	r3, [r3, #24]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
				p_rx_data_frame->ul_msbf |
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
  400352:	430b      	orrs	r3, r1
	}

	if (p_rx_data_frame == NULL) {
		p_ssc->SSC_RFMR = 0;
	} else {
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400354:	431a      	orrs	r2, r3
  400356:	68fb      	ldr	r3, [r7, #12]
  400358:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  40035a:	bf00      	nop
  40035c:	3714      	adds	r7, #20
  40035e:	46bd      	mov	sp, r7
  400360:	bc80      	pop	{r7}
  400362:	4770      	bx	lr

00400364 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400364:	b480      	push	{r7}
  400366:	b083      	sub	sp, #12
  400368:	af00      	add	r7, sp, #0
  40036a:	6078      	str	r0, [r7, #4]
  40036c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40036e:	687b      	ldr	r3, [r7, #4]
  400370:	683a      	ldr	r2, [r7, #0]
  400372:	645a      	str	r2, [r3, #68]	; 0x44
}
  400374:	bf00      	nop
  400376:	370c      	adds	r7, #12
  400378:	46bd      	mov	sp, r7
  40037a:	bc80      	pop	{r7}
  40037c:	4770      	bx	lr
  40037e:	bf00      	nop

00400380 <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  400380:	b480      	push	{r7}
  400382:	b083      	sub	sp, #12
  400384:	af00      	add	r7, sp, #0
  400386:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  400388:	687b      	ldr	r3, [r7, #4]
  40038a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  40038c:	4618      	mov	r0, r3
  40038e:	370c      	adds	r7, #12
  400390:	46bd      	mov	sp, r7
  400392:	bc80      	pop	{r7}
  400394:	4770      	bx	lr
  400396:	bf00      	nop

00400398 <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  400398:	b480      	push	{r7}
  40039a:	b085      	sub	sp, #20
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003a2:	f242 7310 	movw	r3, #10000	; 0x2710
  4003a6:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003a8:	e006      	b.n	4003b8 <ssc_read+0x20>
		if (!ul_timeout--) {
  4003aa:	68fb      	ldr	r3, [r7, #12]
  4003ac:	1e5a      	subs	r2, r3, #1
  4003ae:	60fa      	str	r2, [r7, #12]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d101      	bne.n	4003b8 <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003b4:	2301      	movs	r3, #1
  4003b6:	e00a      	b.n	4003ce <ssc_read+0x36>
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003b8:	687b      	ldr	r3, [r7, #4]
  4003ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003bc:	f003 0310 	and.w	r3, r3, #16
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	d0f2      	beq.n	4003aa <ssc_read+0x12>
		if (!ul_timeout--) {
			return SSC_RC_ERROR;
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	6a1a      	ldr	r2, [r3, #32]
  4003c8:	683b      	ldr	r3, [r7, #0]
  4003ca:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003cc:	2300      	movs	r3, #0
}
  4003ce:	4618      	mov	r0, r3
  4003d0:	3714      	adds	r7, #20
  4003d2:	46bd      	mov	sp, r7
  4003d4:	bc80      	pop	{r7}
  4003d6:	4770      	bx	lr

004003d8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003d8:	b480      	push	{r7}
  4003da:	b087      	sub	sp, #28
  4003dc:	af00      	add	r7, sp, #0
  4003de:	60f8      	str	r0, [r7, #12]
  4003e0:	60b9      	str	r1, [r7, #8]
  4003e2:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e4:	68fa      	ldr	r2, [r7, #12]
  4003e6:	68bb      	ldr	r3, [r7, #8]
  4003e8:	019b      	lsls	r3, r3, #6
  4003ea:	4413      	add	r3, r2
  4003ec:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4003ee:	697b      	ldr	r3, [r7, #20]
  4003f0:	2202      	movs	r2, #2
  4003f2:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4003f4:	697b      	ldr	r3, [r7, #20]
  4003f6:	f04f 32ff 	mov.w	r2, #4294967295
  4003fa:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4003fc:	697b      	ldr	r3, [r7, #20]
  4003fe:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400400:	697b      	ldr	r3, [r7, #20]
  400402:	687a      	ldr	r2, [r7, #4]
  400404:	605a      	str	r2, [r3, #4]
}
  400406:	bf00      	nop
  400408:	371c      	adds	r7, #28
  40040a:	46bd      	mov	sp, r7
  40040c:	bc80      	pop	{r7}
  40040e:	4770      	bx	lr

00400410 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400410:	b480      	push	{r7}
  400412:	b083      	sub	sp, #12
  400414:	af00      	add	r7, sp, #0
  400416:	6078      	str	r0, [r7, #4]
  400418:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40041a:	687a      	ldr	r2, [r7, #4]
  40041c:	683b      	ldr	r3, [r7, #0]
  40041e:	019b      	lsls	r3, r3, #6
  400420:	4413      	add	r3, r2
  400422:	2205      	movs	r2, #5
  400424:	601a      	str	r2, [r3, #0]
}
  400426:	bf00      	nop
  400428:	370c      	adds	r7, #12
  40042a:	46bd      	mov	sp, r7
  40042c:	bc80      	pop	{r7}
  40042e:	4770      	bx	lr

00400430 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400430:	b480      	push	{r7}
  400432:	b085      	sub	sp, #20
  400434:	af00      	add	r7, sp, #0
  400436:	60f8      	str	r0, [r7, #12]
  400438:	60b9      	str	r1, [r7, #8]
  40043a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40043c:	68fa      	ldr	r2, [r7, #12]
  40043e:	68bb      	ldr	r3, [r7, #8]
  400440:	019b      	lsls	r3, r3, #6
  400442:	4413      	add	r3, r2
  400444:	331c      	adds	r3, #28
  400446:	687a      	ldr	r2, [r7, #4]
  400448:	601a      	str	r2, [r3, #0]
}
  40044a:	bf00      	nop
  40044c:	3714      	adds	r7, #20
  40044e:	46bd      	mov	sp, r7
  400450:	bc80      	pop	{r7}
  400452:	4770      	bx	lr

00400454 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  400454:	b480      	push	{r7}
  400456:	b087      	sub	sp, #28
  400458:	af00      	add	r7, sp, #0
  40045a:	60f8      	str	r0, [r7, #12]
  40045c:	60b9      	str	r1, [r7, #8]
  40045e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400460:	68fa      	ldr	r2, [r7, #12]
  400462:	68bb      	ldr	r3, [r7, #8]
  400464:	019b      	lsls	r3, r3, #6
  400466:	4413      	add	r3, r2
  400468:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  40046a:	697b      	ldr	r3, [r7, #20]
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	625a      	str	r2, [r3, #36]	; 0x24
}
  400470:	bf00      	nop
  400472:	371c      	adds	r7, #28
  400474:	46bd      	mov	sp, r7
  400476:	bc80      	pop	{r7}
  400478:	4770      	bx	lr
  40047a:	bf00      	nop

0040047c <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  40047c:	b480      	push	{r7}
  40047e:	b085      	sub	sp, #20
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
  400484:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400486:	687a      	ldr	r2, [r7, #4]
  400488:	683b      	ldr	r3, [r7, #0]
  40048a:	019b      	lsls	r3, r3, #6
  40048c:	4413      	add	r3, r2
  40048e:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400490:	68fb      	ldr	r3, [r7, #12]
  400492:	6a1b      	ldr	r3, [r3, #32]
}
  400494:	4618      	mov	r0, r3
  400496:	3714      	adds	r7, #20
  400498:	46bd      	mov	sp, r7
  40049a:	bc80      	pop	{r7}
  40049c:	4770      	bx	lr
  40049e:	bf00      	nop

004004a0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b08d      	sub	sp, #52	; 0x34
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	60f8      	str	r0, [r7, #12]
  4004a8:	60b9      	str	r1, [r7, #8]
  4004aa:	607a      	str	r2, [r7, #4]
  4004ac:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004ae:	2302      	movs	r3, #2
  4004b0:	613b      	str	r3, [r7, #16]
  4004b2:	2308      	movs	r3, #8
  4004b4:	617b      	str	r3, [r7, #20]
  4004b6:	2320      	movs	r3, #32
  4004b8:	61bb      	str	r3, [r7, #24]
  4004ba:	2380      	movs	r3, #128	; 0x80
  4004bc:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004c0:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004c2:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004c4:	2300      	movs	r3, #0
  4004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004c8:	e01a      	b.n	400500 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004cc:	009b      	lsls	r3, r3, #2
  4004ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004d2:	4413      	add	r3, r2
  4004d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004d8:	68ba      	ldr	r2, [r7, #8]
  4004da:	fbb2 f3f3 	udiv	r3, r2, r3
  4004de:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4004e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004e2:	0c1b      	lsrs	r3, r3, #16
  4004e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4004e6:	68fa      	ldr	r2, [r7, #12]
  4004e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004ea:	429a      	cmp	r2, r3
  4004ec:	d901      	bls.n	4004f2 <tc_find_mck_divisor+0x52>
			return 0;
  4004ee:	2300      	movs	r3, #0
  4004f0:	e023      	b.n	40053a <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4004f2:	68fa      	ldr	r2, [r7, #12]
  4004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004f6:	429a      	cmp	r2, r3
  4004f8:	d206      	bcs.n	400508 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004fc:	3301      	adds	r3, #1
  4004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400502:	2b04      	cmp	r3, #4
  400504:	d9e1      	bls.n	4004ca <tc_find_mck_divisor+0x2a>
  400506:	e000      	b.n	40050a <tc_find_mck_divisor+0x6a>
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
  400508:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40050c:	2b04      	cmp	r3, #4
  40050e:	d901      	bls.n	400514 <tc_find_mck_divisor+0x74>
		return 0;
  400510:	2300      	movs	r3, #0
  400512:	e012      	b.n	40053a <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400514:	687b      	ldr	r3, [r7, #4]
  400516:	2b00      	cmp	r3, #0
  400518:	d008      	beq.n	40052c <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40051c:	009b      	lsls	r3, r3, #2
  40051e:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400522:	4413      	add	r3, r2
  400524:	f853 2c20 	ldr.w	r2, [r3, #-32]
  400528:	687b      	ldr	r3, [r7, #4]
  40052a:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40052c:	683b      	ldr	r3, [r7, #0]
  40052e:	2b00      	cmp	r3, #0
  400530:	d002      	beq.n	400538 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400532:	683b      	ldr	r3, [r7, #0]
  400534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400536:	601a      	str	r2, [r3, #0]
	}

	return 1;
  400538:	2301      	movs	r3, #1
}
  40053a:	4618      	mov	r0, r3
  40053c:	3734      	adds	r7, #52	; 0x34
  40053e:	46bd      	mov	sp, r7
  400540:	bc80      	pop	{r7}
  400542:	4770      	bx	lr

00400544 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400544:	b480      	push	{r7}
  400546:	b083      	sub	sp, #12
  400548:	af00      	add	r7, sp, #0
  40054a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40054c:	687b      	ldr	r3, [r7, #4]
  40054e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400552:	605a      	str	r2, [r3, #4]

}
  400554:	bf00      	nop
  400556:	370c      	adds	r7, #12
  400558:	46bd      	mov	sp, r7
  40055a:	bc80      	pop	{r7}
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400560:	b480      	push	{r7}
  400562:	b083      	sub	sp, #12
  400564:	af00      	add	r7, sp, #0
  400566:	4603      	mov	r3, r0
  400568:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40056a:	4908      	ldr	r1, [pc, #32]	; (40058c <NVIC_EnableIRQ+0x2c>)
  40056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400570:	095b      	lsrs	r3, r3, #5
  400572:	79fa      	ldrb	r2, [r7, #7]
  400574:	f002 021f 	and.w	r2, r2, #31
  400578:	2001      	movs	r0, #1
  40057a:	fa00 f202 	lsl.w	r2, r0, r2
  40057e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400582:	bf00      	nop
  400584:	370c      	adds	r7, #12
  400586:	46bd      	mov	sp, r7
  400588:	bc80      	pop	{r7}
  40058a:	4770      	bx	lr
  40058c:	e000e100 	.word	0xe000e100

00400590 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400590:	b480      	push	{r7}
  400592:	b083      	sub	sp, #12
  400594:	af00      	add	r7, sp, #0
  400596:	4603      	mov	r3, r0
  400598:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40059a:	4909      	ldr	r1, [pc, #36]	; (4005c0 <NVIC_DisableIRQ+0x30>)
  40059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005a0:	095b      	lsrs	r3, r3, #5
  4005a2:	79fa      	ldrb	r2, [r7, #7]
  4005a4:	f002 021f 	and.w	r2, r2, #31
  4005a8:	2001      	movs	r0, #1
  4005aa:	fa00 f202 	lsl.w	r2, r0, r2
  4005ae:	3320      	adds	r3, #32
  4005b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005b4:	bf00      	nop
  4005b6:	370c      	adds	r7, #12
  4005b8:	46bd      	mov	sp, r7
  4005ba:	bc80      	pop	{r7}
  4005bc:	4770      	bx	lr
  4005be:	bf00      	nop
  4005c0:	e000e100 	.word	0xe000e100

004005c4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005c4:	b480      	push	{r7}
  4005c6:	b083      	sub	sp, #12
  4005c8:	af00      	add	r7, sp, #0
  4005ca:	4603      	mov	r3, r0
  4005cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005ce:	4909      	ldr	r1, [pc, #36]	; (4005f4 <NVIC_ClearPendingIRQ+0x30>)
  4005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005d4:	095b      	lsrs	r3, r3, #5
  4005d6:	79fa      	ldrb	r2, [r7, #7]
  4005d8:	f002 021f 	and.w	r2, r2, #31
  4005dc:	2001      	movs	r0, #1
  4005de:	fa00 f202 	lsl.w	r2, r0, r2
  4005e2:	3360      	adds	r3, #96	; 0x60
  4005e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005e8:	bf00      	nop
  4005ea:	370c      	adds	r7, #12
  4005ec:	46bd      	mov	sp, r7
  4005ee:	bc80      	pop	{r7}
  4005f0:	4770      	bx	lr
  4005f2:	bf00      	nop
  4005f4:	e000e100 	.word	0xe000e100

004005f8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4005f8:	b480      	push	{r7}
  4005fa:	b083      	sub	sp, #12
  4005fc:	af00      	add	r7, sp, #0
  4005fe:	4603      	mov	r3, r0
  400600:	6039      	str	r1, [r7, #0]
  400602:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400604:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400608:	2b00      	cmp	r3, #0
  40060a:	da0b      	bge.n	400624 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40060c:	490d      	ldr	r1, [pc, #52]	; (400644 <NVIC_SetPriority+0x4c>)
  40060e:	79fb      	ldrb	r3, [r7, #7]
  400610:	f003 030f 	and.w	r3, r3, #15
  400614:	3b04      	subs	r3, #4
  400616:	683a      	ldr	r2, [r7, #0]
  400618:	b2d2      	uxtb	r2, r2
  40061a:	0112      	lsls	r2, r2, #4
  40061c:	b2d2      	uxtb	r2, r2
  40061e:	440b      	add	r3, r1
  400620:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400622:	e009      	b.n	400638 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400624:	4908      	ldr	r1, [pc, #32]	; (400648 <NVIC_SetPriority+0x50>)
  400626:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40062a:	683a      	ldr	r2, [r7, #0]
  40062c:	b2d2      	uxtb	r2, r2
  40062e:	0112      	lsls	r2, r2, #4
  400630:	b2d2      	uxtb	r2, r2
  400632:	440b      	add	r3, r1
  400634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400638:	bf00      	nop
  40063a:	370c      	adds	r7, #12
  40063c:	46bd      	mov	sp, r7
  40063e:	bc80      	pop	{r7}
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	e000ed00 	.word	0xe000ed00
  400648:	e000e100 	.word	0xe000e100

0040064c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40064c:	b480      	push	{r7}
  40064e:	b083      	sub	sp, #12
  400650:	af00      	add	r7, sp, #0
  400652:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400654:	687b      	ldr	r3, [r7, #4]
  400656:	2b07      	cmp	r3, #7
  400658:	d825      	bhi.n	4006a6 <osc_get_rate+0x5a>
  40065a:	a201      	add	r2, pc, #4	; (adr r2, 400660 <osc_get_rate+0x14>)
  40065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400660:	00400681 	.word	0x00400681
  400664:	00400687 	.word	0x00400687
  400668:	0040068d 	.word	0x0040068d
  40066c:	00400693 	.word	0x00400693
  400670:	00400697 	.word	0x00400697
  400674:	0040069b 	.word	0x0040069b
  400678:	0040069f 	.word	0x0040069f
  40067c:	004006a3 	.word	0x004006a3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400680:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400684:	e010      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40068a:	e00d      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40068c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400690:	e00a      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400692:	4b08      	ldr	r3, [pc, #32]	; (4006b4 <osc_get_rate+0x68>)
  400694:	e008      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400696:	4b08      	ldr	r3, [pc, #32]	; (4006b8 <osc_get_rate+0x6c>)
  400698:	e006      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40069a:	4b08      	ldr	r3, [pc, #32]	; (4006bc <osc_get_rate+0x70>)
  40069c:	e004      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40069e:	4b07      	ldr	r3, [pc, #28]	; (4006bc <osc_get_rate+0x70>)
  4006a0:	e002      	b.n	4006a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006a2:	4b06      	ldr	r3, [pc, #24]	; (4006bc <osc_get_rate+0x70>)
  4006a4:	e000      	b.n	4006a8 <osc_get_rate+0x5c>
	}

	return 0;
  4006a6:	2300      	movs	r3, #0
}
  4006a8:	4618      	mov	r0, r3
  4006aa:	370c      	adds	r7, #12
  4006ac:	46bd      	mov	sp, r7
  4006ae:	bc80      	pop	{r7}
  4006b0:	4770      	bx	lr
  4006b2:	bf00      	nop
  4006b4:	003d0900 	.word	0x003d0900
  4006b8:	007a1200 	.word	0x007a1200
  4006bc:	00b71b00 	.word	0x00b71b00

004006c0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006c0:	b580      	push	{r7, lr}
  4006c2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006c4:	2006      	movs	r0, #6
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <sysclk_get_main_hz+0x18>)
  4006c8:	4798      	blx	r3
  4006ca:	4602      	mov	r2, r0
  4006cc:	4613      	mov	r3, r2
  4006ce:	009b      	lsls	r3, r3, #2
  4006d0:	4413      	add	r3, r2
  4006d2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006d4:	4618      	mov	r0, r3
  4006d6:	bd80      	pop	{r7, pc}
  4006d8:	0040064d 	.word	0x0040064d

004006dc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006dc:	b580      	push	{r7, lr}
  4006de:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <sysclk_get_cpu_hz+0x10>)
  4006e2:	4798      	blx	r3
  4006e4:	4603      	mov	r3, r0
  4006e6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4006e8:	4618      	mov	r0, r3
  4006ea:	bd80      	pop	{r7, pc}
  4006ec:	004006c1 	.word	0x004006c1

004006f0 <start_i2s_capture>:
/** Receiver buffer content. */
volatile uint16_t i2s_rec_buf[AUDIO_BUFFER_SIZE] = {0};
	
volatile uint8_t capture_toggle = 0;

void start_i2s_capture(void){ ssc_enable_interrupt(SSC, SSC_IDR_RXRDY); }
  4006f0:	b580      	push	{r7, lr}
  4006f2:	af00      	add	r7, sp, #0
  4006f4:	2110      	movs	r1, #16
  4006f6:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4006fa:	4b02      	ldr	r3, [pc, #8]	; (400704 <start_i2s_capture+0x14>)
  4006fc:	4798      	blx	r3
  4006fe:	bf00      	nop
  400700:	bd80      	pop	{r7, pc}
  400702:	bf00      	nop
  400704:	00400365 	.word	0x00400365

00400708 <SSC_Handler>:

/**
 * \brief Synchronous Serial Controller Handler.
 */
void SSC_Handler(void)
{
  400708:	b590      	push	{r4, r7, lr}
  40070a:	b083      	sub	sp, #12
  40070c:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  40070e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400712:	4b19      	ldr	r3, [pc, #100]	; (400778 <SSC_Handler+0x70>)
  400714:	4798      	blx	r3
	ssc_read(SSC, &ul_data);
  400716:	1d3b      	adds	r3, r7, #4
  400718:	4619      	mov	r1, r3
  40071a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40071e:	4b17      	ldr	r3, [pc, #92]	; (40077c <SSC_Handler+0x74>)
  400720:	4798      	blx	r3
	
	if(!(capture_toggle++ % 2) && i2s_receive_index < AUDIO_BUFFER_SIZE)
  400722:	4b17      	ldr	r3, [pc, #92]	; (400780 <SSC_Handler+0x78>)
  400724:	781b      	ldrb	r3, [r3, #0]
  400726:	b2db      	uxtb	r3, r3
  400728:	1c5a      	adds	r2, r3, #1
  40072a:	b2d1      	uxtb	r1, r2
  40072c:	4a14      	ldr	r2, [pc, #80]	; (400780 <SSC_Handler+0x78>)
  40072e:	7011      	strb	r1, [r2, #0]
  400730:	f003 0301 	and.w	r3, r3, #1
  400734:	b2db      	uxtb	r3, r3
  400736:	2b00      	cmp	r3, #0
  400738:	d112      	bne.n	400760 <SSC_Handler+0x58>
  40073a:	4b12      	ldr	r3, [pc, #72]	; (400784 <SSC_Handler+0x7c>)
  40073c:	681b      	ldr	r3, [r3, #0]
  40073e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400742:	d20d      	bcs.n	400760 <SSC_Handler+0x58>
		i2s_rec_buf[i2s_receive_index++] = modify_data(ul_data);
  400744:	4b0f      	ldr	r3, [pc, #60]	; (400784 <SSC_Handler+0x7c>)
  400746:	681c      	ldr	r4, [r3, #0]
  400748:	1c63      	adds	r3, r4, #1
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <SSC_Handler+0x7c>)
  40074c:	6013      	str	r3, [r2, #0]
  40074e:	687b      	ldr	r3, [r7, #4]
  400750:	4618      	mov	r0, r3
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <SSC_Handler+0x80>)
  400754:	4798      	blx	r3
  400756:	4603      	mov	r3, r0
  400758:	461a      	mov	r2, r3
  40075a:	4b0c      	ldr	r3, [pc, #48]	; (40078c <SSC_Handler+0x84>)
  40075c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	if (i2s_receive_index >= AUDIO_BUFFER_SIZE)// && !buffer_filled)
  400760:	4b08      	ldr	r3, [pc, #32]	; (400784 <SSC_Handler+0x7c>)
  400762:	681b      	ldr	r3, [r3, #0]
  400764:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
  400768:	d302      	bcc.n	400770 <SSC_Handler+0x68>
		//buffer_filled = 1;
		i2s_receive_index = 0;
  40076a:	4b06      	ldr	r3, [pc, #24]	; (400784 <SSC_Handler+0x7c>)
  40076c:	2200      	movs	r2, #0
  40076e:	601a      	str	r2, [r3, #0]
}
  400770:	bf00      	nop
  400772:	370c      	adds	r7, #12
  400774:	46bd      	mov	sp, r7
  400776:	bd90      	pop	{r4, r7, pc}
  400778:	00400381 	.word	0x00400381
  40077c:	00400399 	.word	0x00400399
  400780:	200085a4 	.word	0x200085a4
  400784:	200008a0 	.word	0x200008a0
  400788:	00400791 	.word	0x00400791
  40078c:	200008a4 	.word	0x200008a4

00400790 <modify_data>:

// get rid of zero padding and tristated signal
uint16_t modify_data(uint32_t data_to_modify) { return (uint16_t) (data_to_modify >> 16); }
  400790:	b480      	push	{r7}
  400792:	b083      	sub	sp, #12
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	0c1b      	lsrs	r3, r3, #16
  40079c:	b29b      	uxth	r3, r3
  40079e:	4618      	mov	r0, r3
  4007a0:	370c      	adds	r7, #12
  4007a2:	46bd      	mov	sp, r7
  4007a4:	bc80      	pop	{r7}
  4007a6:	4770      	bx	lr

004007a8 <configure_i2s>:
 * \brief Set up clock.
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
void configure_i2s(void){
  4007a8:	b590      	push	{r4, r7, lr}
  4007aa:	b085      	sub	sp, #20
  4007ac:	af02      	add	r7, sp, #8
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007ae:	2016      	movs	r0, #22
  4007b0:	4b18      	ldr	r3, [pc, #96]	; (400814 <configure_i2s+0x6c>)
  4007b2:	4798      	blx	r3
	ssc_reset(SSC);
  4007b4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007b8:	4b17      	ldr	r3, [pc, #92]	; (400818 <configure_i2s+0x70>)
  4007ba:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007bc:	4b17      	ldr	r3, [pc, #92]	; (40081c <configure_i2s+0x74>)
  4007be:	4798      	blx	r3
  4007c0:	6078      	str	r0, [r7, #4]
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  4007c2:	687a      	ldr	r2, [r7, #4]
  4007c4:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007c8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007cc:	4b14      	ldr	r3, [pc, #80]	; (400820 <configure_i2s+0x78>)
  4007ce:	4798      	blx	r3
  4007d0:	4603      	mov	r3, r0
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d11a      	bne.n	40080c <configure_i2s+0x64>
	
	// is2 setup
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_RK, SSC_AUDIO_MONO_LEFT, 32);
  4007d6:	2320      	movs	r3, #32
  4007d8:	9300      	str	r3, [sp, #0]
  4007da:	2301      	movs	r3, #1
  4007dc:	2202      	movs	r2, #2
  4007de:	2102      	movs	r1, #2
  4007e0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007e4:	4c0f      	ldr	r4, [pc, #60]	; (400824 <configure_i2s+0x7c>)
  4007e6:	47a0      	blx	r4

	/* Enable the rx function. */
	ssc_enable_rx(SSC);
  4007e8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007ec:	4b0e      	ldr	r3, [pc, #56]	; (400828 <configure_i2s+0x80>)
  4007ee:	4798      	blx	r3

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  4007f0:	2016      	movs	r0, #22
  4007f2:	4b0e      	ldr	r3, [pc, #56]	; (40082c <configure_i2s+0x84>)
  4007f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  4007f6:	2016      	movs	r0, #22
  4007f8:	4b0d      	ldr	r3, [pc, #52]	; (400830 <configure_i2s+0x88>)
  4007fa:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  4007fc:	2104      	movs	r1, #4
  4007fe:	2016      	movs	r0, #22
  400800:	4b0c      	ldr	r3, [pc, #48]	; (400834 <configure_i2s+0x8c>)
  400802:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400804:	2016      	movs	r0, #22
  400806:	4b0c      	ldr	r3, [pc, #48]	; (400838 <configure_i2s+0x90>)
  400808:	4798      	blx	r3
  40080a:	e000      	b.n	40080e <configure_i2s+0x66>
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
	ssc_reset(SSC);
	uint32_t ul_mck = sysclk_get_cpu_hz();
	
	if (ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) != SSC_RC_YES) { return 1; }
  40080c:	bf00      	nop
	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
	NVIC_ClearPendingIRQ(SSC_IRQn);
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
	NVIC_EnableIRQ(SSC_IRQn);
  40080e:	370c      	adds	r7, #12
  400810:	46bd      	mov	sp, r7
  400812:	bd90      	pop	{r4, r7, pc}
  400814:	00403175 	.word	0x00403175
  400818:	00400265 	.word	0x00400265
  40081c:	004006dd 	.word	0x004006dd
  400820:	00400129 	.word	0x00400129
  400824:	00400169 	.word	0x00400169
  400828:	0040029d 	.word	0x0040029d
  40082c:	00400591 	.word	0x00400591
  400830:	004005c5 	.word	0x004005c5
  400834:	004005f9 	.word	0x004005f9
  400838:	00400561 	.word	0x00400561

0040083c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40083c:	b580      	push	{r7, lr}
  40083e:	b084      	sub	sp, #16
  400840:	af00      	add	r7, sp, #0
  400842:	6078      	str	r0, [r7, #4]
  400844:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400846:	6878      	ldr	r0, [r7, #4]
  400848:	4b2c      	ldr	r3, [pc, #176]	; (4008fc <pio_handler_process+0xc0>)
  40084a:	4798      	blx	r3
  40084c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40084e:	6878      	ldr	r0, [r7, #4]
  400850:	4b2b      	ldr	r3, [pc, #172]	; (400900 <pio_handler_process+0xc4>)
  400852:	4798      	blx	r3
  400854:	4602      	mov	r2, r0
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	4013      	ands	r3, r2
  40085a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40085c:	68fb      	ldr	r3, [r7, #12]
  40085e:	2b00      	cmp	r3, #0
  400860:	d03c      	beq.n	4008dc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400862:	2300      	movs	r3, #0
  400864:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400866:	e034      	b.n	4008d2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400868:	4a26      	ldr	r2, [pc, #152]	; (400904 <pio_handler_process+0xc8>)
  40086a:	68bb      	ldr	r3, [r7, #8]
  40086c:	011b      	lsls	r3, r3, #4
  40086e:	4413      	add	r3, r2
  400870:	681a      	ldr	r2, [r3, #0]
  400872:	683b      	ldr	r3, [r7, #0]
  400874:	429a      	cmp	r2, r3
  400876:	d126      	bne.n	4008c6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400878:	4a22      	ldr	r2, [pc, #136]	; (400904 <pio_handler_process+0xc8>)
  40087a:	68bb      	ldr	r3, [r7, #8]
  40087c:	011b      	lsls	r3, r3, #4
  40087e:	4413      	add	r3, r2
  400880:	3304      	adds	r3, #4
  400882:	681a      	ldr	r2, [r3, #0]
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	4013      	ands	r3, r2
  400888:	2b00      	cmp	r3, #0
  40088a:	d01c      	beq.n	4008c6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40088c:	4a1d      	ldr	r2, [pc, #116]	; (400904 <pio_handler_process+0xc8>)
  40088e:	68bb      	ldr	r3, [r7, #8]
  400890:	011b      	lsls	r3, r3, #4
  400892:	4413      	add	r3, r2
  400894:	330c      	adds	r3, #12
  400896:	681b      	ldr	r3, [r3, #0]
  400898:	491a      	ldr	r1, [pc, #104]	; (400904 <pio_handler_process+0xc8>)
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	0112      	lsls	r2, r2, #4
  40089e:	440a      	add	r2, r1
  4008a0:	6810      	ldr	r0, [r2, #0]
  4008a2:	4918      	ldr	r1, [pc, #96]	; (400904 <pio_handler_process+0xc8>)
  4008a4:	68ba      	ldr	r2, [r7, #8]
  4008a6:	0112      	lsls	r2, r2, #4
  4008a8:	440a      	add	r2, r1
  4008aa:	3204      	adds	r2, #4
  4008ac:	6812      	ldr	r2, [r2, #0]
  4008ae:	4611      	mov	r1, r2
  4008b0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008b2:	4a14      	ldr	r2, [pc, #80]	; (400904 <pio_handler_process+0xc8>)
  4008b4:	68bb      	ldr	r3, [r7, #8]
  4008b6:	011b      	lsls	r3, r3, #4
  4008b8:	4413      	add	r3, r2
  4008ba:	3304      	adds	r3, #4
  4008bc:	681b      	ldr	r3, [r3, #0]
  4008be:	43db      	mvns	r3, r3
  4008c0:	68fa      	ldr	r2, [r7, #12]
  4008c2:	4013      	ands	r3, r2
  4008c4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008c6:	68bb      	ldr	r3, [r7, #8]
  4008c8:	3301      	adds	r3, #1
  4008ca:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008cc:	68bb      	ldr	r3, [r7, #8]
  4008ce:	2b06      	cmp	r3, #6
  4008d0:	d803      	bhi.n	4008da <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4008d2:	68fb      	ldr	r3, [r7, #12]
  4008d4:	2b00      	cmp	r3, #0
  4008d6:	d1c7      	bne.n	400868 <pio_handler_process+0x2c>
  4008d8:	e000      	b.n	4008dc <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4008da:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008dc:	4b0a      	ldr	r3, [pc, #40]	; (400908 <pio_handler_process+0xcc>)
  4008de:	681b      	ldr	r3, [r3, #0]
  4008e0:	2b00      	cmp	r3, #0
  4008e2:	d007      	beq.n	4008f4 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4008e4:	4b09      	ldr	r3, [pc, #36]	; (40090c <pio_handler_process+0xd0>)
  4008e6:	681b      	ldr	r3, [r3, #0]
  4008e8:	2b00      	cmp	r3, #0
  4008ea:	d003      	beq.n	4008f4 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4008ec:	4b07      	ldr	r3, [pc, #28]	; (40090c <pio_handler_process+0xd0>)
  4008ee:	681b      	ldr	r3, [r3, #0]
  4008f0:	6878      	ldr	r0, [r7, #4]
  4008f2:	4798      	blx	r3
		}
	}
#endif
}
  4008f4:	bf00      	nop
  4008f6:	3710      	adds	r7, #16
  4008f8:	46bd      	mov	sp, r7
  4008fa:	bd80      	pop	{r7, pc}
  4008fc:	00402c7d 	.word	0x00402c7d
  400900:	00402c95 	.word	0x00402c95
  400904:	200085a8 	.word	0x200085a8
  400908:	2000d694 	.word	0x2000d694
  40090c:	2000861c 	.word	0x2000861c

00400910 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400910:	b580      	push	{r7, lr}
  400912:	b086      	sub	sp, #24
  400914:	af00      	add	r7, sp, #0
  400916:	60f8      	str	r0, [r7, #12]
  400918:	60b9      	str	r1, [r7, #8]
  40091a:	607a      	str	r2, [r7, #4]
  40091c:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40091e:	4b21      	ldr	r3, [pc, #132]	; (4009a4 <pio_handler_set+0x94>)
  400920:	681b      	ldr	r3, [r3, #0]
  400922:	2b06      	cmp	r3, #6
  400924:	d901      	bls.n	40092a <pio_handler_set+0x1a>
		return 1;
  400926:	2301      	movs	r3, #1
  400928:	e038      	b.n	40099c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40092a:	2300      	movs	r3, #0
  40092c:	75fb      	strb	r3, [r7, #23]
  40092e:	e011      	b.n	400954 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  400930:	7dfb      	ldrb	r3, [r7, #23]
  400932:	011b      	lsls	r3, r3, #4
  400934:	4a1c      	ldr	r2, [pc, #112]	; (4009a8 <pio_handler_set+0x98>)
  400936:	4413      	add	r3, r2
  400938:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40093a:	693b      	ldr	r3, [r7, #16]
  40093c:	681a      	ldr	r2, [r3, #0]
  40093e:	68bb      	ldr	r3, [r7, #8]
  400940:	429a      	cmp	r2, r3
  400942:	d104      	bne.n	40094e <pio_handler_set+0x3e>
  400944:	693b      	ldr	r3, [r7, #16]
  400946:	685a      	ldr	r2, [r3, #4]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	429a      	cmp	r2, r3
  40094c:	d008      	beq.n	400960 <pio_handler_set+0x50>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40094e:	7dfb      	ldrb	r3, [r7, #23]
  400950:	3301      	adds	r3, #1
  400952:	75fb      	strb	r3, [r7, #23]
  400954:	7dfa      	ldrb	r2, [r7, #23]
  400956:	4b13      	ldr	r3, [pc, #76]	; (4009a4 <pio_handler_set+0x94>)
  400958:	681b      	ldr	r3, [r3, #0]
  40095a:	429a      	cmp	r2, r3
  40095c:	d9e8      	bls.n	400930 <pio_handler_set+0x20>
  40095e:	e000      	b.n	400962 <pio_handler_set+0x52>
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
			break;
  400960:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400962:	693b      	ldr	r3, [r7, #16]
  400964:	68ba      	ldr	r2, [r7, #8]
  400966:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400968:	693b      	ldr	r3, [r7, #16]
  40096a:	687a      	ldr	r2, [r7, #4]
  40096c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40096e:	693b      	ldr	r3, [r7, #16]
  400970:	683a      	ldr	r2, [r7, #0]
  400972:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400974:	693b      	ldr	r3, [r7, #16]
  400976:	6a3a      	ldr	r2, [r7, #32]
  400978:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40097a:	7dfa      	ldrb	r2, [r7, #23]
  40097c:	4b09      	ldr	r3, [pc, #36]	; (4009a4 <pio_handler_set+0x94>)
  40097e:	681b      	ldr	r3, [r3, #0]
  400980:	3301      	adds	r3, #1
  400982:	429a      	cmp	r2, r3
  400984:	d104      	bne.n	400990 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400986:	4b07      	ldr	r3, [pc, #28]	; (4009a4 <pio_handler_set+0x94>)
  400988:	681b      	ldr	r3, [r3, #0]
  40098a:	3301      	adds	r3, #1
  40098c:	4a05      	ldr	r2, [pc, #20]	; (4009a4 <pio_handler_set+0x94>)
  40098e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400990:	683a      	ldr	r2, [r7, #0]
  400992:	6879      	ldr	r1, [r7, #4]
  400994:	68f8      	ldr	r0, [r7, #12]
  400996:	4b05      	ldr	r3, [pc, #20]	; (4009ac <pio_handler_set+0x9c>)
  400998:	4798      	blx	r3

	return 0;
  40099a:	2300      	movs	r3, #0
}
  40099c:	4618      	mov	r0, r3
  40099e:	3718      	adds	r7, #24
  4009a0:	46bd      	mov	sp, r7
  4009a2:	bd80      	pop	{r7, pc}
  4009a4:	20008618 	.word	0x20008618
  4009a8:	200085a8 	.word	0x200085a8
  4009ac:	00402bd9 	.word	0x00402bd9

004009b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009b0:	b580      	push	{r7, lr}
  4009b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4009b4:	210b      	movs	r1, #11
  4009b6:	4802      	ldr	r0, [pc, #8]	; (4009c0 <PIOA_Handler+0x10>)
  4009b8:	4b02      	ldr	r3, [pc, #8]	; (4009c4 <PIOA_Handler+0x14>)
  4009ba:	4798      	blx	r3
}
  4009bc:	bf00      	nop
  4009be:	bd80      	pop	{r7, pc}
  4009c0:	400e0e00 	.word	0x400e0e00
  4009c4:	0040083d 	.word	0x0040083d

004009c8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4009cc:	210c      	movs	r1, #12
  4009ce:	4802      	ldr	r0, [pc, #8]	; (4009d8 <PIOB_Handler+0x10>)
  4009d0:	4b02      	ldr	r3, [pc, #8]	; (4009dc <PIOB_Handler+0x14>)
  4009d2:	4798      	blx	r3
}
  4009d4:	bf00      	nop
  4009d6:	bd80      	pop	{r7, pc}
  4009d8:	400e1000 	.word	0x400e1000
  4009dc:	0040083d 	.word	0x0040083d

004009e0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4009e0:	b480      	push	{r7}
  4009e2:	b083      	sub	sp, #12
  4009e4:	af00      	add	r7, sp, #0
  4009e6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4009e8:	687b      	ldr	r3, [r7, #4]
  4009ea:	2208      	movs	r2, #8
  4009ec:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4009ee:	687b      	ldr	r3, [r7, #4]
  4009f0:	2220      	movs	r2, #32
  4009f2:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4009f4:	687b      	ldr	r3, [r7, #4]
  4009f6:	2204      	movs	r2, #4
  4009f8:	601a      	str	r2, [r3, #0]
}
  4009fa:	bf00      	nop
  4009fc:	370c      	adds	r7, #12
  4009fe:	46bd      	mov	sp, r7
  400a00:	bc80      	pop	{r7}
  400a02:	4770      	bx	lr

00400a04 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400a04:	b580      	push	{r7, lr}
  400a06:	b084      	sub	sp, #16
  400a08:	af00      	add	r7, sp, #0
  400a0a:	6078      	str	r0, [r7, #4]
  400a0c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  400a0e:	2300      	movs	r3, #0
  400a10:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400a12:	687b      	ldr	r3, [r7, #4]
  400a14:	f04f 32ff 	mov.w	r2, #4294967295
  400a18:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400a1a:	687b      	ldr	r3, [r7, #4]
  400a1c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  400a1e:	6878      	ldr	r0, [r7, #4]
  400a20:	4b0e      	ldr	r3, [pc, #56]	; (400a5c <twi_master_init+0x58>)
  400a22:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400a24:	6878      	ldr	r0, [r7, #4]
  400a26:	4b0e      	ldr	r3, [pc, #56]	; (400a60 <twi_master_init+0x5c>)
  400a28:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400a2a:	683b      	ldr	r3, [r7, #0]
  400a2c:	6859      	ldr	r1, [r3, #4]
  400a2e:	683b      	ldr	r3, [r7, #0]
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	461a      	mov	r2, r3
  400a34:	6878      	ldr	r0, [r7, #4]
  400a36:	4b0b      	ldr	r3, [pc, #44]	; (400a64 <twi_master_init+0x60>)
  400a38:	4798      	blx	r3
  400a3a:	4603      	mov	r3, r0
  400a3c:	2b01      	cmp	r3, #1
  400a3e:	d101      	bne.n	400a44 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400a40:	2301      	movs	r3, #1
  400a42:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400a44:	683b      	ldr	r3, [r7, #0]
  400a46:	7a5b      	ldrb	r3, [r3, #9]
  400a48:	2b01      	cmp	r3, #1
  400a4a:	d102      	bne.n	400a52 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  400a4c:	687b      	ldr	r3, [r7, #4]
  400a4e:	2240      	movs	r2, #64	; 0x40
  400a50:	601a      	str	r2, [r3, #0]
	}

	return status;
  400a52:	68fb      	ldr	r3, [r7, #12]
}
  400a54:	4618      	mov	r0, r3
  400a56:	3710      	adds	r7, #16
  400a58:	46bd      	mov	sp, r7
  400a5a:	bd80      	pop	{r7, pc}
  400a5c:	00400da1 	.word	0x00400da1
  400a60:	004009e1 	.word	0x004009e1
  400a64:	00400a69 	.word	0x00400a69

00400a68 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400a68:	b480      	push	{r7}
  400a6a:	b089      	sub	sp, #36	; 0x24
  400a6c:	af00      	add	r7, sp, #0
  400a6e:	60f8      	str	r0, [r7, #12]
  400a70:	60b9      	str	r1, [r7, #8]
  400a72:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  400a74:	2300      	movs	r3, #0
  400a76:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400a78:	68bb      	ldr	r3, [r7, #8]
  400a7a:	4a34      	ldr	r2, [pc, #208]	; (400b4c <twi_set_speed+0xe4>)
  400a7c:	4293      	cmp	r3, r2
  400a7e:	d901      	bls.n	400a84 <twi_set_speed+0x1c>
		return FAIL;
  400a80:	2301      	movs	r3, #1
  400a82:	e05d      	b.n	400b40 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400a84:	68bb      	ldr	r3, [r7, #8]
  400a86:	4a32      	ldr	r2, [pc, #200]	; (400b50 <twi_set_speed+0xe8>)
  400a88:	4293      	cmp	r3, r2
  400a8a:	d937      	bls.n	400afc <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400a8c:	687b      	ldr	r3, [r7, #4]
  400a8e:	4a31      	ldr	r2, [pc, #196]	; (400b54 <twi_set_speed+0xec>)
  400a90:	fba2 2303 	umull	r2, r3, r2, r3
  400a94:	0b9b      	lsrs	r3, r3, #14
  400a96:	3b04      	subs	r3, #4
  400a98:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400a9a:	68ba      	ldr	r2, [r7, #8]
  400a9c:	4b2e      	ldr	r3, [pc, #184]	; (400b58 <twi_set_speed+0xf0>)
  400a9e:	4413      	add	r3, r2
  400aa0:	009b      	lsls	r3, r3, #2
  400aa2:	687a      	ldr	r2, [r7, #4]
  400aa4:	fbb2 f3f3 	udiv	r3, r2, r3
  400aa8:	3b04      	subs	r3, #4
  400aaa:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400aac:	e005      	b.n	400aba <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  400aae:	69fb      	ldr	r3, [r7, #28]
  400ab0:	3301      	adds	r3, #1
  400ab2:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400ab4:	697b      	ldr	r3, [r7, #20]
  400ab6:	085b      	lsrs	r3, r3, #1
  400ab8:	617b      	str	r3, [r7, #20]
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400aba:	697b      	ldr	r3, [r7, #20]
  400abc:	2bff      	cmp	r3, #255	; 0xff
  400abe:	d909      	bls.n	400ad4 <twi_set_speed+0x6c>
  400ac0:	69fb      	ldr	r3, [r7, #28]
  400ac2:	2b06      	cmp	r3, #6
  400ac4:	d9f3      	bls.n	400aae <twi_set_speed+0x46>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ac6:	e005      	b.n	400ad4 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  400ac8:	69fb      	ldr	r3, [r7, #28]
  400aca:	3301      	adds	r3, #1
  400acc:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400ace:	693b      	ldr	r3, [r7, #16]
  400ad0:	085b      	lsrs	r3, r3, #1
  400ad2:	613b      	str	r3, [r7, #16]
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ad4:	693b      	ldr	r3, [r7, #16]
  400ad6:	2bff      	cmp	r3, #255	; 0xff
  400ad8:	d902      	bls.n	400ae0 <twi_set_speed+0x78>
  400ada:	69fb      	ldr	r3, [r7, #28]
  400adc:	2b06      	cmp	r3, #6
  400ade:	d9f3      	bls.n	400ac8 <twi_set_speed+0x60>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400ae0:	697b      	ldr	r3, [r7, #20]
  400ae2:	b2da      	uxtb	r2, r3
  400ae4:	693b      	ldr	r3, [r7, #16]
  400ae6:	021b      	lsls	r3, r3, #8
  400ae8:	b29b      	uxth	r3, r3
  400aea:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  400aec:	69fb      	ldr	r3, [r7, #28]
  400aee:	041b      	lsls	r3, r3, #16
  400af0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400af4:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400af6:	68fb      	ldr	r3, [r7, #12]
  400af8:	611a      	str	r2, [r3, #16]
  400afa:	e020      	b.n	400b3e <twi_set_speed+0xd6>
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400afc:	68bb      	ldr	r3, [r7, #8]
  400afe:	005b      	lsls	r3, r3, #1
  400b00:	687a      	ldr	r2, [r7, #4]
  400b02:	fbb2 f3f3 	udiv	r3, r2, r3
  400b06:	3b04      	subs	r3, #4
  400b08:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b0a:	e005      	b.n	400b18 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400b0c:	69fb      	ldr	r3, [r7, #28]
  400b0e:	3301      	adds	r3, #1
  400b10:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400b12:	69bb      	ldr	r3, [r7, #24]
  400b14:	085b      	lsrs	r3, r3, #1
  400b16:	61bb      	str	r3, [r7, #24]
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b18:	69bb      	ldr	r3, [r7, #24]
  400b1a:	2bff      	cmp	r3, #255	; 0xff
  400b1c:	d902      	bls.n	400b24 <twi_set_speed+0xbc>
  400b1e:	69fb      	ldr	r3, [r7, #28]
  400b20:	2b06      	cmp	r3, #6
  400b22:	d9f3      	bls.n	400b0c <twi_set_speed+0xa4>
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400b24:	69bb      	ldr	r3, [r7, #24]
  400b26:	b2da      	uxtb	r2, r3
  400b28:	69bb      	ldr	r3, [r7, #24]
  400b2a:	021b      	lsls	r3, r3, #8
  400b2c:	b29b      	uxth	r3, r3
  400b2e:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400b30:	69fb      	ldr	r3, [r7, #28]
  400b32:	041b      	lsls	r3, r3, #16
  400b34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400b38:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400b3a:	68fb      	ldr	r3, [r7, #12]
  400b3c:	611a      	str	r2, [r3, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400b3e:	2300      	movs	r3, #0
}
  400b40:	4618      	mov	r0, r3
  400b42:	3724      	adds	r7, #36	; 0x24
  400b44:	46bd      	mov	sp, r7
  400b46:	bc80      	pop	{r7}
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop
  400b4c:	00061a80 	.word	0x00061a80
  400b50:	0005dc00 	.word	0x0005dc00
  400b54:	057619f1 	.word	0x057619f1
  400b58:	3ffd1200 	.word	0x3ffd1200

00400b5c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  400b5c:	b480      	push	{r7}
  400b5e:	b085      	sub	sp, #20
  400b60:	af00      	add	r7, sp, #0
  400b62:	6078      	str	r0, [r7, #4]
  400b64:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  400b66:	683b      	ldr	r3, [r7, #0]
  400b68:	2b00      	cmp	r3, #0
  400b6a:	d101      	bne.n	400b70 <twi_mk_addr+0x14>
		return 0;
  400b6c:	2300      	movs	r3, #0
  400b6e:	e01d      	b.n	400bac <twi_mk_addr+0x50>

	val = addr[0];
  400b70:	687b      	ldr	r3, [r7, #4]
  400b72:	781b      	ldrb	r3, [r3, #0]
  400b74:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  400b76:	683b      	ldr	r3, [r7, #0]
  400b78:	2b01      	cmp	r3, #1
  400b7a:	dd09      	ble.n	400b90 <twi_mk_addr+0x34>
		val <<= 8;
  400b7c:	68fb      	ldr	r3, [r7, #12]
  400b7e:	021b      	lsls	r3, r3, #8
  400b80:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  400b82:	687b      	ldr	r3, [r7, #4]
  400b84:	3301      	adds	r3, #1
  400b86:	781b      	ldrb	r3, [r3, #0]
  400b88:	461a      	mov	r2, r3
  400b8a:	68fb      	ldr	r3, [r7, #12]
  400b8c:	4313      	orrs	r3, r2
  400b8e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400b90:	683b      	ldr	r3, [r7, #0]
  400b92:	2b02      	cmp	r3, #2
  400b94:	dd09      	ble.n	400baa <twi_mk_addr+0x4e>
		val <<= 8;
  400b96:	68fb      	ldr	r3, [r7, #12]
  400b98:	021b      	lsls	r3, r3, #8
  400b9a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	3302      	adds	r3, #2
  400ba0:	781b      	ldrb	r3, [r3, #0]
  400ba2:	461a      	mov	r2, r3
  400ba4:	68fb      	ldr	r3, [r7, #12]
  400ba6:	4313      	orrs	r3, r2
  400ba8:	60fb      	str	r3, [r7, #12]
	}
	return val;
  400baa:	68fb      	ldr	r3, [r7, #12]
}
  400bac:	4618      	mov	r0, r3
  400bae:	3714      	adds	r7, #20
  400bb0:	46bd      	mov	sp, r7
  400bb2:	bc80      	pop	{r7}
  400bb4:	4770      	bx	lr
  400bb6:	bf00      	nop

00400bb8 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400bb8:	b580      	push	{r7, lr}
  400bba:	b088      	sub	sp, #32
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
  400bc0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400bc2:	683b      	ldr	r3, [r7, #0]
  400bc4:	68db      	ldr	r3, [r3, #12]
  400bc6:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  400bc8:	683b      	ldr	r3, [r7, #0]
  400bca:	689b      	ldr	r3, [r3, #8]
  400bcc:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  400bce:	2300      	movs	r3, #0
  400bd0:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  400bd2:	f643 2398 	movw	r3, #15000	; 0x3a98
  400bd6:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  400bd8:	69fb      	ldr	r3, [r7, #28]
  400bda:	2b00      	cmp	r3, #0
  400bdc:	d101      	bne.n	400be2 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  400bde:	2301      	movs	r3, #1
  400be0:	e069      	b.n	400cb6 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400be2:	687b      	ldr	r3, [r7, #4]
  400be4:	2200      	movs	r2, #0
  400be6:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400be8:	683b      	ldr	r3, [r7, #0]
  400bea:	7c1b      	ldrb	r3, [r3, #16]
  400bec:	041b      	lsls	r3, r3, #16
  400bee:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400bf2:	683b      	ldr	r3, [r7, #0]
  400bf4:	685b      	ldr	r3, [r3, #4]
  400bf6:	021b      	lsls	r3, r3, #8
  400bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400bfc:	4313      	orrs	r3, r2
  400bfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  400c02:	687b      	ldr	r3, [r7, #4]
  400c04:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400c06:	687b      	ldr	r3, [r7, #4]
  400c08:	2200      	movs	r2, #0
  400c0a:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400c0c:	683a      	ldr	r2, [r7, #0]
  400c0e:	683b      	ldr	r3, [r7, #0]
  400c10:	685b      	ldr	r3, [r3, #4]
  400c12:	4619      	mov	r1, r3
  400c14:	4610      	mov	r0, r2
  400c16:	4b2a      	ldr	r3, [pc, #168]	; (400cc0 <twi_master_read+0x108>)
  400c18:	4798      	blx	r3
  400c1a:	4602      	mov	r2, r0
  400c1c:	687b      	ldr	r3, [r7, #4]
  400c1e:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400c20:	69fb      	ldr	r3, [r7, #28]
  400c22:	2b01      	cmp	r3, #1
  400c24:	d105      	bne.n	400c32 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400c26:	687b      	ldr	r3, [r7, #4]
  400c28:	2203      	movs	r2, #3
  400c2a:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400c2c:	2301      	movs	r3, #1
  400c2e:	75fb      	strb	r3, [r7, #23]
  400c30:	e034      	b.n	400c9c <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400c32:	687b      	ldr	r3, [r7, #4]
  400c34:	2201      	movs	r2, #1
  400c36:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400c38:	2300      	movs	r3, #0
  400c3a:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400c3c:	e02e      	b.n	400c9c <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  400c3e:	687b      	ldr	r3, [r7, #4]
  400c40:	6a1b      	ldr	r3, [r3, #32]
  400c42:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400c44:	68fb      	ldr	r3, [r7, #12]
  400c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400c4a:	2b00      	cmp	r3, #0
  400c4c:	d001      	beq.n	400c52 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  400c4e:	2305      	movs	r3, #5
  400c50:	e031      	b.n	400cb6 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  400c52:	693b      	ldr	r3, [r7, #16]
  400c54:	1e5a      	subs	r2, r3, #1
  400c56:	613a      	str	r2, [r7, #16]
  400c58:	2b00      	cmp	r3, #0
  400c5a:	d101      	bne.n	400c60 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  400c5c:	2309      	movs	r3, #9
  400c5e:	e02a      	b.n	400cb6 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400c60:	69fb      	ldr	r3, [r7, #28]
  400c62:	2b01      	cmp	r3, #1
  400c64:	d107      	bne.n	400c76 <twi_master_read+0xbe>
  400c66:	7dfb      	ldrb	r3, [r7, #23]
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d104      	bne.n	400c76 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	2202      	movs	r2, #2
  400c70:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  400c72:	2301      	movs	r3, #1
  400c74:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400c76:	68fb      	ldr	r3, [r7, #12]
  400c78:	f003 0302 	and.w	r3, r3, #2
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d100      	bne.n	400c82 <twi_master_read+0xca>
			continue;
  400c80:	e00c      	b.n	400c9c <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  400c82:	69bb      	ldr	r3, [r7, #24]
  400c84:	1c5a      	adds	r2, r3, #1
  400c86:	61ba      	str	r2, [r7, #24]
  400c88:	687a      	ldr	r2, [r7, #4]
  400c8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400c8c:	b2d2      	uxtb	r2, r2
  400c8e:	701a      	strb	r2, [r3, #0]

		cnt--;
  400c90:	69fb      	ldr	r3, [r7, #28]
  400c92:	3b01      	subs	r3, #1
  400c94:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400c96:	f643 2398 	movw	r3, #15000	; 0x3a98
  400c9a:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400c9c:	69fb      	ldr	r3, [r7, #28]
  400c9e:	2b00      	cmp	r3, #0
  400ca0:	d1cd      	bne.n	400c3e <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400ca2:	bf00      	nop
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	6a1b      	ldr	r3, [r3, #32]
  400ca8:	f003 0301 	and.w	r3, r3, #1
  400cac:	2b00      	cmp	r3, #0
  400cae:	d0f9      	beq.n	400ca4 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  400cb4:	2300      	movs	r3, #0
}
  400cb6:	4618      	mov	r0, r3
  400cb8:	3720      	adds	r7, #32
  400cba:	46bd      	mov	sp, r7
  400cbc:	bd80      	pop	{r7, pc}
  400cbe:	bf00      	nop
  400cc0:	00400b5d 	.word	0x00400b5d

00400cc4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400cc4:	b580      	push	{r7, lr}
  400cc6:	b086      	sub	sp, #24
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400cce:	683b      	ldr	r3, [r7, #0]
  400cd0:	68db      	ldr	r3, [r3, #12]
  400cd2:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  400cd4:	683b      	ldr	r3, [r7, #0]
  400cd6:	689b      	ldr	r3, [r3, #8]
  400cd8:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  400cda:	697b      	ldr	r3, [r7, #20]
  400cdc:	2b00      	cmp	r3, #0
  400cde:	d101      	bne.n	400ce4 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  400ce0:	2301      	movs	r3, #1
  400ce2:	e056      	b.n	400d92 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	2200      	movs	r2, #0
  400ce8:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400cea:	683b      	ldr	r3, [r7, #0]
  400cec:	7c1b      	ldrb	r3, [r3, #16]
  400cee:	041b      	lsls	r3, r3, #16
  400cf0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  400cf4:	683b      	ldr	r3, [r7, #0]
  400cf6:	685b      	ldr	r3, [r3, #4]
  400cf8:	021b      	lsls	r3, r3, #8
  400cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400cfe:	431a      	orrs	r2, r3
  400d00:	687b      	ldr	r3, [r7, #4]
  400d02:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400d04:	687b      	ldr	r3, [r7, #4]
  400d06:	2200      	movs	r2, #0
  400d08:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400d0a:	683a      	ldr	r2, [r7, #0]
  400d0c:	683b      	ldr	r3, [r7, #0]
  400d0e:	685b      	ldr	r3, [r3, #4]
  400d10:	4619      	mov	r1, r3
  400d12:	4610      	mov	r0, r2
  400d14:	4b21      	ldr	r3, [pc, #132]	; (400d9c <twi_master_write+0xd8>)
  400d16:	4798      	blx	r3
  400d18:	4602      	mov	r2, r0
  400d1a:	687b      	ldr	r3, [r7, #4]
  400d1c:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400d1e:	e019      	b.n	400d54 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  400d20:	687b      	ldr	r3, [r7, #4]
  400d22:	6a1b      	ldr	r3, [r3, #32]
  400d24:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400d26:	68fb      	ldr	r3, [r7, #12]
  400d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d001      	beq.n	400d34 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  400d30:	2305      	movs	r3, #5
  400d32:	e02e      	b.n	400d92 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  400d34:	68fb      	ldr	r3, [r7, #12]
  400d36:	f003 0304 	and.w	r3, r3, #4
  400d3a:	2b00      	cmp	r3, #0
  400d3c:	d100      	bne.n	400d40 <twi_master_write+0x7c>
			continue;
  400d3e:	e009      	b.n	400d54 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  400d40:	693b      	ldr	r3, [r7, #16]
  400d42:	1c5a      	adds	r2, r3, #1
  400d44:	613a      	str	r2, [r7, #16]
  400d46:	781b      	ldrb	r3, [r3, #0]
  400d48:	461a      	mov	r2, r3
  400d4a:	687b      	ldr	r3, [r7, #4]
  400d4c:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  400d4e:	697b      	ldr	r3, [r7, #20]
  400d50:	3b01      	subs	r3, #1
  400d52:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400d54:	697b      	ldr	r3, [r7, #20]
  400d56:	2b00      	cmp	r3, #0
  400d58:	d1e2      	bne.n	400d20 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400d5a:	687b      	ldr	r3, [r7, #4]
  400d5c:	6a1b      	ldr	r3, [r3, #32]
  400d5e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400d60:	68fb      	ldr	r3, [r7, #12]
  400d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400d66:	2b00      	cmp	r3, #0
  400d68:	d001      	beq.n	400d6e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  400d6a:	2305      	movs	r3, #5
  400d6c:	e011      	b.n	400d92 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  400d6e:	68fb      	ldr	r3, [r7, #12]
  400d70:	f003 0304 	and.w	r3, r3, #4
  400d74:	2b00      	cmp	r3, #0
  400d76:	d100      	bne.n	400d7a <twi_master_write+0xb6>
			break;
		}
	}
  400d78:	e7ef      	b.n	400d5a <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  400d7a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	2202      	movs	r2, #2
  400d80:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400d82:	bf00      	nop
  400d84:	687b      	ldr	r3, [r7, #4]
  400d86:	6a1b      	ldr	r3, [r3, #32]
  400d88:	f003 0301 	and.w	r3, r3, #1
  400d8c:	2b00      	cmp	r3, #0
  400d8e:	d0f9      	beq.n	400d84 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  400d90:	2300      	movs	r3, #0
}
  400d92:	4618      	mov	r0, r3
  400d94:	3718      	adds	r7, #24
  400d96:	46bd      	mov	sp, r7
  400d98:	bd80      	pop	{r7, pc}
  400d9a:	bf00      	nop
  400d9c:	00400b5d 	.word	0x00400b5d

00400da0 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  400da0:	b480      	push	{r7}
  400da2:	b083      	sub	sp, #12
  400da4:	af00      	add	r7, sp, #0
  400da6:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400da8:	687b      	ldr	r3, [r7, #4]
  400daa:	2280      	movs	r2, #128	; 0x80
  400dac:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  400dae:	687b      	ldr	r3, [r7, #4]
  400db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400db2:	bf00      	nop
  400db4:	370c      	adds	r7, #12
  400db6:	46bd      	mov	sp, r7
  400db8:	bc80      	pop	{r7}
  400dba:	4770      	bx	lr

00400dbc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400dbc:	b480      	push	{r7}
  400dbe:	b089      	sub	sp, #36	; 0x24
  400dc0:	af00      	add	r7, sp, #0
  400dc2:	60f8      	str	r0, [r7, #12]
  400dc4:	60b9      	str	r1, [r7, #8]
  400dc6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400dc8:	68bb      	ldr	r3, [r7, #8]
  400dca:	011a      	lsls	r2, r3, #4
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	429a      	cmp	r2, r3
  400dd0:	d802      	bhi.n	400dd8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400dd2:	2310      	movs	r3, #16
  400dd4:	61fb      	str	r3, [r7, #28]
  400dd6:	e001      	b.n	400ddc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  400dd8:	2308      	movs	r3, #8
  400dda:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ddc:	687b      	ldr	r3, [r7, #4]
  400dde:	00da      	lsls	r2, r3, #3
  400de0:	69fb      	ldr	r3, [r7, #28]
  400de2:	68b9      	ldr	r1, [r7, #8]
  400de4:	fb01 f303 	mul.w	r3, r1, r3
  400de8:	085b      	lsrs	r3, r3, #1
  400dea:	441a      	add	r2, r3
  400dec:	69fb      	ldr	r3, [r7, #28]
  400dee:	68b9      	ldr	r1, [r7, #8]
  400df0:	fb01 f303 	mul.w	r3, r1, r3
  400df4:	fbb2 f3f3 	udiv	r3, r2, r3
  400df8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400dfa:	69bb      	ldr	r3, [r7, #24]
  400dfc:	08db      	lsrs	r3, r3, #3
  400dfe:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400e00:	69bb      	ldr	r3, [r7, #24]
  400e02:	f003 0307 	and.w	r3, r3, #7
  400e06:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e08:	697b      	ldr	r3, [r7, #20]
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d003      	beq.n	400e16 <usart_set_async_baudrate+0x5a>
  400e0e:	697b      	ldr	r3, [r7, #20]
  400e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400e14:	d301      	bcc.n	400e1a <usart_set_async_baudrate+0x5e>
		return 1;
  400e16:	2301      	movs	r3, #1
  400e18:	e00f      	b.n	400e3a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400e1a:	69fb      	ldr	r3, [r7, #28]
  400e1c:	2b08      	cmp	r3, #8
  400e1e:	d105      	bne.n	400e2c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400e20:	68fb      	ldr	r3, [r7, #12]
  400e22:	685b      	ldr	r3, [r3, #4]
  400e24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400e2c:	693b      	ldr	r3, [r7, #16]
  400e2e:	041a      	lsls	r2, r3, #16
  400e30:	697b      	ldr	r3, [r7, #20]
  400e32:	431a      	orrs	r2, r3
  400e34:	68fb      	ldr	r3, [r7, #12]
  400e36:	621a      	str	r2, [r3, #32]

	return 0;
  400e38:	2300      	movs	r3, #0
}
  400e3a:	4618      	mov	r0, r3
  400e3c:	3724      	adds	r7, #36	; 0x24
  400e3e:	46bd      	mov	sp, r7
  400e40:	bc80      	pop	{r7}
  400e42:	4770      	bx	lr

00400e44 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400e44:	b580      	push	{r7, lr}
  400e46:	b082      	sub	sp, #8
  400e48:	af00      	add	r7, sp, #0
  400e4a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400e4c:	6878      	ldr	r0, [r7, #4]
  400e4e:	4b0f      	ldr	r3, [pc, #60]	; (400e8c <usart_reset+0x48>)
  400e50:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400e52:	687b      	ldr	r3, [r7, #4]
  400e54:	2200      	movs	r2, #0
  400e56:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400e58:	687b      	ldr	r3, [r7, #4]
  400e5a:	2200      	movs	r2, #0
  400e5c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400e5e:	687b      	ldr	r3, [r7, #4]
  400e60:	2200      	movs	r2, #0
  400e62:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400e64:	6878      	ldr	r0, [r7, #4]
  400e66:	4b0a      	ldr	r3, [pc, #40]	; (400e90 <usart_reset+0x4c>)
  400e68:	4798      	blx	r3
	usart_reset_rx(p_usart);
  400e6a:	6878      	ldr	r0, [r7, #4]
  400e6c:	4b09      	ldr	r3, [pc, #36]	; (400e94 <usart_reset+0x50>)
  400e6e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400e70:	6878      	ldr	r0, [r7, #4]
  400e72:	4b09      	ldr	r3, [pc, #36]	; (400e98 <usart_reset+0x54>)
  400e74:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  400e76:	6878      	ldr	r0, [r7, #4]
  400e78:	4b08      	ldr	r3, [pc, #32]	; (400e9c <usart_reset+0x58>)
  400e7a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400e7c:	6878      	ldr	r0, [r7, #4]
  400e7e:	4b08      	ldr	r3, [pc, #32]	; (400ea0 <usart_reset+0x5c>)
  400e80:	4798      	blx	r3
#endif
}
  400e82:	bf00      	nop
  400e84:	3708      	adds	r7, #8
  400e86:	46bd      	mov	sp, r7
  400e88:	bd80      	pop	{r7, pc}
  400e8a:	bf00      	nop
  400e8c:	00401101 	.word	0x00401101
  400e90:	00400f81 	.word	0x00400f81
  400e94:	00400fb1 	.word	0x00400fb1
  400e98:	00401019 	.word	0x00401019
  400e9c:	00401051 	.word	0x00401051
  400ea0:	00401035 	.word	0x00401035

00400ea4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400ea4:	b580      	push	{r7, lr}
  400ea6:	b084      	sub	sp, #16
  400ea8:	af00      	add	r7, sp, #0
  400eaa:	60f8      	str	r0, [r7, #12]
  400eac:	60b9      	str	r1, [r7, #8]
  400eae:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  400eb0:	68f8      	ldr	r0, [r7, #12]
  400eb2:	4b1a      	ldr	r3, [pc, #104]	; (400f1c <usart_init_rs232+0x78>)
  400eb4:	4798      	blx	r3

	ul_reg_val = 0;
  400eb6:	4b1a      	ldr	r3, [pc, #104]	; (400f20 <usart_init_rs232+0x7c>)
  400eb8:	2200      	movs	r2, #0
  400eba:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400ebc:	68bb      	ldr	r3, [r7, #8]
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d009      	beq.n	400ed6 <usart_init_rs232+0x32>
  400ec2:	68bb      	ldr	r3, [r7, #8]
  400ec4:	681b      	ldr	r3, [r3, #0]
  400ec6:	687a      	ldr	r2, [r7, #4]
  400ec8:	4619      	mov	r1, r3
  400eca:	68f8      	ldr	r0, [r7, #12]
  400ecc:	4b15      	ldr	r3, [pc, #84]	; (400f24 <usart_init_rs232+0x80>)
  400ece:	4798      	blx	r3
  400ed0:	4603      	mov	r3, r0
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	d001      	beq.n	400eda <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400ed6:	2301      	movs	r3, #1
  400ed8:	e01b      	b.n	400f12 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400eda:	68bb      	ldr	r3, [r7, #8]
  400edc:	685a      	ldr	r2, [r3, #4]
  400ede:	68bb      	ldr	r3, [r7, #8]
  400ee0:	689b      	ldr	r3, [r3, #8]
  400ee2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400ee4:	68bb      	ldr	r3, [r7, #8]
  400ee6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ee8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400eea:	68bb      	ldr	r3, [r7, #8]
  400eec:	68db      	ldr	r3, [r3, #12]
  400eee:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400ef0:	4b0b      	ldr	r3, [pc, #44]	; (400f20 <usart_init_rs232+0x7c>)
  400ef2:	681b      	ldr	r3, [r3, #0]
  400ef4:	4313      	orrs	r3, r2
  400ef6:	4a0a      	ldr	r2, [pc, #40]	; (400f20 <usart_init_rs232+0x7c>)
  400ef8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400efa:	4b09      	ldr	r3, [pc, #36]	; (400f20 <usart_init_rs232+0x7c>)
  400efc:	681b      	ldr	r3, [r3, #0]
  400efe:	4a08      	ldr	r2, [pc, #32]	; (400f20 <usart_init_rs232+0x7c>)
  400f00:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400f02:	68fb      	ldr	r3, [r7, #12]
  400f04:	685a      	ldr	r2, [r3, #4]
  400f06:	4b06      	ldr	r3, [pc, #24]	; (400f20 <usart_init_rs232+0x7c>)
  400f08:	681b      	ldr	r3, [r3, #0]
  400f0a:	431a      	orrs	r2, r3
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	605a      	str	r2, [r3, #4]

	return 0;
  400f10:	2300      	movs	r3, #0
}
  400f12:	4618      	mov	r0, r3
  400f14:	3710      	adds	r7, #16
  400f16:	46bd      	mov	sp, r7
  400f18:	bd80      	pop	{r7, pc}
  400f1a:	bf00      	nop
  400f1c:	00400e45 	.word	0x00400e45
  400f20:	20008620 	.word	0x20008620
  400f24:	00400dbd 	.word	0x00400dbd

00400f28 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400f28:	b580      	push	{r7, lr}
  400f2a:	b084      	sub	sp, #16
  400f2c:	af00      	add	r7, sp, #0
  400f2e:	60f8      	str	r0, [r7, #12]
  400f30:	60b9      	str	r1, [r7, #8]
  400f32:	607a      	str	r2, [r7, #4]
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400f34:	687a      	ldr	r2, [r7, #4]
  400f36:	68b9      	ldr	r1, [r7, #8]
  400f38:	68f8      	ldr	r0, [r7, #12]
  400f3a:	4b0a      	ldr	r3, [pc, #40]	; (400f64 <usart_init_hw_handshaking+0x3c>)
  400f3c:	4798      	blx	r3
  400f3e:	4603      	mov	r3, r0
  400f40:	2b00      	cmp	r3, #0
  400f42:	d001      	beq.n	400f48 <usart_init_hw_handshaking+0x20>
		return 1;
  400f44:	2301      	movs	r3, #1
  400f46:	e008      	b.n	400f5a <usart_init_hw_handshaking+0x32>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	685b      	ldr	r3, [r3, #4]
  400f4c:	f023 030f 	bic.w	r3, r3, #15
  400f50:	f043 0202 	orr.w	r2, r3, #2
  400f54:	68fb      	ldr	r3, [r7, #12]
  400f56:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400f58:	2300      	movs	r3, #0
}
  400f5a:	4618      	mov	r0, r3
  400f5c:	3710      	adds	r7, #16
  400f5e:	46bd      	mov	sp, r7
  400f60:	bd80      	pop	{r7, pc}
  400f62:	bf00      	nop
  400f64:	00400ea5 	.word	0x00400ea5

00400f68 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400f68:	b480      	push	{r7}
  400f6a:	b083      	sub	sp, #12
  400f6c:	af00      	add	r7, sp, #0
  400f6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	2240      	movs	r2, #64	; 0x40
  400f74:	601a      	str	r2, [r3, #0]
}
  400f76:	bf00      	nop
  400f78:	370c      	adds	r7, #12
  400f7a:	46bd      	mov	sp, r7
  400f7c:	bc80      	pop	{r7}
  400f7e:	4770      	bx	lr

00400f80 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400f80:	b480      	push	{r7}
  400f82:	b083      	sub	sp, #12
  400f84:	af00      	add	r7, sp, #0
  400f86:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400f88:	687b      	ldr	r3, [r7, #4]
  400f8a:	2288      	movs	r2, #136	; 0x88
  400f8c:	601a      	str	r2, [r3, #0]
}
  400f8e:	bf00      	nop
  400f90:	370c      	adds	r7, #12
  400f92:	46bd      	mov	sp, r7
  400f94:	bc80      	pop	{r7}
  400f96:	4770      	bx	lr

00400f98 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400f98:	b480      	push	{r7}
  400f9a:	b083      	sub	sp, #12
  400f9c:	af00      	add	r7, sp, #0
  400f9e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	2210      	movs	r2, #16
  400fa4:	601a      	str	r2, [r3, #0]
}
  400fa6:	bf00      	nop
  400fa8:	370c      	adds	r7, #12
  400faa:	46bd      	mov	sp, r7
  400fac:	bc80      	pop	{r7}
  400fae:	4770      	bx	lr

00400fb0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400fb0:	b480      	push	{r7}
  400fb2:	b083      	sub	sp, #12
  400fb4:	af00      	add	r7, sp, #0
  400fb6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	2224      	movs	r2, #36	; 0x24
  400fbc:	601a      	str	r2, [r3, #0]
}
  400fbe:	bf00      	nop
  400fc0:	370c      	adds	r7, #12
  400fc2:	46bd      	mov	sp, r7
  400fc4:	bc80      	pop	{r7}
  400fc6:	4770      	bx	lr

00400fc8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400fc8:	b480      	push	{r7}
  400fca:	b083      	sub	sp, #12
  400fcc:	af00      	add	r7, sp, #0
  400fce:	6078      	str	r0, [r7, #4]
  400fd0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	683a      	ldr	r2, [r7, #0]
  400fd6:	609a      	str	r2, [r3, #8]
}
  400fd8:	bf00      	nop
  400fda:	370c      	adds	r7, #12
  400fdc:	46bd      	mov	sp, r7
  400fde:	bc80      	pop	{r7}
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop

00400fe4 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400fe4:	b480      	push	{r7}
  400fe6:	b083      	sub	sp, #12
  400fe8:	af00      	add	r7, sp, #0
  400fea:	6078      	str	r0, [r7, #4]
  400fec:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	683a      	ldr	r2, [r7, #0]
  400ff2:	60da      	str	r2, [r3, #12]
}
  400ff4:	bf00      	nop
  400ff6:	370c      	adds	r7, #12
  400ff8:	46bd      	mov	sp, r7
  400ffa:	bc80      	pop	{r7}
  400ffc:	4770      	bx	lr
  400ffe:	bf00      	nop

00401000 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  401000:	b480      	push	{r7}
  401002:	b083      	sub	sp, #12
  401004:	af00      	add	r7, sp, #0
  401006:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	695b      	ldr	r3, [r3, #20]
}
  40100c:	4618      	mov	r0, r3
  40100e:	370c      	adds	r7, #12
  401010:	46bd      	mov	sp, r7
  401012:	bc80      	pop	{r7}
  401014:	4770      	bx	lr
  401016:	bf00      	nop

00401018 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401018:	b480      	push	{r7}
  40101a:	b083      	sub	sp, #12
  40101c:	af00      	add	r7, sp, #0
  40101e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401020:	687b      	ldr	r3, [r7, #4]
  401022:	f44f 7280 	mov.w	r2, #256	; 0x100
  401026:	601a      	str	r2, [r3, #0]
}
  401028:	bf00      	nop
  40102a:	370c      	adds	r7, #12
  40102c:	46bd      	mov	sp, r7
  40102e:	bc80      	pop	{r7}
  401030:	4770      	bx	lr
  401032:	bf00      	nop

00401034 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  401034:	b480      	push	{r7}
  401036:	b083      	sub	sp, #12
  401038:	af00      	add	r7, sp, #0
  40103a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  40103c:	687b      	ldr	r3, [r7, #4]
  40103e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401042:	601a      	str	r2, [r3, #0]
}
  401044:	bf00      	nop
  401046:	370c      	adds	r7, #12
  401048:	46bd      	mov	sp, r7
  40104a:	bc80      	pop	{r7}
  40104c:	4770      	bx	lr
  40104e:	bf00      	nop

00401050 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401050:	b480      	push	{r7}
  401052:	b083      	sub	sp, #12
  401054:	af00      	add	r7, sp, #0
  401056:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401058:	687b      	ldr	r3, [r7, #4]
  40105a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40105e:	601a      	str	r2, [r3, #0]
}
  401060:	bf00      	nop
  401062:	370c      	adds	r7, #12
  401064:	46bd      	mov	sp, r7
  401066:	bc80      	pop	{r7}
  401068:	4770      	bx	lr
  40106a:	bf00      	nop

0040106c <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  40106c:	b480      	push	{r7}
  40106e:	b083      	sub	sp, #12
  401070:	af00      	add	r7, sp, #0
  401072:	6078      	str	r0, [r7, #4]
  401074:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401076:	bf00      	nop
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	695b      	ldr	r3, [r3, #20]
  40107c:	f003 0302 	and.w	r3, r3, #2
  401080:	2b00      	cmp	r3, #0
  401082:	d0f9      	beq.n	401078 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401084:	683b      	ldr	r3, [r7, #0]
  401086:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40108a:	687b      	ldr	r3, [r7, #4]
  40108c:	61da      	str	r2, [r3, #28]

	return 0;
  40108e:	2300      	movs	r3, #0
}
  401090:	4618      	mov	r0, r3
  401092:	370c      	adds	r7, #12
  401094:	46bd      	mov	sp, r7
  401096:	bc80      	pop	{r7}
  401098:	4770      	bx	lr
  40109a:	bf00      	nop

0040109c <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  40109c:	b580      	push	{r7, lr}
  40109e:	b082      	sub	sp, #8
  4010a0:	af00      	add	r7, sp, #0
  4010a2:	6078      	str	r0, [r7, #4]
  4010a4:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4010a6:	e007      	b.n	4010b8 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4010a8:	683b      	ldr	r3, [r7, #0]
  4010aa:	1c5a      	adds	r2, r3, #1
  4010ac:	603a      	str	r2, [r7, #0]
  4010ae:	781b      	ldrb	r3, [r3, #0]
  4010b0:	4619      	mov	r1, r3
  4010b2:	6878      	ldr	r0, [r7, #4]
  4010b4:	4b04      	ldr	r3, [pc, #16]	; (4010c8 <usart_write_line+0x2c>)
  4010b6:	4798      	blx	r3
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
	while (*string != '\0') {
  4010b8:	683b      	ldr	r3, [r7, #0]
  4010ba:	781b      	ldrb	r3, [r3, #0]
  4010bc:	2b00      	cmp	r3, #0
  4010be:	d1f3      	bne.n	4010a8 <usart_write_line+0xc>
		usart_putchar(p_usart, *string++);
	}
}
  4010c0:	bf00      	nop
  4010c2:	3708      	adds	r7, #8
  4010c4:	46bd      	mov	sp, r7
  4010c6:	bd80      	pop	{r7, pc}
  4010c8:	0040106d 	.word	0x0040106d

004010cc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4010cc:	b480      	push	{r7}
  4010ce:	b083      	sub	sp, #12
  4010d0:	af00      	add	r7, sp, #0
  4010d2:	6078      	str	r0, [r7, #4]
  4010d4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	695b      	ldr	r3, [r3, #20]
  4010da:	f003 0301 	and.w	r3, r3, #1
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d101      	bne.n	4010e6 <usart_read+0x1a>
		return 1;
  4010e2:	2301      	movs	r3, #1
  4010e4:	e006      	b.n	4010f4 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4010e6:	687b      	ldr	r3, [r7, #4]
  4010e8:	699b      	ldr	r3, [r3, #24]
  4010ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4010ee:	683b      	ldr	r3, [r7, #0]
  4010f0:	601a      	str	r2, [r3, #0]

	return 0;
  4010f2:	2300      	movs	r3, #0
}
  4010f4:	4618      	mov	r0, r3
  4010f6:	370c      	adds	r7, #12
  4010f8:	46bd      	mov	sp, r7
  4010fa:	bc80      	pop	{r7}
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop

00401100 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401100:	b480      	push	{r7}
  401102:	b083      	sub	sp, #12
  401104:	af00      	add	r7, sp, #0
  401106:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401108:	687b      	ldr	r3, [r7, #4]
  40110a:	4a04      	ldr	r2, [pc, #16]	; (40111c <usart_disable_writeprotect+0x1c>)
  40110c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401110:	bf00      	nop
  401112:	370c      	adds	r7, #12
  401114:	46bd      	mov	sp, r7
  401116:	bc80      	pop	{r7}
  401118:	4770      	bx	lr
  40111a:	bf00      	nop
  40111c:	55534100 	.word	0x55534100

00401120 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401120:	b480      	push	{r7}
  401122:	b083      	sub	sp, #12
  401124:	af00      	add	r7, sp, #0
  401126:	4603      	mov	r3, r0
  401128:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40112a:	4908      	ldr	r1, [pc, #32]	; (40114c <NVIC_EnableIRQ+0x2c>)
  40112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401130:	095b      	lsrs	r3, r3, #5
  401132:	79fa      	ldrb	r2, [r7, #7]
  401134:	f002 021f 	and.w	r2, r2, #31
  401138:	2001      	movs	r0, #1
  40113a:	fa00 f202 	lsl.w	r2, r0, r2
  40113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401142:	bf00      	nop
  401144:	370c      	adds	r7, #12
  401146:	46bd      	mov	sp, r7
  401148:	bc80      	pop	{r7}
  40114a:	4770      	bx	lr
  40114c:	e000e100 	.word	0xe000e100

00401150 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401150:	b480      	push	{r7}
  401152:	b083      	sub	sp, #12
  401154:	af00      	add	r7, sp, #0
  401156:	4603      	mov	r3, r0
  401158:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40115a:	4909      	ldr	r1, [pc, #36]	; (401180 <NVIC_DisableIRQ+0x30>)
  40115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401160:	095b      	lsrs	r3, r3, #5
  401162:	79fa      	ldrb	r2, [r7, #7]
  401164:	f002 021f 	and.w	r2, r2, #31
  401168:	2001      	movs	r0, #1
  40116a:	fa00 f202 	lsl.w	r2, r0, r2
  40116e:	3320      	adds	r3, #32
  401170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401174:	bf00      	nop
  401176:	370c      	adds	r7, #12
  401178:	46bd      	mov	sp, r7
  40117a:	bc80      	pop	{r7}
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	e000e100 	.word	0xe000e100

00401184 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401184:	b480      	push	{r7}
  401186:	b083      	sub	sp, #12
  401188:	af00      	add	r7, sp, #0
  40118a:	4603      	mov	r3, r0
  40118c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40118e:	4909      	ldr	r1, [pc, #36]	; (4011b4 <NVIC_ClearPendingIRQ+0x30>)
  401190:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401194:	095b      	lsrs	r3, r3, #5
  401196:	79fa      	ldrb	r2, [r7, #7]
  401198:	f002 021f 	and.w	r2, r2, #31
  40119c:	2001      	movs	r0, #1
  40119e:	fa00 f202 	lsl.w	r2, r0, r2
  4011a2:	3360      	adds	r3, #96	; 0x60
  4011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4011a8:	bf00      	nop
  4011aa:	370c      	adds	r7, #12
  4011ac:	46bd      	mov	sp, r7
  4011ae:	bc80      	pop	{r7}
  4011b0:	4770      	bx	lr
  4011b2:	bf00      	nop
  4011b4:	e000e100 	.word	0xe000e100

004011b8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4011b8:	b480      	push	{r7}
  4011ba:	b083      	sub	sp, #12
  4011bc:	af00      	add	r7, sp, #0
  4011be:	4603      	mov	r3, r0
  4011c0:	6039      	str	r1, [r7, #0]
  4011c2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011c8:	2b00      	cmp	r3, #0
  4011ca:	da0b      	bge.n	4011e4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4011cc:	490d      	ldr	r1, [pc, #52]	; (401204 <NVIC_SetPriority+0x4c>)
  4011ce:	79fb      	ldrb	r3, [r7, #7]
  4011d0:	f003 030f 	and.w	r3, r3, #15
  4011d4:	3b04      	subs	r3, #4
  4011d6:	683a      	ldr	r2, [r7, #0]
  4011d8:	b2d2      	uxtb	r2, r2
  4011da:	0112      	lsls	r2, r2, #4
  4011dc:	b2d2      	uxtb	r2, r2
  4011de:	440b      	add	r3, r1
  4011e0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  4011e2:	e009      	b.n	4011f8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4011e4:	4908      	ldr	r1, [pc, #32]	; (401208 <NVIC_SetPriority+0x50>)
  4011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4011ea:	683a      	ldr	r2, [r7, #0]
  4011ec:	b2d2      	uxtb	r2, r2
  4011ee:	0112      	lsls	r2, r2, #4
  4011f0:	b2d2      	uxtb	r2, r2
  4011f2:	440b      	add	r3, r1
  4011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4011f8:	bf00      	nop
  4011fa:	370c      	adds	r7, #12
  4011fc:	46bd      	mov	sp, r7
  4011fe:	bc80      	pop	{r7}
  401200:	4770      	bx	lr
  401202:	bf00      	nop
  401204:	e000ed00 	.word	0xe000ed00
  401208:	e000e100 	.word	0xe000e100

0040120c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40120c:	b480      	push	{r7}
  40120e:	b083      	sub	sp, #12
  401210:	af00      	add	r7, sp, #0
  401212:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401214:	687b      	ldr	r3, [r7, #4]
  401216:	2b07      	cmp	r3, #7
  401218:	d825      	bhi.n	401266 <osc_get_rate+0x5a>
  40121a:	a201      	add	r2, pc, #4	; (adr r2, 401220 <osc_get_rate+0x14>)
  40121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401220:	00401241 	.word	0x00401241
  401224:	00401247 	.word	0x00401247
  401228:	0040124d 	.word	0x0040124d
  40122c:	00401253 	.word	0x00401253
  401230:	00401257 	.word	0x00401257
  401234:	0040125b 	.word	0x0040125b
  401238:	0040125f 	.word	0x0040125f
  40123c:	00401263 	.word	0x00401263
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401244:	e010      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40124a:	e00d      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40124c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401250:	e00a      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401252:	4b08      	ldr	r3, [pc, #32]	; (401274 <osc_get_rate+0x68>)
  401254:	e008      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401256:	4b08      	ldr	r3, [pc, #32]	; (401278 <osc_get_rate+0x6c>)
  401258:	e006      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40125a:	4b08      	ldr	r3, [pc, #32]	; (40127c <osc_get_rate+0x70>)
  40125c:	e004      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40125e:	4b07      	ldr	r3, [pc, #28]	; (40127c <osc_get_rate+0x70>)
  401260:	e002      	b.n	401268 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401262:	4b06      	ldr	r3, [pc, #24]	; (40127c <osc_get_rate+0x70>)
  401264:	e000      	b.n	401268 <osc_get_rate+0x5c>
	}

	return 0;
  401266:	2300      	movs	r3, #0
}
  401268:	4618      	mov	r0, r3
  40126a:	370c      	adds	r7, #12
  40126c:	46bd      	mov	sp, r7
  40126e:	bc80      	pop	{r7}
  401270:	4770      	bx	lr
  401272:	bf00      	nop
  401274:	003d0900 	.word	0x003d0900
  401278:	007a1200 	.word	0x007a1200
  40127c:	00b71b00 	.word	0x00b71b00

00401280 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401280:	b580      	push	{r7, lr}
  401282:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401284:	2006      	movs	r0, #6
  401286:	4b04      	ldr	r3, [pc, #16]	; (401298 <sysclk_get_main_hz+0x18>)
  401288:	4798      	blx	r3
  40128a:	4602      	mov	r2, r0
  40128c:	4613      	mov	r3, r2
  40128e:	009b      	lsls	r3, r3, #2
  401290:	4413      	add	r3, r2
  401292:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401294:	4618      	mov	r0, r3
  401296:	bd80      	pop	{r7, pc}
  401298:	0040120d 	.word	0x0040120d

0040129c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  40129c:	b580      	push	{r7, lr}
  40129e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4012a0:	4b02      	ldr	r3, [pc, #8]	; (4012ac <sysclk_get_cpu_hz+0x10>)
  4012a2:	4798      	blx	r3
  4012a4:	4603      	mov	r3, r0
  4012a6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4012a8:	4618      	mov	r0, r3
  4012aa:	bd80      	pop	{r7, pc}
  4012ac:	00401281 	.word	0x00401281

004012b0 <handler_vsync>:
/**
 * \brief Handler for vertical synchronisation using by the OV2640 image
 * sensor.
 */
void handler_vsync(uint32_t ul_id, uint32_t ul_mask)
{
  4012b0:	b480      	push	{r7}
  4012b2:	b083      	sub	sp, #12
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
  4012b8:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	vsync_rising_edge_flag = true;
  4012ba:	4b04      	ldr	r3, [pc, #16]	; (4012cc <handler_vsync+0x1c>)
  4012bc:	2201      	movs	r2, #1
  4012be:	601a      	str	r2, [r3, #0]
}
  4012c0:	bf00      	nop
  4012c2:	370c      	adds	r7, #12
  4012c4:	46bd      	mov	sp, r7
  4012c6:	bc80      	pop	{r7}
  4012c8:	4770      	bx	lr
  4012ca:	bf00      	nop
  4012cc:	20008624 	.word	0x20008624

004012d0 <configure_vsync>:

/**
 * \brief Intialize Vsync_Handler.
 */
void configure_vsync(void)
{
  4012d0:	b590      	push	{r4, r7, lr}
  4012d2:	b083      	sub	sp, #12
  4012d4:	af02      	add	r7, sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV_VSYNC_PIO, OV_VSYNC_ID, OV_VSYNC_MASK,
  4012d6:	4b08      	ldr	r3, [pc, #32]	; (4012f8 <configure_vsync+0x28>)
  4012d8:	9300      	str	r3, [sp, #0]
  4012da:	2301      	movs	r3, #1
  4012dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012e0:	210b      	movs	r1, #11
  4012e2:	4806      	ldr	r0, [pc, #24]	; (4012fc <configure_vsync+0x2c>)
  4012e4:	4c06      	ldr	r4, [pc, #24]	; (401300 <configure_vsync+0x30>)
  4012e6:	47a0      	blx	r4
			OV_VSYNC_TYPE, handler_vsync);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type) OV_VSYNC_ID);
  4012e8:	200b      	movs	r0, #11
  4012ea:	4b06      	ldr	r3, [pc, #24]	; (401304 <configure_vsync+0x34>)
  4012ec:	4798      	blx	r3
}
  4012ee:	bf00      	nop
  4012f0:	3704      	adds	r7, #4
  4012f2:	46bd      	mov	sp, r7
  4012f4:	bd90      	pop	{r4, r7, pc}
  4012f6:	bf00      	nop
  4012f8:	004012b1 	.word	0x004012b1
  4012fc:	400e0e00 	.word	0x400e0e00
  401300:	00400911 	.word	0x00400911
  401304:	00401121 	.word	0x00401121

00401308 <configure_twi>:

/**
 * \brief Configures TWI.
 */
void configure_twi(void)
{
  401308:	b580      	push	{r7, lr}
  40130a:	b084      	sub	sp, #16
  40130c:	af00      	add	r7, sp, #0
	twi_options_t opt;

	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  40130e:	2013      	movs	r0, #19
  401310:	4b0e      	ldr	r3, [pc, #56]	; (40134c <configure_twi+0x44>)
  401312:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401314:	4b0e      	ldr	r3, [pc, #56]	; (401350 <configure_twi+0x48>)
  401316:	4798      	blx	r3
  401318:	4603      	mov	r3, r0
  40131a:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  40131c:	4b0d      	ldr	r3, [pc, #52]	; (401354 <configure_twi+0x4c>)
  40131e:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401320:	1d3b      	adds	r3, r7, #4
  401322:	4619      	mov	r1, r3
  401324:	480c      	ldr	r0, [pc, #48]	; (401358 <configure_twi+0x50>)
  401326:	4b0d      	ldr	r3, [pc, #52]	; (40135c <configure_twi+0x54>)
  401328:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  40132a:	2013      	movs	r0, #19
  40132c:	4b0c      	ldr	r3, [pc, #48]	; (401360 <configure_twi+0x58>)
  40132e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401330:	2013      	movs	r0, #19
  401332:	4b0c      	ldr	r3, [pc, #48]	; (401364 <configure_twi+0x5c>)
  401334:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401336:	2100      	movs	r1, #0
  401338:	2013      	movs	r0, #19
  40133a:	4b0b      	ldr	r3, [pc, #44]	; (401368 <configure_twi+0x60>)
  40133c:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  40133e:	2013      	movs	r0, #19
  401340:	4b0a      	ldr	r3, [pc, #40]	; (40136c <configure_twi+0x64>)
  401342:	4798      	blx	r3
}
  401344:	bf00      	nop
  401346:	3710      	adds	r7, #16
  401348:	46bd      	mov	sp, r7
  40134a:	bd80      	pop	{r7, pc}
  40134c:	00403175 	.word	0x00403175
  401350:	0040129d 	.word	0x0040129d
  401354:	000186a0 	.word	0x000186a0
  401358:	40018000 	.word	0x40018000
  40135c:	00400a05 	.word	0x00400a05
  401360:	00401151 	.word	0x00401151
  401364:	00401185 	.word	0x00401185
  401368:	004011b9 	.word	0x004011b9
  40136c:	00401121 	.word	0x00401121

00401370 <init_pio_capture>:

/**
 * \brief Configuration and initialization of parallel capture.
 */
void init_pio_capture(Pio *p_pio, uint32_t ul_id){	
  401370:	b580      	push	{r7, lr}
  401372:	b082      	sub	sp, #8
  401374:	af00      	add	r7, sp, #0
  401376:	6078      	str	r0, [r7, #4]
  401378:	6039      	str	r1, [r7, #0]
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  40137a:	6838      	ldr	r0, [r7, #0]
  40137c:	4b1a      	ldr	r3, [pc, #104]	; (4013e8 <init_pio_capture+0x78>)
  40137e:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  401380:	687b      	ldr	r3, [r7, #4]
  401382:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401386:	f023 0201 	bic.w	r2, r3, #1
  40138a:	687b      	ldr	r3, [r7, #4]
  40138c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  401390:	687b      	ldr	r3, [r7, #4]
  401392:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  401396:	f043 0208 	orr.w	r2, r3, #8
  40139a:	687b      	ldr	r3, [r7, #4]
  40139c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  4013aa:	687b      	ldr	r3, [r7, #4]
  4013ac:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013b6:	f043 0220 	orr.w	r2, r3, #32
  4013ba:	687b      	ldr	r3, [r7, #4]
  4013bc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  4013c0:	687b      	ldr	r3, [r7, #4]
  4013c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  4013d0:	687b      	ldr	r3, [r7, #4]
  4013d2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4013d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  4013da:	687b      	ldr	r3, [r7, #4]
  4013dc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
}
  4013e0:	bf00      	nop
  4013e2:	3708      	adds	r7, #8
  4013e4:	46bd      	mov	sp, r7
  4013e6:	bd80      	pop	{r7, pc}
  4013e8:	00403175 	.word	0x00403175

004013ec <init_camera>:

/**
 * \brief Initialize camera.
 */
void init_camera(void){	
  4013ec:	b580      	push	{r7, lr}
  4013ee:	af00      	add	r7, sp, #0
	pmc_enable_pllbck(7, 0x1, 1); /* PLLA work at 96 Mhz */
  4013f0:	2201      	movs	r2, #1
  4013f2:	2101      	movs	r1, #1
  4013f4:	2007      	movs	r0, #7
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <init_camera+0x40>)
  4013f8:	4798      	blx	r3

	configure_vsync();
  4013fa:	4b0d      	ldr	r3, [pc, #52]	; (401430 <init_camera+0x44>)
  4013fc:	4798      	blx	r3
	init_pio_capture(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  4013fe:	210b      	movs	r1, #11
  401400:	480c      	ldr	r0, [pc, #48]	; (401434 <init_camera+0x48>)
  401402:	4b0d      	ldr	r3, [pc, #52]	; (401438 <init_camera+0x4c>)
  401404:	4798      	blx	r3
	
	/* Init PCK1 to work at 24 Mhz - 96/4=24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLB_CLK);
  401406:	4b0d      	ldr	r3, [pc, #52]	; (40143c <init_camera+0x50>)
  401408:	2223      	movs	r2, #35	; 0x23
  40140a:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  40140c:	4b0b      	ldr	r3, [pc, #44]	; (40143c <init_camera+0x50>)
  40140e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401412:	601a      	str	r2, [r3, #0]
	
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401414:	bf00      	nop
  401416:	4b09      	ldr	r3, [pc, #36]	; (40143c <init_camera+0x50>)
  401418:	689b      	ldr	r3, [r3, #8]
  40141a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40141e:	2b00      	cmp	r3, #0
  401420:	d0f9      	beq.n	401416 <init_camera+0x2a>
	}

	configure_twi();
  401422:	4b07      	ldr	r3, [pc, #28]	; (401440 <init_camera+0x54>)
  401424:	4798      	blx	r3
}
  401426:	bf00      	nop
  401428:	bd80      	pop	{r7, pc}
  40142a:	bf00      	nop
  40142c:	004030f5 	.word	0x004030f5
  401430:	004012d1 	.word	0x004012d1
  401434:	400e0e00 	.word	0x400e0e00
  401438:	00401371 	.word	0x00401371
  40143c:	400e0400 	.word	0x400e0400
  401440:	00401309 	.word	0x00401309

00401444 <configure_camera>:

/**
 * \brief Configure camera.
 */	
void configure_camera(void)
{
  401444:	b580      	push	{r7, lr}
  401446:	b086      	sub	sp, #24
  401448:	af00      	add	r7, sp, #0
	init_camera();
  40144a:	4b1b      	ldr	r3, [pc, #108]	; (4014b8 <configure_camera+0x74>)
  40144c:	4798      	blx	r3
	/* ov2640 Initialization */
	// First, make sure reg 0xFF=1
	const uint8_t cont_reg_val = 1;
  40144e:	2301      	movs	r3, #1
  401450:	75fb      	strb	r3, [r7, #23]
	twi_packet_t init_packet = 
  401452:	463b      	mov	r3, r7
  401454:	2200      	movs	r2, #0
  401456:	601a      	str	r2, [r3, #0]
  401458:	605a      	str	r2, [r3, #4]
  40145a:	609a      	str	r2, [r3, #8]
  40145c:	60da      	str	r2, [r3, #12]
  40145e:	611a      	str	r2, [r3, #16]
  401460:	23ff      	movs	r3, #255	; 0xff
  401462:	703b      	strb	r3, [r7, #0]
  401464:	2301      	movs	r3, #1
  401466:	607b      	str	r3, [r7, #4]
  401468:	f107 0317 	add.w	r3, r7, #23
  40146c:	60bb      	str	r3, [r7, #8]
  40146e:	2301      	movs	r3, #1
  401470:	60fb      	str	r3, [r7, #12]
  401472:	2330      	movs	r3, #48	; 0x30
  401474:	743b      	strb	r3, [r7, #16]
		.addr_length  = 1,                         // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,     // TWI slave bus address
		.buffer       = &cont_reg_val,             // transfer data destination buffer
		.length       = 1                          // transfer data size (bytes)
	};
	ov_write_reg(BOARD_TWI, &init_packet);
  401476:	463b      	mov	r3, r7
  401478:	4619      	mov	r1, r3
  40147a:	4810      	ldr	r0, [pc, #64]	; (4014bc <configure_camera+0x78>)
  40147c:	4b10      	ldr	r3, [pc, #64]	; (4014c0 <configure_camera+0x7c>)
  40147e:	4798      	blx	r3
	
	while (ov_init(BOARD_TWI) == 1) {
  401480:	bf00      	nop
  401482:	480e      	ldr	r0, [pc, #56]	; (4014bc <configure_camera+0x78>)
  401484:	4b0f      	ldr	r3, [pc, #60]	; (4014c4 <configure_camera+0x80>)
  401486:	4798      	blx	r3
  401488:	4603      	mov	r3, r0
  40148a:	2b01      	cmp	r3, #1
  40148c:	d0f9      	beq.n	401482 <configure_camera+0x3e>
	}

	/* ov2640 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  40148e:	2100      	movs	r1, #0
  401490:	480a      	ldr	r0, [pc, #40]	; (4014bc <configure_camera+0x78>)
  401492:	4b0d      	ldr	r3, [pc, #52]	; (4014c8 <configure_camera+0x84>)
  401494:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401496:	2101      	movs	r1, #1
  401498:	4808      	ldr	r0, [pc, #32]	; (4014bc <configure_camera+0x78>)
  40149a:	4b0b      	ldr	r3, [pc, #44]	; (4014c8 <configure_camera+0x84>)
  40149c:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  40149e:	2102      	movs	r1, #2
  4014a0:	4806      	ldr	r0, [pc, #24]	; (4014bc <configure_camera+0x78>)
  4014a2:	4b09      	ldr	r3, [pc, #36]	; (4014c8 <configure_camera+0x84>)
  4014a4:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_640x480);
  4014a6:	2104      	movs	r1, #4
  4014a8:	4804      	ldr	r0, [pc, #16]	; (4014bc <configure_camera+0x78>)
  4014aa:	4b07      	ldr	r3, [pc, #28]	; (4014c8 <configure_camera+0x84>)
  4014ac:	4798      	blx	r3
}   
  4014ae:	bf00      	nop
  4014b0:	3718      	adds	r7, #24
  4014b2:	46bd      	mov	sp, r7
  4014b4:	bd80      	pop	{r7, pc}
  4014b6:	bf00      	nop
  4014b8:	004013ed 	.word	0x004013ed
  4014bc:	40018000 	.word	0x40018000
  4014c0:	00401895 	.word	0x00401895
  4014c4:	0040198d 	.word	0x0040198d
  4014c8:	00401a19 	.word	0x00401a19

004014cc <capture_pio>:
 * \param p_pio PIO instance which will capture data from OV2640 image sensor.
 * \param p_uc_buf Buffer address where captured data must be stored.
 * \param ul_size Data frame size.
 */
uint8_t capture_pio(Pio *p_pio, uint8_t *uc_buf, uint32_t ul_size)
{
  4014cc:	b480      	push	{r7}
  4014ce:	b085      	sub	sp, #20
  4014d0:	af00      	add	r7, sp, #0
  4014d2:	60f8      	str	r0, [r7, #12]
  4014d4:	60b9      	str	r1, [r7, #8]
  4014d6:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) {
  4014d8:	68fb      	ldr	r3, [r7, #12]
  4014da:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d112      	bne.n	401508 <capture_pio+0x3c>
  4014e2:	68fb      	ldr	r3, [r7, #12]
  4014e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  4014e8:	2b00      	cmp	r3, #0
  4014ea:	d10d      	bne.n	401508 <capture_pio+0x3c>
		p_pio->PIO_RPR = (uint32_t)image_dest_buffer_ptr;
  4014ec:	4a11      	ldr	r2, [pc, #68]	; (401534 <capture_pio+0x68>)
  4014ee:	68fb      	ldr	r3, [r7, #12]
  4014f0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  4014f4:	68fb      	ldr	r3, [r7, #12]
  4014f6:	687a      	ldr	r2, [r7, #4]
  4014f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  4014fc:	68fb      	ldr	r3, [r7, #12]
  4014fe:	2201      	movs	r2, #1
  401500:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401504:	2301      	movs	r3, #1
  401506:	e00f      	b.n	401528 <capture_pio+0x5c>
		} else if (p_pio->PIO_RNCR == 0) {
  401508:	68fb      	ldr	r3, [r7, #12]
  40150a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  40150e:	2b00      	cmp	r3, #0
  401510:	d109      	bne.n	401526 <capture_pio+0x5a>
		p_pio->PIO_RNPR = (uint32_t)image_dest_buffer_ptr;
  401512:	4a08      	ldr	r2, [pc, #32]	; (401534 <capture_pio+0x68>)
  401514:	68fb      	ldr	r3, [r7, #12]
  401516:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  40151a:	68fb      	ldr	r3, [r7, #12]
  40151c:	687a      	ldr	r2, [r7, #4]
  40151e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401522:	2301      	movs	r3, #1
  401524:	e000      	b.n	401528 <capture_pio+0x5c>
		} else {
		return 0;
  401526:	2300      	movs	r3, #0
	}
}
  401528:	4618      	mov	r0, r3
  40152a:	3714      	adds	r7, #20
  40152c:	46bd      	mov	sp, r7
  40152e:	bc80      	pop	{r7}
  401530:	4770      	bx	lr
  401532:	bf00      	nop
  401534:	20008628 	.word	0x20008628

00401538 <start_capture>:

/**
 * \brief Start picture capture.
 */
void start_capture(void)
{
  401538:	b580      	push	{r7, lr}
  40153a:	af00      	add	r7, sp, #0
	/* Enable vsync interrupt*/
	pio_enable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  40153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401540:	4812      	ldr	r0, [pc, #72]	; (40158c <start_capture+0x54>)
  401542:	4b13      	ldr	r3, [pc, #76]	; (401590 <start_capture+0x58>)
  401544:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait vsync_rising_edge_flag = 1 before start process*/
	while (!vsync_rising_edge_flag) {
  401546:	bf00      	nop
  401548:	4b12      	ldr	r3, [pc, #72]	; (401594 <start_capture+0x5c>)
  40154a:	681b      	ldr	r3, [r3, #0]
  40154c:	2b00      	cmp	r3, #0
  40154e:	d0fb      	beq.n	401548 <start_capture+0x10>
		// do nothing
	}
	
	/* Disable vsync interrupt*/
	pio_disable_interrupt(OV_VSYNC_PIO, OV_VSYNC_MASK);
  401550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401554:	480d      	ldr	r0, [pc, #52]	; (40158c <start_capture+0x54>)
  401556:	4b10      	ldr	r3, [pc, #64]	; (401598 <start_capture+0x60>)
  401558:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  40155a:	480c      	ldr	r0, [pc, #48]	; (40158c <start_capture+0x54>)
  40155c:	4b0f      	ldr	r3, [pc, #60]	; (40159c <start_capture+0x64>)
  40155e:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	if(capture_pio(OV_DATA_BUS_PIO, image_dest_buffer_ptr, CAM_BUFFER_SIZE/4)){
  401560:	f241 3288 	movw	r2, #5000	; 0x1388
  401564:	490e      	ldr	r1, [pc, #56]	; (4015a0 <start_capture+0x68>)
  401566:	4809      	ldr	r0, [pc, #36]	; (40158c <start_capture+0x54>)
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <start_capture+0x6c>)
  40156a:	4798      	blx	r3
	}else {
	}

	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) ==
  40156c:	bf00      	nop
  40156e:	4b07      	ldr	r3, [pc, #28]	; (40158c <start_capture+0x54>)
  401570:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401574:	f003 0308 	and.w	r3, r3, #8
  401578:	2b00      	cmp	r3, #0
  40157a:	d0f8      	beq.n	40156e <start_capture+0x36>
			PIO_PCIMR_RXBUFF)) {
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  40157c:	4803      	ldr	r0, [pc, #12]	; (40158c <start_capture+0x54>)
  40157e:	4b0a      	ldr	r3, [pc, #40]	; (4015a8 <start_capture+0x70>)
  401580:	4798      	blx	r3

	/* Reset vsync flag*/
	vsync_rising_edge_flag = false;
  401582:	4b04      	ldr	r3, [pc, #16]	; (401594 <start_capture+0x5c>)
  401584:	2200      	movs	r2, #0
  401586:	601a      	str	r2, [r3, #0]
}
  401588:	bf00      	nop
  40158a:	bd80      	pop	{r7, pc}
  40158c:	400e0e00 	.word	0x400e0e00
  401590:	00402c45 	.word	0x00402c45
  401594:	20008624 	.word	0x20008624
  401598:	00402c61 	.word	0x00402c61
  40159c:	00402e81 	.word	0x00402e81
  4015a0:	20008628 	.word	0x20008628
  4015a4:	004014cd 	.word	0x004014cd
  4015a8:	00402ead 	.word	0x00402ead

004015ac <find_image_len>:

/**
 *  \brief Finds image len.
	Returns a uint32_t for the length
 */
uint32_t find_image_len(void) {
  4015ac:	b480      	push	{r7}
  4015ae:	b083      	sub	sp, #12
  4015b0:	af00      	add	r7, sp, #0
	uint16_t *reading_ptr =  image_dest_buffer_ptr;
  4015b2:	4b1d      	ldr	r3, [pc, #116]	; (401628 <find_image_len+0x7c>)
  4015b4:	607b      	str	r3, [r7, #4]
	while((*reading_ptr != 0xD8FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015b6:	e002      	b.n	4015be <find_image_len+0x12>
	{
		reading_ptr++;
  4015b8:	687b      	ldr	r3, [r7, #4]
  4015ba:	3302      	adds	r3, #2
  4015bc:	607b      	str	r3, [r7, #4]
 *  \brief Finds image len.
	Returns a uint32_t for the length
 */
uint32_t find_image_len(void) {
	uint16_t *reading_ptr =  image_dest_buffer_ptr;
	while((*reading_ptr != 0xD8FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015be:	687b      	ldr	r3, [r7, #4]
  4015c0:	881b      	ldrh	r3, [r3, #0]
  4015c2:	f64d 02ff 	movw	r2, #55551	; 0xd8ff
  4015c6:	4293      	cmp	r3, r2
  4015c8:	d003      	beq.n	4015d2 <find_image_len+0x26>
  4015ca:	4a18      	ldr	r2, [pc, #96]	; (40162c <find_image_len+0x80>)
  4015cc:	687b      	ldr	r3, [r7, #4]
  4015ce:	4293      	cmp	r3, r2
  4015d0:	d3f2      	bcc.n	4015b8 <find_image_len+0xc>
	{
		reading_ptr++;
	}
	
	if (*reading_ptr != 0xD8FF)
  4015d2:	687b      	ldr	r3, [r7, #4]
  4015d4:	881b      	ldrh	r3, [r3, #0]
  4015d6:	f64d 02ff 	movw	r2, #55551	; 0xd8ff
  4015da:	4293      	cmp	r3, r2
  4015dc:	d001      	beq.n	4015e2 <find_image_len+0x36>
	{
		return 0;
  4015de:	2300      	movs	r3, #0
  4015e0:	e01c      	b.n	40161c <find_image_len+0x70>
	}
	else
	{
		start_of_image_ptr = (uint8_t *) reading_ptr;
  4015e2:	4a13      	ldr	r2, [pc, #76]	; (401630 <find_image_len+0x84>)
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	6013      	str	r3, [r2, #0]
	}
	
	while((*reading_ptr != 0xD9FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015e8:	e002      	b.n	4015f0 <find_image_len+0x44>
	{
		reading_ptr++;
  4015ea:	687b      	ldr	r3, [r7, #4]
  4015ec:	3302      	adds	r3, #2
  4015ee:	607b      	str	r3, [r7, #4]
	else
	{
		start_of_image_ptr = (uint8_t *) reading_ptr;
	}
	
	while((*reading_ptr != 0xD9FF) && (reading_ptr < (image_dest_buffer_ptr + CAM_BUFFER_SIZE)))
  4015f0:	687b      	ldr	r3, [r7, #4]
  4015f2:	881b      	ldrh	r3, [r3, #0]
  4015f4:	f64d 12ff 	movw	r2, #55807	; 0xd9ff
  4015f8:	4293      	cmp	r3, r2
  4015fa:	d003      	beq.n	401604 <find_image_len+0x58>
  4015fc:	4a0b      	ldr	r2, [pc, #44]	; (40162c <find_image_len+0x80>)
  4015fe:	687b      	ldr	r3, [r7, #4]
  401600:	4293      	cmp	r3, r2
  401602:	d3f2      	bcc.n	4015ea <find_image_len+0x3e>
	{
		reading_ptr++;
	}
	if (reading_ptr > (image_dest_buffer_ptr + CAM_BUFFER_SIZE))
  401604:	4a09      	ldr	r2, [pc, #36]	; (40162c <find_image_len+0x80>)
  401606:	687b      	ldr	r3, [r7, #4]
  401608:	4293      	cmp	r3, r2
  40160a:	d901      	bls.n	401610 <find_image_len+0x64>
	{
		return 0;
  40160c:	2300      	movs	r3, #0
  40160e:	e005      	b.n	40161c <find_image_len+0x70>
	}
	// need to get past end of file to include it in image
	reading_ptr++;
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	3302      	adds	r3, #2
  401614:	607b      	str	r3, [r7, #4]
	return (uint32_t) (((uint8_t*) reading_ptr) - ((uint8_t*) image_dest_buffer_ptr));
  401616:	687b      	ldr	r3, [r7, #4]
  401618:	4a03      	ldr	r2, [pc, #12]	; (401628 <find_image_len+0x7c>)
  40161a:	1a9b      	subs	r3, r3, r2
  40161c:	4618      	mov	r0, r3
  40161e:	370c      	adds	r7, #12
  401620:	46bd      	mov	sp, r7
  401622:	bc80      	pop	{r7}
  401624:	4770      	bx	lr
  401626:	bf00      	nop
  401628:	20008628 	.word	0x20008628
  40162c:	2000d448 	.word	0x2000d448
  401630:	2000d448 	.word	0x2000d448

00401634 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401634:	b480      	push	{r7}
  401636:	b083      	sub	sp, #12
  401638:	af00      	add	r7, sp, #0
  40163a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40163c:	687b      	ldr	r3, [r7, #4]
  40163e:	2b07      	cmp	r3, #7
  401640:	d825      	bhi.n	40168e <osc_get_rate+0x5a>
  401642:	a201      	add	r2, pc, #4	; (adr r2, 401648 <osc_get_rate+0x14>)
  401644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401648:	00401669 	.word	0x00401669
  40164c:	0040166f 	.word	0x0040166f
  401650:	00401675 	.word	0x00401675
  401654:	0040167b 	.word	0x0040167b
  401658:	0040167f 	.word	0x0040167f
  40165c:	00401683 	.word	0x00401683
  401660:	00401687 	.word	0x00401687
  401664:	0040168b 	.word	0x0040168b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401668:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40166c:	e010      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40166e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401672:	e00d      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401678:	e00a      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40167a:	4b08      	ldr	r3, [pc, #32]	; (40169c <osc_get_rate+0x68>)
  40167c:	e008      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40167e:	4b08      	ldr	r3, [pc, #32]	; (4016a0 <osc_get_rate+0x6c>)
  401680:	e006      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401682:	4b08      	ldr	r3, [pc, #32]	; (4016a4 <osc_get_rate+0x70>)
  401684:	e004      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401686:	4b07      	ldr	r3, [pc, #28]	; (4016a4 <osc_get_rate+0x70>)
  401688:	e002      	b.n	401690 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40168a:	4b06      	ldr	r3, [pc, #24]	; (4016a4 <osc_get_rate+0x70>)
  40168c:	e000      	b.n	401690 <osc_get_rate+0x5c>
	}

	return 0;
  40168e:	2300      	movs	r3, #0
}
  401690:	4618      	mov	r0, r3
  401692:	370c      	adds	r7, #12
  401694:	46bd      	mov	sp, r7
  401696:	bc80      	pop	{r7}
  401698:	4770      	bx	lr
  40169a:	bf00      	nop
  40169c:	003d0900 	.word	0x003d0900
  4016a0:	007a1200 	.word	0x007a1200
  4016a4:	00b71b00 	.word	0x00b71b00

004016a8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4016a8:	b580      	push	{r7, lr}
  4016aa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4016ac:	2006      	movs	r0, #6
  4016ae:	4b04      	ldr	r3, [pc, #16]	; (4016c0 <sysclk_get_main_hz+0x18>)
  4016b0:	4798      	blx	r3
  4016b2:	4602      	mov	r2, r0
  4016b4:	4613      	mov	r3, r2
  4016b6:	009b      	lsls	r3, r3, #2
  4016b8:	4413      	add	r3, r2
  4016ba:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4016bc:	4618      	mov	r0, r3
  4016be:	bd80      	pop	{r7, pc}
  4016c0:	00401635 	.word	0x00401635

004016c4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4016c4:	b580      	push	{r7, lr}
  4016c6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4016c8:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <sysclk_get_cpu_hz+0x10>)
  4016ca:	4798      	blx	r3
  4016cc:	4603      	mov	r3, r0
  4016ce:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4016d0:	4618      	mov	r0, r3
  4016d2:	bd80      	pop	{r7, pc}
  4016d4:	004016a9 	.word	0x004016a9

004016d8 <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  4016d8:	b580      	push	{r7, lr}
  4016da:	b08e      	sub	sp, #56	; 0x38
  4016dc:	af00      	add	r7, sp, #0
  4016de:	6078      	str	r0, [r7, #4]
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4016e0:	2300      	movs	r3, #0
  4016e2:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  4016e4:	2300      	movs	r3, #0
  4016e6:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4016e8:	2330      	movs	r3, #48	; 0x30
  4016ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  4016ee:	230a      	movs	r3, #10
  4016f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  4016f4:	2301      	movs	r3, #1
  4016f6:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  4016f8:	f107 030c 	add.w	r3, r7, #12
  4016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  4016fe:	2301      	movs	r3, #1
  401700:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  401702:	f107 0324 	add.w	r3, r7, #36	; 0x24
  401706:	4619      	mov	r1, r3
  401708:	6878      	ldr	r0, [r7, #4]
  40170a:	4b0e      	ldr	r3, [pc, #56]	; (401744 <ov_id+0x6c>)
  40170c:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  40170e:	2330      	movs	r3, #48	; 0x30
  401710:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  401714:	230b      	movs	r3, #11
  401716:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  401718:	2301      	movs	r3, #1
  40171a:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  40171c:	f107 0308 	add.w	r3, r7, #8
  401720:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  401722:	2301      	movs	r3, #1
  401724:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  401726:	f107 0310 	add.w	r3, r7, #16
  40172a:	4619      	mov	r1, r3
  40172c:	6878      	ldr	r0, [r7, #4]
  40172e:	4b05      	ldr	r3, [pc, #20]	; (401744 <ov_id+0x6c>)
  401730:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  401732:	68fb      	ldr	r3, [r7, #12]
  401734:	021a      	lsls	r2, r3, #8
  401736:	68bb      	ldr	r3, [r7, #8]
  401738:	4313      	orrs	r3, r2
}
  40173a:	4618      	mov	r0, r3
  40173c:	3738      	adds	r7, #56	; 0x38
  40173e:	46bd      	mov	sp, r7
  401740:	bd80      	pop	{r7, pc}
  401742:	bf00      	nop
  401744:	00401871 	.word	0x00401871

00401748 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  401748:	b580      	push	{r7, lr}
  40174a:	b08a      	sub	sp, #40	; 0x28
  40174c:	af00      	add	r7, sp, #0
  40174e:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  401750:	2300      	movs	r3, #0
  401752:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  401754:	2300      	movs	r3, #0
  401756:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  401758:	231c      	movs	r3, #28
  40175a:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  40175c:	2301      	movs	r3, #1
  40175e:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401760:	2330      	movs	r3, #48	; 0x30
  401762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  401766:	f107 0310 	add.w	r3, r7, #16
  40176a:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  40176c:	2301      	movs	r3, #1
  40176e:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401770:	f107 0314 	add.w	r3, r7, #20
  401774:	4619      	mov	r1, r3
  401776:	6878      	ldr	r0, [r7, #4]
  401778:	4b10      	ldr	r3, [pc, #64]	; (4017bc <ov_manufacturer+0x74>)
  40177a:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  40177c:	231d      	movs	r3, #29
  40177e:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  401780:	2301      	movs	r3, #1
  401782:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  401784:	2330      	movs	r3, #48	; 0x30
  401786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  40178a:	f107 030c 	add.w	r3, r7, #12
  40178e:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  401790:	2301      	movs	r3, #1
  401792:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  401794:	f107 0314 	add.w	r3, r7, #20
  401798:	4619      	mov	r1, r3
  40179a:	6878      	ldr	r0, [r7, #4]
  40179c:	4b07      	ldr	r3, [pc, #28]	; (4017bc <ov_manufacturer+0x74>)
  40179e:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  4017a0:	693b      	ldr	r3, [r7, #16]
  4017a2:	2b7f      	cmp	r3, #127	; 0x7f
  4017a4:	d104      	bne.n	4017b0 <ov_manufacturer+0x68>
  4017a6:	68fb      	ldr	r3, [r7, #12]
  4017a8:	2ba2      	cmp	r3, #162	; 0xa2
  4017aa:	d101      	bne.n	4017b0 <ov_manufacturer+0x68>
		return 0;
  4017ac:	2300      	movs	r3, #0
  4017ae:	e000      	b.n	4017b2 <ov_manufacturer+0x6a>
	}

	return 1;
  4017b0:	2301      	movs	r3, #1
}
  4017b2:	4618      	mov	r0, r3
  4017b4:	3728      	adds	r7, #40	; 0x28
  4017b6:	46bd      	mov	sp, r7
  4017b8:	bd80      	pop	{r7, pc}
  4017ba:	bf00      	nop
  4017bc:	00401871 	.word	0x00401871

004017c0 <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  4017c0:	b580      	push	{r7, lr}
  4017c2:	b08a      	sub	sp, #40	; 0x28
  4017c4:	af00      	add	r7, sp, #0
  4017c6:	6078      	str	r0, [r7, #4]
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  4017c8:	2300      	movs	r3, #0
  4017ca:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  4017cc:	2300      	movs	r3, #0
  4017ce:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  4017d0:	2300      	movs	r3, #0
  4017d2:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  4017d4:	2301      	movs	r3, #1
  4017d6:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  4017d8:	2301      	movs	r3, #1
  4017da:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4017dc:	2330      	movs	r3, #48	; 0x30
  4017de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  4017e2:	2301      	movs	r3, #1
  4017e4:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  4017e6:	f107 030c 	add.w	r3, r7, #12
  4017ea:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  4017ec:	f107 0314 	add.w	r3, r7, #20
  4017f0:	4619      	mov	r1, r3
  4017f2:	6878      	ldr	r0, [r7, #4]
  4017f4:	4b1c      	ldr	r3, [pc, #112]	; (401868 <ov_test_write+0xa8>)
  4017f6:	4798      	blx	r3

	ul_entervalue = 0xAD;
  4017f8:	23ad      	movs	r3, #173	; 0xad
  4017fa:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  4017fc:	f107 0308 	add.w	r3, r7, #8
  401800:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401802:	f107 0314 	add.w	r3, r7, #20
  401806:	4619      	mov	r1, r3
  401808:	6878      	ldr	r0, [r7, #4]
  40180a:	4b18      	ldr	r3, [pc, #96]	; (40186c <ov_test_write+0xac>)
  40180c:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40180e:	f107 0310 	add.w	r3, r7, #16
  401812:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401814:	f107 0314 	add.w	r3, r7, #20
  401818:	4619      	mov	r1, r3
  40181a:	6878      	ldr	r0, [r7, #4]
  40181c:	4b12      	ldr	r3, [pc, #72]	; (401868 <ov_test_write+0xa8>)
  40181e:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  401820:	693a      	ldr	r2, [r7, #16]
  401822:	68bb      	ldr	r3, [r7, #8]
  401824:	429a      	cmp	r2, r3
  401826:	d001      	beq.n	40182c <ov_test_write+0x6c>
		return 1;
  401828:	2301      	movs	r3, #1
  40182a:	e018      	b.n	40185e <ov_test_write+0x9e>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  40182c:	f107 030c 	add.w	r3, r7, #12
  401830:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  401832:	f107 0314 	add.w	r3, r7, #20
  401836:	4619      	mov	r1, r3
  401838:	6878      	ldr	r0, [r7, #4]
  40183a:	4b0c      	ldr	r3, [pc, #48]	; (40186c <ov_test_write+0xac>)
  40183c:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  40183e:	f107 0310 	add.w	r3, r7, #16
  401842:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  401844:	f107 0314 	add.w	r3, r7, #20
  401848:	4619      	mov	r1, r3
  40184a:	6878      	ldr	r0, [r7, #4]
  40184c:	4b06      	ldr	r3, [pc, #24]	; (401868 <ov_test_write+0xa8>)
  40184e:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  401850:	693a      	ldr	r2, [r7, #16]
  401852:	68fb      	ldr	r3, [r7, #12]
  401854:	429a      	cmp	r2, r3
  401856:	d001      	beq.n	40185c <ov_test_write+0x9c>
		return 1;
  401858:	2301      	movs	r3, #1
  40185a:	e000      	b.n	40185e <ov_test_write+0x9e>
	}

	return 0;
  40185c:	2300      	movs	r3, #0
}
  40185e:	4618      	mov	r0, r3
  401860:	3728      	adds	r7, #40	; 0x28
  401862:	46bd      	mov	sp, r7
  401864:	bd80      	pop	{r7, pc}
  401866:	bf00      	nop
  401868:	00401871 	.word	0x00401871
  40186c:	00401895 	.word	0x00401895

00401870 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401870:	b580      	push	{r7, lr}
  401872:	b084      	sub	sp, #16
  401874:	af00      	add	r7, sp, #0
  401876:	6078      	str	r0, [r7, #4]
  401878:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  40187a:	6839      	ldr	r1, [r7, #0]
  40187c:	6878      	ldr	r0, [r7, #4]
  40187e:	4b04      	ldr	r3, [pc, #16]	; (401890 <ov_read_reg+0x20>)
  401880:	4798      	blx	r3
  401882:	60f8      	str	r0, [r7, #12]

	return ul_status;
  401884:	68fb      	ldr	r3, [r7, #12]
}
  401886:	4618      	mov	r0, r3
  401888:	3710      	adds	r7, #16
  40188a:	46bd      	mov	sp, r7
  40188c:	bd80      	pop	{r7, pc}
  40188e:	bf00      	nop
  401890:	00400bb9 	.word	0x00400bb9

00401894 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  401894:	b580      	push	{r7, lr}
  401896:	b084      	sub	sp, #16
  401898:	af00      	add	r7, sp, #0
  40189a:	6078      	str	r0, [r7, #4]
  40189c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  40189e:	6839      	ldr	r1, [r7, #0]
  4018a0:	6878      	ldr	r0, [r7, #4]
  4018a2:	4b04      	ldr	r3, [pc, #16]	; (4018b4 <ov_write_reg+0x20>)
  4018a4:	4798      	blx	r3
  4018a6:	60f8      	str	r0, [r7, #12]

	return ul_status;
  4018a8:	68fb      	ldr	r3, [r7, #12]
}
  4018aa:	4618      	mov	r0, r3
  4018ac:	3710      	adds	r7, #16
  4018ae:	46bd      	mov	sp, r7
  4018b0:	bd80      	pop	{r7, pc}
  4018b2:	bf00      	nop
  4018b4:	00400cc5 	.word	0x00400cc5

004018b8 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  4018b8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  4018bc:	b08a      	sub	sp, #40	; 0x28
  4018be:	af00      	add	r7, sp, #0
  4018c0:	6078      	str	r0, [r7, #4]
  4018c2:	6039      	str	r1, [r7, #0]
	uint32_t ul_err;
	uint32_t ul_size = 0;
  4018c4:	2300      	movs	r3, #0
  4018c6:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  4018c8:	683b      	ldr	r3, [r7, #0]
  4018ca:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  4018cc:	e048      	b.n	401960 <ov_write_regs+0xa8>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  4018ce:	6a3b      	ldr	r3, [r7, #32]
  4018d0:	781b      	ldrb	r3, [r3, #0]
  4018d2:	2bfe      	cmp	r3, #254	; 0xfe
  4018d4:	d126      	bne.n	401924 <ov_write_regs+0x6c>
			delay_ms(5);
  4018d6:	4b29      	ldr	r3, [pc, #164]	; (40197c <ov_write_regs+0xc4>)
  4018d8:	4798      	blx	r3
  4018da:	4603      	mov	r3, r0
  4018dc:	4619      	mov	r1, r3
  4018de:	f04f 0200 	mov.w	r2, #0
  4018e2:	460b      	mov	r3, r1
  4018e4:	4614      	mov	r4, r2
  4018e6:	00a6      	lsls	r6, r4, #2
  4018e8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4018ec:	009d      	lsls	r5, r3, #2
  4018ee:	462b      	mov	r3, r5
  4018f0:	4634      	mov	r4, r6
  4018f2:	185b      	adds	r3, r3, r1
  4018f4:	eb44 0402 	adc.w	r4, r4, r2
  4018f8:	f243 61af 	movw	r1, #13999	; 0x36af
  4018fc:	f04f 0200 	mov.w	r2, #0
  401900:	eb13 0b01 	adds.w	fp, r3, r1
  401904:	eb44 0c02 	adc.w	ip, r4, r2
  401908:	4658      	mov	r0, fp
  40190a:	4661      	mov	r1, ip
  40190c:	4c1c      	ldr	r4, [pc, #112]	; (401980 <ov_write_regs+0xc8>)
  40190e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401912:	f04f 0300 	mov.w	r3, #0
  401916:	47a0      	blx	r4
  401918:	4603      	mov	r3, r0
  40191a:	460c      	mov	r4, r1
  40191c:	4618      	mov	r0, r3
  40191e:	4b19      	ldr	r3, [pc, #100]	; (401984 <ov_write_regs+0xcc>)
  401920:	4798      	blx	r3
  401922:	e01a      	b.n	40195a <ov_write_regs+0xa2>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  401924:	6a3b      	ldr	r3, [r7, #32]
  401926:	781b      	ldrb	r3, [r3, #0]
  401928:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  40192a:	2301      	movs	r3, #1
  40192c:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40192e:	2330      	movs	r3, #48	; 0x30
  401930:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  401932:	2301      	movs	r3, #1
  401934:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  401936:	6a3b      	ldr	r3, [r7, #32]
  401938:	3301      	adds	r3, #1
  40193a:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  40193c:	f107 0308 	add.w	r3, r7, #8
  401940:	4619      	mov	r1, r3
  401942:	6878      	ldr	r0, [r7, #4]
  401944:	4b10      	ldr	r3, [pc, #64]	; (401988 <ov_write_regs+0xd0>)
  401946:	4798      	blx	r3
  401948:	61f8      	str	r0, [r7, #28]
			ul_size++;
  40194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40194c:	3301      	adds	r3, #1
  40194e:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  401950:	69fb      	ldr	r3, [r7, #28]
  401952:	2b08      	cmp	r3, #8
  401954:	d101      	bne.n	40195a <ov_write_regs+0xa2>
				return ul_err;
  401956:	69fb      	ldr	r3, [r7, #28]
  401958:	e00b      	b.n	401972 <ov_write_regs+0xba>
			}
		}

		p_next++;
  40195a:	6a3b      	ldr	r3, [r7, #32]
  40195c:	3302      	adds	r3, #2
  40195e:	623b      	str	r3, [r7, #32]
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  401960:	6a3b      	ldr	r3, [r7, #32]
  401962:	781b      	ldrb	r3, [r3, #0]
  401964:	2bff      	cmp	r3, #255	; 0xff
  401966:	d1b2      	bne.n	4018ce <ov_write_regs+0x16>
			(p_next->val == OV_VAL_TERM))) {
  401968:	6a3b      	ldr	r3, [r7, #32]
  40196a:	785b      	ldrb	r3, [r3, #1]
	uint32_t ul_err;
	uint32_t ul_size = 0;
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;

	while (!((p_next->reg == OV_REG_TERM) &&
  40196c:	2bff      	cmp	r3, #255	; 0xff
  40196e:	d1ae      	bne.n	4018ce <ov_write_regs+0x16>
			}
		}

		p_next++;
	}
	return 0;
  401970:	2300      	movs	r3, #0
}
  401972:	4618      	mov	r0, r3
  401974:	3728      	adds	r7, #40	; 0x28
  401976:	46bd      	mov	sp, r7
  401978:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  40197c:	004016c5 	.word	0x004016c5
  401980:	004039a1 	.word	0x004039a1
  401984:	20000001 	.word	0x20000001
  401988:	00401895 	.word	0x00401895

0040198c <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  40198c:	b580      	push	{r7, lr}
  40198e:	b08a      	sub	sp, #40	; 0x28
  401990:	af00      	add	r7, sp, #0
  401992:	6078      	str	r0, [r7, #4]
	const uint8_t cont_reg_val = 1;
  401994:	2301      	movs	r3, #1
  401996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  40199a:	f107 030c 	add.w	r3, r7, #12
  40199e:	2200      	movs	r2, #0
  4019a0:	601a      	str	r2, [r3, #0]
  4019a2:	605a      	str	r2, [r3, #4]
  4019a4:	609a      	str	r2, [r3, #8]
  4019a6:	60da      	str	r2, [r3, #12]
  4019a8:	611a      	str	r2, [r3, #16]
  4019aa:	23ff      	movs	r3, #255	; 0xff
  4019ac:	733b      	strb	r3, [r7, #12]
  4019ae:	2301      	movs	r3, #1
  4019b0:	613b      	str	r3, [r7, #16]
  4019b2:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4019b6:	617b      	str	r3, [r7, #20]
  4019b8:	2301      	movs	r3, #1
  4019ba:	61bb      	str	r3, [r7, #24]
  4019bc:	2330      	movs	r3, #48	; 0x30
  4019be:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  4019c0:	f107 030c 	add.w	r3, r7, #12
  4019c4:	4619      	mov	r1, r3
  4019c6:	6878      	ldr	r0, [r7, #4]
  4019c8:	4b0f      	ldr	r3, [pc, #60]	; (401a08 <ov_init+0x7c>)
  4019ca:	4798      	blx	r3
	
	uint32_t ul_id = 0;
  4019cc:	2300      	movs	r3, #0
  4019ce:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  4019d0:	6878      	ldr	r0, [r7, #4]
  4019d2:	4b0e      	ldr	r3, [pc, #56]	; (401a0c <ov_init+0x80>)
  4019d4:	4798      	blx	r3
  4019d6:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  4019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019da:	0a1b      	lsrs	r3, r3, #8
  4019dc:	b2db      	uxtb	r3, r3
  4019de:	2b26      	cmp	r3, #38	; 0x26
  4019e0:	d10d      	bne.n	4019fe <ov_init+0x72>
		if (ov_manufacturer(p_twi) == 0) {
  4019e2:	6878      	ldr	r0, [r7, #4]
  4019e4:	4b0a      	ldr	r3, [pc, #40]	; (401a10 <ov_init+0x84>)
  4019e6:	4798      	blx	r3
  4019e8:	4603      	mov	r3, r0
  4019ea:	2b00      	cmp	r3, #0
  4019ec:	d107      	bne.n	4019fe <ov_init+0x72>
			if (ov_test_write(p_twi) == 0) {
  4019ee:	6878      	ldr	r0, [r7, #4]
  4019f0:	4b08      	ldr	r3, [pc, #32]	; (401a14 <ov_init+0x88>)
  4019f2:	4798      	blx	r3
  4019f4:	4603      	mov	r3, r0
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d101      	bne.n	4019fe <ov_init+0x72>
				return 0;
  4019fa:	2300      	movs	r3, #0
  4019fc:	e000      	b.n	401a00 <ov_init+0x74>
			}
		}
	}

	return 1;
  4019fe:	2301      	movs	r3, #1
}
  401a00:	4618      	mov	r0, r3
  401a02:	3728      	adds	r7, #40	; 0x28
  401a04:	46bd      	mov	sp, r7
  401a06:	bd80      	pop	{r7, pc}
  401a08:	00401895 	.word	0x00401895
  401a0c:	004016d9 	.word	0x004016d9
  401a10:	00401749 	.word	0x00401749
  401a14:	004017c1 	.word	0x004017c1

00401a18 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  401a18:	b580      	push	{r7, lr}
  401a1a:	b084      	sub	sp, #16
  401a1c:	af00      	add	r7, sp, #0
  401a1e:	6078      	str	r0, [r7, #4]
  401a20:	460b      	mov	r3, r1
  401a22:	70fb      	strb	r3, [r7, #3]
	const ov_reg *p_regs_conf = NULL;
  401a24:	2300      	movs	r3, #0
  401a26:	60fb      	str	r3, [r7, #12]

	/* Common register initialization */
	switch (format) {
  401a28:	78fb      	ldrb	r3, [r7, #3]
  401a2a:	2b11      	cmp	r3, #17
  401a2c:	d85c      	bhi.n	401ae8 <ov_configure+0xd0>
  401a2e:	a201      	add	r2, pc, #4	; (adr r2, 401a34 <ov_configure+0x1c>)
  401a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a34:	00401a7d 	.word	0x00401a7d
  401a38:	00401a83 	.word	0x00401a83
  401a3c:	00401a89 	.word	0x00401a89
  401a40:	00401a8f 	.word	0x00401a8f
  401a44:	00401a95 	.word	0x00401a95
  401a48:	00401a9b 	.word	0x00401a9b
  401a4c:	00401aa1 	.word	0x00401aa1
  401a50:	00401aa7 	.word	0x00401aa7
  401a54:	00401aad 	.word	0x00401aad
  401a58:	00401ab3 	.word	0x00401ab3
  401a5c:	00401ab9 	.word	0x00401ab9
  401a60:	00401abf 	.word	0x00401abf
  401a64:	00401ac5 	.word	0x00401ac5
  401a68:	00401acb 	.word	0x00401acb
  401a6c:	00401ad1 	.word	0x00401ad1
  401a70:	00401ad7 	.word	0x00401ad7
  401a74:	00401add 	.word	0x00401add
  401a78:	00401ae3 	.word	0x00401ae3
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  401a7c:	4b22      	ldr	r3, [pc, #136]	; (401b08 <ov_configure+0xf0>)
  401a7e:	60fb      	str	r3, [r7, #12]
		break;
  401a80:	e033      	b.n	401aea <ov_configure+0xd2>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  401a82:	4b22      	ldr	r3, [pc, #136]	; (401b0c <ov_configure+0xf4>)
  401a84:	60fb      	str	r3, [r7, #12]
		break;
  401a86:	e030      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  401a88:	4b21      	ldr	r3, [pc, #132]	; (401b10 <ov_configure+0xf8>)
  401a8a:	60fb      	str	r3, [r7, #12]
		break;
  401a8c:	e02d      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  401a8e:	4b21      	ldr	r3, [pc, #132]	; (401b14 <ov_configure+0xfc>)
  401a90:	60fb      	str	r3, [r7, #12]
		break;
  401a92:	e02a      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  401a94:	4b20      	ldr	r3, [pc, #128]	; (401b18 <ov_configure+0x100>)
  401a96:	60fb      	str	r3, [r7, #12]
		break;
  401a98:	e027      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  401a9a:	4b20      	ldr	r3, [pc, #128]	; (401b1c <ov_configure+0x104>)
  401a9c:	60fb      	str	r3, [r7, #12]
		break;
  401a9e:	e024      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  401aa0:	4b1f      	ldr	r3, [pc, #124]	; (401b20 <ov_configure+0x108>)
  401aa2:	60fb      	str	r3, [r7, #12]
		break;
  401aa4:	e021      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  401aa6:	4b1f      	ldr	r3, [pc, #124]	; (401b24 <ov_configure+0x10c>)
  401aa8:	60fb      	str	r3, [r7, #12]
		break;
  401aaa:	e01e      	b.n	401aea <ov_configure+0xd2>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  401aac:	4b1e      	ldr	r3, [pc, #120]	; (401b28 <ov_configure+0x110>)
  401aae:	60fb      	str	r3, [r7, #12]
		break;
  401ab0:	e01b      	b.n	401aea <ov_configure+0xd2>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  401ab2:	4b1e      	ldr	r3, [pc, #120]	; (401b2c <ov_configure+0x114>)
  401ab4:	60fb      	str	r3, [r7, #12]
		break;
  401ab6:	e018      	b.n	401aea <ov_configure+0xd2>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  401ab8:	4b1d      	ldr	r3, [pc, #116]	; (401b30 <ov_configure+0x118>)
  401aba:	60fb      	str	r3, [r7, #12]
		break;
  401abc:	e015      	b.n	401aea <ov_configure+0xd2>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  401abe:	4b1d      	ldr	r3, [pc, #116]	; (401b34 <ov_configure+0x11c>)
  401ac0:	60fb      	str	r3, [r7, #12]
		break;
  401ac2:	e012      	b.n	401aea <ov_configure+0xd2>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  401ac4:	4b1c      	ldr	r3, [pc, #112]	; (401b38 <ov_configure+0x120>)
  401ac6:	60fb      	str	r3, [r7, #12]
		break;
  401ac8:	e00f      	b.n	401aea <ov_configure+0xd2>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  401aca:	4b1c      	ldr	r3, [pc, #112]	; (401b3c <ov_configure+0x124>)
  401acc:	60fb      	str	r3, [r7, #12]
		break;
  401ace:	e00c      	b.n	401aea <ov_configure+0xd2>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  401ad0:	4b1b      	ldr	r3, [pc, #108]	; (401b40 <ov_configure+0x128>)
  401ad2:	60fb      	str	r3, [r7, #12]
		break;
  401ad4:	e009      	b.n	401aea <ov_configure+0xd2>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  401ad6:	4b1b      	ldr	r3, [pc, #108]	; (401b44 <ov_configure+0x12c>)
  401ad8:	60fb      	str	r3, [r7, #12]
		break;
  401ada:	e006      	b.n	401aea <ov_configure+0xd2>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  401adc:	4b1a      	ldr	r3, [pc, #104]	; (401b48 <ov_configure+0x130>)
  401ade:	60fb      	str	r3, [r7, #12]
		break;
  401ae0:	e003      	b.n	401aea <ov_configure+0xd2>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  401ae2:	4b1a      	ldr	r3, [pc, #104]	; (401b4c <ov_configure+0x134>)
  401ae4:	60fb      	str	r3, [r7, #12]
		break;
  401ae6:	e000      	b.n	401aea <ov_configure+0xd2>

	default:
		break;
  401ae8:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  401aea:	68fb      	ldr	r3, [r7, #12]
  401aec:	2b00      	cmp	r3, #0
  401aee:	d005      	beq.n	401afc <ov_configure+0xe4>
		ov_write_regs( p_twi, p_regs_conf );
  401af0:	68f9      	ldr	r1, [r7, #12]
  401af2:	6878      	ldr	r0, [r7, #4]
  401af4:	4b16      	ldr	r3, [pc, #88]	; (401b50 <ov_configure+0x138>)
  401af6:	4798      	blx	r3
		return 0;
  401af8:	2300      	movs	r3, #0
  401afa:	e000      	b.n	401afe <ov_configure+0xe6>
	}

	return 1;
  401afc:	2301      	movs	r3, #1
}
  401afe:	4618      	mov	r0, r3
  401b00:	3710      	adds	r7, #16
  401b02:	46bd      	mov	sp, r7
  401b04:	bd80      	pop	{r7, pc}
  401b06:	bf00      	nop
  401b08:	00408b1c 	.word	0x00408b1c
  401b0c:	00408c9c 	.word	0x00408c9c
  401b10:	00408cb0 	.word	0x00408cb0
  401b14:	00408cc4 	.word	0x00408cc4
  401b18:	00408d14 	.word	0x00408d14
  401b1c:	00408d68 	.word	0x00408d68
  401b20:	00408dbc 	.word	0x00408dbc
  401b24:	00408e0c 	.word	0x00408e0c
  401b28:	00408e60 	.word	0x00408e60
  401b2c:	00408eb4 	.word	0x00408eb4
  401b30:	00408fa4 	.word	0x00408fa4
  401b34:	00409094 	.word	0x00409094
  401b38:	00409184 	.word	0x00409184
  401b3c:	00409274 	.word	0x00409274
  401b40:	00409368 	.word	0x00409368
  401b44:	0040945c 	.word	0x0040945c
  401b48:	00409550 	.word	0x00409550
  401b4c:	00409644 	.word	0x00409644
  401b50:	004018b9 	.word	0x004018b9

00401b54 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401b54:	b480      	push	{r7}
  401b56:	b083      	sub	sp, #12
  401b58:	af00      	add	r7, sp, #0
  401b5a:	4603      	mov	r3, r0
  401b5c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b5e:	4908      	ldr	r1, [pc, #32]	; (401b80 <NVIC_EnableIRQ+0x2c>)
  401b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b64:	095b      	lsrs	r3, r3, #5
  401b66:	79fa      	ldrb	r2, [r7, #7]
  401b68:	f002 021f 	and.w	r2, r2, #31
  401b6c:	2001      	movs	r0, #1
  401b6e:	fa00 f202 	lsl.w	r2, r0, r2
  401b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401b76:	bf00      	nop
  401b78:	370c      	adds	r7, #12
  401b7a:	46bd      	mov	sp, r7
  401b7c:	bc80      	pop	{r7}
  401b7e:	4770      	bx	lr
  401b80:	e000e100 	.word	0xe000e100

00401b84 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401b84:	b480      	push	{r7}
  401b86:	b083      	sub	sp, #12
  401b88:	af00      	add	r7, sp, #0
  401b8a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401b8c:	687b      	ldr	r3, [r7, #4]
  401b8e:	2b07      	cmp	r3, #7
  401b90:	d825      	bhi.n	401bde <osc_get_rate+0x5a>
  401b92:	a201      	add	r2, pc, #4	; (adr r2, 401b98 <osc_get_rate+0x14>)
  401b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b98:	00401bb9 	.word	0x00401bb9
  401b9c:	00401bbf 	.word	0x00401bbf
  401ba0:	00401bc5 	.word	0x00401bc5
  401ba4:	00401bcb 	.word	0x00401bcb
  401ba8:	00401bcf 	.word	0x00401bcf
  401bac:	00401bd3 	.word	0x00401bd3
  401bb0:	00401bd7 	.word	0x00401bd7
  401bb4:	00401bdb 	.word	0x00401bdb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401bb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401bbc:	e010      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bc2:	e00d      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401bc8:	e00a      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401bca:	4b08      	ldr	r3, [pc, #32]	; (401bec <osc_get_rate+0x68>)
  401bcc:	e008      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401bce:	4b08      	ldr	r3, [pc, #32]	; (401bf0 <osc_get_rate+0x6c>)
  401bd0:	e006      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401bd2:	4b08      	ldr	r3, [pc, #32]	; (401bf4 <osc_get_rate+0x70>)
  401bd4:	e004      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401bd6:	4b07      	ldr	r3, [pc, #28]	; (401bf4 <osc_get_rate+0x70>)
  401bd8:	e002      	b.n	401be0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401bda:	4b06      	ldr	r3, [pc, #24]	; (401bf4 <osc_get_rate+0x70>)
  401bdc:	e000      	b.n	401be0 <osc_get_rate+0x5c>
	}

	return 0;
  401bde:	2300      	movs	r3, #0
}
  401be0:	4618      	mov	r0, r3
  401be2:	370c      	adds	r7, #12
  401be4:	46bd      	mov	sp, r7
  401be6:	bc80      	pop	{r7}
  401be8:	4770      	bx	lr
  401bea:	bf00      	nop
  401bec:	003d0900 	.word	0x003d0900
  401bf0:	007a1200 	.word	0x007a1200
  401bf4:	00b71b00 	.word	0x00b71b00

00401bf8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401bf8:	b580      	push	{r7, lr}
  401bfa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401bfc:	2006      	movs	r0, #6
  401bfe:	4b04      	ldr	r3, [pc, #16]	; (401c10 <sysclk_get_main_hz+0x18>)
  401c00:	4798      	blx	r3
  401c02:	4602      	mov	r2, r0
  401c04:	4613      	mov	r3, r2
  401c06:	009b      	lsls	r3, r3, #2
  401c08:	4413      	add	r3, r2
  401c0a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401c0c:	4618      	mov	r0, r3
  401c0e:	bd80      	pop	{r7, pc}
  401c10:	00401b85 	.word	0x00401b85

00401c14 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401c14:	b580      	push	{r7, lr}
  401c16:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401c18:	4b02      	ldr	r3, [pc, #8]	; (401c24 <sysclk_get_cpu_hz+0x10>)
  401c1a:	4798      	blx	r3
  401c1c:	4603      	mov	r3, r0
  401c1e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401c20:	4618      	mov	r0, r3
  401c22:	bd80      	pop	{r7, pc}
  401c24:	00401bf9 	.word	0x00401bf9

00401c28 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  401c28:	b580      	push	{r7, lr}
  401c2a:	b082      	sub	sp, #8
  401c2c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  401c2e:	2100      	movs	r1, #0
  401c30:	4809      	ldr	r0, [pc, #36]	; (401c58 <TC0_Handler+0x30>)
  401c32:	4b0a      	ldr	r3, [pc, #40]	; (401c5c <TC0_Handler+0x34>)
  401c34:	4798      	blx	r3
  401c36:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  401c38:	687b      	ldr	r3, [r7, #4]
  401c3a:	f003 0310 	and.w	r3, r3, #16
  401c3e:	2b00      	cmp	r3, #0
  401c40:	d006      	beq.n	401c50 <TC0_Handler+0x28>
		counts++;
  401c42:	4b07      	ldr	r3, [pc, #28]	; (401c60 <TC0_Handler+0x38>)
  401c44:	781b      	ldrb	r3, [r3, #0]
  401c46:	b2db      	uxtb	r3, r3
  401c48:	3301      	adds	r3, #1
  401c4a:	b2da      	uxtb	r2, r3
  401c4c:	4b04      	ldr	r3, [pc, #16]	; (401c60 <TC0_Handler+0x38>)
  401c4e:	701a      	strb	r2, [r3, #0]
	}
}
  401c50:	bf00      	nop
  401c52:	3708      	adds	r7, #8
  401c54:	46bd      	mov	sp, r7
  401c56:	bd80      	pop	{r7, pc}
  401c58:	40010000 	.word	0x40010000
  401c5c:	0040047d 	.word	0x0040047d
  401c60:	2000d690 	.word	0x2000d690

00401c64 <configure_tc>:

void configure_tc(void)
{
  401c64:	b590      	push	{r4, r7, lr}
  401c66:	b087      	sub	sp, #28
  401c68:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  401c6a:	4b16      	ldr	r3, [pc, #88]	; (401cc4 <configure_tc+0x60>)
  401c6c:	4798      	blx	r3
  401c6e:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  401c70:	2017      	movs	r0, #23
  401c72:	4b15      	ldr	r3, [pc, #84]	; (401cc8 <configure_tc+0x64>)
  401c74:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401c76:	1d39      	adds	r1, r7, #4
  401c78:	f107 0208 	add.w	r2, r7, #8
  401c7c:	68fb      	ldr	r3, [r7, #12]
  401c7e:	9300      	str	r3, [sp, #0]
  401c80:	460b      	mov	r3, r1
  401c82:	68f9      	ldr	r1, [r7, #12]
  401c84:	2001      	movs	r0, #1
  401c86:	4c11      	ldr	r4, [pc, #68]	; (401ccc <configure_tc+0x68>)
  401c88:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  401c8a:	687b      	ldr	r3, [r7, #4]
  401c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401c90:	461a      	mov	r2, r3
  401c92:	2100      	movs	r1, #0
  401c94:	480e      	ldr	r0, [pc, #56]	; (401cd0 <configure_tc+0x6c>)
  401c96:	4b0f      	ldr	r3, [pc, #60]	; (401cd4 <configure_tc+0x70>)
  401c98:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  401c9a:	68bb      	ldr	r3, [r7, #8]
  401c9c:	68fa      	ldr	r2, [r7, #12]
  401c9e:	fbb2 f3f3 	udiv	r3, r2, r3
  401ca2:	461a      	mov	r2, r3
  401ca4:	2100      	movs	r1, #0
  401ca6:	480a      	ldr	r0, [pc, #40]	; (401cd0 <configure_tc+0x6c>)
  401ca8:	4b0b      	ldr	r3, [pc, #44]	; (401cd8 <configure_tc+0x74>)
  401caa:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  401cac:	2017      	movs	r0, #23
  401cae:	4b0b      	ldr	r3, [pc, #44]	; (401cdc <configure_tc+0x78>)
  401cb0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  401cb2:	2210      	movs	r2, #16
  401cb4:	2100      	movs	r1, #0
  401cb6:	4806      	ldr	r0, [pc, #24]	; (401cd0 <configure_tc+0x6c>)
  401cb8:	4b09      	ldr	r3, [pc, #36]	; (401ce0 <configure_tc+0x7c>)
  401cba:	4798      	blx	r3
  401cbc:	bf00      	nop
  401cbe:	3714      	adds	r7, #20
  401cc0:	46bd      	mov	sp, r7
  401cc2:	bd90      	pop	{r4, r7, pc}
  401cc4:	00401c15 	.word	0x00401c15
  401cc8:	00403175 	.word	0x00403175
  401ccc:	004004a1 	.word	0x004004a1
  401cd0:	40010000 	.word	0x40010000
  401cd4:	004003d9 	.word	0x004003d9
  401cd8:	00400431 	.word	0x00400431
  401cdc:	00401b55 	.word	0x00401b55
  401ce0:	00400455 	.word	0x00400455

00401ce4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ce4:	b480      	push	{r7}
  401ce6:	b083      	sub	sp, #12
  401ce8:	af00      	add	r7, sp, #0
  401cea:	4603      	mov	r3, r0
  401cec:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401cee:	4908      	ldr	r1, [pc, #32]	; (401d10 <NVIC_EnableIRQ+0x2c>)
  401cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401cf4:	095b      	lsrs	r3, r3, #5
  401cf6:	79fa      	ldrb	r2, [r7, #7]
  401cf8:	f002 021f 	and.w	r2, r2, #31
  401cfc:	2001      	movs	r0, #1
  401cfe:	fa00 f202 	lsl.w	r2, r0, r2
  401d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d06:	bf00      	nop
  401d08:	370c      	adds	r7, #12
  401d0a:	46bd      	mov	sp, r7
  401d0c:	bc80      	pop	{r7}
  401d0e:	4770      	bx	lr
  401d10:	e000e100 	.word	0xe000e100

00401d14 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  401d14:	b480      	push	{r7}
  401d16:	b083      	sub	sp, #12
  401d18:	af00      	add	r7, sp, #0
  401d1a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401d1c:	687b      	ldr	r3, [r7, #4]
  401d1e:	2b07      	cmp	r3, #7
  401d20:	d825      	bhi.n	401d6e <osc_get_rate+0x5a>
  401d22:	a201      	add	r2, pc, #4	; (adr r2, 401d28 <osc_get_rate+0x14>)
  401d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d28:	00401d49 	.word	0x00401d49
  401d2c:	00401d4f 	.word	0x00401d4f
  401d30:	00401d55 	.word	0x00401d55
  401d34:	00401d5b 	.word	0x00401d5b
  401d38:	00401d5f 	.word	0x00401d5f
  401d3c:	00401d63 	.word	0x00401d63
  401d40:	00401d67 	.word	0x00401d67
  401d44:	00401d6b 	.word	0x00401d6b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  401d48:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401d4c:	e010      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  401d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d52:	e00d      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  401d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401d58:	e00a      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  401d5a:	4b08      	ldr	r3, [pc, #32]	; (401d7c <osc_get_rate+0x68>)
  401d5c:	e008      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  401d5e:	4b08      	ldr	r3, [pc, #32]	; (401d80 <osc_get_rate+0x6c>)
  401d60:	e006      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  401d62:	4b08      	ldr	r3, [pc, #32]	; (401d84 <osc_get_rate+0x70>)
  401d64:	e004      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  401d66:	4b07      	ldr	r3, [pc, #28]	; (401d84 <osc_get_rate+0x70>)
  401d68:	e002      	b.n	401d70 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  401d6a:	4b06      	ldr	r3, [pc, #24]	; (401d84 <osc_get_rate+0x70>)
  401d6c:	e000      	b.n	401d70 <osc_get_rate+0x5c>
	}

	return 0;
  401d6e:	2300      	movs	r3, #0
}
  401d70:	4618      	mov	r0, r3
  401d72:	370c      	adds	r7, #12
  401d74:	46bd      	mov	sp, r7
  401d76:	bc80      	pop	{r7}
  401d78:	4770      	bx	lr
  401d7a:	bf00      	nop
  401d7c:	003d0900 	.word	0x003d0900
  401d80:	007a1200 	.word	0x007a1200
  401d84:	00b71b00 	.word	0x00b71b00

00401d88 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  401d8c:	2006      	movs	r0, #6
  401d8e:	4b04      	ldr	r3, [pc, #16]	; (401da0 <sysclk_get_main_hz+0x18>)
  401d90:	4798      	blx	r3
  401d92:	4602      	mov	r2, r0
  401d94:	4613      	mov	r3, r2
  401d96:	009b      	lsls	r3, r3, #2
  401d98:	4413      	add	r3, r2
  401d9a:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  401d9c:	4618      	mov	r0, r3
  401d9e:	bd80      	pop	{r7, pc}
  401da0:	00401d15 	.word	0x00401d15

00401da4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  401da4:	b580      	push	{r7, lr}
  401da6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401da8:	4b02      	ldr	r3, [pc, #8]	; (401db4 <sysclk_get_cpu_hz+0x10>)
  401daa:	4798      	blx	r3
  401dac:	4603      	mov	r3, r0
  401dae:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401db0:	4618      	mov	r0, r3
  401db2:	bd80      	pop	{r7, pc}
  401db4:	00401d89 	.word	0x00401d89

00401db8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401db8:	b580      	push	{r7, lr}
  401dba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  401dbc:	4b02      	ldr	r3, [pc, #8]	; (401dc8 <sysclk_get_peripheral_hz+0x10>)
  401dbe:	4798      	blx	r3
  401dc0:	4603      	mov	r3, r0
  401dc2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401dc4:	4618      	mov	r0, r3
  401dc6:	bd80      	pop	{r7, pc}
  401dc8:	00401d89 	.word	0x00401d89

00401dcc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401dcc:	b580      	push	{r7, lr}
  401dce:	b082      	sub	sp, #8
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401dd4:	6878      	ldr	r0, [r7, #4]
  401dd6:	4b03      	ldr	r3, [pc, #12]	; (401de4 <sysclk_enable_peripheral_clock+0x18>)
  401dd8:	4798      	blx	r3
}
  401dda:	bf00      	nop
  401ddc:	3708      	adds	r7, #8
  401dde:	46bd      	mov	sp, r7
  401de0:	bd80      	pop	{r7, pc}
  401de2:	bf00      	nop
  401de4:	00403175 	.word	0x00403175

00401de8 <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  401de8:	b580      	push	{r7, lr}
  401dea:	b082      	sub	sp, #8
  401dec:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  401dee:	2300      	movs	r3, #0
  401df0:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  401df2:	2101      	movs	r1, #1
  401df4:	4815      	ldr	r0, [pc, #84]	; (401e4c <USART0_Handler+0x64>)
  401df6:	4b16      	ldr	r3, [pc, #88]	; (401e50 <USART0_Handler+0x68>)
  401df8:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  401dfa:	4814      	ldr	r0, [pc, #80]	; (401e4c <USART0_Handler+0x64>)
  401dfc:	4b15      	ldr	r3, [pc, #84]	; (401e54 <USART0_Handler+0x6c>)
  401dfe:	4798      	blx	r3
  401e00:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401e02:	4915      	ldr	r1, [pc, #84]	; (401e58 <USART0_Handler+0x70>)
  401e04:	4811      	ldr	r0, [pc, #68]	; (401e4c <USART0_Handler+0x64>)
  401e06:	4b15      	ldr	r3, [pc, #84]	; (401e5c <USART0_Handler+0x74>)
  401e08:	4798      	blx	r3
  401e0a:	4603      	mov	r3, r0
  401e0c:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  401e0e:	683b      	ldr	r3, [r7, #0]
  401e10:	f003 0301 	and.w	r3, r3, #1
  401e14:	2b00      	cmp	r3, #0
  401e16:	d011      	beq.n	401e3c <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  401e18:	490f      	ldr	r1, [pc, #60]	; (401e58 <USART0_Handler+0x70>)
  401e1a:	480c      	ldr	r0, [pc, #48]	; (401e4c <USART0_Handler+0x64>)
  401e1c:	4b0f      	ldr	r3, [pc, #60]	; (401e5c <USART0_Handler+0x74>)
  401e1e:	4798      	blx	r3
  401e20:	4603      	mov	r3, r0
  401e22:	71fb      	strb	r3, [r7, #7]
		usart_buffer[usart_buffer_index] = (uint8_t) received_byte_wifi;
  401e24:	4b0e      	ldr	r3, [pc, #56]	; (401e60 <USART0_Handler+0x78>)
  401e26:	681b      	ldr	r3, [r3, #0]
  401e28:	4a0b      	ldr	r2, [pc, #44]	; (401e58 <USART0_Handler+0x70>)
  401e2a:	6812      	ldr	r2, [r2, #0]
  401e2c:	b2d1      	uxtb	r1, r2
  401e2e:	4a0d      	ldr	r2, [pc, #52]	; (401e64 <USART0_Handler+0x7c>)
  401e30:	54d1      	strb	r1, [r2, r3]
		usart_buffer_index++;
  401e32:	4b0b      	ldr	r3, [pc, #44]	; (401e60 <USART0_Handler+0x78>)
  401e34:	681b      	ldr	r3, [r3, #0]
  401e36:	3301      	adds	r3, #1
  401e38:	4a09      	ldr	r2, [pc, #36]	; (401e60 <USART0_Handler+0x78>)
  401e3a:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  401e3c:	2101      	movs	r1, #1
  401e3e:	4803      	ldr	r0, [pc, #12]	; (401e4c <USART0_Handler+0x64>)
  401e40:	4b09      	ldr	r3, [pc, #36]	; (401e68 <USART0_Handler+0x80>)
  401e42:	4798      	blx	r3
}
  401e44:	bf00      	nop
  401e46:	3708      	adds	r7, #8
  401e48:	46bd      	mov	sp, r7
  401e4a:	bd80      	pop	{r7, pc}
  401e4c:	40024000 	.word	0x40024000
  401e50:	00400fe5 	.word	0x00400fe5
  401e54:	00401001 	.word	0x00401001
  401e58:	2000d454 	.word	0x2000d454
  401e5c:	004010cd 	.word	0x004010cd
  401e60:	2000d64c 	.word	0x2000d64c
  401e64:	2000d458 	.word	0x2000d458
  401e68:	00400fc9 	.word	0x00400fc9

00401e6c <configure_usart>:

/**
 *  Configure board USART communication with PC or other terminal.
 */
void configure_usart(void)
{
  401e6c:	b5b0      	push	{r4, r5, r7, lr}
  401e6e:	b086      	sub	sp, #24
  401e70:	af00      	add	r7, sp, #0
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401e72:	4b15      	ldr	r3, [pc, #84]	; (401ec8 <configure_usart+0x5c>)
  401e74:	463c      	mov	r4, r7
  401e76:	461d      	mov	r5, r3
  401e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401e7c:	e895 0003 	ldmia.w	r5, {r0, r1}
  401e80:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401e84:	4b11      	ldr	r3, [pc, #68]	; (401ecc <configure_usart+0x60>)
  401e86:	4798      	blx	r3
  401e88:	4602      	mov	r2, r0
  401e8a:	4b11      	ldr	r3, [pc, #68]	; (401ed0 <configure_usart+0x64>)
  401e8c:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
  401e8e:	200e      	movs	r0, #14
  401e90:	4b10      	ldr	r3, [pc, #64]	; (401ed4 <configure_usart+0x68>)
  401e92:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  401e94:	4b0e      	ldr	r3, [pc, #56]	; (401ed0 <configure_usart+0x64>)
  401e96:	681a      	ldr	r2, [r3, #0]
  401e98:	463b      	mov	r3, r7
  401e9a:	4619      	mov	r1, r3
  401e9c:	480e      	ldr	r0, [pc, #56]	; (401ed8 <configure_usart+0x6c>)
  401e9e:	4b0f      	ldr	r3, [pc, #60]	; (401edc <configure_usart+0x70>)
  401ea0:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  401ea2:	f04f 31ff 	mov.w	r1, #4294967295
  401ea6:	480c      	ldr	r0, [pc, #48]	; (401ed8 <configure_usart+0x6c>)
  401ea8:	4b0d      	ldr	r3, [pc, #52]	; (401ee0 <configure_usart+0x74>)
  401eaa:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  401eac:	480a      	ldr	r0, [pc, #40]	; (401ed8 <configure_usart+0x6c>)
  401eae:	4b0d      	ldr	r3, [pc, #52]	; (401ee4 <configure_usart+0x78>)
  401eb0:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  401eb2:	4809      	ldr	r0, [pc, #36]	; (401ed8 <configure_usart+0x6c>)
  401eb4:	4b0c      	ldr	r3, [pc, #48]	; (401ee8 <configure_usart+0x7c>)
  401eb6:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
  401eb8:	200e      	movs	r0, #14
  401eba:	4b0c      	ldr	r3, [pc, #48]	; (401eec <configure_usart+0x80>)
  401ebc:	4798      	blx	r3
	
	//usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
}
  401ebe:	bf00      	nop
  401ec0:	3718      	adds	r7, #24
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bdb0      	pop	{r4, r5, r7, pc}
  401ec6:	bf00      	nop
  401ec8:	00409734 	.word	0x00409734
  401ecc:	00401db9 	.word	0x00401db9
  401ed0:	2000d654 	.word	0x2000d654
  401ed4:	00401dcd 	.word	0x00401dcd
  401ed8:	40024000 	.word	0x40024000
  401edc:	00400f29 	.word	0x00400f29
  401ee0:	00400fe5 	.word	0x00400fe5
  401ee4:	00400f69 	.word	0x00400f69
  401ee8:	00400f99 	.word	0x00400f99
  401eec:	00401ce5 	.word	0x00401ce5

00401ef0 <handler_command_complete>:

/**
 *  \brief Command response handler for wifi.
 */
void handler_command_complete(uint32_t ul_id, uint32_t ul_mask) {
  401ef0:	b480      	push	{r7}
  401ef2:	b083      	sub	sp, #12
  401ef4:	af00      	add	r7, sp, #0
  401ef6:	6078      	str	r0, [r7, #4]
  401ef8:	6039      	str	r1, [r7, #0]
	//delay_ms(50);
	
	//input_buffer[buffer_index] = 0;
	//data_recieved = 1;
	//buffer_index = 0;
}
  401efa:	bf00      	nop
  401efc:	370c      	adds	r7, #12
  401efe:	46bd      	mov	sp, r7
  401f00:	bc80      	pop	{r7}
  401f02:	4770      	bx	lr

00401f04 <configure_command_complete>:

/**
 *  \brief Configures communication pin for wifi.
 */
void configure_command_complete(void){
  401f04:	b590      	push	{r4, r7, lr}
  401f06:	b083      	sub	sp, #12
  401f08:	af02      	add	r7, sp, #8
	// we set as the wifi command pin
	// we should be able to do this
	
	//configure button from the button project?
	
	pmc_enable_periph_clk(WIFI_COMM_ID); // put these definitions in wifi.h
  401f0a:	200c      	movs	r0, #12
  401f0c:	4b0e      	ldr	r3, [pc, #56]	; (401f48 <configure_command_complete+0x44>)
  401f0e:	4798      	blx	r3
	// see which pins we used
	// just the rising edge option
	
	pio_set_debounce_filter(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK, 10);
  401f10:	220a      	movs	r2, #10
  401f12:	2101      	movs	r1, #1
  401f14:	480d      	ldr	r0, [pc, #52]	; (401f4c <configure_command_complete+0x48>)
  401f16:	4b0e      	ldr	r3, [pc, #56]	; (401f50 <configure_command_complete+0x4c>)
  401f18:	4798      	blx	r3
	
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK, WIFI_COMM_ATTR, handler_command_complete);
  401f1a:	4b0e      	ldr	r3, [pc, #56]	; (401f54 <configure_command_complete+0x50>)
  401f1c:	9300      	str	r3, [sp, #0]
  401f1e:	2370      	movs	r3, #112	; 0x70
  401f20:	2201      	movs	r2, #1
  401f22:	210c      	movs	r1, #12
  401f24:	4809      	ldr	r0, [pc, #36]	; (401f4c <configure_command_complete+0x48>)
  401f26:	4c0c      	ldr	r4, [pc, #48]	; (401f58 <configure_command_complete+0x54>)
  401f28:	47a0      	blx	r4
	
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401f2a:	200c      	movs	r0, #12
  401f2c:	4b0b      	ldr	r3, [pc, #44]	; (401f5c <configure_command_complete+0x58>)
  401f2e:	4798      	blx	r3
	
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401f30:	2101      	movs	r1, #1
  401f32:	4806      	ldr	r0, [pc, #24]	; (401f4c <configure_command_complete+0x48>)
  401f34:	4b0a      	ldr	r3, [pc, #40]	; (401f60 <configure_command_complete+0x5c>)
  401f36:	4798      	blx	r3
	data_recieved = 0;
  401f38:	4b0a      	ldr	r3, [pc, #40]	; (401f64 <configure_command_complete+0x60>)
  401f3a:	2200      	movs	r2, #0
  401f3c:	601a      	str	r2, [r3, #0]
}
  401f3e:	bf00      	nop
  401f40:	3704      	adds	r7, #4
  401f42:	46bd      	mov	sp, r7
  401f44:	bd90      	pop	{r4, r7, pc}
  401f46:	bf00      	nop
  401f48:	00403175 	.word	0x00403175
  401f4c:	400e1000 	.word	0x400e1000
  401f50:	004029ad 	.word	0x004029ad
  401f54:	00401ef1 	.word	0x00401ef1
  401f58:	00400911 	.word	0x00400911
  401f5c:	00401ce5 	.word	0x00401ce5
  401f60:	00402c45 	.word	0x00402c45
  401f64:	2000d44c 	.word	0x2000d44c

00401f68 <handler_web_setup>:

/**
 *  \brief Handler for setting up wifi.
 */
void handler_web_setup(uint32_t ul_id, uint32_t ul_mask) {
  401f68:	b480      	push	{r7}
  401f6a:	b083      	sub	sp, #12
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);

	wifi_setup_flag = true;
  401f72:	4b04      	ldr	r3, [pc, #16]	; (401f84 <handler_web_setup+0x1c>)
  401f74:	2201      	movs	r2, #1
  401f76:	601a      	str	r2, [r3, #0]
}
  401f78:	bf00      	nop
  401f7a:	370c      	adds	r7, #12
  401f7c:	46bd      	mov	sp, r7
  401f7e:	bc80      	pop	{r7}
  401f80:	4770      	bx	lr
  401f82:	bf00      	nop
  401f84:	2000d450 	.word	0x2000d450

00401f88 <configure_web_setup>:

/**
 *  \brief Configures wifi setup pin.
 */
void configure_web_setup(void){
  401f88:	b590      	push	{r4, r7, lr}
  401f8a:	b083      	sub	sp, #12
  401f8c:	af02      	add	r7, sp, #8
	
	///* Set direction and pullup on the given button IOPORT */
	//ioport_set_pin_dir(GPIO_WIFI_RESET_PB, IOPORT_DIR_INPUT);
	//ioport_set_pin_mode(GPIO_WIFI_RESET_PB, IOPORT_MODE_PULLUP);
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_SETUP_ID);
  401f8e:	200c      	movs	r0, #12
  401f90:	4b0e      	ldr	r3, [pc, #56]	; (401fcc <configure_web_setup+0x44>)
  401f92:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WIFI_SETUP_PIO, WIFI_SETUP_MASK, 10);
  401f94:	220a      	movs	r2, #10
  401f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401f9a:	480d      	ldr	r0, [pc, #52]	; (401fd0 <configure_web_setup+0x48>)
  401f9c:	4b0d      	ldr	r3, [pc, #52]	; (401fd4 <configure_web_setup+0x4c>)
  401f9e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h */
	pio_handler_set(WIFI_SETUP_PIO, WIFI_SETUP_ID, WIFI_SETUP_MASK,
  401fa0:	4b0d      	ldr	r3, [pc, #52]	; (401fd8 <configure_web_setup+0x50>)
  401fa2:	9300      	str	r3, [sp, #0]
  401fa4:	2379      	movs	r3, #121	; 0x79
  401fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401faa:	210c      	movs	r1, #12
  401fac:	4808      	ldr	r0, [pc, #32]	; (401fd0 <configure_web_setup+0x48>)
  401fae:	4c0b      	ldr	r4, [pc, #44]	; (401fdc <configure_web_setup+0x54>)
  401fb0:	47a0      	blx	r4
			WIFI_SETUP_ATTR, handler_web_setup);
			
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type) WIFI_SETUP_ID);
  401fb2:	200c      	movs	r0, #12
  401fb4:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <configure_web_setup+0x58>)
  401fb6:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_SETUP_PIO, WIFI_SETUP_MASK);
  401fb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401fbc:	4804      	ldr	r0, [pc, #16]	; (401fd0 <configure_web_setup+0x48>)
  401fbe:	4b09      	ldr	r3, [pc, #36]	; (401fe4 <configure_web_setup+0x5c>)
  401fc0:	4798      	blx	r3
}
  401fc2:	bf00      	nop
  401fc4:	3704      	adds	r7, #4
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bd90      	pop	{r4, r7, pc}
  401fca:	bf00      	nop
  401fcc:	00403175 	.word	0x00403175
  401fd0:	400e1000 	.word	0x400e1000
  401fd4:	004029ad 	.word	0x004029ad
  401fd8:	00401f69 	.word	0x00401f69
  401fdc:	00400911 	.word	0x00400911
  401fe0:	00401ce5 	.word	0x00401ce5
  401fe4:	00402c45 	.word	0x00402c45

00401fe8 <write_wifi_command_safe>:
	usart_buffer_index = 0;
	return command_response;
	
}

uint8_t write_wifi_command_safe(char* command, char* resp, uint32_t timeout_ms, uint8_t handle_expected){
  401fe8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  401fec:	b08a      	sub	sp, #40	; 0x28
  401fee:	af00      	add	r7, sp, #0
  401ff0:	60f8      	str	r0, [r7, #12]
  401ff2:	60b9      	str	r1, [r7, #8]
  401ff4:	607a      	str	r2, [r7, #4]
  401ff6:	70fb      	strb	r3, [r7, #3]
	// returns 0 for a successful write
	// returns 1 for a failed write
	// returns 2 for a timeout
	// returns 10+stream handle for opening a stream
	
	uint8_t command_finished = 0;
  401ff8:	2300      	movs	r3, #0
  401ffa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t command_failed = 0;
  401ffe:	2300      	movs	r3, #0
  402000:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t parse_error = 0;
  402004:	2300      	movs	r3, #0
  402006:	f887 3020 	strb.w	r3, [r7, #32]
	
	uint32_t ms_counter = 0;
  40200a:	2300      	movs	r3, #0
  40200c:	627b      	str	r3, [r7, #36]	; 0x24
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  40200e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402012:	2100      	movs	r1, #0
  402014:	483c      	ldr	r0, [pc, #240]	; (402108 <write_wifi_command_safe+0x120>)
  402016:	4b3d      	ldr	r3, [pc, #244]	; (40210c <write_wifi_command_safe+0x124>)
  402018:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  40201a:	4b3d      	ldr	r3, [pc, #244]	; (402110 <write_wifi_command_safe+0x128>)
  40201c:	2200      	movs	r2, #0
  40201e:	601a      	str	r2, [r3, #0]
	
	usart_write_line(BOARD_USART,"\r\n");
  402020:	493c      	ldr	r1, [pc, #240]	; (402114 <write_wifi_command_safe+0x12c>)
  402022:	483d      	ldr	r0, [pc, #244]	; (402118 <write_wifi_command_safe+0x130>)
  402024:	4b3d      	ldr	r3, [pc, #244]	; (40211c <write_wifi_command_safe+0x134>)
  402026:	4798      	blx	r3
	usart_write_line(BOARD_USART, command);
  402028:	68f9      	ldr	r1, [r7, #12]
  40202a:	483b      	ldr	r0, [pc, #236]	; (402118 <write_wifi_command_safe+0x130>)
  40202c:	4b3b      	ldr	r3, [pc, #236]	; (40211c <write_wifi_command_safe+0x134>)
  40202e:	4798      	blx	r3
	
	uint8_t command_response = COMMAND_UNSET;
  402030:	2363      	movs	r3, #99	; 0x63
  402032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	
	while(command_response == COMMAND_UNSET) {			
  402036:	e058      	b.n	4020ea <write_wifi_command_safe+0x102>
		// makes sure we have complete response before matching on expected
		if( (strstr(usart_buffer, resp))  && (usart_buffer[usart_buffer_index-1] == 10)){ // 10 is new line, should be the last thing in the buffer
  402038:	68b9      	ldr	r1, [r7, #8]
  40203a:	4833      	ldr	r0, [pc, #204]	; (402108 <write_wifi_command_safe+0x120>)
  40203c:	4b38      	ldr	r3, [pc, #224]	; (402120 <write_wifi_command_safe+0x138>)
  40203e:	4798      	blx	r3
  402040:	4603      	mov	r3, r0
  402042:	2b00      	cmp	r3, #0
  402044:	d023      	beq.n	40208e <write_wifi_command_safe+0xa6>
  402046:	4b32      	ldr	r3, [pc, #200]	; (402110 <write_wifi_command_safe+0x128>)
  402048:	681b      	ldr	r3, [r3, #0]
  40204a:	3b01      	subs	r3, #1
  40204c:	4a2e      	ldr	r2, [pc, #184]	; (402108 <write_wifi_command_safe+0x120>)
  40204e:	5cd3      	ldrb	r3, [r2, r3]
  402050:	b2db      	uxtb	r3, r3
  402052:	2b0a      	cmp	r3, #10
  402054:	d11b      	bne.n	40208e <write_wifi_command_safe+0xa6>
			if(!handle_expected) command_response = COMMAND_SUCCESS; // successful response
  402056:	78fb      	ldrb	r3, [r7, #3]
  402058:	2b00      	cmp	r3, #0
  40205a:	d103      	bne.n	402064 <write_wifi_command_safe+0x7c>
  40205c:	2300      	movs	r3, #0
  40205e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402062:	e028      	b.n	4020b6 <write_wifi_command_safe+0xce>
			// otherwise, parse for handle
			else {
				char *opened_pointer = strstr(usart_buffer, resp);
  402064:	68b9      	ldr	r1, [r7, #8]
  402066:	4828      	ldr	r0, [pc, #160]	; (402108 <write_wifi_command_safe+0x120>)
  402068:	4b2d      	ldr	r3, [pc, #180]	; (402120 <write_wifi_command_safe+0x138>)
  40206a:	4798      	blx	r3
  40206c:	61f8      	str	r0, [r7, #28]
				uint32_t buffer_offset = ((uint8_t *) opened_pointer) - usart_buffer;
  40206e:	69fb      	ldr	r3, [r7, #28]
  402070:	4a25      	ldr	r2, [pc, #148]	; (402108 <write_wifi_command_safe+0x120>)
  402072:	1a9b      	subs	r3, r3, r2
  402074:	61bb      	str	r3, [r7, #24]
				uint8_t handle = usart_buffer[buffer_offset+12] - '0';
  402076:	69bb      	ldr	r3, [r7, #24]
  402078:	330c      	adds	r3, #12
  40207a:	4a23      	ldr	r2, [pc, #140]	; (402108 <write_wifi_command_safe+0x120>)
  40207c:	5cd3      	ldrb	r3, [r2, r3]
  40207e:	b2db      	uxtb	r3, r3
  402080:	3b30      	subs	r3, #48	; 0x30
  402082:	75fb      	strb	r3, [r7, #23]
				command_response = handle+10;
  402084:	7dfb      	ldrb	r3, [r7, #23]
  402086:	330a      	adds	r3, #10
  402088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t command_response = COMMAND_UNSET;
	
	while(command_response == COMMAND_UNSET) {			
		// makes sure we have complete response before matching on expected
		if( (strstr(usart_buffer, resp))  && (usart_buffer[usart_buffer_index-1] == 10)){ // 10 is new line, should be the last thing in the buffer
			if(!handle_expected) command_response = COMMAND_SUCCESS; // successful response
  40208c:	e013      	b.n	4020b6 <write_wifi_command_safe+0xce>
				uint32_t buffer_offset = ((uint8_t *) opened_pointer) - usart_buffer;
				uint8_t handle = usart_buffer[buffer_offset+12] - '0';
				command_response = handle+10;
			}
		}
		else if (strstr(usart_buffer, "Command failed")){
  40208e:	4925      	ldr	r1, [pc, #148]	; (402124 <write_wifi_command_safe+0x13c>)
  402090:	481d      	ldr	r0, [pc, #116]	; (402108 <write_wifi_command_safe+0x120>)
  402092:	4b23      	ldr	r3, [pc, #140]	; (402120 <write_wifi_command_safe+0x138>)
  402094:	4798      	blx	r3
  402096:	4603      	mov	r3, r0
  402098:	2b00      	cmp	r3, #0
  40209a:	d003      	beq.n	4020a4 <write_wifi_command_safe+0xbc>
			command_response = COMMAND_FAILURE; // command failed
  40209c:	2301      	movs	r3, #1
  40209e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4020a2:	e008      	b.n	4020b6 <write_wifi_command_safe+0xce>
		}
		else if (ms_counter++ > timeout_ms){
  4020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020a6:	1c5a      	adds	r2, r3, #1
  4020a8:	627a      	str	r2, [r7, #36]	; 0x24
  4020aa:	687a      	ldr	r2, [r7, #4]
  4020ac:	4293      	cmp	r3, r2
  4020ae:	d902      	bls.n	4020b6 <write_wifi_command_safe+0xce>
			command_response = COMMAND_TIMEOUT;
  4020b0:	2302      	movs	r3, #2
  4020b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
		delay_ms(1);
  4020b6:	4b1c      	ldr	r3, [pc, #112]	; (402128 <write_wifi_command_safe+0x140>)
  4020b8:	4798      	blx	r3
  4020ba:	4603      	mov	r3, r0
  4020bc:	f04f 0400 	mov.w	r4, #0
  4020c0:	f243 61af 	movw	r1, #13999	; 0x36af
  4020c4:	f04f 0200 	mov.w	r2, #0
  4020c8:	eb13 0b01 	adds.w	fp, r3, r1
  4020cc:	eb44 0c02 	adc.w	ip, r4, r2
  4020d0:	4658      	mov	r0, fp
  4020d2:	4661      	mov	r1, ip
  4020d4:	4c15      	ldr	r4, [pc, #84]	; (40212c <write_wifi_command_safe+0x144>)
  4020d6:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4020da:	f04f 0300 	mov.w	r3, #0
  4020de:	47a0      	blx	r4
  4020e0:	4603      	mov	r3, r0
  4020e2:	460c      	mov	r4, r1
  4020e4:	4618      	mov	r0, r3
  4020e6:	4b12      	ldr	r3, [pc, #72]	; (402130 <write_wifi_command_safe+0x148>)
  4020e8:	4798      	blx	r3
	usart_write_line(BOARD_USART,"\r\n");
	usart_write_line(BOARD_USART, command);
	
	uint8_t command_response = COMMAND_UNSET;
	
	while(command_response == COMMAND_UNSET) {			
  4020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4020ee:	2b63      	cmp	r3, #99	; 0x63
  4020f0:	d0a2      	beq.n	402038 <write_wifi_command_safe+0x50>
			command_response = COMMAND_TIMEOUT;
		}
		delay_ms(1);
	}
	
	usart_buffer_index = 0;
  4020f2:	4b07      	ldr	r3, [pc, #28]	; (402110 <write_wifi_command_safe+0x128>)
  4020f4:	2200      	movs	r2, #0
  4020f6:	601a      	str	r2, [r3, #0]
	return command_response;
  4020f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
  4020fc:	4618      	mov	r0, r3
  4020fe:	3728      	adds	r7, #40	; 0x28
  402100:	46bd      	mov	sp, r7
  402102:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  402106:	bf00      	nop
  402108:	2000d458 	.word	0x2000d458
  40210c:	00403d09 	.word	0x00403d09
  402110:	2000d64c 	.word	0x2000d64c
  402114:	00409758 	.word	0x00409758
  402118:	40024000 	.word	0x40024000
  40211c:	0040109d 	.word	0x0040109d
  402120:	00404195 	.word	0x00404195
  402124:	0040976c 	.word	0x0040976c
  402128:	00401da5 	.word	0x00401da5
  40212c:	004039a1 	.word	0x004039a1
  402130:	20000001 	.word	0x20000001

00402134 <open_camera_websocket>:
	}
	// should check last thing in input buffer for handle
	return NO_WEBSOCKET_OPEN; // indicate failure
}

uint8_t open_camera_websocket(uint8_t number_of_attempts) {
  402134:	b590      	push	{r4, r7, lr}
  402136:	b085      	sub	sp, #20
  402138:	af00      	add	r7, sp, #0
  40213a:	4603      	mov	r3, r0
  40213c:	71fb      	strb	r3, [r7, #7]
	// figure out handle
	//write_wifi_command("close all\r\n", 2);
	uint8_t status_code;
	for(int i=0; i<number_of_attempts; i++){
  40213e:	2300      	movs	r3, #0
  402140:	60fb      	str	r3, [r7, #12]
  402142:	e01c      	b.n	40217e <open_camera_websocket+0x4a>
	
		uint8_t status_code = write_wifi_command_safe("websocket_client -f bin wss://bigbrothersees.me/source_cam_socket\r\n", "Opened: ", 20000, 1);
  402144:	2301      	movs	r3, #1
  402146:	f644 6220 	movw	r2, #20000	; 0x4e20
  40214a:	4911      	ldr	r1, [pc, #68]	; (402190 <open_camera_websocket+0x5c>)
  40214c:	4811      	ldr	r0, [pc, #68]	; (402194 <open_camera_websocket+0x60>)
  40214e:	4c12      	ldr	r4, [pc, #72]	; (402198 <open_camera_websocket+0x64>)
  402150:	47a0      	blx	r4
  402152:	4603      	mov	r3, r0
  402154:	72fb      	strb	r3, [r7, #11]
		if (status_code >= 10){
  402156:	7afb      	ldrb	r3, [r7, #11]
  402158:	2b09      	cmp	r3, #9
  40215a:	d90d      	bls.n	402178 <open_camera_websocket+0x44>
			if (status_code > 18){
  40215c:	7afb      	ldrb	r3, [r7, #11]
  40215e:	2b12      	cmp	r3, #18
  402160:	d906      	bls.n	402170 <open_camera_websocket+0x3c>
				write_wifi_command_safe("close all\r\n","Success",200,0);
  402162:	2300      	movs	r3, #0
  402164:	22c8      	movs	r2, #200	; 0xc8
  402166:	490d      	ldr	r1, [pc, #52]	; (40219c <open_camera_websocket+0x68>)
  402168:	480d      	ldr	r0, [pc, #52]	; (4021a0 <open_camera_websocket+0x6c>)
  40216a:	4c0b      	ldr	r4, [pc, #44]	; (402198 <open_camera_websocket+0x64>)
  40216c:	47a0      	blx	r4
				continue;
  40216e:	e003      	b.n	402178 <open_camera_websocket+0x44>
			}
			return status_code - 10;
  402170:	7afb      	ldrb	r3, [r7, #11]
  402172:	3b0a      	subs	r3, #10
  402174:	b2db      	uxtb	r3, r3
  402176:	e007      	b.n	402188 <open_camera_websocket+0x54>

uint8_t open_camera_websocket(uint8_t number_of_attempts) {
	// figure out handle
	//write_wifi_command("close all\r\n", 2);
	uint8_t status_code;
	for(int i=0; i<number_of_attempts; i++){
  402178:	68fb      	ldr	r3, [r7, #12]
  40217a:	3301      	adds	r3, #1
  40217c:	60fb      	str	r3, [r7, #12]
  40217e:	79fa      	ldrb	r2, [r7, #7]
  402180:	68fb      	ldr	r3, [r7, #12]
  402182:	429a      	cmp	r2, r3
  402184:	dcde      	bgt.n	402144 <open_camera_websocket+0x10>
			return status_code - 10;
		}
		
	}
	// should check last thing in input buffer for handle
	return NO_WEBSOCKET_OPEN; // indicate failure
  402186:	230a      	movs	r3, #10
}
  402188:	4618      	mov	r0, r3
  40218a:	3714      	adds	r7, #20
  40218c:	46bd      	mov	sp, r7
  40218e:	bd90      	pop	{r4, r7, pc}
  402190:	0040982c 	.word	0x0040982c
  402194:	00409888 	.word	0x00409888
  402198:	00401fe9 	.word	0x00401fe9
  40219c:	00409880 	.word	0x00409880
  4021a0:	0040977c 	.word	0x0040977c

004021a4 <check_ws_handle>:
	sprintf(templated_command, "fcr batman.txt %d\r\n", num_bytes);
	usart_write_line(BOARD_USART, templated_command);
	usart_write_line(BOARD_USART, message);
}

uint8_t check_ws_handle(uint8_t theoretical_handle){
  4021a4:	b590      	push	{r4, r7, lr}
  4021a6:	b0ad      	sub	sp, #180	; 0xb4
  4021a8:	af00      	add	r7, sp, #0
  4021aa:	4603      	mov	r3, r0
  4021ac:	71fb      	strb	r3, [r7, #7]
	
	char* templated_response[40];
	sprintf(templated_response, "%d WEBC", theoretical_handle);
  4021ae:	79fa      	ldrb	r2, [r7, #7]
  4021b0:	f107 030c 	add.w	r3, r7, #12
  4021b4:	490c      	ldr	r1, [pc, #48]	; (4021e8 <check_ws_handle+0x44>)
  4021b6:	4618      	mov	r0, r3
  4021b8:	4b0c      	ldr	r3, [pc, #48]	; (4021ec <check_ws_handle+0x48>)
  4021ba:	4798      	blx	r3
	
	uint8_t command_response = write_wifi_command_safe("list\r\n", templated_response, 100, 0);
  4021bc:	f107 010c 	add.w	r1, r7, #12
  4021c0:	2300      	movs	r3, #0
  4021c2:	2264      	movs	r2, #100	; 0x64
  4021c4:	480a      	ldr	r0, [pc, #40]	; (4021f0 <check_ws_handle+0x4c>)
  4021c6:	4c0b      	ldr	r4, [pc, #44]	; (4021f4 <check_ws_handle+0x50>)
  4021c8:	47a0      	blx	r4
  4021ca:	4603      	mov	r3, r0
  4021cc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	
	return command_response == COMMAND_SUCCESS ? COMMAND_SUCCESS : COMMAND_FAILURE;
  4021d0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
  4021d4:	2b00      	cmp	r3, #0
  4021d6:	bf14      	ite	ne
  4021d8:	2301      	movne	r3, #1
  4021da:	2300      	moveq	r3, #0
  4021dc:	b2db      	uxtb	r3, r3
}
  4021de:	4618      	mov	r0, r3
  4021e0:	37b4      	adds	r7, #180	; 0xb4
  4021e2:	46bd      	mov	sp, r7
  4021e4:	bd90      	pop	{r4, r7, pc}
  4021e6:	bf00      	nop
  4021e8:	004098f4 	.word	0x004098f4
  4021ec:	00403da5 	.word	0x00403da5
  4021f0:	004098fc 	.word	0x004098fc
  4021f4:	00401fe9 	.word	0x00401fe9

004021f8 <setup_wifi>:
}

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  4021f8:	b598      	push	{r3, r4, r7, lr}
  4021fa:	af00      	add	r7, sp, #0
	
	write_wifi_command_safe("setup web\r\n","Associated]", 60000, 0);	// command wifi chip to setup
  4021fc:	2300      	movs	r3, #0
  4021fe:	f64e 2260 	movw	r2, #60000	; 0xea60
  402202:	4904      	ldr	r1, [pc, #16]	; (402214 <setup_wifi+0x1c>)
  402204:	4804      	ldr	r0, [pc, #16]	; (402218 <setup_wifi+0x20>)
  402206:	4c05      	ldr	r4, [pc, #20]	; (40221c <setup_wifi+0x24>)
  402208:	47a0      	blx	r4
	
	wifi_setup_flag = false;	// turn off setup flag
  40220a:	4b05      	ldr	r3, [pc, #20]	; (402220 <setup_wifi+0x28>)
  40220c:	2200      	movs	r2, #0
  40220e:	601a      	str	r2, [r3, #0]
}
  402210:	bf00      	nop
  402212:	bd98      	pop	{r3, r4, r7, pc}
  402214:	00409904 	.word	0x00409904
  402218:	00409910 	.word	0x00409910
  40221c:	00401fe9 	.word	0x00401fe9
  402220:	2000d450 	.word	0x2000d450

00402224 <configure_wifi>:

/**
 *  \brief Wrapper function for wifi module configuration.
 */
void configure_wifi(){
  402224:	b580      	push	{r7, lr}
  402226:	af00      	add	r7, sp, #0
	configure_usart();
  402228:	4b05      	ldr	r3, [pc, #20]	; (402240 <configure_wifi+0x1c>)
  40222a:	4798      	blx	r3
	configure_command_complete();
  40222c:	4b05      	ldr	r3, [pc, #20]	; (402244 <configure_wifi+0x20>)
  40222e:	4798      	blx	r3
	configure_web_setup();	
  402230:	4b05      	ldr	r3, [pc, #20]	; (402248 <configure_wifi+0x24>)
  402232:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  402234:	2101      	movs	r1, #1
  402236:	4805      	ldr	r0, [pc, #20]	; (40224c <configure_wifi+0x28>)
  402238:	4b05      	ldr	r3, [pc, #20]	; (402250 <configure_wifi+0x2c>)
  40223a:	4798      	blx	r3
}
  40223c:	bf00      	nop
  40223e:	bd80      	pop	{r7, pc}
  402240:	00401e6d 	.word	0x00401e6d
  402244:	00401f05 	.word	0x00401f05
  402248:	00401f89 	.word	0x00401f89
  40224c:	40024000 	.word	0x40024000
  402250:	00400fc9 	.word	0x00400fc9

00402254 <reboot_wifi>:


/**
 *  \brief Reboots the wifi chip.
 */
void reboot_wifi() {
  402254:	b590      	push	{r4, r7, lr}
  402256:	b083      	sub	sp, #12
  402258:	af00      	add	r7, sp, #0
		delay_ms(200);
		seconds++;
	}
	
	buffer_index = 0;*/
	wifi_setup_flag = false;
  40225a:	4b14      	ldr	r3, [pc, #80]	; (4022ac <reboot_wifi+0x58>)
  40225c:	2200      	movs	r2, #0
  40225e:	601a      	str	r2, [r3, #0]
	uint8_t status_code;
	
	while(write_wifi_command_safe("reboot\r\n", "Associated]", 10000,0) != COMMAND_SUCCESS){
  402260:	e005      	b.n	40226e <reboot_wifi+0x1a>
		if(wifi_setup_flag){
  402262:	4b12      	ldr	r3, [pc, #72]	; (4022ac <reboot_wifi+0x58>)
  402264:	681b      	ldr	r3, [r3, #0]
  402266:	2b00      	cmp	r3, #0
  402268:	d001      	beq.n	40226e <reboot_wifi+0x1a>
			setup_wifi();
  40226a:	4b11      	ldr	r3, [pc, #68]	; (4022b0 <reboot_wifi+0x5c>)
  40226c:	4798      	blx	r3
	
	buffer_index = 0;*/
	wifi_setup_flag = false;
	uint8_t status_code;
	
	while(write_wifi_command_safe("reboot\r\n", "Associated]", 10000,0) != COMMAND_SUCCESS){
  40226e:	2300      	movs	r3, #0
  402270:	f242 7210 	movw	r2, #10000	; 0x2710
  402274:	490f      	ldr	r1, [pc, #60]	; (4022b4 <reboot_wifi+0x60>)
  402276:	4810      	ldr	r0, [pc, #64]	; (4022b8 <reboot_wifi+0x64>)
  402278:	4c10      	ldr	r4, [pc, #64]	; (4022bc <reboot_wifi+0x68>)
  40227a:	47a0      	blx	r4
  40227c:	4603      	mov	r3, r0
  40227e:	2b00      	cmp	r3, #0
  402280:	d1ef      	bne.n	402262 <reboot_wifi+0xe>
		if(wifi_setup_flag){
			setup_wifi();
		}
	}
	
	status_code = write_wifi_command_safe("set sy c p off\r\n","Set OK",100,0);
  402282:	2300      	movs	r3, #0
  402284:	2264      	movs	r2, #100	; 0x64
  402286:	490e      	ldr	r1, [pc, #56]	; (4022c0 <reboot_wifi+0x6c>)
  402288:	480e      	ldr	r0, [pc, #56]	; (4022c4 <reboot_wifi+0x70>)
  40228a:	4c0c      	ldr	r4, [pc, #48]	; (4022bc <reboot_wifi+0x68>)
  40228c:	47a0      	blx	r4
  40228e:	4603      	mov	r3, r0
  402290:	71fb      	strb	r3, [r7, #7]
	
	status_code = write_wifi_command_safe("set sy c e off\r\n","Set OK", 100, 0);
  402292:	2300      	movs	r3, #0
  402294:	2264      	movs	r2, #100	; 0x64
  402296:	490a      	ldr	r1, [pc, #40]	; (4022c0 <reboot_wifi+0x6c>)
  402298:	480b      	ldr	r0, [pc, #44]	; (4022c8 <reboot_wifi+0x74>)
  40229a:	4c08      	ldr	r4, [pc, #32]	; (4022bc <reboot_wifi+0x68>)
  40229c:	47a0      	blx	r4
  40229e:	4603      	mov	r3, r0
  4022a0:	71fb      	strb	r3, [r7, #7]
	
	//write_wifi_command("set sy c e off\r\n", 5);	// resets a couple of system parameters in case they were changed
	
}
  4022a2:	bf00      	nop
  4022a4:	370c      	adds	r7, #12
  4022a6:	46bd      	mov	sp, r7
  4022a8:	bd90      	pop	{r4, r7, pc}
  4022aa:	bf00      	nop
  4022ac:	2000d450 	.word	0x2000d450
  4022b0:	004021f9 	.word	0x004021f9
  4022b4:	00409904 	.word	0x00409904
  4022b8:	0040995c 	.word	0x0040995c
  4022bc:	00401fe9 	.word	0x00401fe9
  4022c0:	00409968 	.word	0x00409968
  4022c4:	00409970 	.word	0x00409970
  4022c8:	00409984 	.word	0x00409984

004022cc <write_image_data_safe>:

uint8_t write_image_data_safe(uint8_t* array_start_pointer, uint32_t start_index, uint32_t im_len, uint8_t handle, char* resp, uint32_t timeout_ms){
  4022cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
  4022d0:	b0a8      	sub	sp, #160	; 0xa0
  4022d2:	af00      	add	r7, sp, #0
  4022d4:	60f8      	str	r0, [r7, #12]
  4022d6:	60b9      	str	r1, [r7, #8]
  4022d8:	607a      	str	r2, [r7, #4]
  4022da:	70fb      	strb	r3, [r7, #3]
	// returns 2 for a timeout
	// returns 3 for an unexpected stream closure
	// returns 10+stream handle for opening a stream
	
	// first thing: check if we've received any transmission since the last time
	if (usart_buffer_index != 0){
  4022dc:	4b65      	ldr	r3, [pc, #404]	; (402474 <write_image_data_safe+0x1a8>)
  4022de:	681b      	ldr	r3, [r3, #0]
  4022e0:	2b00      	cmp	r3, #0
  4022e2:	d008      	beq.n	4022f6 <write_image_data_safe+0x2a>
		// check for different issues
		if(strstr(usart_buffer, "[Closed: ")){
  4022e4:	4964      	ldr	r1, [pc, #400]	; (402478 <write_image_data_safe+0x1ac>)
  4022e6:	4865      	ldr	r0, [pc, #404]	; (40247c <write_image_data_safe+0x1b0>)
  4022e8:	4b65      	ldr	r3, [pc, #404]	; (402480 <write_image_data_safe+0x1b4>)
  4022ea:	4798      	blx	r3
  4022ec:	4603      	mov	r3, r0
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d001      	beq.n	4022f6 <write_image_data_safe+0x2a>
			return COMMAND_STCLOSE; // return a value indicating closure of the stream
  4022f2:	2303      	movs	r3, #3
  4022f4:	e0b8      	b.n	402468 <write_image_data_safe+0x19c>
		}
	}
	
	uint8_t command_finished = 0;
  4022f6:	2300      	movs	r3, #0
  4022f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	uint8_t command_failed = 0;
  4022fc:	2300      	movs	r3, #0
  4022fe:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	uint8_t parse_error = 0;
  402302:	2300      	movs	r3, #0
  402304:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	
	uint32_t ms_counter = 0;
  402308:	2300      	movs	r3, #0
  40230a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	// clear buffer
	memset(usart_buffer, 0, BUFFER_SIZE);
  40230e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402312:	2100      	movs	r1, #0
  402314:	4859      	ldr	r0, [pc, #356]	; (40247c <write_image_data_safe+0x1b0>)
  402316:	4b5b      	ldr	r3, [pc, #364]	; (402484 <write_image_data_safe+0x1b8>)
  402318:	4798      	blx	r3
	// set buffer index to 0
	usart_buffer_index = 0;
  40231a:	4b56      	ldr	r3, [pc, #344]	; (402474 <write_image_data_safe+0x1a8>)
  40231c:	2200      	movs	r2, #0
  40231e:	601a      	str	r2, [r3, #0]
	
	uint32_t end_index = start_index + PACKET_SIZE;
  402320:	68bb      	ldr	r3, [r7, #8]
  402322:	33c8      	adds	r3, #200	; 0xc8
  402324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	end_index = (end_index < im_len) ? end_index : im_len; // if the end index goes past the end of the array, don't go there
  402328:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  40232c:	687b      	ldr	r3, [r7, #4]
  40232e:	4293      	cmp	r3, r2
  402330:	bf28      	it	cs
  402332:	4613      	movcs	r3, r2
  402334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	
	uint32_t bytes_to_send = end_index - start_index; // usually PACKET_SIZE, unless it's the last one
  402338:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  40233c:	68bb      	ldr	r3, [r7, #8]
  40233e:	1ad3      	subs	r3, r2, r3
  402340:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	
	uint8_t curr_data_point;
	
	char* templated_command[30];
	usart_write_line(BOARD_USART,"\r\n");
  402344:	4950      	ldr	r1, [pc, #320]	; (402488 <write_image_data_safe+0x1bc>)
  402346:	4851      	ldr	r0, [pc, #324]	; (40248c <write_image_data_safe+0x1c0>)
  402348:	4b51      	ldr	r3, [pc, #324]	; (402490 <write_image_data_safe+0x1c4>)
  40234a:	4798      	blx	r3
	sprintf(templated_command, "write %d %d\r\n", handle, bytes_to_send);
  40234c:	78fa      	ldrb	r2, [r7, #3]
  40234e:	f107 0010 	add.w	r0, r7, #16
  402352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  402356:	494f      	ldr	r1, [pc, #316]	; (402494 <write_image_data_safe+0x1c8>)
  402358:	4c4f      	ldr	r4, [pc, #316]	; (402498 <write_image_data_safe+0x1cc>)
  40235a:	47a0      	blx	r4
	usart_write_line(BOARD_USART, templated_command);
  40235c:	f107 0310 	add.w	r3, r7, #16
  402360:	4619      	mov	r1, r3
  402362:	484a      	ldr	r0, [pc, #296]	; (40248c <write_image_data_safe+0x1c0>)
  402364:	4b4a      	ldr	r3, [pc, #296]	; (402490 <write_image_data_safe+0x1c4>)
  402366:	4798      	blx	r3
	
	for (int i = start_index; i < end_index; i++) {
  402368:	68bb      	ldr	r3, [r7, #8]
  40236a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  40236e:	e011      	b.n	402394 <write_image_data_safe+0xc8>
		curr_data_point = (array_start_pointer)[i];	
  402370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  402374:	68fa      	ldr	r2, [r7, #12]
  402376:	4413      	add	r3, r2
  402378:	781b      	ldrb	r3, [r3, #0]
  40237a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		usart_putchar(BOARD_USART, curr_data_point);
  40237e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
  402382:	4619      	mov	r1, r3
  402384:	4841      	ldr	r0, [pc, #260]	; (40248c <write_image_data_safe+0x1c0>)
  402386:	4b45      	ldr	r3, [pc, #276]	; (40249c <write_image_data_safe+0x1d0>)
  402388:	4798      	blx	r3
	char* templated_command[30];
	usart_write_line(BOARD_USART,"\r\n");
	sprintf(templated_command, "write %d %d\r\n", handle, bytes_to_send);
	usart_write_line(BOARD_USART, templated_command);
	
	for (int i = start_index; i < end_index; i++) {
  40238a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
  40238e:	3301      	adds	r3, #1
  402390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  402394:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
  402398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  40239c:	429a      	cmp	r2, r3
  40239e:	d3e7      	bcc.n	402370 <write_image_data_safe+0xa4>
		curr_data_point = (array_start_pointer)[i];	
		usart_putchar(BOARD_USART, curr_data_point);
	}
	
	uint8_t command_response = COMMAND_UNSET;
  4023a0:	2363      	movs	r3, #99	; 0x63
  4023a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	while(command_response == COMMAND_UNSET) {			
  4023a6:	e056      	b.n	402456 <write_image_data_safe+0x18a>
		if(strstr(usart_buffer, resp)){
  4023a8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
  4023ac:	4833      	ldr	r0, [pc, #204]	; (40247c <write_image_data_safe+0x1b0>)
  4023ae:	4b34      	ldr	r3, [pc, #208]	; (402480 <write_image_data_safe+0x1b4>)
  4023b0:	4798      	blx	r3
  4023b2:	4603      	mov	r3, r0
  4023b4:	2b00      	cmp	r3, #0
  4023b6:	d012      	beq.n	4023de <write_image_data_safe+0x112>
			i2s_send_index = (i2s_send_index + PACKET_SIZE) % AUDIO_BUFFER_SIZE; // recompute send index after loop execution
  4023b8:	4b39      	ldr	r3, [pc, #228]	; (4024a0 <write_image_data_safe+0x1d4>)
  4023ba:	681b      	ldr	r3, [r3, #0]
  4023bc:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
  4023c0:	4b38      	ldr	r3, [pc, #224]	; (4024a4 <write_image_data_safe+0x1d8>)
  4023c2:	fba3 1302 	umull	r1, r3, r3, r2
  4023c6:	0a9b      	lsrs	r3, r3, #10
  4023c8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
  4023cc:	fb01 f303 	mul.w	r3, r1, r3
  4023d0:	1ad3      	subs	r3, r2, r3
  4023d2:	4a33      	ldr	r2, [pc, #204]	; (4024a0 <write_image_data_safe+0x1d4>)
  4023d4:	6013      	str	r3, [r2, #0]
			command_response = COMMAND_SUCCESS; // successful response
  4023d6:	2300      	movs	r3, #0
  4023d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  4023dc:	e021      	b.n	402422 <write_image_data_safe+0x156>
			// otherwise, parse for handle
		}
		else if(strstr(usart_buffer, "[Closed: ")){
  4023de:	4926      	ldr	r1, [pc, #152]	; (402478 <write_image_data_safe+0x1ac>)
  4023e0:	4826      	ldr	r0, [pc, #152]	; (40247c <write_image_data_safe+0x1b0>)
  4023e2:	4b27      	ldr	r3, [pc, #156]	; (402480 <write_image_data_safe+0x1b4>)
  4023e4:	4798      	blx	r3
  4023e6:	4603      	mov	r3, r0
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	d003      	beq.n	4023f4 <write_image_data_safe+0x128>
			command_response = COMMAND_STCLOSE; // return a value indicating closure of the stream
  4023ec:	2303      	movs	r3, #3
  4023ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  4023f2:	e016      	b.n	402422 <write_image_data_safe+0x156>
			
		}
		else if(strstr(usart_buffer, "Command failed")){
  4023f4:	492c      	ldr	r1, [pc, #176]	; (4024a8 <write_image_data_safe+0x1dc>)
  4023f6:	4821      	ldr	r0, [pc, #132]	; (40247c <write_image_data_safe+0x1b0>)
  4023f8:	4b21      	ldr	r3, [pc, #132]	; (402480 <write_image_data_safe+0x1b4>)
  4023fa:	4798      	blx	r3
  4023fc:	4603      	mov	r3, r0
  4023fe:	2b00      	cmp	r3, #0
  402400:	d003      	beq.n	40240a <write_image_data_safe+0x13e>
			command_response = COMMAND_FAILURE; // command failed
  402402:	2301      	movs	r3, #1
  402404:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  402408:	e00b      	b.n	402422 <write_image_data_safe+0x156>
		}
		else if(ms_counter++ > timeout_ms){
  40240a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
  40240e:	1c5a      	adds	r2, r3, #1
  402410:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
  402414:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
  402418:	4293      	cmp	r3, r2
  40241a:	d902      	bls.n	402422 <write_image_data_safe+0x156>
			command_response = COMMAND_TIMEOUT;
  40241c:	2302      	movs	r3, #2
  40241e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		delay_ms(1);
  402422:	4b22      	ldr	r3, [pc, #136]	; (4024ac <write_image_data_safe+0x1e0>)
  402424:	4798      	blx	r3
  402426:	4603      	mov	r3, r0
  402428:	f04f 0400 	mov.w	r4, #0
  40242c:	f243 61af 	movw	r1, #13999	; 0x36af
  402430:	f04f 0200 	mov.w	r2, #0
  402434:	eb13 0b01 	adds.w	fp, r3, r1
  402438:	eb44 0c02 	adc.w	ip, r4, r2
  40243c:	4658      	mov	r0, fp
  40243e:	4661      	mov	r1, ip
  402440:	4c1b      	ldr	r4, [pc, #108]	; (4024b0 <write_image_data_safe+0x1e4>)
  402442:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402446:	f04f 0300 	mov.w	r3, #0
  40244a:	47a0      	blx	r4
  40244c:	4603      	mov	r3, r0
  40244e:	460c      	mov	r4, r1
  402450:	4618      	mov	r0, r3
  402452:	4b18      	ldr	r3, [pc, #96]	; (4024b4 <write_image_data_safe+0x1e8>)
  402454:	4798      	blx	r3
		usart_putchar(BOARD_USART, curr_data_point);
	}
	
	uint8_t command_response = COMMAND_UNSET;
	
	while(command_response == COMMAND_UNSET) {			
  402456:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
  40245a:	2b63      	cmp	r3, #99	; 0x63
  40245c:	d0a4      	beq.n	4023a8 <write_image_data_safe+0xdc>
			command_response = COMMAND_TIMEOUT;
		}
		delay_ms(1);
	}
	
	usart_buffer_index = 0;
  40245e:	4b05      	ldr	r3, [pc, #20]	; (402474 <write_image_data_safe+0x1a8>)
  402460:	2200      	movs	r2, #0
  402462:	601a      	str	r2, [r3, #0]
	return command_response;
  402464:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
	
}
  402468:	4618      	mov	r0, r3
  40246a:	37a0      	adds	r7, #160	; 0xa0
  40246c:	46bd      	mov	sp, r7
  40246e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
  402472:	bf00      	nop
  402474:	2000d64c 	.word	0x2000d64c
  402478:	0040974c 	.word	0x0040974c
  40247c:	2000d458 	.word	0x2000d458
  402480:	00404195 	.word	0x00404195
  402484:	00403d09 	.word	0x00403d09
  402488:	00409758 	.word	0x00409758
  40248c:	40024000 	.word	0x40024000
  402490:	0040109d 	.word	0x0040109d
  402494:	0040975c 	.word	0x0040975c
  402498:	00403da5 	.word	0x00403da5
  40249c:	0040106d 	.word	0x0040106d
  4024a0:	2000d650 	.word	0x2000d650
  4024a4:	10624dd3 	.word	0x10624dd3
  4024a8:	0040976c 	.word	0x0040976c
  4024ac:	00401da5 	.word	0x00401da5
  4024b0:	004039a1 	.word	0x004039a1
  4024b4:	20000001 	.word	0x20000001

004024b8 <send_image_ws>:

uint8_t send_image_ws(uint8_t *start_of_image_ptr, uint32_t image_length, uint8_t image_ws_handle){
  4024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024bc:	b08d      	sub	sp, #52	; 0x34
  4024be:	af02      	add	r7, sp, #8
  4024c0:	61f8      	str	r0, [r7, #28]
  4024c2:	61b9      	str	r1, [r7, #24]
  4024c4:	4613      	mov	r3, r2
  4024c6:	75fb      	strb	r3, [r7, #23]
	// send a message indicating the start of the image (or not)
	
	// call the send image data safe function to transfer the image
	
	uint32_t image_byte_index = 0;
  4024c8:	2300      	movs	r3, #0
  4024ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t status_code;
	
	while (image_byte_index < image_length){
  4024cc:	e086      	b.n	4025dc <send_image_ws+0x124>
		
		if (image_ws_handle != NO_WEBSOCKET_OPEN){
  4024ce:	7dfb      	ldrb	r3, [r7, #23]
  4024d0:	2b0a      	cmp	r3, #10
  4024d2:	d02e      	beq.n	402532 <send_image_ws+0x7a>
			//websocket open
			status_code = write_image_data_safe(start_of_image_ptr, image_byte_index, image_length, image_ws_handle, "Success", 500);
  4024d4:	7dfa      	ldrb	r2, [r7, #23]
  4024d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4024da:	9301      	str	r3, [sp, #4]
  4024dc:	4b48      	ldr	r3, [pc, #288]	; (402600 <send_image_ws+0x148>)
  4024de:	9300      	str	r3, [sp, #0]
  4024e0:	4613      	mov	r3, r2
  4024e2:	69ba      	ldr	r2, [r7, #24]
  4024e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
  4024e6:	69f8      	ldr	r0, [r7, #28]
  4024e8:	4c46      	ldr	r4, [pc, #280]	; (402604 <send_image_ws+0x14c>)
  4024ea:	47a0      	blx	r4
  4024ec:	4603      	mov	r3, r0
  4024ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			if(status_code == COMMAND_STCLOSE){
  4024f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4024f6:	2b03      	cmp	r3, #3
  4024f8:	d102      	bne.n	402500 <send_image_ws+0x48>
				image_ws_handle = NO_WEBSOCKET_OPEN;
  4024fa:	230a      	movs	r3, #10
  4024fc:	75fb      	strb	r3, [r7, #23]
  4024fe:	e06d      	b.n	4025dc <send_image_ws+0x124>
			} else if (status_code == COMMAND_FAILURE){
  402500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402504:	2b01      	cmp	r3, #1
  402506:	d10c      	bne.n	402522 <send_image_ws+0x6a>
				if(check_ws_handle(image_ws_handle) != COMMAND_SUCCESS){
  402508:	7dfb      	ldrb	r3, [r7, #23]
  40250a:	4618      	mov	r0, r3
  40250c:	4b3e      	ldr	r3, [pc, #248]	; (402608 <send_image_ws+0x150>)
  40250e:	4798      	blx	r3
  402510:	4603      	mov	r3, r0
  402512:	2b00      	cmp	r3, #0
  402514:	d062      	beq.n	4025dc <send_image_ws+0x124>
					image_ws_handle = open_camera_websocket(3);
  402516:	2003      	movs	r0, #3
  402518:	4b3c      	ldr	r3, [pc, #240]	; (40260c <send_image_ws+0x154>)
  40251a:	4798      	blx	r3
  40251c:	4603      	mov	r3, r0
  40251e:	75fb      	strb	r3, [r7, #23]
  402520:	e05c      	b.n	4025dc <send_image_ws+0x124>
				}
			} else if (status_code == COMMAND_SUCCESS){
  402522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402526:	2b00      	cmp	r3, #0
  402528:	d158      	bne.n	4025dc <send_image_ws+0x124>
				image_byte_index += PACKET_SIZE;
  40252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40252c:	33c8      	adds	r3, #200	; 0xc8
  40252e:	627b      	str	r3, [r7, #36]	; 0x24
  402530:	e054      	b.n	4025dc <send_image_ws+0x124>
			}
		} else{
			// websocket not open
			// wait a minute, then try to reopen
			// (for now, less than a minute)
			write_wifi_command_safe("close all\r\n","Success",100,0);
  402532:	2300      	movs	r3, #0
  402534:	2264      	movs	r2, #100	; 0x64
  402536:	4932      	ldr	r1, [pc, #200]	; (402600 <send_image_ws+0x148>)
  402538:	4835      	ldr	r0, [pc, #212]	; (402610 <send_image_ws+0x158>)
  40253a:	4c36      	ldr	r4, [pc, #216]	; (402614 <send_image_ws+0x15c>)
  40253c:	47a0      	blx	r4
			delay_ms(20000);
  40253e:	4b36      	ldr	r3, [pc, #216]	; (402618 <send_image_ws+0x160>)
  402540:	4798      	blx	r3
  402542:	4603      	mov	r3, r0
  402544:	4619      	mov	r1, r3
  402546:	f04f 0200 	mov.w	r2, #0
  40254a:	460b      	mov	r3, r1
  40254c:	4614      	mov	r4, r2
  40254e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  402552:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  402556:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  40255a:	4653      	mov	r3, sl
  40255c:	465c      	mov	r4, fp
  40255e:	0166      	lsls	r6, r4, #5
  402560:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
  402564:	015d      	lsls	r5, r3, #5
  402566:	1aed      	subs	r5, r5, r3
  402568:	eb66 0604 	sbc.w	r6, r6, r4
  40256c:	186d      	adds	r5, r5, r1
  40256e:	eb46 0602 	adc.w	r6, r6, r2
  402572:	00b3      	lsls	r3, r6, #2
  402574:	60fb      	str	r3, [r7, #12]
  402576:	68fb      	ldr	r3, [r7, #12]
  402578:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
  40257c:	60fb      	str	r3, [r7, #12]
  40257e:	00ab      	lsls	r3, r5, #2
  402580:	60bb      	str	r3, [r7, #8]
  402582:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  402586:	195b      	adds	r3, r3, r5
  402588:	eb44 0406 	adc.w	r4, r4, r6
  40258c:	461d      	mov	r5, r3
  40258e:	4626      	mov	r6, r4
  402590:	0173      	lsls	r3, r6, #5
  402592:	607b      	str	r3, [r7, #4]
  402594:	687b      	ldr	r3, [r7, #4]
  402596:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
  40259a:	607b      	str	r3, [r7, #4]
  40259c:	016b      	lsls	r3, r5, #5
  40259e:	603b      	str	r3, [r7, #0]
  4025a0:	e9d7 5600 	ldrd	r5, r6, [r7]
  4025a4:	4629      	mov	r1, r5
  4025a6:	4632      	mov	r2, r6
  4025a8:	f243 63af 	movw	r3, #13999	; 0x36af
  4025ac:	f04f 0400 	mov.w	r4, #0
  4025b0:	eb11 0803 	adds.w	r8, r1, r3
  4025b4:	eb42 0904 	adc.w	r9, r2, r4
  4025b8:	4640      	mov	r0, r8
  4025ba:	4649      	mov	r1, r9
  4025bc:	4c17      	ldr	r4, [pc, #92]	; (40261c <send_image_ws+0x164>)
  4025be:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4025c2:	f04f 0300 	mov.w	r3, #0
  4025c6:	47a0      	blx	r4
  4025c8:	4603      	mov	r3, r0
  4025ca:	460c      	mov	r4, r1
  4025cc:	4618      	mov	r0, r3
  4025ce:	4b14      	ldr	r3, [pc, #80]	; (402620 <send_image_ws+0x168>)
  4025d0:	4798      	blx	r3
			image_ws_handle = open_camera_websocket(5); // try 5 times to open the socket
  4025d2:	2005      	movs	r0, #5
  4025d4:	4b0d      	ldr	r3, [pc, #52]	; (40260c <send_image_ws+0x154>)
  4025d6:	4798      	blx	r3
  4025d8:	4603      	mov	r3, r0
  4025da:	75fb      	strb	r3, [r7, #23]
	// call the send image data safe function to transfer the image
	
	uint32_t image_byte_index = 0;
	uint8_t status_code;
	
	while (image_byte_index < image_length){
  4025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4025de:	69bb      	ldr	r3, [r7, #24]
  4025e0:	429a      	cmp	r2, r3
  4025e2:	f4ff af74 	bcc.w	4024ce <send_image_ws+0x16>
		
		
	}
	
	// send a message indicating the end of the image (or not)
	write_wifi_command_safe("write 0 0\r\n","Success", 500, 0); // replace 0 with handle at some point
  4025e6:	2300      	movs	r3, #0
  4025e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4025ec:	4904      	ldr	r1, [pc, #16]	; (402600 <send_image_ws+0x148>)
  4025ee:	480d      	ldr	r0, [pc, #52]	; (402624 <send_image_ws+0x16c>)
  4025f0:	4c08      	ldr	r4, [pc, #32]	; (402614 <send_image_ws+0x15c>)
  4025f2:	47a0      	blx	r4
}
  4025f4:	bf00      	nop
  4025f6:	4618      	mov	r0, r3
  4025f8:	372c      	adds	r7, #44	; 0x2c
  4025fa:	46bd      	mov	sp, r7
  4025fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402600:	00409880 	.word	0x00409880
  402604:	004022cd 	.word	0x004022cd
  402608:	004021a5 	.word	0x004021a5
  40260c:	00402135 	.word	0x00402135
  402610:	0040977c 	.word	0x0040977c
  402614:	00401fe9 	.word	0x00401fe9
  402618:	00401da5 	.word	0x00401da5
  40261c:	004039a1 	.word	0x004039a1
  402620:	20000001 	.word	0x20000001
  402624:	00409998 	.word	0x00409998

00402628 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  402628:	b580      	push	{r7, lr}
  40262a:	b082      	sub	sp, #8
  40262c:	af00      	add	r7, sp, #0
  40262e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402630:	687b      	ldr	r3, [r7, #4]
  402632:	2b07      	cmp	r3, #7
  402634:	d831      	bhi.n	40269a <osc_enable+0x72>
  402636:	a201      	add	r2, pc, #4	; (adr r2, 40263c <osc_enable+0x14>)
  402638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40263c:	00402699 	.word	0x00402699
  402640:	0040265d 	.word	0x0040265d
  402644:	00402665 	.word	0x00402665
  402648:	0040266d 	.word	0x0040266d
  40264c:	00402675 	.word	0x00402675
  402650:	0040267d 	.word	0x0040267d
  402654:	00402685 	.word	0x00402685
  402658:	0040268f 	.word	0x0040268f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40265c:	2000      	movs	r0, #0
  40265e:	4b11      	ldr	r3, [pc, #68]	; (4026a4 <osc_enable+0x7c>)
  402660:	4798      	blx	r3
		break;
  402662:	e01a      	b.n	40269a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  402664:	2001      	movs	r0, #1
  402666:	4b0f      	ldr	r3, [pc, #60]	; (4026a4 <osc_enable+0x7c>)
  402668:	4798      	blx	r3
		break;
  40266a:	e016      	b.n	40269a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40266c:	2000      	movs	r0, #0
  40266e:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <osc_enable+0x80>)
  402670:	4798      	blx	r3
		break;
  402672:	e012      	b.n	40269a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  402674:	2010      	movs	r0, #16
  402676:	4b0c      	ldr	r3, [pc, #48]	; (4026a8 <osc_enable+0x80>)
  402678:	4798      	blx	r3
		break;
  40267a:	e00e      	b.n	40269a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40267c:	2020      	movs	r0, #32
  40267e:	4b0a      	ldr	r3, [pc, #40]	; (4026a8 <osc_enable+0x80>)
  402680:	4798      	blx	r3
		break;
  402682:	e00a      	b.n	40269a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402684:	213e      	movs	r1, #62	; 0x3e
  402686:	2000      	movs	r0, #0
  402688:	4b08      	ldr	r3, [pc, #32]	; (4026ac <osc_enable+0x84>)
  40268a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40268c:	e005      	b.n	40269a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40268e:	213e      	movs	r1, #62	; 0x3e
  402690:	2001      	movs	r0, #1
  402692:	4b06      	ldr	r3, [pc, #24]	; (4026ac <osc_enable+0x84>)
  402694:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  402696:	e000      	b.n	40269a <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  402698:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40269a:	bf00      	nop
  40269c:	3708      	adds	r7, #8
  40269e:	46bd      	mov	sp, r7
  4026a0:	bd80      	pop	{r7, pc}
  4026a2:	bf00      	nop
  4026a4:	00402f59 	.word	0x00402f59
  4026a8:	00402fc5 	.word	0x00402fc5
  4026ac:	00403035 	.word	0x00403035

004026b0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4026b0:	b580      	push	{r7, lr}
  4026b2:	b082      	sub	sp, #8
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4026b8:	687b      	ldr	r3, [r7, #4]
  4026ba:	2b07      	cmp	r3, #7
  4026bc:	d826      	bhi.n	40270c <osc_is_ready+0x5c>
  4026be:	a201      	add	r2, pc, #4	; (adr r2, 4026c4 <osc_is_ready+0x14>)
  4026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4026c4:	004026e5 	.word	0x004026e5
  4026c8:	004026e9 	.word	0x004026e9
  4026cc:	004026e9 	.word	0x004026e9
  4026d0:	004026fb 	.word	0x004026fb
  4026d4:	004026fb 	.word	0x004026fb
  4026d8:	004026fb 	.word	0x004026fb
  4026dc:	004026fb 	.word	0x004026fb
  4026e0:	004026fb 	.word	0x004026fb
	case OSC_SLCK_32K_RC:
		return 1;
  4026e4:	2301      	movs	r3, #1
  4026e6:	e012      	b.n	40270e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4026e8:	4b0b      	ldr	r3, [pc, #44]	; (402718 <osc_is_ready+0x68>)
  4026ea:	4798      	blx	r3
  4026ec:	4603      	mov	r3, r0
  4026ee:	2b00      	cmp	r3, #0
  4026f0:	bf14      	ite	ne
  4026f2:	2301      	movne	r3, #1
  4026f4:	2300      	moveq	r3, #0
  4026f6:	b2db      	uxtb	r3, r3
  4026f8:	e009      	b.n	40270e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4026fa:	4b08      	ldr	r3, [pc, #32]	; (40271c <osc_is_ready+0x6c>)
  4026fc:	4798      	blx	r3
  4026fe:	4603      	mov	r3, r0
  402700:	2b00      	cmp	r3, #0
  402702:	bf14      	ite	ne
  402704:	2301      	movne	r3, #1
  402706:	2300      	moveq	r3, #0
  402708:	b2db      	uxtb	r3, r3
  40270a:	e000      	b.n	40270e <osc_is_ready+0x5e>
	}

	return 0;
  40270c:	2300      	movs	r3, #0
}
  40270e:	4618      	mov	r0, r3
  402710:	3708      	adds	r7, #8
  402712:	46bd      	mov	sp, r7
  402714:	bd80      	pop	{r7, pc}
  402716:	bf00      	nop
  402718:	00402f91 	.word	0x00402f91
  40271c:	004030ad 	.word	0x004030ad

00402720 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402720:	b480      	push	{r7}
  402722:	b083      	sub	sp, #12
  402724:	af00      	add	r7, sp, #0
  402726:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402728:	687b      	ldr	r3, [r7, #4]
  40272a:	2b07      	cmp	r3, #7
  40272c:	d825      	bhi.n	40277a <osc_get_rate+0x5a>
  40272e:	a201      	add	r2, pc, #4	; (adr r2, 402734 <osc_get_rate+0x14>)
  402730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402734:	00402755 	.word	0x00402755
  402738:	0040275b 	.word	0x0040275b
  40273c:	00402761 	.word	0x00402761
  402740:	00402767 	.word	0x00402767
  402744:	0040276b 	.word	0x0040276b
  402748:	0040276f 	.word	0x0040276f
  40274c:	00402773 	.word	0x00402773
  402750:	00402777 	.word	0x00402777
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402754:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402758:	e010      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40275a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40275e:	e00d      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402764:	e00a      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  402766:	4b08      	ldr	r3, [pc, #32]	; (402788 <osc_get_rate+0x68>)
  402768:	e008      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40276a:	4b08      	ldr	r3, [pc, #32]	; (40278c <osc_get_rate+0x6c>)
  40276c:	e006      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40276e:	4b08      	ldr	r3, [pc, #32]	; (402790 <osc_get_rate+0x70>)
  402770:	e004      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402772:	4b07      	ldr	r3, [pc, #28]	; (402790 <osc_get_rate+0x70>)
  402774:	e002      	b.n	40277c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402776:	4b06      	ldr	r3, [pc, #24]	; (402790 <osc_get_rate+0x70>)
  402778:	e000      	b.n	40277c <osc_get_rate+0x5c>
	}

	return 0;
  40277a:	2300      	movs	r3, #0
}
  40277c:	4618      	mov	r0, r3
  40277e:	370c      	adds	r7, #12
  402780:	46bd      	mov	sp, r7
  402782:	bc80      	pop	{r7}
  402784:	4770      	bx	lr
  402786:	bf00      	nop
  402788:	003d0900 	.word	0x003d0900
  40278c:	007a1200 	.word	0x007a1200
  402790:	00b71b00 	.word	0x00b71b00

00402794 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  402794:	b580      	push	{r7, lr}
  402796:	b082      	sub	sp, #8
  402798:	af00      	add	r7, sp, #0
  40279a:	4603      	mov	r3, r0
  40279c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40279e:	bf00      	nop
  4027a0:	79fb      	ldrb	r3, [r7, #7]
  4027a2:	4618      	mov	r0, r3
  4027a4:	4b05      	ldr	r3, [pc, #20]	; (4027bc <osc_wait_ready+0x28>)
  4027a6:	4798      	blx	r3
  4027a8:	4603      	mov	r3, r0
  4027aa:	f083 0301 	eor.w	r3, r3, #1
  4027ae:	b2db      	uxtb	r3, r3
  4027b0:	2b00      	cmp	r3, #0
  4027b2:	d1f5      	bne.n	4027a0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4027b4:	bf00      	nop
  4027b6:	3708      	adds	r7, #8
  4027b8:	46bd      	mov	sp, r7
  4027ba:	bd80      	pop	{r7, pc}
  4027bc:	004026b1 	.word	0x004026b1

004027c0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4027c0:	b580      	push	{r7, lr}
  4027c2:	b086      	sub	sp, #24
  4027c4:	af00      	add	r7, sp, #0
  4027c6:	60f8      	str	r0, [r7, #12]
  4027c8:	607a      	str	r2, [r7, #4]
  4027ca:	603b      	str	r3, [r7, #0]
  4027cc:	460b      	mov	r3, r1
  4027ce:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4027d0:	7afb      	ldrb	r3, [r7, #11]
  4027d2:	4618      	mov	r0, r3
  4027d4:	4b0d      	ldr	r3, [pc, #52]	; (40280c <pll_config_init+0x4c>)
  4027d6:	4798      	blx	r3
  4027d8:	4602      	mov	r2, r0
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	fbb2 f3f3 	udiv	r3, r2, r3
  4027e0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4027e2:	697b      	ldr	r3, [r7, #20]
  4027e4:	683a      	ldr	r2, [r7, #0]
  4027e6:	fb02 f303 	mul.w	r3, r2, r3
  4027ea:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4027ec:	683b      	ldr	r3, [r7, #0]
  4027ee:	3b01      	subs	r3, #1
  4027f0:	041a      	lsls	r2, r3, #16
  4027f2:	4b07      	ldr	r3, [pc, #28]	; (402810 <pll_config_init+0x50>)
  4027f4:	4013      	ands	r3, r2
  4027f6:	687a      	ldr	r2, [r7, #4]
  4027f8:	b2d2      	uxtb	r2, r2
  4027fa:	4313      	orrs	r3, r2
  4027fc:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  402800:	68fb      	ldr	r3, [r7, #12]
  402802:	601a      	str	r2, [r3, #0]
}
  402804:	bf00      	nop
  402806:	3718      	adds	r7, #24
  402808:	46bd      	mov	sp, r7
  40280a:	bd80      	pop	{r7, pc}
  40280c:	00402721 	.word	0x00402721
  402810:	07ff0000 	.word	0x07ff0000

00402814 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  402814:	b580      	push	{r7, lr}
  402816:	b082      	sub	sp, #8
  402818:	af00      	add	r7, sp, #0
  40281a:	6078      	str	r0, [r7, #4]
  40281c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40281e:	683b      	ldr	r3, [r7, #0]
  402820:	2b00      	cmp	r3, #0
  402822:	d108      	bne.n	402836 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  402824:	4b09      	ldr	r3, [pc, #36]	; (40284c <pll_enable+0x38>)
  402826:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402828:	4a09      	ldr	r2, [pc, #36]	; (402850 <pll_enable+0x3c>)
  40282a:	687b      	ldr	r3, [r7, #4]
  40282c:	681b      	ldr	r3, [r3, #0]
  40282e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402832:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  402834:	e005      	b.n	402842 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402836:	4b07      	ldr	r3, [pc, #28]	; (402854 <pll_enable+0x40>)
  402838:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40283a:	4a05      	ldr	r2, [pc, #20]	; (402850 <pll_enable+0x3c>)
  40283c:	687b      	ldr	r3, [r7, #4]
  40283e:	681b      	ldr	r3, [r3, #0]
  402840:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  402842:	bf00      	nop
  402844:	3708      	adds	r7, #8
  402846:	46bd      	mov	sp, r7
  402848:	bd80      	pop	{r7, pc}
  40284a:	bf00      	nop
  40284c:	004030c5 	.word	0x004030c5
  402850:	400e0400 	.word	0x400e0400
  402854:	00403145 	.word	0x00403145

00402858 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  402858:	b580      	push	{r7, lr}
  40285a:	b082      	sub	sp, #8
  40285c:	af00      	add	r7, sp, #0
  40285e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  402860:	687b      	ldr	r3, [r7, #4]
  402862:	2b00      	cmp	r3, #0
  402864:	d103      	bne.n	40286e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  402866:	4b05      	ldr	r3, [pc, #20]	; (40287c <pll_is_locked+0x24>)
  402868:	4798      	blx	r3
  40286a:	4603      	mov	r3, r0
  40286c:	e002      	b.n	402874 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40286e:	4b04      	ldr	r3, [pc, #16]	; (402880 <pll_is_locked+0x28>)
  402870:	4798      	blx	r3
  402872:	4603      	mov	r3, r0
	}
}
  402874:	4618      	mov	r0, r3
  402876:	3708      	adds	r7, #8
  402878:	46bd      	mov	sp, r7
  40287a:	bd80      	pop	{r7, pc}
  40287c:	004030dd 	.word	0x004030dd
  402880:	0040315d 	.word	0x0040315d

00402884 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  402884:	b580      	push	{r7, lr}
  402886:	b082      	sub	sp, #8
  402888:	af00      	add	r7, sp, #0
  40288a:	4603      	mov	r3, r0
  40288c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40288e:	79fb      	ldrb	r3, [r7, #7]
  402890:	3b03      	subs	r3, #3
  402892:	2b04      	cmp	r3, #4
  402894:	d808      	bhi.n	4028a8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  402896:	79fb      	ldrb	r3, [r7, #7]
  402898:	4618      	mov	r0, r3
  40289a:	4b06      	ldr	r3, [pc, #24]	; (4028b4 <pll_enable_source+0x30>)
  40289c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40289e:	79fb      	ldrb	r3, [r7, #7]
  4028a0:	4618      	mov	r0, r3
  4028a2:	4b05      	ldr	r3, [pc, #20]	; (4028b8 <pll_enable_source+0x34>)
  4028a4:	4798      	blx	r3
		break;
  4028a6:	e000      	b.n	4028aa <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4028a8:	bf00      	nop
	}
}
  4028aa:	bf00      	nop
  4028ac:	3708      	adds	r7, #8
  4028ae:	46bd      	mov	sp, r7
  4028b0:	bd80      	pop	{r7, pc}
  4028b2:	bf00      	nop
  4028b4:	00402629 	.word	0x00402629
  4028b8:	00402795 	.word	0x00402795

004028bc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4028bc:	b580      	push	{r7, lr}
  4028be:	b082      	sub	sp, #8
  4028c0:	af00      	add	r7, sp, #0
  4028c2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4028c4:	bf00      	nop
  4028c6:	6878      	ldr	r0, [r7, #4]
  4028c8:	4b04      	ldr	r3, [pc, #16]	; (4028dc <pll_wait_for_lock+0x20>)
  4028ca:	4798      	blx	r3
  4028cc:	4603      	mov	r3, r0
  4028ce:	2b00      	cmp	r3, #0
  4028d0:	d0f9      	beq.n	4028c6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4028d2:	2300      	movs	r3, #0
}
  4028d4:	4618      	mov	r0, r3
  4028d6:	3708      	adds	r7, #8
  4028d8:	46bd      	mov	sp, r7
  4028da:	bd80      	pop	{r7, pc}
  4028dc:	00402859 	.word	0x00402859

004028e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4028e0:	b580      	push	{r7, lr}
  4028e2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4028e4:	2006      	movs	r0, #6
  4028e6:	4b04      	ldr	r3, [pc, #16]	; (4028f8 <sysclk_get_main_hz+0x18>)
  4028e8:	4798      	blx	r3
  4028ea:	4602      	mov	r2, r0
  4028ec:	4613      	mov	r3, r2
  4028ee:	009b      	lsls	r3, r3, #2
  4028f0:	4413      	add	r3, r2
  4028f2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4028f4:	4618      	mov	r0, r3
  4028f6:	bd80      	pop	{r7, pc}
  4028f8:	00402721 	.word	0x00402721

004028fc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4028fc:	b580      	push	{r7, lr}
  4028fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402900:	4b02      	ldr	r3, [pc, #8]	; (40290c <sysclk_get_cpu_hz+0x10>)
  402902:	4798      	blx	r3
  402904:	4603      	mov	r3, r0
  402906:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402908:	4618      	mov	r0, r3
  40290a:	bd80      	pop	{r7, pc}
  40290c:	004028e1 	.word	0x004028e1

00402910 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402910:	b590      	push	{r4, r7, lr}
  402912:	b083      	sub	sp, #12
  402914:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402916:	4811      	ldr	r0, [pc, #68]	; (40295c <sysclk_init+0x4c>)
  402918:	4b11      	ldr	r3, [pc, #68]	; (402960 <sysclk_init+0x50>)
  40291a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40291c:	2006      	movs	r0, #6
  40291e:	4b11      	ldr	r3, [pc, #68]	; (402964 <sysclk_init+0x54>)
  402920:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  402922:	1d38      	adds	r0, r7, #4
  402924:	2314      	movs	r3, #20
  402926:	2201      	movs	r2, #1
  402928:	2106      	movs	r1, #6
  40292a:	4c0f      	ldr	r4, [pc, #60]	; (402968 <sysclk_init+0x58>)
  40292c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40292e:	1d3b      	adds	r3, r7, #4
  402930:	2100      	movs	r1, #0
  402932:	4618      	mov	r0, r3
  402934:	4b0d      	ldr	r3, [pc, #52]	; (40296c <sysclk_init+0x5c>)
  402936:	4798      	blx	r3
		pll_wait_for_lock(0);
  402938:	2000      	movs	r0, #0
  40293a:	4b0d      	ldr	r3, [pc, #52]	; (402970 <sysclk_init+0x60>)
  40293c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40293e:	2010      	movs	r0, #16
  402940:	4b0c      	ldr	r3, [pc, #48]	; (402974 <sysclk_init+0x64>)
  402942:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402944:	4b0c      	ldr	r3, [pc, #48]	; (402978 <sysclk_init+0x68>)
  402946:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402948:	4b0c      	ldr	r3, [pc, #48]	; (40297c <sysclk_init+0x6c>)
  40294a:	4798      	blx	r3
  40294c:	4603      	mov	r3, r0
  40294e:	4618      	mov	r0, r3
  402950:	4b03      	ldr	r3, [pc, #12]	; (402960 <sysclk_init+0x50>)
  402952:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  402954:	bf00      	nop
  402956:	370c      	adds	r7, #12
  402958:	46bd      	mov	sp, r7
  40295a:	bd90      	pop	{r4, r7, pc}
  40295c:	07270e00 	.word	0x07270e00
  402960:	004037fd 	.word	0x004037fd
  402964:	00402885 	.word	0x00402885
  402968:	004027c1 	.word	0x004027c1
  40296c:	00402815 	.word	0x00402815
  402970:	004028bd 	.word	0x004028bd
  402974:	00402ed9 	.word	0x00402ed9
  402978:	00403661 	.word	0x00403661
  40297c:	004028fd 	.word	0x004028fd

00402980 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  402980:	b480      	push	{r7}
  402982:	b085      	sub	sp, #20
  402984:	af00      	add	r7, sp, #0
  402986:	60f8      	str	r0, [r7, #12]
  402988:	60b9      	str	r1, [r7, #8]
  40298a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40298c:	687b      	ldr	r3, [r7, #4]
  40298e:	2b00      	cmp	r3, #0
  402990:	d003      	beq.n	40299a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  402992:	68fb      	ldr	r3, [r7, #12]
  402994:	68ba      	ldr	r2, [r7, #8]
  402996:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  402998:	e002      	b.n	4029a0 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40299a:	68fb      	ldr	r3, [r7, #12]
  40299c:	68ba      	ldr	r2, [r7, #8]
  40299e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4029a0:	bf00      	nop
  4029a2:	3714      	adds	r7, #20
  4029a4:	46bd      	mov	sp, r7
  4029a6:	bc80      	pop	{r7}
  4029a8:	4770      	bx	lr
  4029aa:	bf00      	nop

004029ac <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  4029ac:	b480      	push	{r7}
  4029ae:	b085      	sub	sp, #20
  4029b0:	af00      	add	r7, sp, #0
  4029b2:	60f8      	str	r0, [r7, #12]
  4029b4:	60b9      	str	r1, [r7, #8]
  4029b6:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4029b8:	68fb      	ldr	r3, [r7, #12]
  4029ba:	68ba      	ldr	r2, [r7, #8]
  4029bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4029c0:	687b      	ldr	r3, [r7, #4]
  4029c2:	005b      	lsls	r3, r3, #1
  4029c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4029c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4029cc:	3b01      	subs	r3, #1
  4029ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4029d2:	68fb      	ldr	r3, [r7, #12]
  4029d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4029d8:	bf00      	nop
  4029da:	3714      	adds	r7, #20
  4029dc:	46bd      	mov	sp, r7
  4029de:	bc80      	pop	{r7}
  4029e0:	4770      	bx	lr
  4029e2:	bf00      	nop

004029e4 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4029e4:	b480      	push	{r7}
  4029e6:	b087      	sub	sp, #28
  4029e8:	af00      	add	r7, sp, #0
  4029ea:	60f8      	str	r0, [r7, #12]
  4029ec:	60b9      	str	r1, [r7, #8]
  4029ee:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4029f0:	68fb      	ldr	r3, [r7, #12]
  4029f2:	687a      	ldr	r2, [r7, #4]
  4029f4:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4029f6:	68bb      	ldr	r3, [r7, #8]
  4029f8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4029fc:	d04a      	beq.n	402a94 <pio_set_peripheral+0xb0>
  4029fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402a02:	d808      	bhi.n	402a16 <pio_set_peripheral+0x32>
  402a04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402a08:	d016      	beq.n	402a38 <pio_set_peripheral+0x54>
  402a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402a0e:	d02c      	beq.n	402a6a <pio_set_peripheral+0x86>
  402a10:	2b00      	cmp	r3, #0
  402a12:	d069      	beq.n	402ae8 <pio_set_peripheral+0x104>
  402a14:	e064      	b.n	402ae0 <pio_set_peripheral+0xfc>
  402a16:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402a1a:	d065      	beq.n	402ae8 <pio_set_peripheral+0x104>
  402a1c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402a20:	d803      	bhi.n	402a2a <pio_set_peripheral+0x46>
  402a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402a26:	d04a      	beq.n	402abe <pio_set_peripheral+0xda>
  402a28:	e05a      	b.n	402ae0 <pio_set_peripheral+0xfc>
  402a2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402a2e:	d05b      	beq.n	402ae8 <pio_set_peripheral+0x104>
  402a30:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402a34:	d058      	beq.n	402ae8 <pio_set_peripheral+0x104>
  402a36:	e053      	b.n	402ae0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a38:	68fb      	ldr	r3, [r7, #12]
  402a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402a3c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a3e:	68fb      	ldr	r3, [r7, #12]
  402a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a42:	687b      	ldr	r3, [r7, #4]
  402a44:	43d9      	mvns	r1, r3
  402a46:	697b      	ldr	r3, [r7, #20]
  402a48:	400b      	ands	r3, r1
  402a4a:	401a      	ands	r2, r3
  402a4c:	68fb      	ldr	r3, [r7, #12]
  402a4e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402a50:	68fb      	ldr	r3, [r7, #12]
  402a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402a54:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402a56:	68fb      	ldr	r3, [r7, #12]
  402a58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402a5a:	687b      	ldr	r3, [r7, #4]
  402a5c:	43d9      	mvns	r1, r3
  402a5e:	697b      	ldr	r3, [r7, #20]
  402a60:	400b      	ands	r3, r1
  402a62:	401a      	ands	r2, r3
  402a64:	68fb      	ldr	r3, [r7, #12]
  402a66:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402a68:	e03a      	b.n	402ae0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a6a:	68fb      	ldr	r3, [r7, #12]
  402a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402a6e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402a70:	687a      	ldr	r2, [r7, #4]
  402a72:	697b      	ldr	r3, [r7, #20]
  402a74:	431a      	orrs	r2, r3
  402a76:	68fb      	ldr	r3, [r7, #12]
  402a78:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402a7a:	68fb      	ldr	r3, [r7, #12]
  402a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402a7e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402a80:	68fb      	ldr	r3, [r7, #12]
  402a82:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402a84:	687b      	ldr	r3, [r7, #4]
  402a86:	43d9      	mvns	r1, r3
  402a88:	697b      	ldr	r3, [r7, #20]
  402a8a:	400b      	ands	r3, r1
  402a8c:	401a      	ands	r2, r3
  402a8e:	68fb      	ldr	r3, [r7, #12]
  402a90:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402a92:	e025      	b.n	402ae0 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a94:	68fb      	ldr	r3, [r7, #12]
  402a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402a98:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a9a:	68fb      	ldr	r3, [r7, #12]
  402a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a9e:	687b      	ldr	r3, [r7, #4]
  402aa0:	43d9      	mvns	r1, r3
  402aa2:	697b      	ldr	r3, [r7, #20]
  402aa4:	400b      	ands	r3, r1
  402aa6:	401a      	ands	r2, r3
  402aa8:	68fb      	ldr	r3, [r7, #12]
  402aaa:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402ab0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402ab2:	687a      	ldr	r2, [r7, #4]
  402ab4:	697b      	ldr	r3, [r7, #20]
  402ab6:	431a      	orrs	r2, r3
  402ab8:	68fb      	ldr	r3, [r7, #12]
  402aba:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402abc:	e010      	b.n	402ae0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402abe:	68fb      	ldr	r3, [r7, #12]
  402ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402ac2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402ac4:	687a      	ldr	r2, [r7, #4]
  402ac6:	697b      	ldr	r3, [r7, #20]
  402ac8:	431a      	orrs	r2, r3
  402aca:	68fb      	ldr	r3, [r7, #12]
  402acc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402ace:	68fb      	ldr	r3, [r7, #12]
  402ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402ad2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402ad4:	687a      	ldr	r2, [r7, #4]
  402ad6:	697b      	ldr	r3, [r7, #20]
  402ad8:	431a      	orrs	r2, r3
  402ada:	68fb      	ldr	r3, [r7, #12]
  402adc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402ade:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402ae0:	68fb      	ldr	r3, [r7, #12]
  402ae2:	687a      	ldr	r2, [r7, #4]
  402ae4:	605a      	str	r2, [r3, #4]
  402ae6:	e000      	b.n	402aea <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  402ae8:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  402aea:	371c      	adds	r7, #28
  402aec:	46bd      	mov	sp, r7
  402aee:	bc80      	pop	{r7}
  402af0:	4770      	bx	lr
  402af2:	bf00      	nop

00402af4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  402af4:	b580      	push	{r7, lr}
  402af6:	b084      	sub	sp, #16
  402af8:	af00      	add	r7, sp, #0
  402afa:	60f8      	str	r0, [r7, #12]
  402afc:	60b9      	str	r1, [r7, #8]
  402afe:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402b00:	68b9      	ldr	r1, [r7, #8]
  402b02:	68f8      	ldr	r0, [r7, #12]
  402b04:	4b19      	ldr	r3, [pc, #100]	; (402b6c <pio_set_input+0x78>)
  402b06:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  402b08:	687b      	ldr	r3, [r7, #4]
  402b0a:	f003 0301 	and.w	r3, r3, #1
  402b0e:	461a      	mov	r2, r3
  402b10:	68b9      	ldr	r1, [r7, #8]
  402b12:	68f8      	ldr	r0, [r7, #12]
  402b14:	4b16      	ldr	r3, [pc, #88]	; (402b70 <pio_set_input+0x7c>)
  402b16:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402b18:	687b      	ldr	r3, [r7, #4]
  402b1a:	f003 030a 	and.w	r3, r3, #10
  402b1e:	2b00      	cmp	r3, #0
  402b20:	d003      	beq.n	402b2a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  402b22:	68fb      	ldr	r3, [r7, #12]
  402b24:	68ba      	ldr	r2, [r7, #8]
  402b26:	621a      	str	r2, [r3, #32]
  402b28:	e002      	b.n	402b30 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402b2a:	68fb      	ldr	r3, [r7, #12]
  402b2c:	68ba      	ldr	r2, [r7, #8]
  402b2e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402b30:	687b      	ldr	r3, [r7, #4]
  402b32:	f003 0302 	and.w	r3, r3, #2
  402b36:	2b00      	cmp	r3, #0
  402b38:	d004      	beq.n	402b44 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  402b3a:	68fb      	ldr	r3, [r7, #12]
  402b3c:	68ba      	ldr	r2, [r7, #8]
  402b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  402b42:	e008      	b.n	402b56 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402b44:	687b      	ldr	r3, [r7, #4]
  402b46:	f003 0308 	and.w	r3, r3, #8
  402b4a:	2b00      	cmp	r3, #0
  402b4c:	d003      	beq.n	402b56 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  402b4e:	68fb      	ldr	r3, [r7, #12]
  402b50:	68ba      	ldr	r2, [r7, #8]
  402b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402b56:	68fb      	ldr	r3, [r7, #12]
  402b58:	68ba      	ldr	r2, [r7, #8]
  402b5a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402b5c:	68fb      	ldr	r3, [r7, #12]
  402b5e:	68ba      	ldr	r2, [r7, #8]
  402b60:	601a      	str	r2, [r3, #0]
}
  402b62:	bf00      	nop
  402b64:	3710      	adds	r7, #16
  402b66:	46bd      	mov	sp, r7
  402b68:	bd80      	pop	{r7, pc}
  402b6a:	bf00      	nop
  402b6c:	00402c61 	.word	0x00402c61
  402b70:	00402981 	.word	0x00402981

00402b74 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402b74:	b580      	push	{r7, lr}
  402b76:	b084      	sub	sp, #16
  402b78:	af00      	add	r7, sp, #0
  402b7a:	60f8      	str	r0, [r7, #12]
  402b7c:	60b9      	str	r1, [r7, #8]
  402b7e:	607a      	str	r2, [r7, #4]
  402b80:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  402b82:	68b9      	ldr	r1, [r7, #8]
  402b84:	68f8      	ldr	r0, [r7, #12]
  402b86:	4b12      	ldr	r3, [pc, #72]	; (402bd0 <pio_set_output+0x5c>)
  402b88:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  402b8a:	69ba      	ldr	r2, [r7, #24]
  402b8c:	68b9      	ldr	r1, [r7, #8]
  402b8e:	68f8      	ldr	r0, [r7, #12]
  402b90:	4b10      	ldr	r3, [pc, #64]	; (402bd4 <pio_set_output+0x60>)
  402b92:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402b94:	683b      	ldr	r3, [r7, #0]
  402b96:	2b00      	cmp	r3, #0
  402b98:	d003      	beq.n	402ba2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  402b9a:	68fb      	ldr	r3, [r7, #12]
  402b9c:	68ba      	ldr	r2, [r7, #8]
  402b9e:	651a      	str	r2, [r3, #80]	; 0x50
  402ba0:	e002      	b.n	402ba8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402ba2:	68fb      	ldr	r3, [r7, #12]
  402ba4:	68ba      	ldr	r2, [r7, #8]
  402ba6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402ba8:	687b      	ldr	r3, [r7, #4]
  402baa:	2b00      	cmp	r3, #0
  402bac:	d003      	beq.n	402bb6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402bae:	68fb      	ldr	r3, [r7, #12]
  402bb0:	68ba      	ldr	r2, [r7, #8]
  402bb2:	631a      	str	r2, [r3, #48]	; 0x30
  402bb4:	e002      	b.n	402bbc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402bb6:	68fb      	ldr	r3, [r7, #12]
  402bb8:	68ba      	ldr	r2, [r7, #8]
  402bba:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402bbc:	68fb      	ldr	r3, [r7, #12]
  402bbe:	68ba      	ldr	r2, [r7, #8]
  402bc0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  402bc2:	68fb      	ldr	r3, [r7, #12]
  402bc4:	68ba      	ldr	r2, [r7, #8]
  402bc6:	601a      	str	r2, [r3, #0]
}
  402bc8:	bf00      	nop
  402bca:	3710      	adds	r7, #16
  402bcc:	46bd      	mov	sp, r7
  402bce:	bd80      	pop	{r7, pc}
  402bd0:	00402c61 	.word	0x00402c61
  402bd4:	00402981 	.word	0x00402981

00402bd8 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402bd8:	b480      	push	{r7}
  402bda:	b085      	sub	sp, #20
  402bdc:	af00      	add	r7, sp, #0
  402bde:	60f8      	str	r0, [r7, #12]
  402be0:	60b9      	str	r1, [r7, #8]
  402be2:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402be4:	687b      	ldr	r3, [r7, #4]
  402be6:	f003 0310 	and.w	r3, r3, #16
  402bea:	2b00      	cmp	r3, #0
  402bec:	d020      	beq.n	402c30 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402bee:	68fb      	ldr	r3, [r7, #12]
  402bf0:	68ba      	ldr	r2, [r7, #8]
  402bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402bf6:	687b      	ldr	r3, [r7, #4]
  402bf8:	f003 0320 	and.w	r3, r3, #32
  402bfc:	2b00      	cmp	r3, #0
  402bfe:	d004      	beq.n	402c0a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402c00:	68fb      	ldr	r3, [r7, #12]
  402c02:	68ba      	ldr	r2, [r7, #8]
  402c04:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402c08:	e003      	b.n	402c12 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402c0a:	68fb      	ldr	r3, [r7, #12]
  402c0c:	68ba      	ldr	r2, [r7, #8]
  402c0e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402c12:	687b      	ldr	r3, [r7, #4]
  402c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402c18:	2b00      	cmp	r3, #0
  402c1a:	d004      	beq.n	402c26 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402c1c:	68fb      	ldr	r3, [r7, #12]
  402c1e:	68ba      	ldr	r2, [r7, #8]
  402c20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402c24:	e008      	b.n	402c38 <pio_configure_interrupt+0x60>
		if (ul_attr & PIO_IT_EDGE) {
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402c26:	68fb      	ldr	r3, [r7, #12]
  402c28:	68ba      	ldr	r2, [r7, #8]
  402c2a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402c2e:	e003      	b.n	402c38 <pio_configure_interrupt+0x60>
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402c30:	68fb      	ldr	r3, [r7, #12]
  402c32:	68ba      	ldr	r2, [r7, #8]
  402c34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}
}
  402c38:	bf00      	nop
  402c3a:	3714      	adds	r7, #20
  402c3c:	46bd      	mov	sp, r7
  402c3e:	bc80      	pop	{r7}
  402c40:	4770      	bx	lr
  402c42:	bf00      	nop

00402c44 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402c44:	b480      	push	{r7}
  402c46:	b083      	sub	sp, #12
  402c48:	af00      	add	r7, sp, #0
  402c4a:	6078      	str	r0, [r7, #4]
  402c4c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  402c4e:	687b      	ldr	r3, [r7, #4]
  402c50:	683a      	ldr	r2, [r7, #0]
  402c52:	641a      	str	r2, [r3, #64]	; 0x40
}
  402c54:	bf00      	nop
  402c56:	370c      	adds	r7, #12
  402c58:	46bd      	mov	sp, r7
  402c5a:	bc80      	pop	{r7}
  402c5c:	4770      	bx	lr
  402c5e:	bf00      	nop

00402c60 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402c60:	b480      	push	{r7}
  402c62:	b083      	sub	sp, #12
  402c64:	af00      	add	r7, sp, #0
  402c66:	6078      	str	r0, [r7, #4]
  402c68:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  402c6a:	687b      	ldr	r3, [r7, #4]
  402c6c:	683a      	ldr	r2, [r7, #0]
  402c6e:	645a      	str	r2, [r3, #68]	; 0x44
}
  402c70:	bf00      	nop
  402c72:	370c      	adds	r7, #12
  402c74:	46bd      	mov	sp, r7
  402c76:	bc80      	pop	{r7}
  402c78:	4770      	bx	lr
  402c7a:	bf00      	nop

00402c7c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  402c7c:	b480      	push	{r7}
  402c7e:	b083      	sub	sp, #12
  402c80:	af00      	add	r7, sp, #0
  402c82:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  402c84:	687b      	ldr	r3, [r7, #4]
  402c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  402c88:	4618      	mov	r0, r3
  402c8a:	370c      	adds	r7, #12
  402c8c:	46bd      	mov	sp, r7
  402c8e:	bc80      	pop	{r7}
  402c90:	4770      	bx	lr
  402c92:	bf00      	nop

00402c94 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  402c94:	b480      	push	{r7}
  402c96:	b083      	sub	sp, #12
  402c98:	af00      	add	r7, sp, #0
  402c9a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  402c9c:	687b      	ldr	r3, [r7, #4]
  402c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  402ca0:	4618      	mov	r0, r3
  402ca2:	370c      	adds	r7, #12
  402ca4:	46bd      	mov	sp, r7
  402ca6:	bc80      	pop	{r7}
  402ca8:	4770      	bx	lr
  402caa:	bf00      	nop

00402cac <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402cac:	b590      	push	{r4, r7, lr}
  402cae:	b087      	sub	sp, #28
  402cb0:	af02      	add	r7, sp, #8
  402cb2:	6078      	str	r0, [r7, #4]
  402cb4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402cb6:	6878      	ldr	r0, [r7, #4]
  402cb8:	4b63      	ldr	r3, [pc, #396]	; (402e48 <pio_configure_pin+0x19c>)
  402cba:	4798      	blx	r3
  402cbc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402cbe:	683b      	ldr	r3, [r7, #0]
  402cc0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  402cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402cc8:	d067      	beq.n	402d9a <pio_configure_pin+0xee>
  402cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402cce:	d809      	bhi.n	402ce4 <pio_configure_pin+0x38>
  402cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402cd4:	d02b      	beq.n	402d2e <pio_configure_pin+0x82>
  402cd6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402cda:	d043      	beq.n	402d64 <pio_configure_pin+0xb8>
  402cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402ce0:	d00a      	beq.n	402cf8 <pio_configure_pin+0x4c>
  402ce2:	e0a9      	b.n	402e38 <pio_configure_pin+0x18c>
  402ce4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402ce8:	d07e      	beq.n	402de8 <pio_configure_pin+0x13c>
  402cea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402cee:	d07b      	beq.n	402de8 <pio_configure_pin+0x13c>
  402cf0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402cf4:	d06c      	beq.n	402dd0 <pio_configure_pin+0x124>
  402cf6:	e09f      	b.n	402e38 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402cf8:	687b      	ldr	r3, [r7, #4]
  402cfa:	f003 031f 	and.w	r3, r3, #31
  402cfe:	2201      	movs	r2, #1
  402d00:	fa02 f303 	lsl.w	r3, r2, r3
  402d04:	461a      	mov	r2, r3
  402d06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402d0a:	68f8      	ldr	r0, [r7, #12]
  402d0c:	4b4f      	ldr	r3, [pc, #316]	; (402e4c <pio_configure_pin+0x1a0>)
  402d0e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402d10:	687b      	ldr	r3, [r7, #4]
  402d12:	f003 031f 	and.w	r3, r3, #31
  402d16:	2201      	movs	r2, #1
  402d18:	fa02 f303 	lsl.w	r3, r2, r3
  402d1c:	4619      	mov	r1, r3
  402d1e:	683b      	ldr	r3, [r7, #0]
  402d20:	f003 0301 	and.w	r3, r3, #1
  402d24:	461a      	mov	r2, r3
  402d26:	68f8      	ldr	r0, [r7, #12]
  402d28:	4b49      	ldr	r3, [pc, #292]	; (402e50 <pio_configure_pin+0x1a4>)
  402d2a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402d2c:	e086      	b.n	402e3c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402d2e:	687b      	ldr	r3, [r7, #4]
  402d30:	f003 031f 	and.w	r3, r3, #31
  402d34:	2201      	movs	r2, #1
  402d36:	fa02 f303 	lsl.w	r3, r2, r3
  402d3a:	461a      	mov	r2, r3
  402d3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402d40:	68f8      	ldr	r0, [r7, #12]
  402d42:	4b42      	ldr	r3, [pc, #264]	; (402e4c <pio_configure_pin+0x1a0>)
  402d44:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402d46:	687b      	ldr	r3, [r7, #4]
  402d48:	f003 031f 	and.w	r3, r3, #31
  402d4c:	2201      	movs	r2, #1
  402d4e:	fa02 f303 	lsl.w	r3, r2, r3
  402d52:	4619      	mov	r1, r3
  402d54:	683b      	ldr	r3, [r7, #0]
  402d56:	f003 0301 	and.w	r3, r3, #1
  402d5a:	461a      	mov	r2, r3
  402d5c:	68f8      	ldr	r0, [r7, #12]
  402d5e:	4b3c      	ldr	r3, [pc, #240]	; (402e50 <pio_configure_pin+0x1a4>)
  402d60:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402d62:	e06b      	b.n	402e3c <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402d64:	687b      	ldr	r3, [r7, #4]
  402d66:	f003 031f 	and.w	r3, r3, #31
  402d6a:	2201      	movs	r2, #1
  402d6c:	fa02 f303 	lsl.w	r3, r2, r3
  402d70:	461a      	mov	r2, r3
  402d72:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402d76:	68f8      	ldr	r0, [r7, #12]
  402d78:	4b34      	ldr	r3, [pc, #208]	; (402e4c <pio_configure_pin+0x1a0>)
  402d7a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402d7c:	687b      	ldr	r3, [r7, #4]
  402d7e:	f003 031f 	and.w	r3, r3, #31
  402d82:	2201      	movs	r2, #1
  402d84:	fa02 f303 	lsl.w	r3, r2, r3
  402d88:	4619      	mov	r1, r3
  402d8a:	683b      	ldr	r3, [r7, #0]
  402d8c:	f003 0301 	and.w	r3, r3, #1
  402d90:	461a      	mov	r2, r3
  402d92:	68f8      	ldr	r0, [r7, #12]
  402d94:	4b2e      	ldr	r3, [pc, #184]	; (402e50 <pio_configure_pin+0x1a4>)
  402d96:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402d98:	e050      	b.n	402e3c <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	f003 031f 	and.w	r3, r3, #31
  402da0:	2201      	movs	r2, #1
  402da2:	fa02 f303 	lsl.w	r3, r2, r3
  402da6:	461a      	mov	r2, r3
  402da8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402dac:	68f8      	ldr	r0, [r7, #12]
  402dae:	4b27      	ldr	r3, [pc, #156]	; (402e4c <pio_configure_pin+0x1a0>)
  402db0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402db2:	687b      	ldr	r3, [r7, #4]
  402db4:	f003 031f 	and.w	r3, r3, #31
  402db8:	2201      	movs	r2, #1
  402dba:	fa02 f303 	lsl.w	r3, r2, r3
  402dbe:	4619      	mov	r1, r3
  402dc0:	683b      	ldr	r3, [r7, #0]
  402dc2:	f003 0301 	and.w	r3, r3, #1
  402dc6:	461a      	mov	r2, r3
  402dc8:	68f8      	ldr	r0, [r7, #12]
  402dca:	4b21      	ldr	r3, [pc, #132]	; (402e50 <pio_configure_pin+0x1a4>)
  402dcc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402dce:	e035      	b.n	402e3c <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402dd0:	687b      	ldr	r3, [r7, #4]
  402dd2:	f003 031f 	and.w	r3, r3, #31
  402dd6:	2201      	movs	r2, #1
  402dd8:	fa02 f303 	lsl.w	r3, r2, r3
  402ddc:	683a      	ldr	r2, [r7, #0]
  402dde:	4619      	mov	r1, r3
  402de0:	68f8      	ldr	r0, [r7, #12]
  402de2:	4b1c      	ldr	r3, [pc, #112]	; (402e54 <pio_configure_pin+0x1a8>)
  402de4:	4798      	blx	r3
		break;
  402de6:	e029      	b.n	402e3c <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402de8:	687b      	ldr	r3, [r7, #4]
  402dea:	f003 031f 	and.w	r3, r3, #31
  402dee:	2201      	movs	r2, #1
  402df0:	fa02 f303 	lsl.w	r3, r2, r3
  402df4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402df6:	683b      	ldr	r3, [r7, #0]
  402df8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402dfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402e00:	bf0c      	ite	eq
  402e02:	2301      	moveq	r3, #1
  402e04:	2300      	movne	r3, #0
  402e06:	b2db      	uxtb	r3, r3
  402e08:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402e0a:	683b      	ldr	r3, [r7, #0]
  402e0c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402e10:	2b00      	cmp	r3, #0
  402e12:	bf14      	ite	ne
  402e14:	2301      	movne	r3, #1
  402e16:	2300      	moveq	r3, #0
  402e18:	b2db      	uxtb	r3, r3
  402e1a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  402e1c:	683b      	ldr	r3, [r7, #0]
  402e1e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402e22:	2b00      	cmp	r3, #0
  402e24:	bf14      	ite	ne
  402e26:	2301      	movne	r3, #1
  402e28:	2300      	moveq	r3, #0
  402e2a:	b2db      	uxtb	r3, r3
  402e2c:	9300      	str	r3, [sp, #0]
  402e2e:	4603      	mov	r3, r0
  402e30:	68f8      	ldr	r0, [r7, #12]
  402e32:	4c09      	ldr	r4, [pc, #36]	; (402e58 <pio_configure_pin+0x1ac>)
  402e34:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402e36:	e001      	b.n	402e3c <pio_configure_pin+0x190>

	default:
		return 0;
  402e38:	2300      	movs	r3, #0
  402e3a:	e000      	b.n	402e3e <pio_configure_pin+0x192>
	}

	return 1;
  402e3c:	2301      	movs	r3, #1
}
  402e3e:	4618      	mov	r0, r3
  402e40:	3714      	adds	r7, #20
  402e42:	46bd      	mov	sp, r7
  402e44:	bd90      	pop	{r4, r7, pc}
  402e46:	bf00      	nop
  402e48:	00402e5d 	.word	0x00402e5d
  402e4c:	004029e5 	.word	0x004029e5
  402e50:	00402981 	.word	0x00402981
  402e54:	00402af5 	.word	0x00402af5
  402e58:	00402b75 	.word	0x00402b75

00402e5c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  402e5c:	b480      	push	{r7}
  402e5e:	b085      	sub	sp, #20
  402e60:	af00      	add	r7, sp, #0
  402e62:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402e64:	687b      	ldr	r3, [r7, #4]
  402e66:	095b      	lsrs	r3, r3, #5
  402e68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402e6c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402e70:	025b      	lsls	r3, r3, #9
  402e72:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  402e74:	68fb      	ldr	r3, [r7, #12]
}
  402e76:	4618      	mov	r0, r3
  402e78:	3714      	adds	r7, #20
  402e7a:	46bd      	mov	sp, r7
  402e7c:	bc80      	pop	{r7}
  402e7e:	4770      	bx	lr

00402e80 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  402e80:	b480      	push	{r7}
  402e82:	b083      	sub	sp, #12
  402e84:	af00      	add	r7, sp, #0
  402e86:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  402e8e:	f043 0201 	orr.w	r2, r3, #1
  402e92:	687b      	ldr	r3, [r7, #4]
  402e94:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  402e98:	4b03      	ldr	r3, [pc, #12]	; (402ea8 <pio_capture_enable+0x28>)
  402e9a:	2201      	movs	r2, #1
  402e9c:	601a      	str	r2, [r3, #0]
}
  402e9e:	bf00      	nop
  402ea0:	370c      	adds	r7, #12
  402ea2:	46bd      	mov	sp, r7
  402ea4:	bc80      	pop	{r7}
  402ea6:	4770      	bx	lr
  402ea8:	2000d694 	.word	0x2000d694

00402eac <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  402eac:	b480      	push	{r7}
  402eae:	b083      	sub	sp, #12
  402eb0:	af00      	add	r7, sp, #0
  402eb2:	6078      	str	r0, [r7, #4]
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  402eb4:	687b      	ldr	r3, [r7, #4]
  402eb6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  402eba:	f023 0201 	bic.w	r2, r3, #1
  402ebe:	687b      	ldr	r3, [r7, #4]
  402ec0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  402ec4:	4b03      	ldr	r3, [pc, #12]	; (402ed4 <pio_capture_disable+0x28>)
  402ec6:	2200      	movs	r2, #0
  402ec8:	601a      	str	r2, [r3, #0]
}
  402eca:	bf00      	nop
  402ecc:	370c      	adds	r7, #12
  402ece:	46bd      	mov	sp, r7
  402ed0:	bc80      	pop	{r7}
  402ed2:	4770      	bx	lr
  402ed4:	2000d694 	.word	0x2000d694

00402ed8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402ed8:	b480      	push	{r7}
  402eda:	b085      	sub	sp, #20
  402edc:	af00      	add	r7, sp, #0
  402ede:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402ee0:	491c      	ldr	r1, [pc, #112]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402ee2:	4b1c      	ldr	r3, [pc, #112]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402eea:	687b      	ldr	r3, [r7, #4]
  402eec:	4313      	orrs	r3, r2
  402eee:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402ef4:	60fb      	str	r3, [r7, #12]
  402ef6:	e007      	b.n	402f08 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402ef8:	68fb      	ldr	r3, [r7, #12]
  402efa:	2b00      	cmp	r3, #0
  402efc:	d101      	bne.n	402f02 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402efe:	2301      	movs	r3, #1
  402f00:	e023      	b.n	402f4a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  402f02:	68fb      	ldr	r3, [r7, #12]
  402f04:	3b01      	subs	r3, #1
  402f06:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f08:	4b12      	ldr	r3, [pc, #72]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402f0c:	f003 0308 	and.w	r3, r3, #8
  402f10:	2b00      	cmp	r3, #0
  402f12:	d0f1      	beq.n	402ef8 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402f14:	4a0f      	ldr	r2, [pc, #60]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402f16:	4b0f      	ldr	r3, [pc, #60]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f1a:	f023 0303 	bic.w	r3, r3, #3
  402f1e:	f043 0302 	orr.w	r3, r3, #2
  402f22:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f24:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f28:	60fb      	str	r3, [r7, #12]
  402f2a:	e007      	b.n	402f3c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f2c:	68fb      	ldr	r3, [r7, #12]
  402f2e:	2b00      	cmp	r3, #0
  402f30:	d101      	bne.n	402f36 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  402f32:	2301      	movs	r3, #1
  402f34:	e009      	b.n	402f4a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  402f36:	68fb      	ldr	r3, [r7, #12]
  402f38:	3b01      	subs	r3, #1
  402f3a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f3c:	4b05      	ldr	r3, [pc, #20]	; (402f54 <pmc_switch_mck_to_pllack+0x7c>)
  402f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402f40:	f003 0308 	and.w	r3, r3, #8
  402f44:	2b00      	cmp	r3, #0
  402f46:	d0f1      	beq.n	402f2c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402f48:	2300      	movs	r3, #0
}
  402f4a:	4618      	mov	r0, r3
  402f4c:	3714      	adds	r7, #20
  402f4e:	46bd      	mov	sp, r7
  402f50:	bc80      	pop	{r7}
  402f52:	4770      	bx	lr
  402f54:	400e0400 	.word	0x400e0400

00402f58 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402f58:	b480      	push	{r7}
  402f5a:	b083      	sub	sp, #12
  402f5c:	af00      	add	r7, sp, #0
  402f5e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402f60:	687b      	ldr	r3, [r7, #4]
  402f62:	2b01      	cmp	r3, #1
  402f64:	d107      	bne.n	402f76 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402f66:	4a08      	ldr	r2, [pc, #32]	; (402f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  402f68:	4b07      	ldr	r3, [pc, #28]	; (402f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  402f6a:	689b      	ldr	r3, [r3, #8]
  402f6c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  402f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402f74:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402f76:	4b04      	ldr	r3, [pc, #16]	; (402f88 <pmc_switch_sclk_to_32kxtal+0x30>)
  402f78:	4a04      	ldr	r2, [pc, #16]	; (402f8c <pmc_switch_sclk_to_32kxtal+0x34>)
  402f7a:	601a      	str	r2, [r3, #0]
}
  402f7c:	bf00      	nop
  402f7e:	370c      	adds	r7, #12
  402f80:	46bd      	mov	sp, r7
  402f82:	bc80      	pop	{r7}
  402f84:	4770      	bx	lr
  402f86:	bf00      	nop
  402f88:	400e1410 	.word	0x400e1410
  402f8c:	a5000008 	.word	0xa5000008

00402f90 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402f90:	b480      	push	{r7}
  402f92:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402f94:	4b09      	ldr	r3, [pc, #36]	; (402fbc <pmc_osc_is_ready_32kxtal+0x2c>)
  402f96:	695b      	ldr	r3, [r3, #20]
  402f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402f9c:	2b00      	cmp	r3, #0
  402f9e:	d007      	beq.n	402fb0 <pmc_osc_is_ready_32kxtal+0x20>
  402fa0:	4b07      	ldr	r3, [pc, #28]	; (402fc0 <pmc_osc_is_ready_32kxtal+0x30>)
  402fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402fa8:	2b00      	cmp	r3, #0
  402faa:	d001      	beq.n	402fb0 <pmc_osc_is_ready_32kxtal+0x20>
  402fac:	2301      	movs	r3, #1
  402fae:	e000      	b.n	402fb2 <pmc_osc_is_ready_32kxtal+0x22>
  402fb0:	2300      	movs	r3, #0
}
  402fb2:	4618      	mov	r0, r3
  402fb4:	46bd      	mov	sp, r7
  402fb6:	bc80      	pop	{r7}
  402fb8:	4770      	bx	lr
  402fba:	bf00      	nop
  402fbc:	400e1410 	.word	0x400e1410
  402fc0:	400e0400 	.word	0x400e0400

00402fc4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402fc4:	b480      	push	{r7}
  402fc6:	b083      	sub	sp, #12
  402fc8:	af00      	add	r7, sp, #0
  402fca:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402fcc:	4a18      	ldr	r2, [pc, #96]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  402fce:	4b18      	ldr	r3, [pc, #96]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  402fd0:	6a1b      	ldr	r3, [r3, #32]
  402fd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402fd6:	f043 0308 	orr.w	r3, r3, #8
  402fda:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402fdc:	bf00      	nop
  402fde:	4b14      	ldr	r3, [pc, #80]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  402fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	d0f9      	beq.n	402fde <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402fea:	4911      	ldr	r1, [pc, #68]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  402fec:	4b10      	ldr	r3, [pc, #64]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  402fee:	6a1b      	ldr	r3, [r3, #32]
  402ff0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402ff8:	687a      	ldr	r2, [r7, #4]
  402ffa:	4313      	orrs	r3, r2
  402ffc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403000:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403002:	bf00      	nop
  403004:	4b0a      	ldr	r3, [pc, #40]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  403006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40300c:	2b00      	cmp	r3, #0
  40300e:	d0f9      	beq.n	403004 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403010:	4a07      	ldr	r2, [pc, #28]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  403012:	4b07      	ldr	r3, [pc, #28]	; (403030 <pmc_switch_mainck_to_fastrc+0x6c>)
  403014:	6a1b      	ldr	r3, [r3, #32]
  403016:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40301e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403022:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  403024:	bf00      	nop
  403026:	370c      	adds	r7, #12
  403028:	46bd      	mov	sp, r7
  40302a:	bc80      	pop	{r7}
  40302c:	4770      	bx	lr
  40302e:	bf00      	nop
  403030:	400e0400 	.word	0x400e0400

00403034 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  403034:	b480      	push	{r7}
  403036:	b083      	sub	sp, #12
  403038:	af00      	add	r7, sp, #0
  40303a:	6078      	str	r0, [r7, #4]
  40303c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40303e:	687b      	ldr	r3, [r7, #4]
  403040:	2b00      	cmp	r3, #0
  403042:	d008      	beq.n	403056 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403044:	4916      	ldr	r1, [pc, #88]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  403046:	4b16      	ldr	r3, [pc, #88]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  403048:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40304a:	4a16      	ldr	r2, [pc, #88]	; (4030a4 <pmc_switch_mainck_to_xtal+0x70>)
  40304c:	401a      	ands	r2, r3
  40304e:	4b16      	ldr	r3, [pc, #88]	; (4030a8 <pmc_switch_mainck_to_xtal+0x74>)
  403050:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403052:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  403054:	e01e      	b.n	403094 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403056:	4912      	ldr	r1, [pc, #72]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  403058:	4b11      	ldr	r3, [pc, #68]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40305a:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40305c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403060:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403064:	683a      	ldr	r2, [r7, #0]
  403066:	0212      	lsls	r2, r2, #8
  403068:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40306a:	4313      	orrs	r3, r2
  40306c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403070:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403074:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403076:	bf00      	nop
  403078:	4b09      	ldr	r3, [pc, #36]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40307a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40307c:	f003 0301 	and.w	r3, r3, #1
  403080:	2b00      	cmp	r3, #0
  403082:	d0f9      	beq.n	403078 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403084:	4a06      	ldr	r2, [pc, #24]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  403086:	4b06      	ldr	r3, [pc, #24]	; (4030a0 <pmc_switch_mainck_to_xtal+0x6c>)
  403088:	6a1b      	ldr	r3, [r3, #32]
  40308a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403092:	6213      	str	r3, [r2, #32]
	}
}
  403094:	bf00      	nop
  403096:	370c      	adds	r7, #12
  403098:	46bd      	mov	sp, r7
  40309a:	bc80      	pop	{r7}
  40309c:	4770      	bx	lr
  40309e:	bf00      	nop
  4030a0:	400e0400 	.word	0x400e0400
  4030a4:	fec8fffc 	.word	0xfec8fffc
  4030a8:	01370002 	.word	0x01370002

004030ac <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4030ac:	b480      	push	{r7}
  4030ae:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4030b0:	4b03      	ldr	r3, [pc, #12]	; (4030c0 <pmc_osc_is_ready_mainck+0x14>)
  4030b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4030b8:	4618      	mov	r0, r3
  4030ba:	46bd      	mov	sp, r7
  4030bc:	bc80      	pop	{r7}
  4030be:	4770      	bx	lr
  4030c0:	400e0400 	.word	0x400e0400

004030c4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4030c4:	b480      	push	{r7}
  4030c6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4030c8:	4b03      	ldr	r3, [pc, #12]	; (4030d8 <pmc_disable_pllack+0x14>)
  4030ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4030ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4030d0:	bf00      	nop
  4030d2:	46bd      	mov	sp, r7
  4030d4:	bc80      	pop	{r7}
  4030d6:	4770      	bx	lr
  4030d8:	400e0400 	.word	0x400e0400

004030dc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4030dc:	b480      	push	{r7}
  4030de:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4030e0:	4b03      	ldr	r3, [pc, #12]	; (4030f0 <pmc_is_locked_pllack+0x14>)
  4030e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4030e4:	f003 0302 	and.w	r3, r3, #2
}
  4030e8:	4618      	mov	r0, r3
  4030ea:	46bd      	mov	sp, r7
  4030ec:	bc80      	pop	{r7}
  4030ee:	4770      	bx	lr
  4030f0:	400e0400 	.word	0x400e0400

004030f4 <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  4030f4:	b580      	push	{r7, lr}
  4030f6:	b084      	sub	sp, #16
  4030f8:	af00      	add	r7, sp, #0
  4030fa:	60f8      	str	r0, [r7, #12]
  4030fc:	60b9      	str	r1, [r7, #8]
  4030fe:	607a      	str	r2, [r7, #4]
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  403100:	4b0d      	ldr	r3, [pc, #52]	; (403138 <pmc_enable_pllbck+0x44>)
  403102:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  403104:	480d      	ldr	r0, [pc, #52]	; (40313c <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  403106:	687b      	ldr	r3, [r7, #4]
  403108:	b2da      	uxtb	r2, r3
  40310a:	68bb      	ldr	r3, [r7, #8]
  40310c:	021b      	lsls	r3, r3, #8
  40310e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  403112:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  403114:	68fb      	ldr	r3, [r7, #12]
  403116:	0419      	lsls	r1, r3, #16
  403118:	4b09      	ldr	r3, [pc, #36]	; (403140 <pmc_enable_pllbck+0x4c>)
  40311a:	400b      	ands	r3, r1
  40311c:	4313      	orrs	r3, r2

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  40311e:	62c3      	str	r3, [r0, #44]	; 0x2c
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
			| CKGR_PLLBR_MULB(mulb);
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  403120:	bf00      	nop
  403122:	4b06      	ldr	r3, [pc, #24]	; (40313c <pmc_enable_pllbck+0x48>)
  403124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403126:	f003 0304 	and.w	r3, r3, #4
  40312a:	2b00      	cmp	r3, #0
  40312c:	d0f9      	beq.n	403122 <pmc_enable_pllbck+0x2e>
}
  40312e:	bf00      	nop
  403130:	3710      	adds	r7, #16
  403132:	46bd      	mov	sp, r7
  403134:	bd80      	pop	{r7, pc}
  403136:	bf00      	nop
  403138:	00403145 	.word	0x00403145
  40313c:	400e0400 	.word	0x400e0400
  403140:	07ff0000 	.word	0x07ff0000

00403144 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  403144:	b480      	push	{r7}
  403146:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  403148:	4b03      	ldr	r3, [pc, #12]	; (403158 <pmc_disable_pllbck+0x14>)
  40314a:	2200      	movs	r2, #0
  40314c:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40314e:	bf00      	nop
  403150:	46bd      	mov	sp, r7
  403152:	bc80      	pop	{r7}
  403154:	4770      	bx	lr
  403156:	bf00      	nop
  403158:	400e0400 	.word	0x400e0400

0040315c <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  40315c:	b480      	push	{r7}
  40315e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  403160:	4b03      	ldr	r3, [pc, #12]	; (403170 <pmc_is_locked_pllbck+0x14>)
  403162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403164:	f003 0304 	and.w	r3, r3, #4
}
  403168:	4618      	mov	r0, r3
  40316a:	46bd      	mov	sp, r7
  40316c:	bc80      	pop	{r7}
  40316e:	4770      	bx	lr
  403170:	400e0400 	.word	0x400e0400

00403174 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  403174:	b480      	push	{r7}
  403176:	b083      	sub	sp, #12
  403178:	af00      	add	r7, sp, #0
  40317a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40317c:	687b      	ldr	r3, [r7, #4]
  40317e:	2b22      	cmp	r3, #34	; 0x22
  403180:	d901      	bls.n	403186 <pmc_enable_periph_clk+0x12>
		return 1;
  403182:	2301      	movs	r3, #1
  403184:	e02f      	b.n	4031e6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  403186:	687b      	ldr	r3, [r7, #4]
  403188:	2b1f      	cmp	r3, #31
  40318a:	d813      	bhi.n	4031b4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40318c:	4b18      	ldr	r3, [pc, #96]	; (4031f0 <pmc_enable_periph_clk+0x7c>)
  40318e:	699a      	ldr	r2, [r3, #24]
  403190:	2101      	movs	r1, #1
  403192:	687b      	ldr	r3, [r7, #4]
  403194:	fa01 f303 	lsl.w	r3, r1, r3
  403198:	401a      	ands	r2, r3
  40319a:	2101      	movs	r1, #1
  40319c:	687b      	ldr	r3, [r7, #4]
  40319e:	fa01 f303 	lsl.w	r3, r1, r3
  4031a2:	429a      	cmp	r2, r3
  4031a4:	d01e      	beq.n	4031e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4031a6:	4a12      	ldr	r2, [pc, #72]	; (4031f0 <pmc_enable_periph_clk+0x7c>)
  4031a8:	2101      	movs	r1, #1
  4031aa:	687b      	ldr	r3, [r7, #4]
  4031ac:	fa01 f303 	lsl.w	r3, r1, r3
  4031b0:	6113      	str	r3, [r2, #16]
  4031b2:	e017      	b.n	4031e4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4031b4:	687b      	ldr	r3, [r7, #4]
  4031b6:	3b20      	subs	r3, #32
  4031b8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4031ba:	4b0d      	ldr	r3, [pc, #52]	; (4031f0 <pmc_enable_periph_clk+0x7c>)
  4031bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4031c0:	2101      	movs	r1, #1
  4031c2:	687b      	ldr	r3, [r7, #4]
  4031c4:	fa01 f303 	lsl.w	r3, r1, r3
  4031c8:	401a      	ands	r2, r3
  4031ca:	2101      	movs	r1, #1
  4031cc:	687b      	ldr	r3, [r7, #4]
  4031ce:	fa01 f303 	lsl.w	r3, r1, r3
  4031d2:	429a      	cmp	r2, r3
  4031d4:	d006      	beq.n	4031e4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4031d6:	4a06      	ldr	r2, [pc, #24]	; (4031f0 <pmc_enable_periph_clk+0x7c>)
  4031d8:	2101      	movs	r1, #1
  4031da:	687b      	ldr	r3, [r7, #4]
  4031dc:	fa01 f303 	lsl.w	r3, r1, r3
  4031e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4031e4:	2300      	movs	r3, #0
}
  4031e6:	4618      	mov	r0, r3
  4031e8:	370c      	adds	r7, #12
  4031ea:	46bd      	mov	sp, r7
  4031ec:	bc80      	pop	{r7}
  4031ee:	4770      	bx	lr
  4031f0:	400e0400 	.word	0x400e0400

004031f4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4031f4:	b580      	push	{r7, lr}
  4031f6:	b082      	sub	sp, #8
  4031f8:	af00      	add	r7, sp, #0
  4031fa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4031fc:	6878      	ldr	r0, [r7, #4]
  4031fe:	4b03      	ldr	r3, [pc, #12]	; (40320c <sysclk_enable_peripheral_clock+0x18>)
  403200:	4798      	blx	r3
}
  403202:	bf00      	nop
  403204:	3708      	adds	r7, #8
  403206:	46bd      	mov	sp, r7
  403208:	bd80      	pop	{r7, pc}
  40320a:	bf00      	nop
  40320c:	00403175 	.word	0x00403175

00403210 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  403210:	b580      	push	{r7, lr}
  403212:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  403214:	200b      	movs	r0, #11
  403216:	4b03      	ldr	r3, [pc, #12]	; (403224 <ioport_init+0x14>)
  403218:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40321a:	200c      	movs	r0, #12
  40321c:	4b01      	ldr	r3, [pc, #4]	; (403224 <ioport_init+0x14>)
  40321e:	4798      	blx	r3
	arch_ioport_init();
}
  403220:	bf00      	nop
  403222:	bd80      	pop	{r7, pc}
  403224:	004031f5 	.word	0x004031f5

00403228 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  403228:	b480      	push	{r7}
  40322a:	b08d      	sub	sp, #52	; 0x34
  40322c:	af00      	add	r7, sp, #0
  40322e:	6078      	str	r0, [r7, #4]
  403230:	6039      	str	r1, [r7, #0]
  403232:	687b      	ldr	r3, [r7, #4]
  403234:	62fb      	str	r3, [r7, #44]	; 0x2c
  403236:	683b      	ldr	r3, [r7, #0]
  403238:	62bb      	str	r3, [r7, #40]	; 0x28
  40323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40323c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403240:	095a      	lsrs	r2, r3, #5
  403242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403244:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403246:	6a3b      	ldr	r3, [r7, #32]
  403248:	f003 031f 	and.w	r3, r3, #31
  40324c:	2101      	movs	r1, #1
  40324e:	fa01 f303 	lsl.w	r3, r1, r3
  403252:	61fa      	str	r2, [r7, #28]
  403254:	61bb      	str	r3, [r7, #24]
  403256:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403258:	617b      	str	r3, [r7, #20]
  40325a:	69fb      	ldr	r3, [r7, #28]
  40325c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40325e:	693b      	ldr	r3, [r7, #16]
  403260:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403264:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403268:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40326a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  40326c:	697b      	ldr	r3, [r7, #20]
  40326e:	f003 0308 	and.w	r3, r3, #8
  403272:	2b00      	cmp	r3, #0
  403274:	d003      	beq.n	40327e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  403276:	68fb      	ldr	r3, [r7, #12]
  403278:	69ba      	ldr	r2, [r7, #24]
  40327a:	665a      	str	r2, [r3, #100]	; 0x64
  40327c:	e002      	b.n	403284 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40327e:	68fb      	ldr	r3, [r7, #12]
  403280:	69ba      	ldr	r2, [r7, #24]
  403282:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  403284:	697b      	ldr	r3, [r7, #20]
  403286:	f003 0310 	and.w	r3, r3, #16
  40328a:	2b00      	cmp	r3, #0
  40328c:	d004      	beq.n	403298 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40328e:	68fb      	ldr	r3, [r7, #12]
  403290:	69ba      	ldr	r2, [r7, #24]
  403292:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403296:	e003      	b.n	4032a0 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  403298:	68fb      	ldr	r3, [r7, #12]
  40329a:	69ba      	ldr	r2, [r7, #24]
  40329c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4032a0:	697b      	ldr	r3, [r7, #20]
  4032a2:	f003 0320 	and.w	r3, r3, #32
  4032a6:	2b00      	cmp	r3, #0
  4032a8:	d003      	beq.n	4032b2 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4032aa:	68fb      	ldr	r3, [r7, #12]
  4032ac:	69ba      	ldr	r2, [r7, #24]
  4032ae:	651a      	str	r2, [r3, #80]	; 0x50
  4032b0:	e002      	b.n	4032b8 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  4032b2:	68fb      	ldr	r3, [r7, #12]
  4032b4:	69ba      	ldr	r2, [r7, #24]
  4032b6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4032b8:	697b      	ldr	r3, [r7, #20]
  4032ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4032be:	2b00      	cmp	r3, #0
  4032c0:	d003      	beq.n	4032ca <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4032c2:	68fb      	ldr	r3, [r7, #12]
  4032c4:	69ba      	ldr	r2, [r7, #24]
  4032c6:	621a      	str	r2, [r3, #32]
  4032c8:	e002      	b.n	4032d0 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  4032ca:	68fb      	ldr	r3, [r7, #12]
  4032cc:	69ba      	ldr	r2, [r7, #24]
  4032ce:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4032d0:	697b      	ldr	r3, [r7, #20]
  4032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4032d6:	2b00      	cmp	r3, #0
  4032d8:	d004      	beq.n	4032e4 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4032da:	68fb      	ldr	r3, [r7, #12]
  4032dc:	69ba      	ldr	r2, [r7, #24]
  4032de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4032e2:	e003      	b.n	4032ec <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4032e4:	68fb      	ldr	r3, [r7, #12]
  4032e6:	69ba      	ldr	r2, [r7, #24]
  4032e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4032ec:	697b      	ldr	r3, [r7, #20]
  4032ee:	f003 0301 	and.w	r3, r3, #1
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d006      	beq.n	403304 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4032f6:	68fb      	ldr	r3, [r7, #12]
  4032f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4032fa:	69bb      	ldr	r3, [r7, #24]
  4032fc:	431a      	orrs	r2, r3
  4032fe:	68fb      	ldr	r3, [r7, #12]
  403300:	671a      	str	r2, [r3, #112]	; 0x70
  403302:	e006      	b.n	403312 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403304:	68fb      	ldr	r3, [r7, #12]
  403306:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403308:	69bb      	ldr	r3, [r7, #24]
  40330a:	43db      	mvns	r3, r3
  40330c:	401a      	ands	r2, r3
  40330e:	68fb      	ldr	r3, [r7, #12]
  403310:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  403312:	697b      	ldr	r3, [r7, #20]
  403314:	f003 0302 	and.w	r3, r3, #2
  403318:	2b00      	cmp	r3, #0
  40331a:	d006      	beq.n	40332a <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40331c:	68fb      	ldr	r3, [r7, #12]
  40331e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403320:	69bb      	ldr	r3, [r7, #24]
  403322:	431a      	orrs	r2, r3
  403324:	68fb      	ldr	r3, [r7, #12]
  403326:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  403328:	e006      	b.n	403338 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40332a:	68fb      	ldr	r3, [r7, #12]
  40332c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40332e:	69bb      	ldr	r3, [r7, #24]
  403330:	43db      	mvns	r3, r3
  403332:	401a      	ands	r2, r3
  403334:	68fb      	ldr	r3, [r7, #12]
  403336:	675a      	str	r2, [r3, #116]	; 0x74
  403338:	bf00      	nop
  40333a:	3734      	adds	r7, #52	; 0x34
  40333c:	46bd      	mov	sp, r7
  40333e:	bc80      	pop	{r7}
  403340:	4770      	bx	lr
  403342:	bf00      	nop

00403344 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403344:	b480      	push	{r7}
  403346:	b08d      	sub	sp, #52	; 0x34
  403348:	af00      	add	r7, sp, #0
  40334a:	6078      	str	r0, [r7, #4]
  40334c:	460b      	mov	r3, r1
  40334e:	70fb      	strb	r3, [r7, #3]
  403350:	687b      	ldr	r3, [r7, #4]
  403352:	62fb      	str	r3, [r7, #44]	; 0x2c
  403354:	78fb      	ldrb	r3, [r7, #3]
  403356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40335c:	627b      	str	r3, [r7, #36]	; 0x24
  40335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403360:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403362:	6a3b      	ldr	r3, [r7, #32]
  403364:	095b      	lsrs	r3, r3, #5
  403366:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403368:	69fb      	ldr	r3, [r7, #28]
  40336a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40336e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403372:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403374:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40337a:	2b01      	cmp	r3, #1
  40337c:	d109      	bne.n	403392 <ioport_set_pin_dir+0x4e>
  40337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403380:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403382:	697b      	ldr	r3, [r7, #20]
  403384:	f003 031f 	and.w	r3, r3, #31
  403388:	2201      	movs	r2, #1
  40338a:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40338c:	69bb      	ldr	r3, [r7, #24]
  40338e:	611a      	str	r2, [r3, #16]
  403390:	e00c      	b.n	4033ac <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  403392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403396:	2b00      	cmp	r3, #0
  403398:	d108      	bne.n	4033ac <ioport_set_pin_dir+0x68>
  40339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40339c:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40339e:	693b      	ldr	r3, [r7, #16]
  4033a0:	f003 031f 	and.w	r3, r3, #31
  4033a4:	2201      	movs	r2, #1
  4033a6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4033a8:	69bb      	ldr	r3, [r7, #24]
  4033aa:	615a      	str	r2, [r3, #20]
  4033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4033ae:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4033b0:	68fb      	ldr	r3, [r7, #12]
  4033b2:	f003 031f 	and.w	r3, r3, #31
  4033b6:	2201      	movs	r2, #1
  4033b8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4033ba:	69bb      	ldr	r3, [r7, #24]
  4033bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4033c0:	bf00      	nop
  4033c2:	3734      	adds	r7, #52	; 0x34
  4033c4:	46bd      	mov	sp, r7
  4033c6:	bc80      	pop	{r7}
  4033c8:	4770      	bx	lr
  4033ca:	bf00      	nop

004033cc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4033cc:	b480      	push	{r7}
  4033ce:	b08b      	sub	sp, #44	; 0x2c
  4033d0:	af00      	add	r7, sp, #0
  4033d2:	6078      	str	r0, [r7, #4]
  4033d4:	460b      	mov	r3, r1
  4033d6:	70fb      	strb	r3, [r7, #3]
  4033d8:	687b      	ldr	r3, [r7, #4]
  4033da:	627b      	str	r3, [r7, #36]	; 0x24
  4033dc:	78fb      	ldrb	r3, [r7, #3]
  4033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4033e4:	61fb      	str	r3, [r7, #28]
  4033e6:	69fb      	ldr	r3, [r7, #28]
  4033e8:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4033ea:	69bb      	ldr	r3, [r7, #24]
  4033ec:	095b      	lsrs	r3, r3, #5
  4033ee:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4033f0:	697b      	ldr	r3, [r7, #20]
  4033f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4033f6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4033fa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4033fc:	613b      	str	r3, [r7, #16]

	if (level) {
  4033fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403402:	2b00      	cmp	r3, #0
  403404:	d009      	beq.n	40341a <ioport_set_pin_level+0x4e>
  403406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403408:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40340a:	68fb      	ldr	r3, [r7, #12]
  40340c:	f003 031f 	and.w	r3, r3, #31
  403410:	2201      	movs	r2, #1
  403412:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403414:	693b      	ldr	r3, [r7, #16]
  403416:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  403418:	e008      	b.n	40342c <ioport_set_pin_level+0x60>
  40341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40341c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40341e:	68bb      	ldr	r3, [r7, #8]
  403420:	f003 031f 	and.w	r3, r3, #31
  403424:	2201      	movs	r2, #1
  403426:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403428:	693b      	ldr	r3, [r7, #16]
  40342a:	635a      	str	r2, [r3, #52]	; 0x34
  40342c:	bf00      	nop
  40342e:	372c      	adds	r7, #44	; 0x2c
  403430:	46bd      	mov	sp, r7
  403432:	bc80      	pop	{r7}
  403434:	4770      	bx	lr
  403436:	bf00      	nop

00403438 <board_init>:
#include <conf_board.h>
#include "camera.h"
#include "microphone.h"

void board_init(void)
{
  403438:	b580      	push	{r7, lr}
  40343a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  40343c:	484b      	ldr	r0, [pc, #300]	; (40356c <board_init+0x134>)
  40343e:	4b4c      	ldr	r3, [pc, #304]	; (403570 <board_init+0x138>)
  403440:	4798      	blx	r3
	
	ioport_init();
  403442:	4b4c      	ldr	r3, [pc, #304]	; (403574 <board_init+0x13c>)
  403444:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  403446:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40344a:	2009      	movs	r0, #9
  40344c:	4b4a      	ldr	r3, [pc, #296]	; (403578 <board_init+0x140>)
  40344e:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  403450:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403454:	2009      	movs	r0, #9
  403456:	4b48      	ldr	r3, [pc, #288]	; (403578 <board_init+0x140>)
  403458:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  40345a:	2101      	movs	r1, #1
  40345c:	2009      	movs	r0, #9
  40345e:	4b47      	ldr	r3, [pc, #284]	; (40357c <board_init+0x144>)
  403460:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  403462:	2100      	movs	r1, #0
  403464:	2009      	movs	r0, #9
  403466:	4b46      	ldr	r3, [pc, #280]	; (403580 <board_init+0x148>)
  403468:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  40346a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40346e:	2007      	movs	r0, #7
  403470:	4b41      	ldr	r3, [pc, #260]	; (403578 <board_init+0x140>)
  403472:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  403474:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  403478:	2007      	movs	r0, #7
  40347a:	4b3f      	ldr	r3, [pc, #252]	; (403578 <board_init+0x140>)
  40347c:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  40347e:	2101      	movs	r1, #1
  403480:	2007      	movs	r0, #7
  403482:	4b3e      	ldr	r3, [pc, #248]	; (40357c <board_init+0x144>)
  403484:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  403486:	2100      	movs	r1, #0
  403488:	2007      	movs	r0, #7
  40348a:	4b3d      	ldr	r3, [pc, #244]	; (403580 <board_init+0x148>)
  40348c:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  40348e:	493d      	ldr	r1, [pc, #244]	; (403584 <board_init+0x14c>)
  403490:	2021      	movs	r0, #33	; 0x21
  403492:	4b39      	ldr	r3, [pc, #228]	; (403578 <board_init+0x140>)
  403494:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  403496:	2100      	movs	r1, #0
  403498:	2021      	movs	r0, #33	; 0x21
  40349a:	4b38      	ldr	r3, [pc, #224]	; (40357c <board_init+0x144>)
  40349c:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  40349e:	2108      	movs	r1, #8
  4034a0:	2021      	movs	r0, #33	; 0x21
  4034a2:	4b39      	ldr	r3, [pc, #228]	; (403588 <board_init+0x150>)
  4034a4:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4034a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4034aa:	2005      	movs	r0, #5
  4034ac:	4b32      	ldr	r3, [pc, #200]	; (403578 <board_init+0x140>)
  4034ae:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  4034b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4034b4:	2006      	movs	r0, #6
  4034b6:	4b30      	ldr	r3, [pc, #192]	; (403578 <board_init+0x140>)
  4034b8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  4034ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4034be:	2008      	movs	r0, #8
  4034c0:	4b2d      	ldr	r3, [pc, #180]	; (403578 <board_init+0x140>)
  4034c2:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  4034c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4034c8:	2011      	movs	r0, #17
  4034ca:	4b2b      	ldr	r3, [pc, #172]	; (403578 <board_init+0x140>)
  4034cc:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4034ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4034d2:	2003      	movs	r0, #3
  4034d4:	4b28      	ldr	r3, [pc, #160]	; (403578 <board_init+0x140>)
  4034d6:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4034d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4034dc:	2004      	movs	r0, #4
  4034de:	4b26      	ldr	r3, [pc, #152]	; (403578 <board_init+0x140>)
  4034e0:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  4034e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4034e6:	200a      	movs	r0, #10
  4034e8:	4b23      	ldr	r3, [pc, #140]	; (403578 <board_init+0x140>)
  4034ea:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  4034ec:	2101      	movs	r1, #1
  4034ee:	200a      	movs	r0, #10
  4034f0:	4b22      	ldr	r3, [pc, #136]	; (40357c <board_init+0x144>)
  4034f2:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  4034f4:	2100      	movs	r1, #0
  4034f6:	200a      	movs	r0, #10
  4034f8:	4b21      	ldr	r3, [pc, #132]	; (403580 <board_init+0x148>)
  4034fa:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  4034fc:	2171      	movs	r1, #113	; 0x71
  4034fe:	2010      	movs	r0, #16
  403500:	4b1d      	ldr	r3, [pc, #116]	; (403578 <board_init+0x140>)
  403502:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  403504:	2171      	movs	r1, #113	; 0x71
  403506:	200f      	movs	r0, #15
  403508:	4b1b      	ldr	r3, [pc, #108]	; (403578 <board_init+0x140>)
  40350a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  40350c:	491f      	ldr	r1, [pc, #124]	; (40358c <board_init+0x154>)
  40350e:	2018      	movs	r0, #24
  403510:	4b19      	ldr	r3, [pc, #100]	; (403578 <board_init+0x140>)
  403512:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  403514:	491d      	ldr	r1, [pc, #116]	; (40358c <board_init+0x154>)
  403516:	2019      	movs	r0, #25
  403518:	4b17      	ldr	r3, [pc, #92]	; (403578 <board_init+0x140>)
  40351a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  40351c:	491b      	ldr	r1, [pc, #108]	; (40358c <board_init+0x154>)
  40351e:	201a      	movs	r0, #26
  403520:	4b15      	ldr	r3, [pc, #84]	; (403578 <board_init+0x140>)
  403522:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  403524:	4919      	ldr	r1, [pc, #100]	; (40358c <board_init+0x154>)
  403526:	201b      	movs	r0, #27
  403528:	4b13      	ldr	r3, [pc, #76]	; (403578 <board_init+0x140>)
  40352a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  40352c:	4917      	ldr	r1, [pc, #92]	; (40358c <board_init+0x154>)
  40352e:	201c      	movs	r0, #28
  403530:	4b11      	ldr	r3, [pc, #68]	; (403578 <board_init+0x140>)
  403532:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  403534:	4915      	ldr	r1, [pc, #84]	; (40358c <board_init+0x154>)
  403536:	201d      	movs	r0, #29
  403538:	4b0f      	ldr	r3, [pc, #60]	; (403578 <board_init+0x140>)
  40353a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  40353c:	4913      	ldr	r1, [pc, #76]	; (40358c <board_init+0x154>)
  40353e:	201e      	movs	r0, #30
  403540:	4b0d      	ldr	r3, [pc, #52]	; (403578 <board_init+0x140>)
  403542:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  403544:	4911      	ldr	r1, [pc, #68]	; (40358c <board_init+0x154>)
  403546:	201f      	movs	r0, #31
  403548:	4b0b      	ldr	r3, [pc, #44]	; (403578 <board_init+0x140>)
  40354a:	4798      	blx	r3
	
	// microphone initialization
	gpio_configure_pin(RD_GPIO, RD_FLAGS);
  40354c:	2171      	movs	r1, #113	; 0x71
  40354e:	2012      	movs	r0, #18
  403550:	4b09      	ldr	r3, [pc, #36]	; (403578 <board_init+0x140>)
  403552:	4798      	blx	r3
	gpio_configure_pin(RF_GPIO, RF_FLAGS);
  403554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403558:	2013      	movs	r0, #19
  40355a:	4b07      	ldr	r3, [pc, #28]	; (403578 <board_init+0x140>)
  40355c:	4798      	blx	r3
	gpio_configure_pin(RK_GPIO, RK_FLAGS);
  40355e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403562:	2014      	movs	r0, #20
  403564:	4b04      	ldr	r3, [pc, #16]	; (403578 <board_init+0x140>)
  403566:	4798      	blx	r3
}
  403568:	bf00      	nop
  40356a:	bd80      	pop	{r7, pc}
  40356c:	400e1450 	.word	0x400e1450
  403570:	00400545 	.word	0x00400545
  403574:	00403211 	.word	0x00403211
  403578:	00402cad 	.word	0x00402cad
  40357c:	00403345 	.word	0x00403345
  403580:	004033cd 	.word	0x004033cd
  403584:	28000079 	.word	0x28000079
  403588:	00403229 	.word	0x00403229
  40358c:	28000001 	.word	0x28000001

00403590 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403590:	b580      	push	{r7, lr}
  403592:	b084      	sub	sp, #16
  403594:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  403596:	4b27      	ldr	r3, [pc, #156]	; (403634 <Reset_Handler+0xa4>)
  403598:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40359a:	4b27      	ldr	r3, [pc, #156]	; (403638 <Reset_Handler+0xa8>)
  40359c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  40359e:	68fa      	ldr	r2, [r7, #12]
  4035a0:	68bb      	ldr	r3, [r7, #8]
  4035a2:	429a      	cmp	r2, r3
  4035a4:	d90d      	bls.n	4035c2 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4035a6:	e007      	b.n	4035b8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4035a8:	68bb      	ldr	r3, [r7, #8]
  4035aa:	1d1a      	adds	r2, r3, #4
  4035ac:	60ba      	str	r2, [r7, #8]
  4035ae:	68fa      	ldr	r2, [r7, #12]
  4035b0:	1d11      	adds	r1, r2, #4
  4035b2:	60f9      	str	r1, [r7, #12]
  4035b4:	6812      	ldr	r2, [r2, #0]
  4035b6:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4035b8:	68bb      	ldr	r3, [r7, #8]
  4035ba:	4a20      	ldr	r2, [pc, #128]	; (40363c <Reset_Handler+0xac>)
  4035bc:	4293      	cmp	r3, r2
  4035be:	d3f3      	bcc.n	4035a8 <Reset_Handler+0x18>
  4035c0:	e020      	b.n	403604 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4035c2:	68fa      	ldr	r2, [r7, #12]
  4035c4:	68bb      	ldr	r3, [r7, #8]
  4035c6:	429a      	cmp	r2, r3
  4035c8:	d21c      	bcs.n	403604 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4035ca:	4a1c      	ldr	r2, [pc, #112]	; (40363c <Reset_Handler+0xac>)
  4035cc:	4b1a      	ldr	r3, [pc, #104]	; (403638 <Reset_Handler+0xa8>)
  4035ce:	1ad3      	subs	r3, r2, r3
  4035d0:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4035d2:	68fa      	ldr	r2, [r7, #12]
  4035d4:	687b      	ldr	r3, [r7, #4]
  4035d6:	4413      	add	r3, r2
  4035d8:	3b04      	subs	r3, #4
  4035da:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4035dc:	68ba      	ldr	r2, [r7, #8]
  4035de:	687b      	ldr	r3, [r7, #4]
  4035e0:	4413      	add	r3, r2
  4035e2:	3b04      	subs	r3, #4
  4035e4:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4035e6:	e00a      	b.n	4035fe <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  4035e8:	68bb      	ldr	r3, [r7, #8]
  4035ea:	1f1a      	subs	r2, r3, #4
  4035ec:	60ba      	str	r2, [r7, #8]
  4035ee:	68fa      	ldr	r2, [r7, #12]
  4035f0:	1f11      	subs	r1, r2, #4
  4035f2:	60f9      	str	r1, [r7, #12]
  4035f4:	6812      	ldr	r2, [r2, #0]
  4035f6:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4035f8:	687b      	ldr	r3, [r7, #4]
  4035fa:	3b04      	subs	r3, #4
  4035fc:	607b      	str	r3, [r7, #4]
  4035fe:	687b      	ldr	r3, [r7, #4]
  403600:	2b00      	cmp	r3, #0
  403602:	d1f1      	bne.n	4035e8 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403604:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403606:	4b0e      	ldr	r3, [pc, #56]	; (403640 <Reset_Handler+0xb0>)
  403608:	60bb      	str	r3, [r7, #8]
  40360a:	e004      	b.n	403616 <Reset_Handler+0x86>
		*pDest++ = 0;
  40360c:	68bb      	ldr	r3, [r7, #8]
  40360e:	1d1a      	adds	r2, r3, #4
  403610:	60ba      	str	r2, [r7, #8]
  403612:	2200      	movs	r2, #0
  403614:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403616:	68bb      	ldr	r3, [r7, #8]
  403618:	4a0a      	ldr	r2, [pc, #40]	; (403644 <Reset_Handler+0xb4>)
  40361a:	4293      	cmp	r3, r2
  40361c:	d3f6      	bcc.n	40360c <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40361e:	4b0a      	ldr	r3, [pc, #40]	; (403648 <Reset_Handler+0xb8>)
  403620:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  403622:	4a0a      	ldr	r2, [pc, #40]	; (40364c <Reset_Handler+0xbc>)
  403624:	68fb      	ldr	r3, [r7, #12]
  403626:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  403628:	4b09      	ldr	r3, [pc, #36]	; (403650 <Reset_Handler+0xc0>)
  40362a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40362c:	4b09      	ldr	r3, [pc, #36]	; (403654 <Reset_Handler+0xc4>)
  40362e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  403630:	e7fe      	b.n	403630 <Reset_Handler+0xa0>
  403632:	bf00      	nop
  403634:	00409b58 	.word	0x00409b58
  403638:	20000000 	.word	0x20000000
  40363c:	20000884 	.word	0x20000884
  403640:	20000884 	.word	0x20000884
  403644:	2000d69c 	.word	0x2000d69c
  403648:	00400000 	.word	0x00400000
  40364c:	e000ed00 	.word	0xe000ed00
  403650:	00403cb9 	.word	0x00403cb9
  403654:	004038e9 	.word	0x004038e9

00403658 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403658:	b480      	push	{r7}
  40365a:	af00      	add	r7, sp, #0
	while (1) {
	}
  40365c:	e7fe      	b.n	40365c <Dummy_Handler+0x4>
  40365e:	bf00      	nop

00403660 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  403660:	b480      	push	{r7}
  403662:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403664:	4b5d      	ldr	r3, [pc, #372]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  403666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403668:	f003 0303 	and.w	r3, r3, #3
  40366c:	2b03      	cmp	r3, #3
  40366e:	f200 8096 	bhi.w	40379e <SystemCoreClockUpdate+0x13e>
  403672:	a201      	add	r2, pc, #4	; (adr r2, 403678 <SystemCoreClockUpdate+0x18>)
  403674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403678:	00403689 	.word	0x00403689
  40367c:	004036a9 	.word	0x004036a9
  403680:	004036f3 	.word	0x004036f3
  403684:	004036f3 	.word	0x004036f3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403688:	4b55      	ldr	r3, [pc, #340]	; (4037e0 <SystemCoreClockUpdate+0x180>)
  40368a:	695b      	ldr	r3, [r3, #20]
  40368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403690:	2b00      	cmp	r3, #0
  403692:	d004      	beq.n	40369e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403694:	4b53      	ldr	r3, [pc, #332]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403696:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40369a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  40369c:	e080      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40369e:	4b51      	ldr	r3, [pc, #324]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036a0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4036a4:	601a      	str	r2, [r3, #0]
			}
		break;
  4036a6:	e07b      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4036a8:	4b4c      	ldr	r3, [pc, #304]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  4036aa:	6a1b      	ldr	r3, [r3, #32]
  4036ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4036b0:	2b00      	cmp	r3, #0
  4036b2:	d003      	beq.n	4036bc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4036b4:	4b4b      	ldr	r3, [pc, #300]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036b6:	4a4c      	ldr	r2, [pc, #304]	; (4037e8 <SystemCoreClockUpdate+0x188>)
  4036b8:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4036ba:	e071      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4036bc:	4b49      	ldr	r3, [pc, #292]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036be:	4a4b      	ldr	r2, [pc, #300]	; (4037ec <SystemCoreClockUpdate+0x18c>)
  4036c0:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4036c2:	4b46      	ldr	r3, [pc, #280]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  4036c4:	6a1b      	ldr	r3, [r3, #32]
  4036c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4036ca:	2b10      	cmp	r3, #16
  4036cc:	d008      	beq.n	4036e0 <SystemCoreClockUpdate+0x80>
  4036ce:	2b20      	cmp	r3, #32
  4036d0:	d00a      	beq.n	4036e8 <SystemCoreClockUpdate+0x88>
  4036d2:	2b00      	cmp	r3, #0
  4036d4:	d000      	beq.n	4036d8 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4036d6:	e00b      	b.n	4036f0 <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4036d8:	4b42      	ldr	r3, [pc, #264]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036da:	4a44      	ldr	r2, [pc, #272]	; (4037ec <SystemCoreClockUpdate+0x18c>)
  4036dc:	601a      	str	r2, [r3, #0]
			break;
  4036de:	e007      	b.n	4036f0 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4036e0:	4b40      	ldr	r3, [pc, #256]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036e2:	4a43      	ldr	r2, [pc, #268]	; (4037f0 <SystemCoreClockUpdate+0x190>)
  4036e4:	601a      	str	r2, [r3, #0]
			break;
  4036e6:	e003      	b.n	4036f0 <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4036e8:	4b3e      	ldr	r3, [pc, #248]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4036ea:	4a3f      	ldr	r2, [pc, #252]	; (4037e8 <SystemCoreClockUpdate+0x188>)
  4036ec:	601a      	str	r2, [r3, #0]
			break;
  4036ee:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4036f0:	e056      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4036f2:	4b3a      	ldr	r3, [pc, #232]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  4036f4:	6a1b      	ldr	r3, [r3, #32]
  4036f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4036fa:	2b00      	cmp	r3, #0
  4036fc:	d003      	beq.n	403706 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4036fe:	4b39      	ldr	r3, [pc, #228]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403700:	4a39      	ldr	r2, [pc, #228]	; (4037e8 <SystemCoreClockUpdate+0x188>)
  403702:	601a      	str	r2, [r3, #0]
  403704:	e019      	b.n	40373a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403706:	4b37      	ldr	r3, [pc, #220]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403708:	4a38      	ldr	r2, [pc, #224]	; (4037ec <SystemCoreClockUpdate+0x18c>)
  40370a:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40370c:	4b33      	ldr	r3, [pc, #204]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  40370e:	6a1b      	ldr	r3, [r3, #32]
  403710:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403714:	2b10      	cmp	r3, #16
  403716:	d008      	beq.n	40372a <SystemCoreClockUpdate+0xca>
  403718:	2b20      	cmp	r3, #32
  40371a:	d00a      	beq.n	403732 <SystemCoreClockUpdate+0xd2>
  40371c:	2b00      	cmp	r3, #0
  40371e:	d000      	beq.n	403722 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  403720:	e00b      	b.n	40373a <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403722:	4b30      	ldr	r3, [pc, #192]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403724:	4a31      	ldr	r2, [pc, #196]	; (4037ec <SystemCoreClockUpdate+0x18c>)
  403726:	601a      	str	r2, [r3, #0]
					break;
  403728:	e007      	b.n	40373a <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40372a:	4b2e      	ldr	r3, [pc, #184]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  40372c:	4a30      	ldr	r2, [pc, #192]	; (4037f0 <SystemCoreClockUpdate+0x190>)
  40372e:	601a      	str	r2, [r3, #0]
					break;
  403730:	e003      	b.n	40373a <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403732:	4b2c      	ldr	r3, [pc, #176]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403734:	4a2c      	ldr	r2, [pc, #176]	; (4037e8 <SystemCoreClockUpdate+0x188>)
  403736:	601a      	str	r2, [r3, #0]
					break;
  403738:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40373a:	4b28      	ldr	r3, [pc, #160]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  40373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40373e:	f003 0303 	and.w	r3, r3, #3
  403742:	2b02      	cmp	r3, #2
  403744:	d115      	bne.n	403772 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403746:	4b25      	ldr	r3, [pc, #148]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  403748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40374a:	4b2a      	ldr	r3, [pc, #168]	; (4037f4 <SystemCoreClockUpdate+0x194>)
  40374c:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40374e:	0c1b      	lsrs	r3, r3, #16
  403750:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403752:	4a24      	ldr	r2, [pc, #144]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403754:	6812      	ldr	r2, [r2, #0]
  403756:	fb02 f303 	mul.w	r3, r2, r3
  40375a:	4a22      	ldr	r2, [pc, #136]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  40375c:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40375e:	4b1f      	ldr	r3, [pc, #124]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  403760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  403762:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403764:	4a1f      	ldr	r2, [pc, #124]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403766:	6812      	ldr	r2, [r2, #0]
  403768:	fbb2 f3f3 	udiv	r3, r2, r3
  40376c:	4a1d      	ldr	r2, [pc, #116]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  40376e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  403770:	e016      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403772:	4b1a      	ldr	r3, [pc, #104]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  403774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  403776:	4b1f      	ldr	r3, [pc, #124]	; (4037f4 <SystemCoreClockUpdate+0x194>)
  403778:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40377a:	0c1b      	lsrs	r3, r3, #16
  40377c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40377e:	4a19      	ldr	r2, [pc, #100]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403780:	6812      	ldr	r2, [r2, #0]
  403782:	fb02 f303 	mul.w	r3, r2, r3
  403786:	4a17      	ldr	r2, [pc, #92]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403788:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40378a:	4b14      	ldr	r3, [pc, #80]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  40378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40378e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403790:	4a14      	ldr	r2, [pc, #80]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  403792:	6812      	ldr	r2, [r2, #0]
  403794:	fbb2 f3f3 	udiv	r3, r2, r3
  403798:	4a12      	ldr	r2, [pc, #72]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  40379a:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40379c:	e000      	b.n	4037a0 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40379e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4037a0:	4b0e      	ldr	r3, [pc, #56]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  4037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037a8:	2b70      	cmp	r3, #112	; 0x70
  4037aa:	d108      	bne.n	4037be <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4037ac:	4b0d      	ldr	r3, [pc, #52]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4037ae:	681b      	ldr	r3, [r3, #0]
  4037b0:	4a11      	ldr	r2, [pc, #68]	; (4037f8 <SystemCoreClockUpdate+0x198>)
  4037b2:	fba2 2303 	umull	r2, r3, r2, r3
  4037b6:	085b      	lsrs	r3, r3, #1
  4037b8:	4a0a      	ldr	r2, [pc, #40]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4037ba:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4037bc:	e00a      	b.n	4037d4 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4037be:	4b07      	ldr	r3, [pc, #28]	; (4037dc <SystemCoreClockUpdate+0x17c>)
  4037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037c6:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4037c8:	4a06      	ldr	r2, [pc, #24]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4037ca:	6812      	ldr	r2, [r2, #0]
  4037cc:	fa22 f303 	lsr.w	r3, r2, r3
  4037d0:	4a04      	ldr	r2, [pc, #16]	; (4037e4 <SystemCoreClockUpdate+0x184>)
  4037d2:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4037d4:	bf00      	nop
  4037d6:	46bd      	mov	sp, r7
  4037d8:	bc80      	pop	{r7}
  4037da:	4770      	bx	lr
  4037dc:	400e0400 	.word	0x400e0400
  4037e0:	400e1410 	.word	0x400e1410
  4037e4:	2000000c 	.word	0x2000000c
  4037e8:	00b71b00 	.word	0x00b71b00
  4037ec:	003d0900 	.word	0x003d0900
  4037f0:	007a1200 	.word	0x007a1200
  4037f4:	07ff0000 	.word	0x07ff0000
  4037f8:	aaaaaaab 	.word	0xaaaaaaab

004037fc <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4037fc:	b480      	push	{r7}
  4037fe:	b083      	sub	sp, #12
  403800:	af00      	add	r7, sp, #0
  403802:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403804:	687b      	ldr	r3, [r7, #4]
  403806:	4a18      	ldr	r2, [pc, #96]	; (403868 <system_init_flash+0x6c>)
  403808:	4293      	cmp	r3, r2
  40380a:	d804      	bhi.n	403816 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40380c:	4b17      	ldr	r3, [pc, #92]	; (40386c <system_init_flash+0x70>)
  40380e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403812:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403814:	e023      	b.n	40385e <system_init_flash+0x62>
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403816:	687b      	ldr	r3, [r7, #4]
  403818:	4a15      	ldr	r2, [pc, #84]	; (403870 <system_init_flash+0x74>)
  40381a:	4293      	cmp	r3, r2
  40381c:	d803      	bhi.n	403826 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40381e:	4b13      	ldr	r3, [pc, #76]	; (40386c <system_init_flash+0x70>)
  403820:	4a14      	ldr	r2, [pc, #80]	; (403874 <system_init_flash+0x78>)
  403822:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403824:	e01b      	b.n	40385e <system_init_flash+0x62>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403826:	687b      	ldr	r3, [r7, #4]
  403828:	4a13      	ldr	r2, [pc, #76]	; (403878 <system_init_flash+0x7c>)
  40382a:	4293      	cmp	r3, r2
  40382c:	d803      	bhi.n	403836 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40382e:	4b0f      	ldr	r3, [pc, #60]	; (40386c <system_init_flash+0x70>)
  403830:	4a12      	ldr	r2, [pc, #72]	; (40387c <system_init_flash+0x80>)
  403832:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403834:	e013      	b.n	40385e <system_init_flash+0x62>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403836:	687b      	ldr	r3, [r7, #4]
  403838:	4a11      	ldr	r2, [pc, #68]	; (403880 <system_init_flash+0x84>)
  40383a:	4293      	cmp	r3, r2
  40383c:	d803      	bhi.n	403846 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40383e:	4b0b      	ldr	r3, [pc, #44]	; (40386c <system_init_flash+0x70>)
  403840:	4a10      	ldr	r2, [pc, #64]	; (403884 <system_init_flash+0x88>)
  403842:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403844:	e00b      	b.n	40385e <system_init_flash+0x62>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403846:	687b      	ldr	r3, [r7, #4]
  403848:	4a0f      	ldr	r2, [pc, #60]	; (403888 <system_init_flash+0x8c>)
  40384a:	4293      	cmp	r3, r2
  40384c:	d804      	bhi.n	403858 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40384e:	4b07      	ldr	r3, [pc, #28]	; (40386c <system_init_flash+0x70>)
  403850:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403854:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  403856:	e002      	b.n	40385e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403858:	4b04      	ldr	r3, [pc, #16]	; (40386c <system_init_flash+0x70>)
  40385a:	4a0c      	ldr	r2, [pc, #48]	; (40388c <system_init_flash+0x90>)
  40385c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40385e:	bf00      	nop
  403860:	370c      	adds	r7, #12
  403862:	46bd      	mov	sp, r7
  403864:	bc80      	pop	{r7}
  403866:	4770      	bx	lr
  403868:	01312cff 	.word	0x01312cff
  40386c:	400e0a00 	.word	0x400e0a00
  403870:	026259ff 	.word	0x026259ff
  403874:	04000100 	.word	0x04000100
  403878:	039386ff 	.word	0x039386ff
  40387c:	04000200 	.word	0x04000200
  403880:	04c4b3ff 	.word	0x04c4b3ff
  403884:	04000300 	.word	0x04000300
  403888:	05f5e0ff 	.word	0x05f5e0ff
  40388c:	04000500 	.word	0x04000500

00403890 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  403890:	b480      	push	{r7}
  403892:	b085      	sub	sp, #20
  403894:	af00      	add	r7, sp, #0
  403896:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  403898:	4b10      	ldr	r3, [pc, #64]	; (4038dc <_sbrk+0x4c>)
  40389a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  40389c:	4b10      	ldr	r3, [pc, #64]	; (4038e0 <_sbrk+0x50>)
  40389e:	681b      	ldr	r3, [r3, #0]
  4038a0:	2b00      	cmp	r3, #0
  4038a2:	d102      	bne.n	4038aa <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4038a4:	4b0e      	ldr	r3, [pc, #56]	; (4038e0 <_sbrk+0x50>)
  4038a6:	4a0f      	ldr	r2, [pc, #60]	; (4038e4 <_sbrk+0x54>)
  4038a8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4038aa:	4b0d      	ldr	r3, [pc, #52]	; (4038e0 <_sbrk+0x50>)
  4038ac:	681b      	ldr	r3, [r3, #0]
  4038ae:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4038b0:	68ba      	ldr	r2, [r7, #8]
  4038b2:	687b      	ldr	r3, [r7, #4]
  4038b4:	441a      	add	r2, r3
  4038b6:	68fb      	ldr	r3, [r7, #12]
  4038b8:	429a      	cmp	r2, r3
  4038ba:	dd02      	ble.n	4038c2 <_sbrk+0x32>
		return (caddr_t) -1;	
  4038bc:	f04f 33ff 	mov.w	r3, #4294967295
  4038c0:	e006      	b.n	4038d0 <_sbrk+0x40>
	}

	heap += incr;
  4038c2:	4b07      	ldr	r3, [pc, #28]	; (4038e0 <_sbrk+0x50>)
  4038c4:	681a      	ldr	r2, [r3, #0]
  4038c6:	687b      	ldr	r3, [r7, #4]
  4038c8:	4413      	add	r3, r2
  4038ca:	4a05      	ldr	r2, [pc, #20]	; (4038e0 <_sbrk+0x50>)
  4038cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4038ce:	68bb      	ldr	r3, [r7, #8]
}
  4038d0:	4618      	mov	r0, r3
  4038d2:	3714      	adds	r7, #20
  4038d4:	46bd      	mov	sp, r7
  4038d6:	bc80      	pop	{r7}
  4038d8:	4770      	bx	lr
  4038da:	bf00      	nop
  4038dc:	2001fffc 	.word	0x2001fffc
  4038e0:	2000d658 	.word	0x2000d658
  4038e4:	200106a0 	.word	0x200106a0

004038e8 <main>:
		}
	}
}

int main (void)
{
  4038e8:	b580      	push	{r7, lr}
  4038ea:	b082      	sub	sp, #8
  4038ec:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  4038ee:	4b1b      	ldr	r3, [pc, #108]	; (40395c <main+0x74>)
  4038f0:	4798      	blx	r3
	board_init();
  4038f2:	4b1b      	ldr	r3, [pc, #108]	; (403960 <main+0x78>)
  4038f4:	4798      	blx	r3
	configure_tc();
  4038f6:	4b1b      	ldr	r3, [pc, #108]	; (403964 <main+0x7c>)
  4038f8:	4798      	blx	r3
	tc_start(TC0, 0);
  4038fa:	2100      	movs	r1, #0
  4038fc:	481a      	ldr	r0, [pc, #104]	; (403968 <main+0x80>)
  4038fe:	4b1b      	ldr	r3, [pc, #108]	; (40396c <main+0x84>)
  403900:	4798      	blx	r3
		
	// Custom configuration calls
	configure_wifi();		// configures and initializes wifi 
  403902:	4b1b      	ldr	r3, [pc, #108]	; (403970 <main+0x88>)
  403904:	4798      	blx	r3
	configure_camera();		// configures and initializes camera module
  403906:	4b1b      	ldr	r3, [pc, #108]	; (403974 <main+0x8c>)
  403908:	4798      	blx	r3
	
	uint8_t status_code = 0;
  40390a:	2300      	movs	r3, #0
  40390c:	71fb      	strb	r3, [r7, #7]
	
	reboot_wifi();
  40390e:	4b1a      	ldr	r3, [pc, #104]	; (403978 <main+0x90>)
  403910:	4798      	blx	r3
	//safe_mode_recovery();
	
	configure_i2s(); // microphone configuration
  403912:	4b1a      	ldr	r3, [pc, #104]	; (40397c <main+0x94>)
  403914:	4798      	blx	r3
	
	//uint8_t audio_ws_handle = open_audio_websocket(5); // try 5 times to open the socket
	uint8_t image_ws_handle = open_camera_websocket(5);
  403916:	2005      	movs	r0, #5
  403918:	4b19      	ldr	r3, [pc, #100]	; (403980 <main+0x98>)
  40391a:	4798      	blx	r3
  40391c:	4603      	mov	r3, r0
  40391e:	71bb      	strb	r3, [r7, #6]

	start_i2s_capture();
  403920:	4b18      	ldr	r3, [pc, #96]	; (403984 <main+0x9c>)
  403922:	4798      	blx	r3
		
	while(1) {
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  403924:	4b18      	ldr	r3, [pc, #96]	; (403988 <main+0xa0>)
  403926:	681b      	ldr	r3, [r3, #0]
  403928:	2b00      	cmp	r3, #0
  40392a:	d001      	beq.n	403930 <main+0x48>
			setup_wifi();		// the wifi chip tries to reassociate to a new network
  40392c:	4b17      	ldr	r3, [pc, #92]	; (40398c <main+0xa4>)
  40392e:	4798      	blx	r3
			delay_ms(20000);
			audio_ws_handle = open_audio_websocket(5); // try 5 times to open the socket
		}*/
		
		
		if (image_ws_handle != NO_WEBSOCKET_OPEN){
  403930:	79bb      	ldrb	r3, [r7, #6]
  403932:	2b0a      	cmp	r3, #10
  403934:	d0f6      	beq.n	403924 <main+0x3c>
			start_capture();
  403936:	4b16      	ldr	r3, [pc, #88]	; (403990 <main+0xa8>)
  403938:	4798      	blx	r3
			uint32_t im_length;
	
			im_length = find_image_len();
  40393a:	4b16      	ldr	r3, [pc, #88]	; (403994 <main+0xac>)
  40393c:	4798      	blx	r3
  40393e:	6038      	str	r0, [r7, #0]
			if(im_length) {
  403940:	683b      	ldr	r3, [r7, #0]
  403942:	2b00      	cmp	r3, #0
  403944:	d0ee      	beq.n	403924 <main+0x3c>
				status_code = send_image_ws(start_of_image_ptr, im_length, image_ws_handle);
  403946:	4b14      	ldr	r3, [pc, #80]	; (403998 <main+0xb0>)
  403948:	681b      	ldr	r3, [r3, #0]
  40394a:	79ba      	ldrb	r2, [r7, #6]
  40394c:	6839      	ldr	r1, [r7, #0]
  40394e:	4618      	mov	r0, r3
  403950:	4b12      	ldr	r3, [pc, #72]	; (40399c <main+0xb4>)
  403952:	4798      	blx	r3
  403954:	4603      	mov	r3, r0
  403956:	71fb      	strb	r3, [r7, #7]
		//post_audio_usart((uint8_t *) i2s_rec_buf, 2000);			
		

		//start_capture();		// capture the image to internal memorys
		//post_image();			// send the image to the wifi chip
	}
  403958:	e7e4      	b.n	403924 <main+0x3c>
  40395a:	bf00      	nop
  40395c:	00402911 	.word	0x00402911
  403960:	00403439 	.word	0x00403439
  403964:	00401c65 	.word	0x00401c65
  403968:	40010000 	.word	0x40010000
  40396c:	00400411 	.word	0x00400411
  403970:	00402225 	.word	0x00402225
  403974:	00401445 	.word	0x00401445
  403978:	00402255 	.word	0x00402255
  40397c:	004007a9 	.word	0x004007a9
  403980:	00402135 	.word	0x00402135
  403984:	004006f1 	.word	0x004006f1
  403988:	2000d450 	.word	0x2000d450
  40398c:	004021f9 	.word	0x004021f9
  403990:	00401539 	.word	0x00401539
  403994:	004015ad 	.word	0x004015ad
  403998:	2000d448 	.word	0x2000d448
  40399c:	004024b9 	.word	0x004024b9

004039a0 <__aeabi_uldivmod>:
  4039a0:	b953      	cbnz	r3, 4039b8 <__aeabi_uldivmod+0x18>
  4039a2:	b94a      	cbnz	r2, 4039b8 <__aeabi_uldivmod+0x18>
  4039a4:	2900      	cmp	r1, #0
  4039a6:	bf08      	it	eq
  4039a8:	2800      	cmpeq	r0, #0
  4039aa:	bf1c      	itt	ne
  4039ac:	f04f 31ff 	movne.w	r1, #4294967295
  4039b0:	f04f 30ff 	movne.w	r0, #4294967295
  4039b4:	f000 b97e 	b.w	403cb4 <__aeabi_idiv0>
  4039b8:	f1ad 0c08 	sub.w	ip, sp, #8
  4039bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4039c0:	f000 f806 	bl	4039d0 <__udivmoddi4>
  4039c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4039c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4039cc:	b004      	add	sp, #16
  4039ce:	4770      	bx	lr

004039d0 <__udivmoddi4>:
  4039d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039d4:	468c      	mov	ip, r1
  4039d6:	460e      	mov	r6, r1
  4039d8:	4604      	mov	r4, r0
  4039da:	9d08      	ldr	r5, [sp, #32]
  4039dc:	2b00      	cmp	r3, #0
  4039de:	d150      	bne.n	403a82 <__udivmoddi4+0xb2>
  4039e0:	428a      	cmp	r2, r1
  4039e2:	4617      	mov	r7, r2
  4039e4:	d96c      	bls.n	403ac0 <__udivmoddi4+0xf0>
  4039e6:	fab2 fe82 	clz	lr, r2
  4039ea:	f1be 0f00 	cmp.w	lr, #0
  4039ee:	d00b      	beq.n	403a08 <__udivmoddi4+0x38>
  4039f0:	f1ce 0420 	rsb	r4, lr, #32
  4039f4:	fa20 f404 	lsr.w	r4, r0, r4
  4039f8:	fa01 f60e 	lsl.w	r6, r1, lr
  4039fc:	ea44 0c06 	orr.w	ip, r4, r6
  403a00:	fa02 f70e 	lsl.w	r7, r2, lr
  403a04:	fa00 f40e 	lsl.w	r4, r0, lr
  403a08:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403a0c:	0c22      	lsrs	r2, r4, #16
  403a0e:	fbbc f0f9 	udiv	r0, ip, r9
  403a12:	fa1f f887 	uxth.w	r8, r7
  403a16:	fb09 c610 	mls	r6, r9, r0, ip
  403a1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403a1e:	fb00 f308 	mul.w	r3, r0, r8
  403a22:	42b3      	cmp	r3, r6
  403a24:	d909      	bls.n	403a3a <__udivmoddi4+0x6a>
  403a26:	19f6      	adds	r6, r6, r7
  403a28:	f100 32ff 	add.w	r2, r0, #4294967295
  403a2c:	f080 8122 	bcs.w	403c74 <__udivmoddi4+0x2a4>
  403a30:	42b3      	cmp	r3, r6
  403a32:	f240 811f 	bls.w	403c74 <__udivmoddi4+0x2a4>
  403a36:	3802      	subs	r0, #2
  403a38:	443e      	add	r6, r7
  403a3a:	1af6      	subs	r6, r6, r3
  403a3c:	b2a2      	uxth	r2, r4
  403a3e:	fbb6 f3f9 	udiv	r3, r6, r9
  403a42:	fb09 6613 	mls	r6, r9, r3, r6
  403a46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403a4a:	fb03 f808 	mul.w	r8, r3, r8
  403a4e:	45a0      	cmp	r8, r4
  403a50:	d909      	bls.n	403a66 <__udivmoddi4+0x96>
  403a52:	19e4      	adds	r4, r4, r7
  403a54:	f103 32ff 	add.w	r2, r3, #4294967295
  403a58:	f080 810a 	bcs.w	403c70 <__udivmoddi4+0x2a0>
  403a5c:	45a0      	cmp	r8, r4
  403a5e:	f240 8107 	bls.w	403c70 <__udivmoddi4+0x2a0>
  403a62:	3b02      	subs	r3, #2
  403a64:	443c      	add	r4, r7
  403a66:	ebc8 0404 	rsb	r4, r8, r4
  403a6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403a6e:	2100      	movs	r1, #0
  403a70:	2d00      	cmp	r5, #0
  403a72:	d062      	beq.n	403b3a <__udivmoddi4+0x16a>
  403a74:	fa24 f40e 	lsr.w	r4, r4, lr
  403a78:	2300      	movs	r3, #0
  403a7a:	602c      	str	r4, [r5, #0]
  403a7c:	606b      	str	r3, [r5, #4]
  403a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a82:	428b      	cmp	r3, r1
  403a84:	d907      	bls.n	403a96 <__udivmoddi4+0xc6>
  403a86:	2d00      	cmp	r5, #0
  403a88:	d055      	beq.n	403b36 <__udivmoddi4+0x166>
  403a8a:	2100      	movs	r1, #0
  403a8c:	e885 0041 	stmia.w	r5, {r0, r6}
  403a90:	4608      	mov	r0, r1
  403a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403a96:	fab3 f183 	clz	r1, r3
  403a9a:	2900      	cmp	r1, #0
  403a9c:	f040 8090 	bne.w	403bc0 <__udivmoddi4+0x1f0>
  403aa0:	42b3      	cmp	r3, r6
  403aa2:	d302      	bcc.n	403aaa <__udivmoddi4+0xda>
  403aa4:	4282      	cmp	r2, r0
  403aa6:	f200 80f8 	bhi.w	403c9a <__udivmoddi4+0x2ca>
  403aaa:	1a84      	subs	r4, r0, r2
  403aac:	eb66 0603 	sbc.w	r6, r6, r3
  403ab0:	2001      	movs	r0, #1
  403ab2:	46b4      	mov	ip, r6
  403ab4:	2d00      	cmp	r5, #0
  403ab6:	d040      	beq.n	403b3a <__udivmoddi4+0x16a>
  403ab8:	e885 1010 	stmia.w	r5, {r4, ip}
  403abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ac0:	b912      	cbnz	r2, 403ac8 <__udivmoddi4+0xf8>
  403ac2:	2701      	movs	r7, #1
  403ac4:	fbb7 f7f2 	udiv	r7, r7, r2
  403ac8:	fab7 fe87 	clz	lr, r7
  403acc:	f1be 0f00 	cmp.w	lr, #0
  403ad0:	d135      	bne.n	403b3e <__udivmoddi4+0x16e>
  403ad2:	1bf3      	subs	r3, r6, r7
  403ad4:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403ad8:	fa1f fc87 	uxth.w	ip, r7
  403adc:	2101      	movs	r1, #1
  403ade:	fbb3 f0f8 	udiv	r0, r3, r8
  403ae2:	0c22      	lsrs	r2, r4, #16
  403ae4:	fb08 3610 	mls	r6, r8, r0, r3
  403ae8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403aec:	fb0c f300 	mul.w	r3, ip, r0
  403af0:	42b3      	cmp	r3, r6
  403af2:	d907      	bls.n	403b04 <__udivmoddi4+0x134>
  403af4:	19f6      	adds	r6, r6, r7
  403af6:	f100 32ff 	add.w	r2, r0, #4294967295
  403afa:	d202      	bcs.n	403b02 <__udivmoddi4+0x132>
  403afc:	42b3      	cmp	r3, r6
  403afe:	f200 80ce 	bhi.w	403c9e <__udivmoddi4+0x2ce>
  403b02:	4610      	mov	r0, r2
  403b04:	1af6      	subs	r6, r6, r3
  403b06:	b2a2      	uxth	r2, r4
  403b08:	fbb6 f3f8 	udiv	r3, r6, r8
  403b0c:	fb08 6613 	mls	r6, r8, r3, r6
  403b10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403b14:	fb0c fc03 	mul.w	ip, ip, r3
  403b18:	45a4      	cmp	ip, r4
  403b1a:	d907      	bls.n	403b2c <__udivmoddi4+0x15c>
  403b1c:	19e4      	adds	r4, r4, r7
  403b1e:	f103 32ff 	add.w	r2, r3, #4294967295
  403b22:	d202      	bcs.n	403b2a <__udivmoddi4+0x15a>
  403b24:	45a4      	cmp	ip, r4
  403b26:	f200 80b5 	bhi.w	403c94 <__udivmoddi4+0x2c4>
  403b2a:	4613      	mov	r3, r2
  403b2c:	ebcc 0404 	rsb	r4, ip, r4
  403b30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403b34:	e79c      	b.n	403a70 <__udivmoddi4+0xa0>
  403b36:	4629      	mov	r1, r5
  403b38:	4628      	mov	r0, r5
  403b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b3e:	f1ce 0120 	rsb	r1, lr, #32
  403b42:	fa06 f30e 	lsl.w	r3, r6, lr
  403b46:	fa07 f70e 	lsl.w	r7, r7, lr
  403b4a:	fa20 f901 	lsr.w	r9, r0, r1
  403b4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403b52:	40ce      	lsrs	r6, r1
  403b54:	ea49 0903 	orr.w	r9, r9, r3
  403b58:	fbb6 faf8 	udiv	sl, r6, r8
  403b5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
  403b60:	fb08 661a 	mls	r6, r8, sl, r6
  403b64:	fa1f fc87 	uxth.w	ip, r7
  403b68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  403b6c:	fb0a f20c 	mul.w	r2, sl, ip
  403b70:	429a      	cmp	r2, r3
  403b72:	fa00 f40e 	lsl.w	r4, r0, lr
  403b76:	d90a      	bls.n	403b8e <__udivmoddi4+0x1be>
  403b78:	19db      	adds	r3, r3, r7
  403b7a:	f10a 31ff 	add.w	r1, sl, #4294967295
  403b7e:	f080 8087 	bcs.w	403c90 <__udivmoddi4+0x2c0>
  403b82:	429a      	cmp	r2, r3
  403b84:	f240 8084 	bls.w	403c90 <__udivmoddi4+0x2c0>
  403b88:	f1aa 0a02 	sub.w	sl, sl, #2
  403b8c:	443b      	add	r3, r7
  403b8e:	1a9b      	subs	r3, r3, r2
  403b90:	fa1f f989 	uxth.w	r9, r9
  403b94:	fbb3 f1f8 	udiv	r1, r3, r8
  403b98:	fb08 3311 	mls	r3, r8, r1, r3
  403b9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  403ba0:	fb01 f60c 	mul.w	r6, r1, ip
  403ba4:	429e      	cmp	r6, r3
  403ba6:	d907      	bls.n	403bb8 <__udivmoddi4+0x1e8>
  403ba8:	19db      	adds	r3, r3, r7
  403baa:	f101 32ff 	add.w	r2, r1, #4294967295
  403bae:	d26b      	bcs.n	403c88 <__udivmoddi4+0x2b8>
  403bb0:	429e      	cmp	r6, r3
  403bb2:	d969      	bls.n	403c88 <__udivmoddi4+0x2b8>
  403bb4:	3902      	subs	r1, #2
  403bb6:	443b      	add	r3, r7
  403bb8:	1b9b      	subs	r3, r3, r6
  403bba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  403bbe:	e78e      	b.n	403ade <__udivmoddi4+0x10e>
  403bc0:	f1c1 0e20 	rsb	lr, r1, #32
  403bc4:	fa22 f40e 	lsr.w	r4, r2, lr
  403bc8:	408b      	lsls	r3, r1
  403bca:	4323      	orrs	r3, r4
  403bcc:	fa20 f70e 	lsr.w	r7, r0, lr
  403bd0:	fa06 f401 	lsl.w	r4, r6, r1
  403bd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403bd8:	fa26 f60e 	lsr.w	r6, r6, lr
  403bdc:	433c      	orrs	r4, r7
  403bde:	fbb6 f9fc 	udiv	r9, r6, ip
  403be2:	0c27      	lsrs	r7, r4, #16
  403be4:	fb0c 6619 	mls	r6, ip, r9, r6
  403be8:	fa1f f883 	uxth.w	r8, r3
  403bec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  403bf0:	fb09 f708 	mul.w	r7, r9, r8
  403bf4:	42b7      	cmp	r7, r6
  403bf6:	fa02 f201 	lsl.w	r2, r2, r1
  403bfa:	fa00 fa01 	lsl.w	sl, r0, r1
  403bfe:	d908      	bls.n	403c12 <__udivmoddi4+0x242>
  403c00:	18f6      	adds	r6, r6, r3
  403c02:	f109 30ff 	add.w	r0, r9, #4294967295
  403c06:	d241      	bcs.n	403c8c <__udivmoddi4+0x2bc>
  403c08:	42b7      	cmp	r7, r6
  403c0a:	d93f      	bls.n	403c8c <__udivmoddi4+0x2bc>
  403c0c:	f1a9 0902 	sub.w	r9, r9, #2
  403c10:	441e      	add	r6, r3
  403c12:	1bf6      	subs	r6, r6, r7
  403c14:	b2a0      	uxth	r0, r4
  403c16:	fbb6 f4fc 	udiv	r4, r6, ip
  403c1a:	fb0c 6614 	mls	r6, ip, r4, r6
  403c1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  403c22:	fb04 f808 	mul.w	r8, r4, r8
  403c26:	45b8      	cmp	r8, r7
  403c28:	d907      	bls.n	403c3a <__udivmoddi4+0x26a>
  403c2a:	18ff      	adds	r7, r7, r3
  403c2c:	f104 30ff 	add.w	r0, r4, #4294967295
  403c30:	d228      	bcs.n	403c84 <__udivmoddi4+0x2b4>
  403c32:	45b8      	cmp	r8, r7
  403c34:	d926      	bls.n	403c84 <__udivmoddi4+0x2b4>
  403c36:	3c02      	subs	r4, #2
  403c38:	441f      	add	r7, r3
  403c3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  403c3e:	ebc8 0707 	rsb	r7, r8, r7
  403c42:	fba0 8902 	umull	r8, r9, r0, r2
  403c46:	454f      	cmp	r7, r9
  403c48:	4644      	mov	r4, r8
  403c4a:	464e      	mov	r6, r9
  403c4c:	d314      	bcc.n	403c78 <__udivmoddi4+0x2a8>
  403c4e:	d029      	beq.n	403ca4 <__udivmoddi4+0x2d4>
  403c50:	b365      	cbz	r5, 403cac <__udivmoddi4+0x2dc>
  403c52:	ebba 0304 	subs.w	r3, sl, r4
  403c56:	eb67 0706 	sbc.w	r7, r7, r6
  403c5a:	fa07 fe0e 	lsl.w	lr, r7, lr
  403c5e:	40cb      	lsrs	r3, r1
  403c60:	40cf      	lsrs	r7, r1
  403c62:	ea4e 0303 	orr.w	r3, lr, r3
  403c66:	e885 0088 	stmia.w	r5, {r3, r7}
  403c6a:	2100      	movs	r1, #0
  403c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c70:	4613      	mov	r3, r2
  403c72:	e6f8      	b.n	403a66 <__udivmoddi4+0x96>
  403c74:	4610      	mov	r0, r2
  403c76:	e6e0      	b.n	403a3a <__udivmoddi4+0x6a>
  403c78:	ebb8 0402 	subs.w	r4, r8, r2
  403c7c:	eb69 0603 	sbc.w	r6, r9, r3
  403c80:	3801      	subs	r0, #1
  403c82:	e7e5      	b.n	403c50 <__udivmoddi4+0x280>
  403c84:	4604      	mov	r4, r0
  403c86:	e7d8      	b.n	403c3a <__udivmoddi4+0x26a>
  403c88:	4611      	mov	r1, r2
  403c8a:	e795      	b.n	403bb8 <__udivmoddi4+0x1e8>
  403c8c:	4681      	mov	r9, r0
  403c8e:	e7c0      	b.n	403c12 <__udivmoddi4+0x242>
  403c90:	468a      	mov	sl, r1
  403c92:	e77c      	b.n	403b8e <__udivmoddi4+0x1be>
  403c94:	3b02      	subs	r3, #2
  403c96:	443c      	add	r4, r7
  403c98:	e748      	b.n	403b2c <__udivmoddi4+0x15c>
  403c9a:	4608      	mov	r0, r1
  403c9c:	e70a      	b.n	403ab4 <__udivmoddi4+0xe4>
  403c9e:	3802      	subs	r0, #2
  403ca0:	443e      	add	r6, r7
  403ca2:	e72f      	b.n	403b04 <__udivmoddi4+0x134>
  403ca4:	45c2      	cmp	sl, r8
  403ca6:	d3e7      	bcc.n	403c78 <__udivmoddi4+0x2a8>
  403ca8:	463e      	mov	r6, r7
  403caa:	e7d1      	b.n	403c50 <__udivmoddi4+0x280>
  403cac:	4629      	mov	r1, r5
  403cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cb2:	bf00      	nop

00403cb4 <__aeabi_idiv0>:
  403cb4:	4770      	bx	lr
  403cb6:	bf00      	nop

00403cb8 <__libc_init_array>:
  403cb8:	b570      	push	{r4, r5, r6, lr}
  403cba:	4e0f      	ldr	r6, [pc, #60]	; (403cf8 <__libc_init_array+0x40>)
  403cbc:	4d0f      	ldr	r5, [pc, #60]	; (403cfc <__libc_init_array+0x44>)
  403cbe:	1b76      	subs	r6, r6, r5
  403cc0:	10b6      	asrs	r6, r6, #2
  403cc2:	bf18      	it	ne
  403cc4:	2400      	movne	r4, #0
  403cc6:	d005      	beq.n	403cd4 <__libc_init_array+0x1c>
  403cc8:	3401      	adds	r4, #1
  403cca:	f855 3b04 	ldr.w	r3, [r5], #4
  403cce:	4798      	blx	r3
  403cd0:	42a6      	cmp	r6, r4
  403cd2:	d1f9      	bne.n	403cc8 <__libc_init_array+0x10>
  403cd4:	4e0a      	ldr	r6, [pc, #40]	; (403d00 <__libc_init_array+0x48>)
  403cd6:	4d0b      	ldr	r5, [pc, #44]	; (403d04 <__libc_init_array+0x4c>)
  403cd8:	1b76      	subs	r6, r6, r5
  403cda:	f005 ff27 	bl	409b2c <_init>
  403cde:	10b6      	asrs	r6, r6, #2
  403ce0:	bf18      	it	ne
  403ce2:	2400      	movne	r4, #0
  403ce4:	d006      	beq.n	403cf4 <__libc_init_array+0x3c>
  403ce6:	3401      	adds	r4, #1
  403ce8:	f855 3b04 	ldr.w	r3, [r5], #4
  403cec:	4798      	blx	r3
  403cee:	42a6      	cmp	r6, r4
  403cf0:	d1f9      	bne.n	403ce6 <__libc_init_array+0x2e>
  403cf2:	bd70      	pop	{r4, r5, r6, pc}
  403cf4:	bd70      	pop	{r4, r5, r6, pc}
  403cf6:	bf00      	nop
  403cf8:	00409b38 	.word	0x00409b38
  403cfc:	00409b38 	.word	0x00409b38
  403d00:	00409b40 	.word	0x00409b40
  403d04:	00409b38 	.word	0x00409b38

00403d08 <memset>:
  403d08:	b470      	push	{r4, r5, r6}
  403d0a:	0784      	lsls	r4, r0, #30
  403d0c:	d046      	beq.n	403d9c <memset+0x94>
  403d0e:	1e54      	subs	r4, r2, #1
  403d10:	2a00      	cmp	r2, #0
  403d12:	d041      	beq.n	403d98 <memset+0x90>
  403d14:	b2cd      	uxtb	r5, r1
  403d16:	4603      	mov	r3, r0
  403d18:	e002      	b.n	403d20 <memset+0x18>
  403d1a:	1e62      	subs	r2, r4, #1
  403d1c:	b3e4      	cbz	r4, 403d98 <memset+0x90>
  403d1e:	4614      	mov	r4, r2
  403d20:	f803 5b01 	strb.w	r5, [r3], #1
  403d24:	079a      	lsls	r2, r3, #30
  403d26:	d1f8      	bne.n	403d1a <memset+0x12>
  403d28:	2c03      	cmp	r4, #3
  403d2a:	d92e      	bls.n	403d8a <memset+0x82>
  403d2c:	b2cd      	uxtb	r5, r1
  403d2e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403d32:	2c0f      	cmp	r4, #15
  403d34:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403d38:	d919      	bls.n	403d6e <memset+0x66>
  403d3a:	f103 0210 	add.w	r2, r3, #16
  403d3e:	4626      	mov	r6, r4
  403d40:	3e10      	subs	r6, #16
  403d42:	2e0f      	cmp	r6, #15
  403d44:	f842 5c10 	str.w	r5, [r2, #-16]
  403d48:	f842 5c0c 	str.w	r5, [r2, #-12]
  403d4c:	f842 5c08 	str.w	r5, [r2, #-8]
  403d50:	f842 5c04 	str.w	r5, [r2, #-4]
  403d54:	f102 0210 	add.w	r2, r2, #16
  403d58:	d8f2      	bhi.n	403d40 <memset+0x38>
  403d5a:	f1a4 0210 	sub.w	r2, r4, #16
  403d5e:	f022 020f 	bic.w	r2, r2, #15
  403d62:	f004 040f 	and.w	r4, r4, #15
  403d66:	3210      	adds	r2, #16
  403d68:	2c03      	cmp	r4, #3
  403d6a:	4413      	add	r3, r2
  403d6c:	d90d      	bls.n	403d8a <memset+0x82>
  403d6e:	461e      	mov	r6, r3
  403d70:	4622      	mov	r2, r4
  403d72:	3a04      	subs	r2, #4
  403d74:	2a03      	cmp	r2, #3
  403d76:	f846 5b04 	str.w	r5, [r6], #4
  403d7a:	d8fa      	bhi.n	403d72 <memset+0x6a>
  403d7c:	1f22      	subs	r2, r4, #4
  403d7e:	f022 0203 	bic.w	r2, r2, #3
  403d82:	3204      	adds	r2, #4
  403d84:	4413      	add	r3, r2
  403d86:	f004 0403 	and.w	r4, r4, #3
  403d8a:	b12c      	cbz	r4, 403d98 <memset+0x90>
  403d8c:	b2c9      	uxtb	r1, r1
  403d8e:	441c      	add	r4, r3
  403d90:	f803 1b01 	strb.w	r1, [r3], #1
  403d94:	42a3      	cmp	r3, r4
  403d96:	d1fb      	bne.n	403d90 <memset+0x88>
  403d98:	bc70      	pop	{r4, r5, r6}
  403d9a:	4770      	bx	lr
  403d9c:	4614      	mov	r4, r2
  403d9e:	4603      	mov	r3, r0
  403da0:	e7c2      	b.n	403d28 <memset+0x20>
  403da2:	bf00      	nop

00403da4 <sprintf>:
  403da4:	b40e      	push	{r1, r2, r3}
  403da6:	b5f0      	push	{r4, r5, r6, r7, lr}
  403da8:	b09c      	sub	sp, #112	; 0x70
  403daa:	ab21      	add	r3, sp, #132	; 0x84
  403dac:	490f      	ldr	r1, [pc, #60]	; (403dec <sprintf+0x48>)
  403dae:	f853 2b04 	ldr.w	r2, [r3], #4
  403db2:	9301      	str	r3, [sp, #4]
  403db4:	4605      	mov	r5, r0
  403db6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403dba:	6808      	ldr	r0, [r1, #0]
  403dbc:	9502      	str	r5, [sp, #8]
  403dbe:	f44f 7702 	mov.w	r7, #520	; 0x208
  403dc2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403dc6:	a902      	add	r1, sp, #8
  403dc8:	9506      	str	r5, [sp, #24]
  403dca:	f8ad 7014 	strh.w	r7, [sp, #20]
  403dce:	9404      	str	r4, [sp, #16]
  403dd0:	9407      	str	r4, [sp, #28]
  403dd2:	f8ad 6016 	strh.w	r6, [sp, #22]
  403dd6:	f000 faed 	bl	4043b4 <_svfprintf_r>
  403dda:	9b02      	ldr	r3, [sp, #8]
  403ddc:	2200      	movs	r2, #0
  403dde:	701a      	strb	r2, [r3, #0]
  403de0:	b01c      	add	sp, #112	; 0x70
  403de2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403de6:	b003      	add	sp, #12
  403de8:	4770      	bx	lr
  403dea:	bf00      	nop
  403dec:	20000438 	.word	0x20000438
	...

00403e00 <strlen>:
  403e00:	f890 f000 	pld	[r0]
  403e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403e08:	f020 0107 	bic.w	r1, r0, #7
  403e0c:	f06f 0c00 	mvn.w	ip, #0
  403e10:	f010 0407 	ands.w	r4, r0, #7
  403e14:	f891 f020 	pld	[r1, #32]
  403e18:	f040 8049 	bne.w	403eae <strlen+0xae>
  403e1c:	f04f 0400 	mov.w	r4, #0
  403e20:	f06f 0007 	mvn.w	r0, #7
  403e24:	e9d1 2300 	ldrd	r2, r3, [r1]
  403e28:	f891 f040 	pld	[r1, #64]	; 0x40
  403e2c:	f100 0008 	add.w	r0, r0, #8
  403e30:	fa82 f24c 	uadd8	r2, r2, ip
  403e34:	faa4 f28c 	sel	r2, r4, ip
  403e38:	fa83 f34c 	uadd8	r3, r3, ip
  403e3c:	faa2 f38c 	sel	r3, r2, ip
  403e40:	bb4b      	cbnz	r3, 403e96 <strlen+0x96>
  403e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403e46:	fa82 f24c 	uadd8	r2, r2, ip
  403e4a:	f100 0008 	add.w	r0, r0, #8
  403e4e:	faa4 f28c 	sel	r2, r4, ip
  403e52:	fa83 f34c 	uadd8	r3, r3, ip
  403e56:	faa2 f38c 	sel	r3, r2, ip
  403e5a:	b9e3      	cbnz	r3, 403e96 <strlen+0x96>
  403e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403e60:	fa82 f24c 	uadd8	r2, r2, ip
  403e64:	f100 0008 	add.w	r0, r0, #8
  403e68:	faa4 f28c 	sel	r2, r4, ip
  403e6c:	fa83 f34c 	uadd8	r3, r3, ip
  403e70:	faa2 f38c 	sel	r3, r2, ip
  403e74:	b97b      	cbnz	r3, 403e96 <strlen+0x96>
  403e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403e7a:	f101 0120 	add.w	r1, r1, #32
  403e7e:	fa82 f24c 	uadd8	r2, r2, ip
  403e82:	f100 0008 	add.w	r0, r0, #8
  403e86:	faa4 f28c 	sel	r2, r4, ip
  403e8a:	fa83 f34c 	uadd8	r3, r3, ip
  403e8e:	faa2 f38c 	sel	r3, r2, ip
  403e92:	2b00      	cmp	r3, #0
  403e94:	d0c6      	beq.n	403e24 <strlen+0x24>
  403e96:	2a00      	cmp	r2, #0
  403e98:	bf04      	itt	eq
  403e9a:	3004      	addeq	r0, #4
  403e9c:	461a      	moveq	r2, r3
  403e9e:	ba12      	rev	r2, r2
  403ea0:	fab2 f282 	clz	r2, r2
  403ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403eac:	4770      	bx	lr
  403eae:	e9d1 2300 	ldrd	r2, r3, [r1]
  403eb2:	f004 0503 	and.w	r5, r4, #3
  403eb6:	f1c4 0000 	rsb	r0, r4, #0
  403eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403ebe:	f014 0f04 	tst.w	r4, #4
  403ec2:	f891 f040 	pld	[r1, #64]	; 0x40
  403ec6:	fa0c f505 	lsl.w	r5, ip, r5
  403eca:	ea62 0205 	orn	r2, r2, r5
  403ece:	bf1c      	itt	ne
  403ed0:	ea63 0305 	ornne	r3, r3, r5
  403ed4:	4662      	movne	r2, ip
  403ed6:	f04f 0400 	mov.w	r4, #0
  403eda:	e7a9      	b.n	403e30 <strlen+0x30>

00403edc <critical_factorization>:
  403edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ee0:	f04f 0e01 	mov.w	lr, #1
  403ee4:	4674      	mov	r4, lr
  403ee6:	2500      	movs	r5, #0
  403ee8:	f04f 36ff 	mov.w	r6, #4294967295
  403eec:	192b      	adds	r3, r5, r4
  403eee:	428b      	cmp	r3, r1
  403ef0:	eb00 0706 	add.w	r7, r0, r6
  403ef4:	d20d      	bcs.n	403f12 <critical_factorization+0x36>
  403ef6:	5d3f      	ldrb	r7, [r7, r4]
  403ef8:	f810 c003 	ldrb.w	ip, [r0, r3]
  403efc:	45bc      	cmp	ip, r7
  403efe:	d22d      	bcs.n	403f5c <critical_factorization+0x80>
  403f00:	461d      	mov	r5, r3
  403f02:	2401      	movs	r4, #1
  403f04:	ebc6 0e03 	rsb	lr, r6, r3
  403f08:	192b      	adds	r3, r5, r4
  403f0a:	428b      	cmp	r3, r1
  403f0c:	eb00 0706 	add.w	r7, r0, r6
  403f10:	d3f1      	bcc.n	403ef6 <critical_factorization+0x1a>
  403f12:	f04f 0801 	mov.w	r8, #1
  403f16:	f8c2 e000 	str.w	lr, [r2]
  403f1a:	4644      	mov	r4, r8
  403f1c:	2500      	movs	r5, #0
  403f1e:	f04f 37ff 	mov.w	r7, #4294967295
  403f22:	192b      	adds	r3, r5, r4
  403f24:	4299      	cmp	r1, r3
  403f26:	eb00 0e07 	add.w	lr, r0, r7
  403f2a:	d90e      	bls.n	403f4a <critical_factorization+0x6e>
  403f2c:	f81e e004 	ldrb.w	lr, [lr, r4]
  403f30:	f810 c003 	ldrb.w	ip, [r0, r3]
  403f34:	45f4      	cmp	ip, lr
  403f36:	d918      	bls.n	403f6a <critical_factorization+0x8e>
  403f38:	461d      	mov	r5, r3
  403f3a:	2401      	movs	r4, #1
  403f3c:	ebc7 0803 	rsb	r8, r7, r3
  403f40:	192b      	adds	r3, r5, r4
  403f42:	4299      	cmp	r1, r3
  403f44:	eb00 0e07 	add.w	lr, r0, r7
  403f48:	d8f0      	bhi.n	403f2c <critical_factorization+0x50>
  403f4a:	3701      	adds	r7, #1
  403f4c:	1c70      	adds	r0, r6, #1
  403f4e:	4287      	cmp	r7, r0
  403f50:	bf24      	itt	cs
  403f52:	f8c2 8000 	strcs.w	r8, [r2]
  403f56:	4638      	movcs	r0, r7
  403f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f5c:	d00c      	beq.n	403f78 <critical_factorization+0x9c>
  403f5e:	f04f 0e01 	mov.w	lr, #1
  403f62:	462e      	mov	r6, r5
  403f64:	4674      	mov	r4, lr
  403f66:	4475      	add	r5, lr
  403f68:	e7c0      	b.n	403eec <critical_factorization+0x10>
  403f6a:	d00c      	beq.n	403f86 <critical_factorization+0xaa>
  403f6c:	f04f 0801 	mov.w	r8, #1
  403f70:	462f      	mov	r7, r5
  403f72:	4644      	mov	r4, r8
  403f74:	4445      	add	r5, r8
  403f76:	e7d4      	b.n	403f22 <critical_factorization+0x46>
  403f78:	4574      	cmp	r4, lr
  403f7a:	bf09      	itett	eq
  403f7c:	46a6      	moveq	lr, r4
  403f7e:	3401      	addne	r4, #1
  403f80:	461d      	moveq	r5, r3
  403f82:	2401      	moveq	r4, #1
  403f84:	e7b2      	b.n	403eec <critical_factorization+0x10>
  403f86:	4544      	cmp	r4, r8
  403f88:	bf09      	itett	eq
  403f8a:	46a0      	moveq	r8, r4
  403f8c:	3401      	addne	r4, #1
  403f8e:	461d      	moveq	r5, r3
  403f90:	2401      	moveq	r4, #1
  403f92:	e7c6      	b.n	403f22 <critical_factorization+0x46>

00403f94 <two_way_long_needle>:
  403f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f98:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  403f9c:	4616      	mov	r6, r2
  403f9e:	4605      	mov	r5, r0
  403fa0:	468b      	mov	fp, r1
  403fa2:	4610      	mov	r0, r2
  403fa4:	4619      	mov	r1, r3
  403fa6:	aa03      	add	r2, sp, #12
  403fa8:	461c      	mov	r4, r3
  403faa:	f7ff ff97 	bl	403edc <critical_factorization>
  403fae:	ab03      	add	r3, sp, #12
  403fb0:	4681      	mov	r9, r0
  403fb2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  403fb6:	f843 4f04 	str.w	r4, [r3, #4]!
  403fba:	4293      	cmp	r3, r2
  403fbc:	d1fb      	bne.n	403fb6 <two_way_long_needle+0x22>
  403fbe:	b14c      	cbz	r4, 403fd4 <two_way_long_needle+0x40>
  403fc0:	1e63      	subs	r3, r4, #1
  403fc2:	4632      	mov	r2, r6
  403fc4:	a804      	add	r0, sp, #16
  403fc6:	f812 1b01 	ldrb.w	r1, [r2], #1
  403fca:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  403fce:	f113 33ff 	adds.w	r3, r3, #4294967295
  403fd2:	d2f8      	bcs.n	403fc6 <two_way_long_needle+0x32>
  403fd4:	9903      	ldr	r1, [sp, #12]
  403fd6:	464a      	mov	r2, r9
  403fd8:	4431      	add	r1, r6
  403fda:	4630      	mov	r0, r6
  403fdc:	f003 f960 	bl	4072a0 <memcmp>
  403fe0:	2800      	cmp	r0, #0
  403fe2:	d171      	bne.n	4040c8 <two_way_long_needle+0x134>
  403fe4:	f109 33ff 	add.w	r3, r9, #4294967295
  403fe8:	9300      	str	r3, [sp, #0]
  403fea:	18f3      	adds	r3, r6, r3
  403fec:	4682      	mov	sl, r0
  403fee:	9301      	str	r3, [sp, #4]
  403ff0:	4623      	mov	r3, r4
  403ff2:	4680      	mov	r8, r0
  403ff4:	4654      	mov	r4, sl
  403ff6:	4658      	mov	r0, fp
  403ff8:	469a      	mov	sl, r3
  403ffa:	eb08 070a 	add.w	r7, r8, sl
  403ffe:	1a3a      	subs	r2, r7, r0
  404000:	2100      	movs	r1, #0
  404002:	4428      	add	r0, r5
  404004:	f003 f8fc 	bl	407200 <memchr>
  404008:	2800      	cmp	r0, #0
  40400a:	d158      	bne.n	4040be <two_way_long_needle+0x12a>
  40400c:	2f00      	cmp	r7, #0
  40400e:	d056      	beq.n	4040be <two_way_long_needle+0x12a>
  404010:	19eb      	adds	r3, r5, r7
  404012:	aa04      	add	r2, sp, #16
  404014:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40401c:	b14b      	cbz	r3, 404032 <two_way_long_needle+0x9e>
  40401e:	b124      	cbz	r4, 40402a <two_way_long_needle+0x96>
  404020:	9a03      	ldr	r2, [sp, #12]
  404022:	4293      	cmp	r3, r2
  404024:	d201      	bcs.n	40402a <two_way_long_needle+0x96>
  404026:	ebc2 030a 	rsb	r3, r2, sl
  40402a:	4498      	add	r8, r3
  40402c:	2400      	movs	r4, #0
  40402e:	4638      	mov	r0, r7
  404030:	e7e3      	b.n	403ffa <two_way_long_needle+0x66>
  404032:	454c      	cmp	r4, r9
  404034:	4623      	mov	r3, r4
  404036:	f10a 3eff 	add.w	lr, sl, #4294967295
  40403a:	bf38      	it	cc
  40403c:	464b      	movcc	r3, r9
  40403e:	4573      	cmp	r3, lr
  404040:	d213      	bcs.n	40406a <two_way_long_needle+0xd6>
  404042:	eb08 0203 	add.w	r2, r8, r3
  404046:	f816 c003 	ldrb.w	ip, [r6, r3]
  40404a:	5ca8      	ldrb	r0, [r5, r2]
  40404c:	4584      	cmp	ip, r0
  40404e:	442a      	add	r2, r5
  404050:	eb06 0103 	add.w	r1, r6, r3
  404054:	d006      	beq.n	404064 <two_way_long_needle+0xd0>
  404056:	e02e      	b.n	4040b6 <two_way_long_needle+0x122>
  404058:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40405c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404060:	4584      	cmp	ip, r0
  404062:	d128      	bne.n	4040b6 <two_way_long_needle+0x122>
  404064:	3301      	adds	r3, #1
  404066:	4573      	cmp	r3, lr
  404068:	d3f6      	bcc.n	404058 <two_way_long_needle+0xc4>
  40406a:	454c      	cmp	r4, r9
  40406c:	9900      	ldr	r1, [sp, #0]
  40406e:	f080 808b 	bcs.w	404188 <two_way_long_needle+0x1f4>
  404072:	9b00      	ldr	r3, [sp, #0]
  404074:	9801      	ldr	r0, [sp, #4]
  404076:	eb08 0203 	add.w	r2, r8, r3
  40407a:	7803      	ldrb	r3, [r0, #0]
  40407c:	5ca8      	ldrb	r0, [r5, r2]
  40407e:	4283      	cmp	r3, r0
  404080:	442a      	add	r2, r5
  404082:	f040 8081 	bne.w	404188 <two_way_long_needle+0x1f4>
  404086:	9b01      	ldr	r3, [sp, #4]
  404088:	eb06 0b04 	add.w	fp, r6, r4
  40408c:	e006      	b.n	40409c <two_way_long_needle+0x108>
  40408e:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
  404092:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
  404096:	4586      	cmp	lr, r0
  404098:	d104      	bne.n	4040a4 <two_way_long_needle+0x110>
  40409a:	4661      	mov	r1, ip
  40409c:	459b      	cmp	fp, r3
  40409e:	f101 3cff 	add.w	ip, r1, #4294967295
  4040a2:	d1f4      	bne.n	40408e <two_way_long_needle+0xfa>
  4040a4:	3401      	adds	r4, #1
  4040a6:	428c      	cmp	r4, r1
  4040a8:	d870      	bhi.n	40418c <two_way_long_needle+0x1f8>
  4040aa:	9c03      	ldr	r4, [sp, #12]
  4040ac:	4638      	mov	r0, r7
  4040ae:	44a0      	add	r8, r4
  4040b0:	ebc4 040a 	rsb	r4, r4, sl
  4040b4:	e7a1      	b.n	403ffa <two_way_long_needle+0x66>
  4040b6:	f1c9 0201 	rsb	r2, r9, #1
  4040ba:	4490      	add	r8, r2
  4040bc:	e7b5      	b.n	40402a <two_way_long_needle+0x96>
  4040be:	2000      	movs	r0, #0
  4040c0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040c8:	ebc9 0304 	rsb	r3, r9, r4
  4040cc:	454b      	cmp	r3, r9
  4040ce:	bf38      	it	cc
  4040d0:	464b      	movcc	r3, r9
  4040d2:	3301      	adds	r3, #1
  4040d4:	f109 38ff 	add.w	r8, r9, #4294967295
  4040d8:	9303      	str	r3, [sp, #12]
  4040da:	eb06 0308 	add.w	r3, r6, r8
  4040de:	4658      	mov	r0, fp
  4040e0:	f04f 0a00 	mov.w	sl, #0
  4040e4:	46cb      	mov	fp, r9
  4040e6:	4699      	mov	r9, r3
  4040e8:	eb0a 0704 	add.w	r7, sl, r4
  4040ec:	1a3a      	subs	r2, r7, r0
  4040ee:	2100      	movs	r1, #0
  4040f0:	4428      	add	r0, r5
  4040f2:	f003 f885 	bl	407200 <memchr>
  4040f6:	2800      	cmp	r0, #0
  4040f8:	d1e1      	bne.n	4040be <two_way_long_needle+0x12a>
  4040fa:	2f00      	cmp	r7, #0
  4040fc:	d0df      	beq.n	4040be <two_way_long_needle+0x12a>
  4040fe:	19eb      	adds	r3, r5, r7
  404100:	aa04      	add	r2, sp, #16
  404102:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40410a:	bba3      	cbnz	r3, 404176 <two_way_long_needle+0x1e2>
  40410c:	1e61      	subs	r1, r4, #1
  40410e:	458b      	cmp	fp, r1
  404110:	d215      	bcs.n	40413e <two_way_long_needle+0x1aa>
  404112:	eb0a 020b 	add.w	r2, sl, fp
  404116:	f816 300b 	ldrb.w	r3, [r6, fp]
  40411a:	f815 e002 	ldrb.w	lr, [r5, r2]
  40411e:	459e      	cmp	lr, r3
  404120:	442a      	add	r2, r5
  404122:	eb06 000b 	add.w	r0, r6, fp
  404126:	465b      	mov	r3, fp
  404128:	d006      	beq.n	404138 <two_way_long_needle+0x1a4>
  40412a:	e027      	b.n	40417c <two_way_long_needle+0x1e8>
  40412c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  404130:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  404134:	45f4      	cmp	ip, lr
  404136:	d121      	bne.n	40417c <two_way_long_needle+0x1e8>
  404138:	3301      	adds	r3, #1
  40413a:	428b      	cmp	r3, r1
  40413c:	d3f6      	bcc.n	40412c <two_way_long_needle+0x198>
  40413e:	f1b8 3fff 	cmp.w	r8, #4294967295
  404142:	d011      	beq.n	404168 <two_way_long_needle+0x1d4>
  404144:	eb0a 0208 	add.w	r2, sl, r8
  404148:	f899 1000 	ldrb.w	r1, [r9]
  40414c:	5cab      	ldrb	r3, [r5, r2]
  40414e:	4299      	cmp	r1, r3
  404150:	442a      	add	r2, r5
  404152:	d10f      	bne.n	404174 <two_way_long_needle+0x1e0>
  404154:	464b      	mov	r3, r9
  404156:	e005      	b.n	404164 <two_way_long_needle+0x1d0>
  404158:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40415c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  404160:	4288      	cmp	r0, r1
  404162:	d107      	bne.n	404174 <two_way_long_needle+0x1e0>
  404164:	42b3      	cmp	r3, r6
  404166:	d1f7      	bne.n	404158 <two_way_long_needle+0x1c4>
  404168:	eb05 000a 	add.w	r0, r5, sl
  40416c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  404170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404174:	9b03      	ldr	r3, [sp, #12]
  404176:	449a      	add	sl, r3
  404178:	4638      	mov	r0, r7
  40417a:	e7b5      	b.n	4040e8 <two_way_long_needle+0x154>
  40417c:	f1cb 0201 	rsb	r2, fp, #1
  404180:	4492      	add	sl, r2
  404182:	449a      	add	sl, r3
  404184:	4638      	mov	r0, r7
  404186:	e7af      	b.n	4040e8 <two_way_long_needle+0x154>
  404188:	4649      	mov	r1, r9
  40418a:	e78b      	b.n	4040a4 <two_way_long_needle+0x110>
  40418c:	eb05 0008 	add.w	r0, r5, r8
  404190:	e796      	b.n	4040c0 <two_way_long_needle+0x12c>
  404192:	bf00      	nop

00404194 <strstr>:
  404194:	7803      	ldrb	r3, [r0, #0]
  404196:	2b00      	cmp	r3, #0
  404198:	f000 8104 	beq.w	4043a4 <strstr+0x210>
  40419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041a0:	f891 8000 	ldrb.w	r8, [r1]
  4041a4:	b085      	sub	sp, #20
  4041a6:	4644      	mov	r4, r8
  4041a8:	f1b8 0f00 	cmp.w	r8, #0
  4041ac:	d016      	beq.n	4041dc <strstr+0x48>
  4041ae:	4686      	mov	lr, r0
  4041b0:	f101 0c01 	add.w	ip, r1, #1
  4041b4:	2701      	movs	r7, #1
  4041b6:	e003      	b.n	4041c0 <strstr+0x2c>
  4041b8:	f812 4b01 	ldrb.w	r4, [r2], #1
  4041bc:	b16c      	cbz	r4, 4041da <strstr+0x46>
  4041be:	4694      	mov	ip, r2
  4041c0:	429c      	cmp	r4, r3
  4041c2:	bf14      	ite	ne
  4041c4:	2700      	movne	r7, #0
  4041c6:	f007 0701 	andeq.w	r7, r7, #1
  4041ca:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
  4041ce:	4662      	mov	r2, ip
  4041d0:	2b00      	cmp	r3, #0
  4041d2:	d1f1      	bne.n	4041b8 <strstr+0x24>
  4041d4:	f89c 3000 	ldrb.w	r3, [ip]
  4041d8:	bb0b      	cbnz	r3, 40421e <strstr+0x8a>
  4041da:	b117      	cbz	r7, 4041e2 <strstr+0x4e>
  4041dc:	b005      	add	sp, #20
  4041de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041e2:	460e      	mov	r6, r1
  4041e4:	4605      	mov	r5, r0
  4041e6:	4641      	mov	r1, r8
  4041e8:	3001      	adds	r0, #1
  4041ea:	ebc6 040c 	rsb	r4, r6, ip
  4041ee:	f003 fe9b 	bl	407f28 <strchr>
  4041f2:	4607      	mov	r7, r0
  4041f4:	b198      	cbz	r0, 40421e <strstr+0x8a>
  4041f6:	2c01      	cmp	r4, #1
  4041f8:	d0f0      	beq.n	4041dc <strstr+0x48>
  4041fa:	1928      	adds	r0, r5, r4
  4041fc:	4287      	cmp	r7, r0
  4041fe:	bf94      	ite	ls
  404200:	ebc7 0b00 	rsbls	fp, r7, r0
  404204:	f04f 0b01 	movhi.w	fp, #1
  404208:	2c1f      	cmp	r4, #31
  40420a:	d90c      	bls.n	404226 <strstr+0x92>
  40420c:	4623      	mov	r3, r4
  40420e:	4632      	mov	r2, r6
  404210:	4659      	mov	r1, fp
  404212:	4638      	mov	r0, r7
  404214:	f7ff febe 	bl	403f94 <two_way_long_needle>
  404218:	b005      	add	sp, #20
  40421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40421e:	2000      	movs	r0, #0
  404220:	b005      	add	sp, #20
  404222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404226:	aa03      	add	r2, sp, #12
  404228:	4621      	mov	r1, r4
  40422a:	4630      	mov	r0, r6
  40422c:	f7ff fe56 	bl	403edc <critical_factorization>
  404230:	9903      	ldr	r1, [sp, #12]
  404232:	4680      	mov	r8, r0
  404234:	4602      	mov	r2, r0
  404236:	4431      	add	r1, r6
  404238:	4630      	mov	r0, r6
  40423a:	f003 f831 	bl	4072a0 <memcmp>
  40423e:	2800      	cmp	r0, #0
  404240:	d158      	bne.n	4042f4 <strstr+0x160>
  404242:	f108 33ff 	add.w	r3, r8, #4294967295
  404246:	9301      	str	r3, [sp, #4]
  404248:	18f3      	adds	r3, r6, r3
  40424a:	4681      	mov	r9, r0
  40424c:	4605      	mov	r5, r0
  40424e:	9300      	str	r3, [sp, #0]
  404250:	4658      	mov	r0, fp
  404252:	46b2      	mov	sl, r6
  404254:	1966      	adds	r6, r4, r5
  404256:	1a32      	subs	r2, r6, r0
  404258:	2100      	movs	r1, #0
  40425a:	4438      	add	r0, r7
  40425c:	f002 ffd0 	bl	407200 <memchr>
  404260:	2800      	cmp	r0, #0
  404262:	d1dc      	bne.n	40421e <strstr+0x8a>
  404264:	2e00      	cmp	r6, #0
  404266:	d0da      	beq.n	40421e <strstr+0x8a>
  404268:	45c8      	cmp	r8, r9
  40426a:	4643      	mov	r3, r8
  40426c:	bf38      	it	cc
  40426e:	464b      	movcc	r3, r9
  404270:	429c      	cmp	r4, r3
  404272:	d912      	bls.n	40429a <strstr+0x106>
  404274:	195a      	adds	r2, r3, r5
  404276:	f81a 1003 	ldrb.w	r1, [sl, r3]
  40427a:	5cb8      	ldrb	r0, [r7, r2]
  40427c:	4288      	cmp	r0, r1
  40427e:	443a      	add	r2, r7
  404280:	eb0a 0e03 	add.w	lr, sl, r3
  404284:	d006      	beq.n	404294 <strstr+0x100>
  404286:	e02d      	b.n	4042e4 <strstr+0x150>
  404288:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  40428c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404290:	4288      	cmp	r0, r1
  404292:	d127      	bne.n	4042e4 <strstr+0x150>
  404294:	3301      	adds	r3, #1
  404296:	429c      	cmp	r4, r3
  404298:	d8f6      	bhi.n	404288 <strstr+0xf4>
  40429a:	9b01      	ldr	r3, [sp, #4]
  40429c:	45c8      	cmp	r8, r9
  40429e:	4619      	mov	r1, r3
  4042a0:	f240 8083 	bls.w	4043aa <strstr+0x216>
  4042a4:	18ea      	adds	r2, r5, r3
  4042a6:	9800      	ldr	r0, [sp, #0]
  4042a8:	7803      	ldrb	r3, [r0, #0]
  4042aa:	5cb8      	ldrb	r0, [r7, r2]
  4042ac:	4283      	cmp	r3, r0
  4042ae:	443a      	add	r2, r7
  4042b0:	d17b      	bne.n	4043aa <strstr+0x216>
  4042b2:	9b00      	ldr	r3, [sp, #0]
  4042b4:	eb0a 0b09 	add.w	fp, sl, r9
  4042b8:	e006      	b.n	4042c8 <strstr+0x134>
  4042ba:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  4042be:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4042c2:	45f4      	cmp	ip, lr
  4042c4:	d104      	bne.n	4042d0 <strstr+0x13c>
  4042c6:	4601      	mov	r1, r0
  4042c8:	455b      	cmp	r3, fp
  4042ca:	f101 30ff 	add.w	r0, r1, #4294967295
  4042ce:	d1f4      	bne.n	4042ba <strstr+0x126>
  4042d0:	f109 0901 	add.w	r9, r9, #1
  4042d4:	4589      	cmp	r9, r1
  4042d6:	d857      	bhi.n	404388 <strstr+0x1f4>
  4042d8:	9b03      	ldr	r3, [sp, #12]
  4042da:	4630      	mov	r0, r6
  4042dc:	441d      	add	r5, r3
  4042de:	ebc3 0904 	rsb	r9, r3, r4
  4042e2:	e7b7      	b.n	404254 <strstr+0xc0>
  4042e4:	f1c8 0201 	rsb	r2, r8, #1
  4042e8:	4415      	add	r5, r2
  4042ea:	441d      	add	r5, r3
  4042ec:	f04f 0900 	mov.w	r9, #0
  4042f0:	4630      	mov	r0, r6
  4042f2:	e7af      	b.n	404254 <strstr+0xc0>
  4042f4:	ebc8 0304 	rsb	r3, r8, r4
  4042f8:	4543      	cmp	r3, r8
  4042fa:	bf38      	it	cc
  4042fc:	4643      	movcc	r3, r8
  4042fe:	3301      	adds	r3, #1
  404300:	f108 39ff 	add.w	r9, r8, #4294967295
  404304:	9303      	str	r3, [sp, #12]
  404306:	eb06 0309 	add.w	r3, r6, r9
  40430a:	4658      	mov	r0, fp
  40430c:	2500      	movs	r5, #0
  40430e:	46bb      	mov	fp, r7
  404310:	469a      	mov	sl, r3
  404312:	1967      	adds	r7, r4, r5
  404314:	1a3a      	subs	r2, r7, r0
  404316:	2100      	movs	r1, #0
  404318:	4458      	add	r0, fp
  40431a:	f002 ff71 	bl	407200 <memchr>
  40431e:	2800      	cmp	r0, #0
  404320:	f47f af7d 	bne.w	40421e <strstr+0x8a>
  404324:	2f00      	cmp	r7, #0
  404326:	f43f af7a 	beq.w	40421e <strstr+0x8a>
  40432a:	4544      	cmp	r4, r8
  40432c:	d915      	bls.n	40435a <strstr+0x1c6>
  40432e:	eb08 0205 	add.w	r2, r8, r5
  404332:	f816 3008 	ldrb.w	r3, [r6, r8]
  404336:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40433a:	4298      	cmp	r0, r3
  40433c:	445a      	add	r2, fp
  40433e:	eb06 0108 	add.w	r1, r6, r8
  404342:	4643      	mov	r3, r8
  404344:	d006      	beq.n	404354 <strstr+0x1c0>
  404346:	e023      	b.n	404390 <strstr+0x1fc>
  404348:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40434c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404350:	4586      	cmp	lr, r0
  404352:	d11d      	bne.n	404390 <strstr+0x1fc>
  404354:	3301      	adds	r3, #1
  404356:	429c      	cmp	r4, r3
  404358:	d8f6      	bhi.n	404348 <strstr+0x1b4>
  40435a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40435e:	d012      	beq.n	404386 <strstr+0x1f2>
  404360:	eb05 0209 	add.w	r2, r5, r9
  404364:	f89a 1000 	ldrb.w	r1, [sl]
  404368:	f81b 3002 	ldrb.w	r3, [fp, r2]
  40436c:	4299      	cmp	r1, r3
  40436e:	445a      	add	r2, fp
  404370:	d114      	bne.n	40439c <strstr+0x208>
  404372:	4653      	mov	r3, sl
  404374:	e005      	b.n	404382 <strstr+0x1ee>
  404376:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  40437a:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40437e:	4288      	cmp	r0, r1
  404380:	d10c      	bne.n	40439c <strstr+0x208>
  404382:	42b3      	cmp	r3, r6
  404384:	d1f7      	bne.n	404376 <strstr+0x1e2>
  404386:	465f      	mov	r7, fp
  404388:	1978      	adds	r0, r7, r5
  40438a:	b005      	add	sp, #20
  40438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404390:	f1c8 0201 	rsb	r2, r8, #1
  404394:	4415      	add	r5, r2
  404396:	441d      	add	r5, r3
  404398:	4638      	mov	r0, r7
  40439a:	e7ba      	b.n	404312 <strstr+0x17e>
  40439c:	9b03      	ldr	r3, [sp, #12]
  40439e:	4638      	mov	r0, r7
  4043a0:	441d      	add	r5, r3
  4043a2:	e7b6      	b.n	404312 <strstr+0x17e>
  4043a4:	780b      	ldrb	r3, [r1, #0]
  4043a6:	b913      	cbnz	r3, 4043ae <strstr+0x21a>
  4043a8:	4770      	bx	lr
  4043aa:	4641      	mov	r1, r8
  4043ac:	e790      	b.n	4042d0 <strstr+0x13c>
  4043ae:	2000      	movs	r0, #0
  4043b0:	4770      	bx	lr
  4043b2:	bf00      	nop

004043b4 <_svfprintf_r>:
  4043b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043b8:	b0c1      	sub	sp, #260	; 0x104
  4043ba:	460c      	mov	r4, r1
  4043bc:	9109      	str	r1, [sp, #36]	; 0x24
  4043be:	4615      	mov	r5, r2
  4043c0:	930e      	str	r3, [sp, #56]	; 0x38
  4043c2:	900a      	str	r0, [sp, #40]	; 0x28
  4043c4:	f002 fc5e 	bl	406c84 <_localeconv_r>
  4043c8:	6803      	ldr	r3, [r0, #0]
  4043ca:	9317      	str	r3, [sp, #92]	; 0x5c
  4043cc:	4618      	mov	r0, r3
  4043ce:	f7ff fd17 	bl	403e00 <strlen>
  4043d2:	89a3      	ldrh	r3, [r4, #12]
  4043d4:	9016      	str	r0, [sp, #88]	; 0x58
  4043d6:	061e      	lsls	r6, r3, #24
  4043d8:	d503      	bpl.n	4043e2 <_svfprintf_r+0x2e>
  4043da:	6923      	ldr	r3, [r4, #16]
  4043dc:	2b00      	cmp	r3, #0
  4043de:	f001 8119 	beq.w	405614 <_svfprintf_r+0x1260>
  4043e2:	2300      	movs	r3, #0
  4043e4:	461a      	mov	r2, r3
  4043e6:	9312      	str	r3, [sp, #72]	; 0x48
  4043e8:	9325      	str	r3, [sp, #148]	; 0x94
  4043ea:	9324      	str	r3, [sp, #144]	; 0x90
  4043ec:	9319      	str	r3, [sp, #100]	; 0x64
  4043ee:	930b      	str	r3, [sp, #44]	; 0x2c
  4043f0:	f8df a464 	ldr.w	sl, [pc, #1124]	; 404858 <_svfprintf_r+0x4a4>
  4043f4:	9214      	str	r2, [sp, #80]	; 0x50
  4043f6:	ab30      	add	r3, sp, #192	; 0xc0
  4043f8:	9323      	str	r3, [sp, #140]	; 0x8c
  4043fa:	4699      	mov	r9, r3
  4043fc:	9215      	str	r2, [sp, #84]	; 0x54
  4043fe:	46a8      	mov	r8, r5
  404400:	f898 3000 	ldrb.w	r3, [r8]
  404404:	4644      	mov	r4, r8
  404406:	b1eb      	cbz	r3, 404444 <_svfprintf_r+0x90>
  404408:	2b25      	cmp	r3, #37	; 0x25
  40440a:	d102      	bne.n	404412 <_svfprintf_r+0x5e>
  40440c:	e01a      	b.n	404444 <_svfprintf_r+0x90>
  40440e:	2b25      	cmp	r3, #37	; 0x25
  404410:	d003      	beq.n	40441a <_svfprintf_r+0x66>
  404412:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404416:	2b00      	cmp	r3, #0
  404418:	d1f9      	bne.n	40440e <_svfprintf_r+0x5a>
  40441a:	ebc8 0504 	rsb	r5, r8, r4
  40441e:	b18d      	cbz	r5, 404444 <_svfprintf_r+0x90>
  404420:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404422:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404424:	f8c9 8000 	str.w	r8, [r9]
  404428:	3301      	adds	r3, #1
  40442a:	442a      	add	r2, r5
  40442c:	2b07      	cmp	r3, #7
  40442e:	f8c9 5004 	str.w	r5, [r9, #4]
  404432:	9225      	str	r2, [sp, #148]	; 0x94
  404434:	9324      	str	r3, [sp, #144]	; 0x90
  404436:	f300 80a6 	bgt.w	404586 <_svfprintf_r+0x1d2>
  40443a:	f109 0908 	add.w	r9, r9, #8
  40443e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404440:	442b      	add	r3, r5
  404442:	930b      	str	r3, [sp, #44]	; 0x2c
  404444:	7823      	ldrb	r3, [r4, #0]
  404446:	2b00      	cmp	r3, #0
  404448:	f000 80a6 	beq.w	404598 <_svfprintf_r+0x1e4>
  40444c:	2300      	movs	r3, #0
  40444e:	461a      	mov	r2, r3
  404450:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404454:	4619      	mov	r1, r3
  404456:	930c      	str	r3, [sp, #48]	; 0x30
  404458:	9307      	str	r3, [sp, #28]
  40445a:	f04f 3bff 	mov.w	fp, #4294967295
  40445e:	7863      	ldrb	r3, [r4, #1]
  404460:	f104 0801 	add.w	r8, r4, #1
  404464:	465d      	mov	r5, fp
  404466:	f108 0801 	add.w	r8, r8, #1
  40446a:	f1a3 0020 	sub.w	r0, r3, #32
  40446e:	2858      	cmp	r0, #88	; 0x58
  404470:	f200 8425 	bhi.w	404cbe <_svfprintf_r+0x90a>
  404474:	e8df f010 	tbh	[pc, r0, lsl #1]
  404478:	04230388 	.word	0x04230388
  40447c:	03900423 	.word	0x03900423
  404480:	04230423 	.word	0x04230423
  404484:	04230423 	.word	0x04230423
  404488:	04230423 	.word	0x04230423
  40448c:	03a50397 	.word	0x03a50397
  404490:	005d0423 	.word	0x005d0423
  404494:	042300e2 	.word	0x042300e2
  404498:	010500fe 	.word	0x010500fe
  40449c:	01050105 	.word	0x01050105
  4044a0:	01050105 	.word	0x01050105
  4044a4:	01050105 	.word	0x01050105
  4044a8:	01050105 	.word	0x01050105
  4044ac:	04230423 	.word	0x04230423
  4044b0:	04230423 	.word	0x04230423
  4044b4:	04230423 	.word	0x04230423
  4044b8:	04230423 	.word	0x04230423
  4044bc:	04230423 	.word	0x04230423
  4044c0:	02810115 	.word	0x02810115
  4044c4:	02810423 	.word	0x02810423
  4044c8:	04230423 	.word	0x04230423
  4044cc:	04230423 	.word	0x04230423
  4044d0:	042302c6 	.word	0x042302c6
  4044d4:	02cd0423 	.word	0x02cd0423
  4044d8:	04230423 	.word	0x04230423
  4044dc:	04230423 	.word	0x04230423
  4044e0:	02f70423 	.word	0x02f70423
  4044e4:	04230423 	.word	0x04230423
  4044e8:	04230325 	.word	0x04230325
  4044ec:	04230423 	.word	0x04230423
  4044f0:	04230423 	.word	0x04230423
  4044f4:	04230423 	.word	0x04230423
  4044f8:	04230423 	.word	0x04230423
  4044fc:	03660423 	.word	0x03660423
  404500:	02810379 	.word	0x02810379
  404504:	02810281 	.word	0x02810281
  404508:	03790381 	.word	0x03790381
  40450c:	04230423 	.word	0x04230423
  404510:	042303d1 	.word	0x042303d1
  404514:	00a303db 	.word	0x00a303db
  404518:	03ee0064 	.word	0x03ee0064
  40451c:	03f50423 	.word	0x03f50423
  404520:	03aa0423 	.word	0x03aa0423
  404524:	04230423 	.word	0x04230423
  404528:	03bc      	.short	0x03bc
  40452a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40452c:	930e      	str	r3, [sp, #56]	; 0x38
  40452e:	4240      	negs	r0, r0
  404530:	900c      	str	r0, [sp, #48]	; 0x30
  404532:	9b07      	ldr	r3, [sp, #28]
  404534:	f043 0304 	orr.w	r3, r3, #4
  404538:	9307      	str	r3, [sp, #28]
  40453a:	f898 3000 	ldrb.w	r3, [r8]
  40453e:	e792      	b.n	404466 <_svfprintf_r+0xb2>
  404540:	980e      	ldr	r0, [sp, #56]	; 0x38
  404542:	46ab      	mov	fp, r5
  404544:	2100      	movs	r1, #0
  404546:	6804      	ldr	r4, [r0, #0]
  404548:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40454c:	1d07      	adds	r7, r0, #4
  40454e:	9807      	ldr	r0, [sp, #28]
  404550:	2330      	movs	r3, #48	; 0x30
  404552:	2278      	movs	r2, #120	; 0x78
  404554:	458b      	cmp	fp, r1
  404556:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40455a:	f04f 0500 	mov.w	r5, #0
  40455e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  404562:	f040 0302 	orr.w	r3, r0, #2
  404566:	f2c0 83c7 	blt.w	404cf8 <_svfprintf_r+0x944>
  40456a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  40456e:	f043 0302 	orr.w	r3, r3, #2
  404572:	9307      	str	r3, [sp, #28]
  404574:	ea54 0305 	orrs.w	r3, r4, r5
  404578:	970e      	str	r7, [sp, #56]	; 0x38
  40457a:	f000 8393 	beq.w	404ca4 <_svfprintf_r+0x8f0>
  40457e:	460f      	mov	r7, r1
  404580:	9211      	str	r2, [sp, #68]	; 0x44
  404582:	48b3      	ldr	r0, [pc, #716]	; (404850 <_svfprintf_r+0x49c>)
  404584:	e2ce      	b.n	404b24 <_svfprintf_r+0x770>
  404586:	aa23      	add	r2, sp, #140	; 0x8c
  404588:	9909      	ldr	r1, [sp, #36]	; 0x24
  40458a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40458c:	f003 fd34 	bl	407ff8 <__ssprint_r>
  404590:	b948      	cbnz	r0, 4045a6 <_svfprintf_r+0x1f2>
  404592:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404596:	e752      	b.n	40443e <_svfprintf_r+0x8a>
  404598:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40459a:	b123      	cbz	r3, 4045a6 <_svfprintf_r+0x1f2>
  40459c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40459e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045a0:	aa23      	add	r2, sp, #140	; 0x8c
  4045a2:	f003 fd29 	bl	407ff8 <__ssprint_r>
  4045a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4045a8:	899b      	ldrh	r3, [r3, #12]
  4045aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4045ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4045b0:	bf18      	it	ne
  4045b2:	f04f 33ff 	movne.w	r3, #4294967295
  4045b6:	4618      	mov	r0, r3
  4045b8:	b041      	add	sp, #260	; 0x104
  4045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045be:	9311      	str	r3, [sp, #68]	; 0x44
  4045c0:	46ab      	mov	fp, r5
  4045c2:	2a00      	cmp	r2, #0
  4045c4:	f041 8223 	bne.w	405a0e <_svfprintf_r+0x165a>
  4045c8:	9a07      	ldr	r2, [sp, #28]
  4045ca:	f012 0320 	ands.w	r3, r2, #32
  4045ce:	f000 822e 	beq.w	404a2e <_svfprintf_r+0x67a>
  4045d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4045d4:	3707      	adds	r7, #7
  4045d6:	f027 0307 	bic.w	r3, r7, #7
  4045da:	2700      	movs	r7, #0
  4045dc:	f103 0108 	add.w	r1, r3, #8
  4045e0:	45bb      	cmp	fp, r7
  4045e2:	910e      	str	r1, [sp, #56]	; 0x38
  4045e4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4045e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4045ec:	f2c0 8752 	blt.w	405494 <_svfprintf_r+0x10e0>
  4045f0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4045f4:	9307      	str	r3, [sp, #28]
  4045f6:	ea54 0305 	orrs.w	r3, r4, r5
  4045fa:	f000 8375 	beq.w	404ce8 <_svfprintf_r+0x934>
  4045fe:	ae30      	add	r6, sp, #192	; 0xc0
  404600:	08e2      	lsrs	r2, r4, #3
  404602:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404606:	08e9      	lsrs	r1, r5, #3
  404608:	f004 0307 	and.w	r3, r4, #7
  40460c:	460d      	mov	r5, r1
  40460e:	4614      	mov	r4, r2
  404610:	3330      	adds	r3, #48	; 0x30
  404612:	ea54 0205 	orrs.w	r2, r4, r5
  404616:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40461a:	d1f1      	bne.n	404600 <_svfprintf_r+0x24c>
  40461c:	9a07      	ldr	r2, [sp, #28]
  40461e:	07d1      	lsls	r1, r2, #31
  404620:	f140 8084 	bpl.w	40472c <_svfprintf_r+0x378>
  404624:	2b30      	cmp	r3, #48	; 0x30
  404626:	f000 8081 	beq.w	40472c <_svfprintf_r+0x378>
  40462a:	2230      	movs	r2, #48	; 0x30
  40462c:	1e73      	subs	r3, r6, #1
  40462e:	f806 2c01 	strb.w	r2, [r6, #-1]
  404632:	aa30      	add	r2, sp, #192	; 0xc0
  404634:	1ad2      	subs	r2, r2, r3
  404636:	920d      	str	r2, [sp, #52]	; 0x34
  404638:	461e      	mov	r6, r3
  40463a:	e07a      	b.n	404732 <_svfprintf_r+0x37e>
  40463c:	f898 3000 	ldrb.w	r3, [r8]
  404640:	2b2a      	cmp	r3, #42	; 0x2a
  404642:	f108 0401 	add.w	r4, r8, #1
  404646:	f001 81b1 	beq.w	4059ac <_svfprintf_r+0x15f8>
  40464a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40464e:	2809      	cmp	r0, #9
  404650:	bf98      	it	ls
  404652:	2500      	movls	r5, #0
  404654:	f201 8164 	bhi.w	405920 <_svfprintf_r+0x156c>
  404658:	f814 3b01 	ldrb.w	r3, [r4], #1
  40465c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404660:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  404664:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404668:	2809      	cmp	r0, #9
  40466a:	d9f5      	bls.n	404658 <_svfprintf_r+0x2a4>
  40466c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  404670:	46a0      	mov	r8, r4
  404672:	e6fa      	b.n	40446a <_svfprintf_r+0xb6>
  404674:	9b07      	ldr	r3, [sp, #28]
  404676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40467a:	9307      	str	r3, [sp, #28]
  40467c:	f898 3000 	ldrb.w	r3, [r8]
  404680:	e6f1      	b.n	404466 <_svfprintf_r+0xb2>
  404682:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404686:	2300      	movs	r3, #0
  404688:	461c      	mov	r4, r3
  40468a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40468e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404692:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404696:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40469a:	2809      	cmp	r0, #9
  40469c:	d9f5      	bls.n	40468a <_svfprintf_r+0x2d6>
  40469e:	940c      	str	r4, [sp, #48]	; 0x30
  4046a0:	e6e3      	b.n	40446a <_svfprintf_r+0xb6>
  4046a2:	9311      	str	r3, [sp, #68]	; 0x44
  4046a4:	46ab      	mov	fp, r5
  4046a6:	2a00      	cmp	r2, #0
  4046a8:	f041 81c9 	bne.w	405a3e <_svfprintf_r+0x168a>
  4046ac:	9b07      	ldr	r3, [sp, #28]
  4046ae:	f043 0310 	orr.w	r3, r3, #16
  4046b2:	9307      	str	r3, [sp, #28]
  4046b4:	9b07      	ldr	r3, [sp, #28]
  4046b6:	0698      	lsls	r0, r3, #26
  4046b8:	f140 8530 	bpl.w	40511c <_svfprintf_r+0xd68>
  4046bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4046be:	3707      	adds	r7, #7
  4046c0:	f027 0707 	bic.w	r7, r7, #7
  4046c4:	e9d7 2300 	ldrd	r2, r3, [r7]
  4046c8:	f107 0108 	add.w	r1, r7, #8
  4046cc:	910e      	str	r1, [sp, #56]	; 0x38
  4046ce:	4614      	mov	r4, r2
  4046d0:	461d      	mov	r5, r3
  4046d2:	2a00      	cmp	r2, #0
  4046d4:	f173 0300 	sbcs.w	r3, r3, #0
  4046d8:	f2c0 855b 	blt.w	405192 <_svfprintf_r+0xdde>
  4046dc:	f1bb 0f00 	cmp.w	fp, #0
  4046e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4046e4:	f2c0 8538 	blt.w	405158 <_svfprintf_r+0xda4>
  4046e8:	9b07      	ldr	r3, [sp, #28]
  4046ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4046ee:	9307      	str	r3, [sp, #28]
  4046f0:	ea54 0305 	orrs.w	r3, r4, r5
  4046f4:	f000 81db 	beq.w	404aae <_svfprintf_r+0x6fa>
  4046f8:	2d00      	cmp	r5, #0
  4046fa:	bf08      	it	eq
  4046fc:	2c0a      	cmpeq	r4, #10
  4046fe:	f0c0 81db 	bcc.w	404ab8 <_svfprintf_r+0x704>
  404702:	ae30      	add	r6, sp, #192	; 0xc0
  404704:	4620      	mov	r0, r4
  404706:	4629      	mov	r1, r5
  404708:	220a      	movs	r2, #10
  40470a:	2300      	movs	r3, #0
  40470c:	f7ff f948 	bl	4039a0 <__aeabi_uldivmod>
  404710:	3230      	adds	r2, #48	; 0x30
  404712:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404716:	4620      	mov	r0, r4
  404718:	4629      	mov	r1, r5
  40471a:	2300      	movs	r3, #0
  40471c:	220a      	movs	r2, #10
  40471e:	f7ff f93f 	bl	4039a0 <__aeabi_uldivmod>
  404722:	4604      	mov	r4, r0
  404724:	460d      	mov	r5, r1
  404726:	ea54 0305 	orrs.w	r3, r4, r5
  40472a:	d1eb      	bne.n	404704 <_svfprintf_r+0x350>
  40472c:	ab30      	add	r3, sp, #192	; 0xc0
  40472e:	1b9b      	subs	r3, r3, r6
  404730:	930d      	str	r3, [sp, #52]	; 0x34
  404732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404734:	455b      	cmp	r3, fp
  404736:	bfb8      	it	lt
  404738:	465b      	movlt	r3, fp
  40473a:	9308      	str	r3, [sp, #32]
  40473c:	2300      	movs	r3, #0
  40473e:	9313      	str	r3, [sp, #76]	; 0x4c
  404740:	b117      	cbz	r7, 404748 <_svfprintf_r+0x394>
  404742:	9b08      	ldr	r3, [sp, #32]
  404744:	3301      	adds	r3, #1
  404746:	9308      	str	r3, [sp, #32]
  404748:	9b07      	ldr	r3, [sp, #28]
  40474a:	f013 0302 	ands.w	r3, r3, #2
  40474e:	930f      	str	r3, [sp, #60]	; 0x3c
  404750:	d002      	beq.n	404758 <_svfprintf_r+0x3a4>
  404752:	9b08      	ldr	r3, [sp, #32]
  404754:	3302      	adds	r3, #2
  404756:	9308      	str	r3, [sp, #32]
  404758:	9b07      	ldr	r3, [sp, #28]
  40475a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40475e:	9310      	str	r3, [sp, #64]	; 0x40
  404760:	f040 82d7 	bne.w	404d12 <_svfprintf_r+0x95e>
  404764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404766:	9a08      	ldr	r2, [sp, #32]
  404768:	1a9d      	subs	r5, r3, r2
  40476a:	2d00      	cmp	r5, #0
  40476c:	f340 82d1 	ble.w	404d12 <_svfprintf_r+0x95e>
  404770:	2d10      	cmp	r5, #16
  404772:	9925      	ldr	r1, [sp, #148]	; 0x94
  404774:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404776:	4f37      	ldr	r7, [pc, #220]	; (404854 <_svfprintf_r+0x4a0>)
  404778:	dd27      	ble.n	4047ca <_svfprintf_r+0x416>
  40477a:	9618      	str	r6, [sp, #96]	; 0x60
  40477c:	4648      	mov	r0, r9
  40477e:	2410      	movs	r4, #16
  404780:	46b9      	mov	r9, r7
  404782:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404784:	462f      	mov	r7, r5
  404786:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404788:	e004      	b.n	404794 <_svfprintf_r+0x3e0>
  40478a:	3f10      	subs	r7, #16
  40478c:	2f10      	cmp	r7, #16
  40478e:	f100 0008 	add.w	r0, r0, #8
  404792:	dd16      	ble.n	4047c2 <_svfprintf_r+0x40e>
  404794:	3201      	adds	r2, #1
  404796:	4b2f      	ldr	r3, [pc, #188]	; (404854 <_svfprintf_r+0x4a0>)
  404798:	9224      	str	r2, [sp, #144]	; 0x90
  40479a:	3110      	adds	r1, #16
  40479c:	2a07      	cmp	r2, #7
  40479e:	9125      	str	r1, [sp, #148]	; 0x94
  4047a0:	e880 0018 	stmia.w	r0, {r3, r4}
  4047a4:	ddf1      	ble.n	40478a <_svfprintf_r+0x3d6>
  4047a6:	aa23      	add	r2, sp, #140	; 0x8c
  4047a8:	4631      	mov	r1, r6
  4047aa:	4628      	mov	r0, r5
  4047ac:	f003 fc24 	bl	407ff8 <__ssprint_r>
  4047b0:	2800      	cmp	r0, #0
  4047b2:	f47f aef8 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4047b6:	3f10      	subs	r7, #16
  4047b8:	2f10      	cmp	r7, #16
  4047ba:	9925      	ldr	r1, [sp, #148]	; 0x94
  4047bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4047be:	a830      	add	r0, sp, #192	; 0xc0
  4047c0:	dce8      	bgt.n	404794 <_svfprintf_r+0x3e0>
  4047c2:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4047c4:	463d      	mov	r5, r7
  4047c6:	464f      	mov	r7, r9
  4047c8:	4681      	mov	r9, r0
  4047ca:	3201      	adds	r2, #1
  4047cc:	186c      	adds	r4, r5, r1
  4047ce:	2a07      	cmp	r2, #7
  4047d0:	9425      	str	r4, [sp, #148]	; 0x94
  4047d2:	9224      	str	r2, [sp, #144]	; 0x90
  4047d4:	f8c9 7000 	str.w	r7, [r9]
  4047d8:	f8c9 5004 	str.w	r5, [r9, #4]
  4047dc:	f300 8428 	bgt.w	405030 <_svfprintf_r+0xc7c>
  4047e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4047e4:	f109 0908 	add.w	r9, r9, #8
  4047e8:	b177      	cbz	r7, 404808 <_svfprintf_r+0x454>
  4047ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047ec:	3301      	adds	r3, #1
  4047ee:	3401      	adds	r4, #1
  4047f0:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4047f4:	2201      	movs	r2, #1
  4047f6:	2b07      	cmp	r3, #7
  4047f8:	9425      	str	r4, [sp, #148]	; 0x94
  4047fa:	9324      	str	r3, [sp, #144]	; 0x90
  4047fc:	e889 0006 	stmia.w	r9, {r1, r2}
  404800:	f300 83a0 	bgt.w	404f44 <_svfprintf_r+0xb90>
  404804:	f109 0908 	add.w	r9, r9, #8
  404808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40480a:	b16b      	cbz	r3, 404828 <_svfprintf_r+0x474>
  40480c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40480e:	3301      	adds	r3, #1
  404810:	3402      	adds	r4, #2
  404812:	a91c      	add	r1, sp, #112	; 0x70
  404814:	2202      	movs	r2, #2
  404816:	2b07      	cmp	r3, #7
  404818:	9425      	str	r4, [sp, #148]	; 0x94
  40481a:	9324      	str	r3, [sp, #144]	; 0x90
  40481c:	e889 0006 	stmia.w	r9, {r1, r2}
  404820:	f300 839c 	bgt.w	404f5c <_svfprintf_r+0xba8>
  404824:	f109 0908 	add.w	r9, r9, #8
  404828:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40482a:	2b80      	cmp	r3, #128	; 0x80
  40482c:	f000 82d5 	beq.w	404dda <_svfprintf_r+0xa26>
  404830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404832:	ebc3 070b 	rsb	r7, r3, fp
  404836:	2f00      	cmp	r7, #0
  404838:	dd39      	ble.n	4048ae <_svfprintf_r+0x4fa>
  40483a:	4a07      	ldr	r2, [pc, #28]	; (404858 <_svfprintf_r+0x4a4>)
  40483c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40483e:	920f      	str	r2, [sp, #60]	; 0x3c
  404840:	2f10      	cmp	r7, #16
  404842:	dd28      	ble.n	404896 <_svfprintf_r+0x4e2>
  404844:	4622      	mov	r2, r4
  404846:	f04f 0b10 	mov.w	fp, #16
  40484a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40484c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40484e:	e00a      	b.n	404866 <_svfprintf_r+0x4b2>
  404850:	004099e0 	.word	0x004099e0
  404854:	00409a00 	.word	0x00409a00
  404858:	004099ac 	.word	0x004099ac
  40485c:	3f10      	subs	r7, #16
  40485e:	2f10      	cmp	r7, #16
  404860:	f109 0908 	add.w	r9, r9, #8
  404864:	dd16      	ble.n	404894 <_svfprintf_r+0x4e0>
  404866:	3301      	adds	r3, #1
  404868:	3210      	adds	r2, #16
  40486a:	2b07      	cmp	r3, #7
  40486c:	9225      	str	r2, [sp, #148]	; 0x94
  40486e:	9324      	str	r3, [sp, #144]	; 0x90
  404870:	e889 0c00 	stmia.w	r9, {sl, fp}
  404874:	ddf2      	ble.n	40485c <_svfprintf_r+0x4a8>
  404876:	aa23      	add	r2, sp, #140	; 0x8c
  404878:	4621      	mov	r1, r4
  40487a:	4628      	mov	r0, r5
  40487c:	f003 fbbc 	bl	407ff8 <__ssprint_r>
  404880:	2800      	cmp	r0, #0
  404882:	f47f ae90 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404886:	3f10      	subs	r7, #16
  404888:	2f10      	cmp	r7, #16
  40488a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40488c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40488e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404892:	dce8      	bgt.n	404866 <_svfprintf_r+0x4b2>
  404894:	4614      	mov	r4, r2
  404896:	3301      	adds	r3, #1
  404898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40489a:	9324      	str	r3, [sp, #144]	; 0x90
  40489c:	443c      	add	r4, r7
  40489e:	2b07      	cmp	r3, #7
  4048a0:	9425      	str	r4, [sp, #148]	; 0x94
  4048a2:	e889 0084 	stmia.w	r9, {r2, r7}
  4048a6:	f300 8341 	bgt.w	404f2c <_svfprintf_r+0xb78>
  4048aa:	f109 0908 	add.w	r9, r9, #8
  4048ae:	9b07      	ldr	r3, [sp, #28]
  4048b0:	05da      	lsls	r2, r3, #23
  4048b2:	f100 8230 	bmi.w	404d16 <_svfprintf_r+0x962>
  4048b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048b8:	990d      	ldr	r1, [sp, #52]	; 0x34
  4048ba:	f8c9 6000 	str.w	r6, [r9]
  4048be:	3301      	adds	r3, #1
  4048c0:	440c      	add	r4, r1
  4048c2:	2b07      	cmp	r3, #7
  4048c4:	9425      	str	r4, [sp, #148]	; 0x94
  4048c6:	f8c9 1004 	str.w	r1, [r9, #4]
  4048ca:	9324      	str	r3, [sp, #144]	; 0x90
  4048cc:	f300 8318 	bgt.w	404f00 <_svfprintf_r+0xb4c>
  4048d0:	f109 0908 	add.w	r9, r9, #8
  4048d4:	9b07      	ldr	r3, [sp, #28]
  4048d6:	0759      	lsls	r1, r3, #29
  4048d8:	d53f      	bpl.n	40495a <_svfprintf_r+0x5a6>
  4048da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4048dc:	9a08      	ldr	r2, [sp, #32]
  4048de:	1a9d      	subs	r5, r3, r2
  4048e0:	2d00      	cmp	r5, #0
  4048e2:	dd3a      	ble.n	40495a <_svfprintf_r+0x5a6>
  4048e4:	2d10      	cmp	r5, #16
  4048e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048e8:	4fbc      	ldr	r7, [pc, #752]	; (404bdc <_svfprintf_r+0x828>)
  4048ea:	dd23      	ble.n	404934 <_svfprintf_r+0x580>
  4048ec:	4622      	mov	r2, r4
  4048ee:	2610      	movs	r6, #16
  4048f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4048f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4048f6:	e004      	b.n	404902 <_svfprintf_r+0x54e>
  4048f8:	3d10      	subs	r5, #16
  4048fa:	2d10      	cmp	r5, #16
  4048fc:	f109 0908 	add.w	r9, r9, #8
  404900:	dd17      	ble.n	404932 <_svfprintf_r+0x57e>
  404902:	3301      	adds	r3, #1
  404904:	49b5      	ldr	r1, [pc, #724]	; (404bdc <_svfprintf_r+0x828>)
  404906:	9324      	str	r3, [sp, #144]	; 0x90
  404908:	3210      	adds	r2, #16
  40490a:	2b07      	cmp	r3, #7
  40490c:	9225      	str	r2, [sp, #148]	; 0x94
  40490e:	e889 0042 	stmia.w	r9, {r1, r6}
  404912:	ddf1      	ble.n	4048f8 <_svfprintf_r+0x544>
  404914:	aa23      	add	r2, sp, #140	; 0x8c
  404916:	4621      	mov	r1, r4
  404918:	4658      	mov	r0, fp
  40491a:	f003 fb6d 	bl	407ff8 <__ssprint_r>
  40491e:	2800      	cmp	r0, #0
  404920:	f47f ae41 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404924:	3d10      	subs	r5, #16
  404926:	2d10      	cmp	r5, #16
  404928:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40492a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40492c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404930:	dce7      	bgt.n	404902 <_svfprintf_r+0x54e>
  404932:	4614      	mov	r4, r2
  404934:	3301      	adds	r3, #1
  404936:	442c      	add	r4, r5
  404938:	2b07      	cmp	r3, #7
  40493a:	9425      	str	r4, [sp, #148]	; 0x94
  40493c:	9324      	str	r3, [sp, #144]	; 0x90
  40493e:	f8c9 7000 	str.w	r7, [r9]
  404942:	f8c9 5004 	str.w	r5, [r9, #4]
  404946:	dd08      	ble.n	40495a <_svfprintf_r+0x5a6>
  404948:	aa23      	add	r2, sp, #140	; 0x8c
  40494a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40494c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40494e:	f003 fb53 	bl	407ff8 <__ssprint_r>
  404952:	2800      	cmp	r0, #0
  404954:	f47f ae27 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404958:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40495a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40495c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40495e:	9908      	ldr	r1, [sp, #32]
  404960:	428a      	cmp	r2, r1
  404962:	bfac      	ite	ge
  404964:	189b      	addge	r3, r3, r2
  404966:	185b      	addlt	r3, r3, r1
  404968:	930b      	str	r3, [sp, #44]	; 0x2c
  40496a:	2c00      	cmp	r4, #0
  40496c:	f040 82d4 	bne.w	404f18 <_svfprintf_r+0xb64>
  404970:	2300      	movs	r3, #0
  404972:	9324      	str	r3, [sp, #144]	; 0x90
  404974:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404978:	e542      	b.n	404400 <_svfprintf_r+0x4c>
  40497a:	9311      	str	r3, [sp, #68]	; 0x44
  40497c:	46ab      	mov	fp, r5
  40497e:	2a00      	cmp	r2, #0
  404980:	f041 8059 	bne.w	405a36 <_svfprintf_r+0x1682>
  404984:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404986:	3707      	adds	r7, #7
  404988:	f027 0307 	bic.w	r3, r7, #7
  40498c:	f103 0208 	add.w	r2, r3, #8
  404990:	920e      	str	r2, [sp, #56]	; 0x38
  404992:	681a      	ldr	r2, [r3, #0]
  404994:	9214      	str	r2, [sp, #80]	; 0x50
  404996:	685b      	ldr	r3, [r3, #4]
  404998:	9315      	str	r3, [sp, #84]	; 0x54
  40499a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40499c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40499e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4049a2:	4628      	mov	r0, r5
  4049a4:	4621      	mov	r1, r4
  4049a6:	f04f 32ff 	mov.w	r2, #4294967295
  4049aa:	4b8d      	ldr	r3, [pc, #564]	; (404be0 <_svfprintf_r+0x82c>)
  4049ac:	f004 f878 	bl	408aa0 <__aeabi_dcmpun>
  4049b0:	2800      	cmp	r0, #0
  4049b2:	f040 84c1 	bne.w	405338 <_svfprintf_r+0xf84>
  4049b6:	4628      	mov	r0, r5
  4049b8:	4621      	mov	r1, r4
  4049ba:	f04f 32ff 	mov.w	r2, #4294967295
  4049be:	4b88      	ldr	r3, [pc, #544]	; (404be0 <_svfprintf_r+0x82c>)
  4049c0:	f004 f850 	bl	408a64 <__aeabi_dcmple>
  4049c4:	2800      	cmp	r0, #0
  4049c6:	f040 84b7 	bne.w	405338 <_svfprintf_r+0xf84>
  4049ca:	9814      	ldr	r0, [sp, #80]	; 0x50
  4049cc:	9915      	ldr	r1, [sp, #84]	; 0x54
  4049ce:	2200      	movs	r2, #0
  4049d0:	2300      	movs	r3, #0
  4049d2:	f004 f83d 	bl	408a50 <__aeabi_dcmplt>
  4049d6:	2800      	cmp	r0, #0
  4049d8:	f040 874b 	bne.w	405872 <_svfprintf_r+0x14be>
  4049dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4049e0:	4e80      	ldr	r6, [pc, #512]	; (404be4 <_svfprintf_r+0x830>)
  4049e2:	4b81      	ldr	r3, [pc, #516]	; (404be8 <_svfprintf_r+0x834>)
  4049e4:	9907      	ldr	r1, [sp, #28]
  4049e6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  4049ea:	9107      	str	r1, [sp, #28]
  4049ec:	9911      	ldr	r1, [sp, #68]	; 0x44
  4049ee:	2203      	movs	r2, #3
  4049f0:	f04f 0b00 	mov.w	fp, #0
  4049f4:	9208      	str	r2, [sp, #32]
  4049f6:	2947      	cmp	r1, #71	; 0x47
  4049f8:	bfd8      	it	le
  4049fa:	461e      	movle	r6, r3
  4049fc:	920d      	str	r2, [sp, #52]	; 0x34
  4049fe:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404a02:	e69d      	b.n	404740 <_svfprintf_r+0x38c>
  404a04:	9b07      	ldr	r3, [sp, #28]
  404a06:	f043 0308 	orr.w	r3, r3, #8
  404a0a:	9307      	str	r3, [sp, #28]
  404a0c:	f898 3000 	ldrb.w	r3, [r8]
  404a10:	e529      	b.n	404466 <_svfprintf_r+0xb2>
  404a12:	9311      	str	r3, [sp, #68]	; 0x44
  404a14:	46ab      	mov	fp, r5
  404a16:	2a00      	cmp	r2, #0
  404a18:	f041 8009 	bne.w	405a2e <_svfprintf_r+0x167a>
  404a1c:	9b07      	ldr	r3, [sp, #28]
  404a1e:	f043 0310 	orr.w	r3, r3, #16
  404a22:	9307      	str	r3, [sp, #28]
  404a24:	9a07      	ldr	r2, [sp, #28]
  404a26:	f012 0320 	ands.w	r3, r2, #32
  404a2a:	f47f add2 	bne.w	4045d2 <_svfprintf_r+0x21e>
  404a2e:	9907      	ldr	r1, [sp, #28]
  404a30:	f011 0210 	ands.w	r2, r1, #16
  404a34:	f000 8507 	beq.w	405446 <_svfprintf_r+0x1092>
  404a38:	980e      	ldr	r0, [sp, #56]	; 0x38
  404a3a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404a3e:	f1bb 0f00 	cmp.w	fp, #0
  404a42:	6804      	ldr	r4, [r0, #0]
  404a44:	f100 0704 	add.w	r7, r0, #4
  404a48:	f04f 0500 	mov.w	r5, #0
  404a4c:	f2c0 8521 	blt.w	405492 <_svfprintf_r+0x10de>
  404a50:	460a      	mov	r2, r1
  404a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404a56:	9207      	str	r2, [sp, #28]
  404a58:	ea54 0205 	orrs.w	r2, r4, r5
  404a5c:	970e      	str	r7, [sp, #56]	; 0x38
  404a5e:	f000 8143 	beq.w	404ce8 <_svfprintf_r+0x934>
  404a62:	461f      	mov	r7, r3
  404a64:	e5cb      	b.n	4045fe <_svfprintf_r+0x24a>
  404a66:	9311      	str	r3, [sp, #68]	; 0x44
  404a68:	46ab      	mov	fp, r5
  404a6a:	2a00      	cmp	r2, #0
  404a6c:	f040 87d7 	bne.w	405a1e <_svfprintf_r+0x166a>
  404a70:	9b07      	ldr	r3, [sp, #28]
  404a72:	f043 0310 	orr.w	r3, r3, #16
  404a76:	9307      	str	r3, [sp, #28]
  404a78:	9a07      	ldr	r2, [sp, #28]
  404a7a:	f012 0320 	ands.w	r3, r2, #32
  404a7e:	f000 8332 	beq.w	4050e6 <_svfprintf_r+0xd32>
  404a82:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404a84:	3707      	adds	r7, #7
  404a86:	f027 0307 	bic.w	r3, r7, #7
  404a8a:	2700      	movs	r7, #0
  404a8c:	f103 0108 	add.w	r1, r3, #8
  404a90:	45bb      	cmp	fp, r7
  404a92:	910e      	str	r1, [sp, #56]	; 0x38
  404a94:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a98:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404a9c:	f2c0 835c 	blt.w	405158 <_svfprintf_r+0xda4>
  404aa0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404aa4:	9307      	str	r3, [sp, #28]
  404aa6:	ea54 0305 	orrs.w	r3, r4, r5
  404aaa:	f47f ae25 	bne.w	4046f8 <_svfprintf_r+0x344>
  404aae:	f1bb 0f00 	cmp.w	fp, #0
  404ab2:	f000 80fe 	beq.w	404cb2 <_svfprintf_r+0x8fe>
  404ab6:	2400      	movs	r4, #0
  404ab8:	ae40      	add	r6, sp, #256	; 0x100
  404aba:	3430      	adds	r4, #48	; 0x30
  404abc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404ac0:	e634      	b.n	40472c <_svfprintf_r+0x378>
  404ac2:	9311      	str	r3, [sp, #68]	; 0x44
  404ac4:	46ab      	mov	fp, r5
  404ac6:	2a00      	cmp	r2, #0
  404ac8:	f040 87a5 	bne.w	405a16 <_svfprintf_r+0x1662>
  404acc:	9b07      	ldr	r3, [sp, #28]
  404ace:	4847      	ldr	r0, [pc, #284]	; (404bec <_svfprintf_r+0x838>)
  404ad0:	069d      	lsls	r5, r3, #26
  404ad2:	f140 8097 	bpl.w	404c04 <_svfprintf_r+0x850>
  404ad6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404ad8:	3707      	adds	r7, #7
  404ada:	f027 0307 	bic.w	r3, r7, #7
  404ade:	e9d3 4500 	ldrd	r4, r5, [r3]
  404ae2:	f103 0208 	add.w	r2, r3, #8
  404ae6:	920e      	str	r2, [sp, #56]	; 0x38
  404ae8:	9a07      	ldr	r2, [sp, #28]
  404aea:	f012 0701 	ands.w	r7, r2, #1
  404aee:	f000 8241 	beq.w	404f74 <_svfprintf_r+0xbc0>
  404af2:	ea54 0305 	orrs.w	r3, r4, r5
  404af6:	f000 84f5 	beq.w	4054e4 <_svfprintf_r+0x1130>
  404afa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404afe:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  404b02:	2700      	movs	r7, #0
  404b04:	9a07      	ldr	r2, [sp, #28]
  404b06:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404b0a:	2330      	movs	r3, #48	; 0x30
  404b0c:	45bb      	cmp	fp, r7
  404b0e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404b12:	f042 0302 	orr.w	r3, r2, #2
  404b16:	f2c0 86a9 	blt.w	40586c <_svfprintf_r+0x14b8>
  404b1a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404b1e:	f043 0302 	orr.w	r3, r3, #2
  404b22:	9307      	str	r3, [sp, #28]
  404b24:	ae30      	add	r6, sp, #192	; 0xc0
  404b26:	0923      	lsrs	r3, r4, #4
  404b28:	f004 010f 	and.w	r1, r4, #15
  404b2c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404b30:	092a      	lsrs	r2, r5, #4
  404b32:	461c      	mov	r4, r3
  404b34:	4615      	mov	r5, r2
  404b36:	5c43      	ldrb	r3, [r0, r1]
  404b38:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404b3c:	ea54 0305 	orrs.w	r3, r4, r5
  404b40:	d1f1      	bne.n	404b26 <_svfprintf_r+0x772>
  404b42:	e5f3      	b.n	40472c <_svfprintf_r+0x378>
  404b44:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b46:	9311      	str	r3, [sp, #68]	; 0x44
  404b48:	680a      	ldr	r2, [r1, #0]
  404b4a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404b4e:	2300      	movs	r3, #0
  404b50:	460a      	mov	r2, r1
  404b52:	461f      	mov	r7, r3
  404b54:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404b58:	3204      	adds	r2, #4
  404b5a:	2301      	movs	r3, #1
  404b5c:	9308      	str	r3, [sp, #32]
  404b5e:	46bb      	mov	fp, r7
  404b60:	9713      	str	r7, [sp, #76]	; 0x4c
  404b62:	920e      	str	r2, [sp, #56]	; 0x38
  404b64:	930d      	str	r3, [sp, #52]	; 0x34
  404b66:	ae26      	add	r6, sp, #152	; 0x98
  404b68:	e5ee      	b.n	404748 <_svfprintf_r+0x394>
  404b6a:	9311      	str	r3, [sp, #68]	; 0x44
  404b6c:	46ab      	mov	fp, r5
  404b6e:	2a00      	cmp	r2, #0
  404b70:	f43f ada0 	beq.w	4046b4 <_svfprintf_r+0x300>
  404b74:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404b78:	e59c      	b.n	4046b4 <_svfprintf_r+0x300>
  404b7a:	9b07      	ldr	r3, [sp, #28]
  404b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b80:	9307      	str	r3, [sp, #28]
  404b82:	f898 3000 	ldrb.w	r3, [r8]
  404b86:	e46e      	b.n	404466 <_svfprintf_r+0xb2>
  404b88:	f898 3000 	ldrb.w	r3, [r8]
  404b8c:	2900      	cmp	r1, #0
  404b8e:	f47f ac6a 	bne.w	404466 <_svfprintf_r+0xb2>
  404b92:	2201      	movs	r2, #1
  404b94:	2120      	movs	r1, #32
  404b96:	e466      	b.n	404466 <_svfprintf_r+0xb2>
  404b98:	9b07      	ldr	r3, [sp, #28]
  404b9a:	f043 0301 	orr.w	r3, r3, #1
  404b9e:	9307      	str	r3, [sp, #28]
  404ba0:	f898 3000 	ldrb.w	r3, [r8]
  404ba4:	e45f      	b.n	404466 <_svfprintf_r+0xb2>
  404ba6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404ba8:	6823      	ldr	r3, [r4, #0]
  404baa:	930c      	str	r3, [sp, #48]	; 0x30
  404bac:	4618      	mov	r0, r3
  404bae:	2800      	cmp	r0, #0
  404bb0:	4623      	mov	r3, r4
  404bb2:	f103 0304 	add.w	r3, r3, #4
  404bb6:	f6ff acb8 	blt.w	40452a <_svfprintf_r+0x176>
  404bba:	930e      	str	r3, [sp, #56]	; 0x38
  404bbc:	f898 3000 	ldrb.w	r3, [r8]
  404bc0:	e451      	b.n	404466 <_svfprintf_r+0xb2>
  404bc2:	f898 3000 	ldrb.w	r3, [r8]
  404bc6:	2201      	movs	r2, #1
  404bc8:	212b      	movs	r1, #43	; 0x2b
  404bca:	e44c      	b.n	404466 <_svfprintf_r+0xb2>
  404bcc:	9311      	str	r3, [sp, #68]	; 0x44
  404bce:	46ab      	mov	fp, r5
  404bd0:	2a00      	cmp	r2, #0
  404bd2:	f43f af51 	beq.w	404a78 <_svfprintf_r+0x6c4>
  404bd6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404bda:	e74d      	b.n	404a78 <_svfprintf_r+0x6c4>
  404bdc:	00409a00 	.word	0x00409a00
  404be0:	7fefffff 	.word	0x7fefffff
  404be4:	004099c0 	.word	0x004099c0
  404be8:	004099bc 	.word	0x004099bc
  404bec:	004099cc 	.word	0x004099cc
  404bf0:	9311      	str	r3, [sp, #68]	; 0x44
  404bf2:	46ab      	mov	fp, r5
  404bf4:	2a00      	cmp	r2, #0
  404bf6:	f040 8703 	bne.w	405a00 <_svfprintf_r+0x164c>
  404bfa:	9b07      	ldr	r3, [sp, #28]
  404bfc:	4899      	ldr	r0, [pc, #612]	; (404e64 <_svfprintf_r+0xab0>)
  404bfe:	069d      	lsls	r5, r3, #26
  404c00:	f53f af69 	bmi.w	404ad6 <_svfprintf_r+0x722>
  404c04:	9b07      	ldr	r3, [sp, #28]
  404c06:	06dc      	lsls	r4, r3, #27
  404c08:	f140 845e 	bpl.w	4054c8 <_svfprintf_r+0x1114>
  404c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404c0e:	4613      	mov	r3, r2
  404c10:	3304      	adds	r3, #4
  404c12:	6814      	ldr	r4, [r2, #0]
  404c14:	930e      	str	r3, [sp, #56]	; 0x38
  404c16:	2500      	movs	r5, #0
  404c18:	e766      	b.n	404ae8 <_svfprintf_r+0x734>
  404c1a:	f898 3000 	ldrb.w	r3, [r8]
  404c1e:	2b6c      	cmp	r3, #108	; 0x6c
  404c20:	f000 84e1 	beq.w	4055e6 <_svfprintf_r+0x1232>
  404c24:	9807      	ldr	r0, [sp, #28]
  404c26:	f040 0010 	orr.w	r0, r0, #16
  404c2a:	9007      	str	r0, [sp, #28]
  404c2c:	e41b      	b.n	404466 <_svfprintf_r+0xb2>
  404c2e:	2a00      	cmp	r2, #0
  404c30:	f040 86db 	bne.w	4059ea <_svfprintf_r+0x1636>
  404c34:	9b07      	ldr	r3, [sp, #28]
  404c36:	069b      	lsls	r3, r3, #26
  404c38:	f140 842f 	bpl.w	40549a <_svfprintf_r+0x10e6>
  404c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c40:	6813      	ldr	r3, [r2, #0]
  404c42:	17cd      	asrs	r5, r1, #31
  404c44:	4608      	mov	r0, r1
  404c46:	3204      	adds	r2, #4
  404c48:	4629      	mov	r1, r5
  404c4a:	920e      	str	r2, [sp, #56]	; 0x38
  404c4c:	e9c3 0100 	strd	r0, r1, [r3]
  404c50:	f7ff bbd6 	b.w	404400 <_svfprintf_r+0x4c>
  404c54:	9b07      	ldr	r3, [sp, #28]
  404c56:	f043 0320 	orr.w	r3, r3, #32
  404c5a:	9307      	str	r3, [sp, #28]
  404c5c:	f898 3000 	ldrb.w	r3, [r8]
  404c60:	e401      	b.n	404466 <_svfprintf_r+0xb2>
  404c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404c64:	9311      	str	r3, [sp, #68]	; 0x44
  404c66:	6816      	ldr	r6, [r2, #0]
  404c68:	2400      	movs	r4, #0
  404c6a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404c6e:	1d17      	adds	r7, r2, #4
  404c70:	2e00      	cmp	r6, #0
  404c72:	f000 85bd 	beq.w	4057f0 <_svfprintf_r+0x143c>
  404c76:	2d00      	cmp	r5, #0
  404c78:	f2c0 850f 	blt.w	40569a <_svfprintf_r+0x12e6>
  404c7c:	462a      	mov	r2, r5
  404c7e:	4621      	mov	r1, r4
  404c80:	4630      	mov	r0, r6
  404c82:	f002 fabd 	bl	407200 <memchr>
  404c86:	2800      	cmp	r0, #0
  404c88:	f000 8604 	beq.w	405894 <_svfprintf_r+0x14e0>
  404c8c:	1b83      	subs	r3, r0, r6
  404c8e:	930d      	str	r3, [sp, #52]	; 0x34
  404c90:	46a3      	mov	fp, r4
  404c92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c96:	970e      	str	r7, [sp, #56]	; 0x38
  404c98:	9308      	str	r3, [sp, #32]
  404c9a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404c9e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404ca2:	e54d      	b.n	404740 <_svfprintf_r+0x38c>
  404ca4:	486f      	ldr	r0, [pc, #444]	; (404e64 <_svfprintf_r+0xab0>)
  404ca6:	9211      	str	r2, [sp, #68]	; 0x44
  404ca8:	f1bb 0f00 	cmp.w	fp, #0
  404cac:	f040 8173 	bne.w	404f96 <_svfprintf_r+0xbe2>
  404cb0:	465f      	mov	r7, fp
  404cb2:	f04f 0b00 	mov.w	fp, #0
  404cb6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404cba:	ae30      	add	r6, sp, #192	; 0xc0
  404cbc:	e539      	b.n	404732 <_svfprintf_r+0x37e>
  404cbe:	9311      	str	r3, [sp, #68]	; 0x44
  404cc0:	2a00      	cmp	r2, #0
  404cc2:	f040 86b0 	bne.w	405a26 <_svfprintf_r+0x1672>
  404cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cc8:	2a00      	cmp	r2, #0
  404cca:	f43f ac65 	beq.w	404598 <_svfprintf_r+0x1e4>
  404cce:	2300      	movs	r3, #0
  404cd0:	2101      	movs	r1, #1
  404cd2:	461f      	mov	r7, r3
  404cd4:	9108      	str	r1, [sp, #32]
  404cd6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404cda:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404cde:	469b      	mov	fp, r3
  404ce0:	9313      	str	r3, [sp, #76]	; 0x4c
  404ce2:	910d      	str	r1, [sp, #52]	; 0x34
  404ce4:	ae26      	add	r6, sp, #152	; 0x98
  404ce6:	e52f      	b.n	404748 <_svfprintf_r+0x394>
  404ce8:	f1bb 0f00 	cmp.w	fp, #0
  404cec:	f000 85dd 	beq.w	4058aa <_svfprintf_r+0x14f6>
  404cf0:	2700      	movs	r7, #0
  404cf2:	2400      	movs	r4, #0
  404cf4:	2500      	movs	r5, #0
  404cf6:	e482      	b.n	4045fe <_svfprintf_r+0x24a>
  404cf8:	485a      	ldr	r0, [pc, #360]	; (404e64 <_svfprintf_r+0xab0>)
  404cfa:	9307      	str	r3, [sp, #28]
  404cfc:	9211      	str	r2, [sp, #68]	; 0x44
  404cfe:	ea54 0305 	orrs.w	r3, r4, r5
  404d02:	970e      	str	r7, [sp, #56]	; 0x38
  404d04:	f04f 0700 	mov.w	r7, #0
  404d08:	f47f af0c 	bne.w	404b24 <_svfprintf_r+0x770>
  404d0c:	2400      	movs	r4, #0
  404d0e:	2500      	movs	r5, #0
  404d10:	e708      	b.n	404b24 <_svfprintf_r+0x770>
  404d12:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d14:	e568      	b.n	4047e8 <_svfprintf_r+0x434>
  404d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d18:	2b65      	cmp	r3, #101	; 0x65
  404d1a:	f340 80a9 	ble.w	404e70 <_svfprintf_r+0xabc>
  404d1e:	9814      	ldr	r0, [sp, #80]	; 0x50
  404d20:	9915      	ldr	r1, [sp, #84]	; 0x54
  404d22:	2200      	movs	r2, #0
  404d24:	2300      	movs	r3, #0
  404d26:	f003 fe89 	bl	408a3c <__aeabi_dcmpeq>
  404d2a:	2800      	cmp	r0, #0
  404d2c:	f000 8135 	beq.w	404f9a <_svfprintf_r+0xbe6>
  404d30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d32:	4a4d      	ldr	r2, [pc, #308]	; (404e68 <_svfprintf_r+0xab4>)
  404d34:	f8c9 2000 	str.w	r2, [r9]
  404d38:	3301      	adds	r3, #1
  404d3a:	3401      	adds	r4, #1
  404d3c:	2201      	movs	r2, #1
  404d3e:	2b07      	cmp	r3, #7
  404d40:	9425      	str	r4, [sp, #148]	; 0x94
  404d42:	9324      	str	r3, [sp, #144]	; 0x90
  404d44:	f8c9 2004 	str.w	r2, [r9, #4]
  404d48:	f300 83e6 	bgt.w	405518 <_svfprintf_r+0x1164>
  404d4c:	f109 0908 	add.w	r9, r9, #8
  404d50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404d54:	4293      	cmp	r3, r2
  404d56:	db03      	blt.n	404d60 <_svfprintf_r+0x9ac>
  404d58:	9b07      	ldr	r3, [sp, #28]
  404d5a:	07db      	lsls	r3, r3, #31
  404d5c:	f57f adba 	bpl.w	4048d4 <_svfprintf_r+0x520>
  404d60:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d62:	9916      	ldr	r1, [sp, #88]	; 0x58
  404d64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404d66:	f8c9 2000 	str.w	r2, [r9]
  404d6a:	3301      	adds	r3, #1
  404d6c:	440c      	add	r4, r1
  404d6e:	2b07      	cmp	r3, #7
  404d70:	9425      	str	r4, [sp, #148]	; 0x94
  404d72:	f8c9 1004 	str.w	r1, [r9, #4]
  404d76:	9324      	str	r3, [sp, #144]	; 0x90
  404d78:	f300 843f 	bgt.w	4055fa <_svfprintf_r+0x1246>
  404d7c:	f109 0908 	add.w	r9, r9, #8
  404d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d82:	1e5d      	subs	r5, r3, #1
  404d84:	2d00      	cmp	r5, #0
  404d86:	f77f ada5 	ble.w	4048d4 <_svfprintf_r+0x520>
  404d8a:	4a38      	ldr	r2, [pc, #224]	; (404e6c <_svfprintf_r+0xab8>)
  404d8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d8e:	920f      	str	r2, [sp, #60]	; 0x3c
  404d90:	2d10      	cmp	r5, #16
  404d92:	f340 81e6 	ble.w	405162 <_svfprintf_r+0xdae>
  404d96:	2610      	movs	r6, #16
  404d98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404d9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404d9e:	e005      	b.n	404dac <_svfprintf_r+0x9f8>
  404da0:	f109 0908 	add.w	r9, r9, #8
  404da4:	3d10      	subs	r5, #16
  404da6:	2d10      	cmp	r5, #16
  404da8:	f340 81db 	ble.w	405162 <_svfprintf_r+0xdae>
  404dac:	3301      	adds	r3, #1
  404dae:	3410      	adds	r4, #16
  404db0:	2b07      	cmp	r3, #7
  404db2:	9425      	str	r4, [sp, #148]	; 0x94
  404db4:	9324      	str	r3, [sp, #144]	; 0x90
  404db6:	f8c9 a000 	str.w	sl, [r9]
  404dba:	f8c9 6004 	str.w	r6, [r9, #4]
  404dbe:	ddef      	ble.n	404da0 <_svfprintf_r+0x9ec>
  404dc0:	aa23      	add	r2, sp, #140	; 0x8c
  404dc2:	4659      	mov	r1, fp
  404dc4:	4638      	mov	r0, r7
  404dc6:	f003 f917 	bl	407ff8 <__ssprint_r>
  404dca:	2800      	cmp	r0, #0
  404dcc:	f47f abeb 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404dd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dd4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404dd8:	e7e4      	b.n	404da4 <_svfprintf_r+0x9f0>
  404dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404ddc:	9a08      	ldr	r2, [sp, #32]
  404dde:	1a9f      	subs	r7, r3, r2
  404de0:	2f00      	cmp	r7, #0
  404de2:	f77f ad25 	ble.w	404830 <_svfprintf_r+0x47c>
  404de6:	4a21      	ldr	r2, [pc, #132]	; (404e6c <_svfprintf_r+0xab8>)
  404de8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dea:	920f      	str	r2, [sp, #60]	; 0x3c
  404dec:	2f10      	cmp	r7, #16
  404dee:	dd2b      	ble.n	404e48 <_svfprintf_r+0xa94>
  404df0:	464a      	mov	r2, r9
  404df2:	4621      	mov	r1, r4
  404df4:	46b9      	mov	r9, r7
  404df6:	2510      	movs	r5, #16
  404df8:	4637      	mov	r7, r6
  404dfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404dfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404dfe:	e006      	b.n	404e0e <_svfprintf_r+0xa5a>
  404e00:	f1a9 0910 	sub.w	r9, r9, #16
  404e04:	f1b9 0f10 	cmp.w	r9, #16
  404e08:	f102 0208 	add.w	r2, r2, #8
  404e0c:	dd18      	ble.n	404e40 <_svfprintf_r+0xa8c>
  404e0e:	3301      	adds	r3, #1
  404e10:	3110      	adds	r1, #16
  404e12:	2b07      	cmp	r3, #7
  404e14:	9125      	str	r1, [sp, #148]	; 0x94
  404e16:	9324      	str	r3, [sp, #144]	; 0x90
  404e18:	f8c2 a000 	str.w	sl, [r2]
  404e1c:	6055      	str	r5, [r2, #4]
  404e1e:	ddef      	ble.n	404e00 <_svfprintf_r+0xa4c>
  404e20:	aa23      	add	r2, sp, #140	; 0x8c
  404e22:	4631      	mov	r1, r6
  404e24:	4620      	mov	r0, r4
  404e26:	f003 f8e7 	bl	407ff8 <__ssprint_r>
  404e2a:	2800      	cmp	r0, #0
  404e2c:	f47f abbb 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404e30:	f1a9 0910 	sub.w	r9, r9, #16
  404e34:	f1b9 0f10 	cmp.w	r9, #16
  404e38:	9925      	ldr	r1, [sp, #148]	; 0x94
  404e3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e3c:	aa30      	add	r2, sp, #192	; 0xc0
  404e3e:	dce6      	bgt.n	404e0e <_svfprintf_r+0xa5a>
  404e40:	463e      	mov	r6, r7
  404e42:	460c      	mov	r4, r1
  404e44:	464f      	mov	r7, r9
  404e46:	4691      	mov	r9, r2
  404e48:	3301      	adds	r3, #1
  404e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e4c:	9324      	str	r3, [sp, #144]	; 0x90
  404e4e:	443c      	add	r4, r7
  404e50:	2b07      	cmp	r3, #7
  404e52:	9425      	str	r4, [sp, #148]	; 0x94
  404e54:	e889 0084 	stmia.w	r9, {r2, r7}
  404e58:	f300 8245 	bgt.w	4052e6 <_svfprintf_r+0xf32>
  404e5c:	f109 0908 	add.w	r9, r9, #8
  404e60:	e4e6      	b.n	404830 <_svfprintf_r+0x47c>
  404e62:	bf00      	nop
  404e64:	004099e0 	.word	0x004099e0
  404e68:	004099fc 	.word	0x004099fc
  404e6c:	004099ac 	.word	0x004099ac
  404e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e72:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404e74:	2b01      	cmp	r3, #1
  404e76:	f340 8208 	ble.w	40528a <_svfprintf_r+0xed6>
  404e7a:	3501      	adds	r5, #1
  404e7c:	3401      	adds	r4, #1
  404e7e:	2301      	movs	r3, #1
  404e80:	2d07      	cmp	r5, #7
  404e82:	9425      	str	r4, [sp, #148]	; 0x94
  404e84:	9524      	str	r5, [sp, #144]	; 0x90
  404e86:	f8c9 6000 	str.w	r6, [r9]
  404e8a:	f8c9 3004 	str.w	r3, [r9, #4]
  404e8e:	f300 820d 	bgt.w	4052ac <_svfprintf_r+0xef8>
  404e92:	f109 0908 	add.w	r9, r9, #8
  404e96:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404e9a:	f8c9 3000 	str.w	r3, [r9]
  404e9e:	3501      	adds	r5, #1
  404ea0:	4414      	add	r4, r2
  404ea2:	2d07      	cmp	r5, #7
  404ea4:	9425      	str	r4, [sp, #148]	; 0x94
  404ea6:	9524      	str	r5, [sp, #144]	; 0x90
  404ea8:	f8c9 2004 	str.w	r2, [r9, #4]
  404eac:	f300 820e 	bgt.w	4052cc <_svfprintf_r+0xf18>
  404eb0:	f109 0908 	add.w	r9, r9, #8
  404eb4:	2300      	movs	r3, #0
  404eb6:	9814      	ldr	r0, [sp, #80]	; 0x50
  404eb8:	9915      	ldr	r1, [sp, #84]	; 0x54
  404eba:	2200      	movs	r2, #0
  404ebc:	f003 fdbe 	bl	408a3c <__aeabi_dcmpeq>
  404ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ec2:	2800      	cmp	r0, #0
  404ec4:	f040 80c3 	bne.w	40504e <_svfprintf_r+0xc9a>
  404ec8:	3b01      	subs	r3, #1
  404eca:	3501      	adds	r5, #1
  404ecc:	3601      	adds	r6, #1
  404ece:	441c      	add	r4, r3
  404ed0:	2d07      	cmp	r5, #7
  404ed2:	9524      	str	r5, [sp, #144]	; 0x90
  404ed4:	9425      	str	r4, [sp, #148]	; 0x94
  404ed6:	f8c9 6000 	str.w	r6, [r9]
  404eda:	f8c9 3004 	str.w	r3, [r9, #4]
  404ede:	f300 80f5 	bgt.w	4050cc <_svfprintf_r+0xd18>
  404ee2:	f109 0908 	add.w	r9, r9, #8
  404ee6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ee8:	f8c9 2004 	str.w	r2, [r9, #4]
  404eec:	3501      	adds	r5, #1
  404eee:	4414      	add	r4, r2
  404ef0:	ab1f      	add	r3, sp, #124	; 0x7c
  404ef2:	2d07      	cmp	r5, #7
  404ef4:	9425      	str	r4, [sp, #148]	; 0x94
  404ef6:	9524      	str	r5, [sp, #144]	; 0x90
  404ef8:	f8c9 3000 	str.w	r3, [r9]
  404efc:	f77f ace8 	ble.w	4048d0 <_svfprintf_r+0x51c>
  404f00:	aa23      	add	r2, sp, #140	; 0x8c
  404f02:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f04:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f06:	f003 f877 	bl	407ff8 <__ssprint_r>
  404f0a:	2800      	cmp	r0, #0
  404f0c:	f47f ab4b 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404f10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f16:	e4dd      	b.n	4048d4 <_svfprintf_r+0x520>
  404f18:	aa23      	add	r2, sp, #140	; 0x8c
  404f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f1e:	f003 f86b 	bl	407ff8 <__ssprint_r>
  404f22:	2800      	cmp	r0, #0
  404f24:	f43f ad24 	beq.w	404970 <_svfprintf_r+0x5bc>
  404f28:	f7ff bb3d 	b.w	4045a6 <_svfprintf_r+0x1f2>
  404f2c:	aa23      	add	r2, sp, #140	; 0x8c
  404f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f30:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f32:	f003 f861 	bl	407ff8 <__ssprint_r>
  404f36:	2800      	cmp	r0, #0
  404f38:	f47f ab35 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404f3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f3e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f42:	e4b4      	b.n	4048ae <_svfprintf_r+0x4fa>
  404f44:	aa23      	add	r2, sp, #140	; 0x8c
  404f46:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f48:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f4a:	f003 f855 	bl	407ff8 <__ssprint_r>
  404f4e:	2800      	cmp	r0, #0
  404f50:	f47f ab29 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404f54:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f56:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f5a:	e455      	b.n	404808 <_svfprintf_r+0x454>
  404f5c:	aa23      	add	r2, sp, #140	; 0x8c
  404f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f60:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f62:	f003 f849 	bl	407ff8 <__ssprint_r>
  404f66:	2800      	cmp	r0, #0
  404f68:	f47f ab1d 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  404f6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f6e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f72:	e459      	b.n	404828 <_svfprintf_r+0x474>
  404f74:	f1bb 0f00 	cmp.w	fp, #0
  404f78:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404f7c:	f2c0 82d8 	blt.w	405530 <_svfprintf_r+0x117c>
  404f80:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404f84:	9307      	str	r3, [sp, #28]
  404f86:	ea54 0305 	orrs.w	r3, r4, r5
  404f8a:	f47f adcb 	bne.w	404b24 <_svfprintf_r+0x770>
  404f8e:	f1bb 0f00 	cmp.w	fp, #0
  404f92:	f43f ae8d 	beq.w	404cb0 <_svfprintf_r+0x8fc>
  404f96:	2700      	movs	r7, #0
  404f98:	e6b8      	b.n	404d0c <_svfprintf_r+0x958>
  404f9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404f9c:	2d00      	cmp	r5, #0
  404f9e:	f340 82ca 	ble.w	405536 <_svfprintf_r+0x1182>
  404fa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404fa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404fa6:	4293      	cmp	r3, r2
  404fa8:	bfa8      	it	ge
  404faa:	4613      	movge	r3, r2
  404fac:	2b00      	cmp	r3, #0
  404fae:	461d      	mov	r5, r3
  404fb0:	dd0d      	ble.n	404fce <_svfprintf_r+0xc1a>
  404fb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fb4:	f8c9 6000 	str.w	r6, [r9]
  404fb8:	3301      	adds	r3, #1
  404fba:	442c      	add	r4, r5
  404fbc:	2b07      	cmp	r3, #7
  404fbe:	9425      	str	r4, [sp, #148]	; 0x94
  404fc0:	f8c9 5004 	str.w	r5, [r9, #4]
  404fc4:	9324      	str	r3, [sp, #144]	; 0x90
  404fc6:	f300 839c 	bgt.w	405702 <_svfprintf_r+0x134e>
  404fca:	f109 0908 	add.w	r9, r9, #8
  404fce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404fd0:	2d00      	cmp	r5, #0
  404fd2:	bfa8      	it	ge
  404fd4:	1b5b      	subge	r3, r3, r5
  404fd6:	2b00      	cmp	r3, #0
  404fd8:	461d      	mov	r5, r3
  404fda:	f340 80f6 	ble.w	4051ca <_svfprintf_r+0xe16>
  404fde:	4aba      	ldr	r2, [pc, #744]	; (4052c8 <_svfprintf_r+0xf14>)
  404fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fe2:	920f      	str	r2, [sp, #60]	; 0x3c
  404fe4:	2d10      	cmp	r5, #16
  404fe6:	f340 828a 	ble.w	4054fe <_svfprintf_r+0x114a>
  404fea:	4622      	mov	r2, r4
  404fec:	2710      	movs	r7, #16
  404fee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404ff2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404ff4:	e005      	b.n	405002 <_svfprintf_r+0xc4e>
  404ff6:	f109 0908 	add.w	r9, r9, #8
  404ffa:	3d10      	subs	r5, #16
  404ffc:	2d10      	cmp	r5, #16
  404ffe:	f340 827d 	ble.w	4054fc <_svfprintf_r+0x1148>
  405002:	3301      	adds	r3, #1
  405004:	3210      	adds	r2, #16
  405006:	2b07      	cmp	r3, #7
  405008:	9225      	str	r2, [sp, #148]	; 0x94
  40500a:	9324      	str	r3, [sp, #144]	; 0x90
  40500c:	f8c9 a000 	str.w	sl, [r9]
  405010:	f8c9 7004 	str.w	r7, [r9, #4]
  405014:	ddef      	ble.n	404ff6 <_svfprintf_r+0xc42>
  405016:	aa23      	add	r2, sp, #140	; 0x8c
  405018:	4621      	mov	r1, r4
  40501a:	4658      	mov	r0, fp
  40501c:	f002 ffec 	bl	407ff8 <__ssprint_r>
  405020:	2800      	cmp	r0, #0
  405022:	f47f aac0 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405026:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405028:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40502a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40502e:	e7e4      	b.n	404ffa <_svfprintf_r+0xc46>
  405030:	aa23      	add	r2, sp, #140	; 0x8c
  405032:	9909      	ldr	r1, [sp, #36]	; 0x24
  405034:	980a      	ldr	r0, [sp, #40]	; 0x28
  405036:	f002 ffdf 	bl	407ff8 <__ssprint_r>
  40503a:	2800      	cmp	r0, #0
  40503c:	f47f aab3 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405040:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405044:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405046:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40504a:	f7ff bbcd 	b.w	4047e8 <_svfprintf_r+0x434>
  40504e:	1e5e      	subs	r6, r3, #1
  405050:	2e00      	cmp	r6, #0
  405052:	f77f af48 	ble.w	404ee6 <_svfprintf_r+0xb32>
  405056:	4b9c      	ldr	r3, [pc, #624]	; (4052c8 <_svfprintf_r+0xf14>)
  405058:	930f      	str	r3, [sp, #60]	; 0x3c
  40505a:	2e10      	cmp	r6, #16
  40505c:	dd2c      	ble.n	4050b8 <_svfprintf_r+0xd04>
  40505e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  405062:	2710      	movs	r7, #16
  405064:	46b0      	mov	r8, r6
  405066:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40506a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40506c:	e006      	b.n	40507c <_svfprintf_r+0xcc8>
  40506e:	f1a8 0810 	sub.w	r8, r8, #16
  405072:	f1b8 0f10 	cmp.w	r8, #16
  405076:	f109 0908 	add.w	r9, r9, #8
  40507a:	dd1a      	ble.n	4050b2 <_svfprintf_r+0xcfe>
  40507c:	3501      	adds	r5, #1
  40507e:	3410      	adds	r4, #16
  405080:	2d07      	cmp	r5, #7
  405082:	9425      	str	r4, [sp, #148]	; 0x94
  405084:	9524      	str	r5, [sp, #144]	; 0x90
  405086:	f8c9 a000 	str.w	sl, [r9]
  40508a:	f8c9 7004 	str.w	r7, [r9, #4]
  40508e:	ddee      	ble.n	40506e <_svfprintf_r+0xcba>
  405090:	aa23      	add	r2, sp, #140	; 0x8c
  405092:	4631      	mov	r1, r6
  405094:	4658      	mov	r0, fp
  405096:	f002 ffaf 	bl	407ff8 <__ssprint_r>
  40509a:	2800      	cmp	r0, #0
  40509c:	f47f aa83 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4050a0:	f1a8 0810 	sub.w	r8, r8, #16
  4050a4:	f1b8 0f10 	cmp.w	r8, #16
  4050a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4050aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4050ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4050b0:	dce4      	bgt.n	40507c <_svfprintf_r+0xcc8>
  4050b2:	4646      	mov	r6, r8
  4050b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4050b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4050ba:	3501      	adds	r5, #1
  4050bc:	4434      	add	r4, r6
  4050be:	2d07      	cmp	r5, #7
  4050c0:	9425      	str	r4, [sp, #148]	; 0x94
  4050c2:	9524      	str	r5, [sp, #144]	; 0x90
  4050c4:	e889 0048 	stmia.w	r9, {r3, r6}
  4050c8:	f77f af0b 	ble.w	404ee2 <_svfprintf_r+0xb2e>
  4050cc:	aa23      	add	r2, sp, #140	; 0x8c
  4050ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4050d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4050d2:	f002 ff91 	bl	407ff8 <__ssprint_r>
  4050d6:	2800      	cmp	r0, #0
  4050d8:	f47f aa65 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4050dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4050de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4050e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4050e4:	e6ff      	b.n	404ee6 <_svfprintf_r+0xb32>
  4050e6:	9907      	ldr	r1, [sp, #28]
  4050e8:	f011 0210 	ands.w	r2, r1, #16
  4050ec:	f000 8108 	beq.w	405300 <_svfprintf_r+0xf4c>
  4050f0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4050f2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4050f6:	f1bb 0f00 	cmp.w	fp, #0
  4050fa:	6804      	ldr	r4, [r0, #0]
  4050fc:	f100 0704 	add.w	r7, r0, #4
  405100:	f04f 0500 	mov.w	r5, #0
  405104:	db26      	blt.n	405154 <_svfprintf_r+0xda0>
  405106:	460a      	mov	r2, r1
  405108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40510c:	9207      	str	r2, [sp, #28]
  40510e:	ea54 0205 	orrs.w	r2, r4, r5
  405112:	970e      	str	r7, [sp, #56]	; 0x38
  405114:	461f      	mov	r7, r3
  405116:	f47f aaef 	bne.w	4046f8 <_svfprintf_r+0x344>
  40511a:	e4c8      	b.n	404aae <_svfprintf_r+0x6fa>
  40511c:	9b07      	ldr	r3, [sp, #28]
  40511e:	06d9      	lsls	r1, r3, #27
  405120:	d42a      	bmi.n	405178 <_svfprintf_r+0xdc4>
  405122:	9b07      	ldr	r3, [sp, #28]
  405124:	065a      	lsls	r2, r3, #25
  405126:	d527      	bpl.n	405178 <_svfprintf_r+0xdc4>
  405128:	990e      	ldr	r1, [sp, #56]	; 0x38
  40512a:	f9b1 4000 	ldrsh.w	r4, [r1]
  40512e:	3104      	adds	r1, #4
  405130:	17e5      	asrs	r5, r4, #31
  405132:	4622      	mov	r2, r4
  405134:	462b      	mov	r3, r5
  405136:	910e      	str	r1, [sp, #56]	; 0x38
  405138:	f7ff bacb 	b.w	4046d2 <_svfprintf_r+0x31e>
  40513c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40513e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405142:	f1bb 0f00 	cmp.w	fp, #0
  405146:	680c      	ldr	r4, [r1, #0]
  405148:	f101 0704 	add.w	r7, r1, #4
  40514c:	f04f 0500 	mov.w	r5, #0
  405150:	f280 8247 	bge.w	4055e2 <_svfprintf_r+0x122e>
  405154:	970e      	str	r7, [sp, #56]	; 0x38
  405156:	461f      	mov	r7, r3
  405158:	ea54 0305 	orrs.w	r3, r4, r5
  40515c:	f47f aacc 	bne.w	4046f8 <_svfprintf_r+0x344>
  405160:	e4aa      	b.n	404ab8 <_svfprintf_r+0x704>
  405162:	3301      	adds	r3, #1
  405164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405166:	9324      	str	r3, [sp, #144]	; 0x90
  405168:	442c      	add	r4, r5
  40516a:	2b07      	cmp	r3, #7
  40516c:	9425      	str	r4, [sp, #148]	; 0x94
  40516e:	e889 0024 	stmia.w	r9, {r2, r5}
  405172:	f77f abad 	ble.w	4048d0 <_svfprintf_r+0x51c>
  405176:	e6c3      	b.n	404f00 <_svfprintf_r+0xb4c>
  405178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40517a:	6814      	ldr	r4, [r2, #0]
  40517c:	4613      	mov	r3, r2
  40517e:	3304      	adds	r3, #4
  405180:	17e5      	asrs	r5, r4, #31
  405182:	4622      	mov	r2, r4
  405184:	930e      	str	r3, [sp, #56]	; 0x38
  405186:	2a00      	cmp	r2, #0
  405188:	462b      	mov	r3, r5
  40518a:	f173 0300 	sbcs.w	r3, r3, #0
  40518e:	f6bf aaa5 	bge.w	4046dc <_svfprintf_r+0x328>
  405192:	4264      	negs	r4, r4
  405194:	f04f 072d 	mov.w	r7, #45	; 0x2d
  405198:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40519c:	f1bb 0f00 	cmp.w	fp, #0
  4051a0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4051a4:	f6ff aaa8 	blt.w	4046f8 <_svfprintf_r+0x344>
  4051a8:	9b07      	ldr	r3, [sp, #28]
  4051aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4051ae:	9307      	str	r3, [sp, #28]
  4051b0:	f7ff baa2 	b.w	4046f8 <_svfprintf_r+0x344>
  4051b4:	aa23      	add	r2, sp, #140	; 0x8c
  4051b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4051b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4051ba:	f002 ff1d 	bl	407ff8 <__ssprint_r>
  4051be:	2800      	cmp	r0, #0
  4051c0:	f47f a9f1 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4051c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4051c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4051ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4051cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4051ce:	4432      	add	r2, r6
  4051d0:	4617      	mov	r7, r2
  4051d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4051d4:	4293      	cmp	r3, r2
  4051d6:	db47      	blt.n	405268 <_svfprintf_r+0xeb4>
  4051d8:	9a07      	ldr	r2, [sp, #28]
  4051da:	07d5      	lsls	r5, r2, #31
  4051dc:	d444      	bmi.n	405268 <_svfprintf_r+0xeb4>
  4051de:	9912      	ldr	r1, [sp, #72]	; 0x48
  4051e0:	440e      	add	r6, r1
  4051e2:	1bf5      	subs	r5, r6, r7
  4051e4:	1acb      	subs	r3, r1, r3
  4051e6:	429d      	cmp	r5, r3
  4051e8:	bfa8      	it	ge
  4051ea:	461d      	movge	r5, r3
  4051ec:	2d00      	cmp	r5, #0
  4051ee:	462e      	mov	r6, r5
  4051f0:	dd0d      	ble.n	40520e <_svfprintf_r+0xe5a>
  4051f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4051f4:	f8c9 7000 	str.w	r7, [r9]
  4051f8:	3201      	adds	r2, #1
  4051fa:	442c      	add	r4, r5
  4051fc:	2a07      	cmp	r2, #7
  4051fe:	9425      	str	r4, [sp, #148]	; 0x94
  405200:	f8c9 5004 	str.w	r5, [r9, #4]
  405204:	9224      	str	r2, [sp, #144]	; 0x90
  405206:	f300 830b 	bgt.w	405820 <_svfprintf_r+0x146c>
  40520a:	f109 0908 	add.w	r9, r9, #8
  40520e:	2e00      	cmp	r6, #0
  405210:	bfac      	ite	ge
  405212:	1b9d      	subge	r5, r3, r6
  405214:	461d      	movlt	r5, r3
  405216:	2d00      	cmp	r5, #0
  405218:	f77f ab5c 	ble.w	4048d4 <_svfprintf_r+0x520>
  40521c:	4a2a      	ldr	r2, [pc, #168]	; (4052c8 <_svfprintf_r+0xf14>)
  40521e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405220:	920f      	str	r2, [sp, #60]	; 0x3c
  405222:	2d10      	cmp	r5, #16
  405224:	dd9d      	ble.n	405162 <_svfprintf_r+0xdae>
  405226:	2610      	movs	r6, #16
  405228:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40522a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40522e:	e004      	b.n	40523a <_svfprintf_r+0xe86>
  405230:	f109 0908 	add.w	r9, r9, #8
  405234:	3d10      	subs	r5, #16
  405236:	2d10      	cmp	r5, #16
  405238:	dd93      	ble.n	405162 <_svfprintf_r+0xdae>
  40523a:	3301      	adds	r3, #1
  40523c:	3410      	adds	r4, #16
  40523e:	2b07      	cmp	r3, #7
  405240:	9425      	str	r4, [sp, #148]	; 0x94
  405242:	9324      	str	r3, [sp, #144]	; 0x90
  405244:	f8c9 a000 	str.w	sl, [r9]
  405248:	f8c9 6004 	str.w	r6, [r9, #4]
  40524c:	ddf0      	ble.n	405230 <_svfprintf_r+0xe7c>
  40524e:	aa23      	add	r2, sp, #140	; 0x8c
  405250:	4659      	mov	r1, fp
  405252:	4638      	mov	r0, r7
  405254:	f002 fed0 	bl	407ff8 <__ssprint_r>
  405258:	2800      	cmp	r0, #0
  40525a:	f47f a9a4 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  40525e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405260:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405262:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405266:	e7e5      	b.n	405234 <_svfprintf_r+0xe80>
  405268:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40526a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40526c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40526e:	f8c9 1000 	str.w	r1, [r9]
  405272:	3201      	adds	r2, #1
  405274:	4404      	add	r4, r0
  405276:	2a07      	cmp	r2, #7
  405278:	9425      	str	r4, [sp, #148]	; 0x94
  40527a:	f8c9 0004 	str.w	r0, [r9, #4]
  40527e:	9224      	str	r2, [sp, #144]	; 0x90
  405280:	f300 82a9 	bgt.w	4057d6 <_svfprintf_r+0x1422>
  405284:	f109 0908 	add.w	r9, r9, #8
  405288:	e7a9      	b.n	4051de <_svfprintf_r+0xe2a>
  40528a:	9b07      	ldr	r3, [sp, #28]
  40528c:	07d8      	lsls	r0, r3, #31
  40528e:	f53f adf4 	bmi.w	404e7a <_svfprintf_r+0xac6>
  405292:	3501      	adds	r5, #1
  405294:	3401      	adds	r4, #1
  405296:	2301      	movs	r3, #1
  405298:	2d07      	cmp	r5, #7
  40529a:	9425      	str	r4, [sp, #148]	; 0x94
  40529c:	9524      	str	r5, [sp, #144]	; 0x90
  40529e:	f8c9 6000 	str.w	r6, [r9]
  4052a2:	f8c9 3004 	str.w	r3, [r9, #4]
  4052a6:	f77f ae1c 	ble.w	404ee2 <_svfprintf_r+0xb2e>
  4052aa:	e70f      	b.n	4050cc <_svfprintf_r+0xd18>
  4052ac:	aa23      	add	r2, sp, #140	; 0x8c
  4052ae:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052b0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052b2:	f002 fea1 	bl	407ff8 <__ssprint_r>
  4052b6:	2800      	cmp	r0, #0
  4052b8:	f47f a975 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4052bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052be:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4052c0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052c4:	e5e7      	b.n	404e96 <_svfprintf_r+0xae2>
  4052c6:	bf00      	nop
  4052c8:	004099ac 	.word	0x004099ac
  4052cc:	aa23      	add	r2, sp, #140	; 0x8c
  4052ce:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052d0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052d2:	f002 fe91 	bl	407ff8 <__ssprint_r>
  4052d6:	2800      	cmp	r0, #0
  4052d8:	f47f a965 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4052dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052de:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4052e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052e4:	e5e6      	b.n	404eb4 <_svfprintf_r+0xb00>
  4052e6:	aa23      	add	r2, sp, #140	; 0x8c
  4052e8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052ea:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052ec:	f002 fe84 	bl	407ff8 <__ssprint_r>
  4052f0:	2800      	cmp	r0, #0
  4052f2:	f47f a958 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4052f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052f8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052fc:	f7ff ba98 	b.w	404830 <_svfprintf_r+0x47c>
  405300:	9907      	ldr	r1, [sp, #28]
  405302:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  405306:	f43f af19 	beq.w	40513c <_svfprintf_r+0xd88>
  40530a:	980e      	ldr	r0, [sp, #56]	; 0x38
  40530c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405310:	f1bb 0f00 	cmp.w	fp, #0
  405314:	8804      	ldrh	r4, [r0, #0]
  405316:	f100 0704 	add.w	r7, r0, #4
  40531a:	f04f 0500 	mov.w	r5, #0
  40531e:	f2c0 81b9 	blt.w	405694 <_svfprintf_r+0x12e0>
  405322:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  405326:	9307      	str	r3, [sp, #28]
  405328:	ea54 0305 	orrs.w	r3, r4, r5
  40532c:	970e      	str	r7, [sp, #56]	; 0x38
  40532e:	4617      	mov	r7, r2
  405330:	f47f a9e2 	bne.w	4046f8 <_svfprintf_r+0x344>
  405334:	f7ff bbbb 	b.w	404aae <_svfprintf_r+0x6fa>
  405338:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40533a:	4622      	mov	r2, r4
  40533c:	4620      	mov	r0, r4
  40533e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405340:	4623      	mov	r3, r4
  405342:	4621      	mov	r1, r4
  405344:	f003 fbac 	bl	408aa0 <__aeabi_dcmpun>
  405348:	2800      	cmp	r0, #0
  40534a:	f040 8317 	bne.w	40597c <_svfprintf_r+0x15c8>
  40534e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405350:	f1bb 3fff 	cmp.w	fp, #4294967295
  405354:	f023 0320 	bic.w	r3, r3, #32
  405358:	930d      	str	r3, [sp, #52]	; 0x34
  40535a:	f000 8270 	beq.w	40583e <_svfprintf_r+0x148a>
  40535e:	2b47      	cmp	r3, #71	; 0x47
  405360:	f000 8192 	beq.w	405688 <_svfprintf_r+0x12d4>
  405364:	9b07      	ldr	r3, [sp, #28]
  405366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40536a:	9310      	str	r3, [sp, #64]	; 0x40
  40536c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40536e:	1e1f      	subs	r7, r3, #0
  405370:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405372:	9308      	str	r3, [sp, #32]
  405374:	bfbb      	ittet	lt
  405376:	463b      	movlt	r3, r7
  405378:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40537c:	2300      	movge	r3, #0
  40537e:	232d      	movlt	r3, #45	; 0x2d
  405380:	930f      	str	r3, [sp, #60]	; 0x3c
  405382:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405384:	2b66      	cmp	r3, #102	; 0x66
  405386:	f000 825d 	beq.w	405844 <_svfprintf_r+0x1490>
  40538a:	2b46      	cmp	r3, #70	; 0x46
  40538c:	f000 8151 	beq.w	405632 <_svfprintf_r+0x127e>
  405390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405392:	9a08      	ldr	r2, [sp, #32]
  405394:	2b45      	cmp	r3, #69	; 0x45
  405396:	a821      	add	r0, sp, #132	; 0x84
  405398:	a91e      	add	r1, sp, #120	; 0x78
  40539a:	bf0c      	ite	eq
  40539c:	f10b 0501 	addeq.w	r5, fp, #1
  4053a0:	465d      	movne	r5, fp
  4053a2:	9004      	str	r0, [sp, #16]
  4053a4:	9103      	str	r1, [sp, #12]
  4053a6:	a81d      	add	r0, sp, #116	; 0x74
  4053a8:	2102      	movs	r1, #2
  4053aa:	463b      	mov	r3, r7
  4053ac:	9002      	str	r0, [sp, #8]
  4053ae:	9501      	str	r5, [sp, #4]
  4053b0:	9100      	str	r1, [sp, #0]
  4053b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4053b4:	f000 fbf0 	bl	405b98 <_dtoa_r>
  4053b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053ba:	2b67      	cmp	r3, #103	; 0x67
  4053bc:	4606      	mov	r6, r0
  4053be:	f040 8290 	bne.w	4058e2 <_svfprintf_r+0x152e>
  4053c2:	9b07      	ldr	r3, [sp, #28]
  4053c4:	07da      	lsls	r2, r3, #31
  4053c6:	f140 82af 	bpl.w	405928 <_svfprintf_r+0x1574>
  4053ca:	1974      	adds	r4, r6, r5
  4053cc:	9808      	ldr	r0, [sp, #32]
  4053ce:	4639      	mov	r1, r7
  4053d0:	2200      	movs	r2, #0
  4053d2:	2300      	movs	r3, #0
  4053d4:	f003 fb32 	bl	408a3c <__aeabi_dcmpeq>
  4053d8:	2800      	cmp	r0, #0
  4053da:	f040 8190 	bne.w	4056fe <_svfprintf_r+0x134a>
  4053de:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4053e0:	429c      	cmp	r4, r3
  4053e2:	d906      	bls.n	4053f2 <_svfprintf_r+0x103e>
  4053e4:	2130      	movs	r1, #48	; 0x30
  4053e6:	1c5a      	adds	r2, r3, #1
  4053e8:	9221      	str	r2, [sp, #132]	; 0x84
  4053ea:	7019      	strb	r1, [r3, #0]
  4053ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4053ee:	429c      	cmp	r4, r3
  4053f0:	d8f9      	bhi.n	4053e6 <_svfprintf_r+0x1032>
  4053f2:	1b9b      	subs	r3, r3, r6
  4053f4:	9312      	str	r3, [sp, #72]	; 0x48
  4053f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053f8:	2b47      	cmp	r3, #71	; 0x47
  4053fa:	f000 8179 	beq.w	4056f0 <_svfprintf_r+0x133c>
  4053fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405400:	2b65      	cmp	r3, #101	; 0x65
  405402:	f340 827d 	ble.w	405900 <_svfprintf_r+0x154c>
  405406:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405408:	2b66      	cmp	r3, #102	; 0x66
  40540a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40540c:	9313      	str	r3, [sp, #76]	; 0x4c
  40540e:	f000 825b 	beq.w	4058c8 <_svfprintf_r+0x1514>
  405412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405414:	9912      	ldr	r1, [sp, #72]	; 0x48
  405416:	428a      	cmp	r2, r1
  405418:	f2c0 8230 	blt.w	40587c <_svfprintf_r+0x14c8>
  40541c:	9b07      	ldr	r3, [sp, #28]
  40541e:	07d9      	lsls	r1, r3, #31
  405420:	f100 8284 	bmi.w	40592c <_svfprintf_r+0x1578>
  405424:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405428:	920d      	str	r2, [sp, #52]	; 0x34
  40542a:	2267      	movs	r2, #103	; 0x67
  40542c:	9211      	str	r2, [sp, #68]	; 0x44
  40542e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405430:	2a00      	cmp	r2, #0
  405432:	f040 8153 	bne.w	4056dc <_svfprintf_r+0x1328>
  405436:	9308      	str	r3, [sp, #32]
  405438:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40543a:	9307      	str	r3, [sp, #28]
  40543c:	4693      	mov	fp, r2
  40543e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405442:	f7ff b97d 	b.w	404740 <_svfprintf_r+0x38c>
  405446:	9907      	ldr	r1, [sp, #28]
  405448:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  40544c:	d015      	beq.n	40547a <_svfprintf_r+0x10c6>
  40544e:	980e      	ldr	r0, [sp, #56]	; 0x38
  405450:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  405454:	f1bb 0f00 	cmp.w	fp, #0
  405458:	8804      	ldrh	r4, [r0, #0]
  40545a:	f100 0704 	add.w	r7, r0, #4
  40545e:	f04f 0500 	mov.w	r5, #0
  405462:	db16      	blt.n	405492 <_svfprintf_r+0x10de>
  405464:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  405468:	9307      	str	r3, [sp, #28]
  40546a:	ea54 0305 	orrs.w	r3, r4, r5
  40546e:	970e      	str	r7, [sp, #56]	; 0x38
  405470:	f43f ac3a 	beq.w	404ce8 <_svfprintf_r+0x934>
  405474:	4617      	mov	r7, r2
  405476:	f7ff b8c2 	b.w	4045fe <_svfprintf_r+0x24a>
  40547a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40547c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405480:	f1bb 0f00 	cmp.w	fp, #0
  405484:	680c      	ldr	r4, [r1, #0]
  405486:	f101 0704 	add.w	r7, r1, #4
  40548a:	f04f 0500 	mov.w	r5, #0
  40548e:	f280 80a5 	bge.w	4055dc <_svfprintf_r+0x1228>
  405492:	970e      	str	r7, [sp, #56]	; 0x38
  405494:	2700      	movs	r7, #0
  405496:	f7ff b8b2 	b.w	4045fe <_svfprintf_r+0x24a>
  40549a:	9b07      	ldr	r3, [sp, #28]
  40549c:	06df      	lsls	r7, r3, #27
  40549e:	d40b      	bmi.n	4054b8 <_svfprintf_r+0x1104>
  4054a0:	9b07      	ldr	r3, [sp, #28]
  4054a2:	065e      	lsls	r6, r3, #25
  4054a4:	d508      	bpl.n	4054b8 <_svfprintf_r+0x1104>
  4054a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054a8:	6813      	ldr	r3, [r2, #0]
  4054aa:	3204      	adds	r2, #4
  4054ac:	920e      	str	r2, [sp, #56]	; 0x38
  4054ae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4054b2:	801a      	strh	r2, [r3, #0]
  4054b4:	f7fe bfa4 	b.w	404400 <_svfprintf_r+0x4c>
  4054b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054ba:	6813      	ldr	r3, [r2, #0]
  4054bc:	3204      	adds	r2, #4
  4054be:	920e      	str	r2, [sp, #56]	; 0x38
  4054c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4054c2:	601a      	str	r2, [r3, #0]
  4054c4:	f7fe bf9c 	b.w	404400 <_svfprintf_r+0x4c>
  4054c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4054ca:	9b07      	ldr	r3, [sp, #28]
  4054cc:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054d0:	4613      	mov	r3, r2
  4054d2:	f103 0304 	add.w	r3, r3, #4
  4054d6:	bf0c      	ite	eq
  4054d8:	6814      	ldreq	r4, [r2, #0]
  4054da:	8814      	ldrhne	r4, [r2, #0]
  4054dc:	930e      	str	r3, [sp, #56]	; 0x38
  4054de:	2500      	movs	r5, #0
  4054e0:	f7ff bb02 	b.w	404ae8 <_svfprintf_r+0x734>
  4054e4:	2700      	movs	r7, #0
  4054e6:	45bb      	cmp	fp, r7
  4054e8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4054ec:	f6ff ac0e 	blt.w	404d0c <_svfprintf_r+0x958>
  4054f0:	9b07      	ldr	r3, [sp, #28]
  4054f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4054f6:	9307      	str	r3, [sp, #28]
  4054f8:	f7ff bbd6 	b.w	404ca8 <_svfprintf_r+0x8f4>
  4054fc:	4614      	mov	r4, r2
  4054fe:	3301      	adds	r3, #1
  405500:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405502:	9324      	str	r3, [sp, #144]	; 0x90
  405504:	442c      	add	r4, r5
  405506:	2b07      	cmp	r3, #7
  405508:	9425      	str	r4, [sp, #148]	; 0x94
  40550a:	e889 0024 	stmia.w	r9, {r2, r5}
  40550e:	f73f ae51 	bgt.w	4051b4 <_svfprintf_r+0xe00>
  405512:	f109 0908 	add.w	r9, r9, #8
  405516:	e658      	b.n	4051ca <_svfprintf_r+0xe16>
  405518:	aa23      	add	r2, sp, #140	; 0x8c
  40551a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40551c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40551e:	f002 fd6b 	bl	407ff8 <__ssprint_r>
  405522:	2800      	cmp	r0, #0
  405524:	f47f a83f 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405528:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40552a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40552e:	e40f      	b.n	404d50 <_svfprintf_r+0x99c>
  405530:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  405532:	f7ff bbe4 	b.w	404cfe <_svfprintf_r+0x94a>
  405536:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405538:	4ab5      	ldr	r2, [pc, #724]	; (405810 <_svfprintf_r+0x145c>)
  40553a:	f8c9 2000 	str.w	r2, [r9]
  40553e:	3301      	adds	r3, #1
  405540:	3401      	adds	r4, #1
  405542:	2201      	movs	r2, #1
  405544:	2b07      	cmp	r3, #7
  405546:	9425      	str	r4, [sp, #148]	; 0x94
  405548:	9324      	str	r3, [sp, #144]	; 0x90
  40554a:	f8c9 2004 	str.w	r2, [r9, #4]
  40554e:	f300 808e 	bgt.w	40566e <_svfprintf_r+0x12ba>
  405552:	f109 0908 	add.w	r9, r9, #8
  405556:	b92d      	cbnz	r5, 405564 <_svfprintf_r+0x11b0>
  405558:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40555a:	b91b      	cbnz	r3, 405564 <_svfprintf_r+0x11b0>
  40555c:	9b07      	ldr	r3, [sp, #28]
  40555e:	07df      	lsls	r7, r3, #31
  405560:	f57f a9b8 	bpl.w	4048d4 <_svfprintf_r+0x520>
  405564:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405566:	9916      	ldr	r1, [sp, #88]	; 0x58
  405568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40556a:	f8c9 2000 	str.w	r2, [r9]
  40556e:	3301      	adds	r3, #1
  405570:	440c      	add	r4, r1
  405572:	2b07      	cmp	r3, #7
  405574:	9425      	str	r4, [sp, #148]	; 0x94
  405576:	f8c9 1004 	str.w	r1, [r9, #4]
  40557a:	9324      	str	r3, [sp, #144]	; 0x90
  40557c:	f300 81c2 	bgt.w	405904 <_svfprintf_r+0x1550>
  405580:	f109 0908 	add.w	r9, r9, #8
  405584:	426d      	negs	r5, r5
  405586:	2d00      	cmp	r5, #0
  405588:	f340 809b 	ble.w	4056c2 <_svfprintf_r+0x130e>
  40558c:	4aa1      	ldr	r2, [pc, #644]	; (405814 <_svfprintf_r+0x1460>)
  40558e:	920f      	str	r2, [sp, #60]	; 0x3c
  405590:	2d10      	cmp	r5, #16
  405592:	f340 80c3 	ble.w	40571c <_svfprintf_r+0x1368>
  405596:	4622      	mov	r2, r4
  405598:	2710      	movs	r7, #16
  40559a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40559e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4055a0:	e005      	b.n	4055ae <_svfprintf_r+0x11fa>
  4055a2:	f109 0908 	add.w	r9, r9, #8
  4055a6:	3d10      	subs	r5, #16
  4055a8:	2d10      	cmp	r5, #16
  4055aa:	f340 80b6 	ble.w	40571a <_svfprintf_r+0x1366>
  4055ae:	3301      	adds	r3, #1
  4055b0:	3210      	adds	r2, #16
  4055b2:	2b07      	cmp	r3, #7
  4055b4:	9225      	str	r2, [sp, #148]	; 0x94
  4055b6:	9324      	str	r3, [sp, #144]	; 0x90
  4055b8:	f8c9 a000 	str.w	sl, [r9]
  4055bc:	f8c9 7004 	str.w	r7, [r9, #4]
  4055c0:	ddef      	ble.n	4055a2 <_svfprintf_r+0x11ee>
  4055c2:	aa23      	add	r2, sp, #140	; 0x8c
  4055c4:	4621      	mov	r1, r4
  4055c6:	4658      	mov	r0, fp
  4055c8:	f002 fd16 	bl	407ff8 <__ssprint_r>
  4055cc:	2800      	cmp	r0, #0
  4055ce:	f47e afea 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4055d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4055d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4055da:	e7e4      	b.n	4055a6 <_svfprintf_r+0x11f2>
  4055dc:	9a07      	ldr	r2, [sp, #28]
  4055de:	f7ff ba38 	b.w	404a52 <_svfprintf_r+0x69e>
  4055e2:	9a07      	ldr	r2, [sp, #28]
  4055e4:	e590      	b.n	405108 <_svfprintf_r+0xd54>
  4055e6:	9b07      	ldr	r3, [sp, #28]
  4055e8:	f043 0320 	orr.w	r3, r3, #32
  4055ec:	9307      	str	r3, [sp, #28]
  4055ee:	f108 0801 	add.w	r8, r8, #1
  4055f2:	f898 3000 	ldrb.w	r3, [r8]
  4055f6:	f7fe bf36 	b.w	404466 <_svfprintf_r+0xb2>
  4055fa:	aa23      	add	r2, sp, #140	; 0x8c
  4055fc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4055fe:	980a      	ldr	r0, [sp, #40]	; 0x28
  405600:	f002 fcfa 	bl	407ff8 <__ssprint_r>
  405604:	2800      	cmp	r0, #0
  405606:	f47e afce 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  40560a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40560c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405610:	f7ff bbb6 	b.w	404d80 <_svfprintf_r+0x9cc>
  405614:	2140      	movs	r1, #64	; 0x40
  405616:	980a      	ldr	r0, [sp, #40]	; 0x28
  405618:	f001 fb38 	bl	406c8c <_malloc_r>
  40561c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40561e:	6010      	str	r0, [r2, #0]
  405620:	6110      	str	r0, [r2, #16]
  405622:	2800      	cmp	r0, #0
  405624:	f000 81e5 	beq.w	4059f2 <_svfprintf_r+0x163e>
  405628:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40562a:	2340      	movs	r3, #64	; 0x40
  40562c:	6153      	str	r3, [r2, #20]
  40562e:	f7fe bed8 	b.w	4043e2 <_svfprintf_r+0x2e>
  405632:	a821      	add	r0, sp, #132	; 0x84
  405634:	a91e      	add	r1, sp, #120	; 0x78
  405636:	9004      	str	r0, [sp, #16]
  405638:	9103      	str	r1, [sp, #12]
  40563a:	a81d      	add	r0, sp, #116	; 0x74
  40563c:	2103      	movs	r1, #3
  40563e:	9002      	str	r0, [sp, #8]
  405640:	9a08      	ldr	r2, [sp, #32]
  405642:	f8cd b004 	str.w	fp, [sp, #4]
  405646:	463b      	mov	r3, r7
  405648:	9100      	str	r1, [sp, #0]
  40564a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40564c:	f000 faa4 	bl	405b98 <_dtoa_r>
  405650:	465d      	mov	r5, fp
  405652:	4606      	mov	r6, r0
  405654:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405656:	2b46      	cmp	r3, #70	; 0x46
  405658:	eb06 0405 	add.w	r4, r6, r5
  40565c:	f47f aeb6 	bne.w	4053cc <_svfprintf_r+0x1018>
  405660:	7833      	ldrb	r3, [r6, #0]
  405662:	2b30      	cmp	r3, #48	; 0x30
  405664:	f000 817c 	beq.w	405960 <_svfprintf_r+0x15ac>
  405668:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40566a:	442c      	add	r4, r5
  40566c:	e6ae      	b.n	4053cc <_svfprintf_r+0x1018>
  40566e:	aa23      	add	r2, sp, #140	; 0x8c
  405670:	9909      	ldr	r1, [sp, #36]	; 0x24
  405672:	980a      	ldr	r0, [sp, #40]	; 0x28
  405674:	f002 fcc0 	bl	407ff8 <__ssprint_r>
  405678:	2800      	cmp	r0, #0
  40567a:	f47e af94 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  40567e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405680:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405682:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405686:	e766      	b.n	405556 <_svfprintf_r+0x11a2>
  405688:	f1bb 0f00 	cmp.w	fp, #0
  40568c:	bf08      	it	eq
  40568e:	f04f 0b01 	moveq.w	fp, #1
  405692:	e667      	b.n	405364 <_svfprintf_r+0xfb0>
  405694:	970e      	str	r7, [sp, #56]	; 0x38
  405696:	4617      	mov	r7, r2
  405698:	e55e      	b.n	405158 <_svfprintf_r+0xda4>
  40569a:	4630      	mov	r0, r6
  40569c:	f7fe fbb0 	bl	403e00 <strlen>
  4056a0:	46a3      	mov	fp, r4
  4056a2:	4603      	mov	r3, r0
  4056a4:	900d      	str	r0, [sp, #52]	; 0x34
  4056a6:	f7ff baf4 	b.w	404c92 <_svfprintf_r+0x8de>
  4056aa:	aa23      	add	r2, sp, #140	; 0x8c
  4056ac:	9909      	ldr	r1, [sp, #36]	; 0x24
  4056ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4056b0:	f002 fca2 	bl	407ff8 <__ssprint_r>
  4056b4:	2800      	cmp	r0, #0
  4056b6:	f47e af76 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4056ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4056bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4056c2:	9912      	ldr	r1, [sp, #72]	; 0x48
  4056c4:	f8c9 6000 	str.w	r6, [r9]
  4056c8:	3301      	adds	r3, #1
  4056ca:	440c      	add	r4, r1
  4056cc:	2b07      	cmp	r3, #7
  4056ce:	9425      	str	r4, [sp, #148]	; 0x94
  4056d0:	9324      	str	r3, [sp, #144]	; 0x90
  4056d2:	f8c9 1004 	str.w	r1, [r9, #4]
  4056d6:	f77f a8fb 	ble.w	4048d0 <_svfprintf_r+0x51c>
  4056da:	e411      	b.n	404f00 <_svfprintf_r+0xb4c>
  4056dc:	272d      	movs	r7, #45	; 0x2d
  4056de:	9308      	str	r3, [sp, #32]
  4056e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056e2:	9307      	str	r3, [sp, #28]
  4056e4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4056e8:	f04f 0b00 	mov.w	fp, #0
  4056ec:	f7ff b829 	b.w	404742 <_svfprintf_r+0x38e>
  4056f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4056f2:	1cdd      	adds	r5, r3, #3
  4056f4:	db1e      	blt.n	405734 <_svfprintf_r+0x1380>
  4056f6:	459b      	cmp	fp, r3
  4056f8:	db1c      	blt.n	405734 <_svfprintf_r+0x1380>
  4056fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4056fc:	e689      	b.n	405412 <_svfprintf_r+0x105e>
  4056fe:	4623      	mov	r3, r4
  405700:	e677      	b.n	4053f2 <_svfprintf_r+0x103e>
  405702:	aa23      	add	r2, sp, #140	; 0x8c
  405704:	9909      	ldr	r1, [sp, #36]	; 0x24
  405706:	980a      	ldr	r0, [sp, #40]	; 0x28
  405708:	f002 fc76 	bl	407ff8 <__ssprint_r>
  40570c:	2800      	cmp	r0, #0
  40570e:	f47e af4a 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405712:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405714:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405718:	e459      	b.n	404fce <_svfprintf_r+0xc1a>
  40571a:	4614      	mov	r4, r2
  40571c:	3301      	adds	r3, #1
  40571e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405720:	9324      	str	r3, [sp, #144]	; 0x90
  405722:	442c      	add	r4, r5
  405724:	2b07      	cmp	r3, #7
  405726:	9425      	str	r4, [sp, #148]	; 0x94
  405728:	e889 0024 	stmia.w	r9, {r2, r5}
  40572c:	dcbd      	bgt.n	4056aa <_svfprintf_r+0x12f6>
  40572e:	f109 0908 	add.w	r9, r9, #8
  405732:	e7c6      	b.n	4056c2 <_svfprintf_r+0x130e>
  405734:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405736:	3a02      	subs	r2, #2
  405738:	9211      	str	r2, [sp, #68]	; 0x44
  40573a:	3b01      	subs	r3, #1
  40573c:	2b00      	cmp	r3, #0
  40573e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  405742:	931d      	str	r3, [sp, #116]	; 0x74
  405744:	bfb8      	it	lt
  405746:	425b      	neglt	r3, r3
  405748:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  40574c:	bfb4      	ite	lt
  40574e:	222d      	movlt	r2, #45	; 0x2d
  405750:	222b      	movge	r2, #43	; 0x2b
  405752:	2b09      	cmp	r3, #9
  405754:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405758:	f340 80f1 	ble.w	40593e <_svfprintf_r+0x158a>
  40575c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405760:	4604      	mov	r4, r0
  405762:	4a2d      	ldr	r2, [pc, #180]	; (405818 <_svfprintf_r+0x1464>)
  405764:	fb82 2103 	smull	r2, r1, r2, r3
  405768:	17da      	asrs	r2, r3, #31
  40576a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  40576e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  405772:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  405776:	f103 0130 	add.w	r1, r3, #48	; 0x30
  40577a:	2a09      	cmp	r2, #9
  40577c:	4613      	mov	r3, r2
  40577e:	f804 1d01 	strb.w	r1, [r4, #-1]!
  405782:	dcee      	bgt.n	405762 <_svfprintf_r+0x13ae>
  405784:	4621      	mov	r1, r4
  405786:	3330      	adds	r3, #48	; 0x30
  405788:	b2da      	uxtb	r2, r3
  40578a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40578e:	4288      	cmp	r0, r1
  405790:	f240 813a 	bls.w	405a08 <_svfprintf_r+0x1654>
  405794:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  405798:	4623      	mov	r3, r4
  40579a:	e001      	b.n	4057a0 <_svfprintf_r+0x13ec>
  40579c:	f813 2b01 	ldrb.w	r2, [r3], #1
  4057a0:	f801 2b01 	strb.w	r2, [r1], #1
  4057a4:	4298      	cmp	r0, r3
  4057a6:	d1f9      	bne.n	40579c <_svfprintf_r+0x13e8>
  4057a8:	1c43      	adds	r3, r0, #1
  4057aa:	1b1b      	subs	r3, r3, r4
  4057ac:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4057b0:	4413      	add	r3, r2
  4057b2:	aa1f      	add	r2, sp, #124	; 0x7c
  4057b4:	1a9b      	subs	r3, r3, r2
  4057b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4057b8:	9319      	str	r3, [sp, #100]	; 0x64
  4057ba:	2a01      	cmp	r2, #1
  4057bc:	4413      	add	r3, r2
  4057be:	930d      	str	r3, [sp, #52]	; 0x34
  4057c0:	f340 80ea 	ble.w	405998 <_svfprintf_r+0x15e4>
  4057c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4057c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4057c8:	4413      	add	r3, r2
  4057ca:	2200      	movs	r2, #0
  4057cc:	930d      	str	r3, [sp, #52]	; 0x34
  4057ce:	9213      	str	r2, [sp, #76]	; 0x4c
  4057d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4057d4:	e62b      	b.n	40542e <_svfprintf_r+0x107a>
  4057d6:	aa23      	add	r2, sp, #140	; 0x8c
  4057d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  4057da:	980a      	ldr	r0, [sp, #40]	; 0x28
  4057dc:	f002 fc0c 	bl	407ff8 <__ssprint_r>
  4057e0:	2800      	cmp	r0, #0
  4057e2:	f47e aee0 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  4057e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4057e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4057ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4057ee:	e4f6      	b.n	4051de <_svfprintf_r+0xe2a>
  4057f0:	2d06      	cmp	r5, #6
  4057f2:	462b      	mov	r3, r5
  4057f4:	bf28      	it	cs
  4057f6:	2306      	movcs	r3, #6
  4057f8:	930d      	str	r3, [sp, #52]	; 0x34
  4057fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4057fe:	46b3      	mov	fp, r6
  405800:	970e      	str	r7, [sp, #56]	; 0x38
  405802:	9613      	str	r6, [sp, #76]	; 0x4c
  405804:	4637      	mov	r7, r6
  405806:	9308      	str	r3, [sp, #32]
  405808:	4e04      	ldr	r6, [pc, #16]	; (40581c <_svfprintf_r+0x1468>)
  40580a:	f7fe bf99 	b.w	404740 <_svfprintf_r+0x38c>
  40580e:	bf00      	nop
  405810:	004099fc 	.word	0x004099fc
  405814:	004099ac 	.word	0x004099ac
  405818:	66666667 	.word	0x66666667
  40581c:	004099f4 	.word	0x004099f4
  405820:	aa23      	add	r2, sp, #140	; 0x8c
  405822:	9909      	ldr	r1, [sp, #36]	; 0x24
  405824:	980a      	ldr	r0, [sp, #40]	; 0x28
  405826:	f002 fbe7 	bl	407ff8 <__ssprint_r>
  40582a:	2800      	cmp	r0, #0
  40582c:	f47e aebb 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405832:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405834:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405836:	1ad3      	subs	r3, r2, r3
  405838:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40583c:	e4e7      	b.n	40520e <_svfprintf_r+0xe5a>
  40583e:	f04f 0b06 	mov.w	fp, #6
  405842:	e58f      	b.n	405364 <_svfprintf_r+0xfb0>
  405844:	a821      	add	r0, sp, #132	; 0x84
  405846:	a91e      	add	r1, sp, #120	; 0x78
  405848:	9004      	str	r0, [sp, #16]
  40584a:	9103      	str	r1, [sp, #12]
  40584c:	a81d      	add	r0, sp, #116	; 0x74
  40584e:	2103      	movs	r1, #3
  405850:	9002      	str	r0, [sp, #8]
  405852:	9a08      	ldr	r2, [sp, #32]
  405854:	f8cd b004 	str.w	fp, [sp, #4]
  405858:	463b      	mov	r3, r7
  40585a:	9100      	str	r1, [sp, #0]
  40585c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40585e:	f000 f99b 	bl	405b98 <_dtoa_r>
  405862:	465d      	mov	r5, fp
  405864:	4606      	mov	r6, r0
  405866:	eb00 040b 	add.w	r4, r0, fp
  40586a:	e6f9      	b.n	405660 <_svfprintf_r+0x12ac>
  40586c:	9307      	str	r3, [sp, #28]
  40586e:	f7ff b959 	b.w	404b24 <_svfprintf_r+0x770>
  405872:	272d      	movs	r7, #45	; 0x2d
  405874:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405878:	f7ff b8b2 	b.w	4049e0 <_svfprintf_r+0x62c>
  40587c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40587e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405880:	4413      	add	r3, r2
  405882:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405884:	930d      	str	r3, [sp, #52]	; 0x34
  405886:	2a00      	cmp	r2, #0
  405888:	dd7e      	ble.n	405988 <_svfprintf_r+0x15d4>
  40588a:	2267      	movs	r2, #103	; 0x67
  40588c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405890:	9211      	str	r2, [sp, #68]	; 0x44
  405892:	e5cc      	b.n	40542e <_svfprintf_r+0x107a>
  405894:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  405898:	970e      	str	r7, [sp, #56]	; 0x38
  40589a:	9308      	str	r3, [sp, #32]
  40589c:	950d      	str	r5, [sp, #52]	; 0x34
  40589e:	4683      	mov	fp, r0
  4058a0:	9013      	str	r0, [sp, #76]	; 0x4c
  4058a2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4058a6:	f7fe bf4b 	b.w	404740 <_svfprintf_r+0x38c>
  4058aa:	9b07      	ldr	r3, [sp, #28]
  4058ac:	07db      	lsls	r3, r3, #31
  4058ae:	465f      	mov	r7, fp
  4058b0:	d505      	bpl.n	4058be <_svfprintf_r+0x150a>
  4058b2:	ae40      	add	r6, sp, #256	; 0x100
  4058b4:	2330      	movs	r3, #48	; 0x30
  4058b6:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4058ba:	f7fe bf37 	b.w	40472c <_svfprintf_r+0x378>
  4058be:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4058c2:	ae30      	add	r6, sp, #192	; 0xc0
  4058c4:	f7fe bf35 	b.w	404732 <_svfprintf_r+0x37e>
  4058c8:	2b00      	cmp	r3, #0
  4058ca:	dd7d      	ble.n	4059c8 <_svfprintf_r+0x1614>
  4058cc:	f1bb 0f00 	cmp.w	fp, #0
  4058d0:	d13d      	bne.n	40594e <_svfprintf_r+0x159a>
  4058d2:	9a07      	ldr	r2, [sp, #28]
  4058d4:	07d4      	lsls	r4, r2, #31
  4058d6:	d43a      	bmi.n	40594e <_svfprintf_r+0x159a>
  4058d8:	461a      	mov	r2, r3
  4058da:	920d      	str	r2, [sp, #52]	; 0x34
  4058dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4058e0:	e5a5      	b.n	40542e <_svfprintf_r+0x107a>
  4058e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4058e4:	2b47      	cmp	r3, #71	; 0x47
  4058e6:	f47f ad70 	bne.w	4053ca <_svfprintf_r+0x1016>
  4058ea:	9b07      	ldr	r3, [sp, #28]
  4058ec:	07db      	lsls	r3, r3, #31
  4058ee:	f53f aeb1 	bmi.w	405654 <_svfprintf_r+0x12a0>
  4058f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4058f4:	1b9b      	subs	r3, r3, r6
  4058f6:	9312      	str	r3, [sp, #72]	; 0x48
  4058f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058fa:	2b47      	cmp	r3, #71	; 0x47
  4058fc:	f43f aef8 	beq.w	4056f0 <_svfprintf_r+0x133c>
  405900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405902:	e71a      	b.n	40573a <_svfprintf_r+0x1386>
  405904:	aa23      	add	r2, sp, #140	; 0x8c
  405906:	9909      	ldr	r1, [sp, #36]	; 0x24
  405908:	980a      	ldr	r0, [sp, #40]	; 0x28
  40590a:	f002 fb75 	bl	407ff8 <__ssprint_r>
  40590e:	2800      	cmp	r0, #0
  405910:	f47e ae49 	bne.w	4045a6 <_svfprintf_r+0x1f2>
  405914:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405916:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405918:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40591a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40591e:	e631      	b.n	405584 <_svfprintf_r+0x11d0>
  405920:	46a0      	mov	r8, r4
  405922:	2500      	movs	r5, #0
  405924:	f7fe bda1 	b.w	40446a <_svfprintf_r+0xb6>
  405928:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40592a:	e562      	b.n	4053f2 <_svfprintf_r+0x103e>
  40592c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40592e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405930:	4413      	add	r3, r2
  405932:	2267      	movs	r2, #103	; 0x67
  405934:	930d      	str	r3, [sp, #52]	; 0x34
  405936:	9211      	str	r2, [sp, #68]	; 0x44
  405938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40593c:	e577      	b.n	40542e <_svfprintf_r+0x107a>
  40593e:	3330      	adds	r3, #48	; 0x30
  405940:	2230      	movs	r2, #48	; 0x30
  405942:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405946:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40594a:	ab20      	add	r3, sp, #128	; 0x80
  40594c:	e731      	b.n	4057b2 <_svfprintf_r+0x13fe>
  40594e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405950:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405952:	189d      	adds	r5, r3, r2
  405954:	eb05 030b 	add.w	r3, r5, fp
  405958:	930d      	str	r3, [sp, #52]	; 0x34
  40595a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40595e:	e566      	b.n	40542e <_svfprintf_r+0x107a>
  405960:	9808      	ldr	r0, [sp, #32]
  405962:	4639      	mov	r1, r7
  405964:	2200      	movs	r2, #0
  405966:	2300      	movs	r3, #0
  405968:	f003 f868 	bl	408a3c <__aeabi_dcmpeq>
  40596c:	2800      	cmp	r0, #0
  40596e:	f47f ae7b 	bne.w	405668 <_svfprintf_r+0x12b4>
  405972:	f1c5 0501 	rsb	r5, r5, #1
  405976:	951d      	str	r5, [sp, #116]	; 0x74
  405978:	442c      	add	r4, r5
  40597a:	e527      	b.n	4053cc <_svfprintf_r+0x1018>
  40597c:	4e32      	ldr	r6, [pc, #200]	; (405a48 <_svfprintf_r+0x1694>)
  40597e:	4b33      	ldr	r3, [pc, #204]	; (405a4c <_svfprintf_r+0x1698>)
  405980:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  405984:	f7ff b82e 	b.w	4049e4 <_svfprintf_r+0x630>
  405988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40598a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40598c:	f1c3 0301 	rsb	r3, r3, #1
  405990:	441a      	add	r2, r3
  405992:	4613      	mov	r3, r2
  405994:	920d      	str	r2, [sp, #52]	; 0x34
  405996:	e778      	b.n	40588a <_svfprintf_r+0x14d6>
  405998:	9b07      	ldr	r3, [sp, #28]
  40599a:	f013 0301 	ands.w	r3, r3, #1
  40599e:	f47f af11 	bne.w	4057c4 <_svfprintf_r+0x1410>
  4059a2:	9313      	str	r3, [sp, #76]	; 0x4c
  4059a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4059a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4059aa:	e540      	b.n	40542e <_svfprintf_r+0x107a>
  4059ac:	980e      	ldr	r0, [sp, #56]	; 0x38
  4059ae:	f898 3001 	ldrb.w	r3, [r8, #1]
  4059b2:	6805      	ldr	r5, [r0, #0]
  4059b4:	3004      	adds	r0, #4
  4059b6:	2d00      	cmp	r5, #0
  4059b8:	900e      	str	r0, [sp, #56]	; 0x38
  4059ba:	46a0      	mov	r8, r4
  4059bc:	f6be ad53 	bge.w	404466 <_svfprintf_r+0xb2>
  4059c0:	f04f 35ff 	mov.w	r5, #4294967295
  4059c4:	f7fe bd4f 	b.w	404466 <_svfprintf_r+0xb2>
  4059c8:	f1bb 0f00 	cmp.w	fp, #0
  4059cc:	d102      	bne.n	4059d4 <_svfprintf_r+0x1620>
  4059ce:	9b07      	ldr	r3, [sp, #28]
  4059d0:	07d8      	lsls	r0, r3, #31
  4059d2:	d507      	bpl.n	4059e4 <_svfprintf_r+0x1630>
  4059d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4059d6:	1c5d      	adds	r5, r3, #1
  4059d8:	eb05 030b 	add.w	r3, r5, fp
  4059dc:	930d      	str	r3, [sp, #52]	; 0x34
  4059de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4059e2:	e524      	b.n	40542e <_svfprintf_r+0x107a>
  4059e4:	2301      	movs	r3, #1
  4059e6:	930d      	str	r3, [sp, #52]	; 0x34
  4059e8:	e521      	b.n	40542e <_svfprintf_r+0x107a>
  4059ea:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4059ee:	f7ff b921 	b.w	404c34 <_svfprintf_r+0x880>
  4059f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4059f4:	230c      	movs	r3, #12
  4059f6:	6013      	str	r3, [r2, #0]
  4059f8:	f04f 30ff 	mov.w	r0, #4294967295
  4059fc:	f7fe bddc 	b.w	4045b8 <_svfprintf_r+0x204>
  405a00:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a04:	f7ff b8f9 	b.w	404bfa <_svfprintf_r+0x846>
  405a08:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405a0c:	e6d1      	b.n	4057b2 <_svfprintf_r+0x13fe>
  405a0e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a12:	f7fe bdd9 	b.w	4045c8 <_svfprintf_r+0x214>
  405a16:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a1a:	f7ff b857 	b.w	404acc <_svfprintf_r+0x718>
  405a1e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a22:	f7ff b825 	b.w	404a70 <_svfprintf_r+0x6bc>
  405a26:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a2a:	f7ff b94c 	b.w	404cc6 <_svfprintf_r+0x912>
  405a2e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a32:	f7fe bff3 	b.w	404a1c <_svfprintf_r+0x668>
  405a36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a3a:	f7fe bfa3 	b.w	404984 <_svfprintf_r+0x5d0>
  405a3e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405a42:	f7fe be33 	b.w	4046ac <_svfprintf_r+0x2f8>
  405a46:	bf00      	nop
  405a48:	004099c8 	.word	0x004099c8
  405a4c:	004099c4 	.word	0x004099c4

00405a50 <register_fini>:
  405a50:	4b02      	ldr	r3, [pc, #8]	; (405a5c <register_fini+0xc>)
  405a52:	b113      	cbz	r3, 405a5a <register_fini+0xa>
  405a54:	4802      	ldr	r0, [pc, #8]	; (405a60 <register_fini+0x10>)
  405a56:	f000 b805 	b.w	405a64 <atexit>
  405a5a:	4770      	bx	lr
  405a5c:	00000000 	.word	0x00000000
  405a60:	004069f1 	.word	0x004069f1

00405a64 <atexit>:
  405a64:	2300      	movs	r3, #0
  405a66:	4601      	mov	r1, r0
  405a68:	461a      	mov	r2, r3
  405a6a:	4618      	mov	r0, r3
  405a6c:	f002 bb44 	b.w	4080f8 <__register_exitproc>

00405a70 <quorem>:
  405a70:	6902      	ldr	r2, [r0, #16]
  405a72:	690b      	ldr	r3, [r1, #16]
  405a74:	4293      	cmp	r3, r2
  405a76:	f300 808d 	bgt.w	405b94 <quorem+0x124>
  405a7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a7e:	f103 38ff 	add.w	r8, r3, #4294967295
  405a82:	f101 0714 	add.w	r7, r1, #20
  405a86:	f100 0b14 	add.w	fp, r0, #20
  405a8a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405a8e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405a92:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405a96:	b083      	sub	sp, #12
  405a98:	3201      	adds	r2, #1
  405a9a:	fbb3 f9f2 	udiv	r9, r3, r2
  405a9e:	eb0b 0304 	add.w	r3, fp, r4
  405aa2:	9400      	str	r4, [sp, #0]
  405aa4:	eb07 0a04 	add.w	sl, r7, r4
  405aa8:	9301      	str	r3, [sp, #4]
  405aaa:	f1b9 0f00 	cmp.w	r9, #0
  405aae:	d039      	beq.n	405b24 <quorem+0xb4>
  405ab0:	2500      	movs	r5, #0
  405ab2:	46bc      	mov	ip, r7
  405ab4:	46de      	mov	lr, fp
  405ab6:	462b      	mov	r3, r5
  405ab8:	f85c 6b04 	ldr.w	r6, [ip], #4
  405abc:	f8de 2000 	ldr.w	r2, [lr]
  405ac0:	b2b4      	uxth	r4, r6
  405ac2:	fb09 5504 	mla	r5, r9, r4, r5
  405ac6:	0c36      	lsrs	r6, r6, #16
  405ac8:	0c2c      	lsrs	r4, r5, #16
  405aca:	fb09 4406 	mla	r4, r9, r6, r4
  405ace:	b2ad      	uxth	r5, r5
  405ad0:	1b5b      	subs	r3, r3, r5
  405ad2:	b2a6      	uxth	r6, r4
  405ad4:	fa13 f382 	uxtah	r3, r3, r2
  405ad8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  405adc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405ae0:	b29b      	uxth	r3, r3
  405ae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405ae6:	45e2      	cmp	sl, ip
  405ae8:	f84e 3b04 	str.w	r3, [lr], #4
  405aec:	ea4f 4514 	mov.w	r5, r4, lsr #16
  405af0:	ea4f 4326 	mov.w	r3, r6, asr #16
  405af4:	d2e0      	bcs.n	405ab8 <quorem+0x48>
  405af6:	9b00      	ldr	r3, [sp, #0]
  405af8:	f85b 3003 	ldr.w	r3, [fp, r3]
  405afc:	b993      	cbnz	r3, 405b24 <quorem+0xb4>
  405afe:	9c01      	ldr	r4, [sp, #4]
  405b00:	1f23      	subs	r3, r4, #4
  405b02:	459b      	cmp	fp, r3
  405b04:	d20c      	bcs.n	405b20 <quorem+0xb0>
  405b06:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405b0a:	b94b      	cbnz	r3, 405b20 <quorem+0xb0>
  405b0c:	f1a4 0308 	sub.w	r3, r4, #8
  405b10:	e002      	b.n	405b18 <quorem+0xa8>
  405b12:	681a      	ldr	r2, [r3, #0]
  405b14:	3b04      	subs	r3, #4
  405b16:	b91a      	cbnz	r2, 405b20 <quorem+0xb0>
  405b18:	459b      	cmp	fp, r3
  405b1a:	f108 38ff 	add.w	r8, r8, #4294967295
  405b1e:	d3f8      	bcc.n	405b12 <quorem+0xa2>
  405b20:	f8c0 8010 	str.w	r8, [r0, #16]
  405b24:	4604      	mov	r4, r0
  405b26:	f001 fef7 	bl	407918 <__mcmp>
  405b2a:	2800      	cmp	r0, #0
  405b2c:	db2e      	blt.n	405b8c <quorem+0x11c>
  405b2e:	f109 0901 	add.w	r9, r9, #1
  405b32:	465d      	mov	r5, fp
  405b34:	2300      	movs	r3, #0
  405b36:	f857 1b04 	ldr.w	r1, [r7], #4
  405b3a:	6828      	ldr	r0, [r5, #0]
  405b3c:	b28a      	uxth	r2, r1
  405b3e:	1a9a      	subs	r2, r3, r2
  405b40:	0c09      	lsrs	r1, r1, #16
  405b42:	fa12 f280 	uxtah	r2, r2, r0
  405b46:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  405b4a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405b4e:	b291      	uxth	r1, r2
  405b50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  405b54:	45ba      	cmp	sl, r7
  405b56:	f845 1b04 	str.w	r1, [r5], #4
  405b5a:	ea4f 4323 	mov.w	r3, r3, asr #16
  405b5e:	d2ea      	bcs.n	405b36 <quorem+0xc6>
  405b60:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405b64:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405b68:	b982      	cbnz	r2, 405b8c <quorem+0x11c>
  405b6a:	1f1a      	subs	r2, r3, #4
  405b6c:	4593      	cmp	fp, r2
  405b6e:	d20b      	bcs.n	405b88 <quorem+0x118>
  405b70:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405b74:	b942      	cbnz	r2, 405b88 <quorem+0x118>
  405b76:	3b08      	subs	r3, #8
  405b78:	e002      	b.n	405b80 <quorem+0x110>
  405b7a:	681a      	ldr	r2, [r3, #0]
  405b7c:	3b04      	subs	r3, #4
  405b7e:	b91a      	cbnz	r2, 405b88 <quorem+0x118>
  405b80:	459b      	cmp	fp, r3
  405b82:	f108 38ff 	add.w	r8, r8, #4294967295
  405b86:	d3f8      	bcc.n	405b7a <quorem+0x10a>
  405b88:	f8c4 8010 	str.w	r8, [r4, #16]
  405b8c:	4648      	mov	r0, r9
  405b8e:	b003      	add	sp, #12
  405b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b94:	2000      	movs	r0, #0
  405b96:	4770      	bx	lr

00405b98 <_dtoa_r>:
  405b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405b9e:	b097      	sub	sp, #92	; 0x5c
  405ba0:	4681      	mov	r9, r0
  405ba2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  405ba4:	4692      	mov	sl, r2
  405ba6:	469b      	mov	fp, r3
  405ba8:	b149      	cbz	r1, 405bbe <_dtoa_r+0x26>
  405baa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405bac:	604a      	str	r2, [r1, #4]
  405bae:	2301      	movs	r3, #1
  405bb0:	4093      	lsls	r3, r2
  405bb2:	608b      	str	r3, [r1, #8]
  405bb4:	f001 fcce 	bl	407554 <_Bfree>
  405bb8:	2300      	movs	r3, #0
  405bba:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  405bbe:	f1bb 0f00 	cmp.w	fp, #0
  405bc2:	46d8      	mov	r8, fp
  405bc4:	db33      	blt.n	405c2e <_dtoa_r+0x96>
  405bc6:	2300      	movs	r3, #0
  405bc8:	6023      	str	r3, [r4, #0]
  405bca:	4ba5      	ldr	r3, [pc, #660]	; (405e60 <_dtoa_r+0x2c8>)
  405bcc:	461a      	mov	r2, r3
  405bce:	ea08 0303 	and.w	r3, r8, r3
  405bd2:	4293      	cmp	r3, r2
  405bd4:	d014      	beq.n	405c00 <_dtoa_r+0x68>
  405bd6:	4650      	mov	r0, sl
  405bd8:	4659      	mov	r1, fp
  405bda:	2200      	movs	r2, #0
  405bdc:	2300      	movs	r3, #0
  405bde:	f002 ff2d 	bl	408a3c <__aeabi_dcmpeq>
  405be2:	4605      	mov	r5, r0
  405be4:	b348      	cbz	r0, 405c3a <_dtoa_r+0xa2>
  405be6:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405be8:	2301      	movs	r3, #1
  405bea:	6013      	str	r3, [r2, #0]
  405bec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405bee:	2b00      	cmp	r3, #0
  405bf0:	f000 80c5 	beq.w	405d7e <_dtoa_r+0x1e6>
  405bf4:	489b      	ldr	r0, [pc, #620]	; (405e64 <_dtoa_r+0x2cc>)
  405bf6:	6018      	str	r0, [r3, #0]
  405bf8:	3801      	subs	r0, #1
  405bfa:	b017      	add	sp, #92	; 0x5c
  405bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c00:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405c02:	f242 730f 	movw	r3, #9999	; 0x270f
  405c06:	6013      	str	r3, [r2, #0]
  405c08:	f1ba 0f00 	cmp.w	sl, #0
  405c0c:	f000 80a2 	beq.w	405d54 <_dtoa_r+0x1bc>
  405c10:	4895      	ldr	r0, [pc, #596]	; (405e68 <_dtoa_r+0x2d0>)
  405c12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c14:	2b00      	cmp	r3, #0
  405c16:	d0f0      	beq.n	405bfa <_dtoa_r+0x62>
  405c18:	78c3      	ldrb	r3, [r0, #3]
  405c1a:	2b00      	cmp	r3, #0
  405c1c:	f000 80b1 	beq.w	405d82 <_dtoa_r+0x1ea>
  405c20:	f100 0308 	add.w	r3, r0, #8
  405c24:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405c26:	6013      	str	r3, [r2, #0]
  405c28:	b017      	add	sp, #92	; 0x5c
  405c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c2e:	2301      	movs	r3, #1
  405c30:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  405c34:	6023      	str	r3, [r4, #0]
  405c36:	46c3      	mov	fp, r8
  405c38:	e7c7      	b.n	405bca <_dtoa_r+0x32>
  405c3a:	aa14      	add	r2, sp, #80	; 0x50
  405c3c:	ab15      	add	r3, sp, #84	; 0x54
  405c3e:	9201      	str	r2, [sp, #4]
  405c40:	9300      	str	r3, [sp, #0]
  405c42:	4652      	mov	r2, sl
  405c44:	465b      	mov	r3, fp
  405c46:	4648      	mov	r0, r9
  405c48:	f001 ff10 	bl	407a6c <__d2b>
  405c4c:	ea5f 5418 	movs.w	r4, r8, lsr #20
  405c50:	9008      	str	r0, [sp, #32]
  405c52:	f040 8088 	bne.w	405d66 <_dtoa_r+0x1ce>
  405c56:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405c58:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405c5a:	442c      	add	r4, r5
  405c5c:	f204 4332 	addw	r3, r4, #1074	; 0x432
  405c60:	2b20      	cmp	r3, #32
  405c62:	f340 8291 	ble.w	406188 <_dtoa_r+0x5f0>
  405c66:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405c6a:	f204 4012 	addw	r0, r4, #1042	; 0x412
  405c6e:	fa08 f803 	lsl.w	r8, r8, r3
  405c72:	fa2a f000 	lsr.w	r0, sl, r0
  405c76:	ea40 0008 	orr.w	r0, r0, r8
  405c7a:	f002 fc01 	bl	408480 <__aeabi_ui2d>
  405c7e:	2301      	movs	r3, #1
  405c80:	3c01      	subs	r4, #1
  405c82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405c86:	9310      	str	r3, [sp, #64]	; 0x40
  405c88:	2200      	movs	r2, #0
  405c8a:	4b78      	ldr	r3, [pc, #480]	; (405e6c <_dtoa_r+0x2d4>)
  405c8c:	f002 faba 	bl	408204 <__aeabi_dsub>
  405c90:	a36d      	add	r3, pc, #436	; (adr r3, 405e48 <_dtoa_r+0x2b0>)
  405c92:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c96:	f002 fc69 	bl	40856c <__aeabi_dmul>
  405c9a:	a36d      	add	r3, pc, #436	; (adr r3, 405e50 <_dtoa_r+0x2b8>)
  405c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ca0:	f002 fab2 	bl	408208 <__adddf3>
  405ca4:	4606      	mov	r6, r0
  405ca6:	4620      	mov	r0, r4
  405ca8:	460f      	mov	r7, r1
  405caa:	f002 fbf9 	bl	4084a0 <__aeabi_i2d>
  405cae:	a36a      	add	r3, pc, #424	; (adr r3, 405e58 <_dtoa_r+0x2c0>)
  405cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cb4:	f002 fc5a 	bl	40856c <__aeabi_dmul>
  405cb8:	4602      	mov	r2, r0
  405cba:	460b      	mov	r3, r1
  405cbc:	4630      	mov	r0, r6
  405cbe:	4639      	mov	r1, r7
  405cc0:	f002 faa2 	bl	408208 <__adddf3>
  405cc4:	4606      	mov	r6, r0
  405cc6:	460f      	mov	r7, r1
  405cc8:	f002 ff00 	bl	408acc <__aeabi_d2iz>
  405ccc:	2200      	movs	r2, #0
  405cce:	9004      	str	r0, [sp, #16]
  405cd0:	2300      	movs	r3, #0
  405cd2:	4630      	mov	r0, r6
  405cd4:	4639      	mov	r1, r7
  405cd6:	f002 febb 	bl	408a50 <__aeabi_dcmplt>
  405cda:	2800      	cmp	r0, #0
  405cdc:	f040 8230 	bne.w	406140 <_dtoa_r+0x5a8>
  405ce0:	9e04      	ldr	r6, [sp, #16]
  405ce2:	2e16      	cmp	r6, #22
  405ce4:	f200 8229 	bhi.w	40613a <_dtoa_r+0x5a2>
  405ce8:	4b61      	ldr	r3, [pc, #388]	; (405e70 <_dtoa_r+0x2d8>)
  405cea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  405cee:	e9d3 0100 	ldrd	r0, r1, [r3]
  405cf2:	4652      	mov	r2, sl
  405cf4:	465b      	mov	r3, fp
  405cf6:	f002 fec9 	bl	408a8c <__aeabi_dcmpgt>
  405cfa:	2800      	cmp	r0, #0
  405cfc:	f000 8249 	beq.w	406192 <_dtoa_r+0x5fa>
  405d00:	1e73      	subs	r3, r6, #1
  405d02:	9304      	str	r3, [sp, #16]
  405d04:	2300      	movs	r3, #0
  405d06:	930c      	str	r3, [sp, #48]	; 0x30
  405d08:	1b2c      	subs	r4, r5, r4
  405d0a:	1e63      	subs	r3, r4, #1
  405d0c:	9302      	str	r3, [sp, #8]
  405d0e:	f100 8232 	bmi.w	406176 <_dtoa_r+0x5de>
  405d12:	2300      	movs	r3, #0
  405d14:	9305      	str	r3, [sp, #20]
  405d16:	9b04      	ldr	r3, [sp, #16]
  405d18:	2b00      	cmp	r3, #0
  405d1a:	f2c0 8223 	blt.w	406164 <_dtoa_r+0x5cc>
  405d1e:	9a02      	ldr	r2, [sp, #8]
  405d20:	930b      	str	r3, [sp, #44]	; 0x2c
  405d22:	4611      	mov	r1, r2
  405d24:	4419      	add	r1, r3
  405d26:	2300      	movs	r3, #0
  405d28:	9102      	str	r1, [sp, #8]
  405d2a:	930a      	str	r3, [sp, #40]	; 0x28
  405d2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405d2e:	2b09      	cmp	r3, #9
  405d30:	d829      	bhi.n	405d86 <_dtoa_r+0x1ee>
  405d32:	2b05      	cmp	r3, #5
  405d34:	f340 8658 	ble.w	4069e8 <_dtoa_r+0xe50>
  405d38:	3b04      	subs	r3, #4
  405d3a:	9320      	str	r3, [sp, #128]	; 0x80
  405d3c:	2500      	movs	r5, #0
  405d3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405d40:	3b02      	subs	r3, #2
  405d42:	2b03      	cmp	r3, #3
  405d44:	f200 8635 	bhi.w	4069b2 <_dtoa_r+0xe1a>
  405d48:	e8df f013 	tbh	[pc, r3, lsl #1]
  405d4c:	0228032c 	.word	0x0228032c
  405d50:	04590337 	.word	0x04590337
  405d54:	4b44      	ldr	r3, [pc, #272]	; (405e68 <_dtoa_r+0x2d0>)
  405d56:	4a47      	ldr	r2, [pc, #284]	; (405e74 <_dtoa_r+0x2dc>)
  405d58:	f3c8 0013 	ubfx	r0, r8, #0, #20
  405d5c:	2800      	cmp	r0, #0
  405d5e:	bf14      	ite	ne
  405d60:	4618      	movne	r0, r3
  405d62:	4610      	moveq	r0, r2
  405d64:	e755      	b.n	405c12 <_dtoa_r+0x7a>
  405d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405d6a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405d6e:	9510      	str	r5, [sp, #64]	; 0x40
  405d70:	4650      	mov	r0, sl
  405d72:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  405d76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405d7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405d7c:	e784      	b.n	405c88 <_dtoa_r+0xf0>
  405d7e:	483e      	ldr	r0, [pc, #248]	; (405e78 <_dtoa_r+0x2e0>)
  405d80:	e73b      	b.n	405bfa <_dtoa_r+0x62>
  405d82:	1cc3      	adds	r3, r0, #3
  405d84:	e74e      	b.n	405c24 <_dtoa_r+0x8c>
  405d86:	2100      	movs	r1, #0
  405d88:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405d8c:	4648      	mov	r0, r9
  405d8e:	9120      	str	r1, [sp, #128]	; 0x80
  405d90:	f001 fbba 	bl	407508 <_Balloc>
  405d94:	f04f 33ff 	mov.w	r3, #4294967295
  405d98:	9306      	str	r3, [sp, #24]
  405d9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405d9c:	930d      	str	r3, [sp, #52]	; 0x34
  405d9e:	2301      	movs	r3, #1
  405da0:	9007      	str	r0, [sp, #28]
  405da2:	9221      	str	r2, [sp, #132]	; 0x84
  405da4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405da8:	9309      	str	r3, [sp, #36]	; 0x24
  405daa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405dac:	2b00      	cmp	r3, #0
  405dae:	f2c0 80d1 	blt.w	405f54 <_dtoa_r+0x3bc>
  405db2:	9a04      	ldr	r2, [sp, #16]
  405db4:	2a0e      	cmp	r2, #14
  405db6:	f300 80cd 	bgt.w	405f54 <_dtoa_r+0x3bc>
  405dba:	4b2d      	ldr	r3, [pc, #180]	; (405e70 <_dtoa_r+0x2d8>)
  405dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  405dc4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  405dc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405dca:	2b00      	cmp	r3, #0
  405dcc:	f2c0 8300 	blt.w	4063d0 <_dtoa_r+0x838>
  405dd0:	4656      	mov	r6, sl
  405dd2:	465f      	mov	r7, fp
  405dd4:	4650      	mov	r0, sl
  405dd6:	4659      	mov	r1, fp
  405dd8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  405ddc:	4652      	mov	r2, sl
  405dde:	465b      	mov	r3, fp
  405de0:	f002 fcee 	bl	4087c0 <__aeabi_ddiv>
  405de4:	f002 fe72 	bl	408acc <__aeabi_d2iz>
  405de8:	4604      	mov	r4, r0
  405dea:	f002 fb59 	bl	4084a0 <__aeabi_i2d>
  405dee:	4652      	mov	r2, sl
  405df0:	465b      	mov	r3, fp
  405df2:	f002 fbbb 	bl	40856c <__aeabi_dmul>
  405df6:	460b      	mov	r3, r1
  405df8:	4602      	mov	r2, r0
  405dfa:	4639      	mov	r1, r7
  405dfc:	4630      	mov	r0, r6
  405dfe:	f002 fa01 	bl	408204 <__aeabi_dsub>
  405e02:	9d07      	ldr	r5, [sp, #28]
  405e04:	f104 0330 	add.w	r3, r4, #48	; 0x30
  405e08:	702b      	strb	r3, [r5, #0]
  405e0a:	9b06      	ldr	r3, [sp, #24]
  405e0c:	2b01      	cmp	r3, #1
  405e0e:	4606      	mov	r6, r0
  405e10:	460f      	mov	r7, r1
  405e12:	f105 0501 	add.w	r5, r5, #1
  405e16:	d062      	beq.n	405ede <_dtoa_r+0x346>
  405e18:	2200      	movs	r2, #0
  405e1a:	4b18      	ldr	r3, [pc, #96]	; (405e7c <_dtoa_r+0x2e4>)
  405e1c:	f002 fba6 	bl	40856c <__aeabi_dmul>
  405e20:	2200      	movs	r2, #0
  405e22:	2300      	movs	r3, #0
  405e24:	4606      	mov	r6, r0
  405e26:	460f      	mov	r7, r1
  405e28:	f002 fe08 	bl	408a3c <__aeabi_dcmpeq>
  405e2c:	2800      	cmp	r0, #0
  405e2e:	d17e      	bne.n	405f2e <_dtoa_r+0x396>
  405e30:	f8cd 9014 	str.w	r9, [sp, #20]
  405e34:	f8dd a018 	ldr.w	sl, [sp, #24]
  405e38:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405e3c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  405e40:	e029      	b.n	405e96 <_dtoa_r+0x2fe>
  405e42:	bf00      	nop
  405e44:	f3af 8000 	nop.w
  405e48:	636f4361 	.word	0x636f4361
  405e4c:	3fd287a7 	.word	0x3fd287a7
  405e50:	8b60c8b3 	.word	0x8b60c8b3
  405e54:	3fc68a28 	.word	0x3fc68a28
  405e58:	509f79fb 	.word	0x509f79fb
  405e5c:	3fd34413 	.word	0x3fd34413
  405e60:	7ff00000 	.word	0x7ff00000
  405e64:	004099fd 	.word	0x004099fd
  405e68:	00409a1c 	.word	0x00409a1c
  405e6c:	3ff80000 	.word	0x3ff80000
  405e70:	00409a30 	.word	0x00409a30
  405e74:	00409a10 	.word	0x00409a10
  405e78:	004099fc 	.word	0x004099fc
  405e7c:	40240000 	.word	0x40240000
  405e80:	f002 fb74 	bl	40856c <__aeabi_dmul>
  405e84:	2200      	movs	r2, #0
  405e86:	2300      	movs	r3, #0
  405e88:	4606      	mov	r6, r0
  405e8a:	460f      	mov	r7, r1
  405e8c:	f002 fdd6 	bl	408a3c <__aeabi_dcmpeq>
  405e90:	2800      	cmp	r0, #0
  405e92:	f040 83b7 	bne.w	406604 <_dtoa_r+0xa6c>
  405e96:	4642      	mov	r2, r8
  405e98:	464b      	mov	r3, r9
  405e9a:	4630      	mov	r0, r6
  405e9c:	4639      	mov	r1, r7
  405e9e:	f002 fc8f 	bl	4087c0 <__aeabi_ddiv>
  405ea2:	f002 fe13 	bl	408acc <__aeabi_d2iz>
  405ea6:	4604      	mov	r4, r0
  405ea8:	f002 fafa 	bl	4084a0 <__aeabi_i2d>
  405eac:	4642      	mov	r2, r8
  405eae:	464b      	mov	r3, r9
  405eb0:	f002 fb5c 	bl	40856c <__aeabi_dmul>
  405eb4:	4602      	mov	r2, r0
  405eb6:	460b      	mov	r3, r1
  405eb8:	4630      	mov	r0, r6
  405eba:	4639      	mov	r1, r7
  405ebc:	f002 f9a2 	bl	408204 <__aeabi_dsub>
  405ec0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405ec4:	f805 eb01 	strb.w	lr, [r5], #1
  405ec8:	ebcb 0e05 	rsb	lr, fp, r5
  405ecc:	45d6      	cmp	lr, sl
  405ece:	4606      	mov	r6, r0
  405ed0:	460f      	mov	r7, r1
  405ed2:	f04f 0200 	mov.w	r2, #0
  405ed6:	4bb0      	ldr	r3, [pc, #704]	; (406198 <_dtoa_r+0x600>)
  405ed8:	d1d2      	bne.n	405e80 <_dtoa_r+0x2e8>
  405eda:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405ede:	4632      	mov	r2, r6
  405ee0:	463b      	mov	r3, r7
  405ee2:	4630      	mov	r0, r6
  405ee4:	4639      	mov	r1, r7
  405ee6:	f002 f98f 	bl	408208 <__adddf3>
  405eea:	4606      	mov	r6, r0
  405eec:	460f      	mov	r7, r1
  405eee:	4602      	mov	r2, r0
  405ef0:	460b      	mov	r3, r1
  405ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405ef6:	f002 fdab 	bl	408a50 <__aeabi_dcmplt>
  405efa:	b940      	cbnz	r0, 405f0e <_dtoa_r+0x376>
  405efc:	4632      	mov	r2, r6
  405efe:	463b      	mov	r3, r7
  405f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f04:	f002 fd9a 	bl	408a3c <__aeabi_dcmpeq>
  405f08:	b188      	cbz	r0, 405f2e <_dtoa_r+0x396>
  405f0a:	07e3      	lsls	r3, r4, #31
  405f0c:	d50f      	bpl.n	405f2e <_dtoa_r+0x396>
  405f0e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  405f12:	9a07      	ldr	r2, [sp, #28]
  405f14:	1e6b      	subs	r3, r5, #1
  405f16:	e004      	b.n	405f22 <_dtoa_r+0x38a>
  405f18:	429a      	cmp	r2, r3
  405f1a:	f000 842c 	beq.w	406776 <_dtoa_r+0xbde>
  405f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405f22:	2c39      	cmp	r4, #57	; 0x39
  405f24:	f103 0501 	add.w	r5, r3, #1
  405f28:	d0f6      	beq.n	405f18 <_dtoa_r+0x380>
  405f2a:	3401      	adds	r4, #1
  405f2c:	701c      	strb	r4, [r3, #0]
  405f2e:	9908      	ldr	r1, [sp, #32]
  405f30:	4648      	mov	r0, r9
  405f32:	f001 fb0f 	bl	407554 <_Bfree>
  405f36:	2200      	movs	r2, #0
  405f38:	9b04      	ldr	r3, [sp, #16]
  405f3a:	702a      	strb	r2, [r5, #0]
  405f3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405f3e:	3301      	adds	r3, #1
  405f40:	6013      	str	r3, [r2, #0]
  405f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f44:	2b00      	cmp	r3, #0
  405f46:	f000 83a7 	beq.w	406698 <_dtoa_r+0xb00>
  405f4a:	9807      	ldr	r0, [sp, #28]
  405f4c:	601d      	str	r5, [r3, #0]
  405f4e:	b017      	add	sp, #92	; 0x5c
  405f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405f56:	2a00      	cmp	r2, #0
  405f58:	f000 8112 	beq.w	406180 <_dtoa_r+0x5e8>
  405f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405f5e:	2a01      	cmp	r2, #1
  405f60:	f340 8258 	ble.w	406414 <_dtoa_r+0x87c>
  405f64:	9b06      	ldr	r3, [sp, #24]
  405f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f68:	1e5f      	subs	r7, r3, #1
  405f6a:	42ba      	cmp	r2, r7
  405f6c:	f2c0 8397 	blt.w	40669e <_dtoa_r+0xb06>
  405f70:	1bd7      	subs	r7, r2, r7
  405f72:	9b06      	ldr	r3, [sp, #24]
  405f74:	2b00      	cmp	r3, #0
  405f76:	f2c0 848a 	blt.w	40688e <_dtoa_r+0xcf6>
  405f7a:	9d05      	ldr	r5, [sp, #20]
  405f7c:	9b06      	ldr	r3, [sp, #24]
  405f7e:	9a05      	ldr	r2, [sp, #20]
  405f80:	441a      	add	r2, r3
  405f82:	9205      	str	r2, [sp, #20]
  405f84:	9a02      	ldr	r2, [sp, #8]
  405f86:	2101      	movs	r1, #1
  405f88:	441a      	add	r2, r3
  405f8a:	4648      	mov	r0, r9
  405f8c:	9202      	str	r2, [sp, #8]
  405f8e:	f001 fb79 	bl	407684 <__i2b>
  405f92:	4606      	mov	r6, r0
  405f94:	b165      	cbz	r5, 405fb0 <_dtoa_r+0x418>
  405f96:	9902      	ldr	r1, [sp, #8]
  405f98:	2900      	cmp	r1, #0
  405f9a:	460b      	mov	r3, r1
  405f9c:	dd08      	ble.n	405fb0 <_dtoa_r+0x418>
  405f9e:	42a9      	cmp	r1, r5
  405fa0:	9a05      	ldr	r2, [sp, #20]
  405fa2:	bfa8      	it	ge
  405fa4:	462b      	movge	r3, r5
  405fa6:	1ad2      	subs	r2, r2, r3
  405fa8:	1aed      	subs	r5, r5, r3
  405faa:	1acb      	subs	r3, r1, r3
  405fac:	9205      	str	r2, [sp, #20]
  405fae:	9302      	str	r3, [sp, #8]
  405fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fb2:	2b00      	cmp	r3, #0
  405fb4:	f340 82fc 	ble.w	4065b0 <_dtoa_r+0xa18>
  405fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405fba:	2a00      	cmp	r2, #0
  405fbc:	f000 8201 	beq.w	4063c2 <_dtoa_r+0x82a>
  405fc0:	2f00      	cmp	r7, #0
  405fc2:	f000 81fe 	beq.w	4063c2 <_dtoa_r+0x82a>
  405fc6:	4631      	mov	r1, r6
  405fc8:	463a      	mov	r2, r7
  405fca:	4648      	mov	r0, r9
  405fcc:	f001 fbfc 	bl	4077c8 <__pow5mult>
  405fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405fd4:	4601      	mov	r1, r0
  405fd6:	4642      	mov	r2, r8
  405fd8:	4606      	mov	r6, r0
  405fda:	4648      	mov	r0, r9
  405fdc:	f001 fb5c 	bl	407698 <__multiply>
  405fe0:	4641      	mov	r1, r8
  405fe2:	4604      	mov	r4, r0
  405fe4:	4648      	mov	r0, r9
  405fe6:	f001 fab5 	bl	407554 <_Bfree>
  405fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fec:	1bdb      	subs	r3, r3, r7
  405fee:	930a      	str	r3, [sp, #40]	; 0x28
  405ff0:	f040 81e6 	bne.w	4063c0 <_dtoa_r+0x828>
  405ff4:	2101      	movs	r1, #1
  405ff6:	4648      	mov	r0, r9
  405ff8:	f001 fb44 	bl	407684 <__i2b>
  405ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ffe:	4680      	mov	r8, r0
  406000:	2b00      	cmp	r3, #0
  406002:	f000 8219 	beq.w	406438 <_dtoa_r+0x8a0>
  406006:	4601      	mov	r1, r0
  406008:	461a      	mov	r2, r3
  40600a:	4648      	mov	r0, r9
  40600c:	f001 fbdc 	bl	4077c8 <__pow5mult>
  406010:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406012:	2b01      	cmp	r3, #1
  406014:	4680      	mov	r8, r0
  406016:	f340 82f8 	ble.w	40660a <_dtoa_r+0xa72>
  40601a:	2700      	movs	r7, #0
  40601c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406020:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406024:	6918      	ldr	r0, [r3, #16]
  406026:	f001 fadf 	bl	4075e8 <__hi0bits>
  40602a:	f1c0 0020 	rsb	r0, r0, #32
  40602e:	9a02      	ldr	r2, [sp, #8]
  406030:	4410      	add	r0, r2
  406032:	f010 001f 	ands.w	r0, r0, #31
  406036:	f000 81f6 	beq.w	406426 <_dtoa_r+0x88e>
  40603a:	f1c0 0320 	rsb	r3, r0, #32
  40603e:	2b04      	cmp	r3, #4
  406040:	f340 84ca 	ble.w	4069d8 <_dtoa_r+0xe40>
  406044:	9b05      	ldr	r3, [sp, #20]
  406046:	f1c0 001c 	rsb	r0, r0, #28
  40604a:	4403      	add	r3, r0
  40604c:	9305      	str	r3, [sp, #20]
  40604e:	4613      	mov	r3, r2
  406050:	4403      	add	r3, r0
  406052:	4405      	add	r5, r0
  406054:	9302      	str	r3, [sp, #8]
  406056:	9b05      	ldr	r3, [sp, #20]
  406058:	2b00      	cmp	r3, #0
  40605a:	dd05      	ble.n	406068 <_dtoa_r+0x4d0>
  40605c:	4621      	mov	r1, r4
  40605e:	461a      	mov	r2, r3
  406060:	4648      	mov	r0, r9
  406062:	f001 fc01 	bl	407868 <__lshift>
  406066:	4604      	mov	r4, r0
  406068:	9b02      	ldr	r3, [sp, #8]
  40606a:	2b00      	cmp	r3, #0
  40606c:	dd05      	ble.n	40607a <_dtoa_r+0x4e2>
  40606e:	4641      	mov	r1, r8
  406070:	461a      	mov	r2, r3
  406072:	4648      	mov	r0, r9
  406074:	f001 fbf8 	bl	407868 <__lshift>
  406078:	4680      	mov	r8, r0
  40607a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40607c:	2b00      	cmp	r3, #0
  40607e:	f040 827c 	bne.w	40657a <_dtoa_r+0x9e2>
  406082:	9b06      	ldr	r3, [sp, #24]
  406084:	2b00      	cmp	r3, #0
  406086:	f340 8295 	ble.w	4065b4 <_dtoa_r+0xa1c>
  40608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40608c:	2b00      	cmp	r3, #0
  40608e:	f040 81f5 	bne.w	40647c <_dtoa_r+0x8e4>
  406092:	f8dd b01c 	ldr.w	fp, [sp, #28]
  406096:	9f06      	ldr	r7, [sp, #24]
  406098:	465d      	mov	r5, fp
  40609a:	e002      	b.n	4060a2 <_dtoa_r+0x50a>
  40609c:	f001 fa64 	bl	407568 <__multadd>
  4060a0:	4604      	mov	r4, r0
  4060a2:	4641      	mov	r1, r8
  4060a4:	4620      	mov	r0, r4
  4060a6:	f7ff fce3 	bl	405a70 <quorem>
  4060aa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4060ae:	f805 ab01 	strb.w	sl, [r5], #1
  4060b2:	ebcb 0305 	rsb	r3, fp, r5
  4060b6:	42bb      	cmp	r3, r7
  4060b8:	f04f 020a 	mov.w	r2, #10
  4060bc:	f04f 0300 	mov.w	r3, #0
  4060c0:	4621      	mov	r1, r4
  4060c2:	4648      	mov	r0, r9
  4060c4:	dbea      	blt.n	40609c <_dtoa_r+0x504>
  4060c6:	9b07      	ldr	r3, [sp, #28]
  4060c8:	9a06      	ldr	r2, [sp, #24]
  4060ca:	2a01      	cmp	r2, #1
  4060cc:	bfac      	ite	ge
  4060ce:	189b      	addge	r3, r3, r2
  4060d0:	3301      	addlt	r3, #1
  4060d2:	461d      	mov	r5, r3
  4060d4:	f04f 0b00 	mov.w	fp, #0
  4060d8:	4621      	mov	r1, r4
  4060da:	2201      	movs	r2, #1
  4060dc:	4648      	mov	r0, r9
  4060de:	f001 fbc3 	bl	407868 <__lshift>
  4060e2:	4641      	mov	r1, r8
  4060e4:	9008      	str	r0, [sp, #32]
  4060e6:	f001 fc17 	bl	407918 <__mcmp>
  4060ea:	2800      	cmp	r0, #0
  4060ec:	f340 830d 	ble.w	40670a <_dtoa_r+0xb72>
  4060f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4060f4:	9907      	ldr	r1, [sp, #28]
  4060f6:	1e6b      	subs	r3, r5, #1
  4060f8:	e004      	b.n	406104 <_dtoa_r+0x56c>
  4060fa:	428b      	cmp	r3, r1
  4060fc:	f000 8278 	beq.w	4065f0 <_dtoa_r+0xa58>
  406100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406104:	2a39      	cmp	r2, #57	; 0x39
  406106:	f103 0501 	add.w	r5, r3, #1
  40610a:	d0f6      	beq.n	4060fa <_dtoa_r+0x562>
  40610c:	3201      	adds	r2, #1
  40610e:	701a      	strb	r2, [r3, #0]
  406110:	4641      	mov	r1, r8
  406112:	4648      	mov	r0, r9
  406114:	f001 fa1e 	bl	407554 <_Bfree>
  406118:	2e00      	cmp	r6, #0
  40611a:	f43f af08 	beq.w	405f2e <_dtoa_r+0x396>
  40611e:	f1bb 0f00 	cmp.w	fp, #0
  406122:	d005      	beq.n	406130 <_dtoa_r+0x598>
  406124:	45b3      	cmp	fp, r6
  406126:	d003      	beq.n	406130 <_dtoa_r+0x598>
  406128:	4659      	mov	r1, fp
  40612a:	4648      	mov	r0, r9
  40612c:	f001 fa12 	bl	407554 <_Bfree>
  406130:	4631      	mov	r1, r6
  406132:	4648      	mov	r0, r9
  406134:	f001 fa0e 	bl	407554 <_Bfree>
  406138:	e6f9      	b.n	405f2e <_dtoa_r+0x396>
  40613a:	2301      	movs	r3, #1
  40613c:	930c      	str	r3, [sp, #48]	; 0x30
  40613e:	e5e3      	b.n	405d08 <_dtoa_r+0x170>
  406140:	f8dd 8010 	ldr.w	r8, [sp, #16]
  406144:	4640      	mov	r0, r8
  406146:	f002 f9ab 	bl	4084a0 <__aeabi_i2d>
  40614a:	4602      	mov	r2, r0
  40614c:	460b      	mov	r3, r1
  40614e:	4630      	mov	r0, r6
  406150:	4639      	mov	r1, r7
  406152:	f002 fc73 	bl	408a3c <__aeabi_dcmpeq>
  406156:	2800      	cmp	r0, #0
  406158:	f47f adc2 	bne.w	405ce0 <_dtoa_r+0x148>
  40615c:	f108 33ff 	add.w	r3, r8, #4294967295
  406160:	9304      	str	r3, [sp, #16]
  406162:	e5bd      	b.n	405ce0 <_dtoa_r+0x148>
  406164:	9a05      	ldr	r2, [sp, #20]
  406166:	9b04      	ldr	r3, [sp, #16]
  406168:	1ad2      	subs	r2, r2, r3
  40616a:	425b      	negs	r3, r3
  40616c:	930a      	str	r3, [sp, #40]	; 0x28
  40616e:	2300      	movs	r3, #0
  406170:	9205      	str	r2, [sp, #20]
  406172:	930b      	str	r3, [sp, #44]	; 0x2c
  406174:	e5da      	b.n	405d2c <_dtoa_r+0x194>
  406176:	425b      	negs	r3, r3
  406178:	9305      	str	r3, [sp, #20]
  40617a:	2300      	movs	r3, #0
  40617c:	9302      	str	r3, [sp, #8]
  40617e:	e5ca      	b.n	405d16 <_dtoa_r+0x17e>
  406180:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406182:	9d05      	ldr	r5, [sp, #20]
  406184:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406186:	e705      	b.n	405f94 <_dtoa_r+0x3fc>
  406188:	f1c3 0820 	rsb	r8, r3, #32
  40618c:	fa0a f008 	lsl.w	r0, sl, r8
  406190:	e573      	b.n	405c7a <_dtoa_r+0xe2>
  406192:	900c      	str	r0, [sp, #48]	; 0x30
  406194:	e5b8      	b.n	405d08 <_dtoa_r+0x170>
  406196:	bf00      	nop
  406198:	40240000 	.word	0x40240000
  40619c:	2300      	movs	r3, #0
  40619e:	9309      	str	r3, [sp, #36]	; 0x24
  4061a0:	9b04      	ldr	r3, [sp, #16]
  4061a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4061a4:	4413      	add	r3, r2
  4061a6:	930d      	str	r3, [sp, #52]	; 0x34
  4061a8:	3301      	adds	r3, #1
  4061aa:	2b00      	cmp	r3, #0
  4061ac:	9306      	str	r3, [sp, #24]
  4061ae:	f340 8283 	ble.w	4066b8 <_dtoa_r+0xb20>
  4061b2:	9c06      	ldr	r4, [sp, #24]
  4061b4:	4626      	mov	r6, r4
  4061b6:	2100      	movs	r1, #0
  4061b8:	2e17      	cmp	r6, #23
  4061ba:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4061be:	d90b      	bls.n	4061d8 <_dtoa_r+0x640>
  4061c0:	2201      	movs	r2, #1
  4061c2:	2304      	movs	r3, #4
  4061c4:	005b      	lsls	r3, r3, #1
  4061c6:	f103 0014 	add.w	r0, r3, #20
  4061ca:	42b0      	cmp	r0, r6
  4061cc:	4611      	mov	r1, r2
  4061ce:	f102 0201 	add.w	r2, r2, #1
  4061d2:	d9f7      	bls.n	4061c4 <_dtoa_r+0x62c>
  4061d4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4061d8:	4648      	mov	r0, r9
  4061da:	f001 f995 	bl	407508 <_Balloc>
  4061de:	2c0e      	cmp	r4, #14
  4061e0:	9007      	str	r0, [sp, #28]
  4061e2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4061e6:	f63f ade0 	bhi.w	405daa <_dtoa_r+0x212>
  4061ea:	2d00      	cmp	r5, #0
  4061ec:	f43f addd 	beq.w	405daa <_dtoa_r+0x212>
  4061f0:	9904      	ldr	r1, [sp, #16]
  4061f2:	4657      	mov	r7, sl
  4061f4:	46d8      	mov	r8, fp
  4061f6:	2900      	cmp	r1, #0
  4061f8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  4061fc:	f340 8292 	ble.w	406724 <_dtoa_r+0xb8c>
  406200:	4b91      	ldr	r3, [pc, #580]	; (406448 <_dtoa_r+0x8b0>)
  406202:	f001 020f 	and.w	r2, r1, #15
  406206:	110e      	asrs	r6, r1, #4
  406208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40620c:	06f0      	lsls	r0, r6, #27
  40620e:	e9d3 4500 	ldrd	r4, r5, [r3]
  406212:	f140 824c 	bpl.w	4066ae <_dtoa_r+0xb16>
  406216:	4b8d      	ldr	r3, [pc, #564]	; (40644c <_dtoa_r+0x8b4>)
  406218:	4650      	mov	r0, sl
  40621a:	4659      	mov	r1, fp
  40621c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406220:	f002 face 	bl	4087c0 <__aeabi_ddiv>
  406224:	f006 060f 	and.w	r6, r6, #15
  406228:	4682      	mov	sl, r0
  40622a:	468b      	mov	fp, r1
  40622c:	f04f 0803 	mov.w	r8, #3
  406230:	b186      	cbz	r6, 406254 <_dtoa_r+0x6bc>
  406232:	4f86      	ldr	r7, [pc, #536]	; (40644c <_dtoa_r+0x8b4>)
  406234:	07f1      	lsls	r1, r6, #31
  406236:	d509      	bpl.n	40624c <_dtoa_r+0x6b4>
  406238:	4620      	mov	r0, r4
  40623a:	4629      	mov	r1, r5
  40623c:	e9d7 2300 	ldrd	r2, r3, [r7]
  406240:	f002 f994 	bl	40856c <__aeabi_dmul>
  406244:	f108 0801 	add.w	r8, r8, #1
  406248:	4604      	mov	r4, r0
  40624a:	460d      	mov	r5, r1
  40624c:	1076      	asrs	r6, r6, #1
  40624e:	f107 0708 	add.w	r7, r7, #8
  406252:	d1ef      	bne.n	406234 <_dtoa_r+0x69c>
  406254:	4622      	mov	r2, r4
  406256:	462b      	mov	r3, r5
  406258:	4650      	mov	r0, sl
  40625a:	4659      	mov	r1, fp
  40625c:	f002 fab0 	bl	4087c0 <__aeabi_ddiv>
  406260:	4606      	mov	r6, r0
  406262:	460f      	mov	r7, r1
  406264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406266:	b143      	cbz	r3, 40627a <_dtoa_r+0x6e2>
  406268:	2200      	movs	r2, #0
  40626a:	4b79      	ldr	r3, [pc, #484]	; (406450 <_dtoa_r+0x8b8>)
  40626c:	4630      	mov	r0, r6
  40626e:	4639      	mov	r1, r7
  406270:	f002 fbee 	bl	408a50 <__aeabi_dcmplt>
  406274:	2800      	cmp	r0, #0
  406276:	f040 8320 	bne.w	4068ba <_dtoa_r+0xd22>
  40627a:	4640      	mov	r0, r8
  40627c:	f002 f910 	bl	4084a0 <__aeabi_i2d>
  406280:	4632      	mov	r2, r6
  406282:	463b      	mov	r3, r7
  406284:	f002 f972 	bl	40856c <__aeabi_dmul>
  406288:	4b72      	ldr	r3, [pc, #456]	; (406454 <_dtoa_r+0x8bc>)
  40628a:	2200      	movs	r2, #0
  40628c:	f001 ffbc 	bl	408208 <__adddf3>
  406290:	9b06      	ldr	r3, [sp, #24]
  406292:	4604      	mov	r4, r0
  406294:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406298:	2b00      	cmp	r3, #0
  40629a:	f000 81df 	beq.w	40665c <_dtoa_r+0xac4>
  40629e:	9b04      	ldr	r3, [sp, #16]
  4062a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4062a4:	9311      	str	r3, [sp, #68]	; 0x44
  4062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4062a8:	2b00      	cmp	r3, #0
  4062aa:	f000 8297 	beq.w	4067dc <_dtoa_r+0xc44>
  4062ae:	4b66      	ldr	r3, [pc, #408]	; (406448 <_dtoa_r+0x8b0>)
  4062b0:	4969      	ldr	r1, [pc, #420]	; (406458 <_dtoa_r+0x8c0>)
  4062b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4062b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4062ba:	2000      	movs	r0, #0
  4062bc:	f002 fa80 	bl	4087c0 <__aeabi_ddiv>
  4062c0:	4622      	mov	r2, r4
  4062c2:	462b      	mov	r3, r5
  4062c4:	f001 ff9e 	bl	408204 <__aeabi_dsub>
  4062c8:	4682      	mov	sl, r0
  4062ca:	468b      	mov	fp, r1
  4062cc:	4630      	mov	r0, r6
  4062ce:	4639      	mov	r1, r7
  4062d0:	f002 fbfc 	bl	408acc <__aeabi_d2iz>
  4062d4:	4604      	mov	r4, r0
  4062d6:	f002 f8e3 	bl	4084a0 <__aeabi_i2d>
  4062da:	4602      	mov	r2, r0
  4062dc:	460b      	mov	r3, r1
  4062de:	4630      	mov	r0, r6
  4062e0:	4639      	mov	r1, r7
  4062e2:	f001 ff8f 	bl	408204 <__aeabi_dsub>
  4062e6:	3430      	adds	r4, #48	; 0x30
  4062e8:	9d07      	ldr	r5, [sp, #28]
  4062ea:	b2e4      	uxtb	r4, r4
  4062ec:	4606      	mov	r6, r0
  4062ee:	460f      	mov	r7, r1
  4062f0:	702c      	strb	r4, [r5, #0]
  4062f2:	4602      	mov	r2, r0
  4062f4:	460b      	mov	r3, r1
  4062f6:	4650      	mov	r0, sl
  4062f8:	4659      	mov	r1, fp
  4062fa:	3501      	adds	r5, #1
  4062fc:	f002 fbc6 	bl	408a8c <__aeabi_dcmpgt>
  406300:	2800      	cmp	r0, #0
  406302:	d14c      	bne.n	40639e <_dtoa_r+0x806>
  406304:	4632      	mov	r2, r6
  406306:	463b      	mov	r3, r7
  406308:	2000      	movs	r0, #0
  40630a:	4951      	ldr	r1, [pc, #324]	; (406450 <_dtoa_r+0x8b8>)
  40630c:	f001 ff7a 	bl	408204 <__aeabi_dsub>
  406310:	4602      	mov	r2, r0
  406312:	460b      	mov	r3, r1
  406314:	4650      	mov	r0, sl
  406316:	4659      	mov	r1, fp
  406318:	f002 fbb8 	bl	408a8c <__aeabi_dcmpgt>
  40631c:	2800      	cmp	r0, #0
  40631e:	f040 830d 	bne.w	40693c <_dtoa_r+0xda4>
  406322:	f1b8 0f01 	cmp.w	r8, #1
  406326:	f340 81b3 	ble.w	406690 <_dtoa_r+0xaf8>
  40632a:	9b07      	ldr	r3, [sp, #28]
  40632c:	4498      	add	r8, r3
  40632e:	e00d      	b.n	40634c <_dtoa_r+0x7b4>
  406330:	2000      	movs	r0, #0
  406332:	4947      	ldr	r1, [pc, #284]	; (406450 <_dtoa_r+0x8b8>)
  406334:	f001 ff66 	bl	408204 <__aeabi_dsub>
  406338:	4652      	mov	r2, sl
  40633a:	465b      	mov	r3, fp
  40633c:	f002 fb88 	bl	408a50 <__aeabi_dcmplt>
  406340:	2800      	cmp	r0, #0
  406342:	f040 82fb 	bne.w	40693c <_dtoa_r+0xda4>
  406346:	4545      	cmp	r5, r8
  406348:	f000 81a2 	beq.w	406690 <_dtoa_r+0xaf8>
  40634c:	4650      	mov	r0, sl
  40634e:	4659      	mov	r1, fp
  406350:	2200      	movs	r2, #0
  406352:	4b42      	ldr	r3, [pc, #264]	; (40645c <_dtoa_r+0x8c4>)
  406354:	f002 f90a 	bl	40856c <__aeabi_dmul>
  406358:	2200      	movs	r2, #0
  40635a:	4b40      	ldr	r3, [pc, #256]	; (40645c <_dtoa_r+0x8c4>)
  40635c:	4682      	mov	sl, r0
  40635e:	468b      	mov	fp, r1
  406360:	4630      	mov	r0, r6
  406362:	4639      	mov	r1, r7
  406364:	f002 f902 	bl	40856c <__aeabi_dmul>
  406368:	460f      	mov	r7, r1
  40636a:	4606      	mov	r6, r0
  40636c:	f002 fbae 	bl	408acc <__aeabi_d2iz>
  406370:	4604      	mov	r4, r0
  406372:	f002 f895 	bl	4084a0 <__aeabi_i2d>
  406376:	4602      	mov	r2, r0
  406378:	460b      	mov	r3, r1
  40637a:	4630      	mov	r0, r6
  40637c:	4639      	mov	r1, r7
  40637e:	f001 ff41 	bl	408204 <__aeabi_dsub>
  406382:	3430      	adds	r4, #48	; 0x30
  406384:	b2e4      	uxtb	r4, r4
  406386:	4652      	mov	r2, sl
  406388:	465b      	mov	r3, fp
  40638a:	f805 4b01 	strb.w	r4, [r5], #1
  40638e:	4606      	mov	r6, r0
  406390:	460f      	mov	r7, r1
  406392:	f002 fb5d 	bl	408a50 <__aeabi_dcmplt>
  406396:	4632      	mov	r2, r6
  406398:	463b      	mov	r3, r7
  40639a:	2800      	cmp	r0, #0
  40639c:	d0c8      	beq.n	406330 <_dtoa_r+0x798>
  40639e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063a0:	9304      	str	r3, [sp, #16]
  4063a2:	e5c4      	b.n	405f2e <_dtoa_r+0x396>
  4063a4:	2300      	movs	r3, #0
  4063a6:	9309      	str	r3, [sp, #36]	; 0x24
  4063a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	f340 8189 	ble.w	4066c2 <_dtoa_r+0xb2a>
  4063b0:	461e      	mov	r6, r3
  4063b2:	461c      	mov	r4, r3
  4063b4:	930d      	str	r3, [sp, #52]	; 0x34
  4063b6:	9306      	str	r3, [sp, #24]
  4063b8:	e6fd      	b.n	4061b6 <_dtoa_r+0x61e>
  4063ba:	2301      	movs	r3, #1
  4063bc:	9309      	str	r3, [sp, #36]	; 0x24
  4063be:	e7f3      	b.n	4063a8 <_dtoa_r+0x810>
  4063c0:	9408      	str	r4, [sp, #32]
  4063c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4063c4:	9908      	ldr	r1, [sp, #32]
  4063c6:	4648      	mov	r0, r9
  4063c8:	f001 f9fe 	bl	4077c8 <__pow5mult>
  4063cc:	4604      	mov	r4, r0
  4063ce:	e611      	b.n	405ff4 <_dtoa_r+0x45c>
  4063d0:	9b06      	ldr	r3, [sp, #24]
  4063d2:	2b00      	cmp	r3, #0
  4063d4:	f73f acfc 	bgt.w	405dd0 <_dtoa_r+0x238>
  4063d8:	f040 82da 	bne.w	406990 <_dtoa_r+0xdf8>
  4063dc:	2200      	movs	r2, #0
  4063de:	4b20      	ldr	r3, [pc, #128]	; (406460 <_dtoa_r+0x8c8>)
  4063e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4063e4:	f002 f8c2 	bl	40856c <__aeabi_dmul>
  4063e8:	4652      	mov	r2, sl
  4063ea:	465b      	mov	r3, fp
  4063ec:	f002 fb44 	bl	408a78 <__aeabi_dcmpge>
  4063f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4063f4:	4646      	mov	r6, r8
  4063f6:	2800      	cmp	r0, #0
  4063f8:	f000 80f2 	beq.w	4065e0 <_dtoa_r+0xa48>
  4063fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4063fe:	9d07      	ldr	r5, [sp, #28]
  406400:	43db      	mvns	r3, r3
  406402:	9304      	str	r3, [sp, #16]
  406404:	4641      	mov	r1, r8
  406406:	4648      	mov	r0, r9
  406408:	f001 f8a4 	bl	407554 <_Bfree>
  40640c:	2e00      	cmp	r6, #0
  40640e:	f43f ad8e 	beq.w	405f2e <_dtoa_r+0x396>
  406412:	e68d      	b.n	406130 <_dtoa_r+0x598>
  406414:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406416:	2a00      	cmp	r2, #0
  406418:	f000 8241 	beq.w	40689e <_dtoa_r+0xd06>
  40641c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406420:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406422:	9d05      	ldr	r5, [sp, #20]
  406424:	e5ab      	b.n	405f7e <_dtoa_r+0x3e6>
  406426:	201c      	movs	r0, #28
  406428:	9b05      	ldr	r3, [sp, #20]
  40642a:	4403      	add	r3, r0
  40642c:	9305      	str	r3, [sp, #20]
  40642e:	9b02      	ldr	r3, [sp, #8]
  406430:	4403      	add	r3, r0
  406432:	4405      	add	r5, r0
  406434:	9302      	str	r3, [sp, #8]
  406436:	e60e      	b.n	406056 <_dtoa_r+0x4be>
  406438:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40643a:	2b01      	cmp	r3, #1
  40643c:	f340 8282 	ble.w	406944 <_dtoa_r+0xdac>
  406440:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  406442:	2001      	movs	r0, #1
  406444:	e5f3      	b.n	40602e <_dtoa_r+0x496>
  406446:	bf00      	nop
  406448:	00409a30 	.word	0x00409a30
  40644c:	00409af8 	.word	0x00409af8
  406450:	3ff00000 	.word	0x3ff00000
  406454:	401c0000 	.word	0x401c0000
  406458:	3fe00000 	.word	0x3fe00000
  40645c:	40240000 	.word	0x40240000
  406460:	40140000 	.word	0x40140000
  406464:	4631      	mov	r1, r6
  406466:	2300      	movs	r3, #0
  406468:	220a      	movs	r2, #10
  40646a:	4648      	mov	r0, r9
  40646c:	f001 f87c 	bl	407568 <__multadd>
  406470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406472:	2b00      	cmp	r3, #0
  406474:	4606      	mov	r6, r0
  406476:	f340 8297 	ble.w	4069a8 <_dtoa_r+0xe10>
  40647a:	9306      	str	r3, [sp, #24]
  40647c:	2d00      	cmp	r5, #0
  40647e:	dd05      	ble.n	40648c <_dtoa_r+0x8f4>
  406480:	4631      	mov	r1, r6
  406482:	462a      	mov	r2, r5
  406484:	4648      	mov	r0, r9
  406486:	f001 f9ef 	bl	407868 <__lshift>
  40648a:	4606      	mov	r6, r0
  40648c:	2f00      	cmp	r7, #0
  40648e:	f040 817c 	bne.w	40678a <_dtoa_r+0xbf2>
  406492:	9605      	str	r6, [sp, #20]
  406494:	9b06      	ldr	r3, [sp, #24]
  406496:	9a07      	ldr	r2, [sp, #28]
  406498:	f8dd b014 	ldr.w	fp, [sp, #20]
  40649c:	3b01      	subs	r3, #1
  40649e:	18d3      	adds	r3, r2, r3
  4064a0:	9308      	str	r3, [sp, #32]
  4064a2:	f00a 0301 	and.w	r3, sl, #1
  4064a6:	9309      	str	r3, [sp, #36]	; 0x24
  4064a8:	4617      	mov	r7, r2
  4064aa:	46c2      	mov	sl, r8
  4064ac:	4651      	mov	r1, sl
  4064ae:	4620      	mov	r0, r4
  4064b0:	f7ff fade 	bl	405a70 <quorem>
  4064b4:	4631      	mov	r1, r6
  4064b6:	4605      	mov	r5, r0
  4064b8:	4620      	mov	r0, r4
  4064ba:	f001 fa2d 	bl	407918 <__mcmp>
  4064be:	465a      	mov	r2, fp
  4064c0:	9002      	str	r0, [sp, #8]
  4064c2:	4651      	mov	r1, sl
  4064c4:	4648      	mov	r0, r9
  4064c6:	f001 fa47 	bl	407958 <__mdiff>
  4064ca:	68c2      	ldr	r2, [r0, #12]
  4064cc:	4680      	mov	r8, r0
  4064ce:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4064d2:	2a00      	cmp	r2, #0
  4064d4:	d149      	bne.n	40656a <_dtoa_r+0x9d2>
  4064d6:	4601      	mov	r1, r0
  4064d8:	4620      	mov	r0, r4
  4064da:	9306      	str	r3, [sp, #24]
  4064dc:	f001 fa1c 	bl	407918 <__mcmp>
  4064e0:	4641      	mov	r1, r8
  4064e2:	9005      	str	r0, [sp, #20]
  4064e4:	4648      	mov	r0, r9
  4064e6:	f001 f835 	bl	407554 <_Bfree>
  4064ea:	9a05      	ldr	r2, [sp, #20]
  4064ec:	9b06      	ldr	r3, [sp, #24]
  4064ee:	b92a      	cbnz	r2, 4064fc <_dtoa_r+0x964>
  4064f0:	9920      	ldr	r1, [sp, #128]	; 0x80
  4064f2:	b919      	cbnz	r1, 4064fc <_dtoa_r+0x964>
  4064f4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4064f6:	2900      	cmp	r1, #0
  4064f8:	f000 8236 	beq.w	406968 <_dtoa_r+0xdd0>
  4064fc:	9902      	ldr	r1, [sp, #8]
  4064fe:	2900      	cmp	r1, #0
  406500:	f2c0 80e4 	blt.w	4066cc <_dtoa_r+0xb34>
  406504:	d105      	bne.n	406512 <_dtoa_r+0x97a>
  406506:	9920      	ldr	r1, [sp, #128]	; 0x80
  406508:	b919      	cbnz	r1, 406512 <_dtoa_r+0x97a>
  40650a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40650c:	2900      	cmp	r1, #0
  40650e:	f000 80dd 	beq.w	4066cc <_dtoa_r+0xb34>
  406512:	2a00      	cmp	r2, #0
  406514:	f300 814d 	bgt.w	4067b2 <_dtoa_r+0xc1a>
  406518:	9a08      	ldr	r2, [sp, #32]
  40651a:	703b      	strb	r3, [r7, #0]
  40651c:	f107 0801 	add.w	r8, r7, #1
  406520:	4297      	cmp	r7, r2
  406522:	4645      	mov	r5, r8
  406524:	f000 8154 	beq.w	4067d0 <_dtoa_r+0xc38>
  406528:	4621      	mov	r1, r4
  40652a:	2300      	movs	r3, #0
  40652c:	220a      	movs	r2, #10
  40652e:	4648      	mov	r0, r9
  406530:	f001 f81a 	bl	407568 <__multadd>
  406534:	455e      	cmp	r6, fp
  406536:	4604      	mov	r4, r0
  406538:	4631      	mov	r1, r6
  40653a:	f04f 0300 	mov.w	r3, #0
  40653e:	f04f 020a 	mov.w	r2, #10
  406542:	4648      	mov	r0, r9
  406544:	d00b      	beq.n	40655e <_dtoa_r+0x9c6>
  406546:	f001 f80f 	bl	407568 <__multadd>
  40654a:	4659      	mov	r1, fp
  40654c:	4606      	mov	r6, r0
  40654e:	2300      	movs	r3, #0
  406550:	220a      	movs	r2, #10
  406552:	4648      	mov	r0, r9
  406554:	f001 f808 	bl	407568 <__multadd>
  406558:	4647      	mov	r7, r8
  40655a:	4683      	mov	fp, r0
  40655c:	e7a6      	b.n	4064ac <_dtoa_r+0x914>
  40655e:	f001 f803 	bl	407568 <__multadd>
  406562:	4647      	mov	r7, r8
  406564:	4606      	mov	r6, r0
  406566:	4683      	mov	fp, r0
  406568:	e7a0      	b.n	4064ac <_dtoa_r+0x914>
  40656a:	4601      	mov	r1, r0
  40656c:	4648      	mov	r0, r9
  40656e:	9305      	str	r3, [sp, #20]
  406570:	f000 fff0 	bl	407554 <_Bfree>
  406574:	2201      	movs	r2, #1
  406576:	9b05      	ldr	r3, [sp, #20]
  406578:	e7c0      	b.n	4064fc <_dtoa_r+0x964>
  40657a:	4641      	mov	r1, r8
  40657c:	4620      	mov	r0, r4
  40657e:	f001 f9cb 	bl	407918 <__mcmp>
  406582:	2800      	cmp	r0, #0
  406584:	f6bf ad7d 	bge.w	406082 <_dtoa_r+0x4ea>
  406588:	4621      	mov	r1, r4
  40658a:	9c04      	ldr	r4, [sp, #16]
  40658c:	2300      	movs	r3, #0
  40658e:	3c01      	subs	r4, #1
  406590:	220a      	movs	r2, #10
  406592:	4648      	mov	r0, r9
  406594:	9404      	str	r4, [sp, #16]
  406596:	f000 ffe7 	bl	407568 <__multadd>
  40659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40659c:	4604      	mov	r4, r0
  40659e:	2b00      	cmp	r3, #0
  4065a0:	f47f af60 	bne.w	406464 <_dtoa_r+0x8cc>
  4065a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4065a6:	2b00      	cmp	r3, #0
  4065a8:	f340 81f6 	ble.w	406998 <_dtoa_r+0xe00>
  4065ac:	9306      	str	r3, [sp, #24]
  4065ae:	e570      	b.n	406092 <_dtoa_r+0x4fa>
  4065b0:	9c08      	ldr	r4, [sp, #32]
  4065b2:	e51f      	b.n	405ff4 <_dtoa_r+0x45c>
  4065b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4065b6:	2b02      	cmp	r3, #2
  4065b8:	f77f ad67 	ble.w	40608a <_dtoa_r+0x4f2>
  4065bc:	9b06      	ldr	r3, [sp, #24]
  4065be:	2b00      	cmp	r3, #0
  4065c0:	f040 8179 	bne.w	4068b6 <_dtoa_r+0xd1e>
  4065c4:	4641      	mov	r1, r8
  4065c6:	2205      	movs	r2, #5
  4065c8:	4648      	mov	r0, r9
  4065ca:	f000 ffcd 	bl	407568 <__multadd>
  4065ce:	4601      	mov	r1, r0
  4065d0:	4680      	mov	r8, r0
  4065d2:	4620      	mov	r0, r4
  4065d4:	f001 f9a0 	bl	407918 <__mcmp>
  4065d8:	2800      	cmp	r0, #0
  4065da:	9408      	str	r4, [sp, #32]
  4065dc:	f77f af0e 	ble.w	4063fc <_dtoa_r+0x864>
  4065e0:	9a04      	ldr	r2, [sp, #16]
  4065e2:	9907      	ldr	r1, [sp, #28]
  4065e4:	2331      	movs	r3, #49	; 0x31
  4065e6:	3201      	adds	r2, #1
  4065e8:	9204      	str	r2, [sp, #16]
  4065ea:	700b      	strb	r3, [r1, #0]
  4065ec:	1c4d      	adds	r5, r1, #1
  4065ee:	e709      	b.n	406404 <_dtoa_r+0x86c>
  4065f0:	9a04      	ldr	r2, [sp, #16]
  4065f2:	3201      	adds	r2, #1
  4065f4:	9204      	str	r2, [sp, #16]
  4065f6:	9a07      	ldr	r2, [sp, #28]
  4065f8:	2331      	movs	r3, #49	; 0x31
  4065fa:	7013      	strb	r3, [r2, #0]
  4065fc:	e588      	b.n	406110 <_dtoa_r+0x578>
  4065fe:	2301      	movs	r3, #1
  406600:	9309      	str	r3, [sp, #36]	; 0x24
  406602:	e5cd      	b.n	4061a0 <_dtoa_r+0x608>
  406604:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406608:	e491      	b.n	405f2e <_dtoa_r+0x396>
  40660a:	f1ba 0f00 	cmp.w	sl, #0
  40660e:	f47f ad04 	bne.w	40601a <_dtoa_r+0x482>
  406612:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406616:	2b00      	cmp	r3, #0
  406618:	f040 813f 	bne.w	40689a <_dtoa_r+0xd02>
  40661c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406620:	0d3f      	lsrs	r7, r7, #20
  406622:	053f      	lsls	r7, r7, #20
  406624:	b137      	cbz	r7, 406634 <_dtoa_r+0xa9c>
  406626:	9b05      	ldr	r3, [sp, #20]
  406628:	3301      	adds	r3, #1
  40662a:	9305      	str	r3, [sp, #20]
  40662c:	9b02      	ldr	r3, [sp, #8]
  40662e:	3301      	adds	r3, #1
  406630:	9302      	str	r3, [sp, #8]
  406632:	2701      	movs	r7, #1
  406634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406636:	2001      	movs	r0, #1
  406638:	2b00      	cmp	r3, #0
  40663a:	f43f acf8 	beq.w	40602e <_dtoa_r+0x496>
  40663e:	e4ed      	b.n	40601c <_dtoa_r+0x484>
  406640:	4640      	mov	r0, r8
  406642:	f001 ff2d 	bl	4084a0 <__aeabi_i2d>
  406646:	4632      	mov	r2, r6
  406648:	463b      	mov	r3, r7
  40664a:	f001 ff8f 	bl	40856c <__aeabi_dmul>
  40664e:	2200      	movs	r2, #0
  406650:	4bbf      	ldr	r3, [pc, #764]	; (406950 <_dtoa_r+0xdb8>)
  406652:	f001 fdd9 	bl	408208 <__adddf3>
  406656:	4604      	mov	r4, r0
  406658:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40665c:	4630      	mov	r0, r6
  40665e:	4639      	mov	r1, r7
  406660:	2200      	movs	r2, #0
  406662:	4bbc      	ldr	r3, [pc, #752]	; (406954 <_dtoa_r+0xdbc>)
  406664:	f001 fdce 	bl	408204 <__aeabi_dsub>
  406668:	4622      	mov	r2, r4
  40666a:	462b      	mov	r3, r5
  40666c:	4606      	mov	r6, r0
  40666e:	460f      	mov	r7, r1
  406670:	f002 fa0c 	bl	408a8c <__aeabi_dcmpgt>
  406674:	4680      	mov	r8, r0
  406676:	2800      	cmp	r0, #0
  406678:	f040 8105 	bne.w	406886 <_dtoa_r+0xcee>
  40667c:	4622      	mov	r2, r4
  40667e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  406682:	4630      	mov	r0, r6
  406684:	4639      	mov	r1, r7
  406686:	f002 f9e3 	bl	408a50 <__aeabi_dcmplt>
  40668a:	b108      	cbz	r0, 406690 <_dtoa_r+0xaf8>
  40668c:	4646      	mov	r6, r8
  40668e:	e6b5      	b.n	4063fc <_dtoa_r+0x864>
  406690:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406694:	f7ff bb89 	b.w	405daa <_dtoa_r+0x212>
  406698:	9807      	ldr	r0, [sp, #28]
  40669a:	f7ff baae 	b.w	405bfa <_dtoa_r+0x62>
  40669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4066a2:	970a      	str	r7, [sp, #40]	; 0x28
  4066a4:	1afb      	subs	r3, r7, r3
  4066a6:	441a      	add	r2, r3
  4066a8:	920b      	str	r2, [sp, #44]	; 0x2c
  4066aa:	2700      	movs	r7, #0
  4066ac:	e461      	b.n	405f72 <_dtoa_r+0x3da>
  4066ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4066b2:	f04f 0802 	mov.w	r8, #2
  4066b6:	e5bb      	b.n	406230 <_dtoa_r+0x698>
  4066b8:	461c      	mov	r4, r3
  4066ba:	2100      	movs	r1, #0
  4066bc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4066c0:	e58a      	b.n	4061d8 <_dtoa_r+0x640>
  4066c2:	2401      	movs	r4, #1
  4066c4:	9421      	str	r4, [sp, #132]	; 0x84
  4066c6:	940d      	str	r4, [sp, #52]	; 0x34
  4066c8:	9406      	str	r4, [sp, #24]
  4066ca:	e7f6      	b.n	4066ba <_dtoa_r+0xb22>
  4066cc:	2a00      	cmp	r2, #0
  4066ce:	46d0      	mov	r8, sl
  4066d0:	f8cd b014 	str.w	fp, [sp, #20]
  4066d4:	469a      	mov	sl, r3
  4066d6:	dd11      	ble.n	4066fc <_dtoa_r+0xb64>
  4066d8:	4621      	mov	r1, r4
  4066da:	2201      	movs	r2, #1
  4066dc:	4648      	mov	r0, r9
  4066de:	f001 f8c3 	bl	407868 <__lshift>
  4066e2:	4641      	mov	r1, r8
  4066e4:	4604      	mov	r4, r0
  4066e6:	f001 f917 	bl	407918 <__mcmp>
  4066ea:	2800      	cmp	r0, #0
  4066ec:	f340 8149 	ble.w	406982 <_dtoa_r+0xdea>
  4066f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4066f4:	f000 8106 	beq.w	406904 <_dtoa_r+0xd6c>
  4066f8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4066fc:	46b3      	mov	fp, r6
  4066fe:	f887 a000 	strb.w	sl, [r7]
  406702:	1c7d      	adds	r5, r7, #1
  406704:	9e05      	ldr	r6, [sp, #20]
  406706:	9408      	str	r4, [sp, #32]
  406708:	e502      	b.n	406110 <_dtoa_r+0x578>
  40670a:	d104      	bne.n	406716 <_dtoa_r+0xb7e>
  40670c:	f01a 0f01 	tst.w	sl, #1
  406710:	d001      	beq.n	406716 <_dtoa_r+0xb7e>
  406712:	e4ed      	b.n	4060f0 <_dtoa_r+0x558>
  406714:	4615      	mov	r5, r2
  406716:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40671a:	2b30      	cmp	r3, #48	; 0x30
  40671c:	f105 32ff 	add.w	r2, r5, #4294967295
  406720:	d0f8      	beq.n	406714 <_dtoa_r+0xb7c>
  406722:	e4f5      	b.n	406110 <_dtoa_r+0x578>
  406724:	9b04      	ldr	r3, [sp, #16]
  406726:	425c      	negs	r4, r3
  406728:	2c00      	cmp	r4, #0
  40672a:	f000 80bf 	beq.w	4068ac <_dtoa_r+0xd14>
  40672e:	4b8a      	ldr	r3, [pc, #552]	; (406958 <_dtoa_r+0xdc0>)
  406730:	f004 020f 	and.w	r2, r4, #15
  406734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406738:	e9d3 2300 	ldrd	r2, r3, [r3]
  40673c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406740:	f001 ff14 	bl	40856c <__aeabi_dmul>
  406744:	1124      	asrs	r4, r4, #4
  406746:	4606      	mov	r6, r0
  406748:	460f      	mov	r7, r1
  40674a:	f000 812a 	beq.w	4069a2 <_dtoa_r+0xe0a>
  40674e:	4d83      	ldr	r5, [pc, #524]	; (40695c <_dtoa_r+0xdc4>)
  406750:	f04f 0802 	mov.w	r8, #2
  406754:	07e2      	lsls	r2, r4, #31
  406756:	d509      	bpl.n	40676c <_dtoa_r+0xbd4>
  406758:	4630      	mov	r0, r6
  40675a:	4639      	mov	r1, r7
  40675c:	e9d5 2300 	ldrd	r2, r3, [r5]
  406760:	f001 ff04 	bl	40856c <__aeabi_dmul>
  406764:	f108 0801 	add.w	r8, r8, #1
  406768:	4606      	mov	r6, r0
  40676a:	460f      	mov	r7, r1
  40676c:	1064      	asrs	r4, r4, #1
  40676e:	f105 0508 	add.w	r5, r5, #8
  406772:	d1ef      	bne.n	406754 <_dtoa_r+0xbbc>
  406774:	e576      	b.n	406264 <_dtoa_r+0x6cc>
  406776:	9907      	ldr	r1, [sp, #28]
  406778:	2230      	movs	r2, #48	; 0x30
  40677a:	700a      	strb	r2, [r1, #0]
  40677c:	9a04      	ldr	r2, [sp, #16]
  40677e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406782:	3201      	adds	r2, #1
  406784:	9204      	str	r2, [sp, #16]
  406786:	f7ff bbd0 	b.w	405f2a <_dtoa_r+0x392>
  40678a:	6871      	ldr	r1, [r6, #4]
  40678c:	4648      	mov	r0, r9
  40678e:	f000 febb 	bl	407508 <_Balloc>
  406792:	6933      	ldr	r3, [r6, #16]
  406794:	1c9a      	adds	r2, r3, #2
  406796:	4605      	mov	r5, r0
  406798:	0092      	lsls	r2, r2, #2
  40679a:	f106 010c 	add.w	r1, r6, #12
  40679e:	300c      	adds	r0, #12
  4067a0:	f000 fdb0 	bl	407304 <memcpy>
  4067a4:	4629      	mov	r1, r5
  4067a6:	2201      	movs	r2, #1
  4067a8:	4648      	mov	r0, r9
  4067aa:	f001 f85d 	bl	407868 <__lshift>
  4067ae:	9005      	str	r0, [sp, #20]
  4067b0:	e670      	b.n	406494 <_dtoa_r+0x8fc>
  4067b2:	2b39      	cmp	r3, #57	; 0x39
  4067b4:	f8cd b014 	str.w	fp, [sp, #20]
  4067b8:	46d0      	mov	r8, sl
  4067ba:	f000 80a3 	beq.w	406904 <_dtoa_r+0xd6c>
  4067be:	f103 0a01 	add.w	sl, r3, #1
  4067c2:	46b3      	mov	fp, r6
  4067c4:	f887 a000 	strb.w	sl, [r7]
  4067c8:	1c7d      	adds	r5, r7, #1
  4067ca:	9e05      	ldr	r6, [sp, #20]
  4067cc:	9408      	str	r4, [sp, #32]
  4067ce:	e49f      	b.n	406110 <_dtoa_r+0x578>
  4067d0:	465a      	mov	r2, fp
  4067d2:	46d0      	mov	r8, sl
  4067d4:	46b3      	mov	fp, r6
  4067d6:	469a      	mov	sl, r3
  4067d8:	4616      	mov	r6, r2
  4067da:	e47d      	b.n	4060d8 <_dtoa_r+0x540>
  4067dc:	495e      	ldr	r1, [pc, #376]	; (406958 <_dtoa_r+0xdc0>)
  4067de:	f108 3aff 	add.w	sl, r8, #4294967295
  4067e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  4067e6:	4622      	mov	r2, r4
  4067e8:	462b      	mov	r3, r5
  4067ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4067ee:	f001 febd 	bl	40856c <__aeabi_dmul>
  4067f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4067f6:	4639      	mov	r1, r7
  4067f8:	4630      	mov	r0, r6
  4067fa:	f002 f967 	bl	408acc <__aeabi_d2iz>
  4067fe:	4604      	mov	r4, r0
  406800:	f001 fe4e 	bl	4084a0 <__aeabi_i2d>
  406804:	4602      	mov	r2, r0
  406806:	460b      	mov	r3, r1
  406808:	4630      	mov	r0, r6
  40680a:	4639      	mov	r1, r7
  40680c:	f001 fcfa 	bl	408204 <__aeabi_dsub>
  406810:	9a07      	ldr	r2, [sp, #28]
  406812:	3430      	adds	r4, #48	; 0x30
  406814:	f1b8 0f01 	cmp.w	r8, #1
  406818:	4606      	mov	r6, r0
  40681a:	460f      	mov	r7, r1
  40681c:	7014      	strb	r4, [r2, #0]
  40681e:	f102 0501 	add.w	r5, r2, #1
  406822:	d01e      	beq.n	406862 <_dtoa_r+0xcca>
  406824:	9b07      	ldr	r3, [sp, #28]
  406826:	eb03 0b08 	add.w	fp, r3, r8
  40682a:	46a8      	mov	r8, r5
  40682c:	2200      	movs	r2, #0
  40682e:	4b4c      	ldr	r3, [pc, #304]	; (406960 <_dtoa_r+0xdc8>)
  406830:	4630      	mov	r0, r6
  406832:	4639      	mov	r1, r7
  406834:	f001 fe9a 	bl	40856c <__aeabi_dmul>
  406838:	460f      	mov	r7, r1
  40683a:	4606      	mov	r6, r0
  40683c:	f002 f946 	bl	408acc <__aeabi_d2iz>
  406840:	4604      	mov	r4, r0
  406842:	f001 fe2d 	bl	4084a0 <__aeabi_i2d>
  406846:	3430      	adds	r4, #48	; 0x30
  406848:	4602      	mov	r2, r0
  40684a:	460b      	mov	r3, r1
  40684c:	4630      	mov	r0, r6
  40684e:	4639      	mov	r1, r7
  406850:	f001 fcd8 	bl	408204 <__aeabi_dsub>
  406854:	f808 4b01 	strb.w	r4, [r8], #1
  406858:	45c3      	cmp	fp, r8
  40685a:	4606      	mov	r6, r0
  40685c:	460f      	mov	r7, r1
  40685e:	d1e5      	bne.n	40682c <_dtoa_r+0xc94>
  406860:	4455      	add	r5, sl
  406862:	2200      	movs	r2, #0
  406864:	4b3f      	ldr	r3, [pc, #252]	; (406964 <_dtoa_r+0xdcc>)
  406866:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40686a:	f001 fccd 	bl	408208 <__adddf3>
  40686e:	4632      	mov	r2, r6
  406870:	463b      	mov	r3, r7
  406872:	f002 f8ed 	bl	408a50 <__aeabi_dcmplt>
  406876:	2800      	cmp	r0, #0
  406878:	d04c      	beq.n	406914 <_dtoa_r+0xd7c>
  40687a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40687c:	9304      	str	r3, [sp, #16]
  40687e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406882:	f7ff bb46 	b.w	405f12 <_dtoa_r+0x37a>
  406886:	f04f 0800 	mov.w	r8, #0
  40688a:	4646      	mov	r6, r8
  40688c:	e6a8      	b.n	4065e0 <_dtoa_r+0xa48>
  40688e:	9b05      	ldr	r3, [sp, #20]
  406890:	9a06      	ldr	r2, [sp, #24]
  406892:	1a9d      	subs	r5, r3, r2
  406894:	2300      	movs	r3, #0
  406896:	f7ff bb72 	b.w	405f7e <_dtoa_r+0x3e6>
  40689a:	2700      	movs	r7, #0
  40689c:	e6ca      	b.n	406634 <_dtoa_r+0xa9c>
  40689e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4068a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4068a2:	9d05      	ldr	r5, [sp, #20]
  4068a4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4068a8:	f7ff bb69 	b.w	405f7e <_dtoa_r+0x3e6>
  4068ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4068b0:	f04f 0802 	mov.w	r8, #2
  4068b4:	e4d6      	b.n	406264 <_dtoa_r+0x6cc>
  4068b6:	9408      	str	r4, [sp, #32]
  4068b8:	e5a0      	b.n	4063fc <_dtoa_r+0x864>
  4068ba:	9b06      	ldr	r3, [sp, #24]
  4068bc:	2b00      	cmp	r3, #0
  4068be:	f43f aebf 	beq.w	406640 <_dtoa_r+0xaa8>
  4068c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4068c4:	2b00      	cmp	r3, #0
  4068c6:	f77f aee3 	ble.w	406690 <_dtoa_r+0xaf8>
  4068ca:	2200      	movs	r2, #0
  4068cc:	4b24      	ldr	r3, [pc, #144]	; (406960 <_dtoa_r+0xdc8>)
  4068ce:	4630      	mov	r0, r6
  4068d0:	4639      	mov	r1, r7
  4068d2:	f001 fe4b 	bl	40856c <__aeabi_dmul>
  4068d6:	4606      	mov	r6, r0
  4068d8:	460f      	mov	r7, r1
  4068da:	f108 0001 	add.w	r0, r8, #1
  4068de:	f001 fddf 	bl	4084a0 <__aeabi_i2d>
  4068e2:	4632      	mov	r2, r6
  4068e4:	463b      	mov	r3, r7
  4068e6:	f001 fe41 	bl	40856c <__aeabi_dmul>
  4068ea:	2200      	movs	r2, #0
  4068ec:	4b18      	ldr	r3, [pc, #96]	; (406950 <_dtoa_r+0xdb8>)
  4068ee:	f001 fc8b 	bl	408208 <__adddf3>
  4068f2:	9a04      	ldr	r2, [sp, #16]
  4068f4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4068f8:	3a01      	subs	r2, #1
  4068fa:	4604      	mov	r4, r0
  4068fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406900:	9211      	str	r2, [sp, #68]	; 0x44
  406902:	e4d0      	b.n	4062a6 <_dtoa_r+0x70e>
  406904:	2239      	movs	r2, #57	; 0x39
  406906:	46b3      	mov	fp, r6
  406908:	9408      	str	r4, [sp, #32]
  40690a:	9e05      	ldr	r6, [sp, #20]
  40690c:	703a      	strb	r2, [r7, #0]
  40690e:	1c7d      	adds	r5, r7, #1
  406910:	f7ff bbf0 	b.w	4060f4 <_dtoa_r+0x55c>
  406914:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406918:	2000      	movs	r0, #0
  40691a:	4912      	ldr	r1, [pc, #72]	; (406964 <_dtoa_r+0xdcc>)
  40691c:	f001 fc72 	bl	408204 <__aeabi_dsub>
  406920:	4632      	mov	r2, r6
  406922:	463b      	mov	r3, r7
  406924:	f002 f8b2 	bl	408a8c <__aeabi_dcmpgt>
  406928:	b908      	cbnz	r0, 40692e <_dtoa_r+0xd96>
  40692a:	e6b1      	b.n	406690 <_dtoa_r+0xaf8>
  40692c:	4615      	mov	r5, r2
  40692e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406932:	2b30      	cmp	r3, #48	; 0x30
  406934:	f105 32ff 	add.w	r2, r5, #4294967295
  406938:	d0f8      	beq.n	40692c <_dtoa_r+0xd94>
  40693a:	e530      	b.n	40639e <_dtoa_r+0x806>
  40693c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40693e:	9304      	str	r3, [sp, #16]
  406940:	f7ff bae7 	b.w	405f12 <_dtoa_r+0x37a>
  406944:	f1ba 0f00 	cmp.w	sl, #0
  406948:	f47f ad7a 	bne.w	406440 <_dtoa_r+0x8a8>
  40694c:	e661      	b.n	406612 <_dtoa_r+0xa7a>
  40694e:	bf00      	nop
  406950:	401c0000 	.word	0x401c0000
  406954:	40140000 	.word	0x40140000
  406958:	00409a30 	.word	0x00409a30
  40695c:	00409af8 	.word	0x00409af8
  406960:	40240000 	.word	0x40240000
  406964:	3fe00000 	.word	0x3fe00000
  406968:	2b39      	cmp	r3, #57	; 0x39
  40696a:	f8cd b014 	str.w	fp, [sp, #20]
  40696e:	46d0      	mov	r8, sl
  406970:	f8dd b008 	ldr.w	fp, [sp, #8]
  406974:	469a      	mov	sl, r3
  406976:	d0c5      	beq.n	406904 <_dtoa_r+0xd6c>
  406978:	f1bb 0f00 	cmp.w	fp, #0
  40697c:	f73f aebc 	bgt.w	4066f8 <_dtoa_r+0xb60>
  406980:	e6bc      	b.n	4066fc <_dtoa_r+0xb64>
  406982:	f47f aebb 	bne.w	4066fc <_dtoa_r+0xb64>
  406986:	f01a 0f01 	tst.w	sl, #1
  40698a:	f43f aeb7 	beq.w	4066fc <_dtoa_r+0xb64>
  40698e:	e6af      	b.n	4066f0 <_dtoa_r+0xb58>
  406990:	f04f 0800 	mov.w	r8, #0
  406994:	4646      	mov	r6, r8
  406996:	e531      	b.n	4063fc <_dtoa_r+0x864>
  406998:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40699a:	2b02      	cmp	r3, #2
  40699c:	dc21      	bgt.n	4069e2 <_dtoa_r+0xe4a>
  40699e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069a0:	e604      	b.n	4065ac <_dtoa_r+0xa14>
  4069a2:	f04f 0802 	mov.w	r8, #2
  4069a6:	e45d      	b.n	406264 <_dtoa_r+0x6cc>
  4069a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4069aa:	2b02      	cmp	r3, #2
  4069ac:	dc19      	bgt.n	4069e2 <_dtoa_r+0xe4a>
  4069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069b0:	e563      	b.n	40647a <_dtoa_r+0x8e2>
  4069b2:	2400      	movs	r4, #0
  4069b4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  4069b8:	4621      	mov	r1, r4
  4069ba:	4648      	mov	r0, r9
  4069bc:	f000 fda4 	bl	407508 <_Balloc>
  4069c0:	f04f 33ff 	mov.w	r3, #4294967295
  4069c4:	9306      	str	r3, [sp, #24]
  4069c6:	930d      	str	r3, [sp, #52]	; 0x34
  4069c8:	2301      	movs	r3, #1
  4069ca:	9007      	str	r0, [sp, #28]
  4069cc:	9421      	str	r4, [sp, #132]	; 0x84
  4069ce:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4069d2:	9309      	str	r3, [sp, #36]	; 0x24
  4069d4:	f7ff b9e9 	b.w	405daa <_dtoa_r+0x212>
  4069d8:	f43f ab3d 	beq.w	406056 <_dtoa_r+0x4be>
  4069dc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4069e0:	e522      	b.n	406428 <_dtoa_r+0x890>
  4069e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069e4:	9306      	str	r3, [sp, #24]
  4069e6:	e5e9      	b.n	4065bc <_dtoa_r+0xa24>
  4069e8:	2501      	movs	r5, #1
  4069ea:	f7ff b9a8 	b.w	405d3e <_dtoa_r+0x1a6>
  4069ee:	bf00      	nop

004069f0 <__libc_fini_array>:
  4069f0:	b538      	push	{r3, r4, r5, lr}
  4069f2:	4d07      	ldr	r5, [pc, #28]	; (406a10 <__libc_fini_array+0x20>)
  4069f4:	4c07      	ldr	r4, [pc, #28]	; (406a14 <__libc_fini_array+0x24>)
  4069f6:	1b2c      	subs	r4, r5, r4
  4069f8:	10a4      	asrs	r4, r4, #2
  4069fa:	d005      	beq.n	406a08 <__libc_fini_array+0x18>
  4069fc:	3c01      	subs	r4, #1
  4069fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406a02:	4798      	blx	r3
  406a04:	2c00      	cmp	r4, #0
  406a06:	d1f9      	bne.n	4069fc <__libc_fini_array+0xc>
  406a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406a0c:	f003 b898 	b.w	409b40 <_fini>
  406a10:	00409b50 	.word	0x00409b50
  406a14:	00409b4c 	.word	0x00409b4c

00406a18 <_malloc_trim_r>:
  406a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a1a:	4f23      	ldr	r7, [pc, #140]	; (406aa8 <_malloc_trim_r+0x90>)
  406a1c:	460c      	mov	r4, r1
  406a1e:	4606      	mov	r6, r0
  406a20:	f000 fd6e 	bl	407500 <__malloc_lock>
  406a24:	68bb      	ldr	r3, [r7, #8]
  406a26:	685d      	ldr	r5, [r3, #4]
  406a28:	f025 0503 	bic.w	r5, r5, #3
  406a2c:	1b29      	subs	r1, r5, r4
  406a2e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  406a32:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406a36:	f021 010f 	bic.w	r1, r1, #15
  406a3a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406a3e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406a42:	db07      	blt.n	406a54 <_malloc_trim_r+0x3c>
  406a44:	2100      	movs	r1, #0
  406a46:	4630      	mov	r0, r6
  406a48:	f001 fa5c 	bl	407f04 <_sbrk_r>
  406a4c:	68bb      	ldr	r3, [r7, #8]
  406a4e:	442b      	add	r3, r5
  406a50:	4298      	cmp	r0, r3
  406a52:	d004      	beq.n	406a5e <_malloc_trim_r+0x46>
  406a54:	4630      	mov	r0, r6
  406a56:	f000 fd55 	bl	407504 <__malloc_unlock>
  406a5a:	2000      	movs	r0, #0
  406a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a5e:	4261      	negs	r1, r4
  406a60:	4630      	mov	r0, r6
  406a62:	f001 fa4f 	bl	407f04 <_sbrk_r>
  406a66:	3001      	adds	r0, #1
  406a68:	d00d      	beq.n	406a86 <_malloc_trim_r+0x6e>
  406a6a:	4b10      	ldr	r3, [pc, #64]	; (406aac <_malloc_trim_r+0x94>)
  406a6c:	68ba      	ldr	r2, [r7, #8]
  406a6e:	6819      	ldr	r1, [r3, #0]
  406a70:	1b2d      	subs	r5, r5, r4
  406a72:	f045 0501 	orr.w	r5, r5, #1
  406a76:	4630      	mov	r0, r6
  406a78:	1b09      	subs	r1, r1, r4
  406a7a:	6055      	str	r5, [r2, #4]
  406a7c:	6019      	str	r1, [r3, #0]
  406a7e:	f000 fd41 	bl	407504 <__malloc_unlock>
  406a82:	2001      	movs	r0, #1
  406a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a86:	2100      	movs	r1, #0
  406a88:	4630      	mov	r0, r6
  406a8a:	f001 fa3b 	bl	407f04 <_sbrk_r>
  406a8e:	68ba      	ldr	r2, [r7, #8]
  406a90:	1a83      	subs	r3, r0, r2
  406a92:	2b0f      	cmp	r3, #15
  406a94:	ddde      	ble.n	406a54 <_malloc_trim_r+0x3c>
  406a96:	4c06      	ldr	r4, [pc, #24]	; (406ab0 <_malloc_trim_r+0x98>)
  406a98:	4904      	ldr	r1, [pc, #16]	; (406aac <_malloc_trim_r+0x94>)
  406a9a:	6824      	ldr	r4, [r4, #0]
  406a9c:	f043 0301 	orr.w	r3, r3, #1
  406aa0:	1b00      	subs	r0, r0, r4
  406aa2:	6053      	str	r3, [r2, #4]
  406aa4:	6008      	str	r0, [r1, #0]
  406aa6:	e7d5      	b.n	406a54 <_malloc_trim_r+0x3c>
  406aa8:	20000474 	.word	0x20000474
  406aac:	2000d668 	.word	0x2000d668
  406ab0:	20000880 	.word	0x20000880

00406ab4 <_free_r>:
  406ab4:	2900      	cmp	r1, #0
  406ab6:	d045      	beq.n	406b44 <_free_r+0x90>
  406ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406abc:	460d      	mov	r5, r1
  406abe:	4680      	mov	r8, r0
  406ac0:	f000 fd1e 	bl	407500 <__malloc_lock>
  406ac4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406ac8:	496a      	ldr	r1, [pc, #424]	; (406c74 <_free_r+0x1c0>)
  406aca:	f027 0301 	bic.w	r3, r7, #1
  406ace:	f1a5 0408 	sub.w	r4, r5, #8
  406ad2:	18e2      	adds	r2, r4, r3
  406ad4:	688e      	ldr	r6, [r1, #8]
  406ad6:	6850      	ldr	r0, [r2, #4]
  406ad8:	42b2      	cmp	r2, r6
  406ada:	f020 0003 	bic.w	r0, r0, #3
  406ade:	d062      	beq.n	406ba6 <_free_r+0xf2>
  406ae0:	07fe      	lsls	r6, r7, #31
  406ae2:	6050      	str	r0, [r2, #4]
  406ae4:	d40b      	bmi.n	406afe <_free_r+0x4a>
  406ae6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406aea:	1be4      	subs	r4, r4, r7
  406aec:	f101 0e08 	add.w	lr, r1, #8
  406af0:	68a5      	ldr	r5, [r4, #8]
  406af2:	4575      	cmp	r5, lr
  406af4:	443b      	add	r3, r7
  406af6:	d06f      	beq.n	406bd8 <_free_r+0x124>
  406af8:	68e7      	ldr	r7, [r4, #12]
  406afa:	60ef      	str	r7, [r5, #12]
  406afc:	60bd      	str	r5, [r7, #8]
  406afe:	1815      	adds	r5, r2, r0
  406b00:	686d      	ldr	r5, [r5, #4]
  406b02:	07ed      	lsls	r5, r5, #31
  406b04:	d542      	bpl.n	406b8c <_free_r+0xd8>
  406b06:	f043 0201 	orr.w	r2, r3, #1
  406b0a:	6062      	str	r2, [r4, #4]
  406b0c:	50e3      	str	r3, [r4, r3]
  406b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406b12:	d218      	bcs.n	406b46 <_free_r+0x92>
  406b14:	08db      	lsrs	r3, r3, #3
  406b16:	1c5a      	adds	r2, r3, #1
  406b18:	684d      	ldr	r5, [r1, #4]
  406b1a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  406b1e:	60a7      	str	r7, [r4, #8]
  406b20:	2001      	movs	r0, #1
  406b22:	109b      	asrs	r3, r3, #2
  406b24:	fa00 f303 	lsl.w	r3, r0, r3
  406b28:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  406b2c:	431d      	orrs	r5, r3
  406b2e:	3808      	subs	r0, #8
  406b30:	60e0      	str	r0, [r4, #12]
  406b32:	604d      	str	r5, [r1, #4]
  406b34:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  406b38:	60fc      	str	r4, [r7, #12]
  406b3a:	4640      	mov	r0, r8
  406b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b40:	f000 bce0 	b.w	407504 <__malloc_unlock>
  406b44:	4770      	bx	lr
  406b46:	0a5a      	lsrs	r2, r3, #9
  406b48:	2a04      	cmp	r2, #4
  406b4a:	d853      	bhi.n	406bf4 <_free_r+0x140>
  406b4c:	099a      	lsrs	r2, r3, #6
  406b4e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406b52:	007f      	lsls	r7, r7, #1
  406b54:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406b58:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  406b5c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  406b60:	4944      	ldr	r1, [pc, #272]	; (406c74 <_free_r+0x1c0>)
  406b62:	3808      	subs	r0, #8
  406b64:	4290      	cmp	r0, r2
  406b66:	d04d      	beq.n	406c04 <_free_r+0x150>
  406b68:	6851      	ldr	r1, [r2, #4]
  406b6a:	f021 0103 	bic.w	r1, r1, #3
  406b6e:	428b      	cmp	r3, r1
  406b70:	d202      	bcs.n	406b78 <_free_r+0xc4>
  406b72:	6892      	ldr	r2, [r2, #8]
  406b74:	4290      	cmp	r0, r2
  406b76:	d1f7      	bne.n	406b68 <_free_r+0xb4>
  406b78:	68d0      	ldr	r0, [r2, #12]
  406b7a:	60e0      	str	r0, [r4, #12]
  406b7c:	60a2      	str	r2, [r4, #8]
  406b7e:	6084      	str	r4, [r0, #8]
  406b80:	60d4      	str	r4, [r2, #12]
  406b82:	4640      	mov	r0, r8
  406b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b88:	f000 bcbc 	b.w	407504 <__malloc_unlock>
  406b8c:	6895      	ldr	r5, [r2, #8]
  406b8e:	4f3a      	ldr	r7, [pc, #232]	; (406c78 <_free_r+0x1c4>)
  406b90:	42bd      	cmp	r5, r7
  406b92:	4403      	add	r3, r0
  406b94:	d03f      	beq.n	406c16 <_free_r+0x162>
  406b96:	68d0      	ldr	r0, [r2, #12]
  406b98:	60e8      	str	r0, [r5, #12]
  406b9a:	f043 0201 	orr.w	r2, r3, #1
  406b9e:	6085      	str	r5, [r0, #8]
  406ba0:	6062      	str	r2, [r4, #4]
  406ba2:	50e3      	str	r3, [r4, r3]
  406ba4:	e7b3      	b.n	406b0e <_free_r+0x5a>
  406ba6:	07ff      	lsls	r7, r7, #31
  406ba8:	4403      	add	r3, r0
  406baa:	d407      	bmi.n	406bbc <_free_r+0x108>
  406bac:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406bb0:	1aa4      	subs	r4, r4, r2
  406bb2:	4413      	add	r3, r2
  406bb4:	68a0      	ldr	r0, [r4, #8]
  406bb6:	68e2      	ldr	r2, [r4, #12]
  406bb8:	60c2      	str	r2, [r0, #12]
  406bba:	6090      	str	r0, [r2, #8]
  406bbc:	4a2f      	ldr	r2, [pc, #188]	; (406c7c <_free_r+0x1c8>)
  406bbe:	6812      	ldr	r2, [r2, #0]
  406bc0:	f043 0001 	orr.w	r0, r3, #1
  406bc4:	4293      	cmp	r3, r2
  406bc6:	6060      	str	r0, [r4, #4]
  406bc8:	608c      	str	r4, [r1, #8]
  406bca:	d3b6      	bcc.n	406b3a <_free_r+0x86>
  406bcc:	4b2c      	ldr	r3, [pc, #176]	; (406c80 <_free_r+0x1cc>)
  406bce:	4640      	mov	r0, r8
  406bd0:	6819      	ldr	r1, [r3, #0]
  406bd2:	f7ff ff21 	bl	406a18 <_malloc_trim_r>
  406bd6:	e7b0      	b.n	406b3a <_free_r+0x86>
  406bd8:	1811      	adds	r1, r2, r0
  406bda:	6849      	ldr	r1, [r1, #4]
  406bdc:	07c9      	lsls	r1, r1, #31
  406bde:	d444      	bmi.n	406c6a <_free_r+0x1b6>
  406be0:	6891      	ldr	r1, [r2, #8]
  406be2:	68d2      	ldr	r2, [r2, #12]
  406be4:	60ca      	str	r2, [r1, #12]
  406be6:	4403      	add	r3, r0
  406be8:	f043 0001 	orr.w	r0, r3, #1
  406bec:	6091      	str	r1, [r2, #8]
  406bee:	6060      	str	r0, [r4, #4]
  406bf0:	50e3      	str	r3, [r4, r3]
  406bf2:	e7a2      	b.n	406b3a <_free_r+0x86>
  406bf4:	2a14      	cmp	r2, #20
  406bf6:	d817      	bhi.n	406c28 <_free_r+0x174>
  406bf8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406bfc:	007f      	lsls	r7, r7, #1
  406bfe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406c02:	e7a9      	b.n	406b58 <_free_r+0xa4>
  406c04:	10aa      	asrs	r2, r5, #2
  406c06:	684b      	ldr	r3, [r1, #4]
  406c08:	2501      	movs	r5, #1
  406c0a:	fa05 f202 	lsl.w	r2, r5, r2
  406c0e:	4313      	orrs	r3, r2
  406c10:	604b      	str	r3, [r1, #4]
  406c12:	4602      	mov	r2, r0
  406c14:	e7b1      	b.n	406b7a <_free_r+0xc6>
  406c16:	f043 0201 	orr.w	r2, r3, #1
  406c1a:	614c      	str	r4, [r1, #20]
  406c1c:	610c      	str	r4, [r1, #16]
  406c1e:	60e5      	str	r5, [r4, #12]
  406c20:	60a5      	str	r5, [r4, #8]
  406c22:	6062      	str	r2, [r4, #4]
  406c24:	50e3      	str	r3, [r4, r3]
  406c26:	e788      	b.n	406b3a <_free_r+0x86>
  406c28:	2a54      	cmp	r2, #84	; 0x54
  406c2a:	d806      	bhi.n	406c3a <_free_r+0x186>
  406c2c:	0b1a      	lsrs	r2, r3, #12
  406c2e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406c32:	007f      	lsls	r7, r7, #1
  406c34:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406c38:	e78e      	b.n	406b58 <_free_r+0xa4>
  406c3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406c3e:	d806      	bhi.n	406c4e <_free_r+0x19a>
  406c40:	0bda      	lsrs	r2, r3, #15
  406c42:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406c46:	007f      	lsls	r7, r7, #1
  406c48:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406c4c:	e784      	b.n	406b58 <_free_r+0xa4>
  406c4e:	f240 5054 	movw	r0, #1364	; 0x554
  406c52:	4282      	cmp	r2, r0
  406c54:	d806      	bhi.n	406c64 <_free_r+0x1b0>
  406c56:	0c9a      	lsrs	r2, r3, #18
  406c58:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406c5c:	007f      	lsls	r7, r7, #1
  406c5e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c62:	e779      	b.n	406b58 <_free_r+0xa4>
  406c64:	27fe      	movs	r7, #254	; 0xfe
  406c66:	257e      	movs	r5, #126	; 0x7e
  406c68:	e776      	b.n	406b58 <_free_r+0xa4>
  406c6a:	f043 0201 	orr.w	r2, r3, #1
  406c6e:	6062      	str	r2, [r4, #4]
  406c70:	50e3      	str	r3, [r4, r3]
  406c72:	e762      	b.n	406b3a <_free_r+0x86>
  406c74:	20000474 	.word	0x20000474
  406c78:	2000047c 	.word	0x2000047c
  406c7c:	2000087c 	.word	0x2000087c
  406c80:	2000d664 	.word	0x2000d664

00406c84 <_localeconv_r>:
  406c84:	4800      	ldr	r0, [pc, #0]	; (406c88 <_localeconv_r+0x4>)
  406c86:	4770      	bx	lr
  406c88:	2000043c 	.word	0x2000043c

00406c8c <_malloc_r>:
  406c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c90:	f101 050b 	add.w	r5, r1, #11
  406c94:	2d16      	cmp	r5, #22
  406c96:	b083      	sub	sp, #12
  406c98:	4606      	mov	r6, r0
  406c9a:	f240 809f 	bls.w	406ddc <_malloc_r+0x150>
  406c9e:	f035 0507 	bics.w	r5, r5, #7
  406ca2:	f100 80bf 	bmi.w	406e24 <_malloc_r+0x198>
  406ca6:	42a9      	cmp	r1, r5
  406ca8:	f200 80bc 	bhi.w	406e24 <_malloc_r+0x198>
  406cac:	f000 fc28 	bl	407500 <__malloc_lock>
  406cb0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  406cb4:	f0c0 829c 	bcc.w	4071f0 <_malloc_r+0x564>
  406cb8:	0a6b      	lsrs	r3, r5, #9
  406cba:	f000 80ba 	beq.w	406e32 <_malloc_r+0x1a6>
  406cbe:	2b04      	cmp	r3, #4
  406cc0:	f200 8183 	bhi.w	406fca <_malloc_r+0x33e>
  406cc4:	09a8      	lsrs	r0, r5, #6
  406cc6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  406cca:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406cce:	3038      	adds	r0, #56	; 0x38
  406cd0:	4fc4      	ldr	r7, [pc, #784]	; (406fe4 <_malloc_r+0x358>)
  406cd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406cd6:	f1a3 0108 	sub.w	r1, r3, #8
  406cda:	685c      	ldr	r4, [r3, #4]
  406cdc:	42a1      	cmp	r1, r4
  406cde:	d107      	bne.n	406cf0 <_malloc_r+0x64>
  406ce0:	e0ac      	b.n	406e3c <_malloc_r+0x1b0>
  406ce2:	2a00      	cmp	r2, #0
  406ce4:	f280 80ac 	bge.w	406e40 <_malloc_r+0x1b4>
  406ce8:	68e4      	ldr	r4, [r4, #12]
  406cea:	42a1      	cmp	r1, r4
  406cec:	f000 80a6 	beq.w	406e3c <_malloc_r+0x1b0>
  406cf0:	6863      	ldr	r3, [r4, #4]
  406cf2:	f023 0303 	bic.w	r3, r3, #3
  406cf6:	1b5a      	subs	r2, r3, r5
  406cf8:	2a0f      	cmp	r2, #15
  406cfa:	ddf2      	ble.n	406ce2 <_malloc_r+0x56>
  406cfc:	49b9      	ldr	r1, [pc, #740]	; (406fe4 <_malloc_r+0x358>)
  406cfe:	693c      	ldr	r4, [r7, #16]
  406d00:	f101 0e08 	add.w	lr, r1, #8
  406d04:	4574      	cmp	r4, lr
  406d06:	f000 81b3 	beq.w	407070 <_malloc_r+0x3e4>
  406d0a:	6863      	ldr	r3, [r4, #4]
  406d0c:	f023 0303 	bic.w	r3, r3, #3
  406d10:	1b5a      	subs	r2, r3, r5
  406d12:	2a0f      	cmp	r2, #15
  406d14:	f300 8199 	bgt.w	40704a <_malloc_r+0x3be>
  406d18:	2a00      	cmp	r2, #0
  406d1a:	f8c1 e014 	str.w	lr, [r1, #20]
  406d1e:	f8c1 e010 	str.w	lr, [r1, #16]
  406d22:	f280 809e 	bge.w	406e62 <_malloc_r+0x1d6>
  406d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406d2a:	f080 8167 	bcs.w	406ffc <_malloc_r+0x370>
  406d2e:	08db      	lsrs	r3, r3, #3
  406d30:	f103 0c01 	add.w	ip, r3, #1
  406d34:	2201      	movs	r2, #1
  406d36:	109b      	asrs	r3, r3, #2
  406d38:	fa02 f303 	lsl.w	r3, r2, r3
  406d3c:	684a      	ldr	r2, [r1, #4]
  406d3e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  406d42:	f8c4 8008 	str.w	r8, [r4, #8]
  406d46:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  406d4a:	431a      	orrs	r2, r3
  406d4c:	f1a9 0308 	sub.w	r3, r9, #8
  406d50:	60e3      	str	r3, [r4, #12]
  406d52:	604a      	str	r2, [r1, #4]
  406d54:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  406d58:	f8c8 400c 	str.w	r4, [r8, #12]
  406d5c:	1083      	asrs	r3, r0, #2
  406d5e:	2401      	movs	r4, #1
  406d60:	409c      	lsls	r4, r3
  406d62:	4294      	cmp	r4, r2
  406d64:	f200 808a 	bhi.w	406e7c <_malloc_r+0x1f0>
  406d68:	4214      	tst	r4, r2
  406d6a:	d106      	bne.n	406d7a <_malloc_r+0xee>
  406d6c:	f020 0003 	bic.w	r0, r0, #3
  406d70:	0064      	lsls	r4, r4, #1
  406d72:	4214      	tst	r4, r2
  406d74:	f100 0004 	add.w	r0, r0, #4
  406d78:	d0fa      	beq.n	406d70 <_malloc_r+0xe4>
  406d7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406d7e:	46cc      	mov	ip, r9
  406d80:	4680      	mov	r8, r0
  406d82:	f8dc 100c 	ldr.w	r1, [ip, #12]
  406d86:	458c      	cmp	ip, r1
  406d88:	d107      	bne.n	406d9a <_malloc_r+0x10e>
  406d8a:	e173      	b.n	407074 <_malloc_r+0x3e8>
  406d8c:	2a00      	cmp	r2, #0
  406d8e:	f280 8181 	bge.w	407094 <_malloc_r+0x408>
  406d92:	68c9      	ldr	r1, [r1, #12]
  406d94:	458c      	cmp	ip, r1
  406d96:	f000 816d 	beq.w	407074 <_malloc_r+0x3e8>
  406d9a:	684b      	ldr	r3, [r1, #4]
  406d9c:	f023 0303 	bic.w	r3, r3, #3
  406da0:	1b5a      	subs	r2, r3, r5
  406da2:	2a0f      	cmp	r2, #15
  406da4:	ddf2      	ble.n	406d8c <_malloc_r+0x100>
  406da6:	460c      	mov	r4, r1
  406da8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406dac:	f854 8f08 	ldr.w	r8, [r4, #8]!
  406db0:	194b      	adds	r3, r1, r5
  406db2:	f045 0501 	orr.w	r5, r5, #1
  406db6:	604d      	str	r5, [r1, #4]
  406db8:	f042 0101 	orr.w	r1, r2, #1
  406dbc:	f8c8 c00c 	str.w	ip, [r8, #12]
  406dc0:	4630      	mov	r0, r6
  406dc2:	f8cc 8008 	str.w	r8, [ip, #8]
  406dc6:	617b      	str	r3, [r7, #20]
  406dc8:	613b      	str	r3, [r7, #16]
  406dca:	f8c3 e00c 	str.w	lr, [r3, #12]
  406dce:	f8c3 e008 	str.w	lr, [r3, #8]
  406dd2:	6059      	str	r1, [r3, #4]
  406dd4:	509a      	str	r2, [r3, r2]
  406dd6:	f000 fb95 	bl	407504 <__malloc_unlock>
  406dda:	e01f      	b.n	406e1c <_malloc_r+0x190>
  406ddc:	2910      	cmp	r1, #16
  406dde:	d821      	bhi.n	406e24 <_malloc_r+0x198>
  406de0:	f000 fb8e 	bl	407500 <__malloc_lock>
  406de4:	2510      	movs	r5, #16
  406de6:	2306      	movs	r3, #6
  406de8:	2002      	movs	r0, #2
  406dea:	4f7e      	ldr	r7, [pc, #504]	; (406fe4 <_malloc_r+0x358>)
  406dec:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406df0:	f1a3 0208 	sub.w	r2, r3, #8
  406df4:	685c      	ldr	r4, [r3, #4]
  406df6:	4294      	cmp	r4, r2
  406df8:	f000 8145 	beq.w	407086 <_malloc_r+0x3fa>
  406dfc:	6863      	ldr	r3, [r4, #4]
  406dfe:	68e1      	ldr	r1, [r4, #12]
  406e00:	68a5      	ldr	r5, [r4, #8]
  406e02:	f023 0303 	bic.w	r3, r3, #3
  406e06:	4423      	add	r3, r4
  406e08:	4630      	mov	r0, r6
  406e0a:	685a      	ldr	r2, [r3, #4]
  406e0c:	60e9      	str	r1, [r5, #12]
  406e0e:	f042 0201 	orr.w	r2, r2, #1
  406e12:	608d      	str	r5, [r1, #8]
  406e14:	605a      	str	r2, [r3, #4]
  406e16:	f000 fb75 	bl	407504 <__malloc_unlock>
  406e1a:	3408      	adds	r4, #8
  406e1c:	4620      	mov	r0, r4
  406e1e:	b003      	add	sp, #12
  406e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e24:	2400      	movs	r4, #0
  406e26:	230c      	movs	r3, #12
  406e28:	4620      	mov	r0, r4
  406e2a:	6033      	str	r3, [r6, #0]
  406e2c:	b003      	add	sp, #12
  406e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e32:	2380      	movs	r3, #128	; 0x80
  406e34:	f04f 0e40 	mov.w	lr, #64	; 0x40
  406e38:	203f      	movs	r0, #63	; 0x3f
  406e3a:	e749      	b.n	406cd0 <_malloc_r+0x44>
  406e3c:	4670      	mov	r0, lr
  406e3e:	e75d      	b.n	406cfc <_malloc_r+0x70>
  406e40:	4423      	add	r3, r4
  406e42:	68e1      	ldr	r1, [r4, #12]
  406e44:	685a      	ldr	r2, [r3, #4]
  406e46:	68a5      	ldr	r5, [r4, #8]
  406e48:	f042 0201 	orr.w	r2, r2, #1
  406e4c:	60e9      	str	r1, [r5, #12]
  406e4e:	4630      	mov	r0, r6
  406e50:	608d      	str	r5, [r1, #8]
  406e52:	605a      	str	r2, [r3, #4]
  406e54:	f000 fb56 	bl	407504 <__malloc_unlock>
  406e58:	3408      	adds	r4, #8
  406e5a:	4620      	mov	r0, r4
  406e5c:	b003      	add	sp, #12
  406e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e62:	4423      	add	r3, r4
  406e64:	4630      	mov	r0, r6
  406e66:	685a      	ldr	r2, [r3, #4]
  406e68:	f042 0201 	orr.w	r2, r2, #1
  406e6c:	605a      	str	r2, [r3, #4]
  406e6e:	f000 fb49 	bl	407504 <__malloc_unlock>
  406e72:	3408      	adds	r4, #8
  406e74:	4620      	mov	r0, r4
  406e76:	b003      	add	sp, #12
  406e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e7c:	68bc      	ldr	r4, [r7, #8]
  406e7e:	6863      	ldr	r3, [r4, #4]
  406e80:	f023 0803 	bic.w	r8, r3, #3
  406e84:	45a8      	cmp	r8, r5
  406e86:	d304      	bcc.n	406e92 <_malloc_r+0x206>
  406e88:	ebc5 0308 	rsb	r3, r5, r8
  406e8c:	2b0f      	cmp	r3, #15
  406e8e:	f300 808c 	bgt.w	406faa <_malloc_r+0x31e>
  406e92:	4b55      	ldr	r3, [pc, #340]	; (406fe8 <_malloc_r+0x35c>)
  406e94:	f8df 9160 	ldr.w	r9, [pc, #352]	; 406ff8 <_malloc_r+0x36c>
  406e98:	681a      	ldr	r2, [r3, #0]
  406e9a:	f8d9 3000 	ldr.w	r3, [r9]
  406e9e:	3301      	adds	r3, #1
  406ea0:	442a      	add	r2, r5
  406ea2:	eb04 0a08 	add.w	sl, r4, r8
  406ea6:	f000 8160 	beq.w	40716a <_malloc_r+0x4de>
  406eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  406eae:	320f      	adds	r2, #15
  406eb0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  406eb4:	f022 020f 	bic.w	r2, r2, #15
  406eb8:	4611      	mov	r1, r2
  406eba:	4630      	mov	r0, r6
  406ebc:	9201      	str	r2, [sp, #4]
  406ebe:	f001 f821 	bl	407f04 <_sbrk_r>
  406ec2:	f1b0 3fff 	cmp.w	r0, #4294967295
  406ec6:	4683      	mov	fp, r0
  406ec8:	9a01      	ldr	r2, [sp, #4]
  406eca:	f000 8158 	beq.w	40717e <_malloc_r+0x4f2>
  406ece:	4582      	cmp	sl, r0
  406ed0:	f200 80fc 	bhi.w	4070cc <_malloc_r+0x440>
  406ed4:	4b45      	ldr	r3, [pc, #276]	; (406fec <_malloc_r+0x360>)
  406ed6:	6819      	ldr	r1, [r3, #0]
  406ed8:	45da      	cmp	sl, fp
  406eda:	4411      	add	r1, r2
  406edc:	6019      	str	r1, [r3, #0]
  406ede:	f000 8153 	beq.w	407188 <_malloc_r+0x4fc>
  406ee2:	f8d9 0000 	ldr.w	r0, [r9]
  406ee6:	f8df e110 	ldr.w	lr, [pc, #272]	; 406ff8 <_malloc_r+0x36c>
  406eea:	3001      	adds	r0, #1
  406eec:	bf1b      	ittet	ne
  406eee:	ebca 0a0b 	rsbne	sl, sl, fp
  406ef2:	4451      	addne	r1, sl
  406ef4:	f8ce b000 	streq.w	fp, [lr]
  406ef8:	6019      	strne	r1, [r3, #0]
  406efa:	f01b 0107 	ands.w	r1, fp, #7
  406efe:	f000 8117 	beq.w	407130 <_malloc_r+0x4a4>
  406f02:	f1c1 0008 	rsb	r0, r1, #8
  406f06:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406f0a:	4483      	add	fp, r0
  406f0c:	3108      	adds	r1, #8
  406f0e:	445a      	add	r2, fp
  406f10:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406f14:	ebc2 0901 	rsb	r9, r2, r1
  406f18:	4649      	mov	r1, r9
  406f1a:	4630      	mov	r0, r6
  406f1c:	9301      	str	r3, [sp, #4]
  406f1e:	f000 fff1 	bl	407f04 <_sbrk_r>
  406f22:	1c43      	adds	r3, r0, #1
  406f24:	9b01      	ldr	r3, [sp, #4]
  406f26:	f000 813f 	beq.w	4071a8 <_malloc_r+0x51c>
  406f2a:	ebcb 0200 	rsb	r2, fp, r0
  406f2e:	444a      	add	r2, r9
  406f30:	f042 0201 	orr.w	r2, r2, #1
  406f34:	6819      	ldr	r1, [r3, #0]
  406f36:	f8c7 b008 	str.w	fp, [r7, #8]
  406f3a:	4449      	add	r1, r9
  406f3c:	42bc      	cmp	r4, r7
  406f3e:	f8cb 2004 	str.w	r2, [fp, #4]
  406f42:	6019      	str	r1, [r3, #0]
  406f44:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406fec <_malloc_r+0x360>
  406f48:	d016      	beq.n	406f78 <_malloc_r+0x2ec>
  406f4a:	f1b8 0f0f 	cmp.w	r8, #15
  406f4e:	f240 80fd 	bls.w	40714c <_malloc_r+0x4c0>
  406f52:	6862      	ldr	r2, [r4, #4]
  406f54:	f1a8 030c 	sub.w	r3, r8, #12
  406f58:	f023 0307 	bic.w	r3, r3, #7
  406f5c:	18e0      	adds	r0, r4, r3
  406f5e:	f002 0201 	and.w	r2, r2, #1
  406f62:	f04f 0e05 	mov.w	lr, #5
  406f66:	431a      	orrs	r2, r3
  406f68:	2b0f      	cmp	r3, #15
  406f6a:	6062      	str	r2, [r4, #4]
  406f6c:	f8c0 e004 	str.w	lr, [r0, #4]
  406f70:	f8c0 e008 	str.w	lr, [r0, #8]
  406f74:	f200 811c 	bhi.w	4071b0 <_malloc_r+0x524>
  406f78:	4b1d      	ldr	r3, [pc, #116]	; (406ff0 <_malloc_r+0x364>)
  406f7a:	68bc      	ldr	r4, [r7, #8]
  406f7c:	681a      	ldr	r2, [r3, #0]
  406f7e:	4291      	cmp	r1, r2
  406f80:	bf88      	it	hi
  406f82:	6019      	strhi	r1, [r3, #0]
  406f84:	4b1b      	ldr	r3, [pc, #108]	; (406ff4 <_malloc_r+0x368>)
  406f86:	681a      	ldr	r2, [r3, #0]
  406f88:	4291      	cmp	r1, r2
  406f8a:	6862      	ldr	r2, [r4, #4]
  406f8c:	bf88      	it	hi
  406f8e:	6019      	strhi	r1, [r3, #0]
  406f90:	f022 0203 	bic.w	r2, r2, #3
  406f94:	4295      	cmp	r5, r2
  406f96:	eba2 0305 	sub.w	r3, r2, r5
  406f9a:	d801      	bhi.n	406fa0 <_malloc_r+0x314>
  406f9c:	2b0f      	cmp	r3, #15
  406f9e:	dc04      	bgt.n	406faa <_malloc_r+0x31e>
  406fa0:	4630      	mov	r0, r6
  406fa2:	f000 faaf 	bl	407504 <__malloc_unlock>
  406fa6:	2400      	movs	r4, #0
  406fa8:	e738      	b.n	406e1c <_malloc_r+0x190>
  406faa:	1962      	adds	r2, r4, r5
  406fac:	f043 0301 	orr.w	r3, r3, #1
  406fb0:	f045 0501 	orr.w	r5, r5, #1
  406fb4:	6065      	str	r5, [r4, #4]
  406fb6:	4630      	mov	r0, r6
  406fb8:	60ba      	str	r2, [r7, #8]
  406fba:	6053      	str	r3, [r2, #4]
  406fbc:	f000 faa2 	bl	407504 <__malloc_unlock>
  406fc0:	3408      	adds	r4, #8
  406fc2:	4620      	mov	r0, r4
  406fc4:	b003      	add	sp, #12
  406fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fca:	2b14      	cmp	r3, #20
  406fcc:	d971      	bls.n	4070b2 <_malloc_r+0x426>
  406fce:	2b54      	cmp	r3, #84	; 0x54
  406fd0:	f200 80a4 	bhi.w	40711c <_malloc_r+0x490>
  406fd4:	0b28      	lsrs	r0, r5, #12
  406fd6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  406fda:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406fde:	306e      	adds	r0, #110	; 0x6e
  406fe0:	e676      	b.n	406cd0 <_malloc_r+0x44>
  406fe2:	bf00      	nop
  406fe4:	20000474 	.word	0x20000474
  406fe8:	2000d664 	.word	0x2000d664
  406fec:	2000d668 	.word	0x2000d668
  406ff0:	2000d660 	.word	0x2000d660
  406ff4:	2000d65c 	.word	0x2000d65c
  406ff8:	20000880 	.word	0x20000880
  406ffc:	0a5a      	lsrs	r2, r3, #9
  406ffe:	2a04      	cmp	r2, #4
  407000:	d95e      	bls.n	4070c0 <_malloc_r+0x434>
  407002:	2a14      	cmp	r2, #20
  407004:	f200 80b3 	bhi.w	40716e <_malloc_r+0x4e2>
  407008:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40700c:	0049      	lsls	r1, r1, #1
  40700e:	325b      	adds	r2, #91	; 0x5b
  407010:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  407014:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  407018:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4071f8 <_malloc_r+0x56c>
  40701c:	f1ac 0c08 	sub.w	ip, ip, #8
  407020:	458c      	cmp	ip, r1
  407022:	f000 8088 	beq.w	407136 <_malloc_r+0x4aa>
  407026:	684a      	ldr	r2, [r1, #4]
  407028:	f022 0203 	bic.w	r2, r2, #3
  40702c:	4293      	cmp	r3, r2
  40702e:	d202      	bcs.n	407036 <_malloc_r+0x3aa>
  407030:	6889      	ldr	r1, [r1, #8]
  407032:	458c      	cmp	ip, r1
  407034:	d1f7      	bne.n	407026 <_malloc_r+0x39a>
  407036:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  40703a:	687a      	ldr	r2, [r7, #4]
  40703c:	f8c4 c00c 	str.w	ip, [r4, #12]
  407040:	60a1      	str	r1, [r4, #8]
  407042:	f8cc 4008 	str.w	r4, [ip, #8]
  407046:	60cc      	str	r4, [r1, #12]
  407048:	e688      	b.n	406d5c <_malloc_r+0xd0>
  40704a:	1963      	adds	r3, r4, r5
  40704c:	f042 0701 	orr.w	r7, r2, #1
  407050:	f045 0501 	orr.w	r5, r5, #1
  407054:	6065      	str	r5, [r4, #4]
  407056:	4630      	mov	r0, r6
  407058:	614b      	str	r3, [r1, #20]
  40705a:	610b      	str	r3, [r1, #16]
  40705c:	f8c3 e00c 	str.w	lr, [r3, #12]
  407060:	f8c3 e008 	str.w	lr, [r3, #8]
  407064:	605f      	str	r7, [r3, #4]
  407066:	509a      	str	r2, [r3, r2]
  407068:	3408      	adds	r4, #8
  40706a:	f000 fa4b 	bl	407504 <__malloc_unlock>
  40706e:	e6d5      	b.n	406e1c <_malloc_r+0x190>
  407070:	684a      	ldr	r2, [r1, #4]
  407072:	e673      	b.n	406d5c <_malloc_r+0xd0>
  407074:	f108 0801 	add.w	r8, r8, #1
  407078:	f018 0f03 	tst.w	r8, #3
  40707c:	f10c 0c08 	add.w	ip, ip, #8
  407080:	f47f ae7f 	bne.w	406d82 <_malloc_r+0xf6>
  407084:	e030      	b.n	4070e8 <_malloc_r+0x45c>
  407086:	68dc      	ldr	r4, [r3, #12]
  407088:	42a3      	cmp	r3, r4
  40708a:	bf08      	it	eq
  40708c:	3002      	addeq	r0, #2
  40708e:	f43f ae35 	beq.w	406cfc <_malloc_r+0x70>
  407092:	e6b3      	b.n	406dfc <_malloc_r+0x170>
  407094:	440b      	add	r3, r1
  407096:	460c      	mov	r4, r1
  407098:	685a      	ldr	r2, [r3, #4]
  40709a:	68c9      	ldr	r1, [r1, #12]
  40709c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4070a0:	f042 0201 	orr.w	r2, r2, #1
  4070a4:	605a      	str	r2, [r3, #4]
  4070a6:	4630      	mov	r0, r6
  4070a8:	60e9      	str	r1, [r5, #12]
  4070aa:	608d      	str	r5, [r1, #8]
  4070ac:	f000 fa2a 	bl	407504 <__malloc_unlock>
  4070b0:	e6b4      	b.n	406e1c <_malloc_r+0x190>
  4070b2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4070b6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4070ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4070be:	e607      	b.n	406cd0 <_malloc_r+0x44>
  4070c0:	099a      	lsrs	r2, r3, #6
  4070c2:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4070c6:	0049      	lsls	r1, r1, #1
  4070c8:	3238      	adds	r2, #56	; 0x38
  4070ca:	e7a1      	b.n	407010 <_malloc_r+0x384>
  4070cc:	42bc      	cmp	r4, r7
  4070ce:	4b4a      	ldr	r3, [pc, #296]	; (4071f8 <_malloc_r+0x56c>)
  4070d0:	f43f af00 	beq.w	406ed4 <_malloc_r+0x248>
  4070d4:	689c      	ldr	r4, [r3, #8]
  4070d6:	6862      	ldr	r2, [r4, #4]
  4070d8:	f022 0203 	bic.w	r2, r2, #3
  4070dc:	e75a      	b.n	406f94 <_malloc_r+0x308>
  4070de:	f859 3908 	ldr.w	r3, [r9], #-8
  4070e2:	4599      	cmp	r9, r3
  4070e4:	f040 8082 	bne.w	4071ec <_malloc_r+0x560>
  4070e8:	f010 0f03 	tst.w	r0, #3
  4070ec:	f100 30ff 	add.w	r0, r0, #4294967295
  4070f0:	d1f5      	bne.n	4070de <_malloc_r+0x452>
  4070f2:	687b      	ldr	r3, [r7, #4]
  4070f4:	ea23 0304 	bic.w	r3, r3, r4
  4070f8:	607b      	str	r3, [r7, #4]
  4070fa:	0064      	lsls	r4, r4, #1
  4070fc:	429c      	cmp	r4, r3
  4070fe:	f63f aebd 	bhi.w	406e7c <_malloc_r+0x1f0>
  407102:	2c00      	cmp	r4, #0
  407104:	f43f aeba 	beq.w	406e7c <_malloc_r+0x1f0>
  407108:	421c      	tst	r4, r3
  40710a:	4640      	mov	r0, r8
  40710c:	f47f ae35 	bne.w	406d7a <_malloc_r+0xee>
  407110:	0064      	lsls	r4, r4, #1
  407112:	421c      	tst	r4, r3
  407114:	f100 0004 	add.w	r0, r0, #4
  407118:	d0fa      	beq.n	407110 <_malloc_r+0x484>
  40711a:	e62e      	b.n	406d7a <_malloc_r+0xee>
  40711c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407120:	d818      	bhi.n	407154 <_malloc_r+0x4c8>
  407122:	0be8      	lsrs	r0, r5, #15
  407124:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  407128:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40712c:	3077      	adds	r0, #119	; 0x77
  40712e:	e5cf      	b.n	406cd0 <_malloc_r+0x44>
  407130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407134:	e6eb      	b.n	406f0e <_malloc_r+0x282>
  407136:	2101      	movs	r1, #1
  407138:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40713c:	1092      	asrs	r2, r2, #2
  40713e:	fa01 f202 	lsl.w	r2, r1, r2
  407142:	431a      	orrs	r2, r3
  407144:	f8c8 2004 	str.w	r2, [r8, #4]
  407148:	4661      	mov	r1, ip
  40714a:	e777      	b.n	40703c <_malloc_r+0x3b0>
  40714c:	2301      	movs	r3, #1
  40714e:	f8cb 3004 	str.w	r3, [fp, #4]
  407152:	e725      	b.n	406fa0 <_malloc_r+0x314>
  407154:	f240 5254 	movw	r2, #1364	; 0x554
  407158:	4293      	cmp	r3, r2
  40715a:	d820      	bhi.n	40719e <_malloc_r+0x512>
  40715c:	0ca8      	lsrs	r0, r5, #18
  40715e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  407162:	ea4f 034e 	mov.w	r3, lr, lsl #1
  407166:	307c      	adds	r0, #124	; 0x7c
  407168:	e5b2      	b.n	406cd0 <_malloc_r+0x44>
  40716a:	3210      	adds	r2, #16
  40716c:	e6a4      	b.n	406eb8 <_malloc_r+0x22c>
  40716e:	2a54      	cmp	r2, #84	; 0x54
  407170:	d826      	bhi.n	4071c0 <_malloc_r+0x534>
  407172:	0b1a      	lsrs	r2, r3, #12
  407174:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407178:	0049      	lsls	r1, r1, #1
  40717a:	326e      	adds	r2, #110	; 0x6e
  40717c:	e748      	b.n	407010 <_malloc_r+0x384>
  40717e:	68bc      	ldr	r4, [r7, #8]
  407180:	6862      	ldr	r2, [r4, #4]
  407182:	f022 0203 	bic.w	r2, r2, #3
  407186:	e705      	b.n	406f94 <_malloc_r+0x308>
  407188:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40718c:	2800      	cmp	r0, #0
  40718e:	f47f aea8 	bne.w	406ee2 <_malloc_r+0x256>
  407192:	4442      	add	r2, r8
  407194:	68bb      	ldr	r3, [r7, #8]
  407196:	f042 0201 	orr.w	r2, r2, #1
  40719a:	605a      	str	r2, [r3, #4]
  40719c:	e6ec      	b.n	406f78 <_malloc_r+0x2ec>
  40719e:	23fe      	movs	r3, #254	; 0xfe
  4071a0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4071a4:	207e      	movs	r0, #126	; 0x7e
  4071a6:	e593      	b.n	406cd0 <_malloc_r+0x44>
  4071a8:	2201      	movs	r2, #1
  4071aa:	f04f 0900 	mov.w	r9, #0
  4071ae:	e6c1      	b.n	406f34 <_malloc_r+0x2a8>
  4071b0:	f104 0108 	add.w	r1, r4, #8
  4071b4:	4630      	mov	r0, r6
  4071b6:	f7ff fc7d 	bl	406ab4 <_free_r>
  4071ba:	f8d9 1000 	ldr.w	r1, [r9]
  4071be:	e6db      	b.n	406f78 <_malloc_r+0x2ec>
  4071c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4071c4:	d805      	bhi.n	4071d2 <_malloc_r+0x546>
  4071c6:	0bda      	lsrs	r2, r3, #15
  4071c8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4071cc:	0049      	lsls	r1, r1, #1
  4071ce:	3277      	adds	r2, #119	; 0x77
  4071d0:	e71e      	b.n	407010 <_malloc_r+0x384>
  4071d2:	f240 5154 	movw	r1, #1364	; 0x554
  4071d6:	428a      	cmp	r2, r1
  4071d8:	d805      	bhi.n	4071e6 <_malloc_r+0x55a>
  4071da:	0c9a      	lsrs	r2, r3, #18
  4071dc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4071e0:	0049      	lsls	r1, r1, #1
  4071e2:	327c      	adds	r2, #124	; 0x7c
  4071e4:	e714      	b.n	407010 <_malloc_r+0x384>
  4071e6:	21fe      	movs	r1, #254	; 0xfe
  4071e8:	227e      	movs	r2, #126	; 0x7e
  4071ea:	e711      	b.n	407010 <_malloc_r+0x384>
  4071ec:	687b      	ldr	r3, [r7, #4]
  4071ee:	e784      	b.n	4070fa <_malloc_r+0x46e>
  4071f0:	08e8      	lsrs	r0, r5, #3
  4071f2:	1c43      	adds	r3, r0, #1
  4071f4:	005b      	lsls	r3, r3, #1
  4071f6:	e5f8      	b.n	406dea <_malloc_r+0x15e>
  4071f8:	20000474 	.word	0x20000474
  4071fc:	00000000 	.word	0x00000000

00407200 <memchr>:
  407200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407204:	2a10      	cmp	r2, #16
  407206:	db2b      	blt.n	407260 <memchr+0x60>
  407208:	f010 0f07 	tst.w	r0, #7
  40720c:	d008      	beq.n	407220 <memchr+0x20>
  40720e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407212:	3a01      	subs	r2, #1
  407214:	428b      	cmp	r3, r1
  407216:	d02d      	beq.n	407274 <memchr+0x74>
  407218:	f010 0f07 	tst.w	r0, #7
  40721c:	b342      	cbz	r2, 407270 <memchr+0x70>
  40721e:	d1f6      	bne.n	40720e <memchr+0xe>
  407220:	b4f0      	push	{r4, r5, r6, r7}
  407222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40722a:	f022 0407 	bic.w	r4, r2, #7
  40722e:	f07f 0700 	mvns.w	r7, #0
  407232:	2300      	movs	r3, #0
  407234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407238:	3c08      	subs	r4, #8
  40723a:	ea85 0501 	eor.w	r5, r5, r1
  40723e:	ea86 0601 	eor.w	r6, r6, r1
  407242:	fa85 f547 	uadd8	r5, r5, r7
  407246:	faa3 f587 	sel	r5, r3, r7
  40724a:	fa86 f647 	uadd8	r6, r6, r7
  40724e:	faa5 f687 	sel	r6, r5, r7
  407252:	b98e      	cbnz	r6, 407278 <memchr+0x78>
  407254:	d1ee      	bne.n	407234 <memchr+0x34>
  407256:	bcf0      	pop	{r4, r5, r6, r7}
  407258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40725c:	f002 0207 	and.w	r2, r2, #7
  407260:	b132      	cbz	r2, 407270 <memchr+0x70>
  407262:	f810 3b01 	ldrb.w	r3, [r0], #1
  407266:	3a01      	subs	r2, #1
  407268:	ea83 0301 	eor.w	r3, r3, r1
  40726c:	b113      	cbz	r3, 407274 <memchr+0x74>
  40726e:	d1f8      	bne.n	407262 <memchr+0x62>
  407270:	2000      	movs	r0, #0
  407272:	4770      	bx	lr
  407274:	3801      	subs	r0, #1
  407276:	4770      	bx	lr
  407278:	2d00      	cmp	r5, #0
  40727a:	bf06      	itte	eq
  40727c:	4635      	moveq	r5, r6
  40727e:	3803      	subeq	r0, #3
  407280:	3807      	subne	r0, #7
  407282:	f015 0f01 	tst.w	r5, #1
  407286:	d107      	bne.n	407298 <memchr+0x98>
  407288:	3001      	adds	r0, #1
  40728a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40728e:	bf02      	ittt	eq
  407290:	3001      	addeq	r0, #1
  407292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407296:	3001      	addeq	r0, #1
  407298:	bcf0      	pop	{r4, r5, r6, r7}
  40729a:	3801      	subs	r0, #1
  40729c:	4770      	bx	lr
  40729e:	bf00      	nop

004072a0 <memcmp>:
  4072a0:	2a03      	cmp	r2, #3
  4072a2:	b470      	push	{r4, r5, r6}
  4072a4:	d926      	bls.n	4072f4 <memcmp+0x54>
  4072a6:	ea40 0301 	orr.w	r3, r0, r1
  4072aa:	079b      	lsls	r3, r3, #30
  4072ac:	d011      	beq.n	4072d2 <memcmp+0x32>
  4072ae:	7804      	ldrb	r4, [r0, #0]
  4072b0:	780d      	ldrb	r5, [r1, #0]
  4072b2:	42ac      	cmp	r4, r5
  4072b4:	d122      	bne.n	4072fc <memcmp+0x5c>
  4072b6:	4402      	add	r2, r0
  4072b8:	1c43      	adds	r3, r0, #1
  4072ba:	e005      	b.n	4072c8 <memcmp+0x28>
  4072bc:	f813 4b01 	ldrb.w	r4, [r3], #1
  4072c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  4072c4:	42ac      	cmp	r4, r5
  4072c6:	d119      	bne.n	4072fc <memcmp+0x5c>
  4072c8:	4293      	cmp	r3, r2
  4072ca:	d1f7      	bne.n	4072bc <memcmp+0x1c>
  4072cc:	2000      	movs	r0, #0
  4072ce:	bc70      	pop	{r4, r5, r6}
  4072d0:	4770      	bx	lr
  4072d2:	460c      	mov	r4, r1
  4072d4:	4603      	mov	r3, r0
  4072d6:	681e      	ldr	r6, [r3, #0]
  4072d8:	6825      	ldr	r5, [r4, #0]
  4072da:	42ae      	cmp	r6, r5
  4072dc:	4618      	mov	r0, r3
  4072de:	4621      	mov	r1, r4
  4072e0:	f103 0304 	add.w	r3, r3, #4
  4072e4:	f104 0404 	add.w	r4, r4, #4
  4072e8:	d1e1      	bne.n	4072ae <memcmp+0xe>
  4072ea:	3a04      	subs	r2, #4
  4072ec:	2a03      	cmp	r2, #3
  4072ee:	4618      	mov	r0, r3
  4072f0:	4621      	mov	r1, r4
  4072f2:	d8f0      	bhi.n	4072d6 <memcmp+0x36>
  4072f4:	2a00      	cmp	r2, #0
  4072f6:	d1da      	bne.n	4072ae <memcmp+0xe>
  4072f8:	4610      	mov	r0, r2
  4072fa:	e7e8      	b.n	4072ce <memcmp+0x2e>
  4072fc:	1b60      	subs	r0, r4, r5
  4072fe:	bc70      	pop	{r4, r5, r6}
  407300:	4770      	bx	lr
  407302:	bf00      	nop

00407304 <memcpy>:
  407304:	4684      	mov	ip, r0
  407306:	ea41 0300 	orr.w	r3, r1, r0
  40730a:	f013 0303 	ands.w	r3, r3, #3
  40730e:	d16d      	bne.n	4073ec <memcpy+0xe8>
  407310:	3a40      	subs	r2, #64	; 0x40
  407312:	d341      	bcc.n	407398 <memcpy+0x94>
  407314:	f851 3b04 	ldr.w	r3, [r1], #4
  407318:	f840 3b04 	str.w	r3, [r0], #4
  40731c:	f851 3b04 	ldr.w	r3, [r1], #4
  407320:	f840 3b04 	str.w	r3, [r0], #4
  407324:	f851 3b04 	ldr.w	r3, [r1], #4
  407328:	f840 3b04 	str.w	r3, [r0], #4
  40732c:	f851 3b04 	ldr.w	r3, [r1], #4
  407330:	f840 3b04 	str.w	r3, [r0], #4
  407334:	f851 3b04 	ldr.w	r3, [r1], #4
  407338:	f840 3b04 	str.w	r3, [r0], #4
  40733c:	f851 3b04 	ldr.w	r3, [r1], #4
  407340:	f840 3b04 	str.w	r3, [r0], #4
  407344:	f851 3b04 	ldr.w	r3, [r1], #4
  407348:	f840 3b04 	str.w	r3, [r0], #4
  40734c:	f851 3b04 	ldr.w	r3, [r1], #4
  407350:	f840 3b04 	str.w	r3, [r0], #4
  407354:	f851 3b04 	ldr.w	r3, [r1], #4
  407358:	f840 3b04 	str.w	r3, [r0], #4
  40735c:	f851 3b04 	ldr.w	r3, [r1], #4
  407360:	f840 3b04 	str.w	r3, [r0], #4
  407364:	f851 3b04 	ldr.w	r3, [r1], #4
  407368:	f840 3b04 	str.w	r3, [r0], #4
  40736c:	f851 3b04 	ldr.w	r3, [r1], #4
  407370:	f840 3b04 	str.w	r3, [r0], #4
  407374:	f851 3b04 	ldr.w	r3, [r1], #4
  407378:	f840 3b04 	str.w	r3, [r0], #4
  40737c:	f851 3b04 	ldr.w	r3, [r1], #4
  407380:	f840 3b04 	str.w	r3, [r0], #4
  407384:	f851 3b04 	ldr.w	r3, [r1], #4
  407388:	f840 3b04 	str.w	r3, [r0], #4
  40738c:	f851 3b04 	ldr.w	r3, [r1], #4
  407390:	f840 3b04 	str.w	r3, [r0], #4
  407394:	3a40      	subs	r2, #64	; 0x40
  407396:	d2bd      	bcs.n	407314 <memcpy+0x10>
  407398:	3230      	adds	r2, #48	; 0x30
  40739a:	d311      	bcc.n	4073c0 <memcpy+0xbc>
  40739c:	f851 3b04 	ldr.w	r3, [r1], #4
  4073a0:	f840 3b04 	str.w	r3, [r0], #4
  4073a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073a8:	f840 3b04 	str.w	r3, [r0], #4
  4073ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b0:	f840 3b04 	str.w	r3, [r0], #4
  4073b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073b8:	f840 3b04 	str.w	r3, [r0], #4
  4073bc:	3a10      	subs	r2, #16
  4073be:	d2ed      	bcs.n	40739c <memcpy+0x98>
  4073c0:	320c      	adds	r2, #12
  4073c2:	d305      	bcc.n	4073d0 <memcpy+0xcc>
  4073c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4073c8:	f840 3b04 	str.w	r3, [r0], #4
  4073cc:	3a04      	subs	r2, #4
  4073ce:	d2f9      	bcs.n	4073c4 <memcpy+0xc0>
  4073d0:	3204      	adds	r2, #4
  4073d2:	d008      	beq.n	4073e6 <memcpy+0xe2>
  4073d4:	07d2      	lsls	r2, r2, #31
  4073d6:	bf1c      	itt	ne
  4073d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4073dc:	f800 3b01 	strbne.w	r3, [r0], #1
  4073e0:	d301      	bcc.n	4073e6 <memcpy+0xe2>
  4073e2:	880b      	ldrh	r3, [r1, #0]
  4073e4:	8003      	strh	r3, [r0, #0]
  4073e6:	4660      	mov	r0, ip
  4073e8:	4770      	bx	lr
  4073ea:	bf00      	nop
  4073ec:	2a08      	cmp	r2, #8
  4073ee:	d313      	bcc.n	407418 <memcpy+0x114>
  4073f0:	078b      	lsls	r3, r1, #30
  4073f2:	d08d      	beq.n	407310 <memcpy+0xc>
  4073f4:	f010 0303 	ands.w	r3, r0, #3
  4073f8:	d08a      	beq.n	407310 <memcpy+0xc>
  4073fa:	f1c3 0304 	rsb	r3, r3, #4
  4073fe:	1ad2      	subs	r2, r2, r3
  407400:	07db      	lsls	r3, r3, #31
  407402:	bf1c      	itt	ne
  407404:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407408:	f800 3b01 	strbne.w	r3, [r0], #1
  40740c:	d380      	bcc.n	407310 <memcpy+0xc>
  40740e:	f831 3b02 	ldrh.w	r3, [r1], #2
  407412:	f820 3b02 	strh.w	r3, [r0], #2
  407416:	e77b      	b.n	407310 <memcpy+0xc>
  407418:	3a04      	subs	r2, #4
  40741a:	d3d9      	bcc.n	4073d0 <memcpy+0xcc>
  40741c:	3a01      	subs	r2, #1
  40741e:	f811 3b01 	ldrb.w	r3, [r1], #1
  407422:	f800 3b01 	strb.w	r3, [r0], #1
  407426:	d2f9      	bcs.n	40741c <memcpy+0x118>
  407428:	780b      	ldrb	r3, [r1, #0]
  40742a:	7003      	strb	r3, [r0, #0]
  40742c:	784b      	ldrb	r3, [r1, #1]
  40742e:	7043      	strb	r3, [r0, #1]
  407430:	788b      	ldrb	r3, [r1, #2]
  407432:	7083      	strb	r3, [r0, #2]
  407434:	4660      	mov	r0, ip
  407436:	4770      	bx	lr

00407438 <memmove>:
  407438:	4288      	cmp	r0, r1
  40743a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40743c:	d90d      	bls.n	40745a <memmove+0x22>
  40743e:	188b      	adds	r3, r1, r2
  407440:	4298      	cmp	r0, r3
  407442:	d20a      	bcs.n	40745a <memmove+0x22>
  407444:	1881      	adds	r1, r0, r2
  407446:	2a00      	cmp	r2, #0
  407448:	d051      	beq.n	4074ee <memmove+0xb6>
  40744a:	1a9a      	subs	r2, r3, r2
  40744c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407450:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407454:	4293      	cmp	r3, r2
  407456:	d1f9      	bne.n	40744c <memmove+0x14>
  407458:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40745a:	2a0f      	cmp	r2, #15
  40745c:	d948      	bls.n	4074f0 <memmove+0xb8>
  40745e:	ea41 0300 	orr.w	r3, r1, r0
  407462:	079b      	lsls	r3, r3, #30
  407464:	d146      	bne.n	4074f4 <memmove+0xbc>
  407466:	f100 0410 	add.w	r4, r0, #16
  40746a:	f101 0310 	add.w	r3, r1, #16
  40746e:	4615      	mov	r5, r2
  407470:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407474:	f844 6c10 	str.w	r6, [r4, #-16]
  407478:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40747c:	f844 6c0c 	str.w	r6, [r4, #-12]
  407480:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407484:	f844 6c08 	str.w	r6, [r4, #-8]
  407488:	3d10      	subs	r5, #16
  40748a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40748e:	f844 6c04 	str.w	r6, [r4, #-4]
  407492:	2d0f      	cmp	r5, #15
  407494:	f103 0310 	add.w	r3, r3, #16
  407498:	f104 0410 	add.w	r4, r4, #16
  40749c:	d8e8      	bhi.n	407470 <memmove+0x38>
  40749e:	f1a2 0310 	sub.w	r3, r2, #16
  4074a2:	f023 030f 	bic.w	r3, r3, #15
  4074a6:	f002 0e0f 	and.w	lr, r2, #15
  4074aa:	3310      	adds	r3, #16
  4074ac:	f1be 0f03 	cmp.w	lr, #3
  4074b0:	4419      	add	r1, r3
  4074b2:	4403      	add	r3, r0
  4074b4:	d921      	bls.n	4074fa <memmove+0xc2>
  4074b6:	1f1e      	subs	r6, r3, #4
  4074b8:	460d      	mov	r5, r1
  4074ba:	4674      	mov	r4, lr
  4074bc:	3c04      	subs	r4, #4
  4074be:	f855 7b04 	ldr.w	r7, [r5], #4
  4074c2:	f846 7f04 	str.w	r7, [r6, #4]!
  4074c6:	2c03      	cmp	r4, #3
  4074c8:	d8f8      	bhi.n	4074bc <memmove+0x84>
  4074ca:	f1ae 0404 	sub.w	r4, lr, #4
  4074ce:	f024 0403 	bic.w	r4, r4, #3
  4074d2:	3404      	adds	r4, #4
  4074d4:	4423      	add	r3, r4
  4074d6:	4421      	add	r1, r4
  4074d8:	f002 0203 	and.w	r2, r2, #3
  4074dc:	b162      	cbz	r2, 4074f8 <memmove+0xc0>
  4074de:	3b01      	subs	r3, #1
  4074e0:	440a      	add	r2, r1
  4074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4074ea:	428a      	cmp	r2, r1
  4074ec:	d1f9      	bne.n	4074e2 <memmove+0xaa>
  4074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074f0:	4603      	mov	r3, r0
  4074f2:	e7f3      	b.n	4074dc <memmove+0xa4>
  4074f4:	4603      	mov	r3, r0
  4074f6:	e7f2      	b.n	4074de <memmove+0xa6>
  4074f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074fa:	4672      	mov	r2, lr
  4074fc:	e7ee      	b.n	4074dc <memmove+0xa4>
  4074fe:	bf00      	nop

00407500 <__malloc_lock>:
  407500:	4770      	bx	lr
  407502:	bf00      	nop

00407504 <__malloc_unlock>:
  407504:	4770      	bx	lr
  407506:	bf00      	nop

00407508 <_Balloc>:
  407508:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40750a:	b570      	push	{r4, r5, r6, lr}
  40750c:	4605      	mov	r5, r0
  40750e:	460c      	mov	r4, r1
  407510:	b14b      	cbz	r3, 407526 <_Balloc+0x1e>
  407512:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407516:	b180      	cbz	r0, 40753a <_Balloc+0x32>
  407518:	6802      	ldr	r2, [r0, #0]
  40751a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40751e:	2300      	movs	r3, #0
  407520:	6103      	str	r3, [r0, #16]
  407522:	60c3      	str	r3, [r0, #12]
  407524:	bd70      	pop	{r4, r5, r6, pc}
  407526:	2221      	movs	r2, #33	; 0x21
  407528:	2104      	movs	r1, #4
  40752a:	f000 fe37 	bl	40819c <_calloc_r>
  40752e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407530:	4603      	mov	r3, r0
  407532:	2800      	cmp	r0, #0
  407534:	d1ed      	bne.n	407512 <_Balloc+0xa>
  407536:	2000      	movs	r0, #0
  407538:	bd70      	pop	{r4, r5, r6, pc}
  40753a:	2101      	movs	r1, #1
  40753c:	fa01 f604 	lsl.w	r6, r1, r4
  407540:	1d72      	adds	r2, r6, #5
  407542:	4628      	mov	r0, r5
  407544:	0092      	lsls	r2, r2, #2
  407546:	f000 fe29 	bl	40819c <_calloc_r>
  40754a:	2800      	cmp	r0, #0
  40754c:	d0f3      	beq.n	407536 <_Balloc+0x2e>
  40754e:	6044      	str	r4, [r0, #4]
  407550:	6086      	str	r6, [r0, #8]
  407552:	e7e4      	b.n	40751e <_Balloc+0x16>

00407554 <_Bfree>:
  407554:	b131      	cbz	r1, 407564 <_Bfree+0x10>
  407556:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407558:	684a      	ldr	r2, [r1, #4]
  40755a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40755e:	6008      	str	r0, [r1, #0]
  407560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407564:	4770      	bx	lr
  407566:	bf00      	nop

00407568 <__multadd>:
  407568:	b5f0      	push	{r4, r5, r6, r7, lr}
  40756a:	690c      	ldr	r4, [r1, #16]
  40756c:	b083      	sub	sp, #12
  40756e:	460d      	mov	r5, r1
  407570:	4606      	mov	r6, r0
  407572:	f101 0e14 	add.w	lr, r1, #20
  407576:	2700      	movs	r7, #0
  407578:	f8de 0000 	ldr.w	r0, [lr]
  40757c:	b281      	uxth	r1, r0
  40757e:	fb02 3101 	mla	r1, r2, r1, r3
  407582:	0c0b      	lsrs	r3, r1, #16
  407584:	0c00      	lsrs	r0, r0, #16
  407586:	fb02 3300 	mla	r3, r2, r0, r3
  40758a:	b289      	uxth	r1, r1
  40758c:	3701      	adds	r7, #1
  40758e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  407592:	42bc      	cmp	r4, r7
  407594:	f84e 1b04 	str.w	r1, [lr], #4
  407598:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40759c:	dcec      	bgt.n	407578 <__multadd+0x10>
  40759e:	b13b      	cbz	r3, 4075b0 <__multadd+0x48>
  4075a0:	68aa      	ldr	r2, [r5, #8]
  4075a2:	4294      	cmp	r4, r2
  4075a4:	da07      	bge.n	4075b6 <__multadd+0x4e>
  4075a6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4075aa:	3401      	adds	r4, #1
  4075ac:	6153      	str	r3, [r2, #20]
  4075ae:	612c      	str	r4, [r5, #16]
  4075b0:	4628      	mov	r0, r5
  4075b2:	b003      	add	sp, #12
  4075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075b6:	6869      	ldr	r1, [r5, #4]
  4075b8:	9301      	str	r3, [sp, #4]
  4075ba:	3101      	adds	r1, #1
  4075bc:	4630      	mov	r0, r6
  4075be:	f7ff ffa3 	bl	407508 <_Balloc>
  4075c2:	692a      	ldr	r2, [r5, #16]
  4075c4:	3202      	adds	r2, #2
  4075c6:	f105 010c 	add.w	r1, r5, #12
  4075ca:	4607      	mov	r7, r0
  4075cc:	0092      	lsls	r2, r2, #2
  4075ce:	300c      	adds	r0, #12
  4075d0:	f7ff fe98 	bl	407304 <memcpy>
  4075d4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4075d6:	6869      	ldr	r1, [r5, #4]
  4075d8:	9b01      	ldr	r3, [sp, #4]
  4075da:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4075de:	6028      	str	r0, [r5, #0]
  4075e0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4075e4:	463d      	mov	r5, r7
  4075e6:	e7de      	b.n	4075a6 <__multadd+0x3e>

004075e8 <__hi0bits>:
  4075e8:	0c03      	lsrs	r3, r0, #16
  4075ea:	041b      	lsls	r3, r3, #16
  4075ec:	b9b3      	cbnz	r3, 40761c <__hi0bits+0x34>
  4075ee:	0400      	lsls	r0, r0, #16
  4075f0:	2310      	movs	r3, #16
  4075f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4075f6:	bf04      	itt	eq
  4075f8:	0200      	lsleq	r0, r0, #8
  4075fa:	3308      	addeq	r3, #8
  4075fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407600:	bf04      	itt	eq
  407602:	0100      	lsleq	r0, r0, #4
  407604:	3304      	addeq	r3, #4
  407606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40760a:	bf04      	itt	eq
  40760c:	0080      	lsleq	r0, r0, #2
  40760e:	3302      	addeq	r3, #2
  407610:	2800      	cmp	r0, #0
  407612:	db07      	blt.n	407624 <__hi0bits+0x3c>
  407614:	0042      	lsls	r2, r0, #1
  407616:	d403      	bmi.n	407620 <__hi0bits+0x38>
  407618:	2020      	movs	r0, #32
  40761a:	4770      	bx	lr
  40761c:	2300      	movs	r3, #0
  40761e:	e7e8      	b.n	4075f2 <__hi0bits+0xa>
  407620:	1c58      	adds	r0, r3, #1
  407622:	4770      	bx	lr
  407624:	4618      	mov	r0, r3
  407626:	4770      	bx	lr

00407628 <__lo0bits>:
  407628:	6803      	ldr	r3, [r0, #0]
  40762a:	f013 0207 	ands.w	r2, r3, #7
  40762e:	d007      	beq.n	407640 <__lo0bits+0x18>
  407630:	07d9      	lsls	r1, r3, #31
  407632:	d420      	bmi.n	407676 <__lo0bits+0x4e>
  407634:	079a      	lsls	r2, r3, #30
  407636:	d420      	bmi.n	40767a <__lo0bits+0x52>
  407638:	089b      	lsrs	r3, r3, #2
  40763a:	6003      	str	r3, [r0, #0]
  40763c:	2002      	movs	r0, #2
  40763e:	4770      	bx	lr
  407640:	b299      	uxth	r1, r3
  407642:	b909      	cbnz	r1, 407648 <__lo0bits+0x20>
  407644:	0c1b      	lsrs	r3, r3, #16
  407646:	2210      	movs	r2, #16
  407648:	f013 0fff 	tst.w	r3, #255	; 0xff
  40764c:	bf04      	itt	eq
  40764e:	0a1b      	lsreq	r3, r3, #8
  407650:	3208      	addeq	r2, #8
  407652:	0719      	lsls	r1, r3, #28
  407654:	bf04      	itt	eq
  407656:	091b      	lsreq	r3, r3, #4
  407658:	3204      	addeq	r2, #4
  40765a:	0799      	lsls	r1, r3, #30
  40765c:	bf04      	itt	eq
  40765e:	089b      	lsreq	r3, r3, #2
  407660:	3202      	addeq	r2, #2
  407662:	07d9      	lsls	r1, r3, #31
  407664:	d404      	bmi.n	407670 <__lo0bits+0x48>
  407666:	085b      	lsrs	r3, r3, #1
  407668:	d101      	bne.n	40766e <__lo0bits+0x46>
  40766a:	2020      	movs	r0, #32
  40766c:	4770      	bx	lr
  40766e:	3201      	adds	r2, #1
  407670:	6003      	str	r3, [r0, #0]
  407672:	4610      	mov	r0, r2
  407674:	4770      	bx	lr
  407676:	2000      	movs	r0, #0
  407678:	4770      	bx	lr
  40767a:	085b      	lsrs	r3, r3, #1
  40767c:	6003      	str	r3, [r0, #0]
  40767e:	2001      	movs	r0, #1
  407680:	4770      	bx	lr
  407682:	bf00      	nop

00407684 <__i2b>:
  407684:	b510      	push	{r4, lr}
  407686:	460c      	mov	r4, r1
  407688:	2101      	movs	r1, #1
  40768a:	f7ff ff3d 	bl	407508 <_Balloc>
  40768e:	2201      	movs	r2, #1
  407690:	6144      	str	r4, [r0, #20]
  407692:	6102      	str	r2, [r0, #16]
  407694:	bd10      	pop	{r4, pc}
  407696:	bf00      	nop

00407698 <__multiply>:
  407698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40769c:	690d      	ldr	r5, [r1, #16]
  40769e:	6917      	ldr	r7, [r2, #16]
  4076a0:	42bd      	cmp	r5, r7
  4076a2:	b083      	sub	sp, #12
  4076a4:	460c      	mov	r4, r1
  4076a6:	4616      	mov	r6, r2
  4076a8:	da04      	bge.n	4076b4 <__multiply+0x1c>
  4076aa:	462a      	mov	r2, r5
  4076ac:	4634      	mov	r4, r6
  4076ae:	463d      	mov	r5, r7
  4076b0:	460e      	mov	r6, r1
  4076b2:	4617      	mov	r7, r2
  4076b4:	68a3      	ldr	r3, [r4, #8]
  4076b6:	6861      	ldr	r1, [r4, #4]
  4076b8:	eb05 0807 	add.w	r8, r5, r7
  4076bc:	4598      	cmp	r8, r3
  4076be:	bfc8      	it	gt
  4076c0:	3101      	addgt	r1, #1
  4076c2:	f7ff ff21 	bl	407508 <_Balloc>
  4076c6:	f100 0c14 	add.w	ip, r0, #20
  4076ca:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  4076ce:	45cc      	cmp	ip, r9
  4076d0:	9000      	str	r0, [sp, #0]
  4076d2:	d205      	bcs.n	4076e0 <__multiply+0x48>
  4076d4:	4663      	mov	r3, ip
  4076d6:	2100      	movs	r1, #0
  4076d8:	f843 1b04 	str.w	r1, [r3], #4
  4076dc:	4599      	cmp	r9, r3
  4076de:	d8fb      	bhi.n	4076d8 <__multiply+0x40>
  4076e0:	f106 0214 	add.w	r2, r6, #20
  4076e4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  4076e8:	f104 0314 	add.w	r3, r4, #20
  4076ec:	4552      	cmp	r2, sl
  4076ee:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  4076f2:	d254      	bcs.n	40779e <__multiply+0x106>
  4076f4:	f8cd 9004 	str.w	r9, [sp, #4]
  4076f8:	4699      	mov	r9, r3
  4076fa:	f852 3b04 	ldr.w	r3, [r2], #4
  4076fe:	fa1f fb83 	uxth.w	fp, r3
  407702:	f1bb 0f00 	cmp.w	fp, #0
  407706:	d020      	beq.n	40774a <__multiply+0xb2>
  407708:	2000      	movs	r0, #0
  40770a:	464f      	mov	r7, r9
  40770c:	4666      	mov	r6, ip
  40770e:	4605      	mov	r5, r0
  407710:	e000      	b.n	407714 <__multiply+0x7c>
  407712:	461e      	mov	r6, r3
  407714:	f857 4b04 	ldr.w	r4, [r7], #4
  407718:	6830      	ldr	r0, [r6, #0]
  40771a:	b2a1      	uxth	r1, r4
  40771c:	b283      	uxth	r3, r0
  40771e:	fb0b 3101 	mla	r1, fp, r1, r3
  407722:	0c24      	lsrs	r4, r4, #16
  407724:	0c00      	lsrs	r0, r0, #16
  407726:	194b      	adds	r3, r1, r5
  407728:	fb0b 0004 	mla	r0, fp, r4, r0
  40772c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  407730:	b299      	uxth	r1, r3
  407732:	4633      	mov	r3, r6
  407734:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  407738:	45be      	cmp	lr, r7
  40773a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  40773e:	f843 1b04 	str.w	r1, [r3], #4
  407742:	d8e6      	bhi.n	407712 <__multiply+0x7a>
  407744:	6075      	str	r5, [r6, #4]
  407746:	f852 3c04 	ldr.w	r3, [r2, #-4]
  40774a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  40774e:	d020      	beq.n	407792 <__multiply+0xfa>
  407750:	f8dc 3000 	ldr.w	r3, [ip]
  407754:	4667      	mov	r7, ip
  407756:	4618      	mov	r0, r3
  407758:	464d      	mov	r5, r9
  40775a:	2100      	movs	r1, #0
  40775c:	e000      	b.n	407760 <__multiply+0xc8>
  40775e:	4637      	mov	r7, r6
  407760:	882c      	ldrh	r4, [r5, #0]
  407762:	0c00      	lsrs	r0, r0, #16
  407764:	fb0b 0004 	mla	r0, fp, r4, r0
  407768:	4401      	add	r1, r0
  40776a:	b29c      	uxth	r4, r3
  40776c:	463e      	mov	r6, r7
  40776e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  407772:	f846 3b04 	str.w	r3, [r6], #4
  407776:	6878      	ldr	r0, [r7, #4]
  407778:	f855 4b04 	ldr.w	r4, [r5], #4
  40777c:	b283      	uxth	r3, r0
  40777e:	0c24      	lsrs	r4, r4, #16
  407780:	fb0b 3404 	mla	r4, fp, r4, r3
  407784:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  407788:	45ae      	cmp	lr, r5
  40778a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  40778e:	d8e6      	bhi.n	40775e <__multiply+0xc6>
  407790:	607b      	str	r3, [r7, #4]
  407792:	4592      	cmp	sl, r2
  407794:	f10c 0c04 	add.w	ip, ip, #4
  407798:	d8af      	bhi.n	4076fa <__multiply+0x62>
  40779a:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40779e:	f1b8 0f00 	cmp.w	r8, #0
  4077a2:	dd0b      	ble.n	4077bc <__multiply+0x124>
  4077a4:	f859 3c04 	ldr.w	r3, [r9, #-4]
  4077a8:	f1a9 0904 	sub.w	r9, r9, #4
  4077ac:	b11b      	cbz	r3, 4077b6 <__multiply+0x11e>
  4077ae:	e005      	b.n	4077bc <__multiply+0x124>
  4077b0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  4077b4:	b913      	cbnz	r3, 4077bc <__multiply+0x124>
  4077b6:	f1b8 0801 	subs.w	r8, r8, #1
  4077ba:	d1f9      	bne.n	4077b0 <__multiply+0x118>
  4077bc:	9800      	ldr	r0, [sp, #0]
  4077be:	f8c0 8010 	str.w	r8, [r0, #16]
  4077c2:	b003      	add	sp, #12
  4077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004077c8 <__pow5mult>:
  4077c8:	f012 0303 	ands.w	r3, r2, #3
  4077cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4077d0:	4614      	mov	r4, r2
  4077d2:	4607      	mov	r7, r0
  4077d4:	d12e      	bne.n	407834 <__pow5mult+0x6c>
  4077d6:	460e      	mov	r6, r1
  4077d8:	10a4      	asrs	r4, r4, #2
  4077da:	d01c      	beq.n	407816 <__pow5mult+0x4e>
  4077dc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4077de:	b395      	cbz	r5, 407846 <__pow5mult+0x7e>
  4077e0:	07e3      	lsls	r3, r4, #31
  4077e2:	f04f 0800 	mov.w	r8, #0
  4077e6:	d406      	bmi.n	4077f6 <__pow5mult+0x2e>
  4077e8:	1064      	asrs	r4, r4, #1
  4077ea:	d014      	beq.n	407816 <__pow5mult+0x4e>
  4077ec:	6828      	ldr	r0, [r5, #0]
  4077ee:	b1a8      	cbz	r0, 40781c <__pow5mult+0x54>
  4077f0:	4605      	mov	r5, r0
  4077f2:	07e3      	lsls	r3, r4, #31
  4077f4:	d5f8      	bpl.n	4077e8 <__pow5mult+0x20>
  4077f6:	462a      	mov	r2, r5
  4077f8:	4631      	mov	r1, r6
  4077fa:	4638      	mov	r0, r7
  4077fc:	f7ff ff4c 	bl	407698 <__multiply>
  407800:	b1b6      	cbz	r6, 407830 <__pow5mult+0x68>
  407802:	6872      	ldr	r2, [r6, #4]
  407804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407806:	1064      	asrs	r4, r4, #1
  407808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40780c:	6031      	str	r1, [r6, #0]
  40780e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407812:	4606      	mov	r6, r0
  407814:	d1ea      	bne.n	4077ec <__pow5mult+0x24>
  407816:	4630      	mov	r0, r6
  407818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40781c:	462a      	mov	r2, r5
  40781e:	4629      	mov	r1, r5
  407820:	4638      	mov	r0, r7
  407822:	f7ff ff39 	bl	407698 <__multiply>
  407826:	6028      	str	r0, [r5, #0]
  407828:	f8c0 8000 	str.w	r8, [r0]
  40782c:	4605      	mov	r5, r0
  40782e:	e7e0      	b.n	4077f2 <__pow5mult+0x2a>
  407830:	4606      	mov	r6, r0
  407832:	e7d9      	b.n	4077e8 <__pow5mult+0x20>
  407834:	1e5a      	subs	r2, r3, #1
  407836:	4d0b      	ldr	r5, [pc, #44]	; (407864 <__pow5mult+0x9c>)
  407838:	2300      	movs	r3, #0
  40783a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40783e:	f7ff fe93 	bl	407568 <__multadd>
  407842:	4606      	mov	r6, r0
  407844:	e7c8      	b.n	4077d8 <__pow5mult+0x10>
  407846:	2101      	movs	r1, #1
  407848:	4638      	mov	r0, r7
  40784a:	f7ff fe5d 	bl	407508 <_Balloc>
  40784e:	f240 2171 	movw	r1, #625	; 0x271
  407852:	2201      	movs	r2, #1
  407854:	2300      	movs	r3, #0
  407856:	6141      	str	r1, [r0, #20]
  407858:	6102      	str	r2, [r0, #16]
  40785a:	4605      	mov	r5, r0
  40785c:	64b8      	str	r0, [r7, #72]	; 0x48
  40785e:	6003      	str	r3, [r0, #0]
  407860:	e7be      	b.n	4077e0 <__pow5mult+0x18>
  407862:	bf00      	nop
  407864:	00409b20 	.word	0x00409b20

00407868 <__lshift>:
  407868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40786c:	4691      	mov	r9, r2
  40786e:	690a      	ldr	r2, [r1, #16]
  407870:	688b      	ldr	r3, [r1, #8]
  407872:	ea4f 1469 	mov.w	r4, r9, asr #5
  407876:	eb04 0802 	add.w	r8, r4, r2
  40787a:	f108 0501 	add.w	r5, r8, #1
  40787e:	429d      	cmp	r5, r3
  407880:	460e      	mov	r6, r1
  407882:	4682      	mov	sl, r0
  407884:	6849      	ldr	r1, [r1, #4]
  407886:	dd04      	ble.n	407892 <__lshift+0x2a>
  407888:	005b      	lsls	r3, r3, #1
  40788a:	429d      	cmp	r5, r3
  40788c:	f101 0101 	add.w	r1, r1, #1
  407890:	dcfa      	bgt.n	407888 <__lshift+0x20>
  407892:	4650      	mov	r0, sl
  407894:	f7ff fe38 	bl	407508 <_Balloc>
  407898:	2c00      	cmp	r4, #0
  40789a:	f100 0214 	add.w	r2, r0, #20
  40789e:	dd38      	ble.n	407912 <__lshift+0xaa>
  4078a0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4078a4:	2100      	movs	r1, #0
  4078a6:	f842 1b04 	str.w	r1, [r2], #4
  4078aa:	4293      	cmp	r3, r2
  4078ac:	d1fb      	bne.n	4078a6 <__lshift+0x3e>
  4078ae:	6934      	ldr	r4, [r6, #16]
  4078b0:	f106 0114 	add.w	r1, r6, #20
  4078b4:	f019 091f 	ands.w	r9, r9, #31
  4078b8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4078bc:	d021      	beq.n	407902 <__lshift+0x9a>
  4078be:	f1c9 0220 	rsb	r2, r9, #32
  4078c2:	2400      	movs	r4, #0
  4078c4:	680f      	ldr	r7, [r1, #0]
  4078c6:	fa07 fc09 	lsl.w	ip, r7, r9
  4078ca:	ea4c 0404 	orr.w	r4, ip, r4
  4078ce:	469c      	mov	ip, r3
  4078d0:	f843 4b04 	str.w	r4, [r3], #4
  4078d4:	f851 4b04 	ldr.w	r4, [r1], #4
  4078d8:	458e      	cmp	lr, r1
  4078da:	fa24 f402 	lsr.w	r4, r4, r2
  4078de:	d8f1      	bhi.n	4078c4 <__lshift+0x5c>
  4078e0:	f8cc 4004 	str.w	r4, [ip, #4]
  4078e4:	b10c      	cbz	r4, 4078ea <__lshift+0x82>
  4078e6:	f108 0502 	add.w	r5, r8, #2
  4078ea:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  4078ee:	6872      	ldr	r2, [r6, #4]
  4078f0:	3d01      	subs	r5, #1
  4078f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4078f6:	6105      	str	r5, [r0, #16]
  4078f8:	6031      	str	r1, [r6, #0]
  4078fa:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407902:	3b04      	subs	r3, #4
  407904:	f851 2b04 	ldr.w	r2, [r1], #4
  407908:	f843 2f04 	str.w	r2, [r3, #4]!
  40790c:	458e      	cmp	lr, r1
  40790e:	d8f9      	bhi.n	407904 <__lshift+0x9c>
  407910:	e7eb      	b.n	4078ea <__lshift+0x82>
  407912:	4613      	mov	r3, r2
  407914:	e7cb      	b.n	4078ae <__lshift+0x46>
  407916:	bf00      	nop

00407918 <__mcmp>:
  407918:	6902      	ldr	r2, [r0, #16]
  40791a:	690b      	ldr	r3, [r1, #16]
  40791c:	1ad2      	subs	r2, r2, r3
  40791e:	d112      	bne.n	407946 <__mcmp+0x2e>
  407920:	009b      	lsls	r3, r3, #2
  407922:	3014      	adds	r0, #20
  407924:	3114      	adds	r1, #20
  407926:	4419      	add	r1, r3
  407928:	b410      	push	{r4}
  40792a:	4403      	add	r3, r0
  40792c:	e001      	b.n	407932 <__mcmp+0x1a>
  40792e:	4298      	cmp	r0, r3
  407930:	d20b      	bcs.n	40794a <__mcmp+0x32>
  407932:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407936:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40793a:	4294      	cmp	r4, r2
  40793c:	d0f7      	beq.n	40792e <__mcmp+0x16>
  40793e:	d307      	bcc.n	407950 <__mcmp+0x38>
  407940:	2001      	movs	r0, #1
  407942:	bc10      	pop	{r4}
  407944:	4770      	bx	lr
  407946:	4610      	mov	r0, r2
  407948:	4770      	bx	lr
  40794a:	2000      	movs	r0, #0
  40794c:	bc10      	pop	{r4}
  40794e:	4770      	bx	lr
  407950:	f04f 30ff 	mov.w	r0, #4294967295
  407954:	e7f5      	b.n	407942 <__mcmp+0x2a>
  407956:	bf00      	nop

00407958 <__mdiff>:
  407958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40795c:	690b      	ldr	r3, [r1, #16]
  40795e:	460f      	mov	r7, r1
  407960:	6911      	ldr	r1, [r2, #16]
  407962:	1a5b      	subs	r3, r3, r1
  407964:	2b00      	cmp	r3, #0
  407966:	4690      	mov	r8, r2
  407968:	d117      	bne.n	40799a <__mdiff+0x42>
  40796a:	0089      	lsls	r1, r1, #2
  40796c:	f107 0214 	add.w	r2, r7, #20
  407970:	f108 0514 	add.w	r5, r8, #20
  407974:	1853      	adds	r3, r2, r1
  407976:	4429      	add	r1, r5
  407978:	e001      	b.n	40797e <__mdiff+0x26>
  40797a:	429a      	cmp	r2, r3
  40797c:	d25e      	bcs.n	407a3c <__mdiff+0xe4>
  40797e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  407982:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407986:	42a6      	cmp	r6, r4
  407988:	d0f7      	beq.n	40797a <__mdiff+0x22>
  40798a:	d260      	bcs.n	407a4e <__mdiff+0xf6>
  40798c:	463b      	mov	r3, r7
  40798e:	4614      	mov	r4, r2
  407990:	4647      	mov	r7, r8
  407992:	f04f 0901 	mov.w	r9, #1
  407996:	4698      	mov	r8, r3
  407998:	e006      	b.n	4079a8 <__mdiff+0x50>
  40799a:	db5d      	blt.n	407a58 <__mdiff+0x100>
  40799c:	f107 0514 	add.w	r5, r7, #20
  4079a0:	f102 0414 	add.w	r4, r2, #20
  4079a4:	f04f 0900 	mov.w	r9, #0
  4079a8:	6879      	ldr	r1, [r7, #4]
  4079aa:	f7ff fdad 	bl	407508 <_Balloc>
  4079ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4079b2:	693e      	ldr	r6, [r7, #16]
  4079b4:	f8c0 900c 	str.w	r9, [r0, #12]
  4079b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4079bc:	46a6      	mov	lr, r4
  4079be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4079c2:	f100 0414 	add.w	r4, r0, #20
  4079c6:	2300      	movs	r3, #0
  4079c8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4079cc:	f855 8b04 	ldr.w	r8, [r5], #4
  4079d0:	b28a      	uxth	r2, r1
  4079d2:	fa13 f388 	uxtah	r3, r3, r8
  4079d6:	0c09      	lsrs	r1, r1, #16
  4079d8:	1a9a      	subs	r2, r3, r2
  4079da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4079de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4079e2:	b292      	uxth	r2, r2
  4079e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4079e8:	45f4      	cmp	ip, lr
  4079ea:	f844 2b04 	str.w	r2, [r4], #4
  4079ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4079f2:	d8e9      	bhi.n	4079c8 <__mdiff+0x70>
  4079f4:	42af      	cmp	r7, r5
  4079f6:	d917      	bls.n	407a28 <__mdiff+0xd0>
  4079f8:	46a4      	mov	ip, r4
  4079fa:	4629      	mov	r1, r5
  4079fc:	f851 eb04 	ldr.w	lr, [r1], #4
  407a00:	fa13 f28e 	uxtah	r2, r3, lr
  407a04:	1413      	asrs	r3, r2, #16
  407a06:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  407a0a:	b292      	uxth	r2, r2
  407a0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407a10:	428f      	cmp	r7, r1
  407a12:	f84c 2b04 	str.w	r2, [ip], #4
  407a16:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a1a:	d8ef      	bhi.n	4079fc <__mdiff+0xa4>
  407a1c:	43ed      	mvns	r5, r5
  407a1e:	443d      	add	r5, r7
  407a20:	f025 0503 	bic.w	r5, r5, #3
  407a24:	3504      	adds	r5, #4
  407a26:	442c      	add	r4, r5
  407a28:	3c04      	subs	r4, #4
  407a2a:	b922      	cbnz	r2, 407a36 <__mdiff+0xde>
  407a2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407a30:	3e01      	subs	r6, #1
  407a32:	2b00      	cmp	r3, #0
  407a34:	d0fa      	beq.n	407a2c <__mdiff+0xd4>
  407a36:	6106      	str	r6, [r0, #16]
  407a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a3c:	2100      	movs	r1, #0
  407a3e:	f7ff fd63 	bl	407508 <_Balloc>
  407a42:	2201      	movs	r2, #1
  407a44:	2300      	movs	r3, #0
  407a46:	6102      	str	r2, [r0, #16]
  407a48:	6143      	str	r3, [r0, #20]
  407a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a4e:	462c      	mov	r4, r5
  407a50:	f04f 0900 	mov.w	r9, #0
  407a54:	4615      	mov	r5, r2
  407a56:	e7a7      	b.n	4079a8 <__mdiff+0x50>
  407a58:	463b      	mov	r3, r7
  407a5a:	f107 0414 	add.w	r4, r7, #20
  407a5e:	f108 0514 	add.w	r5, r8, #20
  407a62:	4647      	mov	r7, r8
  407a64:	f04f 0901 	mov.w	r9, #1
  407a68:	4698      	mov	r8, r3
  407a6a:	e79d      	b.n	4079a8 <__mdiff+0x50>

00407a6c <__d2b>:
  407a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a70:	b082      	sub	sp, #8
  407a72:	2101      	movs	r1, #1
  407a74:	461c      	mov	r4, r3
  407a76:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407a7a:	4615      	mov	r5, r2
  407a7c:	9e08      	ldr	r6, [sp, #32]
  407a7e:	f7ff fd43 	bl	407508 <_Balloc>
  407a82:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407a86:	4680      	mov	r8, r0
  407a88:	b10f      	cbz	r7, 407a8e <__d2b+0x22>
  407a8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407a8e:	9401      	str	r4, [sp, #4]
  407a90:	b31d      	cbz	r5, 407ada <__d2b+0x6e>
  407a92:	a802      	add	r0, sp, #8
  407a94:	f840 5d08 	str.w	r5, [r0, #-8]!
  407a98:	f7ff fdc6 	bl	407628 <__lo0bits>
  407a9c:	2800      	cmp	r0, #0
  407a9e:	d134      	bne.n	407b0a <__d2b+0x9e>
  407aa0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407aa4:	f8c8 2014 	str.w	r2, [r8, #20]
  407aa8:	2b00      	cmp	r3, #0
  407aaa:	bf0c      	ite	eq
  407aac:	2101      	moveq	r1, #1
  407aae:	2102      	movne	r1, #2
  407ab0:	f8c8 3018 	str.w	r3, [r8, #24]
  407ab4:	f8c8 1010 	str.w	r1, [r8, #16]
  407ab8:	b9df      	cbnz	r7, 407af2 <__d2b+0x86>
  407aba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407abe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407ac2:	6030      	str	r0, [r6, #0]
  407ac4:	6918      	ldr	r0, [r3, #16]
  407ac6:	f7ff fd8f 	bl	4075e8 <__hi0bits>
  407aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407acc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407ad0:	6018      	str	r0, [r3, #0]
  407ad2:	4640      	mov	r0, r8
  407ad4:	b002      	add	sp, #8
  407ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ada:	a801      	add	r0, sp, #4
  407adc:	f7ff fda4 	bl	407628 <__lo0bits>
  407ae0:	9b01      	ldr	r3, [sp, #4]
  407ae2:	f8c8 3014 	str.w	r3, [r8, #20]
  407ae6:	2101      	movs	r1, #1
  407ae8:	3020      	adds	r0, #32
  407aea:	f8c8 1010 	str.w	r1, [r8, #16]
  407aee:	2f00      	cmp	r7, #0
  407af0:	d0e3      	beq.n	407aba <__d2b+0x4e>
  407af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407af4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407af8:	4407      	add	r7, r0
  407afa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407afe:	6037      	str	r7, [r6, #0]
  407b00:	6018      	str	r0, [r3, #0]
  407b02:	4640      	mov	r0, r8
  407b04:	b002      	add	sp, #8
  407b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b0a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407b0e:	f1c0 0120 	rsb	r1, r0, #32
  407b12:	fa03 f101 	lsl.w	r1, r3, r1
  407b16:	430a      	orrs	r2, r1
  407b18:	40c3      	lsrs	r3, r0
  407b1a:	9301      	str	r3, [sp, #4]
  407b1c:	f8c8 2014 	str.w	r2, [r8, #20]
  407b20:	e7c2      	b.n	407aa8 <__d2b+0x3c>
  407b22:	bf00      	nop

00407b24 <_realloc_r>:
  407b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b28:	4617      	mov	r7, r2
  407b2a:	b083      	sub	sp, #12
  407b2c:	2900      	cmp	r1, #0
  407b2e:	f000 80c1 	beq.w	407cb4 <_realloc_r+0x190>
  407b32:	460e      	mov	r6, r1
  407b34:	4681      	mov	r9, r0
  407b36:	f107 050b 	add.w	r5, r7, #11
  407b3a:	f7ff fce1 	bl	407500 <__malloc_lock>
  407b3e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  407b42:	2d16      	cmp	r5, #22
  407b44:	f02e 0403 	bic.w	r4, lr, #3
  407b48:	f1a6 0808 	sub.w	r8, r6, #8
  407b4c:	d840      	bhi.n	407bd0 <_realloc_r+0xac>
  407b4e:	2210      	movs	r2, #16
  407b50:	4615      	mov	r5, r2
  407b52:	42af      	cmp	r7, r5
  407b54:	d841      	bhi.n	407bda <_realloc_r+0xb6>
  407b56:	4294      	cmp	r4, r2
  407b58:	da75      	bge.n	407c46 <_realloc_r+0x122>
  407b5a:	4bc9      	ldr	r3, [pc, #804]	; (407e80 <_realloc_r+0x35c>)
  407b5c:	6899      	ldr	r1, [r3, #8]
  407b5e:	eb08 0004 	add.w	r0, r8, r4
  407b62:	4288      	cmp	r0, r1
  407b64:	6841      	ldr	r1, [r0, #4]
  407b66:	f000 80d9 	beq.w	407d1c <_realloc_r+0x1f8>
  407b6a:	f021 0301 	bic.w	r3, r1, #1
  407b6e:	4403      	add	r3, r0
  407b70:	685b      	ldr	r3, [r3, #4]
  407b72:	07db      	lsls	r3, r3, #31
  407b74:	d57d      	bpl.n	407c72 <_realloc_r+0x14e>
  407b76:	f01e 0f01 	tst.w	lr, #1
  407b7a:	d035      	beq.n	407be8 <_realloc_r+0xc4>
  407b7c:	4639      	mov	r1, r7
  407b7e:	4648      	mov	r0, r9
  407b80:	f7ff f884 	bl	406c8c <_malloc_r>
  407b84:	4607      	mov	r7, r0
  407b86:	b1e0      	cbz	r0, 407bc2 <_realloc_r+0x9e>
  407b88:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407b8c:	f023 0301 	bic.w	r3, r3, #1
  407b90:	4443      	add	r3, r8
  407b92:	f1a0 0208 	sub.w	r2, r0, #8
  407b96:	429a      	cmp	r2, r3
  407b98:	f000 8144 	beq.w	407e24 <_realloc_r+0x300>
  407b9c:	1f22      	subs	r2, r4, #4
  407b9e:	2a24      	cmp	r2, #36	; 0x24
  407ba0:	f200 8131 	bhi.w	407e06 <_realloc_r+0x2e2>
  407ba4:	2a13      	cmp	r2, #19
  407ba6:	f200 8104 	bhi.w	407db2 <_realloc_r+0x28e>
  407baa:	4603      	mov	r3, r0
  407bac:	4632      	mov	r2, r6
  407bae:	6811      	ldr	r1, [r2, #0]
  407bb0:	6019      	str	r1, [r3, #0]
  407bb2:	6851      	ldr	r1, [r2, #4]
  407bb4:	6059      	str	r1, [r3, #4]
  407bb6:	6892      	ldr	r2, [r2, #8]
  407bb8:	609a      	str	r2, [r3, #8]
  407bba:	4631      	mov	r1, r6
  407bbc:	4648      	mov	r0, r9
  407bbe:	f7fe ff79 	bl	406ab4 <_free_r>
  407bc2:	4648      	mov	r0, r9
  407bc4:	f7ff fc9e 	bl	407504 <__malloc_unlock>
  407bc8:	4638      	mov	r0, r7
  407bca:	b003      	add	sp, #12
  407bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bd0:	f025 0507 	bic.w	r5, r5, #7
  407bd4:	2d00      	cmp	r5, #0
  407bd6:	462a      	mov	r2, r5
  407bd8:	dabb      	bge.n	407b52 <_realloc_r+0x2e>
  407bda:	230c      	movs	r3, #12
  407bdc:	2000      	movs	r0, #0
  407bde:	f8c9 3000 	str.w	r3, [r9]
  407be2:	b003      	add	sp, #12
  407be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407bec:	ebc3 0a08 	rsb	sl, r3, r8
  407bf0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407bf4:	f023 0c03 	bic.w	ip, r3, #3
  407bf8:	eb04 030c 	add.w	r3, r4, ip
  407bfc:	4293      	cmp	r3, r2
  407bfe:	dbbd      	blt.n	407b7c <_realloc_r+0x58>
  407c00:	4657      	mov	r7, sl
  407c02:	f8da 100c 	ldr.w	r1, [sl, #12]
  407c06:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407c0a:	1f22      	subs	r2, r4, #4
  407c0c:	2a24      	cmp	r2, #36	; 0x24
  407c0e:	60c1      	str	r1, [r0, #12]
  407c10:	6088      	str	r0, [r1, #8]
  407c12:	f200 8117 	bhi.w	407e44 <_realloc_r+0x320>
  407c16:	2a13      	cmp	r2, #19
  407c18:	f240 8112 	bls.w	407e40 <_realloc_r+0x31c>
  407c1c:	6831      	ldr	r1, [r6, #0]
  407c1e:	f8ca 1008 	str.w	r1, [sl, #8]
  407c22:	6871      	ldr	r1, [r6, #4]
  407c24:	f8ca 100c 	str.w	r1, [sl, #12]
  407c28:	2a1b      	cmp	r2, #27
  407c2a:	f200 812b 	bhi.w	407e84 <_realloc_r+0x360>
  407c2e:	3608      	adds	r6, #8
  407c30:	f10a 0210 	add.w	r2, sl, #16
  407c34:	6831      	ldr	r1, [r6, #0]
  407c36:	6011      	str	r1, [r2, #0]
  407c38:	6871      	ldr	r1, [r6, #4]
  407c3a:	6051      	str	r1, [r2, #4]
  407c3c:	68b1      	ldr	r1, [r6, #8]
  407c3e:	6091      	str	r1, [r2, #8]
  407c40:	463e      	mov	r6, r7
  407c42:	461c      	mov	r4, r3
  407c44:	46d0      	mov	r8, sl
  407c46:	1b63      	subs	r3, r4, r5
  407c48:	2b0f      	cmp	r3, #15
  407c4a:	d81d      	bhi.n	407c88 <_realloc_r+0x164>
  407c4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  407c50:	f003 0301 	and.w	r3, r3, #1
  407c54:	4323      	orrs	r3, r4
  407c56:	4444      	add	r4, r8
  407c58:	f8c8 3004 	str.w	r3, [r8, #4]
  407c5c:	6863      	ldr	r3, [r4, #4]
  407c5e:	f043 0301 	orr.w	r3, r3, #1
  407c62:	6063      	str	r3, [r4, #4]
  407c64:	4648      	mov	r0, r9
  407c66:	f7ff fc4d 	bl	407504 <__malloc_unlock>
  407c6a:	4630      	mov	r0, r6
  407c6c:	b003      	add	sp, #12
  407c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c72:	f021 0103 	bic.w	r1, r1, #3
  407c76:	4421      	add	r1, r4
  407c78:	4291      	cmp	r1, r2
  407c7a:	db21      	blt.n	407cc0 <_realloc_r+0x19c>
  407c7c:	68c3      	ldr	r3, [r0, #12]
  407c7e:	6882      	ldr	r2, [r0, #8]
  407c80:	460c      	mov	r4, r1
  407c82:	60d3      	str	r3, [r2, #12]
  407c84:	609a      	str	r2, [r3, #8]
  407c86:	e7de      	b.n	407c46 <_realloc_r+0x122>
  407c88:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407c8c:	eb08 0105 	add.w	r1, r8, r5
  407c90:	f002 0201 	and.w	r2, r2, #1
  407c94:	4315      	orrs	r5, r2
  407c96:	f043 0201 	orr.w	r2, r3, #1
  407c9a:	440b      	add	r3, r1
  407c9c:	f8c8 5004 	str.w	r5, [r8, #4]
  407ca0:	604a      	str	r2, [r1, #4]
  407ca2:	685a      	ldr	r2, [r3, #4]
  407ca4:	f042 0201 	orr.w	r2, r2, #1
  407ca8:	3108      	adds	r1, #8
  407caa:	605a      	str	r2, [r3, #4]
  407cac:	4648      	mov	r0, r9
  407cae:	f7fe ff01 	bl	406ab4 <_free_r>
  407cb2:	e7d7      	b.n	407c64 <_realloc_r+0x140>
  407cb4:	4611      	mov	r1, r2
  407cb6:	b003      	add	sp, #12
  407cb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cbc:	f7fe bfe6 	b.w	406c8c <_malloc_r>
  407cc0:	f01e 0f01 	tst.w	lr, #1
  407cc4:	f47f af5a 	bne.w	407b7c <_realloc_r+0x58>
  407cc8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407ccc:	ebc3 0a08 	rsb	sl, r3, r8
  407cd0:	f8da 3004 	ldr.w	r3, [sl, #4]
  407cd4:	f023 0c03 	bic.w	ip, r3, #3
  407cd8:	eb01 0e0c 	add.w	lr, r1, ip
  407cdc:	4596      	cmp	lr, r2
  407cde:	db8b      	blt.n	407bf8 <_realloc_r+0xd4>
  407ce0:	68c3      	ldr	r3, [r0, #12]
  407ce2:	6882      	ldr	r2, [r0, #8]
  407ce4:	4657      	mov	r7, sl
  407ce6:	60d3      	str	r3, [r2, #12]
  407ce8:	609a      	str	r2, [r3, #8]
  407cea:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407cee:	f8da 300c 	ldr.w	r3, [sl, #12]
  407cf2:	60cb      	str	r3, [r1, #12]
  407cf4:	1f22      	subs	r2, r4, #4
  407cf6:	2a24      	cmp	r2, #36	; 0x24
  407cf8:	6099      	str	r1, [r3, #8]
  407cfa:	f200 8099 	bhi.w	407e30 <_realloc_r+0x30c>
  407cfe:	2a13      	cmp	r2, #19
  407d00:	d962      	bls.n	407dc8 <_realloc_r+0x2a4>
  407d02:	6833      	ldr	r3, [r6, #0]
  407d04:	f8ca 3008 	str.w	r3, [sl, #8]
  407d08:	6873      	ldr	r3, [r6, #4]
  407d0a:	f8ca 300c 	str.w	r3, [sl, #12]
  407d0e:	2a1b      	cmp	r2, #27
  407d10:	f200 80a0 	bhi.w	407e54 <_realloc_r+0x330>
  407d14:	3608      	adds	r6, #8
  407d16:	f10a 0310 	add.w	r3, sl, #16
  407d1a:	e056      	b.n	407dca <_realloc_r+0x2a6>
  407d1c:	f021 0b03 	bic.w	fp, r1, #3
  407d20:	44a3      	add	fp, r4
  407d22:	f105 0010 	add.w	r0, r5, #16
  407d26:	4583      	cmp	fp, r0
  407d28:	da59      	bge.n	407dde <_realloc_r+0x2ba>
  407d2a:	f01e 0f01 	tst.w	lr, #1
  407d2e:	f47f af25 	bne.w	407b7c <_realloc_r+0x58>
  407d32:	f856 1c08 	ldr.w	r1, [r6, #-8]
  407d36:	ebc1 0a08 	rsb	sl, r1, r8
  407d3a:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d3e:	f021 0c03 	bic.w	ip, r1, #3
  407d42:	44e3      	add	fp, ip
  407d44:	4558      	cmp	r0, fp
  407d46:	f73f af57 	bgt.w	407bf8 <_realloc_r+0xd4>
  407d4a:	4657      	mov	r7, sl
  407d4c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407d50:	f857 0f08 	ldr.w	r0, [r7, #8]!
  407d54:	1f22      	subs	r2, r4, #4
  407d56:	2a24      	cmp	r2, #36	; 0x24
  407d58:	60c1      	str	r1, [r0, #12]
  407d5a:	6088      	str	r0, [r1, #8]
  407d5c:	f200 80b4 	bhi.w	407ec8 <_realloc_r+0x3a4>
  407d60:	2a13      	cmp	r2, #19
  407d62:	f240 80a5 	bls.w	407eb0 <_realloc_r+0x38c>
  407d66:	6831      	ldr	r1, [r6, #0]
  407d68:	f8ca 1008 	str.w	r1, [sl, #8]
  407d6c:	6871      	ldr	r1, [r6, #4]
  407d6e:	f8ca 100c 	str.w	r1, [sl, #12]
  407d72:	2a1b      	cmp	r2, #27
  407d74:	f200 80af 	bhi.w	407ed6 <_realloc_r+0x3b2>
  407d78:	3608      	adds	r6, #8
  407d7a:	f10a 0210 	add.w	r2, sl, #16
  407d7e:	6831      	ldr	r1, [r6, #0]
  407d80:	6011      	str	r1, [r2, #0]
  407d82:	6871      	ldr	r1, [r6, #4]
  407d84:	6051      	str	r1, [r2, #4]
  407d86:	68b1      	ldr	r1, [r6, #8]
  407d88:	6091      	str	r1, [r2, #8]
  407d8a:	eb0a 0105 	add.w	r1, sl, r5
  407d8e:	ebc5 020b 	rsb	r2, r5, fp
  407d92:	f042 0201 	orr.w	r2, r2, #1
  407d96:	6099      	str	r1, [r3, #8]
  407d98:	604a      	str	r2, [r1, #4]
  407d9a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407d9e:	f003 0301 	and.w	r3, r3, #1
  407da2:	431d      	orrs	r5, r3
  407da4:	4648      	mov	r0, r9
  407da6:	f8ca 5004 	str.w	r5, [sl, #4]
  407daa:	f7ff fbab 	bl	407504 <__malloc_unlock>
  407dae:	4638      	mov	r0, r7
  407db0:	e75c      	b.n	407c6c <_realloc_r+0x148>
  407db2:	6833      	ldr	r3, [r6, #0]
  407db4:	6003      	str	r3, [r0, #0]
  407db6:	6873      	ldr	r3, [r6, #4]
  407db8:	6043      	str	r3, [r0, #4]
  407dba:	2a1b      	cmp	r2, #27
  407dbc:	d827      	bhi.n	407e0e <_realloc_r+0x2ea>
  407dbe:	f100 0308 	add.w	r3, r0, #8
  407dc2:	f106 0208 	add.w	r2, r6, #8
  407dc6:	e6f2      	b.n	407bae <_realloc_r+0x8a>
  407dc8:	463b      	mov	r3, r7
  407dca:	6832      	ldr	r2, [r6, #0]
  407dcc:	601a      	str	r2, [r3, #0]
  407dce:	6872      	ldr	r2, [r6, #4]
  407dd0:	605a      	str	r2, [r3, #4]
  407dd2:	68b2      	ldr	r2, [r6, #8]
  407dd4:	609a      	str	r2, [r3, #8]
  407dd6:	463e      	mov	r6, r7
  407dd8:	4674      	mov	r4, lr
  407dda:	46d0      	mov	r8, sl
  407ddc:	e733      	b.n	407c46 <_realloc_r+0x122>
  407dde:	eb08 0105 	add.w	r1, r8, r5
  407de2:	ebc5 0b0b 	rsb	fp, r5, fp
  407de6:	f04b 0201 	orr.w	r2, fp, #1
  407dea:	6099      	str	r1, [r3, #8]
  407dec:	604a      	str	r2, [r1, #4]
  407dee:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407df2:	f003 0301 	and.w	r3, r3, #1
  407df6:	431d      	orrs	r5, r3
  407df8:	4648      	mov	r0, r9
  407dfa:	f846 5c04 	str.w	r5, [r6, #-4]
  407dfe:	f7ff fb81 	bl	407504 <__malloc_unlock>
  407e02:	4630      	mov	r0, r6
  407e04:	e732      	b.n	407c6c <_realloc_r+0x148>
  407e06:	4631      	mov	r1, r6
  407e08:	f7ff fb16 	bl	407438 <memmove>
  407e0c:	e6d5      	b.n	407bba <_realloc_r+0x96>
  407e0e:	68b3      	ldr	r3, [r6, #8]
  407e10:	6083      	str	r3, [r0, #8]
  407e12:	68f3      	ldr	r3, [r6, #12]
  407e14:	60c3      	str	r3, [r0, #12]
  407e16:	2a24      	cmp	r2, #36	; 0x24
  407e18:	d028      	beq.n	407e6c <_realloc_r+0x348>
  407e1a:	f100 0310 	add.w	r3, r0, #16
  407e1e:	f106 0210 	add.w	r2, r6, #16
  407e22:	e6c4      	b.n	407bae <_realloc_r+0x8a>
  407e24:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407e28:	f023 0303 	bic.w	r3, r3, #3
  407e2c:	441c      	add	r4, r3
  407e2e:	e70a      	b.n	407c46 <_realloc_r+0x122>
  407e30:	4631      	mov	r1, r6
  407e32:	4638      	mov	r0, r7
  407e34:	4674      	mov	r4, lr
  407e36:	46d0      	mov	r8, sl
  407e38:	f7ff fafe 	bl	407438 <memmove>
  407e3c:	463e      	mov	r6, r7
  407e3e:	e702      	b.n	407c46 <_realloc_r+0x122>
  407e40:	463a      	mov	r2, r7
  407e42:	e6f7      	b.n	407c34 <_realloc_r+0x110>
  407e44:	4631      	mov	r1, r6
  407e46:	4638      	mov	r0, r7
  407e48:	461c      	mov	r4, r3
  407e4a:	46d0      	mov	r8, sl
  407e4c:	f7ff faf4 	bl	407438 <memmove>
  407e50:	463e      	mov	r6, r7
  407e52:	e6f8      	b.n	407c46 <_realloc_r+0x122>
  407e54:	68b3      	ldr	r3, [r6, #8]
  407e56:	f8ca 3010 	str.w	r3, [sl, #16]
  407e5a:	68f3      	ldr	r3, [r6, #12]
  407e5c:	f8ca 3014 	str.w	r3, [sl, #20]
  407e60:	2a24      	cmp	r2, #36	; 0x24
  407e62:	d01b      	beq.n	407e9c <_realloc_r+0x378>
  407e64:	3610      	adds	r6, #16
  407e66:	f10a 0318 	add.w	r3, sl, #24
  407e6a:	e7ae      	b.n	407dca <_realloc_r+0x2a6>
  407e6c:	6933      	ldr	r3, [r6, #16]
  407e6e:	6103      	str	r3, [r0, #16]
  407e70:	6973      	ldr	r3, [r6, #20]
  407e72:	6143      	str	r3, [r0, #20]
  407e74:	f106 0218 	add.w	r2, r6, #24
  407e78:	f100 0318 	add.w	r3, r0, #24
  407e7c:	e697      	b.n	407bae <_realloc_r+0x8a>
  407e7e:	bf00      	nop
  407e80:	20000474 	.word	0x20000474
  407e84:	68b1      	ldr	r1, [r6, #8]
  407e86:	f8ca 1010 	str.w	r1, [sl, #16]
  407e8a:	68f1      	ldr	r1, [r6, #12]
  407e8c:	f8ca 1014 	str.w	r1, [sl, #20]
  407e90:	2a24      	cmp	r2, #36	; 0x24
  407e92:	d00f      	beq.n	407eb4 <_realloc_r+0x390>
  407e94:	3610      	adds	r6, #16
  407e96:	f10a 0218 	add.w	r2, sl, #24
  407e9a:	e6cb      	b.n	407c34 <_realloc_r+0x110>
  407e9c:	6933      	ldr	r3, [r6, #16]
  407e9e:	f8ca 3018 	str.w	r3, [sl, #24]
  407ea2:	6973      	ldr	r3, [r6, #20]
  407ea4:	f8ca 301c 	str.w	r3, [sl, #28]
  407ea8:	3618      	adds	r6, #24
  407eaa:	f10a 0320 	add.w	r3, sl, #32
  407eae:	e78c      	b.n	407dca <_realloc_r+0x2a6>
  407eb0:	463a      	mov	r2, r7
  407eb2:	e764      	b.n	407d7e <_realloc_r+0x25a>
  407eb4:	6932      	ldr	r2, [r6, #16]
  407eb6:	f8ca 2018 	str.w	r2, [sl, #24]
  407eba:	6972      	ldr	r2, [r6, #20]
  407ebc:	f8ca 201c 	str.w	r2, [sl, #28]
  407ec0:	3618      	adds	r6, #24
  407ec2:	f10a 0220 	add.w	r2, sl, #32
  407ec6:	e6b5      	b.n	407c34 <_realloc_r+0x110>
  407ec8:	4631      	mov	r1, r6
  407eca:	4638      	mov	r0, r7
  407ecc:	9301      	str	r3, [sp, #4]
  407ece:	f7ff fab3 	bl	407438 <memmove>
  407ed2:	9b01      	ldr	r3, [sp, #4]
  407ed4:	e759      	b.n	407d8a <_realloc_r+0x266>
  407ed6:	68b1      	ldr	r1, [r6, #8]
  407ed8:	f8ca 1010 	str.w	r1, [sl, #16]
  407edc:	68f1      	ldr	r1, [r6, #12]
  407ede:	f8ca 1014 	str.w	r1, [sl, #20]
  407ee2:	2a24      	cmp	r2, #36	; 0x24
  407ee4:	d003      	beq.n	407eee <_realloc_r+0x3ca>
  407ee6:	3610      	adds	r6, #16
  407ee8:	f10a 0218 	add.w	r2, sl, #24
  407eec:	e747      	b.n	407d7e <_realloc_r+0x25a>
  407eee:	6932      	ldr	r2, [r6, #16]
  407ef0:	f8ca 2018 	str.w	r2, [sl, #24]
  407ef4:	6972      	ldr	r2, [r6, #20]
  407ef6:	f8ca 201c 	str.w	r2, [sl, #28]
  407efa:	3618      	adds	r6, #24
  407efc:	f10a 0220 	add.w	r2, sl, #32
  407f00:	e73d      	b.n	407d7e <_realloc_r+0x25a>
  407f02:	bf00      	nop

00407f04 <_sbrk_r>:
  407f04:	b538      	push	{r3, r4, r5, lr}
  407f06:	4c07      	ldr	r4, [pc, #28]	; (407f24 <_sbrk_r+0x20>)
  407f08:	2300      	movs	r3, #0
  407f0a:	4605      	mov	r5, r0
  407f0c:	4608      	mov	r0, r1
  407f0e:	6023      	str	r3, [r4, #0]
  407f10:	f7fb fcbe 	bl	403890 <_sbrk>
  407f14:	1c43      	adds	r3, r0, #1
  407f16:	d000      	beq.n	407f1a <_sbrk_r+0x16>
  407f18:	bd38      	pop	{r3, r4, r5, pc}
  407f1a:	6823      	ldr	r3, [r4, #0]
  407f1c:	2b00      	cmp	r3, #0
  407f1e:	d0fb      	beq.n	407f18 <_sbrk_r+0x14>
  407f20:	602b      	str	r3, [r5, #0]
  407f22:	bd38      	pop	{r3, r4, r5, pc}
  407f24:	2000d698 	.word	0x2000d698

00407f28 <strchr>:
  407f28:	b470      	push	{r4, r5, r6}
  407f2a:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
  407f2e:	d034      	beq.n	407f9a <strchr+0x72>
  407f30:	0785      	lsls	r5, r0, #30
  407f32:	d00f      	beq.n	407f54 <strchr+0x2c>
  407f34:	7803      	ldrb	r3, [r0, #0]
  407f36:	2b00      	cmp	r3, #0
  407f38:	d05a      	beq.n	407ff0 <strchr+0xc8>
  407f3a:	429c      	cmp	r4, r3
  407f3c:	d02b      	beq.n	407f96 <strchr+0x6e>
  407f3e:	1c43      	adds	r3, r0, #1
  407f40:	e005      	b.n	407f4e <strchr+0x26>
  407f42:	f813 2b01 	ldrb.w	r2, [r3], #1
  407f46:	2a00      	cmp	r2, #0
  407f48:	d04f      	beq.n	407fea <strchr+0xc2>
  407f4a:	4294      	cmp	r4, r2
  407f4c:	d023      	beq.n	407f96 <strchr+0x6e>
  407f4e:	079a      	lsls	r2, r3, #30
  407f50:	4618      	mov	r0, r3
  407f52:	d1f6      	bne.n	407f42 <strchr+0x1a>
  407f54:	020e      	lsls	r6, r1, #8
  407f56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
  407f5a:	4326      	orrs	r6, r4
  407f5c:	6803      	ldr	r3, [r0, #0]
  407f5e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  407f62:	e001      	b.n	407f68 <strchr+0x40>
  407f64:	f850 3f04 	ldr.w	r3, [r0, #4]!
  407f68:	ea86 0503 	eor.w	r5, r6, r3
  407f6c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407f70:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
  407f74:	ea22 0205 	bic.w	r2, r2, r5
  407f78:	ea21 0303 	bic.w	r3, r1, r3
  407f7c:	4313      	orrs	r3, r2
  407f7e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407f82:	d0ef      	beq.n	407f64 <strchr+0x3c>
  407f84:	7803      	ldrb	r3, [r0, #0]
  407f86:	b923      	cbnz	r3, 407f92 <strchr+0x6a>
  407f88:	e032      	b.n	407ff0 <strchr+0xc8>
  407f8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407f8e:	2b00      	cmp	r3, #0
  407f90:	d02e      	beq.n	407ff0 <strchr+0xc8>
  407f92:	429c      	cmp	r4, r3
  407f94:	d1f9      	bne.n	407f8a <strchr+0x62>
  407f96:	bc70      	pop	{r4, r5, r6}
  407f98:	4770      	bx	lr
  407f9a:	0784      	lsls	r4, r0, #30
  407f9c:	d00b      	beq.n	407fb6 <strchr+0x8e>
  407f9e:	7803      	ldrb	r3, [r0, #0]
  407fa0:	2b00      	cmp	r3, #0
  407fa2:	d0f8      	beq.n	407f96 <strchr+0x6e>
  407fa4:	1c43      	adds	r3, r0, #1
  407fa6:	e003      	b.n	407fb0 <strchr+0x88>
  407fa8:	7802      	ldrb	r2, [r0, #0]
  407faa:	3301      	adds	r3, #1
  407fac:	2a00      	cmp	r2, #0
  407fae:	d0f2      	beq.n	407f96 <strchr+0x6e>
  407fb0:	0799      	lsls	r1, r3, #30
  407fb2:	4618      	mov	r0, r3
  407fb4:	d1f8      	bne.n	407fa8 <strchr+0x80>
  407fb6:	6802      	ldr	r2, [r0, #0]
  407fb8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407fbc:	ea23 0302 	bic.w	r3, r3, r2
  407fc0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407fc4:	d108      	bne.n	407fd8 <strchr+0xb0>
  407fc6:	f850 2f04 	ldr.w	r2, [r0, #4]!
  407fca:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407fce:	ea23 0302 	bic.w	r3, r3, r2
  407fd2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407fd6:	d0f6      	beq.n	407fc6 <strchr+0x9e>
  407fd8:	7803      	ldrb	r3, [r0, #0]
  407fda:	2b00      	cmp	r3, #0
  407fdc:	d0db      	beq.n	407f96 <strchr+0x6e>
  407fde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407fe2:	2b00      	cmp	r3, #0
  407fe4:	d1fb      	bne.n	407fde <strchr+0xb6>
  407fe6:	bc70      	pop	{r4, r5, r6}
  407fe8:	4770      	bx	lr
  407fea:	4610      	mov	r0, r2
  407fec:	bc70      	pop	{r4, r5, r6}
  407fee:	4770      	bx	lr
  407ff0:	4618      	mov	r0, r3
  407ff2:	bc70      	pop	{r4, r5, r6}
  407ff4:	4770      	bx	lr
  407ff6:	bf00      	nop

00407ff8 <__ssprint_r>:
  407ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ffc:	6893      	ldr	r3, [r2, #8]
  407ffe:	b083      	sub	sp, #12
  408000:	4690      	mov	r8, r2
  408002:	2b00      	cmp	r3, #0
  408004:	d072      	beq.n	4080ec <__ssprint_r+0xf4>
  408006:	4683      	mov	fp, r0
  408008:	f04f 0900 	mov.w	r9, #0
  40800c:	6816      	ldr	r6, [r2, #0]
  40800e:	6808      	ldr	r0, [r1, #0]
  408010:	688b      	ldr	r3, [r1, #8]
  408012:	460d      	mov	r5, r1
  408014:	464c      	mov	r4, r9
  408016:	2c00      	cmp	r4, #0
  408018:	d045      	beq.n	4080a6 <__ssprint_r+0xae>
  40801a:	429c      	cmp	r4, r3
  40801c:	461f      	mov	r7, r3
  40801e:	469a      	mov	sl, r3
  408020:	d346      	bcc.n	4080b0 <__ssprint_r+0xb8>
  408022:	89ab      	ldrh	r3, [r5, #12]
  408024:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408028:	d02d      	beq.n	408086 <__ssprint_r+0x8e>
  40802a:	696f      	ldr	r7, [r5, #20]
  40802c:	6929      	ldr	r1, [r5, #16]
  40802e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  408032:	ebc1 0a00 	rsb	sl, r1, r0
  408036:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40803a:	1c60      	adds	r0, r4, #1
  40803c:	107f      	asrs	r7, r7, #1
  40803e:	4450      	add	r0, sl
  408040:	42b8      	cmp	r0, r7
  408042:	463a      	mov	r2, r7
  408044:	bf84      	itt	hi
  408046:	4607      	movhi	r7, r0
  408048:	463a      	movhi	r2, r7
  40804a:	055b      	lsls	r3, r3, #21
  40804c:	d533      	bpl.n	4080b6 <__ssprint_r+0xbe>
  40804e:	4611      	mov	r1, r2
  408050:	4658      	mov	r0, fp
  408052:	f7fe fe1b 	bl	406c8c <_malloc_r>
  408056:	2800      	cmp	r0, #0
  408058:	d037      	beq.n	4080ca <__ssprint_r+0xd2>
  40805a:	4652      	mov	r2, sl
  40805c:	6929      	ldr	r1, [r5, #16]
  40805e:	9001      	str	r0, [sp, #4]
  408060:	f7ff f950 	bl	407304 <memcpy>
  408064:	89aa      	ldrh	r2, [r5, #12]
  408066:	9b01      	ldr	r3, [sp, #4]
  408068:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40806c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408070:	81aa      	strh	r2, [r5, #12]
  408072:	ebca 0207 	rsb	r2, sl, r7
  408076:	eb03 000a 	add.w	r0, r3, sl
  40807a:	616f      	str	r7, [r5, #20]
  40807c:	612b      	str	r3, [r5, #16]
  40807e:	6028      	str	r0, [r5, #0]
  408080:	60aa      	str	r2, [r5, #8]
  408082:	4627      	mov	r7, r4
  408084:	46a2      	mov	sl, r4
  408086:	4652      	mov	r2, sl
  408088:	4649      	mov	r1, r9
  40808a:	f7ff f9d5 	bl	407438 <memmove>
  40808e:	f8d8 2008 	ldr.w	r2, [r8, #8]
  408092:	68ab      	ldr	r3, [r5, #8]
  408094:	6828      	ldr	r0, [r5, #0]
  408096:	1bdb      	subs	r3, r3, r7
  408098:	4450      	add	r0, sl
  40809a:	1b14      	subs	r4, r2, r4
  40809c:	60ab      	str	r3, [r5, #8]
  40809e:	6028      	str	r0, [r5, #0]
  4080a0:	f8c8 4008 	str.w	r4, [r8, #8]
  4080a4:	b314      	cbz	r4, 4080ec <__ssprint_r+0xf4>
  4080a6:	f8d6 9000 	ldr.w	r9, [r6]
  4080aa:	6874      	ldr	r4, [r6, #4]
  4080ac:	3608      	adds	r6, #8
  4080ae:	e7b2      	b.n	408016 <__ssprint_r+0x1e>
  4080b0:	4627      	mov	r7, r4
  4080b2:	46a2      	mov	sl, r4
  4080b4:	e7e7      	b.n	408086 <__ssprint_r+0x8e>
  4080b6:	4658      	mov	r0, fp
  4080b8:	f7ff fd34 	bl	407b24 <_realloc_r>
  4080bc:	4603      	mov	r3, r0
  4080be:	2800      	cmp	r0, #0
  4080c0:	d1d7      	bne.n	408072 <__ssprint_r+0x7a>
  4080c2:	6929      	ldr	r1, [r5, #16]
  4080c4:	4658      	mov	r0, fp
  4080c6:	f7fe fcf5 	bl	406ab4 <_free_r>
  4080ca:	230c      	movs	r3, #12
  4080cc:	f8cb 3000 	str.w	r3, [fp]
  4080d0:	89ab      	ldrh	r3, [r5, #12]
  4080d2:	2200      	movs	r2, #0
  4080d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4080d8:	f04f 30ff 	mov.w	r0, #4294967295
  4080dc:	81ab      	strh	r3, [r5, #12]
  4080de:	f8c8 2008 	str.w	r2, [r8, #8]
  4080e2:	f8c8 2004 	str.w	r2, [r8, #4]
  4080e6:	b003      	add	sp, #12
  4080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080ec:	2000      	movs	r0, #0
  4080ee:	f8c8 0004 	str.w	r0, [r8, #4]
  4080f2:	b003      	add	sp, #12
  4080f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004080f8 <__register_exitproc>:
  4080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4080fc:	4c25      	ldr	r4, [pc, #148]	; (408194 <__register_exitproc+0x9c>)
  4080fe:	6825      	ldr	r5, [r4, #0]
  408100:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  408104:	4606      	mov	r6, r0
  408106:	4688      	mov	r8, r1
  408108:	4692      	mov	sl, r2
  40810a:	4699      	mov	r9, r3
  40810c:	b3c4      	cbz	r4, 408180 <__register_exitproc+0x88>
  40810e:	6860      	ldr	r0, [r4, #4]
  408110:	281f      	cmp	r0, #31
  408112:	dc17      	bgt.n	408144 <__register_exitproc+0x4c>
  408114:	1c43      	adds	r3, r0, #1
  408116:	b176      	cbz	r6, 408136 <__register_exitproc+0x3e>
  408118:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40811c:	2201      	movs	r2, #1
  40811e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  408122:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  408126:	4082      	lsls	r2, r0
  408128:	4311      	orrs	r1, r2
  40812a:	2e02      	cmp	r6, #2
  40812c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  408130:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  408134:	d01e      	beq.n	408174 <__register_exitproc+0x7c>
  408136:	3002      	adds	r0, #2
  408138:	6063      	str	r3, [r4, #4]
  40813a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40813e:	2000      	movs	r0, #0
  408140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408144:	4b14      	ldr	r3, [pc, #80]	; (408198 <__register_exitproc+0xa0>)
  408146:	b303      	cbz	r3, 40818a <__register_exitproc+0x92>
  408148:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40814c:	f3af 8000 	nop.w
  408150:	4604      	mov	r4, r0
  408152:	b1d0      	cbz	r0, 40818a <__register_exitproc+0x92>
  408154:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408158:	2700      	movs	r7, #0
  40815a:	e880 0088 	stmia.w	r0, {r3, r7}
  40815e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408162:	4638      	mov	r0, r7
  408164:	2301      	movs	r3, #1
  408166:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40816a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40816e:	2e00      	cmp	r6, #0
  408170:	d0e1      	beq.n	408136 <__register_exitproc+0x3e>
  408172:	e7d1      	b.n	408118 <__register_exitproc+0x20>
  408174:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  408178:	430a      	orrs	r2, r1
  40817a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40817e:	e7da      	b.n	408136 <__register_exitproc+0x3e>
  408180:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  408184:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408188:	e7c1      	b.n	40810e <__register_exitproc+0x16>
  40818a:	f04f 30ff 	mov.w	r0, #4294967295
  40818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408192:	bf00      	nop
  408194:	004099a8 	.word	0x004099a8
  408198:	00000000 	.word	0x00000000

0040819c <_calloc_r>:
  40819c:	b510      	push	{r4, lr}
  40819e:	fb02 f101 	mul.w	r1, r2, r1
  4081a2:	f7fe fd73 	bl	406c8c <_malloc_r>
  4081a6:	4604      	mov	r4, r0
  4081a8:	b1d8      	cbz	r0, 4081e2 <_calloc_r+0x46>
  4081aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4081ae:	f022 0203 	bic.w	r2, r2, #3
  4081b2:	3a04      	subs	r2, #4
  4081b4:	2a24      	cmp	r2, #36	; 0x24
  4081b6:	d818      	bhi.n	4081ea <_calloc_r+0x4e>
  4081b8:	2a13      	cmp	r2, #19
  4081ba:	d914      	bls.n	4081e6 <_calloc_r+0x4a>
  4081bc:	2300      	movs	r3, #0
  4081be:	2a1b      	cmp	r2, #27
  4081c0:	6003      	str	r3, [r0, #0]
  4081c2:	6043      	str	r3, [r0, #4]
  4081c4:	d916      	bls.n	4081f4 <_calloc_r+0x58>
  4081c6:	2a24      	cmp	r2, #36	; 0x24
  4081c8:	6083      	str	r3, [r0, #8]
  4081ca:	60c3      	str	r3, [r0, #12]
  4081cc:	bf11      	iteee	ne
  4081ce:	f100 0210 	addne.w	r2, r0, #16
  4081d2:	6103      	streq	r3, [r0, #16]
  4081d4:	6143      	streq	r3, [r0, #20]
  4081d6:	f100 0218 	addeq.w	r2, r0, #24
  4081da:	2300      	movs	r3, #0
  4081dc:	6013      	str	r3, [r2, #0]
  4081de:	6053      	str	r3, [r2, #4]
  4081e0:	6093      	str	r3, [r2, #8]
  4081e2:	4620      	mov	r0, r4
  4081e4:	bd10      	pop	{r4, pc}
  4081e6:	4602      	mov	r2, r0
  4081e8:	e7f7      	b.n	4081da <_calloc_r+0x3e>
  4081ea:	2100      	movs	r1, #0
  4081ec:	f7fb fd8c 	bl	403d08 <memset>
  4081f0:	4620      	mov	r0, r4
  4081f2:	bd10      	pop	{r4, pc}
  4081f4:	f100 0208 	add.w	r2, r0, #8
  4081f8:	e7ef      	b.n	4081da <_calloc_r+0x3e>
  4081fa:	bf00      	nop

004081fc <__aeabi_drsub>:
  4081fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408200:	e002      	b.n	408208 <__adddf3>
  408202:	bf00      	nop

00408204 <__aeabi_dsub>:
  408204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408208 <__adddf3>:
  408208:	b530      	push	{r4, r5, lr}
  40820a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40820e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408212:	ea94 0f05 	teq	r4, r5
  408216:	bf08      	it	eq
  408218:	ea90 0f02 	teqeq	r0, r2
  40821c:	bf1f      	itttt	ne
  40821e:	ea54 0c00 	orrsne.w	ip, r4, r0
  408222:	ea55 0c02 	orrsne.w	ip, r5, r2
  408226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40822a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40822e:	f000 80e2 	beq.w	4083f6 <__adddf3+0x1ee>
  408232:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40823a:	bfb8      	it	lt
  40823c:	426d      	neglt	r5, r5
  40823e:	dd0c      	ble.n	40825a <__adddf3+0x52>
  408240:	442c      	add	r4, r5
  408242:	ea80 0202 	eor.w	r2, r0, r2
  408246:	ea81 0303 	eor.w	r3, r1, r3
  40824a:	ea82 0000 	eor.w	r0, r2, r0
  40824e:	ea83 0101 	eor.w	r1, r3, r1
  408252:	ea80 0202 	eor.w	r2, r0, r2
  408256:	ea81 0303 	eor.w	r3, r1, r3
  40825a:	2d36      	cmp	r5, #54	; 0x36
  40825c:	bf88      	it	hi
  40825e:	bd30      	pophi	{r4, r5, pc}
  408260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408264:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40826c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408270:	d002      	beq.n	408278 <__adddf3+0x70>
  408272:	4240      	negs	r0, r0
  408274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40827c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408284:	d002      	beq.n	40828c <__adddf3+0x84>
  408286:	4252      	negs	r2, r2
  408288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40828c:	ea94 0f05 	teq	r4, r5
  408290:	f000 80a7 	beq.w	4083e2 <__adddf3+0x1da>
  408294:	f1a4 0401 	sub.w	r4, r4, #1
  408298:	f1d5 0e20 	rsbs	lr, r5, #32
  40829c:	db0d      	blt.n	4082ba <__adddf3+0xb2>
  40829e:	fa02 fc0e 	lsl.w	ip, r2, lr
  4082a2:	fa22 f205 	lsr.w	r2, r2, r5
  4082a6:	1880      	adds	r0, r0, r2
  4082a8:	f141 0100 	adc.w	r1, r1, #0
  4082ac:	fa03 f20e 	lsl.w	r2, r3, lr
  4082b0:	1880      	adds	r0, r0, r2
  4082b2:	fa43 f305 	asr.w	r3, r3, r5
  4082b6:	4159      	adcs	r1, r3
  4082b8:	e00e      	b.n	4082d8 <__adddf3+0xd0>
  4082ba:	f1a5 0520 	sub.w	r5, r5, #32
  4082be:	f10e 0e20 	add.w	lr, lr, #32
  4082c2:	2a01      	cmp	r2, #1
  4082c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4082c8:	bf28      	it	cs
  4082ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  4082ce:	fa43 f305 	asr.w	r3, r3, r5
  4082d2:	18c0      	adds	r0, r0, r3
  4082d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4082d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4082dc:	d507      	bpl.n	4082ee <__adddf3+0xe6>
  4082de:	f04f 0e00 	mov.w	lr, #0
  4082e2:	f1dc 0c00 	rsbs	ip, ip, #0
  4082e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4082ea:	eb6e 0101 	sbc.w	r1, lr, r1
  4082ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4082f2:	d31b      	bcc.n	40832c <__adddf3+0x124>
  4082f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4082f8:	d30c      	bcc.n	408314 <__adddf3+0x10c>
  4082fa:	0849      	lsrs	r1, r1, #1
  4082fc:	ea5f 0030 	movs.w	r0, r0, rrx
  408300:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408304:	f104 0401 	add.w	r4, r4, #1
  408308:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40830c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408310:	f080 809a 	bcs.w	408448 <__adddf3+0x240>
  408314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408318:	bf08      	it	eq
  40831a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40831e:	f150 0000 	adcs.w	r0, r0, #0
  408322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408326:	ea41 0105 	orr.w	r1, r1, r5
  40832a:	bd30      	pop	{r4, r5, pc}
  40832c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408330:	4140      	adcs	r0, r0
  408332:	eb41 0101 	adc.w	r1, r1, r1
  408336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40833a:	f1a4 0401 	sub.w	r4, r4, #1
  40833e:	d1e9      	bne.n	408314 <__adddf3+0x10c>
  408340:	f091 0f00 	teq	r1, #0
  408344:	bf04      	itt	eq
  408346:	4601      	moveq	r1, r0
  408348:	2000      	moveq	r0, #0
  40834a:	fab1 f381 	clz	r3, r1
  40834e:	bf08      	it	eq
  408350:	3320      	addeq	r3, #32
  408352:	f1a3 030b 	sub.w	r3, r3, #11
  408356:	f1b3 0220 	subs.w	r2, r3, #32
  40835a:	da0c      	bge.n	408376 <__adddf3+0x16e>
  40835c:	320c      	adds	r2, #12
  40835e:	dd08      	ble.n	408372 <__adddf3+0x16a>
  408360:	f102 0c14 	add.w	ip, r2, #20
  408364:	f1c2 020c 	rsb	r2, r2, #12
  408368:	fa01 f00c 	lsl.w	r0, r1, ip
  40836c:	fa21 f102 	lsr.w	r1, r1, r2
  408370:	e00c      	b.n	40838c <__adddf3+0x184>
  408372:	f102 0214 	add.w	r2, r2, #20
  408376:	bfd8      	it	le
  408378:	f1c2 0c20 	rsble	ip, r2, #32
  40837c:	fa01 f102 	lsl.w	r1, r1, r2
  408380:	fa20 fc0c 	lsr.w	ip, r0, ip
  408384:	bfdc      	itt	le
  408386:	ea41 010c 	orrle.w	r1, r1, ip
  40838a:	4090      	lslle	r0, r2
  40838c:	1ae4      	subs	r4, r4, r3
  40838e:	bfa2      	ittt	ge
  408390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408394:	4329      	orrge	r1, r5
  408396:	bd30      	popge	{r4, r5, pc}
  408398:	ea6f 0404 	mvn.w	r4, r4
  40839c:	3c1f      	subs	r4, #31
  40839e:	da1c      	bge.n	4083da <__adddf3+0x1d2>
  4083a0:	340c      	adds	r4, #12
  4083a2:	dc0e      	bgt.n	4083c2 <__adddf3+0x1ba>
  4083a4:	f104 0414 	add.w	r4, r4, #20
  4083a8:	f1c4 0220 	rsb	r2, r4, #32
  4083ac:	fa20 f004 	lsr.w	r0, r0, r4
  4083b0:	fa01 f302 	lsl.w	r3, r1, r2
  4083b4:	ea40 0003 	orr.w	r0, r0, r3
  4083b8:	fa21 f304 	lsr.w	r3, r1, r4
  4083bc:	ea45 0103 	orr.w	r1, r5, r3
  4083c0:	bd30      	pop	{r4, r5, pc}
  4083c2:	f1c4 040c 	rsb	r4, r4, #12
  4083c6:	f1c4 0220 	rsb	r2, r4, #32
  4083ca:	fa20 f002 	lsr.w	r0, r0, r2
  4083ce:	fa01 f304 	lsl.w	r3, r1, r4
  4083d2:	ea40 0003 	orr.w	r0, r0, r3
  4083d6:	4629      	mov	r1, r5
  4083d8:	bd30      	pop	{r4, r5, pc}
  4083da:	fa21 f004 	lsr.w	r0, r1, r4
  4083de:	4629      	mov	r1, r5
  4083e0:	bd30      	pop	{r4, r5, pc}
  4083e2:	f094 0f00 	teq	r4, #0
  4083e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4083ea:	bf06      	itte	eq
  4083ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4083f0:	3401      	addeq	r4, #1
  4083f2:	3d01      	subne	r5, #1
  4083f4:	e74e      	b.n	408294 <__adddf3+0x8c>
  4083f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4083fa:	bf18      	it	ne
  4083fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408400:	d029      	beq.n	408456 <__adddf3+0x24e>
  408402:	ea94 0f05 	teq	r4, r5
  408406:	bf08      	it	eq
  408408:	ea90 0f02 	teqeq	r0, r2
  40840c:	d005      	beq.n	40841a <__adddf3+0x212>
  40840e:	ea54 0c00 	orrs.w	ip, r4, r0
  408412:	bf04      	itt	eq
  408414:	4619      	moveq	r1, r3
  408416:	4610      	moveq	r0, r2
  408418:	bd30      	pop	{r4, r5, pc}
  40841a:	ea91 0f03 	teq	r1, r3
  40841e:	bf1e      	ittt	ne
  408420:	2100      	movne	r1, #0
  408422:	2000      	movne	r0, #0
  408424:	bd30      	popne	{r4, r5, pc}
  408426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40842a:	d105      	bne.n	408438 <__adddf3+0x230>
  40842c:	0040      	lsls	r0, r0, #1
  40842e:	4149      	adcs	r1, r1
  408430:	bf28      	it	cs
  408432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408436:	bd30      	pop	{r4, r5, pc}
  408438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40843c:	bf3c      	itt	cc
  40843e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408442:	bd30      	popcc	{r4, r5, pc}
  408444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40844c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408450:	f04f 0000 	mov.w	r0, #0
  408454:	bd30      	pop	{r4, r5, pc}
  408456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40845a:	bf1a      	itte	ne
  40845c:	4619      	movne	r1, r3
  40845e:	4610      	movne	r0, r2
  408460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408464:	bf1c      	itt	ne
  408466:	460b      	movne	r3, r1
  408468:	4602      	movne	r2, r0
  40846a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40846e:	bf06      	itte	eq
  408470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408474:	ea91 0f03 	teqeq	r1, r3
  408478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40847c:	bd30      	pop	{r4, r5, pc}
  40847e:	bf00      	nop

00408480 <__aeabi_ui2d>:
  408480:	f090 0f00 	teq	r0, #0
  408484:	bf04      	itt	eq
  408486:	2100      	moveq	r1, #0
  408488:	4770      	bxeq	lr
  40848a:	b530      	push	{r4, r5, lr}
  40848c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408490:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408494:	f04f 0500 	mov.w	r5, #0
  408498:	f04f 0100 	mov.w	r1, #0
  40849c:	e750      	b.n	408340 <__adddf3+0x138>
  40849e:	bf00      	nop

004084a0 <__aeabi_i2d>:
  4084a0:	f090 0f00 	teq	r0, #0
  4084a4:	bf04      	itt	eq
  4084a6:	2100      	moveq	r1, #0
  4084a8:	4770      	bxeq	lr
  4084aa:	b530      	push	{r4, r5, lr}
  4084ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4084b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4084b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4084b8:	bf48      	it	mi
  4084ba:	4240      	negmi	r0, r0
  4084bc:	f04f 0100 	mov.w	r1, #0
  4084c0:	e73e      	b.n	408340 <__adddf3+0x138>
  4084c2:	bf00      	nop

004084c4 <__aeabi_f2d>:
  4084c4:	0042      	lsls	r2, r0, #1
  4084c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4084ca:	ea4f 0131 	mov.w	r1, r1, rrx
  4084ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4084d2:	bf1f      	itttt	ne
  4084d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4084d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4084dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4084e0:	4770      	bxne	lr
  4084e2:	f092 0f00 	teq	r2, #0
  4084e6:	bf14      	ite	ne
  4084e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4084ec:	4770      	bxeq	lr
  4084ee:	b530      	push	{r4, r5, lr}
  4084f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4084f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4084f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4084fc:	e720      	b.n	408340 <__adddf3+0x138>
  4084fe:	bf00      	nop

00408500 <__aeabi_ul2d>:
  408500:	ea50 0201 	orrs.w	r2, r0, r1
  408504:	bf08      	it	eq
  408506:	4770      	bxeq	lr
  408508:	b530      	push	{r4, r5, lr}
  40850a:	f04f 0500 	mov.w	r5, #0
  40850e:	e00a      	b.n	408526 <__aeabi_l2d+0x16>

00408510 <__aeabi_l2d>:
  408510:	ea50 0201 	orrs.w	r2, r0, r1
  408514:	bf08      	it	eq
  408516:	4770      	bxeq	lr
  408518:	b530      	push	{r4, r5, lr}
  40851a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40851e:	d502      	bpl.n	408526 <__aeabi_l2d+0x16>
  408520:	4240      	negs	r0, r0
  408522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408526:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40852a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40852e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408532:	f43f aedc 	beq.w	4082ee <__adddf3+0xe6>
  408536:	f04f 0203 	mov.w	r2, #3
  40853a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40853e:	bf18      	it	ne
  408540:	3203      	addne	r2, #3
  408542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408546:	bf18      	it	ne
  408548:	3203      	addne	r2, #3
  40854a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40854e:	f1c2 0320 	rsb	r3, r2, #32
  408552:	fa00 fc03 	lsl.w	ip, r0, r3
  408556:	fa20 f002 	lsr.w	r0, r0, r2
  40855a:	fa01 fe03 	lsl.w	lr, r1, r3
  40855e:	ea40 000e 	orr.w	r0, r0, lr
  408562:	fa21 f102 	lsr.w	r1, r1, r2
  408566:	4414      	add	r4, r2
  408568:	e6c1      	b.n	4082ee <__adddf3+0xe6>
  40856a:	bf00      	nop

0040856c <__aeabi_dmul>:
  40856c:	b570      	push	{r4, r5, r6, lr}
  40856e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40857a:	bf1d      	ittte	ne
  40857c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408580:	ea94 0f0c 	teqne	r4, ip
  408584:	ea95 0f0c 	teqne	r5, ip
  408588:	f000 f8de 	bleq	408748 <__aeabi_dmul+0x1dc>
  40858c:	442c      	add	r4, r5
  40858e:	ea81 0603 	eor.w	r6, r1, r3
  408592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40859a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40859e:	bf18      	it	ne
  4085a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4085a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4085a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4085ac:	d038      	beq.n	408620 <__aeabi_dmul+0xb4>
  4085ae:	fba0 ce02 	umull	ip, lr, r0, r2
  4085b2:	f04f 0500 	mov.w	r5, #0
  4085b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4085ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4085be:	fbe0 e503 	umlal	lr, r5, r0, r3
  4085c2:	f04f 0600 	mov.w	r6, #0
  4085c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4085ca:	f09c 0f00 	teq	ip, #0
  4085ce:	bf18      	it	ne
  4085d0:	f04e 0e01 	orrne.w	lr, lr, #1
  4085d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4085d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4085dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4085e0:	d204      	bcs.n	4085ec <__aeabi_dmul+0x80>
  4085e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4085e6:	416d      	adcs	r5, r5
  4085e8:	eb46 0606 	adc.w	r6, r6, r6
  4085ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4085f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4085f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4085f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4085fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408604:	bf88      	it	hi
  408606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40860a:	d81e      	bhi.n	40864a <__aeabi_dmul+0xde>
  40860c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408610:	bf08      	it	eq
  408612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408616:	f150 0000 	adcs.w	r0, r0, #0
  40861a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40861e:	bd70      	pop	{r4, r5, r6, pc}
  408620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408624:	ea46 0101 	orr.w	r1, r6, r1
  408628:	ea40 0002 	orr.w	r0, r0, r2
  40862c:	ea81 0103 	eor.w	r1, r1, r3
  408630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408634:	bfc2      	ittt	gt
  408636:	ebd4 050c 	rsbsgt	r5, r4, ip
  40863a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40863e:	bd70      	popgt	{r4, r5, r6, pc}
  408640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408644:	f04f 0e00 	mov.w	lr, #0
  408648:	3c01      	subs	r4, #1
  40864a:	f300 80ab 	bgt.w	4087a4 <__aeabi_dmul+0x238>
  40864e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408652:	bfde      	ittt	le
  408654:	2000      	movle	r0, #0
  408656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40865a:	bd70      	pople	{r4, r5, r6, pc}
  40865c:	f1c4 0400 	rsb	r4, r4, #0
  408660:	3c20      	subs	r4, #32
  408662:	da35      	bge.n	4086d0 <__aeabi_dmul+0x164>
  408664:	340c      	adds	r4, #12
  408666:	dc1b      	bgt.n	4086a0 <__aeabi_dmul+0x134>
  408668:	f104 0414 	add.w	r4, r4, #20
  40866c:	f1c4 0520 	rsb	r5, r4, #32
  408670:	fa00 f305 	lsl.w	r3, r0, r5
  408674:	fa20 f004 	lsr.w	r0, r0, r4
  408678:	fa01 f205 	lsl.w	r2, r1, r5
  40867c:	ea40 0002 	orr.w	r0, r0, r2
  408680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40868c:	fa21 f604 	lsr.w	r6, r1, r4
  408690:	eb42 0106 	adc.w	r1, r2, r6
  408694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408698:	bf08      	it	eq
  40869a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40869e:	bd70      	pop	{r4, r5, r6, pc}
  4086a0:	f1c4 040c 	rsb	r4, r4, #12
  4086a4:	f1c4 0520 	rsb	r5, r4, #32
  4086a8:	fa00 f304 	lsl.w	r3, r0, r4
  4086ac:	fa20 f005 	lsr.w	r0, r0, r5
  4086b0:	fa01 f204 	lsl.w	r2, r1, r4
  4086b4:	ea40 0002 	orr.w	r0, r0, r2
  4086b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4086bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4086c0:	f141 0100 	adc.w	r1, r1, #0
  4086c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4086c8:	bf08      	it	eq
  4086ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4086ce:	bd70      	pop	{r4, r5, r6, pc}
  4086d0:	f1c4 0520 	rsb	r5, r4, #32
  4086d4:	fa00 f205 	lsl.w	r2, r0, r5
  4086d8:	ea4e 0e02 	orr.w	lr, lr, r2
  4086dc:	fa20 f304 	lsr.w	r3, r0, r4
  4086e0:	fa01 f205 	lsl.w	r2, r1, r5
  4086e4:	ea43 0302 	orr.w	r3, r3, r2
  4086e8:	fa21 f004 	lsr.w	r0, r1, r4
  4086ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4086f0:	fa21 f204 	lsr.w	r2, r1, r4
  4086f4:	ea20 0002 	bic.w	r0, r0, r2
  4086f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4086fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408700:	bf08      	it	eq
  408702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408706:	bd70      	pop	{r4, r5, r6, pc}
  408708:	f094 0f00 	teq	r4, #0
  40870c:	d10f      	bne.n	40872e <__aeabi_dmul+0x1c2>
  40870e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408712:	0040      	lsls	r0, r0, #1
  408714:	eb41 0101 	adc.w	r1, r1, r1
  408718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40871c:	bf08      	it	eq
  40871e:	3c01      	subeq	r4, #1
  408720:	d0f7      	beq.n	408712 <__aeabi_dmul+0x1a6>
  408722:	ea41 0106 	orr.w	r1, r1, r6
  408726:	f095 0f00 	teq	r5, #0
  40872a:	bf18      	it	ne
  40872c:	4770      	bxne	lr
  40872e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408732:	0052      	lsls	r2, r2, #1
  408734:	eb43 0303 	adc.w	r3, r3, r3
  408738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40873c:	bf08      	it	eq
  40873e:	3d01      	subeq	r5, #1
  408740:	d0f7      	beq.n	408732 <__aeabi_dmul+0x1c6>
  408742:	ea43 0306 	orr.w	r3, r3, r6
  408746:	4770      	bx	lr
  408748:	ea94 0f0c 	teq	r4, ip
  40874c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408750:	bf18      	it	ne
  408752:	ea95 0f0c 	teqne	r5, ip
  408756:	d00c      	beq.n	408772 <__aeabi_dmul+0x206>
  408758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40875c:	bf18      	it	ne
  40875e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408762:	d1d1      	bne.n	408708 <__aeabi_dmul+0x19c>
  408764:	ea81 0103 	eor.w	r1, r1, r3
  408768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40876c:	f04f 0000 	mov.w	r0, #0
  408770:	bd70      	pop	{r4, r5, r6, pc}
  408772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408776:	bf06      	itte	eq
  408778:	4610      	moveq	r0, r2
  40877a:	4619      	moveq	r1, r3
  40877c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408780:	d019      	beq.n	4087b6 <__aeabi_dmul+0x24a>
  408782:	ea94 0f0c 	teq	r4, ip
  408786:	d102      	bne.n	40878e <__aeabi_dmul+0x222>
  408788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40878c:	d113      	bne.n	4087b6 <__aeabi_dmul+0x24a>
  40878e:	ea95 0f0c 	teq	r5, ip
  408792:	d105      	bne.n	4087a0 <__aeabi_dmul+0x234>
  408794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408798:	bf1c      	itt	ne
  40879a:	4610      	movne	r0, r2
  40879c:	4619      	movne	r1, r3
  40879e:	d10a      	bne.n	4087b6 <__aeabi_dmul+0x24a>
  4087a0:	ea81 0103 	eor.w	r1, r1, r3
  4087a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4087a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4087ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4087b0:	f04f 0000 	mov.w	r0, #0
  4087b4:	bd70      	pop	{r4, r5, r6, pc}
  4087b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4087ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4087be:	bd70      	pop	{r4, r5, r6, pc}

004087c0 <__aeabi_ddiv>:
  4087c0:	b570      	push	{r4, r5, r6, lr}
  4087c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4087c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4087ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4087ce:	bf1d      	ittte	ne
  4087d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4087d4:	ea94 0f0c 	teqne	r4, ip
  4087d8:	ea95 0f0c 	teqne	r5, ip
  4087dc:	f000 f8a7 	bleq	40892e <__aeabi_ddiv+0x16e>
  4087e0:	eba4 0405 	sub.w	r4, r4, r5
  4087e4:	ea81 0e03 	eor.w	lr, r1, r3
  4087e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4087ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4087f0:	f000 8088 	beq.w	408904 <__aeabi_ddiv+0x144>
  4087f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4087f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4087fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408804:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40880c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408810:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408818:	429d      	cmp	r5, r3
  40881a:	bf08      	it	eq
  40881c:	4296      	cmpeq	r6, r2
  40881e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408822:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408826:	d202      	bcs.n	40882e <__aeabi_ddiv+0x6e>
  408828:	085b      	lsrs	r3, r3, #1
  40882a:	ea4f 0232 	mov.w	r2, r2, rrx
  40882e:	1ab6      	subs	r6, r6, r2
  408830:	eb65 0503 	sbc.w	r5, r5, r3
  408834:	085b      	lsrs	r3, r3, #1
  408836:	ea4f 0232 	mov.w	r2, r2, rrx
  40883a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40883e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408842:	ebb6 0e02 	subs.w	lr, r6, r2
  408846:	eb75 0e03 	sbcs.w	lr, r5, r3
  40884a:	bf22      	ittt	cs
  40884c:	1ab6      	subcs	r6, r6, r2
  40884e:	4675      	movcs	r5, lr
  408850:	ea40 000c 	orrcs.w	r0, r0, ip
  408854:	085b      	lsrs	r3, r3, #1
  408856:	ea4f 0232 	mov.w	r2, r2, rrx
  40885a:	ebb6 0e02 	subs.w	lr, r6, r2
  40885e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408862:	bf22      	ittt	cs
  408864:	1ab6      	subcs	r6, r6, r2
  408866:	4675      	movcs	r5, lr
  408868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40886c:	085b      	lsrs	r3, r3, #1
  40886e:	ea4f 0232 	mov.w	r2, r2, rrx
  408872:	ebb6 0e02 	subs.w	lr, r6, r2
  408876:	eb75 0e03 	sbcs.w	lr, r5, r3
  40887a:	bf22      	ittt	cs
  40887c:	1ab6      	subcs	r6, r6, r2
  40887e:	4675      	movcs	r5, lr
  408880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408884:	085b      	lsrs	r3, r3, #1
  408886:	ea4f 0232 	mov.w	r2, r2, rrx
  40888a:	ebb6 0e02 	subs.w	lr, r6, r2
  40888e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408892:	bf22      	ittt	cs
  408894:	1ab6      	subcs	r6, r6, r2
  408896:	4675      	movcs	r5, lr
  408898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40889c:	ea55 0e06 	orrs.w	lr, r5, r6
  4088a0:	d018      	beq.n	4088d4 <__aeabi_ddiv+0x114>
  4088a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4088a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4088aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4088ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4088b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4088b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4088ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4088be:	d1c0      	bne.n	408842 <__aeabi_ddiv+0x82>
  4088c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4088c4:	d10b      	bne.n	4088de <__aeabi_ddiv+0x11e>
  4088c6:	ea41 0100 	orr.w	r1, r1, r0
  4088ca:	f04f 0000 	mov.w	r0, #0
  4088ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4088d2:	e7b6      	b.n	408842 <__aeabi_ddiv+0x82>
  4088d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4088d8:	bf04      	itt	eq
  4088da:	4301      	orreq	r1, r0
  4088dc:	2000      	moveq	r0, #0
  4088de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4088e2:	bf88      	it	hi
  4088e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4088e8:	f63f aeaf 	bhi.w	40864a <__aeabi_dmul+0xde>
  4088ec:	ebb5 0c03 	subs.w	ip, r5, r3
  4088f0:	bf04      	itt	eq
  4088f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4088f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4088fa:	f150 0000 	adcs.w	r0, r0, #0
  4088fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408902:	bd70      	pop	{r4, r5, r6, pc}
  408904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40890c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408910:	bfc2      	ittt	gt
  408912:	ebd4 050c 	rsbsgt	r5, r4, ip
  408916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40891a:	bd70      	popgt	{r4, r5, r6, pc}
  40891c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408920:	f04f 0e00 	mov.w	lr, #0
  408924:	3c01      	subs	r4, #1
  408926:	e690      	b.n	40864a <__aeabi_dmul+0xde>
  408928:	ea45 0e06 	orr.w	lr, r5, r6
  40892c:	e68d      	b.n	40864a <__aeabi_dmul+0xde>
  40892e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408932:	ea94 0f0c 	teq	r4, ip
  408936:	bf08      	it	eq
  408938:	ea95 0f0c 	teqeq	r5, ip
  40893c:	f43f af3b 	beq.w	4087b6 <__aeabi_dmul+0x24a>
  408940:	ea94 0f0c 	teq	r4, ip
  408944:	d10a      	bne.n	40895c <__aeabi_ddiv+0x19c>
  408946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40894a:	f47f af34 	bne.w	4087b6 <__aeabi_dmul+0x24a>
  40894e:	ea95 0f0c 	teq	r5, ip
  408952:	f47f af25 	bne.w	4087a0 <__aeabi_dmul+0x234>
  408956:	4610      	mov	r0, r2
  408958:	4619      	mov	r1, r3
  40895a:	e72c      	b.n	4087b6 <__aeabi_dmul+0x24a>
  40895c:	ea95 0f0c 	teq	r5, ip
  408960:	d106      	bne.n	408970 <__aeabi_ddiv+0x1b0>
  408962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408966:	f43f aefd 	beq.w	408764 <__aeabi_dmul+0x1f8>
  40896a:	4610      	mov	r0, r2
  40896c:	4619      	mov	r1, r3
  40896e:	e722      	b.n	4087b6 <__aeabi_dmul+0x24a>
  408970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408974:	bf18      	it	ne
  408976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40897a:	f47f aec5 	bne.w	408708 <__aeabi_dmul+0x19c>
  40897e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408982:	f47f af0d 	bne.w	4087a0 <__aeabi_dmul+0x234>
  408986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40898a:	f47f aeeb 	bne.w	408764 <__aeabi_dmul+0x1f8>
  40898e:	e712      	b.n	4087b6 <__aeabi_dmul+0x24a>

00408990 <__gedf2>:
  408990:	f04f 3cff 	mov.w	ip, #4294967295
  408994:	e006      	b.n	4089a4 <__cmpdf2+0x4>
  408996:	bf00      	nop

00408998 <__ledf2>:
  408998:	f04f 0c01 	mov.w	ip, #1
  40899c:	e002      	b.n	4089a4 <__cmpdf2+0x4>
  40899e:	bf00      	nop

004089a0 <__cmpdf2>:
  4089a0:	f04f 0c01 	mov.w	ip, #1
  4089a4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4089a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4089ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4089b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4089b4:	bf18      	it	ne
  4089b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4089ba:	d01b      	beq.n	4089f4 <__cmpdf2+0x54>
  4089bc:	b001      	add	sp, #4
  4089be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4089c2:	bf0c      	ite	eq
  4089c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4089c8:	ea91 0f03 	teqne	r1, r3
  4089cc:	bf02      	ittt	eq
  4089ce:	ea90 0f02 	teqeq	r0, r2
  4089d2:	2000      	moveq	r0, #0
  4089d4:	4770      	bxeq	lr
  4089d6:	f110 0f00 	cmn.w	r0, #0
  4089da:	ea91 0f03 	teq	r1, r3
  4089de:	bf58      	it	pl
  4089e0:	4299      	cmppl	r1, r3
  4089e2:	bf08      	it	eq
  4089e4:	4290      	cmpeq	r0, r2
  4089e6:	bf2c      	ite	cs
  4089e8:	17d8      	asrcs	r0, r3, #31
  4089ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4089ee:	f040 0001 	orr.w	r0, r0, #1
  4089f2:	4770      	bx	lr
  4089f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4089f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4089fc:	d102      	bne.n	408a04 <__cmpdf2+0x64>
  4089fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408a02:	d107      	bne.n	408a14 <__cmpdf2+0x74>
  408a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408a0c:	d1d6      	bne.n	4089bc <__cmpdf2+0x1c>
  408a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408a12:	d0d3      	beq.n	4089bc <__cmpdf2+0x1c>
  408a14:	f85d 0b04 	ldr.w	r0, [sp], #4
  408a18:	4770      	bx	lr
  408a1a:	bf00      	nop

00408a1c <__aeabi_cdrcmple>:
  408a1c:	4684      	mov	ip, r0
  408a1e:	4610      	mov	r0, r2
  408a20:	4662      	mov	r2, ip
  408a22:	468c      	mov	ip, r1
  408a24:	4619      	mov	r1, r3
  408a26:	4663      	mov	r3, ip
  408a28:	e000      	b.n	408a2c <__aeabi_cdcmpeq>
  408a2a:	bf00      	nop

00408a2c <__aeabi_cdcmpeq>:
  408a2c:	b501      	push	{r0, lr}
  408a2e:	f7ff ffb7 	bl	4089a0 <__cmpdf2>
  408a32:	2800      	cmp	r0, #0
  408a34:	bf48      	it	mi
  408a36:	f110 0f00 	cmnmi.w	r0, #0
  408a3a:	bd01      	pop	{r0, pc}

00408a3c <__aeabi_dcmpeq>:
  408a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408a40:	f7ff fff4 	bl	408a2c <__aeabi_cdcmpeq>
  408a44:	bf0c      	ite	eq
  408a46:	2001      	moveq	r0, #1
  408a48:	2000      	movne	r0, #0
  408a4a:	f85d fb08 	ldr.w	pc, [sp], #8
  408a4e:	bf00      	nop

00408a50 <__aeabi_dcmplt>:
  408a50:	f84d ed08 	str.w	lr, [sp, #-8]!
  408a54:	f7ff ffea 	bl	408a2c <__aeabi_cdcmpeq>
  408a58:	bf34      	ite	cc
  408a5a:	2001      	movcc	r0, #1
  408a5c:	2000      	movcs	r0, #0
  408a5e:	f85d fb08 	ldr.w	pc, [sp], #8
  408a62:	bf00      	nop

00408a64 <__aeabi_dcmple>:
  408a64:	f84d ed08 	str.w	lr, [sp, #-8]!
  408a68:	f7ff ffe0 	bl	408a2c <__aeabi_cdcmpeq>
  408a6c:	bf94      	ite	ls
  408a6e:	2001      	movls	r0, #1
  408a70:	2000      	movhi	r0, #0
  408a72:	f85d fb08 	ldr.w	pc, [sp], #8
  408a76:	bf00      	nop

00408a78 <__aeabi_dcmpge>:
  408a78:	f84d ed08 	str.w	lr, [sp, #-8]!
  408a7c:	f7ff ffce 	bl	408a1c <__aeabi_cdrcmple>
  408a80:	bf94      	ite	ls
  408a82:	2001      	movls	r0, #1
  408a84:	2000      	movhi	r0, #0
  408a86:	f85d fb08 	ldr.w	pc, [sp], #8
  408a8a:	bf00      	nop

00408a8c <__aeabi_dcmpgt>:
  408a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408a90:	f7ff ffc4 	bl	408a1c <__aeabi_cdrcmple>
  408a94:	bf34      	ite	cc
  408a96:	2001      	movcc	r0, #1
  408a98:	2000      	movcs	r0, #0
  408a9a:	f85d fb08 	ldr.w	pc, [sp], #8
  408a9e:	bf00      	nop

00408aa0 <__aeabi_dcmpun>:
  408aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408aa8:	d102      	bne.n	408ab0 <__aeabi_dcmpun+0x10>
  408aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408aae:	d10a      	bne.n	408ac6 <__aeabi_dcmpun+0x26>
  408ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408ab8:	d102      	bne.n	408ac0 <__aeabi_dcmpun+0x20>
  408aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408abe:	d102      	bne.n	408ac6 <__aeabi_dcmpun+0x26>
  408ac0:	f04f 0000 	mov.w	r0, #0
  408ac4:	4770      	bx	lr
  408ac6:	f04f 0001 	mov.w	r0, #1
  408aca:	4770      	bx	lr

00408acc <__aeabi_d2iz>:
  408acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408ad4:	d215      	bcs.n	408b02 <__aeabi_d2iz+0x36>
  408ad6:	d511      	bpl.n	408afc <__aeabi_d2iz+0x30>
  408ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408ae0:	d912      	bls.n	408b08 <__aeabi_d2iz+0x3c>
  408ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408af2:	fa23 f002 	lsr.w	r0, r3, r2
  408af6:	bf18      	it	ne
  408af8:	4240      	negne	r0, r0
  408afa:	4770      	bx	lr
  408afc:	f04f 0000 	mov.w	r0, #0
  408b00:	4770      	bx	lr
  408b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408b06:	d105      	bne.n	408b14 <__aeabi_d2iz+0x48>
  408b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408b0c:	bf08      	it	eq
  408b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408b12:	4770      	bx	lr
  408b14:	f04f 0000 	mov.w	r0, #0
  408b18:	4770      	bx	lr
  408b1a:	bf00      	nop

00408b1c <OV2640_JPEG_INIT>:
  408b1c:	00ff ff2c df2e 01ff 323c 0311 0209 2804     ..,.....<2.....(
  408b2c:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  408b3c:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  408b4c:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408b5c:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408b6c:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408b7c:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408b8c:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408b9c:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408bac:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408bbc:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408bcc:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408bdc:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408bec:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  408bfc:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  408c0c:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  408c1c:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  408c2c:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  408c3c:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  408c4c:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408c5c:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408c6c:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408c7c:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408c8c:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408c9c <OV2640_YUV422>:
  408c9c:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408cac:	0000 ffff                                   ....

00408cb0 <OV2640_JPEG>:
  408cb0:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408cc0:	ffff 0000                                   ....

00408cc4 <OV2640_JPEG_320x240>:
  408cc4:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  408cd4:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  408ce4:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  408cf4:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  408d04:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

00408d14 <OV2640_JPEG_640x480>:
  408d14:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408d24:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408d34:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408d44:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  408d54:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  408d64:	ffff 0000                                   ....

00408d68 <OV2640_JPEG_800x600>:
  408d68:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408d78:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408d88:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408d98:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408da8:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408db8:	ffff 0000                                   ....

00408dbc <OV2640_JPEG_1024x768>:
  408dbc:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408dcc:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408ddc:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408dec:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408dfc:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

00408e0c <OV2640_JPEG_1280x1024>:
  408e0c:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e1c:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408e2c:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408e3c:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408e4c:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408e5c:	ffff 0000                                   ....

00408e60 <OV2640_JPEG_1600x1200>:
  408e60:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e70:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408e80:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408e90:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408ea0:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408eb0:	ffff 0000                                   ....

00408eb4 <OV2640_QVGA_YUV422_10FPS>:
  408eb4:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  408ec4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408ed4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408ee4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408ef4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408f04:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  408f14:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  408f24:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  408f34:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  408f44:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  408f54:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  408f64:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  408f74:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  408f84:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  408f94:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00408fa4 <OV2640_QVGA_YUV422_15FPS>:
  408fa4:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  408fb4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408fc4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  408fd4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  408fe4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  408ff4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409004:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409014:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409024:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409034:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409044:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409054:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409064:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409074:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409084:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409094 <OV2640_QVGA_YUV422_20FPS>:
  409094:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  4090a4:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4090b4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4090c4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4090d4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4090e4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4090f4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409104:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409114:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409124:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409134:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409144:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409154:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409164:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409174:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409184 <OV2640_QVGA_YUV422_30FPS>:
  409184:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  409194:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4091a4:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4091b4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4091c4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4091d4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4091e4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4091f4:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409204:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409214:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409224:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409234:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409244:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409254:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409264:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409274 <OV2640_QVGA_RGB888>:
  409274:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  409284:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  409294:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  4092a4:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4092b4:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4092c4:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4092d4:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  4092e4:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  4092f4:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  409304:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  409314:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  409324:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  409334:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  409344:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  409354:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  409364:	0228 ffff                                   (...

00409368 <OV2640_QQVGA_YUV422>:
  409368:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  409378:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  409388:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  409398:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  4093a8:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  4093b8:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  4093c8:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  4093d8:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  4093e8:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  4093f8:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409408:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409418:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409428:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409438:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  409448:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  409458:	00d9 ffff                                   ....

0040945c <OV2640_QQVGA_RGB888>:
  40945c:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  40946c:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  40947c:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  40948c:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  40949c:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4094ac:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4094bc:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  4094cc:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  4094dc:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  4094ec:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  4094fc:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  40950c:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  40951c:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  40952c:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  40953c:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  40954c:	0228 ffff                                   (...

00409550 <OV2640_TEST_PATTERN>:
  409550:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409560:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409570:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409580:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409590:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4095a0:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4095b0:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  4095c0:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  4095d0:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  4095e0:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  4095f0:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  409600:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  409610:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  409620:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  409630:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  409640:	0228 ffff                                   (...

00409644 <OV2640_VGA_YUV422_20FPS>:
  409644:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409654:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409664:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409674:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409684:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409694:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4096a4:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4096b4:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4096c4:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4096d4:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  4096e4:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  4096f4:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409704:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409714:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  409724:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  409734:	1000 000e 00c0 0000 0800 0000 0000 0000     ................
	...
  40974c:	435b 6f6c 6573 3a64 0020 0000 0a0d 0000     [Closed: .......
  40975c:	7277 7469 2065 6425 2520 0d64 000a 0000     write %d %d.....
  40976c:	6f43 6d6d 6e61 2064 6166 6c69 6465 0000     Command failed..
  40977c:	6c63 736f 2065 6c61 0d6c 000a 7468 7074     close all...http
  40978c:	705f 736f 2074 6f2d 6820 7474 7370 2f3a     _post -o https:/
  40979c:	622f 6769 7262 746f 6568 7372 6565 2e73     /bigbrothersees.
  4097ac:	656d 702f 736f 5f74 6d69 6761 2065 7061     me/post_image ap
  4097bc:	6c70 6369 7461 6f69 2f6e 736a 6e6f 0a0d     plication/json..
  4097cc:	0000 0000 7468 7074 615f 6464 685f 6165     ....http_add_hea
  4097dc:	6564 2072 2030 656d 7373 6761 2d65 7974     der 0 message-ty
  4097ec:	6570 6920 616d 6567 622d 6e69 0a0d 0000     pe image-bin....
  4097fc:	7277 7469 2065 2030 6425 0a0d 0000 0000     write 0 %d......
  40980c:	7468 7074 725f 6165 5f64 7473 7461 7375     http_read_status
  40981c:	3020 0a0d 0000 0000 704f 6e65 6465 0000      0......Opened..
  40982c:	704f 6e65 6465 203a 0000 0000 6577 7362     Opened: ....webs
  40983c:	636f 656b 5f74 6c63 6569 746e 2d20 2066     ocket_client -f 
  40984c:	6962 206e 7377 3a73 2f2f 6962 6267 6f72     bin wss://bigbro
  40985c:	6874 7265 6573 7365 6d2e 2f65 6f73 7275     thersees.me/sour
  40986c:	6563 615f 6475 6f69 735f 636f 656b 0d74     ce_audio_socket.
  40987c:	000a 0000 7553 6363 7365 0073 6577 7362     ....Success.webs
  40988c:	636f 656b 5f74 6c63 6569 746e 2d20 2066     ocket_client -f 
  40989c:	6962 206e 7377 3a73 2f2f 6962 6267 6f72     bin wss://bigbro
  4098ac:	6874 7265 6573 7365 6d2e 2f65 6f73 7275     thersees.me/sour
  4098bc:	6563 635f 6d61 735f 636f 656b 0d74 000a     ce_cam_socket...
  4098cc:	6466 2065 6162 6d74 6e61 742e 7478 0a0d     fde batman.txt..
  4098dc:	0000 0000 6366 2072 6162 6d74 6e61 742e     ....fcr batman.t
  4098ec:	7478 2520 0d64 000a 6425 5720 4245 0043     xt %d...%d WEBC.
  4098fc:	696c 7473 0a0d 0000 7341 6f73 6963 7461     list....Associat
  40990c:	6465 005d 6573 7574 2070 6577 0d62 000a     ed].setup web...
  40991c:	6567 2074 7973 7473 6d65 732e 6661 6d65     get system.safem
  40992c:	646f 2e65 7473 7461 7375 0a0d 0000 0000     ode.status......
  40993c:	6166 6c75 7374 705f 6972 746e 0a0d 0000     faults_print....
  40994c:	6166 6c75 7374 725f 7365 7465 0a0d 0000     faults_reset....
  40995c:	6572 6f62 746f 0a0d 0000 0000 6553 2074     reboot......Set 
  40996c:	4b4f 0000 6573 2074 7973 6320 7020 6f20     OK..set sy c p o
  40997c:	6666 0a0d 0000 0000 6573 2074 7973 6320     ff......set sy c
  40998c:	6520 6f20 6666 0a0d 0000 0000 7277 7469      e off......writ
  40999c:	2065 2030 0d30 000a 0043 0000               e 0 0...C...

004099a8 <_global_impure_ptr>:
  4099a8:	0010 2000                                   ... 

004099ac <zeroes.7035>:
  4099ac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4099bc:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  4099cc:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  4099dc:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  4099ec:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  4099fc:	0030 0000                                   0...

00409a00 <blanks.7034>:
  409a00:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409a10:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409a20:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00409a30 <__mprec_tens>:
  409a30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409a40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409a50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409a60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409a70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409a80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409a90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409aa0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409ab0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409ac0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409ad0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409ae0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409af0:	9db4 79d9 7843 44ea                         ...yCx.D

00409af8 <__mprec_bigtens>:
  409af8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409b08:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409b18:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409b20 <p05.5373>:
  409b20:	0005 0000 0019 0000 007d 0000               ........}...

00409b2c <_init>:
  409b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409b2e:	bf00      	nop
  409b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409b32:	bc08      	pop	{r3}
  409b34:	469e      	mov	lr, r3
  409b36:	4770      	bx	lr

00409b38 <__init_array_start>:
  409b38:	00405a51 	.word	0x00405a51

00409b3c <__frame_dummy_init_array_entry>:
  409b3c:	004000f1                                ..@.

00409b40 <_fini>:
  409b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409b42:	bf00      	nop
  409b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409b46:	bc08      	pop	{r3}
  409b48:	469e      	mov	lr, r3
  409b4a:	4770      	bx	lr

00409b4c <__fini_array_start>:
  409b4c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	99a4 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <lconv>:
2000043c:	9a28 0040 99dc 0040 99dc 0040 99dc 0040     (.@...@...@...@.
2000044c:	99dc 0040 99dc 0040 99dc 0040 99dc 0040     ..@...@...@...@.
2000045c:	99dc 0040 99dc 0040 ffff ffff ffff ffff     ..@...@.........
2000046c:	ffff ffff ffff 0000                         ........

20000474 <__malloc_av_>:
	...
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 

2000087c <__malloc_trim_threshold>:
2000087c:	0000 0002                                   ....

20000880 <__malloc_sbrk_base>:
20000880:	ffff ffff                                   ....
