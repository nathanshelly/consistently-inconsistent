
webcam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f94  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402f94  00402f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000438  20000000  00402f9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001248  20000438  004033d4  00020438  2**2
                  ALLOC
  4 .stack        00003000  20001680  0040461c  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013ddd  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002922  00000000  00000000  00034298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006f16  00000000  00000000  00036bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c00  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  0003e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000063ce  00000000  00000000  0003f230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d643  00000000  00000000  000455fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f512  00000000  00000000  00052c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003608  00000000  00000000  000a2154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 46 00 20 a5 1e 40 00 6d 1f 40 00 6d 1f 40 00     .F. ..@.m.@.m.@.
  400010:	6d 1f 40 00 6d 1f 40 00 6d 1f 40 00 00 00 00 00     m.@.m.@.m.@.....
	...
  40002c:	6d 1f 40 00 6d 1f 40 00 00 00 00 00 6d 1f 40 00     m.@.m.@.....m.@.
  40003c:	6d 1f 40 00 6d 1f 40 00 6d 1f 40 00 6d 1f 40 00     m.@.m.@.m.@.m.@.
  40004c:	6d 1f 40 00 6d 1f 40 00 6d 1f 40 00 6d 1f 40 00     m.@.m.@.m.@.m.@.
  40005c:	00 00 00 00 6d 1f 40 00 6d 1f 40 00 00 00 00 00     ....m.@.m.@.....
  40006c:	21 09 40 00 39 09 40 00 00 00 00 00 cd 0c 40 00     !.@.9.@.......@.
  40007c:	6d 1f 40 00 00 00 00 00 00 00 00 00 6d 1f 40 00     m.@.........m.@.
  40008c:	6d 1f 40 00 6d 1f 40 00 6d 1f 40 00 51 07 40 00     m.@.m.@.m.@.Q.@.
  40009c:	01 0b 40 00 6d 1f 40 00 6d 1f 40 00 00 00 00 00     ..@.m.@.m.@.....
	...
  4000b4:	6d 1f 40 00 6d 1f 40 00 6d 1f 40 00 6d 1f 40 00     m.@.m.@.m.@.m.@.
  4000c4:	6d 1f 40 00 6d 1f 40 00                             m.@.m.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402f9c 	.word	0x00402f9c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402f9c 	.word	0x00402f9c
  40012c:	2000043c 	.word	0x2000043c
  400130:	00402f9c 	.word	0x00402f9c
  400134:	00000000 	.word	0x00000000

00400138 <ssc_set_clock_divider>:
 * \retval SSC_RC_YES Success.
 * \retval SSC_RC_NO Invalid input value.
 */
uint32_t ssc_set_clock_divider(Ssc *p_ssc, uint32_t ul_bitrate,
		uint32_t ul_mck)
{
  400138:	b480      	push	{r7}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	60f8      	str	r0, [r7, #12]
  400140:	60b9      	str	r1, [r7, #8]
  400142:	607a      	str	r2, [r7, #4]
	if (ul_mck && ul_bitrate) {
  400144:	687b      	ldr	r3, [r7, #4]
  400146:	2b00      	cmp	r3, #0
  400148:	d00f      	beq.n	40016a <ssc_set_clock_divider+0x32>
  40014a:	68bb      	ldr	r3, [r7, #8]
  40014c:	2b00      	cmp	r3, #0
  40014e:	d00c      	beq.n	40016a <ssc_set_clock_divider+0x32>
		p_ssc->SSC_CMR = SSC_CMR_DIV(((ul_mck + ul_bitrate) / ul_bitrate) >> 1);
  400150:	687a      	ldr	r2, [r7, #4]
  400152:	68bb      	ldr	r3, [r7, #8]
  400154:	441a      	add	r2, r3
  400156:	68bb      	ldr	r3, [r7, #8]
  400158:	fbb2 f3f3 	udiv	r3, r2, r3
  40015c:	085b      	lsrs	r3, r3, #1
  40015e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  400162:	68fb      	ldr	r3, [r7, #12]
  400164:	605a      	str	r2, [r3, #4]
		return SSC_RC_YES;
  400166:	2300      	movs	r3, #0
  400168:	e000      	b.n	40016c <ssc_set_clock_divider+0x34>
	} else {
		return SSC_RC_NO;
  40016a:	2301      	movs	r3, #1
	}
}
  40016c:	4618      	mov	r0, r3
  40016e:	3714      	adds	r7, #20
  400170:	46bd      	mov	sp, r7
  400172:	bc80      	pop	{r7}
  400174:	4770      	bx	lr
	...

00400178 <ssc_i2s_set_receiver>:
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
void ssc_i2s_set_receiver(Ssc *p_ssc, uint32_t ul_mode,
		uint32_t ul_cks, uint32_t ul_ch_mode, uint32_t ul_datlen)
{
  400178:	b580      	push	{r7, lr}
  40017a:	b092      	sub	sp, #72	; 0x48
  40017c:	af00      	add	r7, sp, #0
  40017e:	60f8      	str	r0, [r7, #12]
  400180:	60b9      	str	r1, [r7, #8]
  400182:	607a      	str	r2, [r7, #4]
  400184:	603b      	str	r3, [r7, #0]
	clock_opt_t rx_clk_option;
	data_frame_opt_t rx_data_frame_option;

	/* Initialize the local variable. */
	memset((uint8_t *)&rx_clk_option, 0, sizeof(clock_opt_t));
  400186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40018a:	221c      	movs	r2, #28
  40018c:	2100      	movs	r1, #0
  40018e:	4618      	mov	r0, r3
  400190:	4b36      	ldr	r3, [pc, #216]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  400192:	4798      	blx	r3
	memset((uint8_t *)&rx_data_frame_option, 0, sizeof(data_frame_opt_t));
  400194:	f107 0310 	add.w	r3, r7, #16
  400198:	221c      	movs	r2, #28
  40019a:	2100      	movs	r1, #0
  40019c:	4618      	mov	r0, r3
  40019e:	4b33      	ldr	r3, [pc, #204]	; (40026c <ssc_i2s_set_receiver+0xf4>)
  4001a0:	4798      	blx	r3

	/* Data start: MonoLeft-Falling, MonoRight-Rising, Stero-Edge. */
	switch (ul_ch_mode) {
  4001a2:	683b      	ldr	r3, [r7, #0]
  4001a4:	2b02      	cmp	r3, #2
  4001a6:	d004      	beq.n	4001b2 <ssc_i2s_set_receiver+0x3a>
  4001a8:	2b03      	cmp	r3, #3
  4001aa:	d00a      	beq.n	4001c2 <ssc_i2s_set_receiver+0x4a>
  4001ac:	2b01      	cmp	r3, #1
  4001ae:	d004      	beq.n	4001ba <ssc_i2s_set_receiver+0x42>
  4001b0:	e00b      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_RIGHT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_RISING;
  4001b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  4001b6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001b8:	e007      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_MONO_LEFT:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_FALLING;
  4001ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4001be:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c0:	e003      	b.n	4001ca <ssc_i2s_set_receiver+0x52>
	case SSC_AUDIO_STERO:
		rx_clk_option.ul_start_sel = SSC_RCMR_START_RF_EDGE;
  4001c2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  4001c6:	647b      	str	r3, [r7, #68]	; 0x44
		break;
  4001c8:	bf00      	nop
	}
	if (ul_mode & SSC_I2S_MASTER_IN) {
  4001ca:	68bb      	ldr	r3, [r7, #8]
  4001cc:	f003 0302 	and.w	r3, r3, #2
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d022      	beq.n	40021a <ssc_i2s_set_receiver+0xa2>
		/* Stereo has 2 data words, and mono has only one data word. */
		if (SSC_AUDIO_STERO == ul_ch_mode) {
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	2b03      	cmp	r3, #3
  4001d8:	d102      	bne.n	4001e0 <ssc_i2s_set_receiver+0x68>
			rx_data_frame_option.ul_datnb = 1;
  4001da:	2301      	movs	r3, #1
  4001dc:	61bb      	str	r3, [r7, #24]
  4001de:	e001      	b.n	4001e4 <ssc_i2s_set_receiver+0x6c>
		} else {
			rx_data_frame_option.ul_datnb = 0;
  4001e0:	2300      	movs	r3, #0
  4001e2:	61bb      	str	r3, [r7, #24]
		}

		/* Configure RCMR Settings. */
		rx_clk_option.ul_cks = SSC_TCMR_CKS_MCK;
  4001e4:	2300      	movs	r3, #0
  4001e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_CONTINUOUS;
  4001e8:	2304      	movs	r3, #4
  4001ea:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  4001f0:	2300      	movs	r3, #0
  4001f2:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  4001f4:	2301      	movs	r3, #1
  4001f6:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = ul_datlen - 1;
  4001f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  4001fa:	3b01      	subs	r3, #1
  4001fc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure RFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  4001fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  400200:	3b01      	subs	r3, #1
  400202:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400204:	2380      	movs	r3, #128	; 0x80
  400206:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = ul_datlen - 1;
  400208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40020a:	3b01      	subs	r3, #1
  40020c:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NEGATIVE;
  40020e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400212:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  400214:	2300      	movs	r3, #0
  400216:	62bb      	str	r3, [r7, #40]	; 0x28
  400218:	e01b      	b.n	400252 <ssc_i2s_set_receiver+0xda>
	} else if (ul_mode & SSC_I2S_SLAVE_IN) {
  40021a:	68bb      	ldr	r3, [r7, #8]
  40021c:	f003 0308 	and.w	r3, r3, #8
  400220:	2b00      	cmp	r3, #0
  400222:	d016      	beq.n	400252 <ssc_i2s_set_receiver+0xda>
		/* Configure TCMR Settings. */
		rx_clk_option.ul_cks = ul_cks;
  400224:	687b      	ldr	r3, [r7, #4]
  400226:	62fb      	str	r3, [r7, #44]	; 0x2c
		rx_clk_option.ul_cko = SSC_TCMR_CKO_NONE;
  400228:	2300      	movs	r3, #0
  40022a:	633b      	str	r3, [r7, #48]	; 0x30
		rx_clk_option.ul_cki = 0;
  40022c:	2300      	movs	r3, #0
  40022e:	637b      	str	r3, [r7, #52]	; 0x34
		rx_clk_option.ul_ckg = 0;
  400230:	2300      	movs	r3, #0
  400232:	63bb      	str	r3, [r7, #56]	; 0x38
		rx_clk_option.ul_sttdly = 1;
  400234:	2301      	movs	r3, #1
  400236:	643b      	str	r3, [r7, #64]	; 0x40
		rx_clk_option.ul_period = 0;
  400238:	2300      	movs	r3, #0
  40023a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Configure TFMR Settings. */
		rx_data_frame_option.ul_datlen = ul_datlen - 1;
  40023c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40023e:	3b01      	subs	r3, #1
  400240:	613b      	str	r3, [r7, #16]
		rx_data_frame_option.ul_msbf = SSC_TFMR_MSBF;
  400242:	2380      	movs	r3, #128	; 0x80
  400244:	617b      	str	r3, [r7, #20]
		rx_data_frame_option.ul_fslen = 0;
  400246:	2300      	movs	r3, #0
  400248:	61fb      	str	r3, [r7, #28]
		rx_data_frame_option.ul_fsos = SSC_TFMR_FSOS_NONE;
  40024a:	2300      	movs	r3, #0
  40024c:	627b      	str	r3, [r7, #36]	; 0x24
		rx_data_frame_option.ul_fsedge = SSC_TFMR_FSEDGE_POSITIVE;
  40024e:	2300      	movs	r3, #0
  400250:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Configure the SSC receiver. */
	ssc_set_receiver(p_ssc, &rx_clk_option, &rx_data_frame_option);
  400252:	f107 0210 	add.w	r2, r7, #16
  400256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  40025a:	4619      	mov	r1, r3
  40025c:	68f8      	ldr	r0, [r7, #12]
  40025e:	4b04      	ldr	r3, [pc, #16]	; (400270 <ssc_i2s_set_receiver+0xf8>)
  400260:	4798      	blx	r3
}
  400262:	bf00      	nop
  400264:	3748      	adds	r7, #72	; 0x48
  400266:	46bd      	mov	sp, r7
  400268:	bd80      	pop	{r7, pc}
  40026a:	bf00      	nop
  40026c:	00402555 	.word	0x00402555
  400270:	004002c5 	.word	0x004002c5

00400274 <ssc_reset>:
 * \brief Reset SSC module.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_reset(Ssc *p_ssc)
{
  400274:	b480      	push	{r7}
  400276:	b083      	sub	sp, #12
  400278:	af00      	add	r7, sp, #0
  40027a:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_SWRST;
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400282:	601a      	str	r2, [r3, #0]
	p_ssc->SSC_CMR = 0;
  400284:	687b      	ldr	r3, [r7, #4]
  400286:	2200      	movs	r2, #0
  400288:	605a      	str	r2, [r3, #4]
	p_ssc->SSC_RCMR = 0;
  40028a:	687b      	ldr	r3, [r7, #4]
  40028c:	2200      	movs	r2, #0
  40028e:	611a      	str	r2, [r3, #16]
	p_ssc->SSC_RFMR = 0;
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	2200      	movs	r2, #0
  400294:	615a      	str	r2, [r3, #20]
	p_ssc->SSC_TCMR = 0;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	2200      	movs	r2, #0
  40029a:	619a      	str	r2, [r3, #24]
	p_ssc->SSC_TFMR = 0;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	2200      	movs	r2, #0
  4002a0:	61da      	str	r2, [r3, #28]
}
  4002a2:	bf00      	nop
  4002a4:	370c      	adds	r7, #12
  4002a6:	46bd      	mov	sp, r7
  4002a8:	bc80      	pop	{r7}
  4002aa:	4770      	bx	lr

004002ac <ssc_enable_rx>:
 * \brief Enable SSC receiver.
 *
 * \param p_ssc Pointer to an SSC instance.
 */
void ssc_enable_rx(Ssc *p_ssc)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	p_ssc->SSC_CR = SSC_CR_RXEN;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2201      	movs	r2, #1
  4002b8:	601a      	str	r2, [r3, #0]
}
  4002ba:	bf00      	nop
  4002bc:	370c      	adds	r7, #12
  4002be:	46bd      	mov	sp, r7
  4002c0:	bc80      	pop	{r7}
  4002c2:	4770      	bx	lr

004002c4 <ssc_set_receiver>:
 * \param p_rx_clk_opt Pointer to the receiver clock configuration structure.
 * \param p_rx_data_frame Pointer to the receiver data frame configuration structure.
 */
void ssc_set_receiver(Ssc *p_ssc, clock_opt_t *p_rx_clk_opt,
		data_frame_opt_t *p_rx_data_frame)
{
  4002c4:	b480      	push	{r7}
  4002c6:	b085      	sub	sp, #20
  4002c8:	af00      	add	r7, sp, #0
  4002ca:	60f8      	str	r0, [r7, #12]
  4002cc:	60b9      	str	r1, [r7, #8]
  4002ce:	607a      	str	r2, [r7, #4]
	if (p_rx_clk_opt == NULL) {
  4002d0:	68bb      	ldr	r3, [r7, #8]
  4002d2:	2b00      	cmp	r3, #0
  4002d4:	d103      	bne.n	4002de <ssc_set_receiver+0x1a>
		p_ssc->SSC_RCMR = 0;
  4002d6:	68fb      	ldr	r3, [r7, #12]
  4002d8:	2200      	movs	r2, #0
  4002da:	611a      	str	r2, [r3, #16]
  4002dc:	e01c      	b.n	400318 <ssc_set_receiver+0x54>
	} else {
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	691a      	ldr	r2, [r3, #16]
  4002e2:	68bb      	ldr	r3, [r7, #8]
  4002e4:	6819      	ldr	r1, [r3, #0]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002e6:	68bb      	ldr	r3, [r7, #8]
  4002e8:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  4002ea:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002ec:	68bb      	ldr	r3, [r7, #8]
  4002ee:	689b      	ldr	r3, [r3, #8]
  4002f0:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_ckg |
  4002f2:	68bb      	ldr	r3, [r7, #8]
  4002f4:	68db      	ldr	r3, [r3, #12]
				p_rx_clk_opt->ul_cko | p_rx_clk_opt->ul_cki |
  4002f6:	4319      	orrs	r1, r3
				p_rx_clk_opt->ul_start_sel |
  4002f8:	68bb      	ldr	r3, [r7, #8]
  4002fa:	699b      	ldr	r3, [r3, #24]
				p_rx_clk_opt->ul_ckg |
  4002fc:	4319      	orrs	r1, r3
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  4002fe:	68bb      	ldr	r3, [r7, #8]
  400300:	691b      	ldr	r3, [r3, #16]
  400302:	061b      	lsls	r3, r3, #24
				p_rx_clk_opt->ul_start_sel |
  400304:	4319      	orrs	r1, r3
				SSC_RCMR_STTDLY(p_rx_clk_opt->ul_sttdly);
  400306:	68bb      	ldr	r3, [r7, #8]
  400308:	695b      	ldr	r3, [r3, #20]
  40030a:	041b      	lsls	r3, r3, #16
  40030c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				SSC_RCMR_PERIOD(p_rx_clk_opt->ul_period) |
  400310:	430b      	orrs	r3, r1
		p_ssc->SSC_RCMR |= p_rx_clk_opt->ul_cks |
  400312:	431a      	orrs	r2, r3
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	611a      	str	r2, [r3, #16]
	}

	if (p_rx_data_frame == NULL) {
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	2b00      	cmp	r3, #0
  40031c:	d103      	bne.n	400326 <ssc_set_receiver+0x62>
		p_ssc->SSC_RFMR = 0;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	2200      	movs	r2, #0
  400322:	615a      	str	r2, [r3, #20]
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
				p_rx_data_frame->ul_fsos |
				p_rx_data_frame->ul_fsedge;
	}
}
  400324:	e021      	b.n	40036a <ssc_set_receiver+0xa6>
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400326:	68fb      	ldr	r3, [r7, #12]
  400328:	695a      	ldr	r2, [r3, #20]
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	f003 011f 	and.w	r1, r3, #31
				p_rx_data_frame->ul_msbf |
  400332:	687b      	ldr	r3, [r7, #4]
  400334:	685b      	ldr	r3, [r3, #4]
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400336:	4319      	orrs	r1, r3
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  400338:	687b      	ldr	r3, [r7, #4]
  40033a:	689b      	ldr	r3, [r3, #8]
  40033c:	021b      	lsls	r3, r3, #8
  40033e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
				p_rx_data_frame->ul_msbf |
  400342:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	68db      	ldr	r3, [r3, #12]
  400348:	041b      	lsls	r3, r3, #16
  40034a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
				SSC_RFMR_DATNB(p_rx_data_frame->ul_datnb) |
  40034e:	4319      	orrs	r1, r3
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	691b      	ldr	r3, [r3, #16]
  400354:	071b      	lsls	r3, r3, #28
				SSC_RFMR_FSLEN(p_rx_data_frame->ul_fslen) |
  400356:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsos |
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	695b      	ldr	r3, [r3, #20]
				SSC_RFMR_FSLEN_EXT(p_rx_data_frame->ul_fslen_ext) |
  40035c:	4319      	orrs	r1, r3
				p_rx_data_frame->ul_fsedge;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	699b      	ldr	r3, [r3, #24]
				p_rx_data_frame->ul_fsos |
  400362:	430b      	orrs	r3, r1
		p_ssc->SSC_RFMR |= SSC_RFMR_DATLEN(p_rx_data_frame->ul_datlen) |
  400364:	431a      	orrs	r2, r3
  400366:	68fb      	ldr	r3, [r7, #12]
  400368:	615a      	str	r2, [r3, #20]
}
  40036a:	bf00      	nop
  40036c:	3714      	adds	r7, #20
  40036e:	46bd      	mov	sp, r7
  400370:	bc80      	pop	{r7}
  400372:	4770      	bx	lr

00400374 <ssc_enable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_enable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  400374:	b480      	push	{r7}
  400376:	b083      	sub	sp, #12
  400378:	af00      	add	r7, sp, #0
  40037a:	6078      	str	r0, [r7, #4]
  40037c:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IER = ul_sources;
  40037e:	687b      	ldr	r3, [r7, #4]
  400380:	683a      	ldr	r2, [r7, #0]
  400382:	645a      	str	r2, [r3, #68]	; 0x44
}
  400384:	bf00      	nop
  400386:	370c      	adds	r7, #12
  400388:	46bd      	mov	sp, r7
  40038a:	bc80      	pop	{r7}
  40038c:	4770      	bx	lr

0040038e <ssc_disable_interrupt>:
 *
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void ssc_disable_interrupt(Ssc *p_ssc, uint32_t ul_sources)
{
  40038e:	b480      	push	{r7}
  400390:	b083      	sub	sp, #12
  400392:	af00      	add	r7, sp, #0
  400394:	6078      	str	r0, [r7, #4]
  400396:	6039      	str	r1, [r7, #0]
	p_ssc->SSC_IDR = ul_sources;
  400398:	687b      	ldr	r3, [r7, #4]
  40039a:	683a      	ldr	r2, [r7, #0]
  40039c:	649a      	str	r2, [r3, #72]	; 0x48
}
  40039e:	bf00      	nop
  4003a0:	370c      	adds	r7, #12
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bc80      	pop	{r7}
  4003a6:	4770      	bx	lr

004003a8 <ssc_get_status>:
 * \param p_ssc Pointer to an SSC instance.
 *
 * \return The SSC status value.
 */
uint32_t ssc_get_status(Ssc *p_ssc)
{
  4003a8:	b480      	push	{r7}
  4003aa:	b083      	sub	sp, #12
  4003ac:	af00      	add	r7, sp, #0
  4003ae:	6078      	str	r0, [r7, #4]
	return p_ssc->SSC_SR;
  4003b0:	687b      	ldr	r3, [r7, #4]
  4003b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  4003b4:	4618      	mov	r0, r3
  4003b6:	370c      	adds	r7, #12
  4003b8:	46bd      	mov	sp, r7
  4003ba:	bc80      	pop	{r7}
  4003bc:	4770      	bx	lr

004003be <ssc_read>:
 *
 * \retval SSC_RC_ERROR Time-out.
 * \retval SSC_RC_OK Success.
 */
uint32_t ssc_read(Ssc *p_ssc, uint32_t *ul_data)
{
  4003be:	b480      	push	{r7}
  4003c0:	b085      	sub	sp, #20
  4003c2:	af00      	add	r7, sp, #0
  4003c4:	6078      	str	r0, [r7, #4]
  4003c6:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout = SSC_DEFAULT_TIMEOUT;
  4003c8:	f242 7310 	movw	r3, #10000	; 0x2710
  4003cc:	60fb      	str	r3, [r7, #12]

	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003ce:	e006      	b.n	4003de <ssc_read+0x20>
		if (!ul_timeout--) {
  4003d0:	68fb      	ldr	r3, [r7, #12]
  4003d2:	1e5a      	subs	r2, r3, #1
  4003d4:	60fa      	str	r2, [r7, #12]
  4003d6:	2b00      	cmp	r3, #0
  4003d8:	d101      	bne.n	4003de <ssc_read+0x20>
			return SSC_RC_ERROR;
  4003da:	2301      	movs	r3, #1
  4003dc:	e00a      	b.n	4003f4 <ssc_read+0x36>
	while (!(p_ssc->SSC_SR & SSC_SR_RXRDY)) {
  4003de:	687b      	ldr	r3, [r7, #4]
  4003e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4003e2:	f003 0310 	and.w	r3, r3, #16
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d0f2      	beq.n	4003d0 <ssc_read+0x12>
		}
	}

	*ul_data = p_ssc->SSC_RHR;
  4003ea:	687b      	ldr	r3, [r7, #4]
  4003ec:	6a1a      	ldr	r2, [r3, #32]
  4003ee:	683b      	ldr	r3, [r7, #0]
  4003f0:	601a      	str	r2, [r3, #0]
	return SSC_RC_OK;
  4003f2:	2300      	movs	r3, #0
}
  4003f4:	4618      	mov	r0, r3
  4003f6:	3714      	adds	r7, #20
  4003f8:	46bd      	mov	sp, r7
  4003fa:	bc80      	pop	{r7}
  4003fc:	4770      	bx	lr

004003fe <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4003fe:	b480      	push	{r7}
  400400:	b087      	sub	sp, #28
  400402:	af00      	add	r7, sp, #0
  400404:	60f8      	str	r0, [r7, #12]
  400406:	60b9      	str	r1, [r7, #8]
  400408:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40040a:	68fa      	ldr	r2, [r7, #12]
  40040c:	68bb      	ldr	r3, [r7, #8]
  40040e:	019b      	lsls	r3, r3, #6
  400410:	4413      	add	r3, r2
  400412:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400414:	697b      	ldr	r3, [r7, #20]
  400416:	2202      	movs	r2, #2
  400418:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40041a:	697b      	ldr	r3, [r7, #20]
  40041c:	f04f 32ff 	mov.w	r2, #4294967295
  400420:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400422:	697b      	ldr	r3, [r7, #20]
  400424:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400426:	697b      	ldr	r3, [r7, #20]
  400428:	687a      	ldr	r2, [r7, #4]
  40042a:	605a      	str	r2, [r3, #4]
}
  40042c:	bf00      	nop
  40042e:	371c      	adds	r7, #28
  400430:	46bd      	mov	sp, r7
  400432:	bc80      	pop	{r7}
  400434:	4770      	bx	lr

00400436 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400436:	b480      	push	{r7}
  400438:	b083      	sub	sp, #12
  40043a:	af00      	add	r7, sp, #0
  40043c:	6078      	str	r0, [r7, #4]
  40043e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400440:	687a      	ldr	r2, [r7, #4]
  400442:	683b      	ldr	r3, [r7, #0]
  400444:	019b      	lsls	r3, r3, #6
  400446:	4413      	add	r3, r2
  400448:	2205      	movs	r2, #5
  40044a:	601a      	str	r2, [r3, #0]
}
  40044c:	bf00      	nop
  40044e:	370c      	adds	r7, #12
  400450:	46bd      	mov	sp, r7
  400452:	bc80      	pop	{r7}
  400454:	4770      	bx	lr

00400456 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  400456:	b480      	push	{r7}
  400458:	b085      	sub	sp, #20
  40045a:	af00      	add	r7, sp, #0
  40045c:	60f8      	str	r0, [r7, #12]
  40045e:	60b9      	str	r1, [r7, #8]
  400460:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400462:	68fa      	ldr	r2, [r7, #12]
  400464:	68bb      	ldr	r3, [r7, #8]
  400466:	019b      	lsls	r3, r3, #6
  400468:	4413      	add	r3, r2
  40046a:	331c      	adds	r3, #28
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	601a      	str	r2, [r3, #0]
}
  400470:	bf00      	nop
  400472:	3714      	adds	r7, #20
  400474:	46bd      	mov	sp, r7
  400476:	bc80      	pop	{r7}
  400478:	4770      	bx	lr

0040047a <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40047a:	b480      	push	{r7}
  40047c:	b087      	sub	sp, #28
  40047e:	af00      	add	r7, sp, #0
  400480:	60f8      	str	r0, [r7, #12]
  400482:	60b9      	str	r1, [r7, #8]
  400484:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400486:	68fa      	ldr	r2, [r7, #12]
  400488:	68bb      	ldr	r3, [r7, #8]
  40048a:	019b      	lsls	r3, r3, #6
  40048c:	4413      	add	r3, r2
  40048e:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  400490:	697b      	ldr	r3, [r7, #20]
  400492:	687a      	ldr	r2, [r7, #4]
  400494:	625a      	str	r2, [r3, #36]	; 0x24
}
  400496:	bf00      	nop
  400498:	371c      	adds	r7, #28
  40049a:	46bd      	mov	sp, r7
  40049c:	bc80      	pop	{r7}
  40049e:	4770      	bx	lr

004004a0 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b085      	sub	sp, #20
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
  4004a8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004aa:	687a      	ldr	r2, [r7, #4]
  4004ac:	683b      	ldr	r3, [r7, #0]
  4004ae:	019b      	lsls	r3, r3, #6
  4004b0:	4413      	add	r3, r2
  4004b2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	6a1b      	ldr	r3, [r3, #32]
}
  4004b8:	4618      	mov	r0, r3
  4004ba:	3714      	adds	r7, #20
  4004bc:	46bd      	mov	sp, r7
  4004be:	bc80      	pop	{r7}
  4004c0:	4770      	bx	lr

004004c2 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4004c2:	b480      	push	{r7}
  4004c4:	b08d      	sub	sp, #52	; 0x34
  4004c6:	af00      	add	r7, sp, #0
  4004c8:	60f8      	str	r0, [r7, #12]
  4004ca:	60b9      	str	r1, [r7, #8]
  4004cc:	607a      	str	r2, [r7, #4]
  4004ce:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004d0:	2302      	movs	r3, #2
  4004d2:	613b      	str	r3, [r7, #16]
  4004d4:	2308      	movs	r3, #8
  4004d6:	617b      	str	r3, [r7, #20]
  4004d8:	2320      	movs	r3, #32
  4004da:	61bb      	str	r3, [r7, #24]
  4004dc:	2380      	movs	r3, #128	; 0x80
  4004de:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4004e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004e2:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4004e4:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4004e6:	2300      	movs	r3, #0
  4004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4004ea:	e01a      	b.n	400522 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4004ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004ee:	009b      	lsls	r3, r3, #2
  4004f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004f4:	4413      	add	r3, r2
  4004f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4004fa:	68ba      	ldr	r2, [r7, #8]
  4004fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400500:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400502:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400504:	0c1b      	lsrs	r3, r3, #16
  400506:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  400508:	68fa      	ldr	r2, [r7, #12]
  40050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40050c:	429a      	cmp	r2, r3
  40050e:	d901      	bls.n	400514 <tc_find_mck_divisor+0x52>
			return 0;
  400510:	2300      	movs	r3, #0
  400512:	e023      	b.n	40055c <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400514:	68fa      	ldr	r2, [r7, #12]
  400516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400518:	429a      	cmp	r2, r3
  40051a:	d206      	bcs.n	40052a <tc_find_mck_divisor+0x68>
			ul_index++) {
  40051c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40051e:	3301      	adds	r3, #1
  400520:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400524:	2b04      	cmp	r3, #4
  400526:	d9e1      	bls.n	4004ec <tc_find_mck_divisor+0x2a>
  400528:	e000      	b.n	40052c <tc_find_mck_divisor+0x6a>
			break;
  40052a:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40052e:	2b04      	cmp	r3, #4
  400530:	d901      	bls.n	400536 <tc_find_mck_divisor+0x74>
		return 0;
  400532:	2300      	movs	r3, #0
  400534:	e012      	b.n	40055c <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400536:	687b      	ldr	r3, [r7, #4]
  400538:	2b00      	cmp	r3, #0
  40053a:	d008      	beq.n	40054e <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40053e:	009b      	lsls	r3, r3, #2
  400540:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400544:	4413      	add	r3, r2
  400546:	f853 2c20 	ldr.w	r2, [r3, #-32]
  40054a:	687b      	ldr	r3, [r7, #4]
  40054c:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  40054e:	683b      	ldr	r3, [r7, #0]
  400550:	2b00      	cmp	r3, #0
  400552:	d002      	beq.n	40055a <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  400554:	683b      	ldr	r3, [r7, #0]
  400556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400558:	601a      	str	r2, [r3, #0]
	}

	return 1;
  40055a:	2301      	movs	r3, #1
}
  40055c:	4618      	mov	r0, r3
  40055e:	3734      	adds	r7, #52	; 0x34
  400560:	46bd      	mov	sp, r7
  400562:	bc80      	pop	{r7}
  400564:	4770      	bx	lr

00400566 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400566:	b480      	push	{r7}
  400568:	b083      	sub	sp, #12
  40056a:	af00      	add	r7, sp, #0
  40056c:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40056e:	687b      	ldr	r3, [r7, #4]
  400570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400574:	605a      	str	r2, [r3, #4]

}
  400576:	bf00      	nop
  400578:	370c      	adds	r7, #12
  40057a:	46bd      	mov	sp, r7
  40057c:	bc80      	pop	{r7}
  40057e:	4770      	bx	lr

00400580 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400580:	b480      	push	{r7}
  400582:	b083      	sub	sp, #12
  400584:	af00      	add	r7, sp, #0
  400586:	4603      	mov	r3, r0
  400588:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40058a:	4908      	ldr	r1, [pc, #32]	; (4005ac <NVIC_EnableIRQ+0x2c>)
  40058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400590:	095b      	lsrs	r3, r3, #5
  400592:	79fa      	ldrb	r2, [r7, #7]
  400594:	f002 021f 	and.w	r2, r2, #31
  400598:	2001      	movs	r0, #1
  40059a:	fa00 f202 	lsl.w	r2, r0, r2
  40059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005a2:	bf00      	nop
  4005a4:	370c      	adds	r7, #12
  4005a6:	46bd      	mov	sp, r7
  4005a8:	bc80      	pop	{r7}
  4005aa:	4770      	bx	lr
  4005ac:	e000e100 	.word	0xe000e100

004005b0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4005b0:	b480      	push	{r7}
  4005b2:	b083      	sub	sp, #12
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	4603      	mov	r3, r0
  4005b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4005ba:	4909      	ldr	r1, [pc, #36]	; (4005e0 <NVIC_DisableIRQ+0x30>)
  4005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005c0:	095b      	lsrs	r3, r3, #5
  4005c2:	79fa      	ldrb	r2, [r7, #7]
  4005c4:	f002 021f 	and.w	r2, r2, #31
  4005c8:	2001      	movs	r0, #1
  4005ca:	fa00 f202 	lsl.w	r2, r0, r2
  4005ce:	3320      	adds	r3, #32
  4005d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4005d4:	bf00      	nop
  4005d6:	370c      	adds	r7, #12
  4005d8:	46bd      	mov	sp, r7
  4005da:	bc80      	pop	{r7}
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	e000e100 	.word	0xe000e100

004005e4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b083      	sub	sp, #12
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	4603      	mov	r3, r0
  4005ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4005ee:	4909      	ldr	r1, [pc, #36]	; (400614 <NVIC_ClearPendingIRQ+0x30>)
  4005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4005f4:	095b      	lsrs	r3, r3, #5
  4005f6:	79fa      	ldrb	r2, [r7, #7]
  4005f8:	f002 021f 	and.w	r2, r2, #31
  4005fc:	2001      	movs	r0, #1
  4005fe:	fa00 f202 	lsl.w	r2, r0, r2
  400602:	3360      	adds	r3, #96	; 0x60
  400604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400608:	bf00      	nop
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	e000e100 	.word	0xe000e100

00400618 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	4603      	mov	r3, r0
  400620:	6039      	str	r1, [r7, #0]
  400622:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400624:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400628:	2b00      	cmp	r3, #0
  40062a:	da0b      	bge.n	400644 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40062c:	490d      	ldr	r1, [pc, #52]	; (400664 <NVIC_SetPriority+0x4c>)
  40062e:	79fb      	ldrb	r3, [r7, #7]
  400630:	f003 030f 	and.w	r3, r3, #15
  400634:	3b04      	subs	r3, #4
  400636:	683a      	ldr	r2, [r7, #0]
  400638:	b2d2      	uxtb	r2, r2
  40063a:	0112      	lsls	r2, r2, #4
  40063c:	b2d2      	uxtb	r2, r2
  40063e:	440b      	add	r3, r1
  400640:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  400642:	e009      	b.n	400658 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400644:	4908      	ldr	r1, [pc, #32]	; (400668 <NVIC_SetPriority+0x50>)
  400646:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40064a:	683a      	ldr	r2, [r7, #0]
  40064c:	b2d2      	uxtb	r2, r2
  40064e:	0112      	lsls	r2, r2, #4
  400650:	b2d2      	uxtb	r2, r2
  400652:	440b      	add	r3, r1
  400654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  400658:	bf00      	nop
  40065a:	370c      	adds	r7, #12
  40065c:	46bd      	mov	sp, r7
  40065e:	bc80      	pop	{r7}
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	e000ed00 	.word	0xe000ed00
  400668:	e000e100 	.word	0xe000e100

0040066c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40066c:	b480      	push	{r7}
  40066e:	b083      	sub	sp, #12
  400670:	af00      	add	r7, sp, #0
  400672:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400674:	687b      	ldr	r3, [r7, #4]
  400676:	2b07      	cmp	r3, #7
  400678:	d825      	bhi.n	4006c6 <osc_get_rate+0x5a>
  40067a:	a201      	add	r2, pc, #4	; (adr r2, 400680 <osc_get_rate+0x14>)
  40067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400680:	004006a1 	.word	0x004006a1
  400684:	004006a7 	.word	0x004006a7
  400688:	004006ad 	.word	0x004006ad
  40068c:	004006b3 	.word	0x004006b3
  400690:	004006b7 	.word	0x004006b7
  400694:	004006bb 	.word	0x004006bb
  400698:	004006bf 	.word	0x004006bf
  40069c:	004006c3 	.word	0x004006c3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4006a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4006a4:	e010      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4006a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006aa:	e00d      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4006ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006b0:	e00a      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4006b2:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <osc_get_rate+0x68>)
  4006b4:	e008      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4006b6:	4b08      	ldr	r3, [pc, #32]	; (4006d8 <osc_get_rate+0x6c>)
  4006b8:	e006      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4006ba:	4b08      	ldr	r3, [pc, #32]	; (4006dc <osc_get_rate+0x70>)
  4006bc:	e004      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4006be:	4b07      	ldr	r3, [pc, #28]	; (4006dc <osc_get_rate+0x70>)
  4006c0:	e002      	b.n	4006c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4006c2:	4b06      	ldr	r3, [pc, #24]	; (4006dc <osc_get_rate+0x70>)
  4006c4:	e000      	b.n	4006c8 <osc_get_rate+0x5c>
	}

	return 0;
  4006c6:	2300      	movs	r3, #0
}
  4006c8:	4618      	mov	r0, r3
  4006ca:	370c      	adds	r7, #12
  4006cc:	46bd      	mov	sp, r7
  4006ce:	bc80      	pop	{r7}
  4006d0:	4770      	bx	lr
  4006d2:	bf00      	nop
  4006d4:	003d0900 	.word	0x003d0900
  4006d8:	007a1200 	.word	0x007a1200
  4006dc:	00b71b00 	.word	0x00b71b00

004006e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4006e0:	b580      	push	{r7, lr}
  4006e2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4006e4:	2006      	movs	r0, #6
  4006e6:	4b04      	ldr	r3, [pc, #16]	; (4006f8 <sysclk_get_main_hz+0x18>)
  4006e8:	4798      	blx	r3
  4006ea:	4602      	mov	r2, r0
  4006ec:	4613      	mov	r3, r2
  4006ee:	009b      	lsls	r3, r3, #2
  4006f0:	4413      	add	r3, r2
  4006f2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4006f4:	4618      	mov	r0, r3
  4006f6:	bd80      	pop	{r7, pc}
  4006f8:	0040066d 	.word	0x0040066d

004006fc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <sysclk_get_cpu_hz+0x10>)
  400702:	4798      	blx	r3
  400704:	4603      	mov	r3, r0
  400706:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400708:	4618      	mov	r0, r3
  40070a:	bd80      	pop	{r7, pc}
  40070c:	004006e1 	.word	0x004006e1

00400710 <do_it>:

/** Receive index. */
uint32_t i2s_buf_index = 0;


void do_it(void){
  400710:	b580      	push	{r7, lr}
  400712:	af00      	add	r7, sp, #0
	
	i2s_rec_done = 0;
  400714:	4b0a      	ldr	r3, [pc, #40]	; (400740 <do_it+0x30>)
  400716:	2200      	movs	r2, #0
  400718:	701a      	strb	r2, [r3, #0]
	i2s_buf_index = 0;
  40071a:	4b0a      	ldr	r3, [pc, #40]	; (400744 <do_it+0x34>)
  40071c:	2200      	movs	r2, #0
  40071e:	601a      	str	r2, [r3, #0]
	
	ssc_enable_interrupt(SSC, SSC_IDR_RXRDY);
  400720:	2110      	movs	r1, #16
  400722:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400726:	4b08      	ldr	r3, [pc, #32]	; (400748 <do_it+0x38>)
  400728:	4798      	blx	r3
	
	while (! i2s_rec_done){
  40072a:	bf00      	nop
  40072c:	4b04      	ldr	r3, [pc, #16]	; (400740 <do_it+0x30>)
  40072e:	781b      	ldrb	r3, [r3, #0]
  400730:	b2db      	uxtb	r3, r3
  400732:	2b00      	cmp	r3, #0
  400734:	d0fa      	beq.n	40072c <do_it+0x1c>
		
	}
	
	blink_LED(100);
  400736:	2064      	movs	r0, #100	; 0x64
  400738:	4b04      	ldr	r3, [pc, #16]	; (40074c <do_it+0x3c>)
  40073a:	4798      	blx	r3
	
}
  40073c:	bf00      	nop
  40073e:	bd80      	pop	{r7, pc}
  400740:	20000454 	.word	0x20000454
  400744:	20000458 	.word	0x20000458
  400748:	00400375 	.word	0x00400375
  40074c:	00400e21 	.word	0x00400e21

00400750 <SSC_Handler>:
/**
 * \brief Synchronous Serial Controller Handler.
 *
 */
void SSC_Handler(void)
{
  400750:	b580      	push	{r7, lr}
  400752:	b082      	sub	sp, #8
  400754:	af00      	add	r7, sp, #0
	uint32_t ul_data;
	ssc_get_status(SSC);
  400756:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  40075a:	4b11      	ldr	r3, [pc, #68]	; (4007a0 <SSC_Handler+0x50>)
  40075c:	4798      	blx	r3

	ssc_read(SSC, &ul_data);
  40075e:	1d3b      	adds	r3, r7, #4
  400760:	4619      	mov	r1, r3
  400762:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400766:	4b0f      	ldr	r3, [pc, #60]	; (4007a4 <SSC_Handler+0x54>)
  400768:	4798      	blx	r3
	i2s_rec_buf[i2s_buf_index++] = ul_data;
  40076a:	4b0f      	ldr	r3, [pc, #60]	; (4007a8 <SSC_Handler+0x58>)
  40076c:	681b      	ldr	r3, [r3, #0]
  40076e:	1c5a      	adds	r2, r3, #1
  400770:	490d      	ldr	r1, [pc, #52]	; (4007a8 <SSC_Handler+0x58>)
  400772:	600a      	str	r2, [r1, #0]
  400774:	687a      	ldr	r2, [r7, #4]
  400776:	490d      	ldr	r1, [pc, #52]	; (4007ac <SSC_Handler+0x5c>)
  400778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (NUMBER_OF_SAMPLES == i2s_buf_index) {
  40077c:	4b0a      	ldr	r3, [pc, #40]	; (4007a8 <SSC_Handler+0x58>)
  40077e:	681b      	ldr	r3, [r3, #0]
  400780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400784:	d107      	bne.n	400796 <SSC_Handler+0x46>
		i2s_rec_done = 1;
  400786:	4b0a      	ldr	r3, [pc, #40]	; (4007b0 <SSC_Handler+0x60>)
  400788:	2201      	movs	r2, #1
  40078a:	701a      	strb	r2, [r3, #0]
		ssc_disable_interrupt(SSC, SSC_IDR_RXRDY);
  40078c:	2110      	movs	r1, #16
  40078e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  400792:	4b08      	ldr	r3, [pc, #32]	; (4007b4 <SSC_Handler+0x64>)
  400794:	4798      	blx	r3
	}
}
  400796:	bf00      	nop
  400798:	3708      	adds	r7, #8
  40079a:	46bd      	mov	sp, r7
  40079c:	bd80      	pop	{r7, pc}
  40079e:	bf00      	nop
  4007a0:	004003a9 	.word	0x004003a9
  4007a4:	004003bf 	.word	0x004003bf
  4007a8:	20000458 	.word	0x20000458
  4007ac:	200006d8 	.word	0x200006d8
  4007b0:	20000454 	.word	0x20000454
  4007b4:	0040038f 	.word	0x0040038f

004007b8 <configure_i2s>:


void configure_i2s(void){
  4007b8:	b590      	push	{r4, r7, lr}
  4007ba:	b085      	sub	sp, #20
  4007bc:	af02      	add	r7, sp, #8
 * \param p_ssc Pointer to an SSC instance.
 * \param ul_bitrate Desired bit clock.
 * \param ul_mck MCK clock.
*/
	/* Initialize the SSC module and work in loop mode. */
	pmc_enable_periph_clk(ID_SSC);
  4007be:	2016      	movs	r0, #22
  4007c0:	4b18      	ldr	r3, [pc, #96]	; (400824 <configure_i2s+0x6c>)
  4007c2:	4798      	blx	r3
	ssc_reset(SSC);
  4007c4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007c8:	4b17      	ldr	r3, [pc, #92]	; (400828 <configure_i2s+0x70>)
  4007ca:	4798      	blx	r3
	uint32_t ul_mck = sysclk_get_cpu_hz();
  4007cc:	4b17      	ldr	r3, [pc, #92]	; (40082c <configure_i2s+0x74>)
  4007ce:	4798      	blx	r3
  4007d0:	6078      	str	r0, [r7, #4]
	
	if (!ssc_set_clock_divider(SSC, SSC_BIT_RATE, ul_mck) == SSC_RC_YES){
  4007d2:	687a      	ldr	r2, [r7, #4]
  4007d4:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
  4007d8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007dc:	4b14      	ldr	r3, [pc, #80]	; (400830 <configure_i2s+0x78>)
  4007de:	4798      	blx	r3
  4007e0:	4603      	mov	r3, r0
  4007e2:	2b00      	cmp	r3, #0
  4007e4:	d11a      	bne.n	40081c <configure_i2s+0x64>
 *
 * \param ul_cks Source clock selection while working in SSC_I2S_SLAVE_IN mode.
 * \param ul_ch_mode Channel mode, stereo or mono.
 * \param ul_datlen Data length for one channel.
 */
	ssc_i2s_set_receiver(SSC, SSC_I2S_MASTER_IN, SSC_RCMR_CKS_TK, SSC_AUDIO_MONO_LEFT, OVER_SAMPLE_RATE);
  4007e6:	2340      	movs	r3, #64	; 0x40
  4007e8:	9300      	str	r3, [sp, #0]
  4007ea:	2301      	movs	r3, #1
  4007ec:	2201      	movs	r2, #1
  4007ee:	2102      	movs	r1, #2
  4007f0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007f4:	4c0f      	ldr	r4, [pc, #60]	; (400834 <configure_i2s+0x7c>)
  4007f6:	47a0      	blx	r4

	/* Enable the tx and rx function. */
	ssc_enable_rx(SSC);
  4007f8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
  4007fc:	4b0e      	ldr	r3, [pc, #56]	; (400838 <configure_i2s+0x80>)
  4007fe:	4798      	blx	r3

	/* Configure the RX interrupt. */
	//ssc_enable_interrupt(SSC, SSC_IER_RXRDY);

	/* Enable SSC interrupt line from the core */
	NVIC_DisableIRQ(SSC_IRQn);
  400800:	2016      	movs	r0, #22
  400802:	4b0e      	ldr	r3, [pc, #56]	; (40083c <configure_i2s+0x84>)
  400804:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SSC_IRQn);
  400806:	2016      	movs	r0, #22
  400808:	4b0d      	ldr	r3, [pc, #52]	; (400840 <configure_i2s+0x88>)
  40080a:	4798      	blx	r3
	NVIC_SetPriority(SSC_IRQn, SSC_IRQ_PRIO);
  40080c:	2104      	movs	r1, #4
  40080e:	2016      	movs	r0, #22
  400810:	4b0c      	ldr	r3, [pc, #48]	; (400844 <configure_i2s+0x8c>)
  400812:	4798      	blx	r3
	NVIC_EnableIRQ(SSC_IRQn);
  400814:	2016      	movs	r0, #22
  400816:	4b0c      	ldr	r3, [pc, #48]	; (400848 <configure_i2s+0x90>)
  400818:	4798      	blx	r3
  40081a:	e000      	b.n	40081e <configure_i2s+0x66>
		return 1;
  40081c:	bf00      	nop

}
  40081e:	370c      	adds	r7, #12
  400820:	46bd      	mov	sp, r7
  400822:	bd90      	pop	{r4, r7, pc}
  400824:	00401aa9 	.word	0x00401aa9
  400828:	00400275 	.word	0x00400275
  40082c:	004006fd 	.word	0x004006fd
  400830:	00400139 	.word	0x00400139
  400834:	00400179 	.word	0x00400179
  400838:	004002ad 	.word	0x004002ad
  40083c:	004005b1 	.word	0x004005b1
  400840:	004005e5 	.word	0x004005e5
  400844:	00400619 	.word	0x00400619
  400848:	00400581 	.word	0x00400581

0040084c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40084c:	b580      	push	{r7, lr}
  40084e:	b084      	sub	sp, #16
  400850:	af00      	add	r7, sp, #0
  400852:	6078      	str	r0, [r7, #4]
  400854:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400856:	6878      	ldr	r0, [r7, #4]
  400858:	4b2c      	ldr	r3, [pc, #176]	; (40090c <pio_handler_process+0xc0>)
  40085a:	4798      	blx	r3
  40085c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40085e:	6878      	ldr	r0, [r7, #4]
  400860:	4b2b      	ldr	r3, [pc, #172]	; (400910 <pio_handler_process+0xc4>)
  400862:	4798      	blx	r3
  400864:	4602      	mov	r2, r0
  400866:	68fb      	ldr	r3, [r7, #12]
  400868:	4013      	ands	r3, r2
  40086a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40086c:	68fb      	ldr	r3, [r7, #12]
  40086e:	2b00      	cmp	r3, #0
  400870:	d03c      	beq.n	4008ec <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400872:	2300      	movs	r3, #0
  400874:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400876:	e034      	b.n	4008e2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400878:	4a26      	ldr	r2, [pc, #152]	; (400914 <pio_handler_process+0xc8>)
  40087a:	68bb      	ldr	r3, [r7, #8]
  40087c:	011b      	lsls	r3, r3, #4
  40087e:	4413      	add	r3, r2
  400880:	681a      	ldr	r2, [r3, #0]
  400882:	683b      	ldr	r3, [r7, #0]
  400884:	429a      	cmp	r2, r3
  400886:	d126      	bne.n	4008d6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400888:	4a22      	ldr	r2, [pc, #136]	; (400914 <pio_handler_process+0xc8>)
  40088a:	68bb      	ldr	r3, [r7, #8]
  40088c:	011b      	lsls	r3, r3, #4
  40088e:	4413      	add	r3, r2
  400890:	3304      	adds	r3, #4
  400892:	681a      	ldr	r2, [r3, #0]
  400894:	68fb      	ldr	r3, [r7, #12]
  400896:	4013      	ands	r3, r2
  400898:	2b00      	cmp	r3, #0
  40089a:	d01c      	beq.n	4008d6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40089c:	4a1d      	ldr	r2, [pc, #116]	; (400914 <pio_handler_process+0xc8>)
  40089e:	68bb      	ldr	r3, [r7, #8]
  4008a0:	011b      	lsls	r3, r3, #4
  4008a2:	4413      	add	r3, r2
  4008a4:	330c      	adds	r3, #12
  4008a6:	681b      	ldr	r3, [r3, #0]
  4008a8:	491a      	ldr	r1, [pc, #104]	; (400914 <pio_handler_process+0xc8>)
  4008aa:	68ba      	ldr	r2, [r7, #8]
  4008ac:	0112      	lsls	r2, r2, #4
  4008ae:	440a      	add	r2, r1
  4008b0:	6810      	ldr	r0, [r2, #0]
  4008b2:	4918      	ldr	r1, [pc, #96]	; (400914 <pio_handler_process+0xc8>)
  4008b4:	68ba      	ldr	r2, [r7, #8]
  4008b6:	0112      	lsls	r2, r2, #4
  4008b8:	440a      	add	r2, r1
  4008ba:	3204      	adds	r2, #4
  4008bc:	6812      	ldr	r2, [r2, #0]
  4008be:	4611      	mov	r1, r2
  4008c0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008c2:	4a14      	ldr	r2, [pc, #80]	; (400914 <pio_handler_process+0xc8>)
  4008c4:	68bb      	ldr	r3, [r7, #8]
  4008c6:	011b      	lsls	r3, r3, #4
  4008c8:	4413      	add	r3, r2
  4008ca:	3304      	adds	r3, #4
  4008cc:	681b      	ldr	r3, [r3, #0]
  4008ce:	43db      	mvns	r3, r3
  4008d0:	68fa      	ldr	r2, [r7, #12]
  4008d2:	4013      	ands	r3, r2
  4008d4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4008d6:	68bb      	ldr	r3, [r7, #8]
  4008d8:	3301      	adds	r3, #1
  4008da:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008dc:	68bb      	ldr	r3, [r7, #8]
  4008de:	2b06      	cmp	r3, #6
  4008e0:	d803      	bhi.n	4008ea <pio_handler_process+0x9e>
		while (status != 0) {
  4008e2:	68fb      	ldr	r3, [r7, #12]
  4008e4:	2b00      	cmp	r3, #0
  4008e6:	d1c7      	bne.n	400878 <pio_handler_process+0x2c>
  4008e8:	e000      	b.n	4008ec <pio_handler_process+0xa0>
				break;
  4008ea:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008ec:	4b0a      	ldr	r3, [pc, #40]	; (400918 <pio_handler_process+0xcc>)
  4008ee:	681b      	ldr	r3, [r3, #0]
  4008f0:	2b00      	cmp	r3, #0
  4008f2:	d007      	beq.n	400904 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4008f4:	4b09      	ldr	r3, [pc, #36]	; (40091c <pio_handler_process+0xd0>)
  4008f6:	681b      	ldr	r3, [r3, #0]
  4008f8:	2b00      	cmp	r3, #0
  4008fa:	d003      	beq.n	400904 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4008fc:	4b07      	ldr	r3, [pc, #28]	; (40091c <pio_handler_process+0xd0>)
  4008fe:	681b      	ldr	r3, [r3, #0]
  400900:	6878      	ldr	r0, [r7, #4]
  400902:	4798      	blx	r3
		}
	}
#endif
}
  400904:	bf00      	nop
  400906:	3710      	adds	r7, #16
  400908:	46bd      	mov	sp, r7
  40090a:	bd80      	pop	{r7, pc}
  40090c:	0040165b 	.word	0x0040165b
  400910:	00401671 	.word	0x00401671
  400914:	2000045c 	.word	0x2000045c
  400918:	2000167c 	.word	0x2000167c
  40091c:	200004cc 	.word	0x200004cc

00400920 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400920:	b580      	push	{r7, lr}
  400922:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400924:	210b      	movs	r1, #11
  400926:	4802      	ldr	r0, [pc, #8]	; (400930 <PIOA_Handler+0x10>)
  400928:	4b02      	ldr	r3, [pc, #8]	; (400934 <PIOA_Handler+0x14>)
  40092a:	4798      	blx	r3
}
  40092c:	bf00      	nop
  40092e:	bd80      	pop	{r7, pc}
  400930:	400e0e00 	.word	0x400e0e00
  400934:	0040084d 	.word	0x0040084d

00400938 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400938:	b580      	push	{r7, lr}
  40093a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40093c:	210c      	movs	r1, #12
  40093e:	4802      	ldr	r0, [pc, #8]	; (400948 <PIOB_Handler+0x10>)
  400940:	4b02      	ldr	r3, [pc, #8]	; (40094c <PIOB_Handler+0x14>)
  400942:	4798      	blx	r3
}
  400944:	bf00      	nop
  400946:	bd80      	pop	{r7, pc}
  400948:	400e1000 	.word	0x400e1000
  40094c:	0040084d 	.word	0x0040084d

00400950 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400950:	b480      	push	{r7}
  400952:	b083      	sub	sp, #12
  400954:	af00      	add	r7, sp, #0
  400956:	6078      	str	r0, [r7, #4]
  400958:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	683a      	ldr	r2, [r7, #0]
  40095e:	609a      	str	r2, [r3, #8]
}
  400960:	bf00      	nop
  400962:	370c      	adds	r7, #12
  400964:	46bd      	mov	sp, r7
  400966:	bc80      	pop	{r7}
  400968:	4770      	bx	lr

0040096a <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40096a:	b480      	push	{r7}
  40096c:	b083      	sub	sp, #12
  40096e:	af00      	add	r7, sp, #0
  400970:	6078      	str	r0, [r7, #4]
  400972:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400974:	687b      	ldr	r3, [r7, #4]
  400976:	683a      	ldr	r2, [r7, #0]
  400978:	60da      	str	r2, [r3, #12]
}
  40097a:	bf00      	nop
  40097c:	370c      	adds	r7, #12
  40097e:	46bd      	mov	sp, r7
  400980:	bc80      	pop	{r7}
  400982:	4770      	bx	lr

00400984 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400984:	b480      	push	{r7}
  400986:	b083      	sub	sp, #12
  400988:	af00      	add	r7, sp, #0
  40098a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	695b      	ldr	r3, [r3, #20]
}
  400990:	4618      	mov	r0, r3
  400992:	370c      	adds	r7, #12
  400994:	46bd      	mov	sp, r7
  400996:	bc80      	pop	{r7}
  400998:	4770      	bx	lr

0040099a <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  40099a:	b480      	push	{r7}
  40099c:	b083      	sub	sp, #12
  40099e:	af00      	add	r7, sp, #0
  4009a0:	6078      	str	r0, [r7, #4]
  4009a2:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4009a4:	bf00      	nop
  4009a6:	687b      	ldr	r3, [r7, #4]
  4009a8:	695b      	ldr	r3, [r3, #20]
  4009aa:	f003 0302 	and.w	r3, r3, #2
  4009ae:	2b00      	cmp	r3, #0
  4009b0:	d0f9      	beq.n	4009a6 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4009b2:	683b      	ldr	r3, [r7, #0]
  4009b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	61da      	str	r2, [r3, #28]

	return 0;
  4009bc:	2300      	movs	r3, #0
}
  4009be:	4618      	mov	r0, r3
  4009c0:	370c      	adds	r7, #12
  4009c2:	46bd      	mov	sp, r7
  4009c4:	bc80      	pop	{r7}
  4009c6:	4770      	bx	lr

004009c8 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	b082      	sub	sp, #8
  4009cc:	af00      	add	r7, sp, #0
  4009ce:	6078      	str	r0, [r7, #4]
  4009d0:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  4009d2:	e007      	b.n	4009e4 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4009d4:	683b      	ldr	r3, [r7, #0]
  4009d6:	1c5a      	adds	r2, r3, #1
  4009d8:	603a      	str	r2, [r7, #0]
  4009da:	781b      	ldrb	r3, [r3, #0]
  4009dc:	4619      	mov	r1, r3
  4009de:	6878      	ldr	r0, [r7, #4]
  4009e0:	4b04      	ldr	r3, [pc, #16]	; (4009f4 <usart_write_line+0x2c>)
  4009e2:	4798      	blx	r3
	while (*string != '\0') {
  4009e4:	683b      	ldr	r3, [r7, #0]
  4009e6:	781b      	ldrb	r3, [r3, #0]
  4009e8:	2b00      	cmp	r3, #0
  4009ea:	d1f3      	bne.n	4009d4 <usart_write_line+0xc>
	}
}
  4009ec:	bf00      	nop
  4009ee:	3708      	adds	r7, #8
  4009f0:	46bd      	mov	sp, r7
  4009f2:	bd80      	pop	{r7, pc}
  4009f4:	0040099b 	.word	0x0040099b

004009f8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4009f8:	b480      	push	{r7}
  4009fa:	b083      	sub	sp, #12
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	6078      	str	r0, [r7, #4]
  400a00:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a02:	687b      	ldr	r3, [r7, #4]
  400a04:	695b      	ldr	r3, [r3, #20]
  400a06:	f003 0301 	and.w	r3, r3, #1
  400a0a:	2b00      	cmp	r3, #0
  400a0c:	d101      	bne.n	400a12 <usart_read+0x1a>
		return 1;
  400a0e:	2301      	movs	r3, #1
  400a10:	e006      	b.n	400a20 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a12:	687b      	ldr	r3, [r7, #4]
  400a14:	699b      	ldr	r3, [r3, #24]
  400a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400a1a:	683b      	ldr	r3, [r7, #0]
  400a1c:	601a      	str	r2, [r3, #0]

	return 0;
  400a1e:	2300      	movs	r3, #0
}
  400a20:	4618      	mov	r0, r3
  400a22:	370c      	adds	r7, #12
  400a24:	46bd      	mov	sp, r7
  400a26:	bc80      	pop	{r7}
  400a28:	4770      	bx	lr
	...

00400a2c <NVIC_EnableIRQ>:
{
  400a2c:	b480      	push	{r7}
  400a2e:	b083      	sub	sp, #12
  400a30:	af00      	add	r7, sp, #0
  400a32:	4603      	mov	r3, r0
  400a34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400a36:	4908      	ldr	r1, [pc, #32]	; (400a58 <NVIC_EnableIRQ+0x2c>)
  400a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400a3c:	095b      	lsrs	r3, r3, #5
  400a3e:	79fa      	ldrb	r2, [r7, #7]
  400a40:	f002 021f 	and.w	r2, r2, #31
  400a44:	2001      	movs	r0, #1
  400a46:	fa00 f202 	lsl.w	r2, r0, r2
  400a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400a4e:	bf00      	nop
  400a50:	370c      	adds	r7, #12
  400a52:	46bd      	mov	sp, r7
  400a54:	bc80      	pop	{r7}
  400a56:	4770      	bx	lr
  400a58:	e000e100 	.word	0xe000e100

00400a5c <osc_get_rate>:
{
  400a5c:	b480      	push	{r7}
  400a5e:	b083      	sub	sp, #12
  400a60:	af00      	add	r7, sp, #0
  400a62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a64:	687b      	ldr	r3, [r7, #4]
  400a66:	2b07      	cmp	r3, #7
  400a68:	d825      	bhi.n	400ab6 <osc_get_rate+0x5a>
  400a6a:	a201      	add	r2, pc, #4	; (adr r2, 400a70 <osc_get_rate+0x14>)
  400a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a70:	00400a91 	.word	0x00400a91
  400a74:	00400a97 	.word	0x00400a97
  400a78:	00400a9d 	.word	0x00400a9d
  400a7c:	00400aa3 	.word	0x00400aa3
  400a80:	00400aa7 	.word	0x00400aa7
  400a84:	00400aab 	.word	0x00400aab
  400a88:	00400aaf 	.word	0x00400aaf
  400a8c:	00400ab3 	.word	0x00400ab3
		return OSC_SLCK_32K_RC_HZ;
  400a90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400a94:	e010      	b.n	400ab8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a9a:	e00d      	b.n	400ab8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aa0:	e00a      	b.n	400ab8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400aa2:	4b08      	ldr	r3, [pc, #32]	; (400ac4 <osc_get_rate+0x68>)
  400aa4:	e008      	b.n	400ab8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400aa6:	4b08      	ldr	r3, [pc, #32]	; (400ac8 <osc_get_rate+0x6c>)
  400aa8:	e006      	b.n	400ab8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400aaa:	4b08      	ldr	r3, [pc, #32]	; (400acc <osc_get_rate+0x70>)
  400aac:	e004      	b.n	400ab8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400aae:	4b07      	ldr	r3, [pc, #28]	; (400acc <osc_get_rate+0x70>)
  400ab0:	e002      	b.n	400ab8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400ab2:	4b06      	ldr	r3, [pc, #24]	; (400acc <osc_get_rate+0x70>)
  400ab4:	e000      	b.n	400ab8 <osc_get_rate+0x5c>
	return 0;
  400ab6:	2300      	movs	r3, #0
}
  400ab8:	4618      	mov	r0, r3
  400aba:	370c      	adds	r7, #12
  400abc:	46bd      	mov	sp, r7
  400abe:	bc80      	pop	{r7}
  400ac0:	4770      	bx	lr
  400ac2:	bf00      	nop
  400ac4:	003d0900 	.word	0x003d0900
  400ac8:	007a1200 	.word	0x007a1200
  400acc:	00b71b00 	.word	0x00b71b00

00400ad0 <sysclk_get_main_hz>:
{
  400ad0:	b580      	push	{r7, lr}
  400ad2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400ad4:	2006      	movs	r0, #6
  400ad6:	4b04      	ldr	r3, [pc, #16]	; (400ae8 <sysclk_get_main_hz+0x18>)
  400ad8:	4798      	blx	r3
  400ada:	4602      	mov	r2, r0
  400adc:	4613      	mov	r3, r2
  400ade:	009b      	lsls	r3, r3, #2
  400ae0:	4413      	add	r3, r2
  400ae2:	009b      	lsls	r3, r3, #2
}
  400ae4:	4618      	mov	r0, r3
  400ae6:	bd80      	pop	{r7, pc}
  400ae8:	00400a5d 	.word	0x00400a5d

00400aec <sysclk_get_cpu_hz>:
{
  400aec:	b580      	push	{r7, lr}
  400aee:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400af0:	4b02      	ldr	r3, [pc, #8]	; (400afc <sysclk_get_cpu_hz+0x10>)
  400af2:	4798      	blx	r3
  400af4:	4603      	mov	r3, r0
  400af6:	085b      	lsrs	r3, r3, #1
}
  400af8:	4618      	mov	r0, r3
  400afa:	bd80      	pop	{r7, pc}
  400afc:	00400ad1 	.word	0x00400ad1

00400b00 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400b00:	b580      	push	{r7, lr}
  400b02:	b082      	sub	sp, #8
  400b04:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read TC0 status. */
	ul_status = tc_get_status(TC0, 0);
  400b06:	2100      	movs	r1, #0
  400b08:	4809      	ldr	r0, [pc, #36]	; (400b30 <TC0_Handler+0x30>)
  400b0a:	4b0a      	ldr	r3, [pc, #40]	; (400b34 <TC0_Handler+0x34>)
  400b0c:	4798      	blx	r3
  400b0e:	6078      	str	r0, [r7, #4]

	/* RC compare. */
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400b10:	687b      	ldr	r3, [r7, #4]
  400b12:	f003 0310 	and.w	r3, r3, #16
  400b16:	2b00      	cmp	r3, #0
  400b18:	d006      	beq.n	400b28 <TC0_Handler+0x28>
		counts++;
  400b1a:	4b07      	ldr	r3, [pc, #28]	; (400b38 <TC0_Handler+0x38>)
  400b1c:	781b      	ldrb	r3, [r3, #0]
  400b1e:	b2db      	uxtb	r3, r3
  400b20:	3301      	adds	r3, #1
  400b22:	b2da      	uxtb	r2, r3
  400b24:	4b04      	ldr	r3, [pc, #16]	; (400b38 <TC0_Handler+0x38>)
  400b26:	701a      	strb	r2, [r3, #0]
	}
}
  400b28:	bf00      	nop
  400b2a:	3708      	adds	r7, #8
  400b2c:	46bd      	mov	sp, r7
  400b2e:	bd80      	pop	{r7, pc}
  400b30:	40010000 	.word	0x40010000
  400b34:	004004a1 	.word	0x004004a1
  400b38:	20001678 	.word	0x20001678

00400b3c <configure_tc>:

void configure_tc(void)
{
  400b3c:	b590      	push	{r4, r7, lr}
  400b3e:	b087      	sub	sp, #28
  400b40:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
  400b42:	4b16      	ldr	r3, [pc, #88]	; (400b9c <configure_tc+0x60>)
  400b44:	4798      	blx	r3
  400b46:	60f8      	str	r0, [r7, #12]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  400b48:	2017      	movs	r0, #23
  400b4a:	4b15      	ldr	r3, [pc, #84]	; (400ba0 <configure_tc+0x64>)
  400b4c:	4798      	blx	r3

	/** Configure TC for a 1Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400b4e:	1d39      	adds	r1, r7, #4
  400b50:	f107 0208 	add.w	r2, r7, #8
  400b54:	68fb      	ldr	r3, [r7, #12]
  400b56:	9300      	str	r3, [sp, #0]
  400b58:	460b      	mov	r3, r1
  400b5a:	68f9      	ldr	r1, [r7, #12]
  400b5c:	2001      	movs	r0, #1
  400b5e:	4c11      	ldr	r4, [pc, #68]	; (400ba4 <configure_tc+0x68>)
  400b60:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400b62:	687b      	ldr	r3, [r7, #4]
  400b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400b68:	461a      	mov	r2, r3
  400b6a:	2100      	movs	r1, #0
  400b6c:	480e      	ldr	r0, [pc, #56]	; (400ba8 <configure_tc+0x6c>)
  400b6e:	4b0f      	ldr	r3, [pc, #60]	; (400bac <configure_tc+0x70>)
  400b70:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400b72:	68bb      	ldr	r3, [r7, #8]
  400b74:	68fa      	ldr	r2, [r7, #12]
  400b76:	fbb2 f3f3 	udiv	r3, r2, r3
  400b7a:	461a      	mov	r2, r3
  400b7c:	2100      	movs	r1, #0
  400b7e:	480a      	ldr	r0, [pc, #40]	; (400ba8 <configure_tc+0x6c>)
  400b80:	4b0b      	ldr	r3, [pc, #44]	; (400bb0 <configure_tc+0x74>)
  400b82:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  400b84:	2017      	movs	r0, #23
  400b86:	4b0b      	ldr	r3, [pc, #44]	; (400bb4 <configure_tc+0x78>)
  400b88:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400b8a:	2210      	movs	r2, #16
  400b8c:	2100      	movs	r1, #0
  400b8e:	4806      	ldr	r0, [pc, #24]	; (400ba8 <configure_tc+0x6c>)
  400b90:	4b09      	ldr	r3, [pc, #36]	; (400bb8 <configure_tc+0x7c>)
  400b92:	4798      	blx	r3
  400b94:	bf00      	nop
  400b96:	3714      	adds	r7, #20
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd90      	pop	{r4, r7, pc}
  400b9c:	00400aed 	.word	0x00400aed
  400ba0:	00401aa9 	.word	0x00401aa9
  400ba4:	004004c3 	.word	0x004004c3
  400ba8:	40010000 	.word	0x40010000
  400bac:	004003ff 	.word	0x004003ff
  400bb0:	00400457 	.word	0x00400457
  400bb4:	00400a2d 	.word	0x00400a2d
  400bb8:	0040047b 	.word	0x0040047b

00400bbc <osc_get_rate>:
{
  400bbc:	b480      	push	{r7}
  400bbe:	b083      	sub	sp, #12
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	2b07      	cmp	r3, #7
  400bc8:	d825      	bhi.n	400c16 <osc_get_rate+0x5a>
  400bca:	a201      	add	r2, pc, #4	; (adr r2, 400bd0 <osc_get_rate+0x14>)
  400bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400bd0:	00400bf1 	.word	0x00400bf1
  400bd4:	00400bf7 	.word	0x00400bf7
  400bd8:	00400bfd 	.word	0x00400bfd
  400bdc:	00400c03 	.word	0x00400c03
  400be0:	00400c07 	.word	0x00400c07
  400be4:	00400c0b 	.word	0x00400c0b
  400be8:	00400c0f 	.word	0x00400c0f
  400bec:	00400c13 	.word	0x00400c13
		return OSC_SLCK_32K_RC_HZ;
  400bf0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400bf4:	e010      	b.n	400c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400bfa:	e00d      	b.n	400c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c00:	e00a      	b.n	400c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400c02:	4b08      	ldr	r3, [pc, #32]	; (400c24 <osc_get_rate+0x68>)
  400c04:	e008      	b.n	400c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400c06:	4b08      	ldr	r3, [pc, #32]	; (400c28 <osc_get_rate+0x6c>)
  400c08:	e006      	b.n	400c18 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400c0a:	4b08      	ldr	r3, [pc, #32]	; (400c2c <osc_get_rate+0x70>)
  400c0c:	e004      	b.n	400c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400c0e:	4b07      	ldr	r3, [pc, #28]	; (400c2c <osc_get_rate+0x70>)
  400c10:	e002      	b.n	400c18 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400c12:	4b06      	ldr	r3, [pc, #24]	; (400c2c <osc_get_rate+0x70>)
  400c14:	e000      	b.n	400c18 <osc_get_rate+0x5c>
	return 0;
  400c16:	2300      	movs	r3, #0
}
  400c18:	4618      	mov	r0, r3
  400c1a:	370c      	adds	r7, #12
  400c1c:	46bd      	mov	sp, r7
  400c1e:	bc80      	pop	{r7}
  400c20:	4770      	bx	lr
  400c22:	bf00      	nop
  400c24:	003d0900 	.word	0x003d0900
  400c28:	007a1200 	.word	0x007a1200
  400c2c:	00b71b00 	.word	0x00b71b00

00400c30 <sysclk_get_main_hz>:
{
  400c30:	b580      	push	{r7, lr}
  400c32:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400c34:	2006      	movs	r0, #6
  400c36:	4b04      	ldr	r3, [pc, #16]	; (400c48 <sysclk_get_main_hz+0x18>)
  400c38:	4798      	blx	r3
  400c3a:	4602      	mov	r2, r0
  400c3c:	4613      	mov	r3, r2
  400c3e:	009b      	lsls	r3, r3, #2
  400c40:	4413      	add	r3, r2
  400c42:	009b      	lsls	r3, r3, #2
}
  400c44:	4618      	mov	r0, r3
  400c46:	bd80      	pop	{r7, pc}
  400c48:	00400bbd 	.word	0x00400bbd

00400c4c <sysclk_get_cpu_hz>:
{
  400c4c:	b580      	push	{r7, lr}
  400c4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400c50:	4b02      	ldr	r3, [pc, #8]	; (400c5c <sysclk_get_cpu_hz+0x10>)
  400c52:	4798      	blx	r3
  400c54:	4603      	mov	r3, r0
  400c56:	085b      	lsrs	r3, r3, #1
}
  400c58:	4618      	mov	r0, r3
  400c5a:	bd80      	pop	{r7, pc}
  400c5c:	00400c31 	.word	0x00400c31

00400c60 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  400c60:	b480      	push	{r7}
  400c62:	b08b      	sub	sp, #44	; 0x2c
  400c64:	af00      	add	r7, sp, #0
  400c66:	6078      	str	r0, [r7, #4]
  400c68:	687b      	ldr	r3, [r7, #4]
  400c6a:	627b      	str	r3, [r7, #36]	; 0x24
  400c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c6e:	623b      	str	r3, [r7, #32]
  400c70:	6a3b      	ldr	r3, [r7, #32]
  400c72:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400c74:	69fb      	ldr	r3, [r7, #28]
  400c76:	095b      	lsrs	r3, r3, #5
  400c78:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c7a:	69bb      	ldr	r3, [r7, #24]
  400c7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400c80:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400c84:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  400c86:	617b      	str	r3, [r7, #20]
  400c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c8a:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400c8c:	693b      	ldr	r3, [r7, #16]
  400c8e:	f003 031f 	and.w	r3, r3, #31
  400c92:	2201      	movs	r2, #1
  400c94:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  400c98:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400c9a:	697b      	ldr	r3, [r7, #20]
  400c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  400c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ca0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400ca2:	68bb      	ldr	r3, [r7, #8]
  400ca4:	f003 031f 	and.w	r3, r3, #31
  400ca8:	2101      	movs	r1, #1
  400caa:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400cae:	4013      	ands	r3, r2
  400cb0:	2b00      	cmp	r3, #0
  400cb2:	d003      	beq.n	400cbc <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  400cb4:	697b      	ldr	r3, [r7, #20]
  400cb6:	68fa      	ldr	r2, [r7, #12]
  400cb8:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  400cba:	e002      	b.n	400cc2 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  400cbc:	697b      	ldr	r3, [r7, #20]
  400cbe:	68fa      	ldr	r2, [r7, #12]
  400cc0:	631a      	str	r2, [r3, #48]	; 0x30
  400cc2:	bf00      	nop
  400cc4:	372c      	adds	r7, #44	; 0x2c
  400cc6:	46bd      	mov	sp, r7
  400cc8:	bc80      	pop	{r7}
  400cca:	4770      	bx	lr

00400ccc <USART0_Handler>:
 * Increment the number of bytes received in the current second and start
 * another transfer if the desired bps has not been met yet.
 *
 */
void handler_usart(void)
{	
  400ccc:	b580      	push	{r7, lr}
  400cce:	b082      	sub	sp, #8
  400cd0:	af00      	add	r7, sp, #0
	uint8_t recieved_char_flag = 0;
  400cd2:	2300      	movs	r3, #0
  400cd4:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_status;
	
	usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
  400cd6:	2101      	movs	r1, #1
  400cd8:	4815      	ldr	r0, [pc, #84]	; (400d30 <USART0_Handler+0x64>)
  400cda:	4b16      	ldr	r3, [pc, #88]	; (400d34 <USART0_Handler+0x68>)
  400cdc:	4798      	blx	r3
	
	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  400cde:	4814      	ldr	r0, [pc, #80]	; (400d30 <USART0_Handler+0x64>)
  400ce0:	4b15      	ldr	r3, [pc, #84]	; (400d38 <USART0_Handler+0x6c>)
  400ce2:	4798      	blx	r3
  400ce4:	6038      	str	r0, [r7, #0]

	/* Receive buffer is full. */
	recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400ce6:	4915      	ldr	r1, [pc, #84]	; (400d3c <USART0_Handler+0x70>)
  400ce8:	4811      	ldr	r0, [pc, #68]	; (400d30 <USART0_Handler+0x64>)
  400cea:	4b15      	ldr	r3, [pc, #84]	; (400d40 <USART0_Handler+0x74>)
  400cec:	4798      	blx	r3
  400cee:	4603      	mov	r3, r0
  400cf0:	71fb      	strb	r3, [r7, #7]
	// he doesn't have this line?
	
	if (ul_status & US_CSR_RXRDY) {
  400cf2:	683b      	ldr	r3, [r7, #0]
  400cf4:	f003 0301 	and.w	r3, r3, #1
  400cf8:	2b00      	cmp	r3, #0
  400cfa:	d011      	beq.n	400d20 <USART0_Handler+0x54>
		recieved_char_flag = usart_read(BOARD_USART, &received_byte_wifi);
  400cfc:	490f      	ldr	r1, [pc, #60]	; (400d3c <USART0_Handler+0x70>)
  400cfe:	480c      	ldr	r0, [pc, #48]	; (400d30 <USART0_Handler+0x64>)
  400d00:	4b0f      	ldr	r3, [pc, #60]	; (400d40 <USART0_Handler+0x74>)
  400d02:	4798      	blx	r3
  400d04:	4603      	mov	r3, r0
  400d06:	71fb      	strb	r3, [r7, #7]
		input_buffer[buffer_index] = (uint8_t) received_byte_wifi;
  400d08:	4b0e      	ldr	r3, [pc, #56]	; (400d44 <USART0_Handler+0x78>)
  400d0a:	681b      	ldr	r3, [r3, #0]
  400d0c:	4a0b      	ldr	r2, [pc, #44]	; (400d3c <USART0_Handler+0x70>)
  400d0e:	6812      	ldr	r2, [r2, #0]
  400d10:	b2d1      	uxtb	r1, r2
  400d12:	4a0d      	ldr	r2, [pc, #52]	; (400d48 <USART0_Handler+0x7c>)
  400d14:	54d1      	strb	r1, [r2, r3]
		buffer_index++;
  400d16:	4b0b      	ldr	r3, [pc, #44]	; (400d44 <USART0_Handler+0x78>)
  400d18:	681b      	ldr	r3, [r3, #0]
  400d1a:	3301      	adds	r3, #1
  400d1c:	4a09      	ldr	r2, [pc, #36]	; (400d44 <USART0_Handler+0x78>)
  400d1e:	6013      	str	r3, [r2, #0]
	}	
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  400d20:	2101      	movs	r1, #1
  400d22:	4803      	ldr	r0, [pc, #12]	; (400d30 <USART0_Handler+0x64>)
  400d24:	4b09      	ldr	r3, [pc, #36]	; (400d4c <USART0_Handler+0x80>)
  400d26:	4798      	blx	r3
}
  400d28:	bf00      	nop
  400d2a:	3708      	adds	r7, #8
  400d2c:	46bd      	mov	sp, r7
  400d2e:	bd80      	pop	{r7, pc}
  400d30:	40024000 	.word	0x40024000
  400d34:	0040096b 	.word	0x0040096b
  400d38:	00400985 	.word	0x00400985
  400d3c:	200006d4 	.word	0x200006d4
  400d40:	004009f9 	.word	0x004009f9
  400d44:	200006c4 	.word	0x200006c4
  400d48:	200004d0 	.word	0x200004d0
  400d4c:	00400951 	.word	0x00400951

00400d50 <write_wifi_command>:
}

/**
 *  \brief Writes wifi command.
 */
void write_wifi_command(char* comm, uint8_t cnt){
  400d50:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  400d54:	b082      	sub	sp, #8
  400d56:	af00      	add	r7, sp, #0
  400d58:	6078      	str	r0, [r7, #4]
  400d5a:	460b      	mov	r3, r1
  400d5c:	70fb      	strb	r3, [r7, #3]
	data_recieved = 0;
  400d5e:	4b29      	ldr	r3, [pc, #164]	; (400e04 <write_wifi_command+0xb4>)
  400d60:	2200      	movs	r2, #0
  400d62:	601a      	str	r2, [r3, #0]
	usart_write_line(BOARD_USART, comm);
  400d64:	6879      	ldr	r1, [r7, #4]
  400d66:	4828      	ldr	r0, [pc, #160]	; (400e08 <write_wifi_command+0xb8>)
  400d68:	4b28      	ldr	r3, [pc, #160]	; (400e0c <write_wifi_command+0xbc>)
  400d6a:	4798      	blx	r3
	
	timeout_counter = 0;
  400d6c:	4b28      	ldr	r3, [pc, #160]	; (400e10 <write_wifi_command+0xc0>)
  400d6e:	2200      	movs	r2, #0
  400d70:	701a      	strb	r2, [r3, #0]
	cnt = cnt*20;
  400d72:	78fb      	ldrb	r3, [r7, #3]
  400d74:	461a      	mov	r2, r3
  400d76:	0092      	lsls	r2, r2, #2
  400d78:	4413      	add	r3, r2
  400d7a:	009b      	lsls	r3, r3, #2
  400d7c:	70fb      	strb	r3, [r7, #3]
	while(timeout_counter < cnt && !data_recieved) {
  400d7e:	e031      	b.n	400de4 <write_wifi_command+0x94>
		// leave long
		delay_ms(10);
  400d80:	4b24      	ldr	r3, [pc, #144]	; (400e14 <write_wifi_command+0xc4>)
  400d82:	4798      	blx	r3
  400d84:	4603      	mov	r3, r0
  400d86:	4619      	mov	r1, r3
  400d88:	f04f 0200 	mov.w	r2, #0
  400d8c:	460b      	mov	r3, r1
  400d8e:	4614      	mov	r4, r2
  400d90:	00a6      	lsls	r6, r4, #2
  400d92:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400d96:	009d      	lsls	r5, r3, #2
  400d98:	462b      	mov	r3, r5
  400d9a:	4634      	mov	r4, r6
  400d9c:	185b      	adds	r3, r3, r1
  400d9e:	eb44 0402 	adc.w	r4, r4, r2
  400da2:	18db      	adds	r3, r3, r3
  400da4:	eb44 0404 	adc.w	r4, r4, r4
  400da8:	4619      	mov	r1, r3
  400daa:	4622      	mov	r2, r4
  400dac:	f243 63af 	movw	r3, #13999	; 0x36af
  400db0:	f04f 0400 	mov.w	r4, #0
  400db4:	eb11 0b03 	adds.w	fp, r1, r3
  400db8:	eb42 0c04 	adc.w	ip, r2, r4
  400dbc:	4658      	mov	r0, fp
  400dbe:	4661      	mov	r1, ip
  400dc0:	4c15      	ldr	r4, [pc, #84]	; (400e18 <write_wifi_command+0xc8>)
  400dc2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400dc6:	f04f 0300 	mov.w	r3, #0
  400dca:	47a0      	blx	r4
  400dcc:	4603      	mov	r3, r0
  400dce:	460c      	mov	r4, r1
  400dd0:	4618      	mov	r0, r3
  400dd2:	4b12      	ldr	r3, [pc, #72]	; (400e1c <write_wifi_command+0xcc>)
  400dd4:	4798      	blx	r3
		timeout_counter++;
  400dd6:	4b0e      	ldr	r3, [pc, #56]	; (400e10 <write_wifi_command+0xc0>)
  400dd8:	781b      	ldrb	r3, [r3, #0]
  400dda:	b2db      	uxtb	r3, r3
  400ddc:	3301      	adds	r3, #1
  400dde:	b2da      	uxtb	r2, r3
  400de0:	4b0b      	ldr	r3, [pc, #44]	; (400e10 <write_wifi_command+0xc0>)
  400de2:	701a      	strb	r2, [r3, #0]
	while(timeout_counter < cnt && !data_recieved) {
  400de4:	4b0a      	ldr	r3, [pc, #40]	; (400e10 <write_wifi_command+0xc0>)
  400de6:	781b      	ldrb	r3, [r3, #0]
  400de8:	b2db      	uxtb	r3, r3
  400dea:	78fa      	ldrb	r2, [r7, #3]
  400dec:	429a      	cmp	r2, r3
  400dee:	d903      	bls.n	400df8 <write_wifi_command+0xa8>
  400df0:	4b04      	ldr	r3, [pc, #16]	; (400e04 <write_wifi_command+0xb4>)
  400df2:	681b      	ldr	r3, [r3, #0]
  400df4:	2b00      	cmp	r3, #0
  400df6:	d0c3      	beq.n	400d80 <write_wifi_command+0x30>
	}
	
	//delay_ms(100);
}
  400df8:	bf00      	nop
  400dfa:	3708      	adds	r7, #8
  400dfc:	46bd      	mov	sp, r7
  400dfe:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  400e02:	bf00      	nop
  400e04:	200006cc 	.word	0x200006cc
  400e08:	40024000 	.word	0x40024000
  400e0c:	004009c9 	.word	0x004009c9
  400e10:	200006c8 	.word	0x200006c8
  400e14:	00400c4d 	.word	0x00400c4d
  400e18:	004021f5 	.word	0x004021f5
  400e1c:	20000001 	.word	0x20000001

00400e20 <blink_LED>:
/**
 *  \brief Blinks a defined LED_PIN.
	Delays, switches, delays, switches, delays
	Total time is 3x ms_blink
 */
void blink_LED(int ms_blink){
  400e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e22:	b083      	sub	sp, #12
  400e24:	af00      	add	r7, sp, #0
  400e26:	6078      	str	r0, [r7, #4]
	delay_ms(ms_blink);
  400e28:	687b      	ldr	r3, [r7, #4]
  400e2a:	2b00      	cmp	r3, #0
  400e2c:	d026      	beq.n	400e7c <blink_LED+0x5c>
  400e2e:	687b      	ldr	r3, [r7, #4]
  400e30:	461d      	mov	r5, r3
  400e32:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400e36:	4b66      	ldr	r3, [pc, #408]	; (400fd0 <blink_LED+0x1b0>)
  400e38:	4798      	blx	r3
  400e3a:	4603      	mov	r3, r0
  400e3c:	f04f 0400 	mov.w	r4, #0
  400e40:	fb03 f106 	mul.w	r1, r3, r6
  400e44:	fb05 f204 	mul.w	r2, r5, r4
  400e48:	440a      	add	r2, r1
  400e4a:	fba5 3403 	umull	r3, r4, r5, r3
  400e4e:	4422      	add	r2, r4
  400e50:	4614      	mov	r4, r2
  400e52:	f243 61af 	movw	r1, #13999	; 0x36af
  400e56:	f04f 0200 	mov.w	r2, #0
  400e5a:	185d      	adds	r5, r3, r1
  400e5c:	eb44 0602 	adc.w	r6, r4, r2
  400e60:	4628      	mov	r0, r5
  400e62:	4631      	mov	r1, r6
  400e64:	4c5b      	ldr	r4, [pc, #364]	; (400fd4 <blink_LED+0x1b4>)
  400e66:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e6a:	f04f 0300 	mov.w	r3, #0
  400e6e:	47a0      	blx	r4
  400e70:	4603      	mov	r3, r0
  400e72:	460c      	mov	r4, r1
  400e74:	4618      	mov	r0, r3
  400e76:	4b58      	ldr	r3, [pc, #352]	; (400fd8 <blink_LED+0x1b8>)
  400e78:	4798      	blx	r3
  400e7a:	e016      	b.n	400eaa <blink_LED+0x8a>
  400e7c:	4b54      	ldr	r3, [pc, #336]	; (400fd0 <blink_LED+0x1b0>)
  400e7e:	4798      	blx	r3
  400e80:	4603      	mov	r3, r0
  400e82:	f04f 0400 	mov.w	r4, #0
  400e86:	a250      	add	r2, pc, #320	; (adr r2, 400fc8 <blink_LED+0x1a8>)
  400e88:	e9d2 1200 	ldrd	r1, r2, [r2]
  400e8c:	185d      	adds	r5, r3, r1
  400e8e:	eb44 0602 	adc.w	r6, r4, r2
  400e92:	4628      	mov	r0, r5
  400e94:	4631      	mov	r1, r6
  400e96:	4c4f      	ldr	r4, [pc, #316]	; (400fd4 <blink_LED+0x1b4>)
  400e98:	4a50      	ldr	r2, [pc, #320]	; (400fdc <blink_LED+0x1bc>)
  400e9a:	f04f 0300 	mov.w	r3, #0
  400e9e:	47a0      	blx	r4
  400ea0:	4603      	mov	r3, r0
  400ea2:	460c      	mov	r4, r1
  400ea4:	4618      	mov	r0, r3
  400ea6:	4b4c      	ldr	r3, [pc, #304]	; (400fd8 <blink_LED+0x1b8>)
  400ea8:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400eaa:	2013      	movs	r0, #19
  400eac:	4b4c      	ldr	r3, [pc, #304]	; (400fe0 <blink_LED+0x1c0>)
  400eae:	4798      	blx	r3
	delay_ms(ms_blink);
  400eb0:	687b      	ldr	r3, [r7, #4]
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d026      	beq.n	400f04 <blink_LED+0xe4>
  400eb6:	687b      	ldr	r3, [r7, #4]
  400eb8:	461d      	mov	r5, r3
  400eba:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400ebe:	4b44      	ldr	r3, [pc, #272]	; (400fd0 <blink_LED+0x1b0>)
  400ec0:	4798      	blx	r3
  400ec2:	4603      	mov	r3, r0
  400ec4:	f04f 0400 	mov.w	r4, #0
  400ec8:	fb03 f106 	mul.w	r1, r3, r6
  400ecc:	fb05 f204 	mul.w	r2, r5, r4
  400ed0:	440a      	add	r2, r1
  400ed2:	fba5 3403 	umull	r3, r4, r5, r3
  400ed6:	4422      	add	r2, r4
  400ed8:	4614      	mov	r4, r2
  400eda:	f243 61af 	movw	r1, #13999	; 0x36af
  400ede:	f04f 0200 	mov.w	r2, #0
  400ee2:	185d      	adds	r5, r3, r1
  400ee4:	eb44 0602 	adc.w	r6, r4, r2
  400ee8:	4628      	mov	r0, r5
  400eea:	4631      	mov	r1, r6
  400eec:	4c39      	ldr	r4, [pc, #228]	; (400fd4 <blink_LED+0x1b4>)
  400eee:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400ef2:	f04f 0300 	mov.w	r3, #0
  400ef6:	47a0      	blx	r4
  400ef8:	4603      	mov	r3, r0
  400efa:	460c      	mov	r4, r1
  400efc:	4618      	mov	r0, r3
  400efe:	4b36      	ldr	r3, [pc, #216]	; (400fd8 <blink_LED+0x1b8>)
  400f00:	4798      	blx	r3
  400f02:	e016      	b.n	400f32 <blink_LED+0x112>
  400f04:	4b32      	ldr	r3, [pc, #200]	; (400fd0 <blink_LED+0x1b0>)
  400f06:	4798      	blx	r3
  400f08:	4603      	mov	r3, r0
  400f0a:	f04f 0400 	mov.w	r4, #0
  400f0e:	a22e      	add	r2, pc, #184	; (adr r2, 400fc8 <blink_LED+0x1a8>)
  400f10:	e9d2 1200 	ldrd	r1, r2, [r2]
  400f14:	185d      	adds	r5, r3, r1
  400f16:	eb44 0602 	adc.w	r6, r4, r2
  400f1a:	4628      	mov	r0, r5
  400f1c:	4631      	mov	r1, r6
  400f1e:	4c2d      	ldr	r4, [pc, #180]	; (400fd4 <blink_LED+0x1b4>)
  400f20:	4a2e      	ldr	r2, [pc, #184]	; (400fdc <blink_LED+0x1bc>)
  400f22:	f04f 0300 	mov.w	r3, #0
  400f26:	47a0      	blx	r4
  400f28:	4603      	mov	r3, r0
  400f2a:	460c      	mov	r4, r1
  400f2c:	4618      	mov	r0, r3
  400f2e:	4b2a      	ldr	r3, [pc, #168]	; (400fd8 <blink_LED+0x1b8>)
  400f30:	4798      	blx	r3
	ioport_toggle_pin_level(LED_PIN);
  400f32:	2013      	movs	r0, #19
  400f34:	4b2a      	ldr	r3, [pc, #168]	; (400fe0 <blink_LED+0x1c0>)
  400f36:	4798      	blx	r3
	delay_ms(ms_blink);
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d026      	beq.n	400f8c <blink_LED+0x16c>
  400f3e:	687b      	ldr	r3, [r7, #4]
  400f40:	461d      	mov	r5, r3
  400f42:	ea4f 76e5 	mov.w	r6, r5, asr #31
  400f46:	4b22      	ldr	r3, [pc, #136]	; (400fd0 <blink_LED+0x1b0>)
  400f48:	4798      	blx	r3
  400f4a:	4603      	mov	r3, r0
  400f4c:	f04f 0400 	mov.w	r4, #0
  400f50:	fb03 f106 	mul.w	r1, r3, r6
  400f54:	fb05 f204 	mul.w	r2, r5, r4
  400f58:	440a      	add	r2, r1
  400f5a:	fba5 3403 	umull	r3, r4, r5, r3
  400f5e:	4422      	add	r2, r4
  400f60:	4614      	mov	r4, r2
  400f62:	f243 61af 	movw	r1, #13999	; 0x36af
  400f66:	f04f 0200 	mov.w	r2, #0
  400f6a:	185d      	adds	r5, r3, r1
  400f6c:	eb44 0602 	adc.w	r6, r4, r2
  400f70:	4628      	mov	r0, r5
  400f72:	4631      	mov	r1, r6
  400f74:	4c17      	ldr	r4, [pc, #92]	; (400fd4 <blink_LED+0x1b4>)
  400f76:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400f7a:	f04f 0300 	mov.w	r3, #0
  400f7e:	47a0      	blx	r4
  400f80:	4603      	mov	r3, r0
  400f82:	460c      	mov	r4, r1
  400f84:	4618      	mov	r0, r3
  400f86:	4b14      	ldr	r3, [pc, #80]	; (400fd8 <blink_LED+0x1b8>)
  400f88:	4798      	blx	r3
}
  400f8a:	e016      	b.n	400fba <blink_LED+0x19a>
	delay_ms(ms_blink);
  400f8c:	4b10      	ldr	r3, [pc, #64]	; (400fd0 <blink_LED+0x1b0>)
  400f8e:	4798      	blx	r3
  400f90:	4603      	mov	r3, r0
  400f92:	f04f 0400 	mov.w	r4, #0
  400f96:	a20c      	add	r2, pc, #48	; (adr r2, 400fc8 <blink_LED+0x1a8>)
  400f98:	e9d2 1200 	ldrd	r1, r2, [r2]
  400f9c:	185d      	adds	r5, r3, r1
  400f9e:	eb44 0602 	adc.w	r6, r4, r2
  400fa2:	4628      	mov	r0, r5
  400fa4:	4631      	mov	r1, r6
  400fa6:	4c0b      	ldr	r4, [pc, #44]	; (400fd4 <blink_LED+0x1b4>)
  400fa8:	4a0c      	ldr	r2, [pc, #48]	; (400fdc <blink_LED+0x1bc>)
  400faa:	f04f 0300 	mov.w	r3, #0
  400fae:	47a0      	blx	r4
  400fb0:	4603      	mov	r3, r0
  400fb2:	460c      	mov	r4, r1
  400fb4:	4618      	mov	r0, r3
  400fb6:	4b08      	ldr	r3, [pc, #32]	; (400fd8 <blink_LED+0x1b8>)
  400fb8:	4798      	blx	r3
}
  400fba:	bf00      	nop
  400fbc:	370c      	adds	r7, #12
  400fbe:	46bd      	mov	sp, r7
  400fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc2:	bf00      	nop
  400fc4:	f3af 8000 	nop.w
  400fc8:	00d59f7f 	.word	0x00d59f7f
  400fcc:	00000000 	.word	0x00000000
  400fd0:	00400c4d 	.word	0x00400c4d
  400fd4:	004021f5 	.word	0x004021f5
  400fd8:	20000001 	.word	0x20000001
  400fdc:	00d59f80 	.word	0x00d59f80
  400fe0:	00400c61 	.word	0x00400c61

00400fe4 <setup_wifi>:

/**
 *  \brief Sets up wifi chip on new network.
 */
void setup_wifi(void){
  400fe4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  400fe8:	b082      	sub	sp, #8
  400fea:	af00      	add	r7, sp, #0
	
	int connected = 0;
  400fec:	2300      	movs	r3, #0
  400fee:	607b      	str	r3, [r7, #4]
	int seconds = 0;
  400ff0:	2300      	movs	r3, #0
  400ff2:	603b      	str	r3, [r7, #0]
	
	write_wifi_command("setup web\r\n", 2000);	// command wifi chip to setup
  400ff4:	21d0      	movs	r1, #208	; 0xd0
  400ff6:	482b      	ldr	r0, [pc, #172]	; (4010a4 <setup_wifi+0xc0>)
  400ff8:	4b2b      	ldr	r3, [pc, #172]	; (4010a8 <setup_wifi+0xc4>)
  400ffa:	4798      	blx	r3
			
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  400ffc:	e046      	b.n	40108c <setup_wifi+0xa8>
				
		connected = strstr(input_buffer, "[Associated]\r\n");	// check for connection
  400ffe:	492b      	ldr	r1, [pc, #172]	; (4010ac <setup_wifi+0xc8>)
  401000:	482b      	ldr	r0, [pc, #172]	; (4010b0 <setup_wifi+0xcc>)
  401002:	4b2c      	ldr	r3, [pc, #176]	; (4010b4 <setup_wifi+0xd0>)
  401004:	4798      	blx	r3
  401006:	4603      	mov	r3, r0
  401008:	607b      	str	r3, [r7, #4]
		if (seconds > 1500) {	// blink debug LED quickly after a while
  40100a:	683b      	ldr	r3, [r7, #0]
  40100c:	f240 52dc 	movw	r2, #1500	; 0x5dc
  401010:	4293      	cmp	r3, r2
  401012:	dd02      	ble.n	40101a <setup_wifi+0x36>
			blink_LED(50);
  401014:	2032      	movs	r0, #50	; 0x32
  401016:	4b28      	ldr	r3, [pc, #160]	; (4010b8 <setup_wifi+0xd4>)
  401018:	4798      	blx	r3
		}
		delay_ms(200);
  40101a:	4b28      	ldr	r3, [pc, #160]	; (4010bc <setup_wifi+0xd8>)
  40101c:	4798      	blx	r3
  40101e:	4603      	mov	r3, r0
  401020:	4619      	mov	r1, r3
  401022:	f04f 0200 	mov.w	r2, #0
  401026:	460b      	mov	r3, r1
  401028:	4614      	mov	r4, r2
  40102a:	18db      	adds	r3, r3, r3
  40102c:	eb44 0404 	adc.w	r4, r4, r4
  401030:	185b      	adds	r3, r3, r1
  401032:	eb44 0402 	adc.w	r4, r4, r2
  401036:	00e6      	lsls	r6, r4, #3
  401038:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  40103c:	00dd      	lsls	r5, r3, #3
  40103e:	462b      	mov	r3, r5
  401040:	4634      	mov	r4, r6
  401042:	185b      	adds	r3, r3, r1
  401044:	eb44 0402 	adc.w	r4, r4, r2
  401048:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  40104c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401050:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401054:	4643      	mov	r3, r8
  401056:	464c      	mov	r4, r9
  401058:	4619      	mov	r1, r3
  40105a:	4622      	mov	r2, r4
  40105c:	f243 63af 	movw	r3, #13999	; 0x36af
  401060:	f04f 0400 	mov.w	r4, #0
  401064:	eb11 0b03 	adds.w	fp, r1, r3
  401068:	eb42 0c04 	adc.w	ip, r2, r4
  40106c:	4658      	mov	r0, fp
  40106e:	4661      	mov	r1, ip
  401070:	4c13      	ldr	r4, [pc, #76]	; (4010c0 <setup_wifi+0xdc>)
  401072:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401076:	f04f 0300 	mov.w	r3, #0
  40107a:	47a0      	blx	r4
  40107c:	4603      	mov	r3, r0
  40107e:	460c      	mov	r4, r1
  401080:	4618      	mov	r0, r3
  401082:	4b10      	ldr	r3, [pc, #64]	; (4010c4 <setup_wifi+0xe0>)
  401084:	4798      	blx	r3
		seconds++;
  401086:	683b      	ldr	r3, [r7, #0]
  401088:	3301      	adds	r3, #1
  40108a:	603b      	str	r3, [r7, #0]
	while(!connected){		// waits a long time for the user to connect to the chip and join a network
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	2b00      	cmp	r3, #0
  401090:	d0b5      	beq.n	400ffe <setup_wifi+0x1a>
	}
			
	wifi_setup_flag = false;	// turn off setup flag
  401092:	4b0d      	ldr	r3, [pc, #52]	; (4010c8 <setup_wifi+0xe4>)
  401094:	2200      	movs	r2, #0
  401096:	601a      	str	r2, [r3, #0]
}
  401098:	bf00      	nop
  40109a:	3708      	adds	r7, #8
  40109c:	46bd      	mov	sp, r7
  40109e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
  4010a2:	bf00      	nop
  4010a4:	00402edc 	.word	0x00402edc
  4010a8:	00400d51 	.word	0x00400d51
  4010ac:	00402ee8 	.word	0x00402ee8
  4010b0:	200004d0 	.word	0x200004d0
  4010b4:	004028a1 	.word	0x004028a1
  4010b8:	00400e21 	.word	0x00400e21
  4010bc:	00400c4d 	.word	0x00400c4d
  4010c0:	004021f5 	.word	0x004021f5
  4010c4:	20000001 	.word	0x20000001
  4010c8:	200006d0 	.word	0x200006d0

004010cc <osc_enable>:
{
  4010cc:	b580      	push	{r7, lr}
  4010ce:	b082      	sub	sp, #8
  4010d0:	af00      	add	r7, sp, #0
  4010d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4010d4:	687b      	ldr	r3, [r7, #4]
  4010d6:	2b07      	cmp	r3, #7
  4010d8:	d831      	bhi.n	40113e <osc_enable+0x72>
  4010da:	a201      	add	r2, pc, #4	; (adr r2, 4010e0 <osc_enable+0x14>)
  4010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010e0:	0040113d 	.word	0x0040113d
  4010e4:	00401101 	.word	0x00401101
  4010e8:	00401109 	.word	0x00401109
  4010ec:	00401111 	.word	0x00401111
  4010f0:	00401119 	.word	0x00401119
  4010f4:	00401121 	.word	0x00401121
  4010f8:	00401129 	.word	0x00401129
  4010fc:	00401133 	.word	0x00401133
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401100:	2000      	movs	r0, #0
  401102:	4b11      	ldr	r3, [pc, #68]	; (401148 <osc_enable+0x7c>)
  401104:	4798      	blx	r3
		break;
  401106:	e01a      	b.n	40113e <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401108:	2001      	movs	r0, #1
  40110a:	4b0f      	ldr	r3, [pc, #60]	; (401148 <osc_enable+0x7c>)
  40110c:	4798      	blx	r3
		break;
  40110e:	e016      	b.n	40113e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401110:	2000      	movs	r0, #0
  401112:	4b0e      	ldr	r3, [pc, #56]	; (40114c <osc_enable+0x80>)
  401114:	4798      	blx	r3
		break;
  401116:	e012      	b.n	40113e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401118:	2010      	movs	r0, #16
  40111a:	4b0c      	ldr	r3, [pc, #48]	; (40114c <osc_enable+0x80>)
  40111c:	4798      	blx	r3
		break;
  40111e:	e00e      	b.n	40113e <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401120:	2020      	movs	r0, #32
  401122:	4b0a      	ldr	r3, [pc, #40]	; (40114c <osc_enable+0x80>)
  401124:	4798      	blx	r3
		break;
  401126:	e00a      	b.n	40113e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401128:	213e      	movs	r1, #62	; 0x3e
  40112a:	2000      	movs	r0, #0
  40112c:	4b08      	ldr	r3, [pc, #32]	; (401150 <osc_enable+0x84>)
  40112e:	4798      	blx	r3
		break;
  401130:	e005      	b.n	40113e <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  401132:	213e      	movs	r1, #62	; 0x3e
  401134:	2001      	movs	r0, #1
  401136:	4b06      	ldr	r3, [pc, #24]	; (401150 <osc_enable+0x84>)
  401138:	4798      	blx	r3
		break;
  40113a:	e000      	b.n	40113e <osc_enable+0x72>
		break;
  40113c:	bf00      	nop
}
  40113e:	bf00      	nop
  401140:	3708      	adds	r7, #8
  401142:	46bd      	mov	sp, r7
  401144:	bd80      	pop	{r7, pc}
  401146:	bf00      	nop
  401148:	004018dd 	.word	0x004018dd
  40114c:	00401949 	.word	0x00401949
  401150:	004019b9 	.word	0x004019b9

00401154 <osc_is_ready>:
{
  401154:	b580      	push	{r7, lr}
  401156:	b082      	sub	sp, #8
  401158:	af00      	add	r7, sp, #0
  40115a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40115c:	687b      	ldr	r3, [r7, #4]
  40115e:	2b07      	cmp	r3, #7
  401160:	d826      	bhi.n	4011b0 <osc_is_ready+0x5c>
  401162:	a201      	add	r2, pc, #4	; (adr r2, 401168 <osc_is_ready+0x14>)
  401164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401168:	00401189 	.word	0x00401189
  40116c:	0040118d 	.word	0x0040118d
  401170:	0040118d 	.word	0x0040118d
  401174:	0040119f 	.word	0x0040119f
  401178:	0040119f 	.word	0x0040119f
  40117c:	0040119f 	.word	0x0040119f
  401180:	0040119f 	.word	0x0040119f
  401184:	0040119f 	.word	0x0040119f
		return 1;
  401188:	2301      	movs	r3, #1
  40118a:	e012      	b.n	4011b2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  40118c:	4b0b      	ldr	r3, [pc, #44]	; (4011bc <osc_is_ready+0x68>)
  40118e:	4798      	blx	r3
  401190:	4603      	mov	r3, r0
  401192:	2b00      	cmp	r3, #0
  401194:	bf14      	ite	ne
  401196:	2301      	movne	r3, #1
  401198:	2300      	moveq	r3, #0
  40119a:	b2db      	uxtb	r3, r3
  40119c:	e009      	b.n	4011b2 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40119e:	4b08      	ldr	r3, [pc, #32]	; (4011c0 <osc_is_ready+0x6c>)
  4011a0:	4798      	blx	r3
  4011a2:	4603      	mov	r3, r0
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	bf14      	ite	ne
  4011a8:	2301      	movne	r3, #1
  4011aa:	2300      	moveq	r3, #0
  4011ac:	b2db      	uxtb	r3, r3
  4011ae:	e000      	b.n	4011b2 <osc_is_ready+0x5e>
	return 0;
  4011b0:	2300      	movs	r3, #0
}
  4011b2:	4618      	mov	r0, r3
  4011b4:	3708      	adds	r7, #8
  4011b6:	46bd      	mov	sp, r7
  4011b8:	bd80      	pop	{r7, pc}
  4011ba:	bf00      	nop
  4011bc:	00401915 	.word	0x00401915
  4011c0:	00401a31 	.word	0x00401a31

004011c4 <osc_get_rate>:
{
  4011c4:	b480      	push	{r7}
  4011c6:	b083      	sub	sp, #12
  4011c8:	af00      	add	r7, sp, #0
  4011ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4011cc:	687b      	ldr	r3, [r7, #4]
  4011ce:	2b07      	cmp	r3, #7
  4011d0:	d825      	bhi.n	40121e <osc_get_rate+0x5a>
  4011d2:	a201      	add	r2, pc, #4	; (adr r2, 4011d8 <osc_get_rate+0x14>)
  4011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011d8:	004011f9 	.word	0x004011f9
  4011dc:	004011ff 	.word	0x004011ff
  4011e0:	00401205 	.word	0x00401205
  4011e4:	0040120b 	.word	0x0040120b
  4011e8:	0040120f 	.word	0x0040120f
  4011ec:	00401213 	.word	0x00401213
  4011f0:	00401217 	.word	0x00401217
  4011f4:	0040121b 	.word	0x0040121b
		return OSC_SLCK_32K_RC_HZ;
  4011f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4011fc:	e010      	b.n	401220 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4011fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401202:	e00d      	b.n	401220 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401208:	e00a      	b.n	401220 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40120a:	4b08      	ldr	r3, [pc, #32]	; (40122c <osc_get_rate+0x68>)
  40120c:	e008      	b.n	401220 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40120e:	4b08      	ldr	r3, [pc, #32]	; (401230 <osc_get_rate+0x6c>)
  401210:	e006      	b.n	401220 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401212:	4b08      	ldr	r3, [pc, #32]	; (401234 <osc_get_rate+0x70>)
  401214:	e004      	b.n	401220 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401216:	4b07      	ldr	r3, [pc, #28]	; (401234 <osc_get_rate+0x70>)
  401218:	e002      	b.n	401220 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40121a:	4b06      	ldr	r3, [pc, #24]	; (401234 <osc_get_rate+0x70>)
  40121c:	e000      	b.n	401220 <osc_get_rate+0x5c>
	return 0;
  40121e:	2300      	movs	r3, #0
}
  401220:	4618      	mov	r0, r3
  401222:	370c      	adds	r7, #12
  401224:	46bd      	mov	sp, r7
  401226:	bc80      	pop	{r7}
  401228:	4770      	bx	lr
  40122a:	bf00      	nop
  40122c:	003d0900 	.word	0x003d0900
  401230:	007a1200 	.word	0x007a1200
  401234:	00b71b00 	.word	0x00b71b00

00401238 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401238:	b580      	push	{r7, lr}
  40123a:	b082      	sub	sp, #8
  40123c:	af00      	add	r7, sp, #0
  40123e:	4603      	mov	r3, r0
  401240:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  401242:	bf00      	nop
  401244:	79fb      	ldrb	r3, [r7, #7]
  401246:	4618      	mov	r0, r3
  401248:	4b05      	ldr	r3, [pc, #20]	; (401260 <osc_wait_ready+0x28>)
  40124a:	4798      	blx	r3
  40124c:	4603      	mov	r3, r0
  40124e:	f083 0301 	eor.w	r3, r3, #1
  401252:	b2db      	uxtb	r3, r3
  401254:	2b00      	cmp	r3, #0
  401256:	d1f5      	bne.n	401244 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401258:	bf00      	nop
  40125a:	3708      	adds	r7, #8
  40125c:	46bd      	mov	sp, r7
  40125e:	bd80      	pop	{r7, pc}
  401260:	00401155 	.word	0x00401155

00401264 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401264:	b580      	push	{r7, lr}
  401266:	b086      	sub	sp, #24
  401268:	af00      	add	r7, sp, #0
  40126a:	60f8      	str	r0, [r7, #12]
  40126c:	607a      	str	r2, [r7, #4]
  40126e:	603b      	str	r3, [r7, #0]
  401270:	460b      	mov	r3, r1
  401272:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401274:	7afb      	ldrb	r3, [r7, #11]
  401276:	4618      	mov	r0, r3
  401278:	4b0d      	ldr	r3, [pc, #52]	; (4012b0 <pll_config_init+0x4c>)
  40127a:	4798      	blx	r3
  40127c:	4602      	mov	r2, r0
  40127e:	687b      	ldr	r3, [r7, #4]
  401280:	fbb2 f3f3 	udiv	r3, r2, r3
  401284:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401286:	697b      	ldr	r3, [r7, #20]
  401288:	683a      	ldr	r2, [r7, #0]
  40128a:	fb02 f303 	mul.w	r3, r2, r3
  40128e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401290:	683b      	ldr	r3, [r7, #0]
  401292:	3b01      	subs	r3, #1
  401294:	041a      	lsls	r2, r3, #16
  401296:	4b07      	ldr	r3, [pc, #28]	; (4012b4 <pll_config_init+0x50>)
  401298:	4013      	ands	r3, r2
  40129a:	687a      	ldr	r2, [r7, #4]
  40129c:	b2d2      	uxtb	r2, r2
  40129e:	4313      	orrs	r3, r2
  4012a0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4012a4:	68fb      	ldr	r3, [r7, #12]
  4012a6:	601a      	str	r2, [r3, #0]
}
  4012a8:	bf00      	nop
  4012aa:	3718      	adds	r7, #24
  4012ac:	46bd      	mov	sp, r7
  4012ae:	bd80      	pop	{r7, pc}
  4012b0:	004011c5 	.word	0x004011c5
  4012b4:	07ff0000 	.word	0x07ff0000

004012b8 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4012b8:	b580      	push	{r7, lr}
  4012ba:	b082      	sub	sp, #8
  4012bc:	af00      	add	r7, sp, #0
  4012be:	6078      	str	r0, [r7, #4]
  4012c0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4012c2:	683b      	ldr	r3, [r7, #0]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d108      	bne.n	4012da <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4012c8:	4b09      	ldr	r3, [pc, #36]	; (4012f0 <pll_enable+0x38>)
  4012ca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4012cc:	4a09      	ldr	r2, [pc, #36]	; (4012f4 <pll_enable+0x3c>)
  4012ce:	687b      	ldr	r3, [r7, #4]
  4012d0:	681b      	ldr	r3, [r3, #0]
  4012d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4012d6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  4012d8:	e005      	b.n	4012e6 <pll_enable+0x2e>
		pmc_disable_pllbck();
  4012da:	4b07      	ldr	r3, [pc, #28]	; (4012f8 <pll_enable+0x40>)
  4012dc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4012de:	4a05      	ldr	r2, [pc, #20]	; (4012f4 <pll_enable+0x3c>)
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	681b      	ldr	r3, [r3, #0]
  4012e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  4012e6:	bf00      	nop
  4012e8:	3708      	adds	r7, #8
  4012ea:	46bd      	mov	sp, r7
  4012ec:	bd80      	pop	{r7, pc}
  4012ee:	bf00      	nop
  4012f0:	00401a49 	.word	0x00401a49
  4012f4:	400e0400 	.word	0x400e0400
  4012f8:	00401a79 	.word	0x00401a79

004012fc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4012fc:	b580      	push	{r7, lr}
  4012fe:	b082      	sub	sp, #8
  401300:	af00      	add	r7, sp, #0
  401302:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401304:	687b      	ldr	r3, [r7, #4]
  401306:	2b00      	cmp	r3, #0
  401308:	d103      	bne.n	401312 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40130a:	4b05      	ldr	r3, [pc, #20]	; (401320 <pll_is_locked+0x24>)
  40130c:	4798      	blx	r3
  40130e:	4603      	mov	r3, r0
  401310:	e002      	b.n	401318 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  401312:	4b04      	ldr	r3, [pc, #16]	; (401324 <pll_is_locked+0x28>)
  401314:	4798      	blx	r3
  401316:	4603      	mov	r3, r0
	}
}
  401318:	4618      	mov	r0, r3
  40131a:	3708      	adds	r7, #8
  40131c:	46bd      	mov	sp, r7
  40131e:	bd80      	pop	{r7, pc}
  401320:	00401a61 	.word	0x00401a61
  401324:	00401a91 	.word	0x00401a91

00401328 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401328:	b580      	push	{r7, lr}
  40132a:	b082      	sub	sp, #8
  40132c:	af00      	add	r7, sp, #0
  40132e:	4603      	mov	r3, r0
  401330:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401332:	79fb      	ldrb	r3, [r7, #7]
  401334:	3b03      	subs	r3, #3
  401336:	2b04      	cmp	r3, #4
  401338:	d808      	bhi.n	40134c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40133a:	79fb      	ldrb	r3, [r7, #7]
  40133c:	4618      	mov	r0, r3
  40133e:	4b06      	ldr	r3, [pc, #24]	; (401358 <pll_enable_source+0x30>)
  401340:	4798      	blx	r3
		osc_wait_ready(e_src);
  401342:	79fb      	ldrb	r3, [r7, #7]
  401344:	4618      	mov	r0, r3
  401346:	4b05      	ldr	r3, [pc, #20]	; (40135c <pll_enable_source+0x34>)
  401348:	4798      	blx	r3
		break;
  40134a:	e000      	b.n	40134e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40134c:	bf00      	nop
	}
}
  40134e:	bf00      	nop
  401350:	3708      	adds	r7, #8
  401352:	46bd      	mov	sp, r7
  401354:	bd80      	pop	{r7, pc}
  401356:	bf00      	nop
  401358:	004010cd 	.word	0x004010cd
  40135c:	00401239 	.word	0x00401239

00401360 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401360:	b580      	push	{r7, lr}
  401362:	b082      	sub	sp, #8
  401364:	af00      	add	r7, sp, #0
  401366:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401368:	bf00      	nop
  40136a:	6878      	ldr	r0, [r7, #4]
  40136c:	4b04      	ldr	r3, [pc, #16]	; (401380 <pll_wait_for_lock+0x20>)
  40136e:	4798      	blx	r3
  401370:	4603      	mov	r3, r0
  401372:	2b00      	cmp	r3, #0
  401374:	d0f9      	beq.n	40136a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401376:	2300      	movs	r3, #0
}
  401378:	4618      	mov	r0, r3
  40137a:	3708      	adds	r7, #8
  40137c:	46bd      	mov	sp, r7
  40137e:	bd80      	pop	{r7, pc}
  401380:	004012fd 	.word	0x004012fd

00401384 <sysclk_get_main_hz>:
{
  401384:	b580      	push	{r7, lr}
  401386:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401388:	2006      	movs	r0, #6
  40138a:	4b04      	ldr	r3, [pc, #16]	; (40139c <sysclk_get_main_hz+0x18>)
  40138c:	4798      	blx	r3
  40138e:	4602      	mov	r2, r0
  401390:	4613      	mov	r3, r2
  401392:	009b      	lsls	r3, r3, #2
  401394:	4413      	add	r3, r2
  401396:	009b      	lsls	r3, r3, #2
}
  401398:	4618      	mov	r0, r3
  40139a:	bd80      	pop	{r7, pc}
  40139c:	004011c5 	.word	0x004011c5

004013a0 <sysclk_get_cpu_hz>:
{
  4013a0:	b580      	push	{r7, lr}
  4013a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <sysclk_get_cpu_hz+0x10>)
  4013a6:	4798      	blx	r3
  4013a8:	4603      	mov	r3, r0
  4013aa:	085b      	lsrs	r3, r3, #1
}
  4013ac:	4618      	mov	r0, r3
  4013ae:	bd80      	pop	{r7, pc}
  4013b0:	00401385 	.word	0x00401385

004013b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4013b4:	b590      	push	{r4, r7, lr}
  4013b6:	b083      	sub	sp, #12
  4013b8:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4013ba:	4811      	ldr	r0, [pc, #68]	; (401400 <sysclk_init+0x4c>)
  4013bc:	4b11      	ldr	r3, [pc, #68]	; (401404 <sysclk_init+0x50>)
  4013be:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4013c0:	2006      	movs	r0, #6
  4013c2:	4b11      	ldr	r3, [pc, #68]	; (401408 <sysclk_init+0x54>)
  4013c4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4013c6:	1d38      	adds	r0, r7, #4
  4013c8:	2314      	movs	r3, #20
  4013ca:	2201      	movs	r2, #1
  4013cc:	2106      	movs	r1, #6
  4013ce:	4c0f      	ldr	r4, [pc, #60]	; (40140c <sysclk_init+0x58>)
  4013d0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4013d2:	1d3b      	adds	r3, r7, #4
  4013d4:	2100      	movs	r1, #0
  4013d6:	4618      	mov	r0, r3
  4013d8:	4b0d      	ldr	r3, [pc, #52]	; (401410 <sysclk_init+0x5c>)
  4013da:	4798      	blx	r3
		pll_wait_for_lock(0);
  4013dc:	2000      	movs	r0, #0
  4013de:	4b0d      	ldr	r3, [pc, #52]	; (401414 <sysclk_init+0x60>)
  4013e0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4013e2:	2010      	movs	r0, #16
  4013e4:	4b0c      	ldr	r3, [pc, #48]	; (401418 <sysclk_init+0x64>)
  4013e6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4013e8:	4b0c      	ldr	r3, [pc, #48]	; (40141c <sysclk_init+0x68>)
  4013ea:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4013ec:	4b0c      	ldr	r3, [pc, #48]	; (401420 <sysclk_init+0x6c>)
  4013ee:	4798      	blx	r3
  4013f0:	4603      	mov	r3, r0
  4013f2:	4618      	mov	r0, r3
  4013f4:	4b03      	ldr	r3, [pc, #12]	; (401404 <sysclk_init+0x50>)
  4013f6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4013f8:	bf00      	nop
  4013fa:	370c      	adds	r7, #12
  4013fc:	46bd      	mov	sp, r7
  4013fe:	bd90      	pop	{r4, r7, pc}
  401400:	07270e00 	.word	0x07270e00
  401404:	0040210d 	.word	0x0040210d
  401408:	00401329 	.word	0x00401329
  40140c:	00401265 	.word	0x00401265
  401410:	004012b9 	.word	0x004012b9
  401414:	00401361 	.word	0x00401361
  401418:	0040185d 	.word	0x0040185d
  40141c:	00401f75 	.word	0x00401f75
  401420:	004013a1 	.word	0x004013a1

00401424 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401424:	b480      	push	{r7}
  401426:	b085      	sub	sp, #20
  401428:	af00      	add	r7, sp, #0
  40142a:	60f8      	str	r0, [r7, #12]
  40142c:	60b9      	str	r1, [r7, #8]
  40142e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401430:	687b      	ldr	r3, [r7, #4]
  401432:	2b00      	cmp	r3, #0
  401434:	d003      	beq.n	40143e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401436:	68fb      	ldr	r3, [r7, #12]
  401438:	68ba      	ldr	r2, [r7, #8]
  40143a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  40143c:	e002      	b.n	401444 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40143e:	68fb      	ldr	r3, [r7, #12]
  401440:	68ba      	ldr	r2, [r7, #8]
  401442:	661a      	str	r2, [r3, #96]	; 0x60
}
  401444:	bf00      	nop
  401446:	3714      	adds	r7, #20
  401448:	46bd      	mov	sp, r7
  40144a:	bc80      	pop	{r7}
  40144c:	4770      	bx	lr

0040144e <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40144e:	b480      	push	{r7}
  401450:	b087      	sub	sp, #28
  401452:	af00      	add	r7, sp, #0
  401454:	60f8      	str	r0, [r7, #12]
  401456:	60b9      	str	r1, [r7, #8]
  401458:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40145a:	68fb      	ldr	r3, [r7, #12]
  40145c:	687a      	ldr	r2, [r7, #4]
  40145e:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401460:	68bb      	ldr	r3, [r7, #8]
  401462:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401466:	d04a      	beq.n	4014fe <pio_set_peripheral+0xb0>
  401468:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40146c:	d808      	bhi.n	401480 <pio_set_peripheral+0x32>
  40146e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401472:	d016      	beq.n	4014a2 <pio_set_peripheral+0x54>
  401474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401478:	d02c      	beq.n	4014d4 <pio_set_peripheral+0x86>
  40147a:	2b00      	cmp	r3, #0
  40147c:	d069      	beq.n	401552 <pio_set_peripheral+0x104>
  40147e:	e064      	b.n	40154a <pio_set_peripheral+0xfc>
  401480:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401484:	d065      	beq.n	401552 <pio_set_peripheral+0x104>
  401486:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40148a:	d803      	bhi.n	401494 <pio_set_peripheral+0x46>
  40148c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401490:	d04a      	beq.n	401528 <pio_set_peripheral+0xda>
  401492:	e05a      	b.n	40154a <pio_set_peripheral+0xfc>
  401494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401498:	d05b      	beq.n	401552 <pio_set_peripheral+0x104>
  40149a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40149e:	d058      	beq.n	401552 <pio_set_peripheral+0x104>
  4014a0:	e053      	b.n	40154a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014a2:	68fb      	ldr	r3, [r7, #12]
  4014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4014a6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4014a8:	68fb      	ldr	r3, [r7, #12]
  4014aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4014ac:	687b      	ldr	r3, [r7, #4]
  4014ae:	43d9      	mvns	r1, r3
  4014b0:	697b      	ldr	r3, [r7, #20]
  4014b2:	400b      	ands	r3, r1
  4014b4:	401a      	ands	r2, r3
  4014b6:	68fb      	ldr	r3, [r7, #12]
  4014b8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014ba:	68fb      	ldr	r3, [r7, #12]
  4014bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4014be:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014c0:	68fb      	ldr	r3, [r7, #12]
  4014c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014c4:	687b      	ldr	r3, [r7, #4]
  4014c6:	43d9      	mvns	r1, r3
  4014c8:	697b      	ldr	r3, [r7, #20]
  4014ca:	400b      	ands	r3, r1
  4014cc:	401a      	ands	r2, r3
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4014d2:	e03a      	b.n	40154a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014d4:	68fb      	ldr	r3, [r7, #12]
  4014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4014d8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4014da:	687a      	ldr	r2, [r7, #4]
  4014dc:	697b      	ldr	r3, [r7, #20]
  4014de:	431a      	orrs	r2, r3
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014e4:	68fb      	ldr	r3, [r7, #12]
  4014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4014e8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4014ea:	68fb      	ldr	r3, [r7, #12]
  4014ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4014ee:	687b      	ldr	r3, [r7, #4]
  4014f0:	43d9      	mvns	r1, r3
  4014f2:	697b      	ldr	r3, [r7, #20]
  4014f4:	400b      	ands	r3, r1
  4014f6:	401a      	ands	r2, r3
  4014f8:	68fb      	ldr	r3, [r7, #12]
  4014fa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4014fc:	e025      	b.n	40154a <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4014fe:	68fb      	ldr	r3, [r7, #12]
  401500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401502:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401504:	68fb      	ldr	r3, [r7, #12]
  401506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401508:	687b      	ldr	r3, [r7, #4]
  40150a:	43d9      	mvns	r1, r3
  40150c:	697b      	ldr	r3, [r7, #20]
  40150e:	400b      	ands	r3, r1
  401510:	401a      	ands	r2, r3
  401512:	68fb      	ldr	r3, [r7, #12]
  401514:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401516:	68fb      	ldr	r3, [r7, #12]
  401518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40151a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40151c:	687a      	ldr	r2, [r7, #4]
  40151e:	697b      	ldr	r3, [r7, #20]
  401520:	431a      	orrs	r2, r3
  401522:	68fb      	ldr	r3, [r7, #12]
  401524:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401526:	e010      	b.n	40154a <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401528:	68fb      	ldr	r3, [r7, #12]
  40152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40152c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40152e:	687a      	ldr	r2, [r7, #4]
  401530:	697b      	ldr	r3, [r7, #20]
  401532:	431a      	orrs	r2, r3
  401534:	68fb      	ldr	r3, [r7, #12]
  401536:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401538:	68fb      	ldr	r3, [r7, #12]
  40153a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40153c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40153e:	687a      	ldr	r2, [r7, #4]
  401540:	697b      	ldr	r3, [r7, #20]
  401542:	431a      	orrs	r2, r3
  401544:	68fb      	ldr	r3, [r7, #12]
  401546:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401548:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40154a:	68fb      	ldr	r3, [r7, #12]
  40154c:	687a      	ldr	r2, [r7, #4]
  40154e:	605a      	str	r2, [r3, #4]
  401550:	e000      	b.n	401554 <pio_set_peripheral+0x106>
		return;
  401552:	bf00      	nop
}
  401554:	371c      	adds	r7, #28
  401556:	46bd      	mov	sp, r7
  401558:	bc80      	pop	{r7}
  40155a:	4770      	bx	lr

0040155c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  40155c:	b580      	push	{r7, lr}
  40155e:	b084      	sub	sp, #16
  401560:	af00      	add	r7, sp, #0
  401562:	60f8      	str	r0, [r7, #12]
  401564:	60b9      	str	r1, [r7, #8]
  401566:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401568:	68b9      	ldr	r1, [r7, #8]
  40156a:	68f8      	ldr	r0, [r7, #12]
  40156c:	4b19      	ldr	r3, [pc, #100]	; (4015d4 <pio_set_input+0x78>)
  40156e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401570:	687b      	ldr	r3, [r7, #4]
  401572:	f003 0301 	and.w	r3, r3, #1
  401576:	461a      	mov	r2, r3
  401578:	68b9      	ldr	r1, [r7, #8]
  40157a:	68f8      	ldr	r0, [r7, #12]
  40157c:	4b16      	ldr	r3, [pc, #88]	; (4015d8 <pio_set_input+0x7c>)
  40157e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401580:	687b      	ldr	r3, [r7, #4]
  401582:	f003 030a 	and.w	r3, r3, #10
  401586:	2b00      	cmp	r3, #0
  401588:	d003      	beq.n	401592 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40158a:	68fb      	ldr	r3, [r7, #12]
  40158c:	68ba      	ldr	r2, [r7, #8]
  40158e:	621a      	str	r2, [r3, #32]
  401590:	e002      	b.n	401598 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401592:	68fb      	ldr	r3, [r7, #12]
  401594:	68ba      	ldr	r2, [r7, #8]
  401596:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401598:	687b      	ldr	r3, [r7, #4]
  40159a:	f003 0302 	and.w	r3, r3, #2
  40159e:	2b00      	cmp	r3, #0
  4015a0:	d004      	beq.n	4015ac <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4015a2:	68fb      	ldr	r3, [r7, #12]
  4015a4:	68ba      	ldr	r2, [r7, #8]
  4015a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4015aa:	e008      	b.n	4015be <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4015ac:	687b      	ldr	r3, [r7, #4]
  4015ae:	f003 0308 	and.w	r3, r3, #8
  4015b2:	2b00      	cmp	r3, #0
  4015b4:	d003      	beq.n	4015be <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4015b6:	68fb      	ldr	r3, [r7, #12]
  4015b8:	68ba      	ldr	r2, [r7, #8]
  4015ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4015be:	68fb      	ldr	r3, [r7, #12]
  4015c0:	68ba      	ldr	r2, [r7, #8]
  4015c2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4015c4:	68fb      	ldr	r3, [r7, #12]
  4015c6:	68ba      	ldr	r2, [r7, #8]
  4015c8:	601a      	str	r2, [r3, #0]
}
  4015ca:	bf00      	nop
  4015cc:	3710      	adds	r7, #16
  4015ce:	46bd      	mov	sp, r7
  4015d0:	bd80      	pop	{r7, pc}
  4015d2:	bf00      	nop
  4015d4:	00401641 	.word	0x00401641
  4015d8:	00401425 	.word	0x00401425

004015dc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4015dc:	b580      	push	{r7, lr}
  4015de:	b084      	sub	sp, #16
  4015e0:	af00      	add	r7, sp, #0
  4015e2:	60f8      	str	r0, [r7, #12]
  4015e4:	60b9      	str	r1, [r7, #8]
  4015e6:	607a      	str	r2, [r7, #4]
  4015e8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4015ea:	68b9      	ldr	r1, [r7, #8]
  4015ec:	68f8      	ldr	r0, [r7, #12]
  4015ee:	4b12      	ldr	r3, [pc, #72]	; (401638 <pio_set_output+0x5c>)
  4015f0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4015f2:	69ba      	ldr	r2, [r7, #24]
  4015f4:	68b9      	ldr	r1, [r7, #8]
  4015f6:	68f8      	ldr	r0, [r7, #12]
  4015f8:	4b10      	ldr	r3, [pc, #64]	; (40163c <pio_set_output+0x60>)
  4015fa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4015fc:	683b      	ldr	r3, [r7, #0]
  4015fe:	2b00      	cmp	r3, #0
  401600:	d003      	beq.n	40160a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401602:	68fb      	ldr	r3, [r7, #12]
  401604:	68ba      	ldr	r2, [r7, #8]
  401606:	651a      	str	r2, [r3, #80]	; 0x50
  401608:	e002      	b.n	401610 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40160a:	68fb      	ldr	r3, [r7, #12]
  40160c:	68ba      	ldr	r2, [r7, #8]
  40160e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401610:	687b      	ldr	r3, [r7, #4]
  401612:	2b00      	cmp	r3, #0
  401614:	d003      	beq.n	40161e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401616:	68fb      	ldr	r3, [r7, #12]
  401618:	68ba      	ldr	r2, [r7, #8]
  40161a:	631a      	str	r2, [r3, #48]	; 0x30
  40161c:	e002      	b.n	401624 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40161e:	68fb      	ldr	r3, [r7, #12]
  401620:	68ba      	ldr	r2, [r7, #8]
  401622:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401624:	68fb      	ldr	r3, [r7, #12]
  401626:	68ba      	ldr	r2, [r7, #8]
  401628:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40162a:	68fb      	ldr	r3, [r7, #12]
  40162c:	68ba      	ldr	r2, [r7, #8]
  40162e:	601a      	str	r2, [r3, #0]
}
  401630:	bf00      	nop
  401632:	3710      	adds	r7, #16
  401634:	46bd      	mov	sp, r7
  401636:	bd80      	pop	{r7, pc}
  401638:	00401641 	.word	0x00401641
  40163c:	00401425 	.word	0x00401425

00401640 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401640:	b480      	push	{r7}
  401642:	b083      	sub	sp, #12
  401644:	af00      	add	r7, sp, #0
  401646:	6078      	str	r0, [r7, #4]
  401648:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40164a:	687b      	ldr	r3, [r7, #4]
  40164c:	683a      	ldr	r2, [r7, #0]
  40164e:	645a      	str	r2, [r3, #68]	; 0x44
}
  401650:	bf00      	nop
  401652:	370c      	adds	r7, #12
  401654:	46bd      	mov	sp, r7
  401656:	bc80      	pop	{r7}
  401658:	4770      	bx	lr

0040165a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40165a:	b480      	push	{r7}
  40165c:	b083      	sub	sp, #12
  40165e:	af00      	add	r7, sp, #0
  401660:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401662:	687b      	ldr	r3, [r7, #4]
  401664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401666:	4618      	mov	r0, r3
  401668:	370c      	adds	r7, #12
  40166a:	46bd      	mov	sp, r7
  40166c:	bc80      	pop	{r7}
  40166e:	4770      	bx	lr

00401670 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401670:	b480      	push	{r7}
  401672:	b083      	sub	sp, #12
  401674:	af00      	add	r7, sp, #0
  401676:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401678:	687b      	ldr	r3, [r7, #4]
  40167a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40167c:	4618      	mov	r0, r3
  40167e:	370c      	adds	r7, #12
  401680:	46bd      	mov	sp, r7
  401682:	bc80      	pop	{r7}
  401684:	4770      	bx	lr
	...

00401688 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401688:	b590      	push	{r4, r7, lr}
  40168a:	b087      	sub	sp, #28
  40168c:	af02      	add	r7, sp, #8
  40168e:	6078      	str	r0, [r7, #4]
  401690:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  401692:	6878      	ldr	r0, [r7, #4]
  401694:	4b63      	ldr	r3, [pc, #396]	; (401824 <pio_configure_pin+0x19c>)
  401696:	4798      	blx	r3
  401698:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40169a:	683b      	ldr	r3, [r7, #0]
  40169c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4016a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016a4:	d067      	beq.n	401776 <pio_configure_pin+0xee>
  4016a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016aa:	d809      	bhi.n	4016c0 <pio_configure_pin+0x38>
  4016ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016b0:	d02b      	beq.n	40170a <pio_configure_pin+0x82>
  4016b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4016b6:	d043      	beq.n	401740 <pio_configure_pin+0xb8>
  4016b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4016bc:	d00a      	beq.n	4016d4 <pio_configure_pin+0x4c>
  4016be:	e0a9      	b.n	401814 <pio_configure_pin+0x18c>
  4016c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4016c4:	d07e      	beq.n	4017c4 <pio_configure_pin+0x13c>
  4016c6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016ca:	d07b      	beq.n	4017c4 <pio_configure_pin+0x13c>
  4016cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4016d0:	d06c      	beq.n	4017ac <pio_configure_pin+0x124>
  4016d2:	e09f      	b.n	401814 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4016d4:	687b      	ldr	r3, [r7, #4]
  4016d6:	f003 031f 	and.w	r3, r3, #31
  4016da:	2201      	movs	r2, #1
  4016dc:	fa02 f303 	lsl.w	r3, r2, r3
  4016e0:	461a      	mov	r2, r3
  4016e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4016e6:	68f8      	ldr	r0, [r7, #12]
  4016e8:	4b4f      	ldr	r3, [pc, #316]	; (401828 <pio_configure_pin+0x1a0>)
  4016ea:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4016ec:	687b      	ldr	r3, [r7, #4]
  4016ee:	f003 031f 	and.w	r3, r3, #31
  4016f2:	2201      	movs	r2, #1
  4016f4:	fa02 f303 	lsl.w	r3, r2, r3
  4016f8:	4619      	mov	r1, r3
  4016fa:	683b      	ldr	r3, [r7, #0]
  4016fc:	f003 0301 	and.w	r3, r3, #1
  401700:	461a      	mov	r2, r3
  401702:	68f8      	ldr	r0, [r7, #12]
  401704:	4b49      	ldr	r3, [pc, #292]	; (40182c <pio_configure_pin+0x1a4>)
  401706:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401708:	e086      	b.n	401818 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40170a:	687b      	ldr	r3, [r7, #4]
  40170c:	f003 031f 	and.w	r3, r3, #31
  401710:	2201      	movs	r2, #1
  401712:	fa02 f303 	lsl.w	r3, r2, r3
  401716:	461a      	mov	r2, r3
  401718:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40171c:	68f8      	ldr	r0, [r7, #12]
  40171e:	4b42      	ldr	r3, [pc, #264]	; (401828 <pio_configure_pin+0x1a0>)
  401720:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401722:	687b      	ldr	r3, [r7, #4]
  401724:	f003 031f 	and.w	r3, r3, #31
  401728:	2201      	movs	r2, #1
  40172a:	fa02 f303 	lsl.w	r3, r2, r3
  40172e:	4619      	mov	r1, r3
  401730:	683b      	ldr	r3, [r7, #0]
  401732:	f003 0301 	and.w	r3, r3, #1
  401736:	461a      	mov	r2, r3
  401738:	68f8      	ldr	r0, [r7, #12]
  40173a:	4b3c      	ldr	r3, [pc, #240]	; (40182c <pio_configure_pin+0x1a4>)
  40173c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40173e:	e06b      	b.n	401818 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	f003 031f 	and.w	r3, r3, #31
  401746:	2201      	movs	r2, #1
  401748:	fa02 f303 	lsl.w	r3, r2, r3
  40174c:	461a      	mov	r2, r3
  40174e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401752:	68f8      	ldr	r0, [r7, #12]
  401754:	4b34      	ldr	r3, [pc, #208]	; (401828 <pio_configure_pin+0x1a0>)
  401756:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401758:	687b      	ldr	r3, [r7, #4]
  40175a:	f003 031f 	and.w	r3, r3, #31
  40175e:	2201      	movs	r2, #1
  401760:	fa02 f303 	lsl.w	r3, r2, r3
  401764:	4619      	mov	r1, r3
  401766:	683b      	ldr	r3, [r7, #0]
  401768:	f003 0301 	and.w	r3, r3, #1
  40176c:	461a      	mov	r2, r3
  40176e:	68f8      	ldr	r0, [r7, #12]
  401770:	4b2e      	ldr	r3, [pc, #184]	; (40182c <pio_configure_pin+0x1a4>)
  401772:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401774:	e050      	b.n	401818 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401776:	687b      	ldr	r3, [r7, #4]
  401778:	f003 031f 	and.w	r3, r3, #31
  40177c:	2201      	movs	r2, #1
  40177e:	fa02 f303 	lsl.w	r3, r2, r3
  401782:	461a      	mov	r2, r3
  401784:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401788:	68f8      	ldr	r0, [r7, #12]
  40178a:	4b27      	ldr	r3, [pc, #156]	; (401828 <pio_configure_pin+0x1a0>)
  40178c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	f003 031f 	and.w	r3, r3, #31
  401794:	2201      	movs	r2, #1
  401796:	fa02 f303 	lsl.w	r3, r2, r3
  40179a:	4619      	mov	r1, r3
  40179c:	683b      	ldr	r3, [r7, #0]
  40179e:	f003 0301 	and.w	r3, r3, #1
  4017a2:	461a      	mov	r2, r3
  4017a4:	68f8      	ldr	r0, [r7, #12]
  4017a6:	4b21      	ldr	r3, [pc, #132]	; (40182c <pio_configure_pin+0x1a4>)
  4017a8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4017aa:	e035      	b.n	401818 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4017ac:	687b      	ldr	r3, [r7, #4]
  4017ae:	f003 031f 	and.w	r3, r3, #31
  4017b2:	2201      	movs	r2, #1
  4017b4:	fa02 f303 	lsl.w	r3, r2, r3
  4017b8:	683a      	ldr	r2, [r7, #0]
  4017ba:	4619      	mov	r1, r3
  4017bc:	68f8      	ldr	r0, [r7, #12]
  4017be:	4b1c      	ldr	r3, [pc, #112]	; (401830 <pio_configure_pin+0x1a8>)
  4017c0:	4798      	blx	r3
		break;
  4017c2:	e029      	b.n	401818 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017c4:	687b      	ldr	r3, [r7, #4]
  4017c6:	f003 031f 	and.w	r3, r3, #31
  4017ca:	2201      	movs	r2, #1
  4017cc:	fa02 f303 	lsl.w	r3, r2, r3
  4017d0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4017d2:	683b      	ldr	r3, [r7, #0]
  4017d4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4017dc:	bf0c      	ite	eq
  4017de:	2301      	moveq	r3, #1
  4017e0:	2300      	movne	r3, #0
  4017e2:	b2db      	uxtb	r3, r3
  4017e4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	bf14      	ite	ne
  4017f0:	2301      	movne	r3, #1
  4017f2:	2300      	moveq	r3, #0
  4017f4:	b2db      	uxtb	r3, r3
  4017f6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4017f8:	683b      	ldr	r3, [r7, #0]
  4017fa:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4017fe:	2b00      	cmp	r3, #0
  401800:	bf14      	ite	ne
  401802:	2301      	movne	r3, #1
  401804:	2300      	moveq	r3, #0
  401806:	b2db      	uxtb	r3, r3
  401808:	9300      	str	r3, [sp, #0]
  40180a:	4603      	mov	r3, r0
  40180c:	68f8      	ldr	r0, [r7, #12]
  40180e:	4c09      	ldr	r4, [pc, #36]	; (401834 <pio_configure_pin+0x1ac>)
  401810:	47a0      	blx	r4
		break;
  401812:	e001      	b.n	401818 <pio_configure_pin+0x190>

	default:
		return 0;
  401814:	2300      	movs	r3, #0
  401816:	e000      	b.n	40181a <pio_configure_pin+0x192>
	}

	return 1;
  401818:	2301      	movs	r3, #1
}
  40181a:	4618      	mov	r0, r3
  40181c:	3714      	adds	r7, #20
  40181e:	46bd      	mov	sp, r7
  401820:	bd90      	pop	{r4, r7, pc}
  401822:	bf00      	nop
  401824:	00401839 	.word	0x00401839
  401828:	0040144f 	.word	0x0040144f
  40182c:	00401425 	.word	0x00401425
  401830:	0040155d 	.word	0x0040155d
  401834:	004015dd 	.word	0x004015dd

00401838 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401838:	b480      	push	{r7}
  40183a:	b085      	sub	sp, #20
  40183c:	af00      	add	r7, sp, #0
  40183e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401840:	687b      	ldr	r3, [r7, #4]
  401842:	095b      	lsrs	r3, r3, #5
  401844:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401848:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40184c:	025b      	lsls	r3, r3, #9
  40184e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401850:	68fb      	ldr	r3, [r7, #12]
}
  401852:	4618      	mov	r0, r3
  401854:	3714      	adds	r7, #20
  401856:	46bd      	mov	sp, r7
  401858:	bc80      	pop	{r7}
  40185a:	4770      	bx	lr

0040185c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40185c:	b480      	push	{r7}
  40185e:	b085      	sub	sp, #20
  401860:	af00      	add	r7, sp, #0
  401862:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401864:	491c      	ldr	r1, [pc, #112]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  401866:	4b1c      	ldr	r3, [pc, #112]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  401868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40186a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40186e:	687b      	ldr	r3, [r7, #4]
  401870:	4313      	orrs	r3, r2
  401872:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401874:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401878:	60fb      	str	r3, [r7, #12]
  40187a:	e007      	b.n	40188c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40187c:	68fb      	ldr	r3, [r7, #12]
  40187e:	2b00      	cmp	r3, #0
  401880:	d101      	bne.n	401886 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401882:	2301      	movs	r3, #1
  401884:	e023      	b.n	4018ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401886:	68fb      	ldr	r3, [r7, #12]
  401888:	3b01      	subs	r3, #1
  40188a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40188c:	4b12      	ldr	r3, [pc, #72]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  40188e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401890:	f003 0308 	and.w	r3, r3, #8
  401894:	2b00      	cmp	r3, #0
  401896:	d0f1      	beq.n	40187c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401898:	4a0f      	ldr	r2, [pc, #60]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  40189a:	4b0f      	ldr	r3, [pc, #60]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  40189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40189e:	f023 0303 	bic.w	r3, r3, #3
  4018a2:	f043 0302 	orr.w	r3, r3, #2
  4018a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4018ac:	60fb      	str	r3, [r7, #12]
  4018ae:	e007      	b.n	4018c0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4018b0:	68fb      	ldr	r3, [r7, #12]
  4018b2:	2b00      	cmp	r3, #0
  4018b4:	d101      	bne.n	4018ba <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4018b6:	2301      	movs	r3, #1
  4018b8:	e009      	b.n	4018ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4018ba:	68fb      	ldr	r3, [r7, #12]
  4018bc:	3b01      	subs	r3, #1
  4018be:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4018c0:	4b05      	ldr	r3, [pc, #20]	; (4018d8 <pmc_switch_mck_to_pllack+0x7c>)
  4018c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018c4:	f003 0308 	and.w	r3, r3, #8
  4018c8:	2b00      	cmp	r3, #0
  4018ca:	d0f1      	beq.n	4018b0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4018cc:	2300      	movs	r3, #0
}
  4018ce:	4618      	mov	r0, r3
  4018d0:	3714      	adds	r7, #20
  4018d2:	46bd      	mov	sp, r7
  4018d4:	bc80      	pop	{r7}
  4018d6:	4770      	bx	lr
  4018d8:	400e0400 	.word	0x400e0400

004018dc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4018dc:	b480      	push	{r7}
  4018de:	b083      	sub	sp, #12
  4018e0:	af00      	add	r7, sp, #0
  4018e2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4018e4:	687b      	ldr	r3, [r7, #4]
  4018e6:	2b01      	cmp	r3, #1
  4018e8:	d107      	bne.n	4018fa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4018ea:	4a08      	ldr	r2, [pc, #32]	; (40190c <pmc_switch_sclk_to_32kxtal+0x30>)
  4018ec:	4b07      	ldr	r3, [pc, #28]	; (40190c <pmc_switch_sclk_to_32kxtal+0x30>)
  4018ee:	689b      	ldr	r3, [r3, #8]
  4018f0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4018f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4018f8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4018fa:	4b04      	ldr	r3, [pc, #16]	; (40190c <pmc_switch_sclk_to_32kxtal+0x30>)
  4018fc:	4a04      	ldr	r2, [pc, #16]	; (401910 <pmc_switch_sclk_to_32kxtal+0x34>)
  4018fe:	601a      	str	r2, [r3, #0]
}
  401900:	bf00      	nop
  401902:	370c      	adds	r7, #12
  401904:	46bd      	mov	sp, r7
  401906:	bc80      	pop	{r7}
  401908:	4770      	bx	lr
  40190a:	bf00      	nop
  40190c:	400e1410 	.word	0x400e1410
  401910:	a5000008 	.word	0xa5000008

00401914 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401914:	b480      	push	{r7}
  401916:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401918:	4b09      	ldr	r3, [pc, #36]	; (401940 <pmc_osc_is_ready_32kxtal+0x2c>)
  40191a:	695b      	ldr	r3, [r3, #20]
  40191c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401920:	2b00      	cmp	r3, #0
  401922:	d007      	beq.n	401934 <pmc_osc_is_ready_32kxtal+0x20>
  401924:	4b07      	ldr	r3, [pc, #28]	; (401944 <pmc_osc_is_ready_32kxtal+0x30>)
  401926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401928:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40192c:	2b00      	cmp	r3, #0
  40192e:	d001      	beq.n	401934 <pmc_osc_is_ready_32kxtal+0x20>
  401930:	2301      	movs	r3, #1
  401932:	e000      	b.n	401936 <pmc_osc_is_ready_32kxtal+0x22>
  401934:	2300      	movs	r3, #0
}
  401936:	4618      	mov	r0, r3
  401938:	46bd      	mov	sp, r7
  40193a:	bc80      	pop	{r7}
  40193c:	4770      	bx	lr
  40193e:	bf00      	nop
  401940:	400e1410 	.word	0x400e1410
  401944:	400e0400 	.word	0x400e0400

00401948 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401948:	b480      	push	{r7}
  40194a:	b083      	sub	sp, #12
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401950:	4a18      	ldr	r2, [pc, #96]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401952:	4b18      	ldr	r3, [pc, #96]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401954:	6a1b      	ldr	r3, [r3, #32]
  401956:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40195a:	f043 0308 	orr.w	r3, r3, #8
  40195e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401960:	bf00      	nop
  401962:	4b14      	ldr	r3, [pc, #80]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40196a:	2b00      	cmp	r3, #0
  40196c:	d0f9      	beq.n	401962 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40196e:	4911      	ldr	r1, [pc, #68]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401970:	4b10      	ldr	r3, [pc, #64]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401972:	6a1b      	ldr	r3, [r3, #32]
  401974:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40197c:	687a      	ldr	r2, [r7, #4]
  40197e:	4313      	orrs	r3, r2
  401980:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401984:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401986:	bf00      	nop
  401988:	4b0a      	ldr	r3, [pc, #40]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  40198a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401990:	2b00      	cmp	r3, #0
  401992:	d0f9      	beq.n	401988 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401994:	4a07      	ldr	r2, [pc, #28]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401996:	4b07      	ldr	r3, [pc, #28]	; (4019b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401998:	6a1b      	ldr	r3, [r3, #32]
  40199a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4019a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019a6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4019a8:	bf00      	nop
  4019aa:	370c      	adds	r7, #12
  4019ac:	46bd      	mov	sp, r7
  4019ae:	bc80      	pop	{r7}
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop
  4019b4:	400e0400 	.word	0x400e0400

004019b8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4019b8:	b480      	push	{r7}
  4019ba:	b083      	sub	sp, #12
  4019bc:	af00      	add	r7, sp, #0
  4019be:	6078      	str	r0, [r7, #4]
  4019c0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019c2:	687b      	ldr	r3, [r7, #4]
  4019c4:	2b00      	cmp	r3, #0
  4019c6:	d008      	beq.n	4019da <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019c8:	4916      	ldr	r1, [pc, #88]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4019ca:	4b16      	ldr	r3, [pc, #88]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4019cc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4019ce:	4a16      	ldr	r2, [pc, #88]	; (401a28 <pmc_switch_mainck_to_xtal+0x70>)
  4019d0:	401a      	ands	r2, r3
  4019d2:	4b16      	ldr	r3, [pc, #88]	; (401a2c <pmc_switch_mainck_to_xtal+0x74>)
  4019d4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019d6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4019d8:	e01e      	b.n	401a18 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019da:	4912      	ldr	r1, [pc, #72]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4019dc:	4b11      	ldr	r3, [pc, #68]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4019de:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4019e4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019e8:	683a      	ldr	r2, [r7, #0]
  4019ea:	0212      	lsls	r2, r2, #8
  4019ec:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019ee:	4313      	orrs	r3, r2
  4019f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019f4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019f8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019fa:	bf00      	nop
  4019fc:	4b09      	ldr	r3, [pc, #36]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4019fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a00:	f003 0301 	and.w	r3, r3, #1
  401a04:	2b00      	cmp	r3, #0
  401a06:	d0f9      	beq.n	4019fc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401a08:	4a06      	ldr	r2, [pc, #24]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  401a0a:	4b06      	ldr	r3, [pc, #24]	; (401a24 <pmc_switch_mainck_to_xtal+0x6c>)
  401a0c:	6a1b      	ldr	r3, [r3, #32]
  401a0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401a16:	6213      	str	r3, [r2, #32]
}
  401a18:	bf00      	nop
  401a1a:	370c      	adds	r7, #12
  401a1c:	46bd      	mov	sp, r7
  401a1e:	bc80      	pop	{r7}
  401a20:	4770      	bx	lr
  401a22:	bf00      	nop
  401a24:	400e0400 	.word	0x400e0400
  401a28:	fec8fffc 	.word	0xfec8fffc
  401a2c:	01370002 	.word	0x01370002

00401a30 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401a30:	b480      	push	{r7}
  401a32:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a34:	4b03      	ldr	r3, [pc, #12]	; (401a44 <pmc_osc_is_ready_mainck+0x14>)
  401a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401a3c:	4618      	mov	r0, r3
  401a3e:	46bd      	mov	sp, r7
  401a40:	bc80      	pop	{r7}
  401a42:	4770      	bx	lr
  401a44:	400e0400 	.word	0x400e0400

00401a48 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401a48:	b480      	push	{r7}
  401a4a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a4c:	4b03      	ldr	r3, [pc, #12]	; (401a5c <pmc_disable_pllack+0x14>)
  401a4e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401a54:	bf00      	nop
  401a56:	46bd      	mov	sp, r7
  401a58:	bc80      	pop	{r7}
  401a5a:	4770      	bx	lr
  401a5c:	400e0400 	.word	0x400e0400

00401a60 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401a60:	b480      	push	{r7}
  401a62:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a64:	4b03      	ldr	r3, [pc, #12]	; (401a74 <pmc_is_locked_pllack+0x14>)
  401a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a68:	f003 0302 	and.w	r3, r3, #2
}
  401a6c:	4618      	mov	r0, r3
  401a6e:	46bd      	mov	sp, r7
  401a70:	bc80      	pop	{r7}
  401a72:	4770      	bx	lr
  401a74:	400e0400 	.word	0x400e0400

00401a78 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401a78:	b480      	push	{r7}
  401a7a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401a7c:	4b03      	ldr	r3, [pc, #12]	; (401a8c <pmc_disable_pllbck+0x14>)
  401a7e:	2200      	movs	r2, #0
  401a80:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401a82:	bf00      	nop
  401a84:	46bd      	mov	sp, r7
  401a86:	bc80      	pop	{r7}
  401a88:	4770      	bx	lr
  401a8a:	bf00      	nop
  401a8c:	400e0400 	.word	0x400e0400

00401a90 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401a90:	b480      	push	{r7}
  401a92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401a94:	4b03      	ldr	r3, [pc, #12]	; (401aa4 <pmc_is_locked_pllbck+0x14>)
  401a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401a98:	f003 0304 	and.w	r3, r3, #4
}
  401a9c:	4618      	mov	r0, r3
  401a9e:	46bd      	mov	sp, r7
  401aa0:	bc80      	pop	{r7}
  401aa2:	4770      	bx	lr
  401aa4:	400e0400 	.word	0x400e0400

00401aa8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401aa8:	b480      	push	{r7}
  401aaa:	b083      	sub	sp, #12
  401aac:	af00      	add	r7, sp, #0
  401aae:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401ab0:	687b      	ldr	r3, [r7, #4]
  401ab2:	2b22      	cmp	r3, #34	; 0x22
  401ab4:	d901      	bls.n	401aba <pmc_enable_periph_clk+0x12>
		return 1;
  401ab6:	2301      	movs	r3, #1
  401ab8:	e02f      	b.n	401b1a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  401aba:	687b      	ldr	r3, [r7, #4]
  401abc:	2b1f      	cmp	r3, #31
  401abe:	d813      	bhi.n	401ae8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401ac0:	4b18      	ldr	r3, [pc, #96]	; (401b24 <pmc_enable_periph_clk+0x7c>)
  401ac2:	699a      	ldr	r2, [r3, #24]
  401ac4:	2101      	movs	r1, #1
  401ac6:	687b      	ldr	r3, [r7, #4]
  401ac8:	fa01 f303 	lsl.w	r3, r1, r3
  401acc:	401a      	ands	r2, r3
  401ace:	2101      	movs	r1, #1
  401ad0:	687b      	ldr	r3, [r7, #4]
  401ad2:	fa01 f303 	lsl.w	r3, r1, r3
  401ad6:	429a      	cmp	r2, r3
  401ad8:	d01e      	beq.n	401b18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401ada:	4a12      	ldr	r2, [pc, #72]	; (401b24 <pmc_enable_periph_clk+0x7c>)
  401adc:	2101      	movs	r1, #1
  401ade:	687b      	ldr	r3, [r7, #4]
  401ae0:	fa01 f303 	lsl.w	r3, r1, r3
  401ae4:	6113      	str	r3, [r2, #16]
  401ae6:	e017      	b.n	401b18 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	3b20      	subs	r3, #32
  401aec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401aee:	4b0d      	ldr	r3, [pc, #52]	; (401b24 <pmc_enable_periph_clk+0x7c>)
  401af0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401af4:	2101      	movs	r1, #1
  401af6:	687b      	ldr	r3, [r7, #4]
  401af8:	fa01 f303 	lsl.w	r3, r1, r3
  401afc:	401a      	ands	r2, r3
  401afe:	2101      	movs	r1, #1
  401b00:	687b      	ldr	r3, [r7, #4]
  401b02:	fa01 f303 	lsl.w	r3, r1, r3
  401b06:	429a      	cmp	r2, r3
  401b08:	d006      	beq.n	401b18 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401b0a:	4a06      	ldr	r2, [pc, #24]	; (401b24 <pmc_enable_periph_clk+0x7c>)
  401b0c:	2101      	movs	r1, #1
  401b0e:	687b      	ldr	r3, [r7, #4]
  401b10:	fa01 f303 	lsl.w	r3, r1, r3
  401b14:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401b18:	2300      	movs	r3, #0
}
  401b1a:	4618      	mov	r0, r3
  401b1c:	370c      	adds	r7, #12
  401b1e:	46bd      	mov	sp, r7
  401b20:	bc80      	pop	{r7}
  401b22:	4770      	bx	lr
  401b24:	400e0400 	.word	0x400e0400

00401b28 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401b28:	b580      	push	{r7, lr}
  401b2a:	b082      	sub	sp, #8
  401b2c:	af00      	add	r7, sp, #0
  401b2e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401b30:	6878      	ldr	r0, [r7, #4]
  401b32:	4b03      	ldr	r3, [pc, #12]	; (401b40 <sysclk_enable_peripheral_clock+0x18>)
  401b34:	4798      	blx	r3
}
  401b36:	bf00      	nop
  401b38:	3708      	adds	r7, #8
  401b3a:	46bd      	mov	sp, r7
  401b3c:	bd80      	pop	{r7, pc}
  401b3e:	bf00      	nop
  401b40:	00401aa9 	.word	0x00401aa9

00401b44 <ioport_init>:
{
  401b44:	b580      	push	{r7, lr}
  401b46:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401b48:	200b      	movs	r0, #11
  401b4a:	4b03      	ldr	r3, [pc, #12]	; (401b58 <ioport_init+0x14>)
  401b4c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401b4e:	200c      	movs	r0, #12
  401b50:	4b01      	ldr	r3, [pc, #4]	; (401b58 <ioport_init+0x14>)
  401b52:	4798      	blx	r3
}
  401b54:	bf00      	nop
  401b56:	bd80      	pop	{r7, pc}
  401b58:	00401b29 	.word	0x00401b29

00401b5c <ioport_set_pin_mode>:
{
  401b5c:	b480      	push	{r7}
  401b5e:	b08d      	sub	sp, #52	; 0x34
  401b60:	af00      	add	r7, sp, #0
  401b62:	6078      	str	r0, [r7, #4]
  401b64:	6039      	str	r1, [r7, #0]
  401b66:	687b      	ldr	r3, [r7, #4]
  401b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b6a:	683b      	ldr	r3, [r7, #0]
  401b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  401b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b70:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b74:	095a      	lsrs	r2, r3, #5
  401b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b78:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401b7a:	6a3b      	ldr	r3, [r7, #32]
  401b7c:	f003 031f 	and.w	r3, r3, #31
  401b80:	2101      	movs	r1, #1
  401b82:	fa01 f303 	lsl.w	r3, r1, r3
  401b86:	61fa      	str	r2, [r7, #28]
  401b88:	61bb      	str	r3, [r7, #24]
  401b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401b8c:	617b      	str	r3, [r7, #20]
  401b8e:	69fb      	ldr	r3, [r7, #28]
  401b90:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b92:	693b      	ldr	r3, [r7, #16]
  401b94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b98:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b9c:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401b9e:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401ba0:	697b      	ldr	r3, [r7, #20]
  401ba2:	f003 0308 	and.w	r3, r3, #8
  401ba6:	2b00      	cmp	r3, #0
  401ba8:	d003      	beq.n	401bb2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  401baa:	68fb      	ldr	r3, [r7, #12]
  401bac:	69ba      	ldr	r2, [r7, #24]
  401bae:	665a      	str	r2, [r3, #100]	; 0x64
  401bb0:	e002      	b.n	401bb8 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  401bb2:	68fb      	ldr	r3, [r7, #12]
  401bb4:	69ba      	ldr	r2, [r7, #24]
  401bb6:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  401bb8:	697b      	ldr	r3, [r7, #20]
  401bba:	f003 0310 	and.w	r3, r3, #16
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	d004      	beq.n	401bcc <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  401bc2:	68fb      	ldr	r3, [r7, #12]
  401bc4:	69ba      	ldr	r2, [r7, #24]
  401bc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  401bca:	e003      	b.n	401bd4 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  401bcc:	68fb      	ldr	r3, [r7, #12]
  401bce:	69ba      	ldr	r2, [r7, #24]
  401bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401bd4:	697b      	ldr	r3, [r7, #20]
  401bd6:	f003 0320 	and.w	r3, r3, #32
  401bda:	2b00      	cmp	r3, #0
  401bdc:	d003      	beq.n	401be6 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  401bde:	68fb      	ldr	r3, [r7, #12]
  401be0:	69ba      	ldr	r2, [r7, #24]
  401be2:	651a      	str	r2, [r3, #80]	; 0x50
  401be4:	e002      	b.n	401bec <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  401be6:	68fb      	ldr	r3, [r7, #12]
  401be8:	69ba      	ldr	r2, [r7, #24]
  401bea:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401bec:	697b      	ldr	r3, [r7, #20]
  401bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d003      	beq.n	401bfe <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  401bf6:	68fb      	ldr	r3, [r7, #12]
  401bf8:	69ba      	ldr	r2, [r7, #24]
  401bfa:	621a      	str	r2, [r3, #32]
  401bfc:	e002      	b.n	401c04 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  401bfe:	68fb      	ldr	r3, [r7, #12]
  401c00:	69ba      	ldr	r2, [r7, #24]
  401c02:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401c04:	697b      	ldr	r3, [r7, #20]
  401c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c0a:	2b00      	cmp	r3, #0
  401c0c:	d004      	beq.n	401c18 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401c16:	e003      	b.n	401c20 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  401c18:	68fb      	ldr	r3, [r7, #12]
  401c1a:	69ba      	ldr	r2, [r7, #24]
  401c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401c20:	697b      	ldr	r3, [r7, #20]
  401c22:	f003 0301 	and.w	r3, r3, #1
  401c26:	2b00      	cmp	r3, #0
  401c28:	d006      	beq.n	401c38 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  401c2a:	68fb      	ldr	r3, [r7, #12]
  401c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c2e:	69bb      	ldr	r3, [r7, #24]
  401c30:	431a      	orrs	r2, r3
  401c32:	68fb      	ldr	r3, [r7, #12]
  401c34:	671a      	str	r2, [r3, #112]	; 0x70
  401c36:	e006      	b.n	401c46 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  401c38:	68fb      	ldr	r3, [r7, #12]
  401c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c3c:	69bb      	ldr	r3, [r7, #24]
  401c3e:	43db      	mvns	r3, r3
  401c40:	401a      	ands	r2, r3
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401c46:	697b      	ldr	r3, [r7, #20]
  401c48:	f003 0302 	and.w	r3, r3, #2
  401c4c:	2b00      	cmp	r3, #0
  401c4e:	d006      	beq.n	401c5e <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  401c50:	68fb      	ldr	r3, [r7, #12]
  401c52:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c54:	69bb      	ldr	r3, [r7, #24]
  401c56:	431a      	orrs	r2, r3
  401c58:	68fb      	ldr	r3, [r7, #12]
  401c5a:	675a      	str	r2, [r3, #116]	; 0x74
}
  401c5c:	e006      	b.n	401c6c <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  401c5e:	68fb      	ldr	r3, [r7, #12]
  401c60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c62:	69bb      	ldr	r3, [r7, #24]
  401c64:	43db      	mvns	r3, r3
  401c66:	401a      	ands	r2, r3
  401c68:	68fb      	ldr	r3, [r7, #12]
  401c6a:	675a      	str	r2, [r3, #116]	; 0x74
  401c6c:	bf00      	nop
  401c6e:	3734      	adds	r7, #52	; 0x34
  401c70:	46bd      	mov	sp, r7
  401c72:	bc80      	pop	{r7}
  401c74:	4770      	bx	lr

00401c76 <ioport_set_pin_dir>:
{
  401c76:	b480      	push	{r7}
  401c78:	b08d      	sub	sp, #52	; 0x34
  401c7a:	af00      	add	r7, sp, #0
  401c7c:	6078      	str	r0, [r7, #4]
  401c7e:	460b      	mov	r3, r1
  401c80:	70fb      	strb	r3, [r7, #3]
  401c82:	687b      	ldr	r3, [r7, #4]
  401c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  401c86:	78fb      	ldrb	r3, [r7, #3]
  401c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401c8e:	627b      	str	r3, [r7, #36]	; 0x24
  401c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401c92:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401c94:	6a3b      	ldr	r3, [r7, #32]
  401c96:	095b      	lsrs	r3, r3, #5
  401c98:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401c9a:	69fb      	ldr	r3, [r7, #28]
  401c9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401ca0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401ca4:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401ca6:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401cac:	2b01      	cmp	r3, #1
  401cae:	d109      	bne.n	401cc4 <ioport_set_pin_dir+0x4e>
  401cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cb2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401cb4:	697b      	ldr	r3, [r7, #20]
  401cb6:	f003 031f 	and.w	r3, r3, #31
  401cba:	2201      	movs	r2, #1
  401cbc:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401cbe:	69bb      	ldr	r3, [r7, #24]
  401cc0:	611a      	str	r2, [r3, #16]
  401cc2:	e00c      	b.n	401cde <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401cc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401cc8:	2b00      	cmp	r3, #0
  401cca:	d108      	bne.n	401cde <ioport_set_pin_dir+0x68>
  401ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401cce:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401cd0:	693b      	ldr	r3, [r7, #16]
  401cd2:	f003 031f 	and.w	r3, r3, #31
  401cd6:	2201      	movs	r2, #1
  401cd8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401cda:	69bb      	ldr	r3, [r7, #24]
  401cdc:	615a      	str	r2, [r3, #20]
  401cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ce0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401ce2:	68fb      	ldr	r3, [r7, #12]
  401ce4:	f003 031f 	and.w	r3, r3, #31
  401ce8:	2201      	movs	r2, #1
  401cea:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401cec:	69bb      	ldr	r3, [r7, #24]
  401cee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401cf2:	bf00      	nop
  401cf4:	3734      	adds	r7, #52	; 0x34
  401cf6:	46bd      	mov	sp, r7
  401cf8:	bc80      	pop	{r7}
  401cfa:	4770      	bx	lr

00401cfc <ioport_set_pin_level>:
{
  401cfc:	b480      	push	{r7}
  401cfe:	b08b      	sub	sp, #44	; 0x2c
  401d00:	af00      	add	r7, sp, #0
  401d02:	6078      	str	r0, [r7, #4]
  401d04:	460b      	mov	r3, r1
  401d06:	70fb      	strb	r3, [r7, #3]
  401d08:	687b      	ldr	r3, [r7, #4]
  401d0a:	627b      	str	r3, [r7, #36]	; 0x24
  401d0c:	78fb      	ldrb	r3, [r7, #3]
  401d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d14:	61fb      	str	r3, [r7, #28]
  401d16:	69fb      	ldr	r3, [r7, #28]
  401d18:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401d1a:	69bb      	ldr	r3, [r7, #24]
  401d1c:	095b      	lsrs	r3, r3, #5
  401d1e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401d20:	697b      	ldr	r3, [r7, #20]
  401d22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d26:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d2a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401d2c:	613b      	str	r3, [r7, #16]
	if (level) {
  401d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401d32:	2b00      	cmp	r3, #0
  401d34:	d009      	beq.n	401d4a <ioport_set_pin_level+0x4e>
  401d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d38:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401d3a:	68fb      	ldr	r3, [r7, #12]
  401d3c:	f003 031f 	and.w	r3, r3, #31
  401d40:	2201      	movs	r2, #1
  401d42:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401d44:	693b      	ldr	r3, [r7, #16]
  401d46:	631a      	str	r2, [r3, #48]	; 0x30
}
  401d48:	e008      	b.n	401d5c <ioport_set_pin_level+0x60>
  401d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d4c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401d4e:	68bb      	ldr	r3, [r7, #8]
  401d50:	f003 031f 	and.w	r3, r3, #31
  401d54:	2201      	movs	r2, #1
  401d56:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401d58:	693b      	ldr	r3, [r7, #16]
  401d5a:	635a      	str	r2, [r3, #52]	; 0x34
  401d5c:	bf00      	nop
  401d5e:	372c      	adds	r7, #44	; 0x2c
  401d60:	46bd      	mov	sp, r7
  401d62:	bc80      	pop	{r7}
  401d64:	4770      	bx	lr
	...

00401d68 <board_init>:
#include <board.h>
#include <conf_board.h>
#include "camera.h"

void board_init(void)
{
  401d68:	b580      	push	{r7, lr}
  401d6a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	wdt_disable(WDT);
  401d6c:	4844      	ldr	r0, [pc, #272]	; (401e80 <board_init+0x118>)
  401d6e:	4b45      	ldr	r3, [pc, #276]	; (401e84 <board_init+0x11c>)
  401d70:	4798      	blx	r3
	
	ioport_init();
  401d72:	4b45      	ldr	r3, [pc, #276]	; (401e88 <board_init+0x120>)
  401d74:	4798      	blx	r3
		
	// initialize test LED pin
	gpio_configure_pin(LED_PIN, LED_FLAGS);
  401d76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d7a:	2013      	movs	r0, #19
  401d7c:	4b43      	ldr	r3, [pc, #268]	; (401e8c <board_init+0x124>)
  401d7e:	4798      	blx	r3
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  401d80:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401d84:	2013      	movs	r0, #19
  401d86:	4b41      	ldr	r3, [pc, #260]	; (401e8c <board_init+0x124>)
  401d88:	4798      	blx	r3
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  401d8a:	2101      	movs	r1, #1
  401d8c:	2013      	movs	r0, #19
  401d8e:	4b40      	ldr	r3, [pc, #256]	; (401e90 <board_init+0x128>)
  401d90:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  401d92:	2100      	movs	r1, #0
  401d94:	2013      	movs	r0, #19
  401d96:	4b3f      	ldr	r3, [pc, #252]	; (401e94 <board_init+0x12c>)
  401d98:	4798      	blx	r3
	
	// initialize MCU RTS as a gpio and drive it low
	gpio_configure_pin(RTS_LOW, RTS_LOW_FLAGS);
  401d9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d9e:	2007      	movs	r0, #7
  401da0:	4b3a      	ldr	r3, [pc, #232]	; (401e8c <board_init+0x124>)
  401da2:	4798      	blx	r3
	gpio_configure_pin(RTS_LOW_GPIO, RTS_LOW_GPIO_FLAGS);
  401da4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401da8:	2007      	movs	r0, #7
  401daa:	4b38      	ldr	r3, [pc, #224]	; (401e8c <board_init+0x124>)
  401dac:	4798      	blx	r3
	ioport_set_pin_dir(RTS_LOW, IOPORT_DIR_OUTPUT);
  401dae:	2101      	movs	r1, #1
  401db0:	2007      	movs	r0, #7
  401db2:	4b37      	ldr	r3, [pc, #220]	; (401e90 <board_init+0x128>)
  401db4:	4798      	blx	r3
	ioport_set_pin_level(RTS_LOW, false);
  401db6:	2100      	movs	r1, #0
  401db8:	2007      	movs	r0, #7
  401dba:	4b36      	ldr	r3, [pc, #216]	; (401e94 <board_init+0x12c>)
  401dbc:	4798      	blx	r3

	// initialize network status pin
	gpio_configure_pin(NET_PIN, NET_PIN_FLAGS);
  401dbe:	4936      	ldr	r1, [pc, #216]	; (401e98 <board_init+0x130>)
  401dc0:	2021      	movs	r0, #33	; 0x21
  401dc2:	4b32      	ldr	r3, [pc, #200]	; (401e8c <board_init+0x124>)
  401dc4:	4798      	blx	r3
	ioport_set_pin_dir(NET_PIN, IOPORT_DIR_INPUT);
  401dc6:	2100      	movs	r1, #0
  401dc8:	2021      	movs	r0, #33	; 0x21
  401dca:	4b31      	ldr	r3, [pc, #196]	; (401e90 <board_init+0x128>)
  401dcc:	4798      	blx	r3
	ioport_set_pin_mode(NET_PIN, IOPORT_MODE_PULLUP);
  401dce:	2108      	movs	r1, #8
  401dd0:	2021      	movs	r0, #33	; 0x21
  401dd2:	4b32      	ldr	r3, [pc, #200]	; (401e9c <board_init+0x134>)
  401dd4:	4798      	blx	r3
	
	// initialize USART pins
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401dd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dda:	2005      	movs	r0, #5
  401ddc:	4b2b      	ldr	r3, [pc, #172]	; (401e8c <board_init+0x124>)
  401dde:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  401de0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401de4:	2006      	movs	r0, #6
  401de6:	4b29      	ldr	r3, [pc, #164]	; (401e8c <board_init+0x124>)
  401de8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401dea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401dee:	2008      	movs	r0, #8
  401df0:	4b26      	ldr	r3, [pc, #152]	; (401e8c <board_init+0x124>)
  401df2:	4798      	blx	r3
	//gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);	// don't configure RTS pin as RTS
	
	// initialize camera communication pins
	gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  401df4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401df8:	2011      	movs	r0, #17
  401dfa:	4b24      	ldr	r3, [pc, #144]	; (401e8c <board_init+0x124>)
  401dfc:	4798      	blx	r3
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401dfe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e02:	2003      	movs	r0, #3
  401e04:	4b21      	ldr	r3, [pc, #132]	; (401e8c <board_init+0x124>)
  401e06:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401e08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e0c:	2004      	movs	r0, #4
  401e0e:	4b1f      	ldr	r3, [pc, #124]	; (401e8c <board_init+0x124>)
  401e10:	4798      	blx	r3
	gpio_configure_pin(CAM_RST, CAM_RST_FLAGS);
  401e12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e16:	2014      	movs	r0, #20
  401e18:	4b1c      	ldr	r3, [pc, #112]	; (401e8c <board_init+0x124>)
  401e1a:	4798      	blx	r3
	ioport_set_pin_dir(CAM_RST, IOPORT_DIR_OUTPUT);
  401e1c:	2101      	movs	r1, #1
  401e1e:	2014      	movs	r0, #20
  401e20:	4b1b      	ldr	r3, [pc, #108]	; (401e90 <board_init+0x128>)
  401e22:	4798      	blx	r3
	ioport_set_pin_level(CAM_RST, false);
  401e24:	2100      	movs	r1, #0
  401e26:	2014      	movs	r0, #20
  401e28:	4b1a      	ldr	r3, [pc, #104]	; (401e94 <board_init+0x12c>)
  401e2a:	4798      	blx	r3
	
	// initialize camera data transmission pins
	gpio_configure_pin(OV_HSYNC_GPIO, OV_HSYNC_FLAGS);
  401e2c:	2171      	movs	r1, #113	; 0x71
  401e2e:	2010      	movs	r0, #16
  401e30:	4b16      	ldr	r3, [pc, #88]	; (401e8c <board_init+0x124>)
  401e32:	4798      	blx	r3
	gpio_configure_pin(OV_VSYNC_GPIO, OV_VSYNC_FLAGS);
  401e34:	2171      	movs	r1, #113	; 0x71
  401e36:	200f      	movs	r0, #15
  401e38:	4b14      	ldr	r3, [pc, #80]	; (401e8c <board_init+0x124>)
  401e3a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401e3c:	4918      	ldr	r1, [pc, #96]	; (401ea0 <board_init+0x138>)
  401e3e:	2018      	movs	r0, #24
  401e40:	4b12      	ldr	r3, [pc, #72]	; (401e8c <board_init+0x124>)
  401e42:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401e44:	4916      	ldr	r1, [pc, #88]	; (401ea0 <board_init+0x138>)
  401e46:	2019      	movs	r0, #25
  401e48:	4b10      	ldr	r3, [pc, #64]	; (401e8c <board_init+0x124>)
  401e4a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401e4c:	4914      	ldr	r1, [pc, #80]	; (401ea0 <board_init+0x138>)
  401e4e:	201a      	movs	r0, #26
  401e50:	4b0e      	ldr	r3, [pc, #56]	; (401e8c <board_init+0x124>)
  401e52:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401e54:	4912      	ldr	r1, [pc, #72]	; (401ea0 <board_init+0x138>)
  401e56:	201b      	movs	r0, #27
  401e58:	4b0c      	ldr	r3, [pc, #48]	; (401e8c <board_init+0x124>)
  401e5a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401e5c:	4910      	ldr	r1, [pc, #64]	; (401ea0 <board_init+0x138>)
  401e5e:	201c      	movs	r0, #28
  401e60:	4b0a      	ldr	r3, [pc, #40]	; (401e8c <board_init+0x124>)
  401e62:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401e64:	490e      	ldr	r1, [pc, #56]	; (401ea0 <board_init+0x138>)
  401e66:	201d      	movs	r0, #29
  401e68:	4b08      	ldr	r3, [pc, #32]	; (401e8c <board_init+0x124>)
  401e6a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D8, OV_DATA_BUS_FLAGS);
  401e6c:	490c      	ldr	r1, [pc, #48]	; (401ea0 <board_init+0x138>)
  401e6e:	201e      	movs	r0, #30
  401e70:	4b06      	ldr	r3, [pc, #24]	; (401e8c <board_init+0x124>)
  401e72:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D9, OV_DATA_BUS_FLAGS);
  401e74:	490a      	ldr	r1, [pc, #40]	; (401ea0 <board_init+0x138>)
  401e76:	201f      	movs	r0, #31
  401e78:	4b04      	ldr	r3, [pc, #16]	; (401e8c <board_init+0x124>)
  401e7a:	4798      	blx	r3
}
  401e7c:	bf00      	nop
  401e7e:	bd80      	pop	{r7, pc}
  401e80:	400e1450 	.word	0x400e1450
  401e84:	00400567 	.word	0x00400567
  401e88:	00401b45 	.word	0x00401b45
  401e8c:	00401689 	.word	0x00401689
  401e90:	00401c77 	.word	0x00401c77
  401e94:	00401cfd 	.word	0x00401cfd
  401e98:	28000079 	.word	0x28000079
  401e9c:	00401b5d 	.word	0x00401b5d
  401ea0:	28000001 	.word	0x28000001

00401ea4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401ea4:	b580      	push	{r7, lr}
  401ea6:	b084      	sub	sp, #16
  401ea8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401eaa:	4b27      	ldr	r3, [pc, #156]	; (401f48 <Reset_Handler+0xa4>)
  401eac:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401eae:	4b27      	ldr	r3, [pc, #156]	; (401f4c <Reset_Handler+0xa8>)
  401eb0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401eb2:	68fa      	ldr	r2, [r7, #12]
  401eb4:	68bb      	ldr	r3, [r7, #8]
  401eb6:	429a      	cmp	r2, r3
  401eb8:	d90d      	bls.n	401ed6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401eba:	e007      	b.n	401ecc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401ebc:	68bb      	ldr	r3, [r7, #8]
  401ebe:	1d1a      	adds	r2, r3, #4
  401ec0:	60ba      	str	r2, [r7, #8]
  401ec2:	68fa      	ldr	r2, [r7, #12]
  401ec4:	1d11      	adds	r1, r2, #4
  401ec6:	60f9      	str	r1, [r7, #12]
  401ec8:	6812      	ldr	r2, [r2, #0]
  401eca:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401ecc:	68bb      	ldr	r3, [r7, #8]
  401ece:	4a20      	ldr	r2, [pc, #128]	; (401f50 <Reset_Handler+0xac>)
  401ed0:	4293      	cmp	r3, r2
  401ed2:	d3f3      	bcc.n	401ebc <Reset_Handler+0x18>
  401ed4:	e020      	b.n	401f18 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  401ed6:	68fa      	ldr	r2, [r7, #12]
  401ed8:	68bb      	ldr	r3, [r7, #8]
  401eda:	429a      	cmp	r2, r3
  401edc:	d21c      	bcs.n	401f18 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401ede:	4a1c      	ldr	r2, [pc, #112]	; (401f50 <Reset_Handler+0xac>)
  401ee0:	4b1a      	ldr	r3, [pc, #104]	; (401f4c <Reset_Handler+0xa8>)
  401ee2:	1ad3      	subs	r3, r2, r3
  401ee4:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401ee6:	68fa      	ldr	r2, [r7, #12]
  401ee8:	687b      	ldr	r3, [r7, #4]
  401eea:	4413      	add	r3, r2
  401eec:	3b04      	subs	r3, #4
  401eee:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401ef0:	68ba      	ldr	r2, [r7, #8]
  401ef2:	687b      	ldr	r3, [r7, #4]
  401ef4:	4413      	add	r3, r2
  401ef6:	3b04      	subs	r3, #4
  401ef8:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401efa:	e00a      	b.n	401f12 <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401efc:	68bb      	ldr	r3, [r7, #8]
  401efe:	1f1a      	subs	r2, r3, #4
  401f00:	60ba      	str	r2, [r7, #8]
  401f02:	68fa      	ldr	r2, [r7, #12]
  401f04:	1f11      	subs	r1, r2, #4
  401f06:	60f9      	str	r1, [r7, #12]
  401f08:	6812      	ldr	r2, [r2, #0]
  401f0a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401f0c:	687b      	ldr	r3, [r7, #4]
  401f0e:	3b04      	subs	r3, #4
  401f10:	607b      	str	r3, [r7, #4]
  401f12:	687b      	ldr	r3, [r7, #4]
  401f14:	2b00      	cmp	r3, #0
  401f16:	d1f1      	bne.n	401efc <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f18:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401f1a:	4b0e      	ldr	r3, [pc, #56]	; (401f54 <Reset_Handler+0xb0>)
  401f1c:	60bb      	str	r3, [r7, #8]
  401f1e:	e004      	b.n	401f2a <Reset_Handler+0x86>
		*pDest++ = 0;
  401f20:	68bb      	ldr	r3, [r7, #8]
  401f22:	1d1a      	adds	r2, r3, #4
  401f24:	60ba      	str	r2, [r7, #8]
  401f26:	2200      	movs	r2, #0
  401f28:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401f2a:	68bb      	ldr	r3, [r7, #8]
  401f2c:	4a0a      	ldr	r2, [pc, #40]	; (401f58 <Reset_Handler+0xb4>)
  401f2e:	4293      	cmp	r3, r2
  401f30:	d3f6      	bcc.n	401f20 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401f32:	4b0a      	ldr	r3, [pc, #40]	; (401f5c <Reset_Handler+0xb8>)
  401f34:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401f36:	4a0a      	ldr	r2, [pc, #40]	; (401f60 <Reset_Handler+0xbc>)
  401f38:	68fb      	ldr	r3, [r7, #12]
  401f3a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401f3c:	4b09      	ldr	r3, [pc, #36]	; (401f64 <Reset_Handler+0xc0>)
  401f3e:	4798      	blx	r3

	/* Branch to main function */
	main();
  401f40:	4b09      	ldr	r3, [pc, #36]	; (401f68 <Reset_Handler+0xc4>)
  401f42:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401f44:	e7fe      	b.n	401f44 <Reset_Handler+0xa0>
  401f46:	bf00      	nop
  401f48:	00402f9c 	.word	0x00402f9c
  401f4c:	20000000 	.word	0x20000000
  401f50:	20000438 	.word	0x20000438
  401f54:	20000438 	.word	0x20000438
  401f58:	20001680 	.word	0x20001680
  401f5c:	00400000 	.word	0x00400000
  401f60:	e000ed00 	.word	0xe000ed00
  401f64:	00402505 	.word	0x00402505
  401f68:	004021a1 	.word	0x004021a1

00401f6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f6c:	b480      	push	{r7}
  401f6e:	af00      	add	r7, sp, #0
	while (1) {
  401f70:	e7fe      	b.n	401f70 <Dummy_Handler+0x4>
	...

00401f74 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401f74:	b480      	push	{r7}
  401f76:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401f78:	4b5d      	ldr	r3, [pc, #372]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  401f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f7c:	f003 0303 	and.w	r3, r3, #3
  401f80:	2b03      	cmp	r3, #3
  401f82:	f200 8096 	bhi.w	4020b2 <SystemCoreClockUpdate+0x13e>
  401f86:	a201      	add	r2, pc, #4	; (adr r2, 401f8c <SystemCoreClockUpdate+0x18>)
  401f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401f8c:	00401f9d 	.word	0x00401f9d
  401f90:	00401fbd 	.word	0x00401fbd
  401f94:	00402007 	.word	0x00402007
  401f98:	00402007 	.word	0x00402007
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401f9c:	4b55      	ldr	r3, [pc, #340]	; (4020f4 <SystemCoreClockUpdate+0x180>)
  401f9e:	695b      	ldr	r3, [r3, #20]
  401fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401fa4:	2b00      	cmp	r3, #0
  401fa6:	d004      	beq.n	401fb2 <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401fa8:	4b53      	ldr	r3, [pc, #332]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401faa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401fae:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  401fb0:	e080      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401fb2:	4b51      	ldr	r3, [pc, #324]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401fb4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401fb8:	601a      	str	r2, [r3, #0]
		break;
  401fba:	e07b      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401fbc:	4b4c      	ldr	r3, [pc, #304]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  401fbe:	6a1b      	ldr	r3, [r3, #32]
  401fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401fc4:	2b00      	cmp	r3, #0
  401fc6:	d003      	beq.n	401fd0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401fc8:	4b4b      	ldr	r3, [pc, #300]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401fca:	4a4c      	ldr	r2, [pc, #304]	; (4020fc <SystemCoreClockUpdate+0x188>)
  401fcc:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  401fce:	e071      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401fd0:	4b49      	ldr	r3, [pc, #292]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401fd2:	4a4b      	ldr	r2, [pc, #300]	; (402100 <SystemCoreClockUpdate+0x18c>)
  401fd4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401fd6:	4b46      	ldr	r3, [pc, #280]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  401fd8:	6a1b      	ldr	r3, [r3, #32]
  401fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401fde:	2b10      	cmp	r3, #16
  401fe0:	d008      	beq.n	401ff4 <SystemCoreClockUpdate+0x80>
  401fe2:	2b20      	cmp	r3, #32
  401fe4:	d00a      	beq.n	401ffc <SystemCoreClockUpdate+0x88>
  401fe6:	2b00      	cmp	r3, #0
  401fe8:	d000      	beq.n	401fec <SystemCoreClockUpdate+0x78>
			break;
  401fea:	e00b      	b.n	402004 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401fec:	4b42      	ldr	r3, [pc, #264]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401fee:	4a44      	ldr	r2, [pc, #272]	; (402100 <SystemCoreClockUpdate+0x18c>)
  401ff0:	601a      	str	r2, [r3, #0]
			break;
  401ff2:	e007      	b.n	402004 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401ff4:	4b40      	ldr	r3, [pc, #256]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401ff6:	4a43      	ldr	r2, [pc, #268]	; (402104 <SystemCoreClockUpdate+0x190>)
  401ff8:	601a      	str	r2, [r3, #0]
			break;
  401ffa:	e003      	b.n	402004 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401ffc:	4b3e      	ldr	r3, [pc, #248]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  401ffe:	4a3f      	ldr	r2, [pc, #252]	; (4020fc <SystemCoreClockUpdate+0x188>)
  402000:	601a      	str	r2, [r3, #0]
			break;
  402002:	bf00      	nop
		break;
  402004:	e056      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402006:	4b3a      	ldr	r3, [pc, #232]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  402008:	6a1b      	ldr	r3, [r3, #32]
  40200a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40200e:	2b00      	cmp	r3, #0
  402010:	d003      	beq.n	40201a <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402012:	4b39      	ldr	r3, [pc, #228]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402014:	4a39      	ldr	r2, [pc, #228]	; (4020fc <SystemCoreClockUpdate+0x188>)
  402016:	601a      	str	r2, [r3, #0]
  402018:	e019      	b.n	40204e <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40201a:	4b37      	ldr	r3, [pc, #220]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  40201c:	4a38      	ldr	r2, [pc, #224]	; (402100 <SystemCoreClockUpdate+0x18c>)
  40201e:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402020:	4b33      	ldr	r3, [pc, #204]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  402022:	6a1b      	ldr	r3, [r3, #32]
  402024:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402028:	2b10      	cmp	r3, #16
  40202a:	d008      	beq.n	40203e <SystemCoreClockUpdate+0xca>
  40202c:	2b20      	cmp	r3, #32
  40202e:	d00a      	beq.n	402046 <SystemCoreClockUpdate+0xd2>
  402030:	2b00      	cmp	r3, #0
  402032:	d000      	beq.n	402036 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  402034:	e00b      	b.n	40204e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402036:	4b30      	ldr	r3, [pc, #192]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402038:	4a31      	ldr	r2, [pc, #196]	; (402100 <SystemCoreClockUpdate+0x18c>)
  40203a:	601a      	str	r2, [r3, #0]
					break;
  40203c:	e007      	b.n	40204e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40203e:	4b2e      	ldr	r3, [pc, #184]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402040:	4a30      	ldr	r2, [pc, #192]	; (402104 <SystemCoreClockUpdate+0x190>)
  402042:	601a      	str	r2, [r3, #0]
					break;
  402044:	e003      	b.n	40204e <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402046:	4b2c      	ldr	r3, [pc, #176]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402048:	4a2c      	ldr	r2, [pc, #176]	; (4020fc <SystemCoreClockUpdate+0x188>)
  40204a:	601a      	str	r2, [r3, #0]
					break;
  40204c:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40204e:	4b28      	ldr	r3, [pc, #160]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  402050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402052:	f003 0303 	and.w	r3, r3, #3
  402056:	2b02      	cmp	r3, #2
  402058:	d115      	bne.n	402086 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40205a:	4b25      	ldr	r3, [pc, #148]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  40205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40205e:	0c1b      	lsrs	r3, r3, #16
  402060:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402064:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402066:	4a24      	ldr	r2, [pc, #144]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402068:	6812      	ldr	r2, [r2, #0]
  40206a:	fb02 f303 	mul.w	r3, r2, r3
  40206e:	4a22      	ldr	r2, [pc, #136]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402070:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402072:	4b1f      	ldr	r3, [pc, #124]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  402074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  402076:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402078:	4a1f      	ldr	r2, [pc, #124]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  40207a:	6812      	ldr	r2, [r2, #0]
  40207c:	fbb2 f3f3 	udiv	r3, r2, r3
  402080:	4a1d      	ldr	r2, [pc, #116]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402082:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402084:	e016      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402086:	4b1a      	ldr	r3, [pc, #104]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  402088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40208a:	0c1b      	lsrs	r3, r3, #16
  40208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402090:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402092:	4a19      	ldr	r2, [pc, #100]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  402094:	6812      	ldr	r2, [r2, #0]
  402096:	fb02 f303 	mul.w	r3, r2, r3
  40209a:	4a17      	ldr	r2, [pc, #92]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  40209c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40209e:	4b14      	ldr	r3, [pc, #80]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  4020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4020a2:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4020a4:	4a14      	ldr	r2, [pc, #80]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020a6:	6812      	ldr	r2, [r2, #0]
  4020a8:	fbb2 f3f3 	udiv	r3, r2, r3
  4020ac:	4a12      	ldr	r2, [pc, #72]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020ae:	6013      	str	r3, [r2, #0]
		break;
  4020b0:	e000      	b.n	4020b4 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4020b2:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4020b4:	4b0e      	ldr	r3, [pc, #56]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  4020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020bc:	2b70      	cmp	r3, #112	; 0x70
  4020be:	d108      	bne.n	4020d2 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4020c0:	4b0d      	ldr	r3, [pc, #52]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020c2:	681b      	ldr	r3, [r3, #0]
  4020c4:	4a10      	ldr	r2, [pc, #64]	; (402108 <SystemCoreClockUpdate+0x194>)
  4020c6:	fba2 2303 	umull	r2, r3, r2, r3
  4020ca:	085b      	lsrs	r3, r3, #1
  4020cc:	4a0a      	ldr	r2, [pc, #40]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020ce:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4020d0:	e00a      	b.n	4020e8 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4020d2:	4b07      	ldr	r3, [pc, #28]	; (4020f0 <SystemCoreClockUpdate+0x17c>)
  4020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020d6:	091b      	lsrs	r3, r3, #4
  4020d8:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4020dc:	4a06      	ldr	r2, [pc, #24]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020de:	6812      	ldr	r2, [r2, #0]
  4020e0:	fa22 f303 	lsr.w	r3, r2, r3
  4020e4:	4a04      	ldr	r2, [pc, #16]	; (4020f8 <SystemCoreClockUpdate+0x184>)
  4020e6:	6013      	str	r3, [r2, #0]
}
  4020e8:	bf00      	nop
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bc80      	pop	{r7}
  4020ee:	4770      	bx	lr
  4020f0:	400e0400 	.word	0x400e0400
  4020f4:	400e1410 	.word	0x400e1410
  4020f8:	2000000c 	.word	0x2000000c
  4020fc:	00b71b00 	.word	0x00b71b00
  402100:	003d0900 	.word	0x003d0900
  402104:	007a1200 	.word	0x007a1200
  402108:	aaaaaaab 	.word	0xaaaaaaab

0040210c <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  40210c:	b480      	push	{r7}
  40210e:	b083      	sub	sp, #12
  402110:	af00      	add	r7, sp, #0
  402112:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402114:	687b      	ldr	r3, [r7, #4]
  402116:	4a18      	ldr	r2, [pc, #96]	; (402178 <system_init_flash+0x6c>)
  402118:	4293      	cmp	r3, r2
  40211a:	d804      	bhi.n	402126 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40211c:	4b17      	ldr	r3, [pc, #92]	; (40217c <system_init_flash+0x70>)
  40211e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402122:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402124:	e023      	b.n	40216e <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402126:	687b      	ldr	r3, [r7, #4]
  402128:	4a15      	ldr	r2, [pc, #84]	; (402180 <system_init_flash+0x74>)
  40212a:	4293      	cmp	r3, r2
  40212c:	d803      	bhi.n	402136 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40212e:	4b13      	ldr	r3, [pc, #76]	; (40217c <system_init_flash+0x70>)
  402130:	4a14      	ldr	r2, [pc, #80]	; (402184 <system_init_flash+0x78>)
  402132:	601a      	str	r2, [r3, #0]
}
  402134:	e01b      	b.n	40216e <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402136:	687b      	ldr	r3, [r7, #4]
  402138:	4a13      	ldr	r2, [pc, #76]	; (402188 <system_init_flash+0x7c>)
  40213a:	4293      	cmp	r3, r2
  40213c:	d803      	bhi.n	402146 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40213e:	4b0f      	ldr	r3, [pc, #60]	; (40217c <system_init_flash+0x70>)
  402140:	4a12      	ldr	r2, [pc, #72]	; (40218c <system_init_flash+0x80>)
  402142:	601a      	str	r2, [r3, #0]
}
  402144:	e013      	b.n	40216e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402146:	687b      	ldr	r3, [r7, #4]
  402148:	4a11      	ldr	r2, [pc, #68]	; (402190 <system_init_flash+0x84>)
  40214a:	4293      	cmp	r3, r2
  40214c:	d803      	bhi.n	402156 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40214e:	4b0b      	ldr	r3, [pc, #44]	; (40217c <system_init_flash+0x70>)
  402150:	4a10      	ldr	r2, [pc, #64]	; (402194 <system_init_flash+0x88>)
  402152:	601a      	str	r2, [r3, #0]
}
  402154:	e00b      	b.n	40216e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402156:	687b      	ldr	r3, [r7, #4]
  402158:	4a0f      	ldr	r2, [pc, #60]	; (402198 <system_init_flash+0x8c>)
  40215a:	4293      	cmp	r3, r2
  40215c:	d804      	bhi.n	402168 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40215e:	4b07      	ldr	r3, [pc, #28]	; (40217c <system_init_flash+0x70>)
  402160:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402164:	601a      	str	r2, [r3, #0]
}
  402166:	e002      	b.n	40216e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402168:	4b04      	ldr	r3, [pc, #16]	; (40217c <system_init_flash+0x70>)
  40216a:	4a0c      	ldr	r2, [pc, #48]	; (40219c <system_init_flash+0x90>)
  40216c:	601a      	str	r2, [r3, #0]
}
  40216e:	bf00      	nop
  402170:	370c      	adds	r7, #12
  402172:	46bd      	mov	sp, r7
  402174:	bc80      	pop	{r7}
  402176:	4770      	bx	lr
  402178:	01312cff 	.word	0x01312cff
  40217c:	400e0a00 	.word	0x400e0a00
  402180:	026259ff 	.word	0x026259ff
  402184:	04000100 	.word	0x04000100
  402188:	039386ff 	.word	0x039386ff
  40218c:	04000200 	.word	0x04000200
  402190:	04c4b3ff 	.word	0x04c4b3ff
  402194:	04000300 	.word	0x04000300
  402198:	05f5e0ff 	.word	0x05f5e0ff
  40219c:	04000500 	.word	0x04000500

004021a0 <main>:
		}
	}
}

int main (void)
{
  4021a0:	b580      	push	{r7, lr}
  4021a2:	af00      	add	r7, sp, #0
	// system level initialization calls
	sysclk_init();
  4021a4:	4b0a      	ldr	r3, [pc, #40]	; (4021d0 <main+0x30>)
  4021a6:	4798      	blx	r3
	board_init();	
  4021a8:	4b0a      	ldr	r3, [pc, #40]	; (4021d4 <main+0x34>)
  4021aa:	4798      	blx	r3
	configure_tc();
  4021ac:	4b0a      	ldr	r3, [pc, #40]	; (4021d8 <main+0x38>)
  4021ae:	4798      	blx	r3
	tc_start(TC0, 0);
  4021b0:	2100      	movs	r1, #0
  4021b2:	480a      	ldr	r0, [pc, #40]	; (4021dc <main+0x3c>)
  4021b4:	4b0a      	ldr	r3, [pc, #40]	; (4021e0 <main+0x40>)
  4021b6:	4798      	blx	r3
	//configure_wifi();		// configures and initializes wifi module
	//configure_camera();		// configures and initializes camera module
	//reboot_wifi();			// reboots the wifi chip (takes several seconds)


	configure_i2s();
  4021b8:	4b0a      	ldr	r3, [pc, #40]	; (4021e4 <main+0x44>)
  4021ba:	4798      	blx	r3

	//uint16_t *samples_data = generate_spoof(440);
	while(1) {
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  4021bc:	4b0a      	ldr	r3, [pc, #40]	; (4021e8 <main+0x48>)
  4021be:	681b      	ldr	r3, [r3, #0]
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	d001      	beq.n	4021c8 <main+0x28>
			setup_wifi();		// the wifi chip tries to reassociate to a new network
  4021c4:	4b09      	ldr	r3, [pc, #36]	; (4021ec <main+0x4c>)
  4021c6:	4798      	blx	r3
		}

		do_it();
  4021c8:	4b09      	ldr	r3, [pc, #36]	; (4021f0 <main+0x50>)
  4021ca:	4798      	blx	r3
		if(wifi_setup_flag) {	// if the user pressed the wifi setup button, 
  4021cc:	e7f6      	b.n	4021bc <main+0x1c>
  4021ce:	bf00      	nop
  4021d0:	004013b5 	.word	0x004013b5
  4021d4:	00401d69 	.word	0x00401d69
  4021d8:	00400b3d 	.word	0x00400b3d
  4021dc:	40010000 	.word	0x40010000
  4021e0:	00400437 	.word	0x00400437
  4021e4:	004007b9 	.word	0x004007b9
  4021e8:	200006d0 	.word	0x200006d0
  4021ec:	00400fe5 	.word	0x00400fe5
  4021f0:	00400711 	.word	0x00400711

004021f4 <__aeabi_uldivmod>:
  4021f4:	b953      	cbnz	r3, 40220c <__aeabi_uldivmod+0x18>
  4021f6:	b94a      	cbnz	r2, 40220c <__aeabi_uldivmod+0x18>
  4021f8:	2900      	cmp	r1, #0
  4021fa:	bf08      	it	eq
  4021fc:	2800      	cmpeq	r0, #0
  4021fe:	bf1c      	itt	ne
  402200:	f04f 31ff 	movne.w	r1, #4294967295
  402204:	f04f 30ff 	movne.w	r0, #4294967295
  402208:	f000 b97a 	b.w	402500 <__aeabi_idiv0>
  40220c:	f1ad 0c08 	sub.w	ip, sp, #8
  402210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402214:	f000 f806 	bl	402224 <__udivmoddi4>
  402218:	f8dd e004 	ldr.w	lr, [sp, #4]
  40221c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402220:	b004      	add	sp, #16
  402222:	4770      	bx	lr

00402224 <__udivmoddi4>:
  402224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402228:	468c      	mov	ip, r1
  40222a:	460d      	mov	r5, r1
  40222c:	4604      	mov	r4, r0
  40222e:	9e08      	ldr	r6, [sp, #32]
  402230:	2b00      	cmp	r3, #0
  402232:	d151      	bne.n	4022d8 <__udivmoddi4+0xb4>
  402234:	428a      	cmp	r2, r1
  402236:	4617      	mov	r7, r2
  402238:	d96d      	bls.n	402316 <__udivmoddi4+0xf2>
  40223a:	fab2 fe82 	clz	lr, r2
  40223e:	f1be 0f00 	cmp.w	lr, #0
  402242:	d00b      	beq.n	40225c <__udivmoddi4+0x38>
  402244:	f1ce 0c20 	rsb	ip, lr, #32
  402248:	fa01 f50e 	lsl.w	r5, r1, lr
  40224c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402250:	fa02 f70e 	lsl.w	r7, r2, lr
  402254:	ea4c 0c05 	orr.w	ip, ip, r5
  402258:	fa00 f40e 	lsl.w	r4, r0, lr
  40225c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402260:	0c25      	lsrs	r5, r4, #16
  402262:	fbbc f8fa 	udiv	r8, ip, sl
  402266:	fa1f f987 	uxth.w	r9, r7
  40226a:	fb0a cc18 	mls	ip, sl, r8, ip
  40226e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402272:	fb08 f309 	mul.w	r3, r8, r9
  402276:	42ab      	cmp	r3, r5
  402278:	d90a      	bls.n	402290 <__udivmoddi4+0x6c>
  40227a:	19ed      	adds	r5, r5, r7
  40227c:	f108 32ff 	add.w	r2, r8, #4294967295
  402280:	f080 8123 	bcs.w	4024ca <__udivmoddi4+0x2a6>
  402284:	42ab      	cmp	r3, r5
  402286:	f240 8120 	bls.w	4024ca <__udivmoddi4+0x2a6>
  40228a:	f1a8 0802 	sub.w	r8, r8, #2
  40228e:	443d      	add	r5, r7
  402290:	1aed      	subs	r5, r5, r3
  402292:	b2a4      	uxth	r4, r4
  402294:	fbb5 f0fa 	udiv	r0, r5, sl
  402298:	fb0a 5510 	mls	r5, sl, r0, r5
  40229c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4022a0:	fb00 f909 	mul.w	r9, r0, r9
  4022a4:	45a1      	cmp	r9, r4
  4022a6:	d909      	bls.n	4022bc <__udivmoddi4+0x98>
  4022a8:	19e4      	adds	r4, r4, r7
  4022aa:	f100 33ff 	add.w	r3, r0, #4294967295
  4022ae:	f080 810a 	bcs.w	4024c6 <__udivmoddi4+0x2a2>
  4022b2:	45a1      	cmp	r9, r4
  4022b4:	f240 8107 	bls.w	4024c6 <__udivmoddi4+0x2a2>
  4022b8:	3802      	subs	r0, #2
  4022ba:	443c      	add	r4, r7
  4022bc:	eba4 0409 	sub.w	r4, r4, r9
  4022c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4022c4:	2100      	movs	r1, #0
  4022c6:	2e00      	cmp	r6, #0
  4022c8:	d061      	beq.n	40238e <__udivmoddi4+0x16a>
  4022ca:	fa24 f40e 	lsr.w	r4, r4, lr
  4022ce:	2300      	movs	r3, #0
  4022d0:	6034      	str	r4, [r6, #0]
  4022d2:	6073      	str	r3, [r6, #4]
  4022d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022d8:	428b      	cmp	r3, r1
  4022da:	d907      	bls.n	4022ec <__udivmoddi4+0xc8>
  4022dc:	2e00      	cmp	r6, #0
  4022de:	d054      	beq.n	40238a <__udivmoddi4+0x166>
  4022e0:	2100      	movs	r1, #0
  4022e2:	e886 0021 	stmia.w	r6, {r0, r5}
  4022e6:	4608      	mov	r0, r1
  4022e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022ec:	fab3 f183 	clz	r1, r3
  4022f0:	2900      	cmp	r1, #0
  4022f2:	f040 808e 	bne.w	402412 <__udivmoddi4+0x1ee>
  4022f6:	42ab      	cmp	r3, r5
  4022f8:	d302      	bcc.n	402300 <__udivmoddi4+0xdc>
  4022fa:	4282      	cmp	r2, r0
  4022fc:	f200 80fa 	bhi.w	4024f4 <__udivmoddi4+0x2d0>
  402300:	1a84      	subs	r4, r0, r2
  402302:	eb65 0503 	sbc.w	r5, r5, r3
  402306:	2001      	movs	r0, #1
  402308:	46ac      	mov	ip, r5
  40230a:	2e00      	cmp	r6, #0
  40230c:	d03f      	beq.n	40238e <__udivmoddi4+0x16a>
  40230e:	e886 1010 	stmia.w	r6, {r4, ip}
  402312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402316:	b912      	cbnz	r2, 40231e <__udivmoddi4+0xfa>
  402318:	2701      	movs	r7, #1
  40231a:	fbb7 f7f2 	udiv	r7, r7, r2
  40231e:	fab7 fe87 	clz	lr, r7
  402322:	f1be 0f00 	cmp.w	lr, #0
  402326:	d134      	bne.n	402392 <__udivmoddi4+0x16e>
  402328:	1beb      	subs	r3, r5, r7
  40232a:	0c3a      	lsrs	r2, r7, #16
  40232c:	fa1f fc87 	uxth.w	ip, r7
  402330:	2101      	movs	r1, #1
  402332:	fbb3 f8f2 	udiv	r8, r3, r2
  402336:	0c25      	lsrs	r5, r4, #16
  402338:	fb02 3318 	mls	r3, r2, r8, r3
  40233c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402340:	fb0c f308 	mul.w	r3, ip, r8
  402344:	42ab      	cmp	r3, r5
  402346:	d907      	bls.n	402358 <__udivmoddi4+0x134>
  402348:	19ed      	adds	r5, r5, r7
  40234a:	f108 30ff 	add.w	r0, r8, #4294967295
  40234e:	d202      	bcs.n	402356 <__udivmoddi4+0x132>
  402350:	42ab      	cmp	r3, r5
  402352:	f200 80d1 	bhi.w	4024f8 <__udivmoddi4+0x2d4>
  402356:	4680      	mov	r8, r0
  402358:	1aed      	subs	r5, r5, r3
  40235a:	b2a3      	uxth	r3, r4
  40235c:	fbb5 f0f2 	udiv	r0, r5, r2
  402360:	fb02 5510 	mls	r5, r2, r0, r5
  402364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402368:	fb0c fc00 	mul.w	ip, ip, r0
  40236c:	45a4      	cmp	ip, r4
  40236e:	d907      	bls.n	402380 <__udivmoddi4+0x15c>
  402370:	19e4      	adds	r4, r4, r7
  402372:	f100 33ff 	add.w	r3, r0, #4294967295
  402376:	d202      	bcs.n	40237e <__udivmoddi4+0x15a>
  402378:	45a4      	cmp	ip, r4
  40237a:	f200 80b8 	bhi.w	4024ee <__udivmoddi4+0x2ca>
  40237e:	4618      	mov	r0, r3
  402380:	eba4 040c 	sub.w	r4, r4, ip
  402384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402388:	e79d      	b.n	4022c6 <__udivmoddi4+0xa2>
  40238a:	4631      	mov	r1, r6
  40238c:	4630      	mov	r0, r6
  40238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402392:	f1ce 0420 	rsb	r4, lr, #32
  402396:	fa05 f30e 	lsl.w	r3, r5, lr
  40239a:	fa07 f70e 	lsl.w	r7, r7, lr
  40239e:	fa20 f804 	lsr.w	r8, r0, r4
  4023a2:	0c3a      	lsrs	r2, r7, #16
  4023a4:	fa25 f404 	lsr.w	r4, r5, r4
  4023a8:	ea48 0803 	orr.w	r8, r8, r3
  4023ac:	fbb4 f1f2 	udiv	r1, r4, r2
  4023b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4023b4:	fb02 4411 	mls	r4, r2, r1, r4
  4023b8:	fa1f fc87 	uxth.w	ip, r7
  4023bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4023c0:	fb01 f30c 	mul.w	r3, r1, ip
  4023c4:	42ab      	cmp	r3, r5
  4023c6:	fa00 f40e 	lsl.w	r4, r0, lr
  4023ca:	d909      	bls.n	4023e0 <__udivmoddi4+0x1bc>
  4023cc:	19ed      	adds	r5, r5, r7
  4023ce:	f101 30ff 	add.w	r0, r1, #4294967295
  4023d2:	f080 808a 	bcs.w	4024ea <__udivmoddi4+0x2c6>
  4023d6:	42ab      	cmp	r3, r5
  4023d8:	f240 8087 	bls.w	4024ea <__udivmoddi4+0x2c6>
  4023dc:	3902      	subs	r1, #2
  4023de:	443d      	add	r5, r7
  4023e0:	1aeb      	subs	r3, r5, r3
  4023e2:	fa1f f588 	uxth.w	r5, r8
  4023e6:	fbb3 f0f2 	udiv	r0, r3, r2
  4023ea:	fb02 3310 	mls	r3, r2, r0, r3
  4023ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4023f2:	fb00 f30c 	mul.w	r3, r0, ip
  4023f6:	42ab      	cmp	r3, r5
  4023f8:	d907      	bls.n	40240a <__udivmoddi4+0x1e6>
  4023fa:	19ed      	adds	r5, r5, r7
  4023fc:	f100 38ff 	add.w	r8, r0, #4294967295
  402400:	d26f      	bcs.n	4024e2 <__udivmoddi4+0x2be>
  402402:	42ab      	cmp	r3, r5
  402404:	d96d      	bls.n	4024e2 <__udivmoddi4+0x2be>
  402406:	3802      	subs	r0, #2
  402408:	443d      	add	r5, r7
  40240a:	1aeb      	subs	r3, r5, r3
  40240c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402410:	e78f      	b.n	402332 <__udivmoddi4+0x10e>
  402412:	f1c1 0720 	rsb	r7, r1, #32
  402416:	fa22 f807 	lsr.w	r8, r2, r7
  40241a:	408b      	lsls	r3, r1
  40241c:	fa05 f401 	lsl.w	r4, r5, r1
  402420:	ea48 0303 	orr.w	r3, r8, r3
  402424:	fa20 fe07 	lsr.w	lr, r0, r7
  402428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40242c:	40fd      	lsrs	r5, r7
  40242e:	ea4e 0e04 	orr.w	lr, lr, r4
  402432:	fbb5 f9fc 	udiv	r9, r5, ip
  402436:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40243a:	fb0c 5519 	mls	r5, ip, r9, r5
  40243e:	fa1f f883 	uxth.w	r8, r3
  402442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402446:	fb09 f408 	mul.w	r4, r9, r8
  40244a:	42ac      	cmp	r4, r5
  40244c:	fa02 f201 	lsl.w	r2, r2, r1
  402450:	fa00 fa01 	lsl.w	sl, r0, r1
  402454:	d908      	bls.n	402468 <__udivmoddi4+0x244>
  402456:	18ed      	adds	r5, r5, r3
  402458:	f109 30ff 	add.w	r0, r9, #4294967295
  40245c:	d243      	bcs.n	4024e6 <__udivmoddi4+0x2c2>
  40245e:	42ac      	cmp	r4, r5
  402460:	d941      	bls.n	4024e6 <__udivmoddi4+0x2c2>
  402462:	f1a9 0902 	sub.w	r9, r9, #2
  402466:	441d      	add	r5, r3
  402468:	1b2d      	subs	r5, r5, r4
  40246a:	fa1f fe8e 	uxth.w	lr, lr
  40246e:	fbb5 f0fc 	udiv	r0, r5, ip
  402472:	fb0c 5510 	mls	r5, ip, r0, r5
  402476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40247a:	fb00 f808 	mul.w	r8, r0, r8
  40247e:	45a0      	cmp	r8, r4
  402480:	d907      	bls.n	402492 <__udivmoddi4+0x26e>
  402482:	18e4      	adds	r4, r4, r3
  402484:	f100 35ff 	add.w	r5, r0, #4294967295
  402488:	d229      	bcs.n	4024de <__udivmoddi4+0x2ba>
  40248a:	45a0      	cmp	r8, r4
  40248c:	d927      	bls.n	4024de <__udivmoddi4+0x2ba>
  40248e:	3802      	subs	r0, #2
  402490:	441c      	add	r4, r3
  402492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402496:	eba4 0408 	sub.w	r4, r4, r8
  40249a:	fba0 8902 	umull	r8, r9, r0, r2
  40249e:	454c      	cmp	r4, r9
  4024a0:	46c6      	mov	lr, r8
  4024a2:	464d      	mov	r5, r9
  4024a4:	d315      	bcc.n	4024d2 <__udivmoddi4+0x2ae>
  4024a6:	d012      	beq.n	4024ce <__udivmoddi4+0x2aa>
  4024a8:	b156      	cbz	r6, 4024c0 <__udivmoddi4+0x29c>
  4024aa:	ebba 030e 	subs.w	r3, sl, lr
  4024ae:	eb64 0405 	sbc.w	r4, r4, r5
  4024b2:	fa04 f707 	lsl.w	r7, r4, r7
  4024b6:	40cb      	lsrs	r3, r1
  4024b8:	431f      	orrs	r7, r3
  4024ba:	40cc      	lsrs	r4, r1
  4024bc:	6037      	str	r7, [r6, #0]
  4024be:	6074      	str	r4, [r6, #4]
  4024c0:	2100      	movs	r1, #0
  4024c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024c6:	4618      	mov	r0, r3
  4024c8:	e6f8      	b.n	4022bc <__udivmoddi4+0x98>
  4024ca:	4690      	mov	r8, r2
  4024cc:	e6e0      	b.n	402290 <__udivmoddi4+0x6c>
  4024ce:	45c2      	cmp	sl, r8
  4024d0:	d2ea      	bcs.n	4024a8 <__udivmoddi4+0x284>
  4024d2:	ebb8 0e02 	subs.w	lr, r8, r2
  4024d6:	eb69 0503 	sbc.w	r5, r9, r3
  4024da:	3801      	subs	r0, #1
  4024dc:	e7e4      	b.n	4024a8 <__udivmoddi4+0x284>
  4024de:	4628      	mov	r0, r5
  4024e0:	e7d7      	b.n	402492 <__udivmoddi4+0x26e>
  4024e2:	4640      	mov	r0, r8
  4024e4:	e791      	b.n	40240a <__udivmoddi4+0x1e6>
  4024e6:	4681      	mov	r9, r0
  4024e8:	e7be      	b.n	402468 <__udivmoddi4+0x244>
  4024ea:	4601      	mov	r1, r0
  4024ec:	e778      	b.n	4023e0 <__udivmoddi4+0x1bc>
  4024ee:	3802      	subs	r0, #2
  4024f0:	443c      	add	r4, r7
  4024f2:	e745      	b.n	402380 <__udivmoddi4+0x15c>
  4024f4:	4608      	mov	r0, r1
  4024f6:	e708      	b.n	40230a <__udivmoddi4+0xe6>
  4024f8:	f1a8 0802 	sub.w	r8, r8, #2
  4024fc:	443d      	add	r5, r7
  4024fe:	e72b      	b.n	402358 <__udivmoddi4+0x134>

00402500 <__aeabi_idiv0>:
  402500:	4770      	bx	lr
  402502:	bf00      	nop

00402504 <__libc_init_array>:
  402504:	b570      	push	{r4, r5, r6, lr}
  402506:	4e0f      	ldr	r6, [pc, #60]	; (402544 <__libc_init_array+0x40>)
  402508:	4d0f      	ldr	r5, [pc, #60]	; (402548 <__libc_init_array+0x44>)
  40250a:	1b76      	subs	r6, r6, r5
  40250c:	10b6      	asrs	r6, r6, #2
  40250e:	bf18      	it	ne
  402510:	2400      	movne	r4, #0
  402512:	d005      	beq.n	402520 <__libc_init_array+0x1c>
  402514:	3401      	adds	r4, #1
  402516:	f855 3b04 	ldr.w	r3, [r5], #4
  40251a:	4798      	blx	r3
  40251c:	42a6      	cmp	r6, r4
  40251e:	d1f9      	bne.n	402514 <__libc_init_array+0x10>
  402520:	4e0a      	ldr	r6, [pc, #40]	; (40254c <__libc_init_array+0x48>)
  402522:	4d0b      	ldr	r5, [pc, #44]	; (402550 <__libc_init_array+0x4c>)
  402524:	1b76      	subs	r6, r6, r5
  402526:	f000 fd23 	bl	402f70 <_init>
  40252a:	10b6      	asrs	r6, r6, #2
  40252c:	bf18      	it	ne
  40252e:	2400      	movne	r4, #0
  402530:	d006      	beq.n	402540 <__libc_init_array+0x3c>
  402532:	3401      	adds	r4, #1
  402534:	f855 3b04 	ldr.w	r3, [r5], #4
  402538:	4798      	blx	r3
  40253a:	42a6      	cmp	r6, r4
  40253c:	d1f9      	bne.n	402532 <__libc_init_array+0x2e>
  40253e:	bd70      	pop	{r4, r5, r6, pc}
  402540:	bd70      	pop	{r4, r5, r6, pc}
  402542:	bf00      	nop
  402544:	00402f7c 	.word	0x00402f7c
  402548:	00402f7c 	.word	0x00402f7c
  40254c:	00402f84 	.word	0x00402f84
  402550:	00402f7c 	.word	0x00402f7c

00402554 <memset>:
  402554:	b470      	push	{r4, r5, r6}
  402556:	0786      	lsls	r6, r0, #30
  402558:	d046      	beq.n	4025e8 <memset+0x94>
  40255a:	1e54      	subs	r4, r2, #1
  40255c:	2a00      	cmp	r2, #0
  40255e:	d041      	beq.n	4025e4 <memset+0x90>
  402560:	b2ca      	uxtb	r2, r1
  402562:	4603      	mov	r3, r0
  402564:	e002      	b.n	40256c <memset+0x18>
  402566:	f114 34ff 	adds.w	r4, r4, #4294967295
  40256a:	d33b      	bcc.n	4025e4 <memset+0x90>
  40256c:	f803 2b01 	strb.w	r2, [r3], #1
  402570:	079d      	lsls	r5, r3, #30
  402572:	d1f8      	bne.n	402566 <memset+0x12>
  402574:	2c03      	cmp	r4, #3
  402576:	d92e      	bls.n	4025d6 <memset+0x82>
  402578:	b2cd      	uxtb	r5, r1
  40257a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40257e:	2c0f      	cmp	r4, #15
  402580:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402584:	d919      	bls.n	4025ba <memset+0x66>
  402586:	f103 0210 	add.w	r2, r3, #16
  40258a:	4626      	mov	r6, r4
  40258c:	3e10      	subs	r6, #16
  40258e:	2e0f      	cmp	r6, #15
  402590:	f842 5c10 	str.w	r5, [r2, #-16]
  402594:	f842 5c0c 	str.w	r5, [r2, #-12]
  402598:	f842 5c08 	str.w	r5, [r2, #-8]
  40259c:	f842 5c04 	str.w	r5, [r2, #-4]
  4025a0:	f102 0210 	add.w	r2, r2, #16
  4025a4:	d8f2      	bhi.n	40258c <memset+0x38>
  4025a6:	f1a4 0210 	sub.w	r2, r4, #16
  4025aa:	f022 020f 	bic.w	r2, r2, #15
  4025ae:	f004 040f 	and.w	r4, r4, #15
  4025b2:	3210      	adds	r2, #16
  4025b4:	2c03      	cmp	r4, #3
  4025b6:	4413      	add	r3, r2
  4025b8:	d90d      	bls.n	4025d6 <memset+0x82>
  4025ba:	461e      	mov	r6, r3
  4025bc:	4622      	mov	r2, r4
  4025be:	3a04      	subs	r2, #4
  4025c0:	2a03      	cmp	r2, #3
  4025c2:	f846 5b04 	str.w	r5, [r6], #4
  4025c6:	d8fa      	bhi.n	4025be <memset+0x6a>
  4025c8:	1f22      	subs	r2, r4, #4
  4025ca:	f022 0203 	bic.w	r2, r2, #3
  4025ce:	3204      	adds	r2, #4
  4025d0:	4413      	add	r3, r2
  4025d2:	f004 0403 	and.w	r4, r4, #3
  4025d6:	b12c      	cbz	r4, 4025e4 <memset+0x90>
  4025d8:	b2c9      	uxtb	r1, r1
  4025da:	441c      	add	r4, r3
  4025dc:	f803 1b01 	strb.w	r1, [r3], #1
  4025e0:	429c      	cmp	r4, r3
  4025e2:	d1fb      	bne.n	4025dc <memset+0x88>
  4025e4:	bc70      	pop	{r4, r5, r6}
  4025e6:	4770      	bx	lr
  4025e8:	4614      	mov	r4, r2
  4025ea:	4603      	mov	r3, r0
  4025ec:	e7c2      	b.n	402574 <memset+0x20>
  4025ee:	bf00      	nop

004025f0 <critical_factorization>:
  4025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025f4:	f04f 0e01 	mov.w	lr, #1
  4025f8:	4674      	mov	r4, lr
  4025fa:	2500      	movs	r5, #0
  4025fc:	f04f 36ff 	mov.w	r6, #4294967295
  402600:	192b      	adds	r3, r5, r4
  402602:	428b      	cmp	r3, r1
  402604:	eb00 0706 	add.w	r7, r0, r6
  402608:	d20d      	bcs.n	402626 <critical_factorization+0x36>
  40260a:	5d3f      	ldrb	r7, [r7, r4]
  40260c:	f810 c003 	ldrb.w	ip, [r0, r3]
  402610:	45bc      	cmp	ip, r7
  402612:	d22d      	bcs.n	402670 <critical_factorization+0x80>
  402614:	461d      	mov	r5, r3
  402616:	2401      	movs	r4, #1
  402618:	eba3 0e06 	sub.w	lr, r3, r6
  40261c:	192b      	adds	r3, r5, r4
  40261e:	428b      	cmp	r3, r1
  402620:	eb00 0706 	add.w	r7, r0, r6
  402624:	d3f1      	bcc.n	40260a <critical_factorization+0x1a>
  402626:	f04f 0801 	mov.w	r8, #1
  40262a:	f8c2 e000 	str.w	lr, [r2]
  40262e:	4644      	mov	r4, r8
  402630:	2500      	movs	r5, #0
  402632:	f04f 37ff 	mov.w	r7, #4294967295
  402636:	192b      	adds	r3, r5, r4
  402638:	4299      	cmp	r1, r3
  40263a:	eb00 0e07 	add.w	lr, r0, r7
  40263e:	d90e      	bls.n	40265e <critical_factorization+0x6e>
  402640:	f81e e004 	ldrb.w	lr, [lr, r4]
  402644:	f810 c003 	ldrb.w	ip, [r0, r3]
  402648:	45f4      	cmp	ip, lr
  40264a:	d918      	bls.n	40267e <critical_factorization+0x8e>
  40264c:	461d      	mov	r5, r3
  40264e:	2401      	movs	r4, #1
  402650:	eba3 0807 	sub.w	r8, r3, r7
  402654:	192b      	adds	r3, r5, r4
  402656:	4299      	cmp	r1, r3
  402658:	eb00 0e07 	add.w	lr, r0, r7
  40265c:	d8f0      	bhi.n	402640 <critical_factorization+0x50>
  40265e:	3701      	adds	r7, #1
  402660:	1c70      	adds	r0, r6, #1
  402662:	4287      	cmp	r7, r0
  402664:	bf24      	itt	cs
  402666:	f8c2 8000 	strcs.w	r8, [r2]
  40266a:	4638      	movcs	r0, r7
  40266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402670:	d00c      	beq.n	40268c <critical_factorization+0x9c>
  402672:	f04f 0e01 	mov.w	lr, #1
  402676:	462e      	mov	r6, r5
  402678:	4674      	mov	r4, lr
  40267a:	4475      	add	r5, lr
  40267c:	e7c0      	b.n	402600 <critical_factorization+0x10>
  40267e:	d00b      	beq.n	402698 <critical_factorization+0xa8>
  402680:	f04f 0801 	mov.w	r8, #1
  402684:	462f      	mov	r7, r5
  402686:	4644      	mov	r4, r8
  402688:	4445      	add	r5, r8
  40268a:	e7d4      	b.n	402636 <critical_factorization+0x46>
  40268c:	4574      	cmp	r4, lr
  40268e:	bf12      	itee	ne
  402690:	3401      	addne	r4, #1
  402692:	461d      	moveq	r5, r3
  402694:	2401      	moveq	r4, #1
  402696:	e7b3      	b.n	402600 <critical_factorization+0x10>
  402698:	4544      	cmp	r4, r8
  40269a:	bf12      	itee	ne
  40269c:	3401      	addne	r4, #1
  40269e:	461d      	moveq	r5, r3
  4026a0:	2401      	moveq	r4, #1
  4026a2:	e7c8      	b.n	402636 <critical_factorization+0x46>

004026a4 <two_way_long_needle>:
  4026a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026a8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4026ac:	4616      	mov	r6, r2
  4026ae:	4605      	mov	r5, r0
  4026b0:	468b      	mov	fp, r1
  4026b2:	4610      	mov	r0, r2
  4026b4:	4619      	mov	r1, r3
  4026b6:	aa03      	add	r2, sp, #12
  4026b8:	461c      	mov	r4, r3
  4026ba:	f7ff ff99 	bl	4025f0 <critical_factorization>
  4026be:	ab03      	add	r3, sp, #12
  4026c0:	4681      	mov	r9, r0
  4026c2:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4026c6:	f843 4f04 	str.w	r4, [r3, #4]!
  4026ca:	4293      	cmp	r3, r2
  4026cc:	d1fb      	bne.n	4026c6 <two_way_long_needle+0x22>
  4026ce:	b14c      	cbz	r4, 4026e4 <two_way_long_needle+0x40>
  4026d0:	1e63      	subs	r3, r4, #1
  4026d2:	1e72      	subs	r2, r6, #1
  4026d4:	a804      	add	r0, sp, #16
  4026d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4026da:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4026de:	f113 33ff 	adds.w	r3, r3, #4294967295
  4026e2:	d2f8      	bcs.n	4026d6 <two_way_long_needle+0x32>
  4026e4:	9903      	ldr	r1, [sp, #12]
  4026e6:	464a      	mov	r2, r9
  4026e8:	4431      	add	r1, r6
  4026ea:	4630      	mov	r0, r6
  4026ec:	f000 fa60 	bl	402bb0 <memcmp>
  4026f0:	2800      	cmp	r0, #0
  4026f2:	d16f      	bne.n	4027d4 <two_way_long_needle+0x130>
  4026f4:	f109 33ff 	add.w	r3, r9, #4294967295
  4026f8:	9300      	str	r3, [sp, #0]
  4026fa:	18f3      	adds	r3, r6, r3
  4026fc:	4682      	mov	sl, r0
  4026fe:	9301      	str	r3, [sp, #4]
  402700:	4623      	mov	r3, r4
  402702:	4680      	mov	r8, r0
  402704:	4654      	mov	r4, sl
  402706:	4658      	mov	r0, fp
  402708:	469a      	mov	sl, r3
  40270a:	eb08 070a 	add.w	r7, r8, sl
  40270e:	1a3a      	subs	r2, r7, r0
  402710:	2100      	movs	r1, #0
  402712:	4428      	add	r0, r5
  402714:	f000 f9fc 	bl	402b10 <memchr>
  402718:	2800      	cmp	r0, #0
  40271a:	d156      	bne.n	4027ca <two_way_long_needle+0x126>
  40271c:	2f00      	cmp	r7, #0
  40271e:	d054      	beq.n	4027ca <two_way_long_needle+0x126>
  402720:	19eb      	adds	r3, r5, r7
  402722:	aa04      	add	r2, sp, #16
  402724:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40272c:	b14b      	cbz	r3, 402742 <two_way_long_needle+0x9e>
  40272e:	b124      	cbz	r4, 40273a <two_way_long_needle+0x96>
  402730:	9a03      	ldr	r2, [sp, #12]
  402732:	4293      	cmp	r3, r2
  402734:	d201      	bcs.n	40273a <two_way_long_needle+0x96>
  402736:	ebaa 0302 	sub.w	r3, sl, r2
  40273a:	4498      	add	r8, r3
  40273c:	2400      	movs	r4, #0
  40273e:	4638      	mov	r0, r7
  402740:	e7e3      	b.n	40270a <two_way_long_needle+0x66>
  402742:	454c      	cmp	r4, r9
  402744:	4623      	mov	r3, r4
  402746:	f10a 3eff 	add.w	lr, sl, #4294967295
  40274a:	bf38      	it	cc
  40274c:	464b      	movcc	r3, r9
  40274e:	4573      	cmp	r3, lr
  402750:	d213      	bcs.n	40277a <two_way_long_needle+0xd6>
  402752:	eb08 0203 	add.w	r2, r8, r3
  402756:	f816 c003 	ldrb.w	ip, [r6, r3]
  40275a:	5ca8      	ldrb	r0, [r5, r2]
  40275c:	4584      	cmp	ip, r0
  40275e:	442a      	add	r2, r5
  402760:	eb06 0103 	add.w	r1, r6, r3
  402764:	d006      	beq.n	402774 <two_way_long_needle+0xd0>
  402766:	e02c      	b.n	4027c2 <two_way_long_needle+0x11e>
  402768:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40276c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402770:	4584      	cmp	ip, r0
  402772:	d126      	bne.n	4027c2 <two_way_long_needle+0x11e>
  402774:	3301      	adds	r3, #1
  402776:	4573      	cmp	r3, lr
  402778:	d3f6      	bcc.n	402768 <two_way_long_needle+0xc4>
  40277a:	454c      	cmp	r4, r9
  40277c:	9900      	ldr	r1, [sp, #0]
  40277e:	f080 8089 	bcs.w	402894 <two_way_long_needle+0x1f0>
  402782:	9b00      	ldr	r3, [sp, #0]
  402784:	eb08 0203 	add.w	r2, r8, r3
  402788:	9b01      	ldr	r3, [sp, #4]
  40278a:	5ca8      	ldrb	r0, [r5, r2]
  40278c:	781b      	ldrb	r3, [r3, #0]
  40278e:	4298      	cmp	r0, r3
  402790:	442a      	add	r2, r5
  402792:	d17f      	bne.n	402894 <two_way_long_needle+0x1f0>
  402794:	9801      	ldr	r0, [sp, #4]
  402796:	f104 3bff 	add.w	fp, r4, #4294967295
  40279a:	e006      	b.n	4027aa <two_way_long_needle+0x106>
  40279c:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4027a0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4027a4:	45f4      	cmp	ip, lr
  4027a6:	d103      	bne.n	4027b0 <two_way_long_needle+0x10c>
  4027a8:	4619      	mov	r1, r3
  4027aa:	1e4b      	subs	r3, r1, #1
  4027ac:	459b      	cmp	fp, r3
  4027ae:	d1f5      	bne.n	40279c <two_way_long_needle+0xf8>
  4027b0:	3401      	adds	r4, #1
  4027b2:	428c      	cmp	r4, r1
  4027b4:	d870      	bhi.n	402898 <two_way_long_needle+0x1f4>
  4027b6:	9c03      	ldr	r4, [sp, #12]
  4027b8:	4638      	mov	r0, r7
  4027ba:	44a0      	add	r8, r4
  4027bc:	ebaa 0404 	sub.w	r4, sl, r4
  4027c0:	e7a3      	b.n	40270a <two_way_long_needle+0x66>
  4027c2:	f1c9 0201 	rsb	r2, r9, #1
  4027c6:	4490      	add	r8, r2
  4027c8:	e7b7      	b.n	40273a <two_way_long_needle+0x96>
  4027ca:	2000      	movs	r0, #0
  4027cc:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4027d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027d4:	eba4 0309 	sub.w	r3, r4, r9
  4027d8:	454b      	cmp	r3, r9
  4027da:	bf38      	it	cc
  4027dc:	464b      	movcc	r3, r9
  4027de:	3301      	adds	r3, #1
  4027e0:	f109 38ff 	add.w	r8, r9, #4294967295
  4027e4:	9303      	str	r3, [sp, #12]
  4027e6:	eb06 0308 	add.w	r3, r6, r8
  4027ea:	4658      	mov	r0, fp
  4027ec:	f04f 0a00 	mov.w	sl, #0
  4027f0:	46cb      	mov	fp, r9
  4027f2:	4699      	mov	r9, r3
  4027f4:	eb0a 0704 	add.w	r7, sl, r4
  4027f8:	1a3a      	subs	r2, r7, r0
  4027fa:	2100      	movs	r1, #0
  4027fc:	4428      	add	r0, r5
  4027fe:	f000 f987 	bl	402b10 <memchr>
  402802:	2800      	cmp	r0, #0
  402804:	d1e1      	bne.n	4027ca <two_way_long_needle+0x126>
  402806:	2f00      	cmp	r7, #0
  402808:	d0df      	beq.n	4027ca <two_way_long_needle+0x126>
  40280a:	19eb      	adds	r3, r5, r7
  40280c:	aa04      	add	r2, sp, #16
  40280e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402816:	bba3      	cbnz	r3, 402882 <two_way_long_needle+0x1de>
  402818:	1e61      	subs	r1, r4, #1
  40281a:	458b      	cmp	fp, r1
  40281c:	d215      	bcs.n	40284a <two_way_long_needle+0x1a6>
  40281e:	eb0a 020b 	add.w	r2, sl, fp
  402822:	f816 300b 	ldrb.w	r3, [r6, fp]
  402826:	f815 e002 	ldrb.w	lr, [r5, r2]
  40282a:	459e      	cmp	lr, r3
  40282c:	442a      	add	r2, r5
  40282e:	eb06 000b 	add.w	r0, r6, fp
  402832:	465b      	mov	r3, fp
  402834:	d006      	beq.n	402844 <two_way_long_needle+0x1a0>
  402836:	e027      	b.n	402888 <two_way_long_needle+0x1e4>
  402838:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  40283c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402840:	45f4      	cmp	ip, lr
  402842:	d121      	bne.n	402888 <two_way_long_needle+0x1e4>
  402844:	3301      	adds	r3, #1
  402846:	428b      	cmp	r3, r1
  402848:	d3f6      	bcc.n	402838 <two_way_long_needle+0x194>
  40284a:	f1b8 3fff 	cmp.w	r8, #4294967295
  40284e:	d011      	beq.n	402874 <two_way_long_needle+0x1d0>
  402850:	eb0a 0208 	add.w	r2, sl, r8
  402854:	f899 1000 	ldrb.w	r1, [r9]
  402858:	5cab      	ldrb	r3, [r5, r2]
  40285a:	4299      	cmp	r1, r3
  40285c:	442a      	add	r2, r5
  40285e:	d10f      	bne.n	402880 <two_way_long_needle+0x1dc>
  402860:	464b      	mov	r3, r9
  402862:	e005      	b.n	402870 <two_way_long_needle+0x1cc>
  402864:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402868:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40286c:	4288      	cmp	r0, r1
  40286e:	d107      	bne.n	402880 <two_way_long_needle+0x1dc>
  402870:	42b3      	cmp	r3, r6
  402872:	d1f7      	bne.n	402864 <two_way_long_needle+0x1c0>
  402874:	eb05 000a 	add.w	r0, r5, sl
  402878:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402880:	9b03      	ldr	r3, [sp, #12]
  402882:	449a      	add	sl, r3
  402884:	4638      	mov	r0, r7
  402886:	e7b5      	b.n	4027f4 <two_way_long_needle+0x150>
  402888:	f1cb 0201 	rsb	r2, fp, #1
  40288c:	4492      	add	sl, r2
  40288e:	449a      	add	sl, r3
  402890:	4638      	mov	r0, r7
  402892:	e7af      	b.n	4027f4 <two_way_long_needle+0x150>
  402894:	4649      	mov	r1, r9
  402896:	e78b      	b.n	4027b0 <two_way_long_needle+0x10c>
  402898:	eb05 0008 	add.w	r0, r5, r8
  40289c:	e796      	b.n	4027cc <two_way_long_needle+0x128>
  40289e:	bf00      	nop

004028a0 <strstr>:
  4028a0:	7802      	ldrb	r2, [r0, #0]
  4028a2:	2a00      	cmp	r2, #0
  4028a4:	f000 8101 	beq.w	402aaa <strstr+0x20a>
  4028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028ac:	f891 8000 	ldrb.w	r8, [r1]
  4028b0:	b085      	sub	sp, #20
  4028b2:	4644      	mov	r4, r8
  4028b4:	f1b8 0f00 	cmp.w	r8, #0
  4028b8:	d016      	beq.n	4028e8 <strstr+0x48>
  4028ba:	4686      	mov	lr, r0
  4028bc:	f101 0c01 	add.w	ip, r1, #1
  4028c0:	2701      	movs	r7, #1
  4028c2:	e003      	b.n	4028cc <strstr+0x2c>
  4028c4:	f813 4b01 	ldrb.w	r4, [r3], #1
  4028c8:	b16c      	cbz	r4, 4028e6 <strstr+0x46>
  4028ca:	469c      	mov	ip, r3
  4028cc:	42a2      	cmp	r2, r4
  4028ce:	bf14      	ite	ne
  4028d0:	2700      	movne	r7, #0
  4028d2:	f007 0701 	andeq.w	r7, r7, #1
  4028d6:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4028da:	4663      	mov	r3, ip
  4028dc:	2a00      	cmp	r2, #0
  4028de:	d1f1      	bne.n	4028c4 <strstr+0x24>
  4028e0:	f89c 3000 	ldrb.w	r3, [ip]
  4028e4:	b9fb      	cbnz	r3, 402926 <strstr+0x86>
  4028e6:	b117      	cbz	r7, 4028ee <strstr+0x4e>
  4028e8:	b005      	add	sp, #20
  4028ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4028ee:	460e      	mov	r6, r1
  4028f0:	4605      	mov	r5, r0
  4028f2:	4641      	mov	r1, r8
  4028f4:	3001      	adds	r0, #1
  4028f6:	ebac 0406 	sub.w	r4, ip, r6
  4028fa:	f000 f989 	bl	402c10 <strchr>
  4028fe:	4607      	mov	r7, r0
  402900:	b188      	cbz	r0, 402926 <strstr+0x86>
  402902:	2c01      	cmp	r4, #1
  402904:	d0f0      	beq.n	4028e8 <strstr+0x48>
  402906:	1928      	adds	r0, r5, r4
  402908:	4287      	cmp	r7, r0
  40290a:	bf94      	ite	ls
  40290c:	1bc1      	subls	r1, r0, r7
  40290e:	2101      	movhi	r1, #1
  402910:	2c1f      	cmp	r4, #31
  402912:	468b      	mov	fp, r1
  402914:	d90b      	bls.n	40292e <strstr+0x8e>
  402916:	4623      	mov	r3, r4
  402918:	4632      	mov	r2, r6
  40291a:	4638      	mov	r0, r7
  40291c:	f7ff fec2 	bl	4026a4 <two_way_long_needle>
  402920:	b005      	add	sp, #20
  402922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402926:	2000      	movs	r0, #0
  402928:	b005      	add	sp, #20
  40292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40292e:	aa03      	add	r2, sp, #12
  402930:	4621      	mov	r1, r4
  402932:	4630      	mov	r0, r6
  402934:	f7ff fe5c 	bl	4025f0 <critical_factorization>
  402938:	9903      	ldr	r1, [sp, #12]
  40293a:	4680      	mov	r8, r0
  40293c:	4602      	mov	r2, r0
  40293e:	4431      	add	r1, r6
  402940:	4630      	mov	r0, r6
  402942:	f000 f935 	bl	402bb0 <memcmp>
  402946:	2800      	cmp	r0, #0
  402948:	d157      	bne.n	4029fa <strstr+0x15a>
  40294a:	f108 33ff 	add.w	r3, r8, #4294967295
  40294e:	9300      	str	r3, [sp, #0]
  402950:	18f3      	adds	r3, r6, r3
  402952:	4681      	mov	r9, r0
  402954:	4605      	mov	r5, r0
  402956:	9301      	str	r3, [sp, #4]
  402958:	4658      	mov	r0, fp
  40295a:	46b2      	mov	sl, r6
  40295c:	1966      	adds	r6, r4, r5
  40295e:	1a32      	subs	r2, r6, r0
  402960:	2100      	movs	r1, #0
  402962:	4438      	add	r0, r7
  402964:	f000 f8d4 	bl	402b10 <memchr>
  402968:	2800      	cmp	r0, #0
  40296a:	d1dc      	bne.n	402926 <strstr+0x86>
  40296c:	2e00      	cmp	r6, #0
  40296e:	d0da      	beq.n	402926 <strstr+0x86>
  402970:	45c8      	cmp	r8, r9
  402972:	4643      	mov	r3, r8
  402974:	bf38      	it	cc
  402976:	464b      	movcc	r3, r9
  402978:	429c      	cmp	r4, r3
  40297a:	d912      	bls.n	4029a2 <strstr+0x102>
  40297c:	195a      	adds	r2, r3, r5
  40297e:	f81a 1003 	ldrb.w	r1, [sl, r3]
  402982:	5cb8      	ldrb	r0, [r7, r2]
  402984:	4281      	cmp	r1, r0
  402986:	443a      	add	r2, r7
  402988:	eb0a 0e03 	add.w	lr, sl, r3
  40298c:	d006      	beq.n	40299c <strstr+0xfc>
  40298e:	e02c      	b.n	4029ea <strstr+0x14a>
  402990:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  402994:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402998:	4288      	cmp	r0, r1
  40299a:	d126      	bne.n	4029ea <strstr+0x14a>
  40299c:	3301      	adds	r3, #1
  40299e:	429c      	cmp	r4, r3
  4029a0:	d1f6      	bne.n	402990 <strstr+0xf0>
  4029a2:	45c8      	cmp	r8, r9
  4029a4:	9900      	ldr	r1, [sp, #0]
  4029a6:	f240 8083 	bls.w	402ab0 <strstr+0x210>
  4029aa:	9b00      	ldr	r3, [sp, #0]
  4029ac:	18ea      	adds	r2, r5, r3
  4029ae:	9b01      	ldr	r3, [sp, #4]
  4029b0:	5cb8      	ldrb	r0, [r7, r2]
  4029b2:	781b      	ldrb	r3, [r3, #0]
  4029b4:	4298      	cmp	r0, r3
  4029b6:	443a      	add	r2, r7
  4029b8:	d17a      	bne.n	402ab0 <strstr+0x210>
  4029ba:	9801      	ldr	r0, [sp, #4]
  4029bc:	f109 3bff 	add.w	fp, r9, #4294967295
  4029c0:	e006      	b.n	4029d0 <strstr+0x130>
  4029c2:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4029c6:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4029ca:	45f4      	cmp	ip, lr
  4029cc:	d103      	bne.n	4029d6 <strstr+0x136>
  4029ce:	4619      	mov	r1, r3
  4029d0:	1e4b      	subs	r3, r1, #1
  4029d2:	455b      	cmp	r3, fp
  4029d4:	d1f5      	bne.n	4029c2 <strstr+0x122>
  4029d6:	f109 0901 	add.w	r9, r9, #1
  4029da:	4589      	cmp	r9, r1
  4029dc:	d857      	bhi.n	402a8e <strstr+0x1ee>
  4029de:	9b03      	ldr	r3, [sp, #12]
  4029e0:	4630      	mov	r0, r6
  4029e2:	441d      	add	r5, r3
  4029e4:	eba4 0903 	sub.w	r9, r4, r3
  4029e8:	e7b8      	b.n	40295c <strstr+0xbc>
  4029ea:	f1c8 0201 	rsb	r2, r8, #1
  4029ee:	4415      	add	r5, r2
  4029f0:	441d      	add	r5, r3
  4029f2:	f04f 0900 	mov.w	r9, #0
  4029f6:	4630      	mov	r0, r6
  4029f8:	e7b0      	b.n	40295c <strstr+0xbc>
  4029fa:	eba4 0308 	sub.w	r3, r4, r8
  4029fe:	4543      	cmp	r3, r8
  402a00:	bf38      	it	cc
  402a02:	4643      	movcc	r3, r8
  402a04:	3301      	adds	r3, #1
  402a06:	f108 39ff 	add.w	r9, r8, #4294967295
  402a0a:	9303      	str	r3, [sp, #12]
  402a0c:	eb06 0309 	add.w	r3, r6, r9
  402a10:	4658      	mov	r0, fp
  402a12:	2500      	movs	r5, #0
  402a14:	46bb      	mov	fp, r7
  402a16:	469a      	mov	sl, r3
  402a18:	1967      	adds	r7, r4, r5
  402a1a:	1a3a      	subs	r2, r7, r0
  402a1c:	2100      	movs	r1, #0
  402a1e:	4458      	add	r0, fp
  402a20:	f000 f876 	bl	402b10 <memchr>
  402a24:	2800      	cmp	r0, #0
  402a26:	f47f af7e 	bne.w	402926 <strstr+0x86>
  402a2a:	2f00      	cmp	r7, #0
  402a2c:	f43f af7b 	beq.w	402926 <strstr+0x86>
  402a30:	4544      	cmp	r4, r8
  402a32:	d915      	bls.n	402a60 <strstr+0x1c0>
  402a34:	eb08 0205 	add.w	r2, r8, r5
  402a38:	f816 3008 	ldrb.w	r3, [r6, r8]
  402a3c:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402a40:	4298      	cmp	r0, r3
  402a42:	445a      	add	r2, fp
  402a44:	eb06 0108 	add.w	r1, r6, r8
  402a48:	4643      	mov	r3, r8
  402a4a:	d006      	beq.n	402a5a <strstr+0x1ba>
  402a4c:	e023      	b.n	402a96 <strstr+0x1f6>
  402a4e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  402a52:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402a56:	4586      	cmp	lr, r0
  402a58:	d11d      	bne.n	402a96 <strstr+0x1f6>
  402a5a:	3301      	adds	r3, #1
  402a5c:	429c      	cmp	r4, r3
  402a5e:	d1f6      	bne.n	402a4e <strstr+0x1ae>
  402a60:	f1b9 3fff 	cmp.w	r9, #4294967295
  402a64:	d012      	beq.n	402a8c <strstr+0x1ec>
  402a66:	eb05 0209 	add.w	r2, r5, r9
  402a6a:	f89a 3000 	ldrb.w	r3, [sl]
  402a6e:	f81b 1002 	ldrb.w	r1, [fp, r2]
  402a72:	4299      	cmp	r1, r3
  402a74:	445a      	add	r2, fp
  402a76:	d114      	bne.n	402aa2 <strstr+0x202>
  402a78:	4653      	mov	r3, sl
  402a7a:	e005      	b.n	402a88 <strstr+0x1e8>
  402a7c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402a80:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402a84:	4288      	cmp	r0, r1
  402a86:	d10c      	bne.n	402aa2 <strstr+0x202>
  402a88:	42b3      	cmp	r3, r6
  402a8a:	d1f7      	bne.n	402a7c <strstr+0x1dc>
  402a8c:	465f      	mov	r7, fp
  402a8e:	1978      	adds	r0, r7, r5
  402a90:	b005      	add	sp, #20
  402a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a96:	f1c8 0201 	rsb	r2, r8, #1
  402a9a:	4415      	add	r5, r2
  402a9c:	441d      	add	r5, r3
  402a9e:	4638      	mov	r0, r7
  402aa0:	e7ba      	b.n	402a18 <strstr+0x178>
  402aa2:	9b03      	ldr	r3, [sp, #12]
  402aa4:	4638      	mov	r0, r7
  402aa6:	441d      	add	r5, r3
  402aa8:	e7b6      	b.n	402a18 <strstr+0x178>
  402aaa:	780b      	ldrb	r3, [r1, #0]
  402aac:	b913      	cbnz	r3, 402ab4 <strstr+0x214>
  402aae:	4770      	bx	lr
  402ab0:	4641      	mov	r1, r8
  402ab2:	e790      	b.n	4029d6 <strstr+0x136>
  402ab4:	2000      	movs	r0, #0
  402ab6:	4770      	bx	lr

00402ab8 <register_fini>:
  402ab8:	4b02      	ldr	r3, [pc, #8]	; (402ac4 <register_fini+0xc>)
  402aba:	b113      	cbz	r3, 402ac2 <register_fini+0xa>
  402abc:	4802      	ldr	r0, [pc, #8]	; (402ac8 <register_fini+0x10>)
  402abe:	f000 b805 	b.w	402acc <atexit>
  402ac2:	4770      	bx	lr
  402ac4:	00000000 	.word	0x00000000
  402ac8:	00402ad9 	.word	0x00402ad9

00402acc <atexit>:
  402acc:	2300      	movs	r3, #0
  402ace:	4601      	mov	r1, r0
  402ad0:	461a      	mov	r2, r3
  402ad2:	4618      	mov	r0, r3
  402ad4:	f000 b910 	b.w	402cf8 <__register_exitproc>

00402ad8 <__libc_fini_array>:
  402ad8:	b538      	push	{r3, r4, r5, lr}
  402ada:	4c0a      	ldr	r4, [pc, #40]	; (402b04 <__libc_fini_array+0x2c>)
  402adc:	4d0a      	ldr	r5, [pc, #40]	; (402b08 <__libc_fini_array+0x30>)
  402ade:	1b64      	subs	r4, r4, r5
  402ae0:	10a4      	asrs	r4, r4, #2
  402ae2:	d00a      	beq.n	402afa <__libc_fini_array+0x22>
  402ae4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ae8:	3b01      	subs	r3, #1
  402aea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402aee:	3c01      	subs	r4, #1
  402af0:	f855 3904 	ldr.w	r3, [r5], #-4
  402af4:	4798      	blx	r3
  402af6:	2c00      	cmp	r4, #0
  402af8:	d1f9      	bne.n	402aee <__libc_fini_array+0x16>
  402afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402afe:	f000 ba41 	b.w	402f84 <_fini>
  402b02:	bf00      	nop
  402b04:	00402f94 	.word	0x00402f94
  402b08:	00402f90 	.word	0x00402f90
  402b0c:	00000000 	.word	0x00000000

00402b10 <memchr>:
  402b10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402b14:	2a10      	cmp	r2, #16
  402b16:	db2b      	blt.n	402b70 <memchr+0x60>
  402b18:	f010 0f07 	tst.w	r0, #7
  402b1c:	d008      	beq.n	402b30 <memchr+0x20>
  402b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402b22:	3a01      	subs	r2, #1
  402b24:	428b      	cmp	r3, r1
  402b26:	d02d      	beq.n	402b84 <memchr+0x74>
  402b28:	f010 0f07 	tst.w	r0, #7
  402b2c:	b342      	cbz	r2, 402b80 <memchr+0x70>
  402b2e:	d1f6      	bne.n	402b1e <memchr+0xe>
  402b30:	b4f0      	push	{r4, r5, r6, r7}
  402b32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402b36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402b3a:	f022 0407 	bic.w	r4, r2, #7
  402b3e:	f07f 0700 	mvns.w	r7, #0
  402b42:	2300      	movs	r3, #0
  402b44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402b48:	3c08      	subs	r4, #8
  402b4a:	ea85 0501 	eor.w	r5, r5, r1
  402b4e:	ea86 0601 	eor.w	r6, r6, r1
  402b52:	fa85 f547 	uadd8	r5, r5, r7
  402b56:	faa3 f587 	sel	r5, r3, r7
  402b5a:	fa86 f647 	uadd8	r6, r6, r7
  402b5e:	faa5 f687 	sel	r6, r5, r7
  402b62:	b98e      	cbnz	r6, 402b88 <memchr+0x78>
  402b64:	d1ee      	bne.n	402b44 <memchr+0x34>
  402b66:	bcf0      	pop	{r4, r5, r6, r7}
  402b68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402b6c:	f002 0207 	and.w	r2, r2, #7
  402b70:	b132      	cbz	r2, 402b80 <memchr+0x70>
  402b72:	f810 3b01 	ldrb.w	r3, [r0], #1
  402b76:	3a01      	subs	r2, #1
  402b78:	ea83 0301 	eor.w	r3, r3, r1
  402b7c:	b113      	cbz	r3, 402b84 <memchr+0x74>
  402b7e:	d1f8      	bne.n	402b72 <memchr+0x62>
  402b80:	2000      	movs	r0, #0
  402b82:	4770      	bx	lr
  402b84:	3801      	subs	r0, #1
  402b86:	4770      	bx	lr
  402b88:	2d00      	cmp	r5, #0
  402b8a:	bf06      	itte	eq
  402b8c:	4635      	moveq	r5, r6
  402b8e:	3803      	subeq	r0, #3
  402b90:	3807      	subne	r0, #7
  402b92:	f015 0f01 	tst.w	r5, #1
  402b96:	d107      	bne.n	402ba8 <memchr+0x98>
  402b98:	3001      	adds	r0, #1
  402b9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  402b9e:	bf02      	ittt	eq
  402ba0:	3001      	addeq	r0, #1
  402ba2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402ba6:	3001      	addeq	r0, #1
  402ba8:	bcf0      	pop	{r4, r5, r6, r7}
  402baa:	3801      	subs	r0, #1
  402bac:	4770      	bx	lr
  402bae:	bf00      	nop

00402bb0 <memcmp>:
  402bb0:	2a03      	cmp	r2, #3
  402bb2:	b470      	push	{r4, r5, r6}
  402bb4:	d922      	bls.n	402bfc <memcmp+0x4c>
  402bb6:	ea40 0301 	orr.w	r3, r0, r1
  402bba:	079b      	lsls	r3, r3, #30
  402bbc:	d011      	beq.n	402be2 <memcmp+0x32>
  402bbe:	7803      	ldrb	r3, [r0, #0]
  402bc0:	780c      	ldrb	r4, [r1, #0]
  402bc2:	42a3      	cmp	r3, r4
  402bc4:	d11d      	bne.n	402c02 <memcmp+0x52>
  402bc6:	440a      	add	r2, r1
  402bc8:	3101      	adds	r1, #1
  402bca:	e005      	b.n	402bd8 <memcmp+0x28>
  402bcc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
  402bd4:	42a3      	cmp	r3, r4
  402bd6:	d114      	bne.n	402c02 <memcmp+0x52>
  402bd8:	4291      	cmp	r1, r2
  402bda:	d1f7      	bne.n	402bcc <memcmp+0x1c>
  402bdc:	2000      	movs	r0, #0
  402bde:	bc70      	pop	{r4, r5, r6}
  402be0:	4770      	bx	lr
  402be2:	680d      	ldr	r5, [r1, #0]
  402be4:	6806      	ldr	r6, [r0, #0]
  402be6:	42ae      	cmp	r6, r5
  402be8:	460c      	mov	r4, r1
  402bea:	4603      	mov	r3, r0
  402bec:	f101 0104 	add.w	r1, r1, #4
  402bf0:	f100 0004 	add.w	r0, r0, #4
  402bf4:	d108      	bne.n	402c08 <memcmp+0x58>
  402bf6:	3a04      	subs	r2, #4
  402bf8:	2a03      	cmp	r2, #3
  402bfa:	d8f2      	bhi.n	402be2 <memcmp+0x32>
  402bfc:	2a00      	cmp	r2, #0
  402bfe:	d1de      	bne.n	402bbe <memcmp+0xe>
  402c00:	e7ec      	b.n	402bdc <memcmp+0x2c>
  402c02:	1b18      	subs	r0, r3, r4
  402c04:	bc70      	pop	{r4, r5, r6}
  402c06:	4770      	bx	lr
  402c08:	4621      	mov	r1, r4
  402c0a:	4618      	mov	r0, r3
  402c0c:	e7d7      	b.n	402bbe <memcmp+0xe>
  402c0e:	bf00      	nop

00402c10 <strchr>:
  402c10:	b2c9      	uxtb	r1, r1
  402c12:	2900      	cmp	r1, #0
  402c14:	d041      	beq.n	402c9a <strchr+0x8a>
  402c16:	0782      	lsls	r2, r0, #30
  402c18:	b4f0      	push	{r4, r5, r6, r7}
  402c1a:	d067      	beq.n	402cec <strchr+0xdc>
  402c1c:	7803      	ldrb	r3, [r0, #0]
  402c1e:	2b00      	cmp	r3, #0
  402c20:	d068      	beq.n	402cf4 <strchr+0xe4>
  402c22:	4299      	cmp	r1, r3
  402c24:	d037      	beq.n	402c96 <strchr+0x86>
  402c26:	1c43      	adds	r3, r0, #1
  402c28:	e004      	b.n	402c34 <strchr+0x24>
  402c2a:	f813 0b01 	ldrb.w	r0, [r3], #1
  402c2e:	b390      	cbz	r0, 402c96 <strchr+0x86>
  402c30:	4281      	cmp	r1, r0
  402c32:	d02f      	beq.n	402c94 <strchr+0x84>
  402c34:	079a      	lsls	r2, r3, #30
  402c36:	461c      	mov	r4, r3
  402c38:	d1f7      	bne.n	402c2a <strchr+0x1a>
  402c3a:	6825      	ldr	r5, [r4, #0]
  402c3c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  402c40:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  402c44:	ea83 0605 	eor.w	r6, r3, r5
  402c48:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  402c4c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  402c50:	ea20 0006 	bic.w	r0, r0, r6
  402c54:	ea22 0205 	bic.w	r2, r2, r5
  402c58:	4302      	orrs	r2, r0
  402c5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402c5e:	d111      	bne.n	402c84 <strchr+0x74>
  402c60:	4620      	mov	r0, r4
  402c62:	f850 6f04 	ldr.w	r6, [r0, #4]!
  402c66:	ea83 0706 	eor.w	r7, r3, r6
  402c6a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  402c6e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  402c72:	ea25 0507 	bic.w	r5, r5, r7
  402c76:	ea22 0206 	bic.w	r2, r2, r6
  402c7a:	432a      	orrs	r2, r5
  402c7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402c80:	d0ef      	beq.n	402c62 <strchr+0x52>
  402c82:	4604      	mov	r4, r0
  402c84:	7820      	ldrb	r0, [r4, #0]
  402c86:	b918      	cbnz	r0, 402c90 <strchr+0x80>
  402c88:	e005      	b.n	402c96 <strchr+0x86>
  402c8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  402c8e:	b110      	cbz	r0, 402c96 <strchr+0x86>
  402c90:	4281      	cmp	r1, r0
  402c92:	d1fa      	bne.n	402c8a <strchr+0x7a>
  402c94:	4620      	mov	r0, r4
  402c96:	bcf0      	pop	{r4, r5, r6, r7}
  402c98:	4770      	bx	lr
  402c9a:	0783      	lsls	r3, r0, #30
  402c9c:	d024      	beq.n	402ce8 <strchr+0xd8>
  402c9e:	7803      	ldrb	r3, [r0, #0]
  402ca0:	2b00      	cmp	r3, #0
  402ca2:	d0f9      	beq.n	402c98 <strchr+0x88>
  402ca4:	1c43      	adds	r3, r0, #1
  402ca6:	e003      	b.n	402cb0 <strchr+0xa0>
  402ca8:	7802      	ldrb	r2, [r0, #0]
  402caa:	3301      	adds	r3, #1
  402cac:	2a00      	cmp	r2, #0
  402cae:	d0f3      	beq.n	402c98 <strchr+0x88>
  402cb0:	0799      	lsls	r1, r3, #30
  402cb2:	4618      	mov	r0, r3
  402cb4:	d1f8      	bne.n	402ca8 <strchr+0x98>
  402cb6:	6819      	ldr	r1, [r3, #0]
  402cb8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402cbc:	ea22 0201 	bic.w	r2, r2, r1
  402cc0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402cc4:	d108      	bne.n	402cd8 <strchr+0xc8>
  402cc6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402cca:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  402cce:	ea22 0201 	bic.w	r2, r2, r1
  402cd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402cd6:	d0f6      	beq.n	402cc6 <strchr+0xb6>
  402cd8:	781a      	ldrb	r2, [r3, #0]
  402cda:	4618      	mov	r0, r3
  402cdc:	b142      	cbz	r2, 402cf0 <strchr+0xe0>
  402cde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402ce2:	2b00      	cmp	r3, #0
  402ce4:	d1fb      	bne.n	402cde <strchr+0xce>
  402ce6:	4770      	bx	lr
  402ce8:	4603      	mov	r3, r0
  402cea:	e7e4      	b.n	402cb6 <strchr+0xa6>
  402cec:	4604      	mov	r4, r0
  402cee:	e7a4      	b.n	402c3a <strchr+0x2a>
  402cf0:	4618      	mov	r0, r3
  402cf2:	4770      	bx	lr
  402cf4:	4618      	mov	r0, r3
  402cf6:	e7ce      	b.n	402c96 <strchr+0x86>

00402cf8 <__register_exitproc>:
  402cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cfc:	4c25      	ldr	r4, [pc, #148]	; (402d94 <__register_exitproc+0x9c>)
  402cfe:	6825      	ldr	r5, [r4, #0]
  402d00:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402d04:	4606      	mov	r6, r0
  402d06:	4688      	mov	r8, r1
  402d08:	4692      	mov	sl, r2
  402d0a:	4699      	mov	r9, r3
  402d0c:	b3c4      	cbz	r4, 402d80 <__register_exitproc+0x88>
  402d0e:	6860      	ldr	r0, [r4, #4]
  402d10:	281f      	cmp	r0, #31
  402d12:	dc17      	bgt.n	402d44 <__register_exitproc+0x4c>
  402d14:	1c43      	adds	r3, r0, #1
  402d16:	b176      	cbz	r6, 402d36 <__register_exitproc+0x3e>
  402d18:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402d1c:	2201      	movs	r2, #1
  402d1e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402d22:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402d26:	4082      	lsls	r2, r0
  402d28:	4311      	orrs	r1, r2
  402d2a:	2e02      	cmp	r6, #2
  402d2c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402d30:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402d34:	d01e      	beq.n	402d74 <__register_exitproc+0x7c>
  402d36:	3002      	adds	r0, #2
  402d38:	6063      	str	r3, [r4, #4]
  402d3a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402d3e:	2000      	movs	r0, #0
  402d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d44:	4b14      	ldr	r3, [pc, #80]	; (402d98 <__register_exitproc+0xa0>)
  402d46:	b303      	cbz	r3, 402d8a <__register_exitproc+0x92>
  402d48:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d4c:	f3af 8000 	nop.w
  402d50:	4604      	mov	r4, r0
  402d52:	b1d0      	cbz	r0, 402d8a <__register_exitproc+0x92>
  402d54:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402d58:	2700      	movs	r7, #0
  402d5a:	e880 0088 	stmia.w	r0, {r3, r7}
  402d5e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402d62:	4638      	mov	r0, r7
  402d64:	2301      	movs	r3, #1
  402d66:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402d6a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402d6e:	2e00      	cmp	r6, #0
  402d70:	d0e1      	beq.n	402d36 <__register_exitproc+0x3e>
  402d72:	e7d1      	b.n	402d18 <__register_exitproc+0x20>
  402d74:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402d78:	430a      	orrs	r2, r1
  402d7a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402d7e:	e7da      	b.n	402d36 <__register_exitproc+0x3e>
  402d80:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402d84:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402d88:	e7c1      	b.n	402d0e <__register_exitproc+0x16>
  402d8a:	f04f 30ff 	mov.w	r0, #4294967295
  402d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d92:	bf00      	nop
  402d94:	00402f6c 	.word	0x00402f6c
  402d98:	00000000 	.word	0x00000000
  402d9c:	000e1000 	.word	0x000e1000
  402da0:	000000c0 	.word	0x000000c0
  402da4:	00000800 	.word	0x00000800
	...
  402db4:	20656466 	.word	0x20656466
  402db8:	67616d69 	.word	0x67616d69
  402dbc:	706a2e65 	.word	0x706a2e65
  402dc0:	000a0d67 	.word	0x000a0d67
  402dc4:	20726366 	.word	0x20726366
  402dc8:	67616d69 	.word	0x67616d69
  402dcc:	706a2e65 	.word	0x706a2e65
  402dd0:	64252067 	.word	0x64252067
  402dd4:	00000a0d 	.word	0x00000a0d
  402dd8:	736f6c63 	.word	0x736f6c63
  402ddc:	6c612065 	.word	0x6c612065
  402de0:	000a0d6c 	.word	0x000a0d6c
  402de4:	70747468 	.word	0x70747468
  402de8:	736f705f 	.word	0x736f705f
  402dec:	6f2d2074 	.word	0x6f2d2074
  402df0:	74746820 	.word	0x74746820
  402df4:	2f3a7370 	.word	0x2f3a7370
  402df8:	6769622f 	.word	0x6769622f
  402dfc:	746f7262 	.word	0x746f7262
  402e00:	73726568 	.word	0x73726568
  402e04:	2e736565 	.word	0x2e736565
  402e08:	702f656d 	.word	0x702f656d
  402e0c:	5f74736f 	.word	0x5f74736f
  402e10:	67616d69 	.word	0x67616d69
  402e14:	70612065 	.word	0x70612065
  402e18:	63696c70 	.word	0x63696c70
  402e1c:	6f697461 	.word	0x6f697461
  402e20:	736a2f6e 	.word	0x736a2f6e
  402e24:	0a0d6e6f 	.word	0x0a0d6e6f
  402e28:	00000000 	.word	0x00000000
  402e2c:	70747468 	.word	0x70747468
  402e30:	6464615f 	.word	0x6464615f
  402e34:	6165685f 	.word	0x6165685f
  402e38:	20726564 	.word	0x20726564
  402e3c:	656d2030 	.word	0x656d2030
  402e40:	67617373 	.word	0x67617373
  402e44:	79742d65 	.word	0x79742d65
  402e48:	69206570 	.word	0x69206570
  402e4c:	6567616d 	.word	0x6567616d
  402e50:	6e69622d 	.word	0x6e69622d
  402e54:	00000a0d 	.word	0x00000a0d
  402e58:	74697277 	.word	0x74697277
  402e5c:	20302065 	.word	0x20302065
  402e60:	0a0d6425 	.word	0x0a0d6425
  402e64:	00000000 	.word	0x00000000
  402e68:	70747468 	.word	0x70747468
  402e6c:	6165725f 	.word	0x6165725f
  402e70:	74735f64 	.word	0x74735f64
  402e74:	73757461 	.word	0x73757461
  402e78:	0a0d3020 	.word	0x0a0d3020
  402e7c:	00000000 	.word	0x00000000
  402e80:	6e65704f 	.word	0x6e65704f
  402e84:	00006465 	.word	0x00006465
  402e88:	70747468 	.word	0x70747468
  402e8c:	6464615f 	.word	0x6464615f
  402e90:	6165685f 	.word	0x6165685f
  402e94:	20726564 	.word	0x20726564
  402e98:	656d2030 	.word	0x656d2030
  402e9c:	67617373 	.word	0x67617373
  402ea0:	79742d65 	.word	0x79742d65
  402ea4:	61206570 	.word	0x61206570
  402ea8:	6f696475 	.word	0x6f696475
  402eac:	6e69622d 	.word	0x6e69622d
  402eb0:	00000a0d 	.word	0x00000a0d
  402eb4:	20656466 	.word	0x20656466
  402eb8:	6d746162 	.word	0x6d746162
  402ebc:	742e6e61 	.word	0x742e6e61
  402ec0:	0a0d7478 	.word	0x0a0d7478
  402ec4:	00000000 	.word	0x00000000
  402ec8:	20726366 	.word	0x20726366
  402ecc:	6d746162 	.word	0x6d746162
  402ed0:	742e6e61 	.word	0x742e6e61
  402ed4:	25207478 	.word	0x25207478
  402ed8:	000a0d64 	.word	0x000a0d64
  402edc:	75746573 	.word	0x75746573
  402ee0:	65772070 	.word	0x65772070
  402ee4:	000a0d62 	.word	0x000a0d62
  402ee8:	7373415b 	.word	0x7373415b
  402eec:	6169636f 	.word	0x6169636f
  402ef0:	5d646574 	.word	0x5d646574
  402ef4:	00000a0d 	.word	0x00000a0d
  402ef8:	20746567 	.word	0x20746567
  402efc:	74737973 	.word	0x74737973
  402f00:	732e6d65 	.word	0x732e6d65
  402f04:	6d656661 	.word	0x6d656661
  402f08:	2e65646f 	.word	0x2e65646f
  402f0c:	74617473 	.word	0x74617473
  402f10:	0a0d7375 	.word	0x0a0d7375
  402f14:	00000000 	.word	0x00000000
  402f18:	6c756166 	.word	0x6c756166
  402f1c:	705f7374 	.word	0x705f7374
  402f20:	746e6972 	.word	0x746e6972
  402f24:	00000a0d 	.word	0x00000a0d
  402f28:	6c756166 	.word	0x6c756166
  402f2c:	725f7374 	.word	0x725f7374
  402f30:	74657365 	.word	0x74657365
  402f34:	00000a0d 	.word	0x00000a0d
  402f38:	6f626572 	.word	0x6f626572
  402f3c:	0a0d746f 	.word	0x0a0d746f
  402f40:	00000000 	.word	0x00000000
  402f44:	20746573 	.word	0x20746573
  402f48:	63207973 	.word	0x63207973
  402f4c:	6f206520 	.word	0x6f206520
  402f50:	0a0d6666 	.word	0x0a0d6666
  402f54:	00000000 	.word	0x00000000
  402f58:	20746573 	.word	0x20746573
  402f5c:	63207973 	.word	0x63207973
  402f60:	6f207020 	.word	0x6f207020
  402f64:	0a0d6666 	.word	0x0a0d6666
  402f68:	00000000 	.word	0x00000000

00402f6c <_global_impure_ptr>:
  402f6c:	20000010                                ... 

00402f70 <_init>:
  402f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f72:	bf00      	nop
  402f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402f76:	bc08      	pop	{r3}
  402f78:	469e      	mov	lr, r3
  402f7a:	4770      	bx	lr

00402f7c <__init_array_start>:
  402f7c:	00402ab9 	.word	0x00402ab9

00402f80 <__frame_dummy_init_array_entry>:
  402f80:	004000f1                                ..@.

00402f84 <_fini>:
  402f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f86:	bf00      	nop
  402f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402f8a:	bc08      	pop	{r3}
  402f8c:	469e      	mov	lr, r3
  402f8e:	4770      	bx	lr

00402f90 <__fini_array_start>:
  402f90:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
